package com.edhanvantari.action;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.util.TreeMap;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.Set;
import java.util.concurrent.TimeUnit;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.ContentType;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.util.EntityUtils;
import org.apache.struts2.ServletActionContext;
import org.apache.struts2.interceptor.ServletRequestAware;
import org.apache.struts2.interceptor.ServletResponseAware;
import org.apache.struts2.interceptor.SessionAware;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.support.ui.Select;

import com.amazonaws.auth.AWSCredentials;
import com.amazonaws.auth.AWSStaticCredentialsProvider;
import com.amazonaws.auth.BasicAWSCredentials;
import com.amazonaws.services.polly.presign.SynthesizeSpeechPresignRequest;
import com.amazonaws.services.s3.AmazonS3;
import com.amazonaws.services.s3.AmazonS3ClientBuilder;
import com.amazonaws.services.s3.model.GetObjectRequest;
import com.amazonaws.services.s3.model.S3Object;
import com.amazonaws.services.s3.model.S3ObjectInputStream;
import com.amazonaws.util.IOUtils;
import com.edhanvantari.daoImpl.ClinicDAOImpl;
import com.edhanvantari.daoImpl.ConfigurationDAOImpl;
import com.edhanvantari.daoImpl.LoginDAOImpl;
import com.edhanvantari.daoImpl.PatientDAOImpl;
import com.edhanvantari.daoImpl.PrescriptionManagementDAOImpl;
import com.edhanvantari.daoImpl.RegistrationDAOImpl;
import com.edhanvantari.daoInf.ClinicDAOInf;
import com.edhanvantari.daoInf.ConfigurationDAOInf;
import com.edhanvantari.daoInf.LoginDAOInf;
import com.edhanvantari.daoInf.PatientDAOInf;
import com.edhanvantari.daoInf.PrescriptionManagementDAOInf;
import com.edhanvantari.daoInf.RegistrationDAOinf;
import com.edhanvantari.form.ClinicForm;
import com.edhanvantari.form.ConfigurationForm;
import com.edhanvantari.form.LoginForm;
import com.edhanvantari.form.PatientForm;
import com.edhanvantari.form.PrescriptionManagementForm;
import com.edhanvantari.service.eDhanvantariServiceImpl;
import com.edhanvantari.service.eDhanvantariServiceInf;
import com.edhanvantari.util.AWSS3Connect;
import com.edhanvantari.util.ActivityStatus;
import com.edhanvantari.util.ConfigXMLUtil;
import com.edhanvantari.util.ConfigurationUtil;
import com.edhanvantari.util.ConvertToPDFUtil;
import com.edhanvantari.util.EmailUtil;
import com.edhanvantari.util.SMSSender;
import com.google.gson.Gson;
import com.opensymphony.xwork2.ActionSupport;
import com.opensymphony.xwork2.ModelDriven;

//import junit.framework.Test;
import okhttp3.MediaType;
import okhttp3.MultipartBody;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;

public class PatientAction extends ActionSupport
		implements ModelDriven<PatientForm>, ServletRequestAware, ServletResponseAware, SessionAware {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	PatientForm patientForm = new PatientForm();

	eDhanvantariServiceInf serviceInf = null;

	String message = "error";

	int reportTestID = 0;

	List<PatientForm> patientList = null;
	List<PatientForm> patientVisitList = null;
	List<PatientForm> searchPatientList = null;
	List<PatientForm> CRFList = null;

	PatientDAOInf patientDAOInf = null;

	ConfigurationDAOInf configDAOInf = null;

	List<PatientForm> newPatientList = new ArrayList<PatientForm>();
	HashMap<String, String> diagnoseList = new HashMap<String, String>();
	HashMap<String, String> getGroupTestList = new HashMap<String, String>();
	HashMap<String, String> getSingleTestList = new HashMap<String, String>();
	HashMap<String, String> drugList = new HashMap<String, String>();
	HashMap<String, String> InvestigationList = new HashMap<String, String>();
	HashMap<String, String> DiagnosticList1 = new HashMap<String, String>();
	HashMap<String, String> ProcedureList = new HashMap<String, String>();
	HashMap<Integer, String> reportListByVisitID = new HashMap<Integer, String>();
	TreeMap<String, TreeMap<String, TreeMap<Integer, PatientForm>>> subGroups = new TreeMap<>();

	private String txtNormal = "";

	HashMap<String, String> PVComplaints = null;
	LinkedHashMap<String, String> frequencyList = new LinkedHashMap<String, String>();

	ConfigurationUtil configurationUtil = new ConfigurationUtil();

	private int monthCount;

	List<String> testTypeList = new ArrayList<String>();

	ConfigXMLUtil xmlUtil = new ConfigXMLUtil();

	ConfigurationUtil util = new ConfigurationUtil();

	List<PatientForm> signedUpUserList = null;
	List<PatientForm> prescriptionList = null;
	List<PatientForm> symptomList = null;
	List<PatientForm> complaintList = null;
	List<PatientForm> historyList = null;
	List<PatientForm> medicationList = null;
	HashMap<String, String> chargeTypeList = new HashMap<String, String>();
	List<PatientForm> billList = null;
	List<PatientForm> visitList = null;
	List<PatientForm> labReportList = null;
	List<PatientForm> lasteEnteredVisitList = null;
	List<PatientForm> lasteEnteredPrescList = null;
	List<PatientForm> lasteEnteredBillList = null;
	List<PatientForm> lastEneteredOpticianList = null;
	HashMap<String, String> doctorList = new HashMap<String, String>();
	HashMap<Integer, String> doctorList1 = new HashMap<Integer, String>();
	HashMap<Integer, String> referringDoctorList = new HashMap<Integer, String>();
	HashMap<String, String> refDocList = new HashMap<String, String>();
	List<PatientForm> IPDContinuationSheetList = null;
	List<PatientForm> IPDComplaintsList = null;
	List<PatientForm> LabInvastigationList = null;
	List<PatientForm> appointmentList = null;
	List<PatientForm> appointmentWeekList = null;
	List<PatientForm> appointmentMonthList = null;
	List<PatientForm> OPDVisitList = null;
	List<PatientForm> onEaminationList = null;
	List<PatientForm> MedicalHistory = null;
	List<PatientForm> FamilyHistory = null;
	List<PatientForm> PersonalHistory = null;
	HashMap<String, String> resayuDiagnosisList = new HashMap<String, String>();

	List<PatientForm> InvestigationTestsList = null;
	List<PatientForm> diagnosticList = null;
	List<PatientForm> proceduresList = null;

	List<String> surveyCenterList = null;

	HashMap<Integer, String> categoryList = null;
	HashMap<Integer, String> clinicList = null;

	HashMap<String, String> SMSTemplateTitleList = null;

	List<PatientForm> groupTestList = null;

	HttpServletRequest request;
	HttpServletResponse response;

	List<String> hourList = null;

	private String pageName;

	private Map<String, Object> session = null;

	List<PrescriptionManagementForm> OPDChargesList = null;

	List<PrescriptionManagementForm> LabTestList = null;

	List<PatientForm> InjectionPrescriptionList = null;
	HashMap<Integer, String> InjectionList = new HashMap<Integer, String>();
	List<PatientForm> TabletPrescriptionList = null;
	HashMap<Integer, String> TabletList = new HashMap<Integer, String>();
	HashMap<String, String> DiagnosisList = new HashMap<String, String>();

	HashMap<String, String> DiagnosisList1 = new HashMap<String, String>();

	List<PatientForm> LiquidPrescriptionList = null;
	HashMap<Integer, String> LiquidList = new HashMap<Integer, String>();

	List<PatientForm> IPDTariffChargeList = null;
	List<PatientForm> IPDConsultantChargeList = null;
	List<PatientForm> OTChargeList = null;

	HashMap<Integer, String> IPDChargesList = null;

	List<PatientForm> IPDBillTariffChargeList = null;
	List<PatientForm> IPDBillConsultantChargeList = null;
	List<PatientForm> OTBillChargeList = null;

	List<PatientForm> otherInvstigationList = null;
	List<PatientForm> vitalSignsList = null;

	HashMap<Integer, String> PatientDetailsList = new HashMap<Integer, String>();

	List<PatientForm> labTestListNew = new ArrayList<PatientForm>();

	HashMap<Integer, String> mdDetailsList = null;

	HashMap<String, String> labTestValueList = null;

	HashMap<String, HashMap<String, String>> groupLabTestMap = null;

	HashMap<String, String> labTestValueListNew = null;
	HashMap<String, String> labTestValueListNew1 = null;
	HashMap<String, String> genderMap = new HashMap<String, String>();

	HashMap<Integer, String> reportList = null;

	HashMap<String, String> patientDetails = new HashMap<String, String>();

	List<PatientForm> orthoDiagnosisList = null;

	List<PatientForm> orthoBillItemList = null;

	/**
	 * @return the session
	 */
	public Map<String, Object> getSession() {
		return session;
	}

	/**
	 * 
	 * @return String
	 * @throws Exception
	 */
	public String addPatient() throws Exception {
		serviceInf = new eDhanvantariServiceImpl();
		patientDAOInf = new PatientDAOImpl();

		LoginDAOInf daoInf = new LoginDAOImpl();

		/*
		 * Getting clinicID from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");

		patientForm.setClinicID(loginForm.getClinicID());
		patientForm.setClinicSuffix(loginForm.getClinicSuffix());

		message = serviceInf.addPatient(patientForm, loginForm.getPracticeID());

		/*
		 * Getting form name to be display based on logged in User
		 */
		String[] formNameArray = loginForm.getPatientJSPName().split("&");

		System.out.println("Add Patient JSP Page name for logged in user is ::: " + formNameArray[0].trim());

		// Setting add opd page name value in pageName variable
		setPageName(formNameArray[0].trim());

		if (message.equalsIgnoreCase("success")) {

			addActionMessage("New patient added successfully.");

			// Check if third party api flag is set for the practice, if so then proceed
			// further
			if (loginForm.getThirdPartyAPIIntegration() == 1) {

				// Check if the patient exists into the CRM with the same mobile no
				String apiResponse = "";

				String crmContactNo = "";

				try (CloseableHttpClient httpClient = HttpClients.createDefault()) {
					// URL of the API endpoint

					HttpPost httpPost = new HttpPost("https://pec.360oneview.com/fetch_contact.php");
					HttpPost postRequest = httpPost;

					// Form data to send
					String formData = "mobile=" + patientForm.getMobile();

					// Set the entity with the form data

					StringEntity entity = new StringEntity(formData, ContentType.APPLICATION_FORM_URLENCODED);
					postRequest.setEntity(entity);

					// Execute the request
					try (CloseableHttpResponse response = httpClient.execute(postRequest)) {
						// Get the response code
						if (response.getStatusLine().getStatusCode() == 200) {
							apiResponse = EntityUtils.toString(response.getEntity());

							org.json.JSONArray diagnosisJSONArray = new org.json.JSONArray("[" + apiResponse + "]");

							for (int i = 0; i < diagnosisJSONArray.length(); i++) {
								org.json.JSONObject diagnosisJSONObject = diagnosisJSONArray.getJSONObject(i);

								crmContactNo = diagnosisJSONObject.getString("contactid");

							}
						} else {
							apiResponse = "Error: " + response.getStatusLine().getStatusCode();
						}
					}

				} catch (Exception e) {
					apiResponse = "Exception: " + e.getMessage();
				}

				System.out.println(
						"CRM Fetch contact API response:::" + apiResponse + " & CRM contactid:::" + crmContactNo);

				if (!(crmContactNo.isEmpty() && crmContactNo.equals("null"))) {

					/*
					 * Adding patient to CRM
					 */
					String apiUrl = "https://pec.360oneview.com/create_contact.php";

					try {

						OkHttpClient client = new OkHttpClient().newBuilder().build();
						MediaType mediaType = MediaType.parse("text/plain");
						RequestBody body = new MultipartBody.Builder().setType(MultipartBody.FORM)
								.addFormDataPart("email", patientForm.getEmailID())
								.addFormDataPart("firstname", patientForm.getFirstName())
								.addFormDataPart("lastname", patientForm.getLastName())
								.addFormDataPart("mobile", patientForm.getMobile())
								.addFormDataPart("birthday", patientForm.getDateOfBirth())
								.addFormDataPart("Appointment_Type", "")
								.addFormDataPart("Gender", patientForm.getGender())
								.addFormDataPart("Referred_By", patientForm.getRefDoctor())
								.addFormDataPart("Referral_Doctor", "").addFormDataPart("Aggregator_Name", "")
								.addFormDataPart("Registration_Number", "").addFormDataPart("Role", "")
								.addFormDataPart("mailingstreet", "").addFormDataPart("mailingcity", "")
								.addFormDataPart("mailingstate", "").addFormDataPart("mailingzip", "")
								.addFormDataPart("mailingcountry", "").build();
						Request requestAPI = new Request.Builder().url("https://pec.360oneview.com/create_contact.php")
								.method("POST", body).build();
						Response response = client.newCall(requestAPI).execute();

						String jsonResponseData = response.body().string();

						System.out.println(jsonResponseData);

						System.out.println(response.body().toString());

					} catch (Exception e) {
						System.out.println("Exception occurred whie executing CRM API:::" + e.getMessage());
					}

				}

			}

			// Resetting values for all fields
			patientForm = new PatientForm();

			patientList = new ArrayList<PatientForm>();

			// Setting default value of city, state and country
			patientForm.setCity("Pune");
			patientForm.setState("Maharastra");
			patientForm.setCountry("India");
			patientForm.setEmCity("Pune");
			patientForm.setEmState("Maharastra");
			patientForm.setEmCountry("India");

			patientList.add(patientForm);

			/*
			 * Retrieve Last enetred patientID
			 */
			patientForm.setPatientID(patientDAOInf.retrievePatientID());

			if (loginForm.getUserType().equals("clinician") || loginForm.getUserType().equals("manager")) {
				request.setAttribute("clinician", "Yes");
				loginForm.setPatientID(patientForm.getPatientID());

			} else {
				request.setAttribute("clinician", "No");
			}

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Add Patient", loginForm.getUserID());

			return SUCCESS;

		} else if (message.equalsIgnoreCase("input")) {

			addActionMessage(
					"You have following patients with matching details already registered in the system. Please verify if you want to select an existing user or add a new user.");

			newPatientList = new ArrayList<PatientForm>();

			// For retrieving previously filled values by user
			newPatientList.add(patientForm);

			request.setAttribute("clinician", "No");

			// For retrieving matched list
			patientList = patientDAOInf.retrievePatientNameDOBList(patientForm);

			return INPUT;
		} else {

			addActionError("Failed to register patient.Please check server logs for more details.");

			patientList = new ArrayList<PatientForm>();

			patientList.add(patientForm);

			request.setAttribute("clinician", "No");

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Add Patient Exception occurred", loginForm.getUserID());

			return ERROR;
		}
	}

	/**
	 * 
	 * @return
	 * @throws Exception
	 */
	public String searchEditPatient() throws Exception {

		patientDAOInf = new PatientDAOImpl();
		String fromDate = "";
		String toDate = "";

		/*
		 * Getting clinicID from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");

		/*
		 * if (patientForm.getSearchCriteria().equals("VisitDate")) { if
		 * (!patientForm.getFromDate().equals("") &&
		 * !patientForm.getToDate().equals("")) { fromDate = patientForm.getFromDate();
		 * toDate = patientForm.getToDate(); } else { fromDate =
		 * patientForm.getFromDate(); toDate = ""; } } else { fromDate = ""; toDate =
		 * ""; }
		 */

		searchPatientList = patientDAOInf.searchPatientByPatientName(patientForm.getSearchName(),
				loginForm.getPracticeID(), loginForm.getClinicID(), patientForm.getSearchCriteria(), fromDate, toDate);

		if (searchPatientList.size() > 0) {

			request.setAttribute("patientListEnable", "patientSearchListEnable");

			return SUCCESS;

		} else {

			addActionError(
					"No patient found for " + patientForm.getSearchCriteria() + " : " + patientForm.getSearchName());

			return ERROR;

		}
	}

	/**
	 * 
	 * @return
	 * @throws Exception
	 */
	public String searchInactivePatient() throws Exception {

		patientDAOInf = new PatientDAOImpl();

		/*
		 * Getting clinicID from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");

		searchPatientList = patientDAOInf.searchInactivePatientByPatientName(patientForm.getSearchPatientName(),
				loginForm.getPracticeID(), loginForm.getClinicID(), patientForm.getSearchCriteria());

		if (searchPatientList.size() > 0) {

			request.setAttribute("patientListEnable", "patientSearchListEnable");

			return SUCCESS;

		} else {

			addActionError("No inactive patient found for name: " + patientForm.getSearchPatientName());

			return ERROR;

		}
	}

	/**
	 * 
	 * @return String
	 * @throws Exception
	 */
	public String editPatientList() throws Exception {

		return SUCCESS;
	}

	/**
	 * 
	 * @return
	 * @throws Exception
	 */
	public String renderEditPatientList() throws Exception {
		patientDAOInf = new PatientDAOImpl();

		/*
		 * Getting clinicID from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");

		patientList = patientDAOInf.retrievePatientList(loginForm.getPracticeID(), loginForm.getClinicID());

		if (patientList.size() > 0) {

			request.setAttribute("patientListEnable", "patientListEnable");

			return SUCCESS;

		} else {

			if (loginForm.getUserType().equals("surveyor")) {
				addActionError("No participant found. Please add new patient.");
			} else {
				addActionError("No patient found. Please add new patient.");
			}

			return ERROR;

		}

	}

	/**
	 * 
	 * @return
	 * @throws Exception
	 */
	public String renderViewInactivePatientList() throws Exception {
		patientDAOInf = new PatientDAOImpl();

		/*
		 * Getting clinicID from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");

		patientList = patientDAOInf.retrieveInactivePatientList(loginForm.getPracticeID(), loginForm.getClinicID());

		if (patientList.size() > 0) {

			request.setAttribute("patientListEnable", "patientListEnable");

			return SUCCESS;

		} else {

			addActionError("No inactive patient found.");

			return ERROR;

		}

	}

	/**
	 * 
	 * @return String
	 * @throws Exception
	 */
	public String renderEditPatient() throws Exception {

		patientDAOInf = new PatientDAOImpl();

		/*
		 * Getting clinicID from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");

		referringDoctorList = configurationUtil.getReferringDoctorList1(loginForm.getPracticeID());

		refDocList = configurationUtil.getRefDocList(loginForm.getPracticeID());

		/*
		 * Getting form name to be display based on logged in User
		 */
		String[] formNameArray = loginForm.getPatientJSPName().split("&");

		System.out.println("Edit Patient JSP Page name for logged in user is ::: " + formNameArray[1].trim());

		// Setting add opd page name value in pageName variable
		setPageName(formNameArray[1].trim());

		patientList = patientDAOInf.retrivePatientListByID(patientForm.getPatientID(), loginForm.getClinicID());

		return SUCCESS;
	}

	public String renderPatientProfile() throws Exception {

		patientDAOInf = new PatientDAOImpl();

		/*
		 * Getting clinicID from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");

		patientList = patientDAOInf.retrivePatientListByID(patientForm.getPatientID(), loginForm.getClinicID());

		return SUCCESS;
	}

	public String renderPatientVisitList() throws Exception {
		LoginDAOInf daoInf = new LoginDAOImpl();
		patientDAOInf = new PatientDAOImpl();

		/*
		 * Getting clinicID from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");
		System.out.println("////inside render patienton:" + loginForm.getPatientID() + "  " + loginForm.getClinicID());
		patientVisitList = daoInf.retrievePatientVisitList(loginForm.getPatientID(), loginForm.getClinicID());
		if (patientVisitList.size() > 0) {

			request.setAttribute("patientListEnable", "patientListEnable");

		} else {

			addActionError("No Visit found. Please add new visit.");

		}
		return SUCCESS;
	}

	/**
	 * 
	 * @return String
	 * @throws Exception
	 */
	public String editPatient() throws Exception {
		serviceInf = new eDhanvantariServiceImpl();
		patientDAOInf = new PatientDAOImpl();

		LoginDAOInf daoInf = new LoginDAOImpl();

		/*
		 * Getting clinicID from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");

		/*
		 * Getting form name to be display based on logged in User
		 */
		String[] formNameArray = loginForm.getPatientJSPName().split("&");

		System.out.println("Edit Patient JSP Page name for logged in user is ::: " + formNameArray[1].trim());

		// Setting add opd page name value in pageName variable
		setPageName(formNameArray[1].trim());

		patientForm.setClinicID(loginForm.getClinicID());
		patientForm.setClinicSuffix(loginForm.getClinicSuffix());
		patientForm.setPracticeID(loginForm.getPracticeID());

		message = serviceInf.editPatientDetail(patientForm);
		if (message.equalsIgnoreCase("success")) {
			System.out.println("Patient detail updates successfully.");
			System.out.println("Patient id after everything is :::: " + patientForm.getPatientID());
			addActionMessage("Successfully updated patient details.");
			patientList = patientDAOInf.retrivePatientListByID(patientForm.getPatientID(), loginForm.getClinicID());

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Edit Patient", loginForm.getUserID());

			return SUCCESS;

		} else if (message.equalsIgnoreCase("input")) {
			addActionError(
					"Patient with same First Name and Last Name already exists.  Try using different credentials.");
			patientList = patientDAOInf.retrivePatientListByID(patientForm.getPatientID(), loginForm.getClinicID());

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Edit Patient Exception occurred", loginForm.getUserID());

			return INPUT;
		} else {
			System.out.println("Exception occurred while updating patient detail.");
			addActionError("Exception occurred while updating patient detail. Please check the logs for more details.");
			patientList = patientDAOInf.retrivePatientListByID(patientForm.getPatientID(), loginForm.getClinicID());

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Edit Patient Exception occurred", loginForm.getUserID());

			return ERROR;
		}
	}

	public String editPatientProfile() throws Exception {
		serviceInf = new eDhanvantariServiceImpl();
		patientDAOInf = new PatientDAOImpl();

		LoginDAOInf daoInf = new LoginDAOImpl();

		/*
		 * Getting clinicID from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");

		patientForm.setClinicID(loginForm.getClinicID());
		patientForm.setClinicSuffix(loginForm.getClinicSuffix());
		patientForm.setPracticeID(loginForm.getPracticeID());

		message = serviceInf.editPatientDetail(patientForm);
		if (message.equalsIgnoreCase("success")) {
			System.out.println("Patient detail updates successfully.");
			System.out.println("Patient id after everything is :::: " + patientForm.getPatientID());
			addActionMessage("Successfully updated patient details.");
			patientList = patientDAOInf.retrivePatientListByID(patientForm.getPatientID(), loginForm.getClinicID());

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Edit Patient", loginForm.getUserID());

			return SUCCESS;

		} else if (message.equalsIgnoreCase("input")) {
			addActionError(
					"Patient with same First Name and Last Name already exists.  Try using different credentials.");
			patientList = patientDAOInf.retrivePatientListByID(patientForm.getPatientID(), loginForm.getClinicID());

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Edit Patient Exception occurred", loginForm.getUserID());

			return INPUT;
		} else {
			System.out.println("Exception occurred while updating patient detail.");
			addActionError("Exception occurred while updating patient detail. Please check the logs for more details.");
			patientList = patientDAOInf.retrivePatientListByID(patientForm.getPatientID(), loginForm.getClinicID());

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Edit Patient Exception occurred", loginForm.getUserID());

			return ERROR;
		}
	}

	/**
	 * 
	 * @return String
	 * @throws Exception
	 */
	public String insertPatient() throws Exception {
		serviceInf = new eDhanvantariServiceImpl();

		patientDAOInf = new PatientDAOImpl();

		LoginDAOInf daoInf = new LoginDAOImpl();

		/*
		 * Getting clinicID from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");

		patientForm.setClinicID(loginForm.getClinicID());
		patientForm.setClinicSuffix(loginForm.getClinicSuffix());

		message = serviceInf.insertPatient(patientForm, loginForm.getPracticeID());

		/*
		 * Getting form name to be display based on logged in User
		 */
		String[] formNameArray = loginForm.getPatientJSPName().split("&");

		System.out.println("Add Patient JSP Page name for logged in user is ::: " + formNameArray[0].trim());

		// Setting add opd page name value in pageName variable
		setPageName(formNameArray[0].trim());

		if (message.equals("success")) {

			addActionMessage("New patient added successfully.");

			// Check if third party api flag is set for the practice, if so then proceed
			// further
			if (loginForm.getThirdPartyAPIIntegration() == 1) {

				// Check if the patient exists into the CRM with the same mobile no
				String apiResponse = "";

				String crmContactNo = "";

				try (CloseableHttpClient httpClient = HttpClients.createDefault()) {
					// URL of the API endpoint

					HttpPost httpPost = new HttpPost("https://pec.360oneview.com/fetch_contact.php");
					HttpPost postRequest = httpPost;

					// Form data to send
					String formData = "mobile=" + patientForm.getMobile();

					// Set the entity with the form data

					StringEntity entity = new StringEntity(formData, ContentType.APPLICATION_FORM_URLENCODED);
					postRequest.setEntity(entity);

					// Execute the request
					try (CloseableHttpResponse response = httpClient.execute(postRequest)) {
						// Get the response code
						if (response.getStatusLine().getStatusCode() == 200) {
							apiResponse = EntityUtils.toString(response.getEntity());

							org.json.JSONArray diagnosisJSONArray = new org.json.JSONArray("[" + apiResponse + "]");

							for (int i = 0; i < diagnosisJSONArray.length(); i++) {
								org.json.JSONObject diagnosisJSONObject = diagnosisJSONArray.getJSONObject(i);

								crmContactNo = diagnosisJSONObject.getString("contactid");

							}
						} else {
							apiResponse = "Error: " + response.getStatusLine().getStatusCode();
						}
					}

				} catch (Exception e) {
					apiResponse = "Exception: " + e.getMessage();
				}

				System.out.println(
						"CRM Fetch contact API response:::" + apiResponse + " & CRM contactid:::" + crmContactNo);

				if (!(crmContactNo.isEmpty() && crmContactNo.equals("null"))) {

					/*
					 * Adding patient to CRM
					 */
					String apiUrl = "https://pec.360oneview.com/create_contact.php";

					try {

						OkHttpClient client = new OkHttpClient().newBuilder().build();
						MediaType mediaType = MediaType.parse("text/plain");
						RequestBody body = new MultipartBody.Builder().setType(MultipartBody.FORM)
								.addFormDataPart("email", patientForm.getEmailID())
								.addFormDataPart("firstname", patientForm.getFirstName())
								.addFormDataPart("lastname", patientForm.getLastName())
								.addFormDataPart("mobile", patientForm.getMobile())
								.addFormDataPart("birthday", patientForm.getDateOfBirth())
								.addFormDataPart("Appointment_Type", "")
								.addFormDataPart("Gender", patientForm.getGender())
								.addFormDataPart("Referred_By", patientForm.getRefDoctor())
								.addFormDataPart("Referral_Doctor", "").addFormDataPart("Aggregator_Name", "")
								.addFormDataPart("Registration_Number", "").addFormDataPart("Role", "")
								.addFormDataPart("mailingstreet", "").addFormDataPart("mailingcity", "")
								.addFormDataPart("mailingstate", "").addFormDataPart("mailingzip", "")
								.addFormDataPart("mailingcountry", "").build();
						Request requestAPI = new Request.Builder().url("https://pec.360oneview.com/create_contact.php")
								.method("POST", body).build();
						Response response = client.newCall(requestAPI).execute();

						String jsonResponseData = response.body().string();

						System.out.println(jsonResponseData);

						System.out.println(response.body().toString());

					} catch (Exception e) {
						System.out.println("Exception occurred whie executing CRM API:::" + e.getMessage());
					}

				}

			}

			// Resetting values for all fields
			patientForm = new PatientForm();

			patientList = new ArrayList<PatientForm>();

			// Setting default value of city, state and country
			patientForm.setCity("Pune");
			patientForm.setState("Maharastra");
			patientForm.setCountry("India");
			patientForm.setEmCity("Pune");
			patientForm.setEmState("Maharastra");
			patientForm.setEmCountry("India");

			patientList.add(patientForm);

			/*
			 * Retrieve Last enetred patientID
			 */
			patientForm.setPatientID(patientDAOInf.retrievePatientID());

			if (loginForm.getUserType().equals("clinician") || loginForm.getUserType().equals("manager")) {
				request.setAttribute("clinician", "Yes");
				loginForm.setPatientID(patientForm.getPatientID());

			} else {
				request.setAttribute("clinician", "No");
			}

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Add Patient", loginForm.getUserID());

			return SUCCESS;

		} else {

			addActionError("Failed to register patient.Please check server logs for more details.");

			patientList = new ArrayList<PatientForm>();

			patientList.add(patientForm);

			request.setAttribute("clinician", "No");
			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Add Patient Exception occurred", loginForm.getUserID());

			return ERROR;
		}
	}

	/**
	 * 
	 * @return String
	 * @throws Exception
	 */
	public String addPatientCancel() throws Exception {

		/*
		 * Getting clinicID from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");

		patientList = new ArrayList<PatientForm>();

		patientList.add(patientForm);

		request.setAttribute("clinician", "No");

		/*
		 * Getting form name to be display based on logged in User
		 */
		String[] formNameArray = loginForm.getPatientJSPName().split("&");

		System.out.println("Add Patient JSP Page name for logged in user is ::: " + formNameArray[0].trim());

		// Setting add opd page name value in pageName variable
		setPageName(formNameArray[0].trim());

		return SUCCESS;
	}

	public String renderAddNewSurvey() throws Exception {

		patientDAOInf = new PatientDAOImpl();
		LoginForm loginForm = (LoginForm) session.get("USER");
		int lastVolunteerID = patientDAOInf.retrieveLastVolunteerID(loginForm.getClinicID());
		System.out.println("last vol id at render:" + lastVolunteerID);

		String[] formNameArray = loginForm.getOPDJSPName().split("&");

		System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[0].trim());

		if (formNameArray[0].trim().equals("surveyNew.jsp")) {

			patientList = patientDAOInf.retrieveSurveyDetails(patientForm, loginForm.getClinicID(), lastVolunteerID);

			setPageName(formNameArray[0].trim());

		}
		return SUCCESS;
	}

	public String renderOnGoingTimers() throws Exception {
		return SUCCESS;
	}

	public String renderAddNewVisit() throws Exception {

		patientDAOInf = new PatientDAOImpl();

		RegistrationDAOinf registrationDAOinf = new RegistrationDAOImpl();

		/*
		 * Getting user role from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");

		LoginDAOInf daoInf = new LoginDAOImpl();

		ClinicDAOInf daoInf1 = new ClinicDAOImpl();

		PrescriptionManagementDAOInf managementDAOInf = new PrescriptionManagementDAOImpl();

		/*
		 * Getting form name to be display based on logged in User
		 */
		String[] formNameArray = loginForm.getOPDJSPName().split("&");

		request.setAttribute("systemStartDate", patientForm.getStartDate());

		System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[0].trim());

		request.setAttribute("medicalCertiCheck", "no");
		request.setAttribute("referralLetterCheck", "no");
		request.setAttribute("IPDBillCheck", "No");
		request.setAttribute("IPDVisitCheck", "No");
		/*
		 * Getting careType name with VisitTypeID
		 */
		String CareType = patientDAOInf.retrieveCareType(loginForm.getVisitTypeID());
		/*
		 * Verifying whether visit exist for the patient or not, if not then disable
		 * View Last Visit button
		 */
		int patientVisitExistCheck = patientDAOInf.verifyVisitDetails(patientForm.getPatientID(),
				loginForm.getClinicID());

		String disableButtonCheck = "enable";
		if (patientVisitExistCheck == 0) {
			disableButtonCheck = "disable";
		}

		request.setAttribute("disableButtonCheck", disableButtonCheck);

		/*
		 * Retrieving patient age based on patientID
		 */
		String patientAge = patientDAOInf.retrievePatientAgeByPatientID(patientForm.getPatientID());

		request.setAttribute("patientAge", patientAge);

		/*
		 * retrieving patient gender based on patientID
		 */
		String patientGender = patientDAOInf.retrievePatientGenderByPatientID(patientForm.getPatientID());

		System.out.println("patientGender: " + patientGender);
		request.setAttribute("gender", patientGender);

		request.setAttribute("apptID", patientForm.getAptID());

		hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

		boolean newVisitCheck = patientDAOInf.CheckVisitTypeNewVisitCheck(loginForm.getVisitTypeID());

		// diagnoseList = configurationUtil.getDiagnoseList();

		int lastOPDVisitID = 0;

		if (newVisitCheck) {
			lastOPDVisitID = 0;

		} else {
			lastOPDVisitID = patientDAOInf.retrieveLastOPDVisitID(patientForm.getPatientID(), loginForm.getClinicID());
		}

		System.out.println("last opd visit id::" + lastOPDVisitID);

		/*
		 * on the basis of careType name .jsp pages of CRF forms will be displayed
		 */

		if (CareType.equals("IPD")) {

			lastOPDVisitID = patientDAOInf.retrieveLastIPDVisitID(patientForm.getPatientID(), loginForm.getClinicID());

			if (formNameArray[0].trim().equals("generalHospitalIPDNew.jsp")) {
				patientList = patientDAOInf.retrieveIPDPatientDetails(patientForm.getPatientID(),
						loginForm.getClinicID(), patientForm.getVisitID());
			} else if (formNameArray[0].trim().equals("genaralClinicIPDNew.jsp")) {

				patientList = patientDAOInf.retrieveGenaralClinicPatientDetailsForNewIPDVisit(
						patientForm.getPatientID(), lastOPDVisitID, loginForm.getClinicID());

				boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", lastOPDVisitID);

				if (visitCheck) {

					billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
				} else {
					billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
							loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
				}
				/* Retrieve labReport List */
				labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
						loginForm.getClinicID());

				complaintList = patientDAOInf.retrievecomplaintList(lastOPDVisitID);

				String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(lastOPDVisitID);
				request.setAttribute("paymentType", paymentType);

				/* Retrieve labReport List */
				labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
						loginForm.getClinicID());

				String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(lastOPDVisitID);

				request.setAttribute("medicalCertiText", medicatCertificate);

				String referralLetter = patientDAOInf.retrieveReferralLetter(lastOPDVisitID);

				request.setAttribute("referralLetter", referralLetter);

				hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

				InvestigationList = configurationUtil.getInvestigationList();

				DiagnosticList1 = configurationUtil.getDiagnosticList1();

				ProcedureList = configurationUtil.getProceduresList();

				diagnoseList = configurationUtil.getDiagnoseList();

				frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

			} else {

				int visitID = 0;
				if (!newVisitCheck) {
					visitID = lastOPDVisitID;
				}

				patientList = patientDAOInf.retireveLastEneteredIPDVisit(patientForm.getPatientID(), visitID,
						loginForm.getClinicID());

			}
			request.setAttribute("consentDocFile", "No");

			boolean hasConsent = patientDAOInf.verifyhasConsentValue(loginForm.getVisitTypeID());

			if (hasConsent) {

				String consentDocFileName = patientDAOInf.retrieveConsentDocFileName(loginForm.getVisitTypeID());

				request.setAttribute("consentDocFileName", consentDocFileName);

			}

			IPDChargesList = patientDAOInf.retrieveIPDTarrifChargesList(ActivityStatus.ACTIVE,
					patientDAOInf.retrieveIPDRoomTypeID("Operation Theatre", loginForm.getPracticeID()));

			String lastEneteredVisitList = "success";

			request.setAttribute("lastEneteredVisitList", lastEneteredVisitList);

			String dummy = "success";

			request.setAttribute("lasteEnteredVisitList", "");

			request.setAttribute("consentText", "success");

			String ipdVisitPage = "display";

			request.setAttribute("display", ipdVisitPage);

			if (newVisitCheck) {
				LabInvastigationList = new ArrayList<PatientForm>();
				request.setAttribute("LabInvastigationList", LabInvastigationList);

			} else {

				LabInvastigationList = patientDAOInf.reytrieveLabInvastigationLstByVisitID(lastOPDVisitID);

				request.setAttribute("LabInvastigationList", LabInvastigationList);

				IPDComplaintsList = patientDAOInf.retrieveIPDComplaintsList(lastOPDVisitID);

			}

			/*
			 * retrieving prescription list by visitID
			 */
			prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID());

			/*
			 * prescriptionList =
			 * patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
			 * lastOPDVisitID, loginForm.getClinicID());
			 */

			InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(lastOPDVisitID);
			diagnosticList = patientDAOInf.retrieveDiagnosticList(lastOPDVisitID);
			InvestigationList = configurationUtil.getInvestigationList();

			DiagnosticList1 = configurationUtil.getDiagnosticList1();

			ProcedureList = configurationUtil.getProceduresList();

			diagnoseList = configurationUtil.getDiagnoseList();

			// retrieving last visitID from Visit table based on patientID and clinicID
			int lastVisitID = patientDAOInf.retrieveLastVisitID(patientForm.getPatientID(), loginForm.getClinicID());

			if (newVisitCheck) {
				request.setAttribute("roomTypeID", 0);
			} else {
				// retrieving room type from Visit table based on last visitID
				int roomTypeID = patientDAOInf.retrieveRoomTypeByVisitID(lastVisitID);

				request.setAttribute("roomTypeID", roomTypeID);
			}

			// retrieving IPD Tariff charge list by visitID
			IPDTariffChargeList = patientDAOInf.retrieveIPDChargesByVisitID(patientForm.getVisitID(),
					ActivityStatus.TARIFF);

			// retrieving IPD consultant charge list by visitID
			IPDConsultantChargeList = patientDAOInf.retrieveIPDChargesByVisitID(patientForm.getVisitID(),
					ActivityStatus.CONSULTANT);

			// retrieving OT charge list based on visitID
			OTChargeList = patientDAOInf.retrieveOTChargesByVisitID(patientForm.getVisitID());

			// check isDischarge of visit type, if its 1 then only retrieving charges
			// details for billing
			boolean isDischarge = patientDAOInf.verifyIPDDischargeVisitType(loginForm.getVisitTypeID());

			if (isDischarge) {

				// retrieving patient's last new visit ID
				int newVisitID = patientDAOInf.retrieveNewVisitRef(patientForm.getVisitID());

				// verify whether Receipt exists for the current visitID if so then retrieving
				// details from Transaction and receipt table else retrieving details from
				// IPDCharges and OTCharges tbale
				boolean receiptExists = patientDAOInf.verifyVisitExists("Receipt", newVisitID);

				if (receiptExists) {

					String paymentType = patientDAOInf.retrievePaymentType(newVisitID);

					request.setAttribute("paymentType", paymentType);

					billList = patientDAOInf.retrieveVisitBillingByVisitID(newVisitID);

					// retrieving ipd tariff charges list based newVisitID
					IPDBillTariffChargeList = patientDAOInf.retrieveIPDTransactionsByVisitID(newVisitID,
							ActivityStatus.TARIFF);

					// retrieving ipd consultant charges list based newVisitID
					IPDBillConsultantChargeList = patientDAOInf.retrieveIPDTransactionsByVisitID(newVisitID,
							ActivityStatus.CONSULTANT);

					// retrieving OT charges list based on newVisitID
					OTBillChargeList = patientDAOInf.retrieveIPDTransactionsByVisitID(newVisitID, ActivityStatus.OT);

				} else {

					// retrieving ipd tariff charges list based newVisitID
					IPDBillTariffChargeList = patientDAOInf.retrieveIPDChargesDetailsByNewVisitID(newVisitID,
							ActivityStatus.TARIFF);

					// retrieving ipd consultant charges list based newVisitID
					IPDBillConsultantChargeList = patientDAOInf.retrieveIPDChargesDetailsByNewVisitID(newVisitID,
							ActivityStatus.CONSULTANT);

					// retrieving OT charges list based on newVisitID
					OTBillChargeList = patientDAOInf.retrieveOTChargesDetailsByNewVisitID(newVisitID);

					// retrieving receipt details i.e., receipt no receipt date , total amount, net
					// amount, advance paytment, emrgency charges, balance payment
					billList = patientDAOInf.retrieveIPDBillCharges(loginForm.getVisitTypeID(), loginForm.getClinicID(),
							loginForm.getClinicSuffix(), newVisitID);

				}

			}

			boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", lastOPDVisitID);

			if (visitCheck) {

				billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
			} else {
				billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
						loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
			}

			String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

			request.setAttribute("medicalCertiText", medicatCertificate);

			String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

			request.setAttribute("referralLetter", referralLetter);

			doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

			if (loginForm.getPracticeID() == 60) {
				drugList = configurationUtil.getPECTradeNameList();
				categoryList = configurationUtil.getPECCategoryList();
			} else {
				drugList = configurationUtil.getTradeNameList();
				categoryList = configurationUtil.getCategoryList();

			}
			/* drugList = configurationUtil.getTradeNameList(); */

			InvestigationList = configurationUtil.getInvestigationList();

			DiagnosticList1 = configurationUtil.getDiagnosticList1();

			ProcedureList = configurationUtil.getProceduresList();

			frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

			/*
			 * categoryList = configurationUtil.getCategoryList();
			 */
			// Inserting into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Add IPD Visit", loginForm.getUserID());

			// Setting add ipd page name value in pageName variable
			setPageName(formNameArray[0].trim());

			return SUCCESS;

		} else {

			if (formNameArray[0].trim().equals("generalOPDNew.jsp")
					|| formNameArray[0].trim().equals("telephonicNew.jsp")
					|| formNameArray[0].trim().equals("physicianOPDNew.jsp")
					|| formNameArray[0].trim().equals("generalPhysicianOPD.jsp")
					|| formNameArray[0].trim().equals("generalPhysicianGokhaleOPD.jsp")) {

				orthoBillItemList = patientDAOInf.retrieveOrthoBillingItemList(lastOPDVisitID);

				patientList = patientDAOInf.retrieveDefaultPatientDetails(patientForm.getPatientID(), lastOPDVisitID,
						loginForm.getClinicID(), patientForm.getAptID(), loginForm.getVisitTypeID());

				if (newVisitCheck) {
					request.setAttribute("paymentType", "");

				} else {

					boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", lastOPDVisitID);

					if (visitCheck) {

						billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
					} else {
						billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
								loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
					}
					/* Retrieve labReport List */
					labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
							loginForm.getClinicID());

					symptomList = patientDAOInf.retrievesymptomCheckList(lastOPDVisitID);

					complaintList = patientDAOInf.retrievecomplaintList(lastOPDVisitID);

					System.out.println("complaintList: " + complaintList.size());

					String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(lastOPDVisitID);
					request.setAttribute("paymentType", paymentType);
				}

				// retrieving present complaint list for last visit of patient
				String complaintList1 = patientDAOInf.retrievePresentComplaintsOfLastVisit(lastOPDVisitID);

				request.setAttribute("complaintList", complaintList1);

				/* HashMap<String, String> PVComplaints = patientDAOInf.getPVComplaints(); */

				PVComplaints = patientDAOInf.getPVComplaints();

				String categoryList1 = patientDAOInf.retrieveCategoryListOfLastVisit(lastOPDVisitID);
				request.setAttribute("categoryList", categoryList1);

				MedicalHistory = patientDAOInf.retrievemedicalHistoryListOfLastVisit(patientForm,
						patientForm.getPatientID());
				request.setAttribute("MedicalHistory", MedicalHistory);

				FamilyHistory = patientDAOInf.retrieveFamilyHistoryListOfLastVisit(patientForm,
						patientForm.getPatientID());
				request.setAttribute("FamilyHistory", FamilyHistory);

				PersonalHistory = patientDAOInf.retrievePersonalHistoryListOfLastVisit(patientForm,
						patientForm.getPatientID());
				request.setAttribute("PersonalHistory", PersonalHistory);

				onEaminationList = patientDAOInf.retrieveOnExaminationListByVisitID(lastOPDVisitID);
				request.setAttribute("onEaminationList", onEaminationList);

				InjectionPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
						lastOPDVisitID, "Injection");
				InjectionList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Injection");

				TabletPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
						lastOPDVisitID, "Tablet");
				TabletList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Tablet");

				LiquidPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
						lastOPDVisitID, "Liquid");
				LiquidList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Liquid");

				OPDChargesList = managementDAOInf.retrieveAllOPDCharges(loginForm.getPracticeID());
				request.setAttribute("OPDChargesList", OPDChargesList);

				String ChargesDetails = managementDAOInf.retrieveOPDChargesDetailsByReceiptID(patientForm.getVisitID());
				request.setAttribute("ChargesDetails", ChargesDetails);

				/*
				 * LabTestList = managementDAOInf.retrieveAllLabTests();
				 * request.setAttribute("LabTestList", LabTestList);
				 */

				String InvestigationDetails = managementDAOInf
						.retrieveInvestigationDetailsByVisitID(patientForm.getVisitID());
				request.setAttribute("InvestigationDetails", InvestigationDetails);

				DiagnosisList = configurationUtil.getDiagnosisList();

				/* Retrieve labReport List */
				labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
						loginForm.getClinicID());

				String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(lastOPDVisitID);

				request.setAttribute("medicalCertiText", medicatCertificate);

				String referralLetter = patientDAOInf.retrieveReferralLetter(lastOPDVisitID);

				request.setAttribute("referralLetter", referralLetter);

				hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

				historyList = patientDAOInf.retrieveMedicalHistoryList(patientForm.getPatientID());

				medicationList = patientDAOInf.retrieveCurrentMedicationList(patientForm.getPatientID());

				request.setAttribute("apptID", patientForm.getAptID());

				request.setAttribute("opticianFloatCheck", "empty");

				doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

				// Checking if the CRF form is for Gokhale clinic, if so then load the diagnosis
				// from the json file else load the diagnosis from the PVDiagnosis table
				if (formNameArray[0].trim().equals("generalPhysicianGokhaleOPD.jsp")) {

					// Retrieving diagnosis list for the last visit ID
					orthoDiagnosisList = patientDAOInf.retrieveOrthoDiagnosisList(lastOPDVisitID);

					HttpServletRequest request = ServletActionContext.getRequest();

					ServletContext context = request.getServletContext();

					String realPath = context.getRealPath("/");

					JSONParser parser = new JSONParser();

					JSONArray diagnosisJSON = (JSONArray) parser
							.parse(new FileReader(realPath + File.separator + "ortho_charges.json"));

					for (Object jsonData : diagnosisJSON) {
						JSONObject data = (JSONObject) jsonData;

						// diagnoseList.put((String) data.get("rate"), (String) data.get("diagnosis"));
					}

				}
				diagnoseList = configurationUtil.getDiagnoseList();

				DiagnosisList1 = configurationUtil.getDiagnosisList1();

				resayuDiagnosisList = configurationUtil.getDiagnoseList();

				resayuDiagnosisList.put("Other", "Other");

				/* drugList = configurationUtil.getTradeNameList(); */

				InvestigationList = configurationUtil.getInvestigationList();

				DiagnosticList1 = configurationUtil.getDiagnosticList1();

				ProcedureList = configurationUtil.getProceduresList();

				frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

				if (loginForm.getPracticeID() == 60) {
					drugList = configurationUtil.getPECTradeNameList();
					categoryList = configurationUtil.getPECCategoryList();
				} else {
					drugList = configurationUtil.getTradeNameList();
					categoryList = configurationUtil.getCategoryList();
				}

				/* categoryList = configurationUtil.getCategoryList(); */

				// Setting add opd page name value in pageName variable
				setPageName(formNameArray[0].trim());

				return SUCCESS;

			} else if (formNameArray[0].trim().equals("generalHospitalOPDNew.jsp")) {

				boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

				request.setAttribute("systemStartDate", patientForm.getStartDate());

				request.setAttribute("apptID", patientForm.getAptID());

				int lastVisitID = 0;

				System.out.println("Last visit ID :: " + lastVisitID);

				patientList = patientDAOInf.retrieveGeneralHospitalPatientDetailsForNewVisit(patientForm.getPatientID(),
						lastVisitID, loginForm.getClinicID(), patientForm.getAptID());

				if (visitCheck) {
					billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
				} else {
					billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
							loginForm.getClinicID(), loginForm.getClinicSuffix());
				}

				// retrieving present complaint list for last visit of patient
				String complaintList = patientDAOInf.retrievePresentComplaintsOfLastVisit(lastVisitID);

				request.setAttribute("complaintList", complaintList);

				/* HashMap<String, String> PVComplaints = patientDAOInf.getPVComplaints(); */

				PVComplaints = patientDAOInf.getPVComplaints();

				String categoryList = patientDAOInf.retrieveCategoryListOfLastVisit(lastVisitID);
				request.setAttribute("categoryList", categoryList);

				MedicalHistory = patientDAOInf.retrievemedicalHistoryListOfLastVisit(patientForm,
						patientForm.getPatientID());
				request.setAttribute("MedicalHistory", MedicalHistory);

				FamilyHistory = patientDAOInf.retrieveFamilyHistoryListOfLastVisit(patientForm,
						patientForm.getPatientID());
				request.setAttribute("FamilyHistory", FamilyHistory);

				PersonalHistory = patientDAOInf.retrievePersonalHistoryListOfLastVisit(patientForm,
						patientForm.getPatientID());
				request.setAttribute("PersonalHistory", PersonalHistory);

				onEaminationList = patientDAOInf.retrieveOnExaminationListByVisitID(lastVisitID);
				request.setAttribute("onEaminationList", onEaminationList);

				InjectionPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
						lastVisitID, "Injection");
				InjectionList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Injection");

				TabletPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
						lastVisitID, "Tablet");
				TabletList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Tablet");

				LiquidPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
						lastVisitID, "Liquid");
				LiquidList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Liquid");

				OPDChargesList = managementDAOInf.retrieveAllOPDCharges(loginForm.getPracticeID());
				request.setAttribute("OPDChargesList", OPDChargesList);

				String ChargesDetails = managementDAOInf.retrieveOPDChargesDetailsByReceiptID(patientForm.getVisitID());
				request.setAttribute("ChargesDetails", ChargesDetails);

				LabTestList = managementDAOInf.retrieveAllLabTests(loginForm.getPracticeID());
				request.setAttribute("LabTestList", LabTestList);

				String InvestigationDetails = managementDAOInf
						.retrieveInvestigationDetailsByVisitID(patientForm.getVisitID());
				request.setAttribute("InvestigationDetails", InvestigationDetails);

				String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
				request.setAttribute("paymentType", paymentType);

				DiagnosisList = configurationUtil.getDiagnosisList();

				System.out.println("RenderAddNewVisit: " + patientForm.getPatientID() + "-" + loginForm.getClinicID());
				/* Retrieve labReport List */
				labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
						loginForm.getClinicID());

				String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(lastVisitID);

				request.setAttribute("medicalCertiText", medicatCertificate);

				String referralLetter = patientDAOInf.retrieveReferralLetter(lastVisitID);

				request.setAttribute("referralLetter", referralLetter);

				drugList = configurationUtil.getTradeNameList();

				frequencyList = configurationUtil.getFrequencyList();

				diagnoseList = configurationUtil.getDiagnoseList();

				// chargeTypeList = configurationUtil.getChargeTypeList();

				doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

				hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

				// Setting add opd page name value in pageName variable
				setPageName(formNameArray[0].trim());

				return SUCCESS;

			} else if (formNameArray[0].trim().equals("genaralClinicOPDNew.jsp")) {

				request.setAttribute("apptID", patientForm.getAptID());

				System.out.println("Last visit ID :: " + lastOPDVisitID);

				patientList = patientDAOInf.retrieveGenaralClinicPatientDetailsForNewVisit(patientForm.getPatientID(),
						lastOPDVisitID, loginForm.getClinicID());

				InvestigationList = configurationUtil.getInvestigationList();

				DiagnosticList1 = configurationUtil.getDiagnosticList1();

				ProcedureList = configurationUtil.getProceduresList();

				diagnoseList = configurationUtil.getDiagnoseList();

				frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

				if (newVisitCheck) {
					request.setAttribute("paymentType", "");

				} else {

					boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", lastOPDVisitID);

					if (visitCheck) {

						billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
					} else {
						billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
								loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
					}
					/* Retrieve labReport List */
					labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
							loginForm.getClinicID());

					symptomList = patientDAOInf.retrievesymptomCheckList(lastOPDVisitID);

					complaintList = patientDAOInf.retrievecomplaintList(lastOPDVisitID);

					System.out.println("complaintList: " + complaintList.size());

					String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(lastOPDVisitID);
					request.setAttribute("paymentType", paymentType);
				}

				// retrieving present complaint list for last visit of patient
				String complaintList1 = patientDAOInf.retrievePresentComplaintsOfLastVisit(lastOPDVisitID);

				request.setAttribute("complaintList", complaintList1);

				/* HashMap<String, String> PVComplaints = patientDAOInf.getPVComplaints(); */

				PVComplaints = patientDAOInf.getPVComplaints();

				String categoryList1 = patientDAOInf.retrieveCategoryListOfLastVisit(lastOPDVisitID);
				request.setAttribute("categoryList", categoryList1);

				MedicalHistory = patientDAOInf.retrievemedicalHistoryListOfLastVisit(patientForm,
						patientForm.getPatientID());
				request.setAttribute("MedicalHistory", MedicalHistory);

				FamilyHistory = patientDAOInf.retrieveFamilyHistoryListOfLastVisit(patientForm,
						patientForm.getPatientID());
				request.setAttribute("FamilyHistory", FamilyHistory);

				PersonalHistory = patientDAOInf.retrievePersonalHistoryListOfLastVisit(patientForm,
						patientForm.getPatientID());
				request.setAttribute("PersonalHistory", PersonalHistory);

				onEaminationList = patientDAOInf.retrieveOnExaminationListByVisitID(lastOPDVisitID);
				request.setAttribute("onEaminationList", onEaminationList);

				/* Retrieve labReport List */
				labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
						loginForm.getClinicID());

				String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(lastOPDVisitID);

				request.setAttribute("medicalCertiText", medicatCertificate);

				String referralLetter = patientDAOInf.retrieveReferralLetter(lastOPDVisitID);

				request.setAttribute("referralLetter", referralLetter);

				hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

				historyList = patientDAOInf.retrieveMedicalHistoryList(patientForm.getPatientID());

				medicationList = patientDAOInf.retrieveCurrentMedicationList(patientForm.getPatientID());

				doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

				diagnoseList = configurationUtil.getDiagnoseList();

				// Setting add opd page name value in pageName variable
				setPageName(formNameArray[0].trim());

				return SUCCESS;
			} else if (formNameArray[0].trim().equals("mhatreLabOPDAdd.jsp")
					|| formNameArray[0].trim().equals("labOPDAdd.jsp")
					|| formNameArray[0].trim().equals("BDPOPDPackageAdd.jsp")) {

				patientList = patientDAOInf.retrieveLabPatientDetails(patientForm.getPatientID(), lastOPDVisitID,
						loginForm.getClinicID(), patientForm.getAptID());

				billList = patientDAOInf.retrieveBillDetail(patientForm.getVisitID(), loginForm.getVisitTypeID(),
						loginForm.getClinicID(), loginForm.getClinicSuffix());

				mdDetailsList = configurationUtil.getMDDoctorList(loginForm.getPracticeID());

				labTestValueListNew = new HashMap<String, String>();
				labTestValueListNew1 = new HashMap<String, String>();

				// verify whether receipt added for the current visitID if yes then retrieve the
				// details from Transctions tables else retrive the details from the
				// LabInvestigation tables for the corresponding visitID based on isGroup check
				boolean billCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

				if (billCheck) {
					prescriptionList = patientDAOInf.retrieveTransactionListByVisitID(patientForm.getVisitID());
				} else {
					prescriptionList = patientDAOInf.retrieveTransactionDetailsByVisitID(patientForm.getVisitID());

					groupTestList = patientDAOInf
							.retrieveTransactionDetailsForGroupTestByVisitID(patientForm.getVisitID());
				}

				String paymentType = patientDAOInf.retrievePaymentType(patientForm.getVisitID());

				request.setAttribute("paymentType", paymentType);

				request.setAttribute("apptID", patientForm.getAptID());

				request.setAttribute("opticianFloatCheck", "empty");

				referringDoctorList = configurationUtil.getReferringDoctorList1(loginForm.getPracticeID());
				refDocList = configurationUtil.getRefDocList(loginForm.getPracticeID());

				genderMap.put("Male", "normalValues");
				genderMap.put("Female", "normalValuesWomen");
				genderMap.put("Child", "normalValuesChild");

				diagnoseList = configurationUtil.getDiagnoseList();
				getGroupTestList = configurationUtil.getGroupTestList(loginForm.getPracticeID(),
						genderMap.get(patientGender));
				getSingleTestList = configurationUtil.getSingleTestList(loginForm.getPracticeID(),
						genderMap.get(patientGender));
				String labTest = patientDAOInf.retrieveLabTestByVisitID(patientForm.getVisitID());

				request.setAttribute("labTest", labTest);

				doctorList1 = configurationUtil.getDoctorList(loginForm.getPracticeID());

				reportList = configurationUtil.getRepostList(loginForm.getVisitTypeID());

				// Setting add opd page name value in pageName variable
				setPageName(formNameArray[0].trim());

				return SUCCESS;

			} else if (formNameArray[0].trim().equals("ctScanOPDAdd.jsp")
					|| formNameArray[0].trim().equals("xRayOPDAdd.jsp")
					|| formNameArray[0].trim().equals("usgOPDAdd.jsp")) {

				patientList = patientDAOInf.retrieveLabPatientDetails(patientForm.getPatientID(), lastOPDVisitID,
						loginForm.getClinicID(), patientForm.getAptID());

				doctorList1 = configurationUtil.getDoctorList(loginForm.getPracticeID());

				referringDoctorList = configurationUtil.getReferringDoctorList1(loginForm.getPracticeID());
				refDocList = configurationUtil.getRefDocList(loginForm.getPracticeID());

				reportList = configurationUtil.getRepostList(loginForm.getVisitTypeID());

				int clinicianID = patientDAOInf.retrieveclinicianIDBYAptID(patientForm.getAptID());

				request.setAttribute("clinicianID", clinicianID);

				diagnoseList = configurationUtil.getDiagnoseList();

				setPageName(formNameArray[0].trim());
				return SUCCESS;
			}

			else {

				String visitType = daoInf1.retrieveVisitTypeNameByID(loginForm.getVisitTypeID());
				System.out.println("visitype is ::" + visitType);

				patientList = patientDAOInf.retrieveLastEnteredVisitDetail(patientForm.getPatientID(), lastOPDVisitID,
						loginForm.getClinicID(), visitType);

				diagnoseList = configurationUtil.getDiagnoseList();

				String dummy = "success";
				String dummy1 = "";

				request.setAttribute("lasteEnteredVisitList", dummy1);

				request.setAttribute("lasteEnteredPrescList", dummy);

				/* drugList = configurationUtil.getTradeNameList(); */

				InvestigationList = configurationUtil.getInvestigationList();

				DiagnosticList1 = configurationUtil.getDiagnosticList1();

				ProcedureList = configurationUtil.getProceduresList();

				frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

				request.setAttribute("opticianFloatCheck", "empty");

				doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

				if (loginForm.getPracticeID() == 60) {
					drugList = configurationUtil.getPECTradeNameList();
					categoryList = configurationUtil.getPECCategoryList();
				} else {
					drugList = configurationUtil.getTradeNameList();
					categoryList = configurationUtil.getCategoryList();
				}

				/* categoryList = configurationUtil.getCategoryList(); */

				hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

				if (newVisitCheck) {
					request.setAttribute("paymentType", "");
				} else {
					/* Retrieve labReport List */
					labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
							loginForm.getClinicID());

					String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(lastOPDVisitID);
					request.setAttribute("paymentType", paymentType);

					prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
							patientForm.getVisitID(), loginForm.getClinicID());

					/*
					 * prescriptionList =
					 * patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
					 * lastOPDVisitID, loginForm.getClinicID());
					 */

					boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", lastOPDVisitID);

					if (visitCheck) {

						billList = patientDAOInf.retrieveVisitBillingByVisitID(lastOPDVisitID);
					} else {
						billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
								loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
					}
					InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(lastOPDVisitID);

					diagnosticList = patientDAOInf.retrieveDiagnosticList(lastOPDVisitID);

					symptomList = patientDAOInf.retrievesymptomCheckList(lastOPDVisitID);

					complaintList = patientDAOInf.retrievecomplaintList(lastOPDVisitID);
				}

				/*
				 * retrieve last inserted visit ID for care type OPD by patientID
				 */

				request.setAttribute("apptID", patientForm.getAptID());

				// Inserting values into Audit table
				daoInf.insertAudit(request.getRemoteAddr(), "Add OPD Visit Exception occurred", loginForm.getUserID());

				// Setting add opd page name value in pageName variable
				setPageName(formNameArray[0].trim());

				return SUCCESS;
			}
		}
	}

	public String renderAddNewVisit_bk() throws Exception {

		patientDAOInf = new PatientDAOImpl();

		RegistrationDAOinf registrationDAOinf = new RegistrationDAOImpl();

		/*
		 * Getting user role from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");

		LoginDAOInf daoInf = new LoginDAOImpl();

		ClinicDAOInf daoInf1 = new ClinicDAOImpl();

		PrescriptionManagementDAOInf managementDAOInf = new PrescriptionManagementDAOImpl();

		/*
		 * Getting form name to be display based on logged in User
		 */
		String[] formNameArray = loginForm.getOPDJSPName().split("&");

		request.setAttribute("systemStartDate", patientForm.getStartDate());

		System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[0].trim());

		request.setAttribute("medicalCertiCheck", "no");
		request.setAttribute("referralLetterCheck", "no");
		request.setAttribute("IPDBillCheck", "No");
		request.setAttribute("IPDVisitCheck", "No");
		/*
		 * Getting careType name with VisitTypeID
		 */
		String CareType = patientDAOInf.retrieveCareType(loginForm.getVisitTypeID());
		/*
		 * Verifying whether visit exist for the patient or not, if not then disable
		 * View Last Visit button
		 */
		int patientVisitExistCheck = patientDAOInf.verifyVisitDetails(patientForm.getPatientID(),
				loginForm.getClinicID());

		String disableButtonCheck = "enable";
		if (patientVisitExistCheck == 0) {
			disableButtonCheck = "disable";
		}

		request.setAttribute("disableButtonCheck", disableButtonCheck);

		/*
		 * Retrieving patient age based on patientID
		 */
		String patientAge = patientDAOInf.retrievePatientAgeByPatientID(patientForm.getPatientID());

		request.setAttribute("patientAge", patientAge);

		/*
		 * retrieving patient gender based on patientID
		 */
		String patientGender = patientDAOInf.retrievePatientGenderByPatientID(patientForm.getPatientID());

		System.out.println("patientGender: " + patientGender);
		request.setAttribute("gender", patientGender);

		request.setAttribute("apptID", patientForm.getAptID());

		hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

		boolean newVisitCheck = patientDAOInf.CheckVisitTypeNewVisitCheck(loginForm.getVisitTypeID());

		// diagnoseList = configurationUtil.getDiagnoseList();

		int lastOPDVisitID = 0;

		if (newVisitCheck) {
			lastOPDVisitID = 0;

		} else {
			lastOPDVisitID = patientDAOInf.retrieveLastOPDVisitID(patientForm.getPatientID(), loginForm.getClinicID());
		}

		System.out.println("last opd visit id::" + lastOPDVisitID);

		/*
		 * on the basis of careType name .jsp pages of CRF forms will be displayed
		 */

		if (CareType.equals("IPD")) {

			lastOPDVisitID = patientDAOInf.retrieveLastIPDVisitID(patientForm.getPatientID(), loginForm.getClinicID());

			if (formNameArray[0].trim().equals("generalHospitalIPDNew.jsp")) {
				patientList = patientDAOInf.retrieveIPDPatientDetails(patientForm.getPatientID(),
						loginForm.getClinicID(), patientForm.getVisitID());
			} else if (formNameArray[0].trim().equals("genaralClinicIPDNew.jsp")) {

				patientList = patientDAOInf.retrieveGenaralClinicPatientDetailsForNewIPDVisit(
						patientForm.getPatientID(), lastOPDVisitID, loginForm.getClinicID());

				boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", lastOPDVisitID);

				if (visitCheck) {

					billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
				} else {
					billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
							loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
				}
				/* Retrieve labReport List */
				labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
						loginForm.getClinicID());

				complaintList = patientDAOInf.retrievecomplaintList(lastOPDVisitID);

				String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(lastOPDVisitID);
				request.setAttribute("paymentType", paymentType);

				/* Retrieve labReport List */
				labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
						loginForm.getClinicID());

				String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(lastOPDVisitID);

				request.setAttribute("medicalCertiText", medicatCertificate);

				String referralLetter = patientDAOInf.retrieveReferralLetter(lastOPDVisitID);

				request.setAttribute("referralLetter", referralLetter);

				hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

				InvestigationList = configurationUtil.getInvestigationList();

				diagnoseList = configurationUtil.getDiagnoseList();

				frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

			} else {

				patientList = patientDAOInf.retireveLastEneteredIPDVisit(patientForm.getPatientID(), lastOPDVisitID,
						loginForm.getClinicID());

			}
			request.setAttribute("consentDocFile", "No");

			boolean hasConsent = patientDAOInf.verifyhasConsentValue(loginForm.getVisitTypeID());

			if (hasConsent) {

				String consentDocFileName = patientDAOInf.retrieveConsentDocFileName(loginForm.getVisitTypeID());

				request.setAttribute("consentDocFileName", consentDocFileName);

			}

			IPDChargesList = patientDAOInf.retrieveIPDTarrifChargesList(ActivityStatus.ACTIVE,
					patientDAOInf.retrieveIPDRoomTypeID("Operation Theatre", loginForm.getPracticeID()));

			String lastEneteredVisitList = "success";

			request.setAttribute("lastEneteredVisitList", lastEneteredVisitList);

			String dummy = "success";

			request.setAttribute("lasteEnteredVisitList", "");

			request.setAttribute("consentText", "success");

			String ipdVisitPage = "display";

			request.setAttribute("display", ipdVisitPage);

			if (newVisitCheck) {
				LabInvastigationList = new ArrayList<PatientForm>();
				request.setAttribute("LabInvastigationList", LabInvastigationList);

			} else {

				LabInvastigationList = patientDAOInf.reytrieveLabInvastigationLstByVisitID(lastOPDVisitID);

				request.setAttribute("LabInvastigationList", LabInvastigationList);

				IPDComplaintsList = patientDAOInf.retrieveIPDComplaintsList(lastOPDVisitID);

			}

			/*
			 * retrieving prescription list by visitID
			 */
			prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(), lastOPDVisitID,
					loginForm.getClinicID());

			InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(lastOPDVisitID);

			diagnosticList = patientDAOInf.retrieveDiagnosticList(lastOPDVisitID);
			InvestigationList = configurationUtil.getInvestigationList();

			diagnoseList = configurationUtil.getDiagnoseList();

			// retrieving last visitID from Visit table based on patientID and clinicID
			int lastVisitID = patientDAOInf.retrieveLastVisitID(patientForm.getPatientID(), loginForm.getClinicID());

			if (newVisitCheck) {
				request.setAttribute("roomTypeID", 0);
			} else {
				// retrieving room type from Visit table based on last visitID
				int roomTypeID = patientDAOInf.retrieveRoomTypeByVisitID(lastVisitID);

				request.setAttribute("roomTypeID", roomTypeID);
			}

			// retrieving IPD Tariff charge list by visitID
			IPDTariffChargeList = patientDAOInf.retrieveIPDChargesByVisitID(patientForm.getVisitID(),
					ActivityStatus.TARIFF);

			// retrieving IPD consultant charge list by visitID
			IPDConsultantChargeList = patientDAOInf.retrieveIPDChargesByVisitID(patientForm.getVisitID(),
					ActivityStatus.CONSULTANT);

			// retrieving OT charge list based on visitID
			OTChargeList = patientDAOInf.retrieveOTChargesByVisitID(patientForm.getVisitID());

			// check isDischarge of visit type, if its 1 then only retrieving charges
			// details for billing
			boolean isDischarge = patientDAOInf.verifyIPDDischargeVisitType(loginForm.getVisitTypeID());

			if (isDischarge) {

				// retrieving patient's last new visit ID
				int newVisitID = patientDAOInf.retrieveNewVisitRef(patientForm.getVisitID());

				// verify whether Receipt exists for the current visitID if so then retrieving
				// details from Transaction and receipt table else retrieving details from
				// IPDCharges and OTCharges tbale
				boolean receiptExists = patientDAOInf.verifyVisitExists("Receipt", newVisitID);

				if (receiptExists) {

					String paymentType = patientDAOInf.retrievePaymentType(newVisitID);

					request.setAttribute("paymentType", paymentType);

					billList = patientDAOInf.retrieveVisitBillingByVisitID(newVisitID);

					// retrieving ipd tariff charges list based newVisitID
					IPDBillTariffChargeList = patientDAOInf.retrieveIPDTransactionsByVisitID(newVisitID,
							ActivityStatus.TARIFF);

					// retrieving ipd consultant charges list based newVisitID
					IPDBillConsultantChargeList = patientDAOInf.retrieveIPDTransactionsByVisitID(newVisitID,
							ActivityStatus.CONSULTANT);

					// retrieving OT charges list based on newVisitID
					OTBillChargeList = patientDAOInf.retrieveIPDTransactionsByVisitID(newVisitID, ActivityStatus.OT);

				} else {

					// retrieving ipd tariff charges list based newVisitID
					IPDBillTariffChargeList = patientDAOInf.retrieveIPDChargesDetailsByNewVisitID(newVisitID,
							ActivityStatus.TARIFF);

					// retrieving ipd consultant charges list based newVisitID
					IPDBillConsultantChargeList = patientDAOInf.retrieveIPDChargesDetailsByNewVisitID(newVisitID,
							ActivityStatus.CONSULTANT);

					// retrieving OT charges list based on newVisitID
					OTBillChargeList = patientDAOInf.retrieveOTChargesDetailsByNewVisitID(newVisitID);

					// retrieving receipt details i.e., receipt no receipt date , total amount, net
					// amount, advance paytment, emrgency charges, balance payment
					billList = patientDAOInf.retrieveIPDBillCharges(loginForm.getVisitTypeID(), loginForm.getClinicID(),
							loginForm.getClinicSuffix(), newVisitID);

				}

			}

			boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", lastOPDVisitID);

			if (visitCheck) {

				billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
			} else {
				billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
						loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
			}

			String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

			request.setAttribute("medicalCertiText", medicatCertificate);

			String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

			request.setAttribute("referralLetter", referralLetter);

			doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

			drugList = configurationUtil.getTradeNameList();

			InvestigationList = configurationUtil.getInvestigationList();

			frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

			categoryList = configurationUtil.getCategoryList();

			// Inserting into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Add IPD Visit", loginForm.getUserID());

			// Setting add ipd page name value in pageName variable
			setPageName(formNameArray[0].trim());

			return SUCCESS;

		} else {

			if (formNameArray[0].trim().equals("generalOPDNew.jsp")
					|| formNameArray[0].trim().equals("telephonicNew.jsp")
					|| formNameArray[0].trim().equals("physicianOPDNew.jsp")
					|| formNameArray[0].trim().equals("generalPhysicianOPD.jsp")
					|| formNameArray[0].trim().equals("generalPhysicianGokhaleOPD.jsp")) {

				orthoBillItemList = patientDAOInf.retrieveOrthoBillingItemList(lastOPDVisitID);

				patientList = patientDAOInf.retrieveDefaultPatientDetails(patientForm.getPatientID(), lastOPDVisitID,
						loginForm.getClinicID(), patientForm.getAptID(), loginForm.getVisitTypeID());

				if (newVisitCheck) {
					request.setAttribute("paymentType", "");

				} else {

					boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", lastOPDVisitID);

					if (visitCheck) {

						billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
					} else {
						billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
								loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
					}
					/* Retrieve labReport List */
					labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
							loginForm.getClinicID());

					symptomList = patientDAOInf.retrievesymptomCheckList(lastOPDVisitID);

					complaintList = patientDAOInf.retrievecomplaintList(lastOPDVisitID);

					System.out.println("complaintList: " + complaintList.size());

					String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(lastOPDVisitID);
					request.setAttribute("paymentType", paymentType);
				}

				// retrieving present complaint list for last visit of patient
				String complaintList1 = patientDAOInf.retrievePresentComplaintsOfLastVisit(lastOPDVisitID);

				request.setAttribute("complaintList", complaintList1);

				/* HashMap<String, String> PVComplaints = patientDAOInf.getPVComplaints(); */

				PVComplaints = patientDAOInf.getPVComplaints();

				String categoryList1 = patientDAOInf.retrieveCategoryListOfLastVisit(lastOPDVisitID);
				request.setAttribute("categoryList", categoryList1);

				MedicalHistory = patientDAOInf.retrievemedicalHistoryListOfLastVisit(patientForm,
						patientForm.getPatientID());
				request.setAttribute("MedicalHistory", MedicalHistory);

				FamilyHistory = patientDAOInf.retrieveFamilyHistoryListOfLastVisit(patientForm,
						patientForm.getPatientID());
				request.setAttribute("FamilyHistory", FamilyHistory);

				PersonalHistory = patientDAOInf.retrievePersonalHistoryListOfLastVisit(patientForm,
						patientForm.getPatientID());
				request.setAttribute("PersonalHistory", PersonalHistory);

				onEaminationList = patientDAOInf.retrieveOnExaminationListByVisitID(lastOPDVisitID);
				request.setAttribute("onEaminationList", onEaminationList);

				InjectionPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
						lastOPDVisitID, "Injection");
				InjectionList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Injection");

				TabletPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
						lastOPDVisitID, "Tablet");
				TabletList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Tablet");

				LiquidPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
						lastOPDVisitID, "Liquid");
				LiquidList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Liquid");

				OPDChargesList = managementDAOInf.retrieveAllOPDCharges(loginForm.getPracticeID());
				request.setAttribute("OPDChargesList", OPDChargesList);

				String ChargesDetails = managementDAOInf.retrieveOPDChargesDetailsByReceiptID(patientForm.getVisitID());
				request.setAttribute("ChargesDetails", ChargesDetails);

				/*
				 * LabTestList = managementDAOInf.retrieveAllLabTests();
				 * request.setAttribute("LabTestList", LabTestList);
				 */

				String InvestigationDetails = managementDAOInf
						.retrieveInvestigationDetailsByVisitID(patientForm.getVisitID());
				request.setAttribute("InvestigationDetails", InvestigationDetails);

				DiagnosisList = configurationUtil.getDiagnosisList();

				/* Retrieve labReport List */
				labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
						loginForm.getClinicID());

				String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(lastOPDVisitID);

				request.setAttribute("medicalCertiText", medicatCertificate);

				String referralLetter = patientDAOInf.retrieveReferralLetter(lastOPDVisitID);

				request.setAttribute("referralLetter", referralLetter);

				hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

				historyList = patientDAOInf.retrieveMedicalHistoryList(patientForm.getPatientID());

				medicationList = patientDAOInf.retrieveCurrentMedicationList(patientForm.getPatientID());

				request.setAttribute("apptID", patientForm.getAptID());

				request.setAttribute("opticianFloatCheck", "empty");

				doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

				// Checking if the CRF form is for Gokhale clinic, if so then load the diagnosis
				// from the json file else load the diagnosis from the PVDiagnosis table
				if (formNameArray[0].trim().equals("generalPhysicianGokhaleOPD.jsp")) {

					// Retrieving diagnosis list for the last visit ID
					orthoDiagnosisList = patientDAOInf.retrieveOrthoDiagnosisList(lastOPDVisitID);

					HttpServletRequest request = ServletActionContext.getRequest();

					ServletContext context = request.getServletContext();

					String realPath = context.getRealPath("/");

					JSONParser parser = new JSONParser();

					JSONArray diagnosisJSON = (JSONArray) parser
							.parse(new FileReader(realPath + File.separator + "ortho_charges.json"));

					for (Object jsonData : diagnosisJSON) {
						JSONObject data = (JSONObject) jsonData;

						// diagnoseList.put((String) data.get("rate"), (String) data.get("diagnosis"));
					}

				}
				diagnoseList = configurationUtil.getDiagnoseList();

				DiagnosisList1 = configurationUtil.getDiagnosisList1();

				resayuDiagnosisList = configurationUtil.getDiagnoseList();

				resayuDiagnosisList.put("Other", "Other");

				drugList = configurationUtil.getTradeNameList();

				InvestigationList = configurationUtil.getInvestigationList();

				frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

				categoryList = configurationUtil.getCategoryList();

				// Setting add opd page name value in pageName variable
				setPageName(formNameArray[0].trim());

				return SUCCESS;

			} else if (formNameArray[0].trim().equals("generalHospitalOPDNew.jsp")) {

				boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

				request.setAttribute("systemStartDate", patientForm.getStartDate());

				request.setAttribute("apptID", patientForm.getAptID());

				int lastVisitID = 0;

				System.out.println("Last visit ID :: " + lastVisitID);

				patientList = patientDAOInf.retrieveGeneralHospitalPatientDetailsForNewVisit(patientForm.getPatientID(),
						lastVisitID, loginForm.getClinicID(), patientForm.getAptID());

				if (visitCheck) {
					billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
				} else {
					billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
							loginForm.getClinicID(), loginForm.getClinicSuffix());
				}

				// retrieving present complaint list for last visit of patient
				String complaintList = patientDAOInf.retrievePresentComplaintsOfLastVisit(lastVisitID);

				request.setAttribute("complaintList", complaintList);

				/* HashMap<String, String> PVComplaints = patientDAOInf.getPVComplaints(); */

				PVComplaints = patientDAOInf.getPVComplaints();

				String categoryList = patientDAOInf.retrieveCategoryListOfLastVisit(lastVisitID);
				request.setAttribute("categoryList", categoryList);

				MedicalHistory = patientDAOInf.retrievemedicalHistoryListOfLastVisit(patientForm,
						patientForm.getPatientID());
				request.setAttribute("MedicalHistory", MedicalHistory);

				FamilyHistory = patientDAOInf.retrieveFamilyHistoryListOfLastVisit(patientForm,
						patientForm.getPatientID());
				request.setAttribute("FamilyHistory", FamilyHistory);

				PersonalHistory = patientDAOInf.retrievePersonalHistoryListOfLastVisit(patientForm,
						patientForm.getPatientID());
				request.setAttribute("PersonalHistory", PersonalHistory);

				onEaminationList = patientDAOInf.retrieveOnExaminationListByVisitID(lastVisitID);
				request.setAttribute("onEaminationList", onEaminationList);

				InjectionPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
						lastVisitID, "Injection");
				InjectionList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Injection");

				TabletPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
						lastVisitID, "Tablet");
				TabletList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Tablet");

				LiquidPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
						lastVisitID, "Liquid");
				LiquidList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Liquid");

				OPDChargesList = managementDAOInf.retrieveAllOPDCharges(loginForm.getPracticeID());
				request.setAttribute("OPDChargesList", OPDChargesList);

				String ChargesDetails = managementDAOInf.retrieveOPDChargesDetailsByReceiptID(patientForm.getVisitID());
				request.setAttribute("ChargesDetails", ChargesDetails);

				LabTestList = managementDAOInf.retrieveAllLabTests(loginForm.getPracticeID());
				request.setAttribute("LabTestList", LabTestList);

				String InvestigationDetails = managementDAOInf
						.retrieveInvestigationDetailsByVisitID(patientForm.getVisitID());
				request.setAttribute("InvestigationDetails", InvestigationDetails);

				String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
				request.setAttribute("paymentType", paymentType);

				DiagnosisList = configurationUtil.getDiagnosisList();

				System.out.println("RenderAddNewVisit: " + patientForm.getPatientID() + "-" + loginForm.getClinicID());
				/* Retrieve labReport List */
				labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
						loginForm.getClinicID());

				String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(lastVisitID);

				request.setAttribute("medicalCertiText", medicatCertificate);

				String referralLetter = patientDAOInf.retrieveReferralLetter(lastVisitID);

				request.setAttribute("referralLetter", referralLetter);

				drugList = configurationUtil.getTradeNameList();

				frequencyList = configurationUtil.getFrequencyList();

				diagnoseList = configurationUtil.getDiagnoseList();

				// chargeTypeList = configurationUtil.getChargeTypeList();

				doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

				hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

				// Setting add opd page name value in pageName variable
				setPageName(formNameArray[0].trim());

				return SUCCESS;

			} else if (formNameArray[0].trim().equals("genaralClinicOPDNew.jsp")) {

				request.setAttribute("apptID", patientForm.getAptID());

				System.out.println("Last visit ID :: " + lastOPDVisitID);

				patientList = patientDAOInf.retrieveGenaralClinicPatientDetailsForNewVisit(patientForm.getPatientID(),
						lastOPDVisitID, loginForm.getClinicID());

				InvestigationList = configurationUtil.getInvestigationList();

				diagnoseList = configurationUtil.getDiagnoseList();

				frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

				if (newVisitCheck) {
					request.setAttribute("paymentType", "");

				} else {

					boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", lastOPDVisitID);

					if (visitCheck) {

						billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
					} else {
						billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
								loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
					}
					/* Retrieve labReport List */
					labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
							loginForm.getClinicID());

					symptomList = patientDAOInf.retrievesymptomCheckList(lastOPDVisitID);

					complaintList = patientDAOInf.retrievecomplaintList(lastOPDVisitID);

					System.out.println("complaintList: " + complaintList.size());

					String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(lastOPDVisitID);
					request.setAttribute("paymentType", paymentType);
				}

				// retrieving present complaint list for last visit of patient
				String complaintList1 = patientDAOInf.retrievePresentComplaintsOfLastVisit(lastOPDVisitID);

				request.setAttribute("complaintList", complaintList1);

				/* HashMap<String, String> PVComplaints = patientDAOInf.getPVComplaints(); */

				PVComplaints = patientDAOInf.getPVComplaints();

				String categoryList1 = patientDAOInf.retrieveCategoryListOfLastVisit(lastOPDVisitID);
				request.setAttribute("categoryList", categoryList1);

				MedicalHistory = patientDAOInf.retrievemedicalHistoryListOfLastVisit(patientForm,
						patientForm.getPatientID());
				request.setAttribute("MedicalHistory", MedicalHistory);

				FamilyHistory = patientDAOInf.retrieveFamilyHistoryListOfLastVisit(patientForm,
						patientForm.getPatientID());
				request.setAttribute("FamilyHistory", FamilyHistory);

				PersonalHistory = patientDAOInf.retrievePersonalHistoryListOfLastVisit(patientForm,
						patientForm.getPatientID());
				request.setAttribute("PersonalHistory", PersonalHistory);

				onEaminationList = patientDAOInf.retrieveOnExaminationListByVisitID(lastOPDVisitID);
				request.setAttribute("onEaminationList", onEaminationList);

				/* Retrieve labReport List */
				labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
						loginForm.getClinicID());

				String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(lastOPDVisitID);

				request.setAttribute("medicalCertiText", medicatCertificate);

				String referralLetter = patientDAOInf.retrieveReferralLetter(lastOPDVisitID);

				request.setAttribute("referralLetter", referralLetter);

				hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

				historyList = patientDAOInf.retrieveMedicalHistoryList(patientForm.getPatientID());

				medicationList = patientDAOInf.retrieveCurrentMedicationList(patientForm.getPatientID());

				doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

				diagnoseList = configurationUtil.getDiagnoseList();

				// Setting add opd page name value in pageName variable
				setPageName(formNameArray[0].trim());

				return SUCCESS;
			} else if (formNameArray[0].trim().equals("mhatreLabOPDAdd.jsp")
					|| formNameArray[0].trim().equals("labOPDAdd.jsp")) {

				patientList = patientDAOInf.retrieveLabPatientDetails(patientForm.getPatientID(), lastOPDVisitID,
						loginForm.getClinicID(), patientForm.getAptID());

				billList = patientDAOInf.retrieveBillDetail(patientForm.getVisitID(), loginForm.getVisitTypeID(),
						loginForm.getClinicID(), loginForm.getClinicSuffix());

				mdDetailsList = configurationUtil.getMDDoctorList(loginForm.getPracticeID());

				labTestValueListNew = new HashMap<String, String>();
				labTestValueListNew1 = new HashMap<String, String>();

				// verify whether receipt added for the current visitID if yes then retrieve the
				// details from Transctions tables else retrive the details from the
				// LabInvestigation tables for the corresponding visitID based on isGroup check
				boolean billCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

				if (billCheck) {
					prescriptionList = patientDAOInf.retrieveTransactionListByVisitID(patientForm.getVisitID());
				} else {
					prescriptionList = patientDAOInf.retrieveTransactionDetailsByVisitID(patientForm.getVisitID());

					groupTestList = patientDAOInf
							.retrieveTransactionDetailsForGroupTestByVisitID(patientForm.getVisitID());
				}

				String paymentType = patientDAOInf.retrievePaymentType(patientForm.getVisitID());

				request.setAttribute("paymentType", paymentType);

				request.setAttribute("apptID", patientForm.getAptID());

				request.setAttribute("opticianFloatCheck", "empty");

				referringDoctorList = configurationUtil.getReferringDoctorList1(loginForm.getPracticeID());

				genderMap.put("Male", "normalValues");
				genderMap.put("Female", "normalValuesWomen");
				genderMap.put("Child", "normalValuesChild");

				diagnoseList = configurationUtil.getDiagnoseList();
				getGroupTestList = configurationUtil.getGroupTestList(loginForm.getPracticeID(),
						genderMap.get(patientGender));
				getSingleTestList = configurationUtil.getSingleTestList(loginForm.getPracticeID(),
						genderMap.get(patientGender));
				String labTest = patientDAOInf.retrieveLabTestByVisitID(patientForm.getVisitID());

				request.setAttribute("labTest", labTest);

				// Setting add opd page name value in pageName variable
				setPageName(formNameArray[0].trim());

				return SUCCESS;

			} else if (formNameArray[0].trim().equals("ctScanOPDAdd.jsp")
					|| formNameArray[0].trim().equals("xRayOPDAdd.jsp")
					|| formNameArray[0].trim().equals("usgOPDAdd.jsp")) {

				patientList = patientDAOInf.retrieveLabPatientDetails(patientForm.getPatientID(), lastOPDVisitID,
						loginForm.getClinicID(), patientForm.getAptID());

				doctorList1 = configurationUtil.getDoctorList(loginForm.getPracticeID());

				referringDoctorList = configurationUtil.getReferringDoctorList1(loginForm.getPracticeID());

				reportList = configurationUtil.getRepostList(loginForm.getVisitTypeID());

				int clinicianID = patientDAOInf.retrieveclinicianIDBYAptID(patientForm.getAptID());

				request.setAttribute("clinicianID", clinicianID);

				diagnoseList = configurationUtil.getDiagnoseList();

				setPageName(formNameArray[0].trim());
				return SUCCESS;
			}

			else {

				String visitType = daoInf1.retrieveVisitTypeNameByID(loginForm.getVisitTypeID());
				System.out.println("visitype is ::" + visitType);

				patientList = patientDAOInf.retrieveLastEnteredVisitDetail(patientForm.getPatientID(), lastOPDVisitID,
						loginForm.getClinicID(), visitType);

				diagnoseList = configurationUtil.getDiagnoseList();

				String dummy = "success";
				String dummy1 = "";

				request.setAttribute("lasteEnteredVisitList", dummy1);

				request.setAttribute("lasteEnteredPrescList", dummy);

				drugList = configurationUtil.getTradeNameList();

				InvestigationList = configurationUtil.getInvestigationList();

				frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

				request.setAttribute("opticianFloatCheck", "empty");

				doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

				categoryList = configurationUtil.getCategoryList();

				hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

				if (newVisitCheck) {
					request.setAttribute("paymentType", "");
				} else {
					/* Retrieve labReport List */
					labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
							loginForm.getClinicID());

					String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(lastOPDVisitID);
					request.setAttribute("paymentType", paymentType);

					prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
							lastOPDVisitID, loginForm.getClinicID());

					boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", lastOPDVisitID);

					if (visitCheck) {

						billList = patientDAOInf.retrieveVisitBillingByVisitID(lastOPDVisitID);
					} else {
						billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
								loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
					}
					InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(lastOPDVisitID);

					diagnosticList = patientDAOInf.retrieveDiagnosticList(lastOPDVisitID);

					symptomList = patientDAOInf.retrievesymptomCheckList(lastOPDVisitID);

					complaintList = patientDAOInf.retrievecomplaintList(lastOPDVisitID);
				}

				/*
				 * retrieve last inserted visit ID for care type OPD by patientID
				 */

				request.setAttribute("apptID", patientForm.getAptID());

				// Inserting values into Audit table
				daoInf.insertAudit(request.getRemoteAddr(), "Add OPD Visit Exception occurred", loginForm.getUserID());

				// Setting add opd page name value in pageName variable
				setPageName(formNameArray[0].trim());

				return SUCCESS;
			}
		}
	}

	public String renderLabTestQuotation() throws Exception {

		patientDAOInf = new PatientDAOImpl();

		/*
		 * Getting user role from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");

		String patientGender = null;

		request.setAttribute("gender", patientGender);

		getGroupTestList = configurationUtil.getGroupTestList(loginForm.getPracticeID(), "normalValues");
		getSingleTestList = configurationUtil.getSingleTestList(loginForm.getPracticeID(), "normalValues");

		labTestValueListNew = new HashMap<String, String>();
		labTestValueListNew1 = new HashMap<String, String>();

		// Setting add opd page name value in pageName variable

		return SUCCESS;
	}

	/**
	 * 
	 * @throws Exception
	 */
	public String addNewPrescription() throws Exception {

		if (patientForm.getAddButton().startsWith(",")) {
			patientForm.getAddButton().substring(1);
		}

		if (patientForm.getAddButton().equals("print") || patientForm.getAddButton().equals("Print")) {
			System.out.println("inside add button = print");
			printGenPhyPrescription();
		} else if (patientForm.getAddButton().equals("download")) {
			System.out.println("inside add button = download");
			downloadGenPhyPrescription();
		} else {
			System.out.println("outside add button = print");

			patientDAOInf = new PatientDAOImpl();

			serviceInf = new eDhanvantariServiceImpl();

			SMSSender smsSender = new SMSSender();

			EmailUtil emailUtil = new EmailUtil();

			ConvertToPDFUtil convertToPDFUtil = new ConvertToPDFUtil();

			LoginDAOInf daoInf = new LoginDAOImpl();

			ClinicDAOInf daoInf1 = new ClinicDAOImpl();
			RegistrationDAOinf registrationDAOinf = new RegistrationDAOImpl();

			PrescriptionManagementDAOInf managementDAOInf = new PrescriptionManagementDAOImpl();

			String accessKey = xmlUtil.getAccessKey();

			String secreteKey = xmlUtil.getSecreteKey();

			AWSS3Connect awss3Connect = new AWSS3Connect();

			// getting input file location from S3 bucket
			String s3reportFilePath = xmlUtil.getS3RDMLReportFilePath();

			String s3LogoFilePath = xmlUtil.getS3RDMLFilePath();

			// getting s3 bucket name
			String bucketName = util.getS3BucketName();

			// getting s3 bucket region
			String bucketRegion = xmlUtil.getS3BucketRegion();

			AWSCredentials credentials = new BasicAWSCredentials(accessKey, secreteKey);

			AmazonS3 s3 = AmazonS3ClientBuilder.standard()
					.withCredentials(new AWSStaticCredentialsProvider(credentials)).withRegion(bucketRegion).build();

			/*
			 * Getting user role from session
			 */
			LoginForm loginForm = (LoginForm) session.get("USER");

			System.out.println("userid loginform is::" + loginForm.getUserID());
			String username = patientDAOInf.retrieveUsernameBYuserID(loginForm.getUserID());
			System.out.println("username loginform is ::" + username);

			/*
			 * Getting form name to be display based on logged in User
			 */
			String[] formNameArray = loginForm.getOPDJSPName().split("&");

			patientForm.setClinicID(loginForm.getClinicID());

			String check1 = patientDAOInf.verifyReferralLetter(patientForm.getVisitID());
			System.out.println("check1 value in action:" + check1);
			request.setAttribute("referralLetterCheck", check1);

			orthoBillItemList = patientDAOInf.retrieveOrthoBillingItemList(patientForm.getVisitID());

			String check = patientDAOInf.verifyMedicalCertificate(patientForm.getVisitID());
			System.out.println("check value in action:" + check);
			request.setAttribute("medicalCertiCheck", check);

			message = serviceInf.addNewPrescription(patientForm);

			if (message.equals("success")) {

				addActionMessage("Prescription added successfully.");

				String prescTabCheck = "enable";

				request.setAttribute("prescTabCheck", prescTabCheck);

				HttpServletRequest request = ServletActionContext.getRequest();

				ServletContext context = request.getServletContext();

				String realPath = context.getRealPath("/");

				String pdfOutFIleName = patientForm.getFirstName() + patientForm.getLastName()
						+ patientForm.getPatientID() + "_" + patientForm.getVisitID() + "p.pdf";

				message = convertToPDFUtil.convertPrescriptionPDF(patientForm.getPatientID(), patientForm.getVisitID(),
						realPath, pdfOutFIleName, loginForm.getClinicID(), loginForm.getPracticeID(), username, s3,
						s3LogoFilePath, bucketName);

				if (message.equals("success")) {

					File inputFile = new File(realPath + "/" + pdfOutFIleName);

					// Storing file to S3 RDML INPUT FILE location
					message = awss3Connect.pushFile(inputFile, pdfOutFIleName, bucketName, bucketRegion,
							s3reportFilePath);

					S3ObjectInputStream s3ObjectInputStream = s3
							.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, pdfOutFIleName))
							.getObjectContent();

					patientForm.setFileInputStream(s3ObjectInputStream);

					patientForm.setFileName(pdfOutFIleName);

					boolean EmailCheck = util.verifyCommunicationCheck("emailPresc");

					if (EmailCheck) {

						/*
						 * Retrieving patient's email ID, if not null, then sending patient a welcome
						 * mail
						 */
						String emailID = patientDAOInf.retrievePatientEmailByID(patientForm.getPatientID());

						if (emailID == null || emailID == "") {
							System.out.println("EmailID no not found for patient.");
						} else {

							if (emailID.isEmpty()) {
								System.out.println("EmailID no not found for patient.");
							} else {

								/*
								 * Sending prescription mail to patient
								 */
								emailUtil.sendPrescriptionMail(patientForm.getPatientID(), loginForm.getPracticeID(),
										loginForm.getClinicID(), patientForm.getVisitID(), realPath, pdfOutFIleName,
										emailID);
							}

						}

					}

					/*
					 * Check whether appointment udpated flag is on or not, and depending upon that
					 * sending SMS and Email
					 */
					boolean SMSCheck = util.verifyCommunicationCheck("smsPresc");

					if (SMSCheck) {

						/*
						 * Retrieving patient's mobile no, if mobile is not null, then sending patient a
						 * welcome message
						 */
						String mobileNo = patientDAOInf.retrievePatientMobileNoByID(patientForm.getPatientID());

						/*
						 * Sending patient a welcome as well as Appointment scheduled message on
						 * checking whether mobile no is available for that patient or not
						 */
						if (mobileNo == null || mobileNo == "") {
							System.out.println("Mobile no not found for patient.");
						} else {

							if (mobileNo.isEmpty()) {
								System.out.println("Mobile no not found for patient.");
							} else {

								/*
								 * Sending bill details SMS to patient
								 */
								smsSender.sendGeneralisedPrescriptionORBillSMS(patientForm.getVisitID(), mobileNo,
										loginForm.getPracticeID(), loginForm.getClinicID(), ActivityStatus.PRESCRIPTION,
										pdfOutFIleName);

							}

						}

					}

				}

				/*
				 * Update appointment status to Prescription
				 */
				patientDAOInf.updatePrescriptionAppointmentStatus(patientForm.getPatientID(), patientForm.getAptID());

				/*
				 * retrieving patientList which contains visit details
				 */
				if (formNameArray[0].trim().equals("generalOPDNew.jsp")
						|| formNameArray[0].trim().equals("telephonicNew.jsp")
						|| formNameArray[0].trim().equals("physicianOPDNew.jsp")
						|| formNameArray[0].trim().equals("generalPhysicianOPD.jsp")
						|| formNameArray[0].trim().equals("generalPhysicianGokhaleOPD.jsp")) {
					patientList = patientDAOInf.retrieveDefaultPatientDetails(patientForm.getPatientID(),
							patientForm.getVisitID(), loginForm.getClinicID(), patientForm.getAptID(),
							loginForm.getVisitTypeID());
				} else {
					String visitType = daoInf1.retrieveVisitTypeNameByID(loginForm.getVisitTypeID());
					System.out.println("visitype is ::" + visitType);

					patientList = patientDAOInf.retrieveLastEnteredVisitDetail(patientForm.getPatientID(),
							patientForm.getVisitID(), loginForm.getClinicID(), visitType);

				}

				boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

				if (visitCheck) {
					billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
				} else {
					billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
							loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
				}

				/* Retrieve labReport List */
				labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
						loginForm.getClinicID());

				String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
				request.setAttribute("paymentType", paymentType);

				// String dummy = "";
				String dummy = "success";

				request.setAttribute("lasteEnteredVisitList", "");

				request.setAttribute("lasteEnteredPrescList", dummy);

				request.setAttribute("lasteEnteredBillList", "");

				String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

				request.setAttribute("medicalCertiText", medicatCertificate);

				String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

				request.setAttribute("referralLetter", referralLetter);
				/*
				 * retrieving prescription list by visitID
				 */
				prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID());

				InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

				diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());

				proceduresList = patientDAOInf.retrieveProceduresList(patientForm.getVisitID());

				InvestigationList = configurationUtil.getInvestigationList();

				DiagnosticList1 = configurationUtil.getDiagnosticList1();

				ProcedureList = configurationUtil.getProceduresList();

				/*
				 * retrieving symptomCheck list by visitID
				 */
				symptomList = patientDAOInf.retrievesymptomCheckList(patientForm.getVisitID());

				complaintList = patientDAOInf.retrievecomplaintList(patientForm.getVisitID());

				historyList = patientDAOInf.retrieveMedicalHistoryList(patientForm.getPatientID());

				medicationList = patientDAOInf.retrieveCurrentMedicationList(patientForm.getPatientID());

				// Checking if the CRF form is for Gokhale clinic, if so then load the diagnosis
				// from the json file else load the diagnosis from the PVDiagnosis table
				if (formNameArray[0].trim().equals("generalPhysicianGokhaleOPD.jsp")) {

					// Retrieving diagnosis list for the last visit ID
					orthoDiagnosisList = patientDAOInf.retrieveOrthoDiagnosisList(patientForm.getVisitID());

					JSONParser parser = new JSONParser();

					JSONArray diagnosisJSON = (JSONArray) parser
							.parse(new FileReader(realPath + File.separator + "ortho_charges.json"));

					for (Object jsonData : diagnosisJSON) {
						JSONObject data = (JSONObject) jsonData;

						// diagnoseList.put((String) data.get("rate"), (String) data.get("diagnosis"));
					}

				}

				diagnoseList = configurationUtil.getDiagnoseList();

				request.setAttribute("apptID", patientForm.getAptID());

				// drugList = configurationUtil.getTradeNameList();

				if (patientForm.getPracticeID() == 60) {
					drugList = configurationUtil.getPECTradeNameList();
					categoryList = configurationUtil.getPECCategoryList();
				} else {
					drugList = configurationUtil.getTradeNameList();
					categoryList = configurationUtil.getCategoryList();
				}

				frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

				doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

				// categoryList = configurationUtil.getCategoryList();

				hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

				// Inserting values into Audit table
				daoInf.insertAudit(request.getRemoteAddr(), "Add General Physician Prescription",
						loginForm.getUserID());

				System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[0].trim());

				// Setting add opd page name value in pageName variable
				setPageName(formNameArray[0].trim());

				return SUCCESS;

			} else if (message.equals("noVisit")) {

				addActionError("No visit added. Please add visit first.");

				String prescTabCheck = "enable";

				request.setAttribute("prescTabCheck", prescTabCheck);

				String dummy = "success";

				request.setAttribute("lasteEnteredVisitList", "");

				request.setAttribute("lasteEnteredPrescList", "");

				request.setAttribute("lasteEnteredBillList", "");

				String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

				request.setAttribute("medicalCertiText", medicatCertificate);

				String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

				request.setAttribute("referralLetter", referralLetter);
				/*
				 * retrieving patientList which contains visit details
				 */
				if (formNameArray[0].trim().equals("generalOPDNew.jsp")
						|| formNameArray[0].trim().equals("telephonicNew.jsp")
						|| formNameArray[0].trim().equals("physicianOPDNew.jsp")
						|| formNameArray[0].trim().equals("generalPhysicianOPD.jsp")
						|| formNameArray[0].trim().equals("generalPhysicianGokhaleOPD.jsp")) {
					patientList = patientDAOInf.retrieveDefaultPatientDetails(patientForm.getPatientID(),
							patientForm.getVisitID(), loginForm.getClinicID(), patientForm.getAptID(),
							loginForm.getVisitTypeID());
				} else {
					String visitType = daoInf1.retrieveVisitTypeNameByID(loginForm.getVisitTypeID());
					System.out.println("visitype is ::" + visitType);

					patientList = patientDAOInf.retrieveLastEnteredVisitDetail(patientForm.getPatientID(),
							patientForm.getLastVisitID(), loginForm.getClinicID(), visitType);

				}
				hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

				/*
				 * retrieving prescription list by visitID
				 */
				prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID());

				InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

				diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());

				proceduresList = patientDAOInf.retrieveProceduresList(patientForm.getVisitID());

				/*
				 * retrieving symptomCheck list by visitID
				 */
				symptomList = patientDAOInf.retrievesymptomCheckList(patientForm.getVisitID());

				complaintList = patientDAOInf.retrievecomplaintList(patientForm.getVisitID());

				historyList = patientDAOInf.retrieveMedicalHistoryList(patientForm.getPatientID());

				medicationList = patientDAOInf.retrieveCurrentMedicationList(patientForm.getPatientID());

				boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

				if (visitCheck) {
					billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
				} else {
					billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
							loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
				}

				/* Retrieve labReport List */
				labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
						loginForm.getClinicID());

				String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
				request.setAttribute("paymentType", paymentType);

				request.setAttribute("apptID", patientForm.getAptID());

				// Checking if the CRF form is for Gokhale clinic, if so then load the diagnosis
				// from the json file else load the diagnosis from the PVDiagnosis table
				if (formNameArray[0].trim().equals("generalPhysicianGokhaleOPD.jsp")) {

					// Retrieving diagnosis list for the last visit ID
					orthoDiagnosisList = patientDAOInf.retrieveOrthoDiagnosisList(patientForm.getVisitID());

					HttpServletRequest request = ServletActionContext.getRequest();

					ServletContext context = request.getServletContext();

					String realPath = context.getRealPath("/");

					JSONParser parser = new JSONParser();

					JSONArray diagnosisJSON = (JSONArray) parser
							.parse(new FileReader(realPath + File.separator + "ortho_charges.json"));

					for (Object jsonData : diagnosisJSON) {
						JSONObject data = (JSONObject) jsonData;

						// diagnoseList.put((String) data.get("rate"), (String) data.get("diagnosis"));
					}

				}

				diagnoseList = configurationUtil.getDiagnoseList();

				// drugList = configurationUtil.getTradeNameList();

				// categoryList = configurationUtil.getCategoryList();

				if (patientForm.getPracticeID() == 60) {
					drugList = configurationUtil.getPECTradeNameList();
					categoryList = configurationUtil.getPECCategoryList();
				} else {
					drugList = configurationUtil.getTradeNameList();
					categoryList = configurationUtil.getCategoryList();
				}

				InvestigationList = configurationUtil.getInvestigationList();

				DiagnosticList1 = configurationUtil.getDiagnosticList1();

				ProcedureList = configurationUtil.getProceduresList();

				frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

				// chargeTypeList = configurationUtil.getChargeTypeList();

				doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

				/*
				 * Update appointment status to Prescription
				 */
				patientDAOInf.updatePrescriptionAppointmentStatus(patientForm.getPatientID(), patientForm.getAptID());

				// Inserting values into Audit table
				daoInf.insertAudit(request.getRemoteAddr(), "Add General Physician Prescription Exception occurred",
						loginForm.getUserID());

				System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[0].trim());

				// Setting add opd page name value in pageName variable
				setPageName(formNameArray[0].trim());

				return ERROR;

			} else {

				addActionError(
						"Eexception occurred while adding prescription details. Please check server logs for more details.");

				String prescTabCheck = "enable";

				request.setAttribute("prescTabCheck", prescTabCheck);

				String dummy = "";

				request.setAttribute("lasteEnteredVisitList", "");

				request.setAttribute("lasteEnteredPrescList", dummy);

				request.setAttribute("lasteEnteredBillList", dummy);

				String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

				request.setAttribute("medicalCertiText", medicatCertificate);

				String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

				request.setAttribute("referralLetter", referralLetter);
				/*
				 * retrieving patientList which contains visit details
				 */
				if (formNameArray[0].trim().equals("generalOPDNew.jsp")
						|| formNameArray[0].trim().equals("telephonicNew.jsp")
						|| formNameArray[0].trim().equals("physicianOPDNew.jsp")
						|| formNameArray[0].trim().equals("generalPhysicianOPD.jsp")
						|| formNameArray[0].trim().equals("generalPhysicianGokhaleOPD.jsp")) {
					patientList = patientDAOInf.retrieveDefaultPatientDetails(patientForm.getPatientID(),
							patientForm.getVisitID(), loginForm.getClinicID(), patientForm.getAptID(),
							loginForm.getVisitTypeID());
				} else {
					String visitType = daoInf1.retrieveVisitTypeNameByID(loginForm.getVisitTypeID());
					System.out.println("visitype is ::" + visitType);

					patientList = patientDAOInf.retrieveLastEnteredVisitDetail(patientForm.getPatientID(),
							patientForm.getLastVisitID(), loginForm.getClinicID(), visitType);

				}

				hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

				request.setAttribute("apptID", patientForm.getAptID());

				boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

				if (visitCheck) {
					billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
				} else {
					billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
							loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
				}

				/*
				 * retrieving prescription list by visitID
				 */
				prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID());

				InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

				diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());

				proceduresList = patientDAOInf.retrieveProceduresList(patientForm.getVisitID());

				/*
				 * retrieving symptomCheck list by visitID
				 */
				symptomList = patientDAOInf.retrievesymptomCheckList(patientForm.getVisitID());

				complaintList = patientDAOInf.retrievecomplaintList(patientForm.getVisitID());

				historyList = patientDAOInf.retrieveMedicalHistoryList(patientForm.getPatientID());

				medicationList = patientDAOInf.retrieveCurrentMedicationList(patientForm.getPatientID());

				/* Retrieve labReport List */
				labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
						loginForm.getClinicID());

				String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
				request.setAttribute("paymentType", paymentType);

				// Checking if the CRF form is for Gokhale clinic, if so then load the diagnosis
				// from the json file else load the diagnosis from the PVDiagnosis table
				if (formNameArray[0].trim().equals("generalPhysicianGokhaleOPD.jsp")) {

					// Retrieving diagnosis list for the last visit ID
					orthoDiagnosisList = patientDAOInf.retrieveOrthoDiagnosisList(patientForm.getVisitID());

					HttpServletRequest request = ServletActionContext.getRequest();

					ServletContext context = request.getServletContext();

					String realPath = context.getRealPath("/");

					JSONParser parser = new JSONParser();

					JSONArray diagnosisJSON = (JSONArray) parser
							.parse(new FileReader(realPath + File.separator + "ortho_charges.json"));

					for (Object jsonData : diagnosisJSON) {
						JSONObject data = (JSONObject) jsonData;

						// diagnoseList.put((String) data.get("rate"), (String) data.get("diagnosis"));
					}

				}
				diagnoseList = configurationUtil.getDiagnoseList();

				// drugList = configurationUtil.getTradeNameList();

				InvestigationList = configurationUtil.getInvestigationList();

				DiagnosticList1 = configurationUtil.getDiagnosticList1();

				ProcedureList = configurationUtil.getProceduresList();

				frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

				// chargeTypeList = configurationUtil.getChargeTypeList();

				doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

				// categoryList = configurationUtil.getCategoryList();

				if (patientForm.getPracticeID() == 60) {
					drugList = configurationUtil.getPECTradeNameList();
					categoryList = configurationUtil.getPECCategoryList();
				} else {
					drugList = configurationUtil.getTradeNameList();
					categoryList = configurationUtil.getCategoryList();
				}

				/*
				 * Update appointment status to Prescription
				 */
				patientDAOInf.updatePrescriptionAppointmentStatus(patientForm.getPatientID(), patientForm.getAptID());

				// Inserting values into Audit table
				daoInf.insertAudit(request.getRemoteAddr(), "Add General Physician Prescription Exception occurred",
						loginForm.getUserID());

				System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[0].trim());

				// Setting add opd page name value in pageName variable
				setPageName(formNameArray[0].trim());

				return ERROR;

			}
		}
		return SUCCESS;
	}

	/**
	 * 
	 * @return
	 * @throws Exception
	 */
	public String addNewIPDPrescription() throws Exception {

		if (patientForm.getAddButton().startsWith(",")) {
			patientForm.getAddButton().substring(1);
		}

		patientDAOInf = new PatientDAOImpl();

		serviceInf = new eDhanvantariServiceImpl();

		SMSSender smsSender = new SMSSender();

		EmailUtil emailUtil = new EmailUtil();

		ConvertToPDFUtil convertToPDFUtil = new ConvertToPDFUtil();

		LoginDAOInf daoInf = new LoginDAOImpl();

		ClinicDAOInf daoInf1 = new ClinicDAOImpl();
		RegistrationDAOinf registrationDAOinf = new RegistrationDAOImpl();

		PrescriptionManagementDAOInf managementDAOInf = new PrescriptionManagementDAOImpl();

		String accessKey = xmlUtil.getAccessKey();

		String secreteKey = xmlUtil.getSecreteKey();

		AWSS3Connect awss3Connect = new AWSS3Connect();

		// getting input file location from S3 bucket
		String s3reportFilePath = xmlUtil.getS3RDMLReportFilePath();

		String s3LogoFilePath = xmlUtil.getS3RDMLFilePath();

		request.setAttribute("apptID", patientForm.getAptID());

		// getting s3 bucket name
		String bucketName = util.getS3BucketName();

		request.setAttribute("consentDocFile", "Yes");

		// getting s3 bucket region
		String bucketRegion = xmlUtil.getS3BucketRegion();

		AWSCredentials credentials = new BasicAWSCredentials(accessKey, secreteKey);

		AmazonS3 s3 = AmazonS3ClientBuilder.standard().withCredentials(new AWSStaticCredentialsProvider(credentials))
				.withRegion(bucketRegion).build();

		/*
		 * Getting user role from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");

		System.out.println("userid loginform is::" + loginForm.getUserID());
		String username = patientDAOInf.retrieveUsernameBYuserID(loginForm.getUserID());
		System.out.println("username loginform is ::" + username);

		/*
		 * Getting form name to be display based on logged in User
		 */
		String[] formNameArray = loginForm.getOPDJSPName().split("&");

		patientForm.setClinicID(loginForm.getClinicID());

		String check1 = patientDAOInf.verifyReferralLetter(patientForm.getVisitID());
		System.out.println("check1 value in action:" + check1);
		request.setAttribute("referralLetterCheck", check1);

		String check = patientDAOInf.verifyMedicalCertificate(patientForm.getVisitID());
		System.out.println("check value in action:" + check);
		request.setAttribute("medicalCertiCheck", check);

		orthoBillItemList = patientDAOInf.retrieveOrthoBillingItemList(patientForm.getVisitID());

		message = serviceInf.addNewPrescription(patientForm);

		if (message.equals("success")) {

			addActionMessage("Prescription added successfully.");

			String prescTabCheck = "enable";

			request.setAttribute("prescTabCheck", prescTabCheck);

			HttpServletRequest request = ServletActionContext.getRequest();

			ServletContext context = request.getServletContext();

			String realPath = context.getRealPath("/");

			String pdfOutFIleName = patientForm.getFirstName() + patientForm.getLastName() + patientForm.getPatientID()
					+ "_" + patientForm.getVisitID() + "p.pdf";

			message = convertToPDFUtil.convertIPDPrescriptionPDF(patientForm.getPatientID(), patientForm.getVisitID(),
					realPath, pdfOutFIleName, loginForm.getClinicID(), loginForm.getPracticeID(), username, s3,
					s3LogoFilePath, bucketName);

			if (message.equals("success")) {

				File inputFile = new File(realPath + "/" + pdfOutFIleName);

				// Storing file to S3 RDML INPUT FILE location
				message = awss3Connect.pushFile(inputFile, pdfOutFIleName, bucketName, bucketRegion, s3reportFilePath);

				S3ObjectInputStream s3ObjectInputStream = s3
						.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, pdfOutFIleName))
						.getObjectContent();

				if (patientForm.getAddButton().equals("print") || patientForm.getAddButton().equals("Print")) {
					request.setAttribute("PDFOutFileName", pdfOutFIleName);
				}

				patientForm.setFileInputStream(s3ObjectInputStream);

				patientForm.setFileName(pdfOutFIleName);

				boolean EmailCheck = util.verifyCommunicationCheck("emailPresc");

				if (EmailCheck) {

					/*
					 * Retrieving patient's email ID, if not null, then sending patient a welcome
					 * mail
					 */
					String emailID = patientDAOInf.retrievePatientEmailByID(patientForm.getPatientID());

					if (emailID == null || emailID == "") {
						System.out.println("EmailID no not found for patient.");
					} else {

						if (emailID.isEmpty()) {
							System.out.println("EmailID no not found for patient.");
						} else {

							/*
							 * Sending prescription mail to patient
							 */
							emailUtil.sendPrescriptionMail(patientForm.getPatientID(), loginForm.getPracticeID(),
									loginForm.getClinicID(), patientForm.getVisitID(), realPath, pdfOutFIleName,
									emailID);
						}

					}

				}

				/*
				 * Check whether appointment udpated flag is on or not, and depending upon that
				 * sending SMS and Email
				 */
				boolean SMSCheck = util.verifyCommunicationCheck("smsPresc");

				if (SMSCheck) {

					/*
					 * Retrieving patient's mobile no, if mobile is not null, then sending patient a
					 * welcome message
					 */
					String mobileNo = patientDAOInf.retrievePatientMobileNoByID(patientForm.getPatientID());

					/*
					 * Sending patient a welcome as well as Appointment scheduled message on
					 * checking whether mobile no is available for that patient or not
					 */
					if (mobileNo == null || mobileNo == "") {
						System.out.println("Mobile no not found for patient.");
					} else {

						if (mobileNo.isEmpty()) {
							System.out.println("Mobile no not found for patient.");
						} else {

							/*
							 * Sending bill details SMS to patient
							 */
							smsSender.sendGeneralisedPrescriptionORBillSMS(patientForm.getVisitID(), mobileNo,
									loginForm.getPracticeID(), loginForm.getClinicID(), ActivityStatus.PRESCRIPTION,
									pdfOutFIleName);

						}

					}

				}

			}

			/*
			 * Update appointment status to Prescription
			 */
			patientDAOInf.updatePrescriptionAppointmentStatus(patientForm.getPatientID(), patientForm.getAptID());

			String lastEneteredVisitList = "success";

			request.setAttribute("lastEneteredVisitList", lastEneteredVisitList);

			String dummy = "success";

			request.setAttribute("lasteEnteredVisitList", dummy);

			request.setAttribute("consentText", "success");

			String ipdVisitPage = "display";

			boolean hasConsent = patientDAOInf.verifyhasConsentValue(loginForm.getVisitTypeID());

			if (hasConsent) {

				String consentDocFileName = patientDAOInf.retrieveConsentDocFileName(loginForm.getVisitTypeID());

				request.setAttribute("consentDocFileName", consentDocFileName);
			}

			LabInvastigationList = patientDAOInf.reytrieveLabInvastigationLstByVisitID(patientForm.getVisitID());

			request.setAttribute("LabInvastigationList", LabInvastigationList);

			request.setAttribute("display", ipdVisitPage);

			patientList = patientDAOInf.retireveLastEneteredIPDVisit(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID());

			IPDComplaintsList = patientDAOInf.retrieveIPDComplaintsList(patientForm.getVisitID());

			diagnoseList = configurationUtil.getDiagnoseList();

			boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

			if (visitCheck) {
				billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
			} else {
				billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
						loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
			}

			/* Retrieve labReport List */
			labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
					loginForm.getClinicID());

			String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
			request.setAttribute("paymentType", paymentType);

			request.setAttribute("lasteEnteredPrescList", dummy);

			request.setAttribute("lasteEnteredBillList", "");

			String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

			request.setAttribute("medicalCertiText", medicatCertificate);

			String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

			request.setAttribute("referralLetter", referralLetter);
			/*
			 * retrieving prescription list by visitID
			 */
			prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID());

			InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

			diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());
			InvestigationList = configurationUtil.getInvestigationList();

			request.setAttribute("apptID", patientForm.getAptID());

			drugList = configurationUtil.getTradeNameList();

			frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

			doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

			categoryList = configurationUtil.getCategoryList();

			hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Add IPD Prescription", loginForm.getUserID());

			System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[0].trim());

			// Setting add opd page name value in pageName variable
			setPageName(formNameArray[0].trim());

			return SUCCESS;

		} else if (message.equals("noVisit")) {

			addActionError("No visit added. Please add visit first.");

			String lastEneteredVisitList = "";

			request.setAttribute("lastEneteredVisitList", lastEneteredVisitList);

			String dummy = "success";

			request.setAttribute("lasteEnteredVisitList", dummy);

			request.setAttribute("consentText", "success");

			String ipdVisitPage = "display";

			boolean hasConsent = patientDAOInf.verifyhasConsentValue(loginForm.getVisitTypeID());

			if (hasConsent) {

				String consentDocFileName = patientDAOInf.retrieveConsentDocFileName(loginForm.getVisitTypeID());

				request.setAttribute("consentDocFileName", consentDocFileName);
			}

			LabInvastigationList = patientDAOInf.reytrieveLabInvastigationLstByVisitID(patientForm.getVisitID());

			request.setAttribute("LabInvastigationList", LabInvastigationList);

			request.setAttribute("display", ipdVisitPage);

			patientList = patientDAOInf.retireveLastEneteredIPDVisit(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID());

			IPDComplaintsList = patientDAOInf.retrieveIPDComplaintsList(patientForm.getVisitID());

			String prescTabCheck = "enable";

			request.setAttribute("prescTabCheck", prescTabCheck);

			request.setAttribute("lasteEnteredPrescList", "");

			request.setAttribute("lasteEnteredBillList", "");

			String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

			request.setAttribute("medicalCertiText", medicatCertificate);

			String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

			request.setAttribute("referralLetter", referralLetter);

			hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

			/*
			 * retrieving prescription list by visitID
			 */
			prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID());

			InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

			diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());

			boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

			if (visitCheck) {
				billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
			} else {
				billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
						loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
			}

			/* Retrieve labReport List */
			labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
					loginForm.getClinicID());

			String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
			request.setAttribute("paymentType", paymentType);

			request.setAttribute("apptID", patientForm.getAptID());

			diagnoseList = configurationUtil.getDiagnoseList();

			drugList = configurationUtil.getTradeNameList();

			categoryList = configurationUtil.getCategoryList();

			InvestigationList = configurationUtil.getInvestigationList();

			frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

			// chargeTypeList = configurationUtil.getChargeTypeList();

			doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Add IPD Prescription Exception occurred",
					loginForm.getUserID());

			System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[0].trim());

			// Setting add opd page name value in pageName variable
			setPageName(formNameArray[0].trim());

			return ERROR;

		} else {

			addActionError(
					"Eexception occurred while adding prescription details. Please check server logs for more details.");

			String prescTabCheck = "enable";

			request.setAttribute("prescTabCheck", prescTabCheck);

			String lastEneteredVisitList = "success";

			request.setAttribute("lastEneteredVisitList", lastEneteredVisitList);

			String dummy = "success";

			request.setAttribute("lasteEnteredVisitList", dummy);

			request.setAttribute("consentText", "success");

			String ipdVisitPage = "display";

			boolean hasConsent = patientDAOInf.verifyhasConsentValue(loginForm.getVisitTypeID());

			if (hasConsent) {

				String consentDocFileName = patientDAOInf.retrieveConsentDocFileName(loginForm.getVisitTypeID());

				request.setAttribute("consentDocFileName", consentDocFileName);
			}

			LabInvastigationList = patientDAOInf.reytrieveLabInvastigationLstByVisitID(patientForm.getVisitID());

			request.setAttribute("LabInvastigationList", LabInvastigationList);

			request.setAttribute("display", ipdVisitPage);

			patientList = patientDAOInf.retireveLastEneteredIPDVisit(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID());

			IPDComplaintsList = patientDAOInf.retrieveIPDComplaintsList(patientForm.getVisitID());

			request.setAttribute("lasteEnteredPrescList", dummy);

			request.setAttribute("lasteEnteredBillList", dummy);

			String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

			request.setAttribute("medicalCertiText", medicatCertificate);

			String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

			request.setAttribute("referralLetter", referralLetter);

			hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

			request.setAttribute("apptID", patientForm.getAptID());

			boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

			if (visitCheck) {
				billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
			} else {
				billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
						loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
			}

			/*
			 * retrieving prescription list by visitID
			 */
			prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID());

			InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

			diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());

			/* Retrieve labReport List */
			labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
					loginForm.getClinicID());

			String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
			request.setAttribute("paymentType", paymentType);

			diagnoseList = configurationUtil.getDiagnoseList();

			drugList = configurationUtil.getTradeNameList();

			InvestigationList = configurationUtil.getInvestigationList();

			frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

			// chargeTypeList = configurationUtil.getChargeTypeList();

			doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

			categoryList = configurationUtil.getCategoryList();

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Add IPD Prescription Exception occurred",
					loginForm.getUserID());

			System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[0].trim());

			// Setting add opd page name value in pageName variable
			setPageName(formNameArray[0].trim());

			return ERROR;

		}

	}

	/**
	 * 
	 * @return
	 * @throws Exception
	 */
	public String editIPDPrescription() throws Exception {

		if (patientForm.getAddButton().startsWith(",")) {
			patientForm.getAddButton().substring(1);
		}

		System.out.println("outside add button = print");

		patientDAOInf = new PatientDAOImpl();

		serviceInf = new eDhanvantariServiceImpl();

		SMSSender smsSender = new SMSSender();

		EmailUtil emailUtil = new EmailUtil();

		ConvertToPDFUtil convertToPDFUtil = new ConvertToPDFUtil();

		LoginDAOInf daoInf = new LoginDAOImpl();

		ClinicDAOInf daoInf1 = new ClinicDAOImpl();
		RegistrationDAOinf registrationDAOinf = new RegistrationDAOImpl();

		PrescriptionManagementDAOInf managementDAOInf = new PrescriptionManagementDAOImpl();

		String accessKey = xmlUtil.getAccessKey();

		String secreteKey = xmlUtil.getSecreteKey();

		AWSS3Connect awss3Connect = new AWSS3Connect();

		// getting input file location from S3 bucket
		String s3reportFilePath = xmlUtil.getS3RDMLReportFilePath();

		String s3LogoFilePath = xmlUtil.getS3RDMLFilePath();

		request.setAttribute("apptID", patientForm.getAptID());

		// getting s3 bucket name
		String bucketName = util.getS3BucketName();

		// getting s3 bucket region
		String bucketRegion = xmlUtil.getS3BucketRegion();

		AWSCredentials credentials = new BasicAWSCredentials(accessKey, secreteKey);

		AmazonS3 s3 = AmazonS3ClientBuilder.standard().withCredentials(new AWSStaticCredentialsProvider(credentials))
				.withRegion(bucketRegion).build();

		orthoBillItemList = patientDAOInf.retrieveOrthoBillingItemList(patientForm.getVisitID());

		/*
		 * Getting user role from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");

		System.out.println("userid loginform is::" + loginForm.getUserID());
		String username = patientDAOInf.retrieveUsernameBYuserID(loginForm.getUserID());
		System.out.println("username loginform is ::" + username);

		request.setAttribute("consentDocFile", "Yes");

		/*
		 * Getting form name to be display based on logged in User
		 */
		String[] formNameArray = loginForm.getOPDJSPName().split("&");

		patientForm.setClinicID(loginForm.getClinicID());

		String check1 = patientDAOInf.verifyReferralLetter(patientForm.getVisitID());
		System.out.println("check1 value in action:" + check1);
		request.setAttribute("referralLetterCheck", check1);

		String check = patientDAOInf.verifyMedicalCertificate(patientForm.getVisitID());
		System.out.println("check value in action:" + check);
		request.setAttribute("medicalCertiCheck", check);

		message = serviceInf.addNewPrescription(patientForm);

		if (message.equals("success")) {

			addActionMessage("Prescription saved successfully.");

			String prescTabCheck = "enable";

			request.setAttribute("prescTabCheck", prescTabCheck);

			HttpServletRequest request = ServletActionContext.getRequest();

			ServletContext context = request.getServletContext();

			String realPath = context.getRealPath("/");

			String pdfOutFIleName = patientForm.getFirstName() + patientForm.getLastName() + patientForm.getPatientID()
					+ "_" + patientForm.getVisitID() + "p.pdf";

			message = convertToPDFUtil.convertIPDPrescriptionPDF(patientForm.getPatientID(), patientForm.getVisitID(),
					realPath, pdfOutFIleName, loginForm.getClinicID(), loginForm.getPracticeID(), username, s3,
					s3LogoFilePath, bucketName);

			if (message.equals("success")) {

				File inputFile = new File(realPath + "/" + pdfOutFIleName);

				// Storing file to S3 RDML INPUT FILE location
				message = awss3Connect.pushFile(inputFile, pdfOutFIleName, bucketName, bucketRegion, s3reportFilePath);

				S3ObjectInputStream s3ObjectInputStream = s3
						.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, pdfOutFIleName))
						.getObjectContent();

				if (patientForm.getAddButton().equals("print") || patientForm.getAddButton().equals("Print")) {
					request.setAttribute("PDFOutFileName", pdfOutFIleName);
				}

				patientForm.setFileInputStream(s3ObjectInputStream);

				patientForm.setFileName(pdfOutFIleName);

				boolean EmailCheck = util.verifyCommunicationCheck("emailPresc");

				if (EmailCheck) {

					/*
					 * Retrieving patient's email ID, if not null, then sending patient a welcome
					 * mail
					 */
					String emailID = patientDAOInf.retrievePatientEmailByID(patientForm.getPatientID());

					if (emailID == null || emailID == "") {
						System.out.println("EmailID no not found for patient.");
					} else {

						if (emailID.isEmpty()) {
							System.out.println("EmailID no not found for patient.");
						} else {

							/*
							 * Sending prescription mail to patient
							 */
							emailUtil.sendPrescriptionMail(patientForm.getPatientID(), loginForm.getPracticeID(),
									loginForm.getClinicID(), patientForm.getVisitID(), realPath, pdfOutFIleName,
									emailID);
						}

					}

				}

				/*
				 * Check whether appointment udpated flag is on or not, and depending upon that
				 * sending SMS and Email
				 */
				boolean SMSCheck = util.verifyCommunicationCheck("smsPresc");

				if (SMSCheck) {

					/*
					 * Retrieving patient's mobile no, if mobile is not null, then sending patient a
					 * welcome message
					 */
					String mobileNo = patientDAOInf.retrievePatientMobileNoByID(patientForm.getPatientID());

					/*
					 * Sending patient a welcome as well as Appointment scheduled message on
					 * checking whether mobile no is available for that patient or not
					 */
					if (mobileNo == null || mobileNo == "") {
						System.out.println("Mobile no not found for patient.");
					} else {

						if (mobileNo.isEmpty()) {
							System.out.println("Mobile no not found for patient.");
						} else {

							/*
							 * Sending bill details SMS to patient
							 */
							smsSender.sendGeneralisedPrescriptionORBillSMS(patientForm.getVisitID(), mobileNo,
									loginForm.getPracticeID(), loginForm.getClinicID(), ActivityStatus.PRESCRIPTION,
									pdfOutFIleName);

						}

					}

				}

			}

			/*
			 * Update appointment status to Prescription
			 */
			patientDAOInf.updatePrescriptionAppointmentStatus(patientForm.getPatientID(), patientForm.getAptID());

			String lastEneteredVisitList = "success";

			request.setAttribute("lastEneteredVisitList", lastEneteredVisitList);

			String dummy = "success";

			request.setAttribute("lasteEnteredVisitList", dummy);

			request.setAttribute("consentText", "success");

			String ipdVisitPage = "display";

			boolean hasConsent = patientDAOInf.verifyhasConsentValue(loginForm.getVisitTypeID());

			if (hasConsent) {

				String consentDocFileName = patientDAOInf.retrieveConsentDocFileName(loginForm.getVisitTypeID());

				request.setAttribute("consentDocFileName", consentDocFileName);
			}

			LabInvastigationList = patientDAOInf.reytrieveLabInvastigationLstByVisitID(patientForm.getVisitID());

			request.setAttribute("LabInvastigationList", LabInvastigationList);

			request.setAttribute("display", ipdVisitPage);

			patientList = patientDAOInf.retireveLastEneteredIPDVisit(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID());

			IPDComplaintsList = patientDAOInf.retrieveIPDComplaintsList(patientForm.getVisitID());

			diagnoseList = configurationUtil.getDiagnoseList();

			boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

			if (visitCheck) {
				billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
			} else {
				billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
						loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
			}

			/* Retrieve labReport List */
			labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
					loginForm.getClinicID());

			String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
			request.setAttribute("paymentType", paymentType);

			request.setAttribute("lasteEnteredPrescList", dummy);

			request.setAttribute("lasteEnteredBillList", "");

			String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

			request.setAttribute("medicalCertiText", medicatCertificate);

			String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

			request.setAttribute("referralLetter", referralLetter);
			/*
			 * retrieving prescription list by visitID
			 */
			prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID());

			InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

			diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());
			InvestigationList = configurationUtil.getInvestigationList();

			request.setAttribute("apptID", patientForm.getAptID());

			drugList = configurationUtil.getTradeNameList();

			frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

			doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

			categoryList = configurationUtil.getCategoryList();

			hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Edit IPD Prescription", loginForm.getUserID());

			System.out.println("Edit OPD JSP Page name for logged in user is ::: " + formNameArray[1].trim());

			// Setting add opd page name value in pageName variable
			setPageName(formNameArray[1].trim());

			return SUCCESS;

		} else {

			addActionError(
					"Eexception occurred while saving prescription details. Please check server logs for more details.");

			String prescTabCheck = "enable";

			request.setAttribute("prescTabCheck", prescTabCheck);

			String lastEneteredVisitList = "success";

			request.setAttribute("lastEneteredVisitList", lastEneteredVisitList);

			String dummy = "success";

			request.setAttribute("lasteEnteredVisitList", dummy);

			request.setAttribute("consentText", "success");

			String ipdVisitPage = "display";

			boolean hasConsent = patientDAOInf.verifyhasConsentValue(loginForm.getVisitTypeID());

			if (hasConsent) {

				String consentDocFileName = patientDAOInf.retrieveConsentDocFileName(loginForm.getVisitTypeID());

				request.setAttribute("consentDocFileName", consentDocFileName);
			}

			LabInvastigationList = patientDAOInf.reytrieveLabInvastigationLstByVisitID(patientForm.getVisitID());

			request.setAttribute("LabInvastigationList", LabInvastigationList);

			request.setAttribute("display", ipdVisitPage);

			patientList = patientDAOInf.retireveLastEneteredIPDVisit(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID());

			IPDComplaintsList = patientDAOInf.retrieveIPDComplaintsList(patientForm.getVisitID());

			request.setAttribute("lasteEnteredPrescList", dummy);

			request.setAttribute("lasteEnteredBillList", dummy);

			String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

			request.setAttribute("medicalCertiText", medicatCertificate);

			String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

			request.setAttribute("referralLetter", referralLetter);

			hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

			request.setAttribute("apptID", patientForm.getAptID());

			boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

			if (visitCheck) {
				billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
			} else {
				billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
						loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
			}

			/*
			 * retrieving prescription list by visitID
			 */
			prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID());

			InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

			diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());

			/* Retrieve labReport List */
			labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
					loginForm.getClinicID());

			String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
			request.setAttribute("paymentType", paymentType);

			diagnoseList = configurationUtil.getDiagnoseList();

			drugList = configurationUtil.getTradeNameList();

			InvestigationList = configurationUtil.getInvestigationList();

			frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

			// chargeTypeList = configurationUtil.getChargeTypeList();

			doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

			categoryList = configurationUtil.getCategoryList();

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Edit IPD Prescription Exception occurred",
					loginForm.getUserID());

			System.out.println("Edit OPD JSP Page name for logged in user is ::: " + formNameArray[1].trim());

			// Setting add opd page name value in pageName variable
			setPageName(formNameArray[1].trim());

			return ERROR;

		}

	}

	/**
	 * 
	 * @throws Exception
	 */
	public String addNewInvestigation() throws Exception {

		patientDAOInf = new PatientDAOImpl();

		serviceInf = new eDhanvantariServiceImpl();

		ConvertToPDFUtil convertToPDFUtil = new ConvertToPDFUtil();

		LoginDAOInf daoInf = new LoginDAOImpl();

		ClinicDAOInf daoInf1 = new ClinicDAOImpl();
		RegistrationDAOinf registrationDAOinf = new RegistrationDAOImpl();

		PrescriptionManagementDAOInf managementDAOInf = new PrescriptionManagementDAOImpl();

		String accessKey = xmlUtil.getAccessKey();

		String secreteKey = xmlUtil.getSecreteKey();

		AWSS3Connect awss3Connect = new AWSS3Connect();

		// getting input file location from S3 bucket
		String s3reportFilePath = xmlUtil.getS3RDMLReportFilePath();

		String s3LogoFilePath = xmlUtil.getS3RDMLFilePath();

		// getting s3 bucket name
		String bucketName = util.getS3BucketName();

		// getting s3 bucket region
		String bucketRegion = xmlUtil.getS3BucketRegion();

		AWSCredentials credentials = new BasicAWSCredentials(accessKey, secreteKey);

		AmazonS3 s3 = AmazonS3ClientBuilder.standard().withCredentials(new AWSStaticCredentialsProvider(credentials))
				.withRegion(bucketRegion).build();

		/*
		 * Getting user role from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");

		String username = patientDAOInf.retrieveUsernameBYuserID(loginForm.getUserID());

		/*
		 * Getting form name to be display based on logged in User
		 */
		String[] formNameArray = loginForm.getOPDJSPName().split("&");

		patientForm.setClinicID(loginForm.getClinicID());

		String check1 = patientDAOInf.verifyReferralLetter(patientForm.getVisitID());

		request.setAttribute("referralLetterCheck", check1);

		String check = patientDAOInf.verifyMedicalCertificate(patientForm.getVisitID());

		request.setAttribute("medicalCertiCheck", check);

		message = serviceInf.addNewInvestigation(patientForm);

		if (message.equals("success")) {

			addActionMessage("Investigation added successfully.");

			String investTabCheck = "enable";

			request.setAttribute("investTabCheck", investTabCheck);

			HttpServletRequest request = ServletActionContext.getRequest();

			ServletContext context = request.getServletContext();

			String realPath = context.getRealPath("/");

			String pdfOutFIleName = patientForm.getFirstName() + patientForm.getLastName() + patientForm.getPatientID()
					+ "_" + patientForm.getVisitID() + "I.pdf";

			message = convertToPDFUtil.convertInvestigationPDF(patientForm.getPatientID(), patientForm.getVisitID(),
					realPath, pdfOutFIleName, loginForm.getClinicID(), loginForm.getPracticeID(), username, s3,
					s3LogoFilePath, bucketName);

			if (message.equals("success")) {

				File inputFile = new File(realPath + "/" + pdfOutFIleName);

				// Storing file to S3 RDML INPUT FILE location
				message = awss3Connect.pushFile(inputFile, pdfOutFIleName, bucketName, bucketRegion, s3reportFilePath);

				S3ObjectInputStream s3ObjectInputStream = s3
						.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, pdfOutFIleName))
						.getObjectContent();

				patientForm.setFileInputStream(s3ObjectInputStream);

				patientForm.setFileName(pdfOutFIleName);
			}

			/*
			 * retrieving patientList which contains visit details
			 */
			if (formNameArray[0].trim().equals("generalOPDNew.jsp")
					|| formNameArray[0].trim().equals("telephonicNew.jsp")
					|| formNameArray[0].trim().equals("physicianOPDNew.jsp")
					|| formNameArray[0].trim().equals("generalPhysicianOPD.jsp")
					|| formNameArray[0].trim().equals("generalPhysicianGokhaleOPD.jsp")) {

				patientList = patientDAOInf.retrieveDefaultPatientDetails(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID(), patientForm.getAptID(),
						loginForm.getVisitTypeID());
			} else {

				String visitType = daoInf1.retrieveVisitTypeNameByID(loginForm.getVisitTypeID());

				patientList = patientDAOInf.retrieveLastEnteredVisitDetail(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID(), visitType);
			}

			boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

			if (visitCheck) {
				billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
			} else {
				billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
						loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
			}

			/* Retrieve labReport List */
			labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
					loginForm.getClinicID());

			String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
			request.setAttribute("paymentType", paymentType);

			// String dummy = "";
			String dummy = "success";

			request.setAttribute("lasteEnteredVisitList", "");

			request.setAttribute("lasteEnteredPrescList", dummy);

			request.setAttribute("lasteEnteredBillList", "");

			String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

			request.setAttribute("medicalCertiText", medicatCertificate);

			String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

			request.setAttribute("referralLetter", referralLetter);
			/*
			 * retrieving prescription list by visitID
			 */
			prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID());

			InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

			diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());
			InvestigationList = configurationUtil.getInvestigationList();

			/*
			 * retrieving symptomCheck list by visitID
			 */
			symptomList = patientDAOInf.retrievesymptomCheckList(patientForm.getVisitID());

			complaintList = patientDAOInf.retrievecomplaintList(patientForm.getVisitID());

			historyList = patientDAOInf.retrieveMedicalHistoryList(patientForm.getPatientID());

			medicationList = patientDAOInf.retrieveCurrentMedicationList(patientForm.getPatientID());

			diagnoseList = configurationUtil.getDiagnoseList();

			request.setAttribute("apptID", patientForm.getAptID());

			drugList = configurationUtil.getTradeNameList();

			frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

			doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

			categoryList = configurationUtil.getCategoryList();

			hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Add General Physician Prescription", loginForm.getUserID());

			System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[0].trim());

			// Setting add opd page name value in pageName variable
			setPageName(formNameArray[0].trim());

			return SUCCESS;

		} else if (message.equals("noVisit")) {

			addActionError("No visit added. Please add visit first.");

			String investTabCheck = "enable";

			request.setAttribute("investTabCheck", investTabCheck);

			request.setAttribute("lasteEnteredVisitList", "");

			request.setAttribute("lasteEnteredPrescList", "");

			request.setAttribute("lasteEnteredBillList", "");

			String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

			request.setAttribute("medicalCertiText", medicatCertificate);

			String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

			request.setAttribute("referralLetter", referralLetter);
			/*
			 * retrieving patientList which contains visit details
			 */
			if (formNameArray[0].trim().equals("generalOPDNew.jsp")
					|| formNameArray[0].trim().equals("telephonicNew.jsp")
					|| formNameArray[0].trim().equals("physicianOPDNew.jsp")
					|| formNameArray[0].trim().equals("generalPhysicianOPD.jsp")
					|| formNameArray[0].trim().equals("generalPhysicianGokhaleOPD.jsp")) {

				patientList = patientDAOInf.retrieveDefaultPatientDetails(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID(), patientForm.getAptID(),
						loginForm.getVisitTypeID());
			} else {

				String visitType = daoInf1.retrieveVisitTypeNameByID(loginForm.getVisitTypeID());

				patientList = patientDAOInf.retrieveLastEnteredVisitDetail(patientForm.getPatientID(),
						patientForm.getLastVisitID(), loginForm.getClinicID(), visitType);
			}

			hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

			/*
			 * retrieving prescription list by visitID
			 */
			prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID());

			InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

			diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());

			/*
			 * retrieving symptomCheck list by visitID
			 */
			symptomList = patientDAOInf.retrievesymptomCheckList(patientForm.getVisitID());

			complaintList = patientDAOInf.retrievecomplaintList(patientForm.getVisitID());

			historyList = patientDAOInf.retrieveMedicalHistoryList(patientForm.getPatientID());

			medicationList = patientDAOInf.retrieveCurrentMedicationList(patientForm.getPatientID());

			boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

			if (visitCheck) {
				billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
			} else {
				billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
						loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
			}

			/* Retrieve labReport List */
			labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
					loginForm.getClinicID());

			String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
			request.setAttribute("paymentType", paymentType);

			request.setAttribute("apptID", patientForm.getAptID());

			diagnoseList = configurationUtil.getDiagnoseList();

			drugList = configurationUtil.getTradeNameList();

			categoryList = configurationUtil.getCategoryList();

			InvestigationList = configurationUtil.getInvestigationList();

			frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

			// chargeTypeList = configurationUtil.getChargeTypeList();

			doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

			/*
			 * Update appointment status to Prescription
			 */
			patientDAOInf.updatePrescriptionAppointmentStatus(patientForm.getPatientID(), patientForm.getAptID());

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Add General Physician Prescription Exception occurred",
					loginForm.getUserID());

			System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[0].trim());

			// Setting add opd page name value in pageName variable
			setPageName(formNameArray[0].trim());

			return ERROR;

		} else {

			addActionError(
					"Eexception occurred while adding prescription details. Please check server logs for more details.");

			String investTabCheck = "enable";

			request.setAttribute("investTabCheck", investTabCheck);

			String dummy = "";

			request.setAttribute("lasteEnteredVisitList", "");

			request.setAttribute("lasteEnteredPrescList", dummy);

			request.setAttribute("lasteEnteredBillList", dummy);

			String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

			request.setAttribute("medicalCertiText", medicatCertificate);

			String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

			request.setAttribute("referralLetter", referralLetter);
			/*
			 * retrieving patientList which contains visit details
			 */
			if (formNameArray[0].trim().equals("generalOPDNew.jsp")
					|| formNameArray[0].trim().equals("telephonicNew.jsp")
					|| formNameArray[0].trim().equals("physicianOPDNew.jsp")
					|| formNameArray[0].trim().equals("generalPhysicianOPD.jsp")
					|| formNameArray[0].trim().equals("generalPhysicianGokhaleOPD.jsp")) {

				patientList = patientDAOInf.retrieveDefaultPatientDetails(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID(), patientForm.getAptID(),
						loginForm.getVisitTypeID());
			} else {

				String visitType = daoInf1.retrieveVisitTypeNameByID(loginForm.getVisitTypeID());

				patientList = patientDAOInf.retrieveLastEnteredVisitDetail(patientForm.getPatientID(),
						patientForm.getLastVisitID(), loginForm.getClinicID(), visitType);
			}

			hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

			request.setAttribute("apptID", patientForm.getAptID());

			boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

			if (visitCheck) {
				billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
			} else {
				billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
						loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
			}

			/*
			 * retrieving prescription list by visitID
			 */
			prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID());

			InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

			diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());

			/*
			 * retrieving symptomCheck list by visitID
			 */
			symptomList = patientDAOInf.retrievesymptomCheckList(patientForm.getVisitID());

			complaintList = patientDAOInf.retrievecomplaintList(patientForm.getVisitID());

			historyList = patientDAOInf.retrieveMedicalHistoryList(patientForm.getPatientID());

			medicationList = patientDAOInf.retrieveCurrentMedicationList(patientForm.getPatientID());

			/* Retrieve labReport List */
			labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
					loginForm.getClinicID());

			String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
			request.setAttribute("paymentType", paymentType);

			diagnoseList = configurationUtil.getDiagnoseList();

			drugList = configurationUtil.getTradeNameList();

			InvestigationList = configurationUtil.getInvestigationList();

			frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

			// chargeTypeList = configurationUtil.getChargeTypeList();

			doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

			categoryList = configurationUtil.getCategoryList();

			/*
			 * Update appointment status to Prescription
			 */
			patientDAOInf.updatePrescriptionAppointmentStatus(patientForm.getPatientID(), patientForm.getAptID());

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Add General Physician Prescription Exception occurred",
					loginForm.getUserID());

			System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[0].trim());

			// Setting add opd page name value in pageName variable
			setPageName(formNameArray[0].trim());

			return ERROR;
		}
	}

	/**
	 * 
	 * @throws Exception
	 */
	public void deletePrescription() throws Exception {
		patientDAOInf = new PatientDAOImpl();

		JSONObject values = new JSONObject();

		JSONArray array = new JSONArray();
		values = new JSONObject();

		JSONObject object = new JSONObject();

		/*
		 * Getting userID from Session
		 */
		LoginForm userForm = (LoginForm) session.get("USER");

		try {

			int stockID = patientDAOInf.retrieveProductStockID(patientForm.getProductName(), userForm.getClinicID());

			patientDAOInf.updateNetStockWhenRowDelete(stockID, patientForm.getQuantity());

			values = patientDAOInf.deletePrescription(patientForm.getPrescriptionID());

			PrintWriter out = response.getWriter();

			out.print(values);

		} catch (Exception exception) {
			exception.printStackTrace();
			System.out.println("Exception occured while deleting Prescription due to:::" + exception.getMessage());

			object.put("ExceptionMessage",
					"Exception occured while deleting prescription.Please check server logs for more details.");
			array.add(object);

			values.put("Release", array);

			PrintWriter out = response.getWriter();

			out.print(values);
		}
	}

	public void deletePrescriptionRowAdd() throws Exception {
		patientDAOInf = new PatientDAOImpl();

		JSONObject values = new JSONObject();

		JSONArray array = new JSONArray();
		values = new JSONObject();

		JSONObject object = new JSONObject();

		/*
		 * Getting userID from Session
		 */
		LoginForm userForm = (LoginForm) session.get("USER");

		try {
			int stockID = patientDAOInf.retrieveProductStockID(patientForm.getProductName(), userForm.getClinicID());
			patientDAOInf.updateNetStockWhenRowDelete(stockID, patientForm.getQuantity());

			object.put("check", 1);
			object.put("ExceptionMessage", "");
			array.add(object);

			values.put("Release", array);

			PrintWriter out = response.getWriter();

			out.print(values);

		} catch (Exception exception) {
			exception.printStackTrace();
			System.out.println("Exception occured while deleting Prescription due to:::" + exception.getMessage());

			object.put("ExceptionMessage",
					"Exception occured while deleting prescription.Please check server logs for more details.");
			array.add(object);

			values.put("Release", array);

			PrintWriter out = response.getWriter();

			out.print(values);
		}
	}

	/**
	 * 
	 * @throws Exception
	 */
	public void deleteFrequencyDetails() throws Exception {
		patientDAOInf = new PatientDAOImpl();

		JSONObject values = new JSONObject();

		JSONArray array = new JSONArray();
		values = new JSONObject();

		JSONObject object = new JSONObject();
		try {

			values = patientDAOInf.deleteFrequencyDetails(patientForm.getFrequencyDetailsID());

			PrintWriter out = response.getWriter();

			out.print(values);

		} catch (Exception exception) {
			exception.printStackTrace();
			System.out.println("Exception occured while deleting Prescription due to:::" + exception.getMessage());

			object.put("ExceptionMessage",
					"Exception occured while deleting prescription.Please check server logs for more details.");
			array.add(object);

			values.put("Release", array);

			PrintWriter out = response.getWriter();

			out.print(values);
		}
	}

	/**
	 * 
	 * @throws Exception
	 */
	public void deleteInvestigation() throws Exception {
		patientDAOInf = new PatientDAOImpl();

		JSONObject values = new JSONObject();

		JSONArray array = new JSONArray();
		values = new JSONObject();

		JSONObject object = new JSONObject();
		try {

			values = patientDAOInf.deleteInvestigation(patientForm.getInvestigationID());

			PrintWriter out = response.getWriter();

			out.print(values);

		} catch (Exception exception) {
			exception.printStackTrace();
			System.out.println(
					"Exception occured while deleting Investigation details due to:::" + exception.getMessage());

			object.put("ExceptionMessage",
					"Exception occured while deleting Investigation details. Please check server logs for more details.");
			array.add(object);

			values.put("Release", array);

			PrintWriter out = response.getWriter();

			out.print(values);
		}
	}

	/**
	 * 
	 * @throws Exception
	 */
	public void deleteDiagnostic() throws Exception {
		patientDAOInf = new PatientDAOImpl();

		JSONObject values = new JSONObject();

		JSONArray array = new JSONArray();
		values = new JSONObject();

		JSONObject object = new JSONObject();
		try {

			values = patientDAOInf.deleteDiagnostic(patientForm.getDiagnosticID());

			PrintWriter out = response.getWriter();

			out.print(values);

		} catch (Exception exception) {
			exception.printStackTrace();
			System.out
					.println("Exception occured while deleting diagnostic details due to:::" + exception.getMessage());

			object.put("ExceptionMessage",
					"Exception occured while deleting diagnostic details. Please check server logs for more details.");
			array.add(object);

			values.put("Release", array);

			PrintWriter out = response.getWriter();

			out.print(values);
		}
	}

	/**
	 * 
	 * @throws Exception
	 */
	public void deleteProcedure() throws Exception {
		patientDAOInf = new PatientDAOImpl();

		JSONObject values = new JSONObject();

		JSONArray array = new JSONArray();
		values = new JSONObject();

		JSONObject object = new JSONObject();
		try {

			values = patientDAOInf.deleteProcedure(patientForm.getProcedureID());

			PrintWriter out = response.getWriter();

			out.print(values);

		} catch (Exception exception) {
			exception.printStackTrace();
			System.out.println("Exception occured while deleting Procedure details due to:::" + exception.getMessage());

			object.put("ExceptionMessage",
					"Exception occured while deleting Procedure details. Please check server logs for more details.");
			array.add(object);

			values.put("Release", array);

			PrintWriter out = response.getWriter();

			out.print(values);
		}
	}

	/**
	 * 
	 * @throws Exception
	 */
	public void deleteSymptom() throws Exception {
		patientDAOInf = new PatientDAOImpl();

		JSONObject values = new JSONObject();

		JSONArray array = new JSONArray();
		values = new JSONObject();

		JSONObject object = new JSONObject();
		try {

			values = patientDAOInf.deleteSymptomDetails(patientForm.getSymptomID());

			PrintWriter out = response.getWriter();

			out.print(values);

		} catch (Exception exception) {
			exception.printStackTrace();
			System.out.println("Exception occured while deleting Symptom details due to:::" + exception.getMessage());

			object.put("ExceptionMessage",
					"Exception occured while deleting Symptom details.Please check server logs for more details.");
			array.add(object);

			values.put("Release", array);

			PrintWriter out = response.getWriter();

			out.print(values);
		}
	}

	public void deleteComplaint() throws Exception {
		patientDAOInf = new PatientDAOImpl();

		JSONObject values = new JSONObject();

		JSONArray array = new JSONArray();
		values = new JSONObject();

		JSONObject object = new JSONObject();
		try {

			values = patientDAOInf.deleteComplaintDetails(patientForm.getComplaintID());

			PrintWriter out = response.getWriter();

			out.print(values);

		} catch (Exception exception) {
			exception.printStackTrace();
			System.out.println("Exception occured while deleting Complaint details due to:::" + exception.getMessage());

			object.put("ExceptionMessage",
					"Exception occured while deleting Complaint details.Please check server logs for more details.");
			array.add(object);

			values.put("Release", array);

			PrintWriter out = response.getWriter();

			out.print(values);
		}
	}

	public void deleteMedicalHistory() throws Exception {
		patientDAOInf = new PatientDAOImpl();

		JSONObject values = new JSONObject();

		JSONArray array = new JSONArray();
		values = new JSONObject();

		JSONObject object = new JSONObject();
		try {

			values = patientDAOInf.deleteMedicalHistoryDetails(patientForm.getHistoryID());

			PrintWriter out = response.getWriter();

			out.print(values);

		} catch (Exception exception) {
			exception.printStackTrace();
			System.out.println(
					"Exception occured while deleting Medical History details due to:::" + exception.getMessage());

			object.put("ExceptionMessage",
					"Exception occured while deleting Medical History details.Please check server logs for more details.");
			array.add(object);

			values.put("Release", array);

			PrintWriter out = response.getWriter();

			out.print(values);
		}
	}

	public void deleteCurrentMedication() throws Exception {
		patientDAOInf = new PatientDAOImpl();

		JSONObject values = new JSONObject();

		JSONArray array = new JSONArray();
		values = new JSONObject();

		JSONObject object = new JSONObject();
		try {

			values = patientDAOInf.deleteCurrentMedicationDetails(patientForm.getMedicationID());

			PrintWriter out = response.getWriter();

			out.print(values);

		} catch (Exception exception) {
			exception.printStackTrace();
			System.out.println(
					"Exception occured while deleting Current Medication details due to:::" + exception.getMessage());

			object.put("ExceptionMessage",
					"Exception occured while deleting Current Medication details.Please check server logs for more details.");
			array.add(object);

			values.put("Release", array);

			PrintWriter out = response.getWriter();

			out.print(values);
		}
	}

	/**
	 * 
	 * @throws Exception
	 */
	public void appointmentTimeCheck() throws Exception {
		patientDAOInf = new PatientDAOImpl();

		JSONObject values = new JSONObject();

		JSONArray array = new JSONArray();
		values = new JSONObject();

		JSONObject object = new JSONObject();

		/*
		 * Getting user role from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");

		try {

			int fromHH = Integer.parseInt(request.getParameter("fromHH"));
			int fromMM = Integer.parseInt(request.getParameter("fromMM"));
			String fromAMPM = request.getParameter("fromMMAMPM");

			System.out.println("HH ::: " + fromHH + " \nMM ::: " + fromMM + " \nAMPM ::: " + fromAMPM);

			values = patientDAOInf.verifyApointmentTime(fromHH, fromMM, fromAMPM, loginForm.getClinicID());

			PrintWriter out = response.getWriter();

			out.print(values);

		} catch (Exception exception) {
			exception.printStackTrace();
			System.out.println("Exception occured while verifying appointment time with clinic time due to:::"
					+ exception.getMessage());

			object.put("ExcMsg", "Exception occured verifying appointment time with clinic time");
			array.add(object);

			values.put("Release1", array);

			PrintWriter out = response.getWriter();

			out.print(values);
		}
	}

	/**
	 * 
	 * @return String
	 * @throws Exception
	 */
	public String deletePresc() throws Exception {
		patientDAOInf = new PatientDAOImpl();

		/*
		 * Getting user role from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");

		message = patientDAOInf.deletePrescriptionDetails(patientForm.getPrescriptionID());
		if (message.equalsIgnoreCase("success")) {
			addActionMessage("Prescription deleted successfully.");

			patientList = patientDAOInf.retrivePatientListByID(patientForm.getPatientID(), loginForm.getClinicID());
			diagnoseList = configurationUtil.getDiagnoseList();

			drugList = configurationUtil.getTradeNameList();

			InvestigationList = configurationUtil.getInvestigationList();

			frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

			/*
			 * prescriptionList = patientDAOInf
			 * .retrievePrescriptionList(patientForm.getPatientID());
			 */

			chargeTypeList = configurationUtil.getChargeTypeList();

			/*
			 * billList = patientDAOInf.retrieveBillList(patientForm .getPatientID());
			 */

			return SUCCESS;
		} else {
			addActionError("Failed to delete prescription. Please check server logs for more details.");

			patientList = patientDAOInf.retrivePatientListByID(patientForm.getPatientID(), loginForm.getClinicID());
			diagnoseList = configurationUtil.getDiagnoseList();

			drugList = configurationUtil.getTradeNameList();

			InvestigationList = configurationUtil.getInvestigationList();

			frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

			/*
			 * prescriptionList = patientDAOInf
			 * .retrievePrescriptionList(patientForm.getPatientID());
			 */

			chargeTypeList = configurationUtil.getChargeTypeList();

			/*
			 * billList = patientDAOInf.retrieveBillList(patientForm .getPatientID());
			 */

			return ERROR;
		}
	}

	public String printBill() throws Exception {

		serviceInf = new eDhanvantariServiceImpl();
		patientDAOInf = new PatientDAOImpl();

		LoginDAOInf daoInf = new LoginDAOImpl();

		SMSSender smsSender = new SMSSender();

		EmailUtil emailUtil = new EmailUtil();

		ConvertToPDFUtil convertToPDFUtil = new ConvertToPDFUtil();

		PrescriptionManagementDAOInf managementDAOInf = new PrescriptionManagementDAOImpl();

		RegistrationDAOinf registrationDAOinf = new RegistrationDAOImpl();

		ClinicDAOInf daoInf1 = new ClinicDAOImpl();

		String accessKey = xmlUtil.getAccessKey();

		String secreteKey = xmlUtil.getSecreteKey();

		AWSS3Connect awss3Connect = new AWSS3Connect();

		// getting input file location from S3 bucket
		String s3reportFilePath = xmlUtil.getS3RDMLReportFilePath();

		String s3LogoFilePath = xmlUtil.getS3RDMLFilePath();

		// getting s3 bucket name
		String bucketName = util.getS3BucketName();

		// getting s3 bucket region
		String bucketRegion = xmlUtil.getS3BucketRegion();

		AWSCredentials credentials = new BasicAWSCredentials(accessKey, secreteKey);

		AmazonS3 s3 = AmazonS3ClientBuilder.standard().withCredentials(new AWSStaticCredentialsProvider(credentials))
				.withRegion(bucketRegion).build();

		/*
		 * Getting user role from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");

		System.out.println("userid loginform is::" + loginForm.getUserID());
		String username = patientDAOInf.retrieveUsernameBYuserID(loginForm.getUserID());
		System.out.println("username loginform is ::" + username);

		int nextVisitDays = patientDAOInf.retrieveNextVisitDays(loginForm.getVisitTypeID());

		/*
		 * Getting form name to be display based on logged in User
		 */
		String[] formNameArray = loginForm.getOPDJSPName().split("&");

		String check1 = patientDAOInf.verifyReferralLetter(patientForm.getVisitID());
		System.out.println("check1 value in action:" + check1);
		request.setAttribute("referralLetterCheck", check1);

		String check = patientDAOInf.verifyMedicalCertificate(patientForm.getVisitID());
		System.out.println("check value in action:" + check);
		request.setAttribute("medicalCertiCheck", check);

		message = serviceInf.configureBill(patientForm, loginForm.getUserID());

		orthoBillItemList = patientDAOInf.retrieveOrthoBillingItemList(patientForm.getVisitID());

		if (message.equalsIgnoreCase("success")) {

			addActionMessage("New Bill added successfully.");

			HttpServletRequest request = ServletActionContext.getRequest();

			String billingTabCheck = "enable";

			request.setAttribute("billingTabCheck", billingTabCheck);

			/*
			 * Retrieving patient's mobile no, if mobile is not null, then sending patient a
			 * welcome message
			 */
			String mobileNo = patientDAOInf.retrievePatientMobileNoByID(patientForm.getPatientID());

			boolean SMSCheck1 = util.verifyCommunicationCheck("smsReviewForm");

			if (SMSCheck1) {
				/*
				 * Sending feedback SMS to patient
				 */
				smsSender.sendFeedbackSMS(mobileNo, patientForm.getPatientID(), loginForm.getPracticeID());
			}

			/*
			 * Retrieving patient's email ID, if not null, then sending patient a welcome
			 * mail
			 */
			String emailID = patientDAOInf.retrievePatientEmailByID(patientForm.getPatientID());

			boolean EmailCheck1 = util.verifyCommunicationCheck("emailReviewForm");

			if (EmailCheck1) {

				/*
				 * Sending feedback email to patient
				 */
				if (emailID == null || emailID == "") {
					System.out.println("No email ID Found");
				} else if (emailID.isEmpty()) {
					System.out.println("No email ID Found");
				} else {
					emailUtil.sendFeedbackMail(patientForm.getPatientID(), emailID, loginForm.getPracticeID());
				}
			}

		}

		ServletContext context = request.getServletContext();

		String realPath = context.getRealPath("/");

		System.out.println("Real path is :: " + realPath);

		// String pdfOutFIleName = reportFilePath + patientForm.getFirstName() +
		// patientForm.getLastName()
		String pdfOutFIleName = patientForm.getFirstName() + patientForm.getLastName() + patientForm.getPatientID()
				+ "_" + patientForm.getVisitID() + "b.pdf";

		if (formNameArray[0].trim().equals("generalPhysicianGokhaleOPD.jsp")
				|| formNameArray[0].trim().equals("ophthalmologyOPDNew2.jsp")
				|| formNameArray[0].trim().equals("PecOPDAdd.jsp")
				|| formNameArray[0].trim().equals("generalPhysicianOPD.jsp")) {
			// Bill PDF for Ortho Practice
			message = convertToPDFUtil.convertOrthoBillingPDF(patientForm.getPatientID(), patientForm.getVisitID(),
					realPath, pdfOutFIleName, loginForm.getClinicID(), loginForm.getPracticeID(), username, s3,
					s3LogoFilePath, bucketName);
		} else {
			// Bill PDF for general practice
			message = convertToPDFUtil.convertBillingPDF(patientForm.getPatientID(), patientForm.getVisitID(), realPath,
					pdfOutFIleName, loginForm.getClinicID(), loginForm.getPracticeID(), username, s3, s3LogoFilePath,
					bucketName);
		}

		if (message.equalsIgnoreCase("success")) {

			System.out.println("pdfOutFIleName..............." + pdfOutFIleName);
			File inputFile = new File(realPath + "/" + pdfOutFIleName);

			// Storing file to S3 RDML INPUT FILE location
			message = awss3Connect.pushFile(inputFile, pdfOutFIleName, bucketName, bucketRegion, s3reportFilePath);

			S3ObjectInputStream s3ObjectInputStream = s3
					.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, pdfOutFIleName))
					.getObjectContent();

			request.setAttribute("PDFOutFileName", pdfOutFIleName);

			patientForm.setFileInputStream(s3ObjectInputStream);
			patientForm.setFileName(pdfOutFIleName);
			/*
			 * Check whether appointment udpated flag is on or not, and depending upon that
			 * sending SMS and Email
			 */
			String mobileNo = patientDAOInf.retrievePatientMobileNoByID(patientForm.getPatientID());
			boolean SMSCheck = util.verifyCommunicationCheck("smsPresc");

			if (SMSCheck) {

				/*
				 * Sending patient a welcome as well as Appointment scheduled message on
				 * checking whether mobile no is available for that patient or not
				 */
				if (mobileNo == null || mobileNo == "") {
					System.out.println("Mobile no not found for patient.");
				} else {

					if (mobileNo.isEmpty()) {
						System.out.println("Mobile no not found for patient.");
					} else {

						/*
						 * Sending bill details SMS to patient
						 */
						smsSender.sendGeneralisedPrescriptionORBillSMS(patientForm.getVisitID(), mobileNo,
								loginForm.getPracticeID(), loginForm.getClinicID(), ActivityStatus.BILL,
								pdfOutFIleName);

					}

				}

			}
			/*
			 * Update appointment status to Billing
			 */
			patientDAOInf.updateBillingAppointmentStatus(patientForm.getPatientID(), patientForm.getAptID());

			/*
			 * retrieving patientList which contains visit details
			 */
			if (formNameArray[0].trim().equals("generalOPDNew.jsp")
					|| formNameArray[0].trim().equals("telephonicNew.jsp")
					|| formNameArray[0].trim().equals("physicianOPDNew.jsp")
					|| formNameArray[0].trim().equals("generalPhysicianOPD.jsp")
					|| formNameArray[0].trim().equals("generalPhysicianGokhaleOPD.jsp")) {
				patientList = patientDAOInf.retrieveDefaultPatientDetails(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID(), patientForm.getAptID(),
						loginForm.getVisitTypeID());
			} else if (formNameArray[0].trim().equals("genaralClinicOPDNew.jsp")) {
				patientList = patientDAOInf.retrieveGeneralClinicPatientDetails(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID());

			} else if (formNameArray[0].trim().equals("genaralClinicIPDNew.jsp")) {
				patientList = patientDAOInf.retrieveGenaralClinicPatientDetailsForIPDVisit(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID());
			} else {
				String visitType = daoInf1.retrieveVisitTypeNameByID(loginForm.getVisitTypeID());
				System.out.println("visitype is ::" + visitType);

				patientList = patientDAOInf.retrieveLastEnteredVisitDetail(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID(), visitType);

			}

			boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

			if (visitCheck) {

				billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
			} else {
				billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
						loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
			}

			/* Retrieve labReport List */
			labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
					loginForm.getClinicID());

			// String dummy = "";
			String dummy = "success";

			request.setAttribute("lasteEnteredVisitList", dummy);

			request.setAttribute("lasteEnteredPrescList", dummy);

			request.setAttribute("lasteEnteredBillList", dummy);

			String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

			request.setAttribute("medicalCertiText", medicatCertificate);

			String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

			request.setAttribute("referralLetter", referralLetter);

			/*
			 * retrieving prescription list by visitID
			 */
			prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID());

			InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

			diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());

			/*
			 * retrieving symptomCheck list by visitID
			 */
			symptomList = patientDAOInf.retrievesymptomCheckList(patientForm.getVisitID());

			historyList = patientDAOInf.retrieveMedicalHistoryList(patientForm.getPatientID());

			medicationList = patientDAOInf.retrieveCurrentMedicationList(patientForm.getPatientID());

			complaintList = patientDAOInf.retrievecomplaintList(patientForm.getVisitID());

			String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
			request.setAttribute("paymentType", paymentType);

			diagnoseList = configurationUtil.getDiagnoseList();

			request.setAttribute("apptID", patientForm.getAptID());

			drugList = configurationUtil.getTradeNameList();

			InvestigationList = configurationUtil.getInvestigationList();

			frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

			doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

			categoryList = configurationUtil.getCategoryList();

			hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

			doctorList1 = configurationUtil.getDoctorList(loginForm.getPracticeID());

			reportList = configurationUtil.getRepostList(loginForm.getVisitTypeID());
			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Add General Physician Billing", loginForm.getUserID());

			System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[0].trim());

			// Setting add opd page name value in pageName variable
			setPageName(formNameArray[0].trim());

			return SUCCESS;
		} else if (message.equals("noVisit")) {
			addActionError("No visit added.Please add visit first.");

			HttpServletRequest request = ServletActionContext.getRequest();

			String billingTabCheck = "enable";

			request.setAttribute("billingTabCheck", billingTabCheck);

			/*
			 * Update appointment status to Billing
			 */
			patientDAOInf.updateBillingAppointmentStatus(patientForm.getPatientID(), patientForm.getAptID());

			/*
			 * retrieving patientList which contains visit details
			 */
			if (formNameArray[0].trim().equals("generalOPDNew.jsp")
					|| formNameArray[0].trim().equals("telephonicNew.jsp")
					|| formNameArray[0].trim().equals("physicianOPDNew.jsp")
					|| formNameArray[0].trim().equals("generalPhysicianOPD.jsp")
					|| formNameArray[0].trim().equals("generalPhysicianGokhaleOPD.jsp")) {
				patientList = patientDAOInf.retrieveDefaultPatientDetails(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID(), patientForm.getAptID(),
						loginForm.getVisitTypeID());
			} else if (formNameArray[0].trim().equals("genaralClinicOPDNew.jsp")) {
				patientList = patientDAOInf.retrieveGeneralClinicPatientDetails(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID());

			} else if (formNameArray[0].trim().equals("genaralClinicIPDNew.jsp")) {
				patientList = patientDAOInf.retrieveGenaralClinicPatientDetailsForIPDVisit(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID());
			} else {
				String visitType = daoInf1.retrieveVisitTypeNameByID(loginForm.getVisitTypeID());
				System.out.println("visitype is ::" + visitType);

				patientList = patientDAOInf.retrieveLastEnteredVisitDetail(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID(), visitType);

			}

			boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

			if (visitCheck) {
				billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
			} else {
				billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
						loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
			}

			/* Retrieve labReport List */
			labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
					loginForm.getClinicID());

			String dummy = "";

			request.setAttribute("lasteEnteredVisitList", dummy);

			request.setAttribute("lasteEnteredPrescList", dummy);

			request.setAttribute("lasteEnteredBillList", dummy);

			String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

			request.setAttribute("medicalCertiText", medicatCertificate);

			String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

			request.setAttribute("referralLetter", referralLetter);

			/*
			 * retrieving prescription list by visitID
			 */
			prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID());

			InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

			diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());

			String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
			request.setAttribute("paymentType", paymentType);

			/*
			 * retrieving symptomCheck list by visitID
			 */
			symptomList = patientDAOInf.retrievesymptomCheckList(patientForm.getVisitID());

			historyList = patientDAOInf.retrieveMedicalHistoryList(patientForm.getPatientID());

			complaintList = patientDAOInf.retrievecomplaintList(patientForm.getVisitID());

			medicationList = patientDAOInf.retrieveCurrentMedicationList(patientForm.getPatientID());

			diagnoseList = configurationUtil.getDiagnoseList();

			request.setAttribute("apptID", patientForm.getAptID());

			drugList = configurationUtil.getTradeNameList();

			InvestigationList = configurationUtil.getInvestigationList();
			frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

			// chargeTypeList = configurationUtil.getChargeTypeList();

			doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

			hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

			doctorList1 = configurationUtil.getDoctorList(loginForm.getPracticeID());

			reportList = configurationUtil.getRepostList(loginForm.getVisitTypeID());

			categoryList = configurationUtil.getCategoryList();

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Add General Physician Billing Exception Occurred.",
					loginForm.getUserID());

			System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[0].trim());

			// Setting add opd page name value in pageName variable
			setPageName(formNameArray[0].trim());

			return ERROR;
		} else {
			addActionError("Failed to add visit bill. Please check server logs for more details.");

			HttpServletRequest request = ServletActionContext.getRequest();

			String billingTabCheck = "enable";

			request.setAttribute("billingTabCheck", billingTabCheck);

			/*
			 * Update appointment status to Billing
			 */
			patientDAOInf.updateBillingAppointmentStatus(patientForm.getPatientID(), patientForm.getAptID());

			/*
			 * retrieving patientList which contains visit details
			 */
			if (formNameArray[0].trim().equals("generalOPDNew.jsp")
					|| formNameArray[0].trim().equals("telephonicNew.jsp")
					|| formNameArray[0].trim().equals("physicianOPDNew.jsp")
					|| formNameArray[0].trim().equals("generalPhysicianOPD.jsp")
					|| formNameArray[0].trim().equals("generalPhysicianGokhaleOPD.jsp")) {
				patientList = patientDAOInf.retrieveDefaultPatientDetails(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID(), patientForm.getAptID(),
						loginForm.getVisitTypeID());
			} else if (formNameArray[0].trim().equals("genaralClinicOPDNew.jsp")) {
				patientList = patientDAOInf.retrieveGeneralClinicPatientDetails(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID());

			} else if (formNameArray[0].trim().equals("genaralClinicIPDNew.jsp")) {
				patientList = patientDAOInf.retrieveGenaralClinicPatientDetailsForIPDVisit(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID());
			} else {
				String visitType = daoInf1.retrieveVisitTypeNameByID(loginForm.getVisitTypeID());
				System.out.println("visitype is ::" + visitType);

				patientList = patientDAOInf.retrieveLastEnteredVisitDetail(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID(), visitType);

			}

			boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

			if (visitCheck) {
				billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
			} else {
				billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
						loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
			}

			/* Retrieve labReport List */
			labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
					loginForm.getClinicID());

			// String dummy = "";
			String dummy = "success";

			request.setAttribute("lasteEnteredVisitList", dummy);

			request.setAttribute("lasteEnteredPrescList", dummy);

			request.setAttribute("lasteEnteredBillList", dummy);

			String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

			request.setAttribute("medicalCertiText", medicatCertificate);

			String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

			request.setAttribute("referralLetter", referralLetter);

			/*
			 * retrieving prescription list by visitID
			 */
			prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID());

			InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());
			diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());

			/*
			 * retrieving symptomCheck list by visitID
			 */
			symptomList = patientDAOInf.retrievesymptomCheckList(patientForm.getVisitID());

			historyList = patientDAOInf.retrieveMedicalHistoryList(patientForm.getPatientID());

			complaintList = patientDAOInf.retrievecomplaintList(patientForm.getVisitID());

			medicationList = patientDAOInf.retrieveCurrentMedicationList(patientForm.getPatientID());

			diagnoseList = configurationUtil.getDiagnoseList();

			request.setAttribute("apptID", patientForm.getAptID());

			drugList = configurationUtil.getTradeNameList();

			InvestigationList = configurationUtil.getInvestigationList();

			frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

			String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
			request.setAttribute("paymentType", paymentType);

			doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

			hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

			doctorList1 = configurationUtil.getDoctorList(loginForm.getPracticeID());

			reportList = configurationUtil.getRepostList(loginForm.getVisitTypeID());

			categoryList = configurationUtil.getCategoryList();

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Add General Physician Billing Exception Occurred.",
					loginForm.getUserID());

			System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[0].trim());

			// Setting add opd page name value in pageName variable
			setPageName(formNameArray[0].trim());

			return ERROR;
		}

	}

	/**
	 * 
	 * @throws Exception
	 */
	public void PDFDownload() throws Exception {

		String accessKey = xmlUtil.getAccessKey();

		String secreteKey = xmlUtil.getSecreteKey();

		AWSS3Connect awss3Connect = new AWSS3Connect();

		// getting input file location from S3 bucket
		String s3reportFilePath = xmlUtil.getS3RDMLReportFilePath();

		// getting s3 bucket name
		String bucketName = util.getS3BucketName();

		// getting s3 bucket region
		String bucketRegion = xmlUtil.getS3BucketRegion();

		AWSCredentials credentials = new BasicAWSCredentials(accessKey, secreteKey);

		AmazonS3 s3 = AmazonS3ClientBuilder.standard().withCredentials(new AWSStaticCredentialsProvider(credentials))
				.withRegion(bucketRegion).build();

		String pdfOutFIleName = request.getParameter("pdfOutPath");
		System.out.println("PDF File path from action ::::: " + pdfOutFIleName);

		S3ObjectInputStream s3ObjectInputStream = s3
				.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, pdfOutFIleName))
				.getObjectContent();

		patientForm.setFileInputStream(s3ObjectInputStream);

		patientForm.setFileName(pdfOutFIleName);

		OutputStream out11 = response.getOutputStream();
		byte[] buf = new byte[1024];
		int len;
		while ((len = patientForm.getFileInputStream().read(buf)) > 0) {
			out11.write(buf, 0, len);
		}

		patientForm.getFileInputStream().close();
		out11.close();
	}

	/**
	 * 
	 * @throws Exception
	 */
	public void ViewFiles() throws Exception {

		System.out.println("Inside......");

		HttpServletRequest request = ServletActionContext.getRequest();

		ServletContext context = request.getServletContext();

		String realPath = context.getRealPath("/");

		System.out.println("Real path is :: " + realPath);

		/*
		 * String accessKey = xmlUtil.getAccessKey();
		 * 
		 * String secreteKey = xmlUtil.getSecreteKey();
		 * 
		 * AWSS3Connect awss3Connect = new AWSS3Connect();
		 * 
		 * // getting input file location from S3 bucket String s3reportFilePath =
		 * xmlUtil.getS3RDMLReportFilePath();
		 * 
		 * // getting s3 bucket name String bucketName = util.getS3BucketName();
		 * 
		 * // getting s3 bucket region String bucketRegion =
		 * xmlUtil.getS3BucketRegion();
		 * 
		 * AWSCredentials credentials = new BasicAWSCredentials(accessKey, secreteKey);
		 * 
		 * AmazonS3 s3 = AmazonS3ClientBuilder.standard().withCredentials(new
		 * AWSStaticCredentialsProvider(credentials)) .withRegion(bucketRegion).build();
		 * 
		 * String pdfOutFIleName = request.getParameter("pdfOutPath");
		 * System.out.println("PDF File path from action ::::: " + pdfOutFIleName);
		 * 
		 * S3ObjectInputStream s3ObjectInputStream = s3 .getObject(new
		 * GetObjectRequest(bucketName + "/" + s3reportFilePath, pdfOutFIleName))
		 * .getObjectContent();
		 * 
		 * patientForm.setFileInputStream(s3ObjectInputStream);
		 * 
		 * patientForm.setFileName(pdfOutFIleName);
		 * 
		 * OutputStream out11 = response.getOutputStream(); byte[] buf = new byte[1024];
		 * int len; while ((len = patientForm.getFileInputStream().read(buf)) > 0) {
		 * out11.write(buf, 0, len); }
		 * 
		 * patientForm.getFileInputStream().close(); out11.close();
		 */
	}

	public String downloadBill() throws Exception {

		serviceInf = new eDhanvantariServiceImpl();
		patientDAOInf = new PatientDAOImpl();

		LoginDAOInf daoInf = new LoginDAOImpl();

		SMSSender smsSender = new SMSSender();

		EmailUtil emailUtil = new EmailUtil();

		ConvertToPDFUtil convertToPDFUtil = new ConvertToPDFUtil();

		PrescriptionManagementDAOInf managementDAOInf = new PrescriptionManagementDAOImpl();

		RegistrationDAOinf registrationDAOinf = new RegistrationDAOImpl();

		ClinicDAOInf daoInf1 = new ClinicDAOImpl();

		String accessKey = xmlUtil.getAccessKey();

		String secreteKey = xmlUtil.getSecreteKey();

		AWSS3Connect awss3Connect = new AWSS3Connect();

		// getting input file location from S3 bucket
		String s3reportFilePath = xmlUtil.getS3RDMLReportFilePath();

		String s3LogoFilePath = xmlUtil.getS3RDMLFilePath();

		// getting s3 bucket name
		String bucketName = util.getS3BucketName();

		// getting s3 bucket region
		String bucketRegion = xmlUtil.getS3BucketRegion();

		AWSCredentials credentials = new BasicAWSCredentials(accessKey, secreteKey);

		AmazonS3 s3 = AmazonS3ClientBuilder.standard().withCredentials(new AWSStaticCredentialsProvider(credentials))
				.withRegion(bucketRegion).build();

		/*
		 * Getting user role from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");

		int nextVisitDays = patientDAOInf.retrieveNextVisitDays(loginForm.getVisitTypeID());

		System.out.println("userid loginform is::" + loginForm.getUserID());
		String username = patientDAOInf.retrieveUsernameBYuserID(loginForm.getUserID());
		System.out.println("username loginform is ::" + username);
		/*
		 * Getting form name to be display based on logged in User
		 */
		String[] formNameArray = loginForm.getOPDJSPName().split("&");

		String check1 = patientDAOInf.verifyReferralLetter(patientForm.getVisitID());
		System.out.println("check1 value in action:" + check1);
		request.setAttribute("referralLetterCheck", check1);

		String check = patientDAOInf.verifyMedicalCertificate(patientForm.getVisitID());
		System.out.println("check value in action:" + check);
		request.setAttribute("medicalCertiCheck", check);

		orthoBillItemList = patientDAOInf.retrieveOrthoBillingItemList(patientForm.getVisitID());

		/*
		 * message = serviceInf.configureBill(patientForm); if
		 * (message.equalsIgnoreCase("success")) {
		 * 
		 * addActionMessage("New Bill added successfully.");
		 */

		HttpServletRequest request = ServletActionContext.getRequest();

		ServletContext context = request.getServletContext();

		String realPath = context.getRealPath("/");

		System.out.println("Real path is :: " + realPath);

		// String pdfOutFIleName = realPath + patientForm.getFirstName() +
		// patientForm.getLastName()
		String pdfOutFIleName = patientForm.getFirstName() + patientForm.getLastName() + patientForm.getPatientID()
				+ "_" + patientForm.getVisitID() + "b.pdf";

		if (formNameArray[0].trim().equals("generalPhysicianGokhaleOPD.jsp")
				|| formNameArray[0].trim().equals("ophthalmologyOPDNew2.jsp")
				|| formNameArray[0].trim().equals("PecOPDAdd.jsp")) {
			message = convertToPDFUtil.convertOrthoBillingPDF(patientForm.getPatientID(), patientForm.getVisitID(),
					realPath, pdfOutFIleName, loginForm.getClinicID(), loginForm.getPracticeID(), username, s3,
					s3LogoFilePath, bucketName);
		} else {
			message = convertToPDFUtil.convertBillingPDF(patientForm.getPatientID(), patientForm.getVisitID(), realPath,
					pdfOutFIleName, loginForm.getClinicID(), loginForm.getPracticeID(), username, s3, s3LogoFilePath,
					bucketName);
		}

		if (message.equalsIgnoreCase("success")) {

			System.out.println("out File name from action ::::: " + pdfOutFIleName);

			File fileToDownload = new File(realPath + "/" + pdfOutFIleName);

			// Storing file to S3 RDML INPUT FILE location
			message = awss3Connect.pushFile(fileToDownload, pdfOutFIleName, bucketName, bucketRegion, s3reportFilePath);

			S3ObjectInputStream s3ObjectInputStream = s3
					.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, pdfOutFIleName))
					.getObjectContent();

			patientForm.setFileInputStream(s3ObjectInputStream);
			patientForm.setFileName(pdfOutFIleName);

			String billingTabCheck = "enable";

			request.setAttribute("billingTabCheck", billingTabCheck);

			/*
			 * Check whether appointment udpated flag is on or not, and depending upon that
			 * sending SMS and Email
			 */
			boolean SMSCheck = util.verifyCommunicationCheck("smsPresc");

			if (SMSCheck) {

				/*
				 * Retrieving patient's mobile no, if mobile is not null, then sending patient a
				 * welcome message
				 */
				String mobileNo = patientDAOInf.retrievePatientMobileNoByID(patientForm.getPatientID());

				/*
				 * Sending patient a welcome as well as Appointment scheduled message on
				 * checking whether mobile no is available for that patient or not
				 */
				if (mobileNo == null || mobileNo == "") {
					System.out.println("Mobile no not found for patient.");
				} else {

					if (mobileNo.isEmpty()) {
						System.out.println("Mobile no not found for patient.");
					} else {

						/*
						 * Sending bill details SMS to patient
						 */
						smsSender.sendGeneralisedPrescriptionORBillSMS(patientForm.getVisitID(), mobileNo,
								loginForm.getPracticeID(), loginForm.getClinicID(), ActivityStatus.BILL,
								pdfOutFIleName);

					}

				}

			}

			/*
			 * Update appointment status to Billing
			 */
			patientDAOInf.updateBillingAppointmentStatus(patientForm.getPatientID(), patientForm.getAptID());

			/*
			 * retrieving patientList which contains visit details
			 */
			if (formNameArray[0].trim().equals("generalOPDNew.jsp")
					|| formNameArray[0].trim().equals("telephonicNew.jsp")
					|| formNameArray[0].trim().equals("physicianOPDNew.jsp")
					|| formNameArray[0].trim().equals("generalPhysicianOPD.jsp")
					|| formNameArray[0].trim().equals("generalPhysicianGokhaleOPD.jsp")) {
				patientList = patientDAOInf.retrieveDefaultPatientDetails(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID(), patientForm.getAptID(),
						loginForm.getVisitTypeID());

				System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[0].trim());

				// Setting add opd page name value in pageName variable
				setPageName(formNameArray[0].trim());

			} else if (formNameArray[0].trim().equals("genaralClinicOPDNew.jsp")) {
				patientList = patientDAOInf.retrieveGeneralClinicPatientDetails(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID());

				System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[0].trim());

				// Setting add opd page name value in pageName variable
				setPageName(formNameArray[0].trim());

			} else if (formNameArray[0].trim().equals("genaralClinicIPDNew.jsp")) {
				patientList = patientDAOInf.retrieveGenaralClinicPatientDetailsForIPDVisit(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID());

				System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[0].trim());

				// Setting add opd page name value in pageName variable
				setPageName(formNameArray[0].trim());
			} else if (formNameArray[1].trim().equals("genaralClinicOPDEdit.jsp")) {
				patientList = patientDAOInf.retrieveGeneralClinicPatientDetails(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID());
				System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[1].trim());

				// Setting add opd page name value in pageName variable
				setPageName(formNameArray[1].trim());

			} else if (formNameArray[1].trim().equals("genaralClinicIPDEdit.jsp")) {
				patientList = patientDAOInf.retrieveGenaralClinicPatientDetailsForIPDVisit(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID());

				System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[1].trim());

				// Setting add opd page name value in pageName variable
				setPageName(formNameArray[1].trim());
			} else {
				String visitType = daoInf1.retrieveVisitTypeNameByID(loginForm.getVisitTypeID());
				System.out.println("visitype is ::" + visitType);

				patientList = patientDAOInf.retrieveLastEnteredVisitDetail(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID(), visitType);
				System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[1].trim());

				// Setting add opd page name value in pageName variable
				setPageName(formNameArray[1].trim());
			}

			boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

			if (visitCheck) {

				billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
			} else {
				billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
						loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
			}

			/* Retrieve labReport List */
			labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
					loginForm.getClinicID());

			// String dummy = "";
			String dummy = "success";

			request.setAttribute("lasteEnteredVisitList", dummy);

			request.setAttribute("lasteEnteredPrescList", dummy);

			request.setAttribute("lasteEnteredBillList", dummy);

			String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

			request.setAttribute("medicalCertiText", medicatCertificate);

			String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

			request.setAttribute("referralLetter", referralLetter);

			/*
			 * retrieving prescription list by visitID
			 */
			prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID());

			InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

			diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());

			/*
			 * retrieving symptomCheck list by visitID
			 */
			symptomList = patientDAOInf.retrievesymptomCheckList(patientForm.getVisitID());

			historyList = patientDAOInf.retrieveMedicalHistoryList(patientForm.getPatientID());

			medicationList = patientDAOInf.retrieveCurrentMedicationList(patientForm.getPatientID());

			complaintList = patientDAOInf.retrievecomplaintList(patientForm.getVisitID());

			String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
			request.setAttribute("paymentType", paymentType);

			diagnoseList = configurationUtil.getDiagnoseList();

			request.setAttribute("apptID", patientForm.getAptID());

			drugList = configurationUtil.getTradeNameList();

			InvestigationList = configurationUtil.getInvestigationList();

			frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

			doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

			categoryList = configurationUtil.getCategoryList();

			hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

			doctorList1 = configurationUtil.getDoctorList(loginForm.getPracticeID());

			reportList = configurationUtil.getRepostList(loginForm.getVisitTypeID());

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Add General Physician Billing", loginForm.getUserID());

			return SUCCESS;
		} else if (message.equals("noVisit")) {
			addActionError("No visit added.Please add visit first.");

			// HttpServletRequest request = ServletActionContext.getRequest();

			String billingTabCheck = "enable";

			request.setAttribute("billingTabCheck", billingTabCheck);

			/*
			 * Update appointment status to Billing
			 */
			patientDAOInf.updateBillingAppointmentStatus(patientForm.getPatientID(), patientForm.getAptID());

			/*
			 * retrieving patientList which contains visit details
			 */
			if (formNameArray[0].trim().equals("generalOPDNew.jsp")
					|| formNameArray[0].trim().equals("telephonicNew.jsp")
					|| formNameArray[0].trim().equals("physicianOPDNew.jsp")
					|| formNameArray[0].trim().equals("generalPhysicianOPD.jsp")
					|| formNameArray[0].trim().equals("generalPhysicianGokhaleOPD.jsp")) {
				patientList = patientDAOInf.retrieveDefaultPatientDetails(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID(), patientForm.getAptID(),
						loginForm.getVisitTypeID());

				System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[0].trim());

				// Setting add opd page name value in pageName variable
				setPageName(formNameArray[0].trim());

			} else if (formNameArray[0].trim().equals("genaralClinicOPDNew.jsp")) {
				patientList = patientDAOInf.retrieveGeneralClinicPatientDetails(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID());
				System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[0].trim());

				// Setting add opd page name value in pageName variable
				setPageName(formNameArray[0].trim());

			} else if (formNameArray[0].trim().equals("genaralClinicIPDNew.jsp")) {
				patientList = patientDAOInf.retrieveGenaralClinicPatientDetailsForIPDVisit(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID());
				System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[0].trim());

				// Setting add opd page name value in pageName variable
				setPageName(formNameArray[0].trim());

			} else if (formNameArray[1].trim().equals("genaralClinicOPDEdit.jsp")) {
				patientList = patientDAOInf.retrieveGeneralClinicPatientDetails(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID());
				System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[1].trim());

				// Setting add opd page name value in pageName variable
				setPageName(formNameArray[1].trim());

			} else if (formNameArray[1].trim().equals("genaralClinicIPDEdit.jsp")) {
				patientList = patientDAOInf.retrieveGenaralClinicPatientDetailsForIPDVisit(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID());
				System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[1].trim());

				// Setting add opd page name value in pageName variable
				setPageName(formNameArray[1].trim());

			} else {
				String visitType = daoInf1.retrieveVisitTypeNameByID(loginForm.getVisitTypeID());
				System.out.println("visitype is ::" + visitType);

				patientList = patientDAOInf.retrieveLastEnteredVisitDetail(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID(), visitType);
				System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[1].trim());

				// Setting add opd page name value in pageName variable
				setPageName(formNameArray[1].trim());
			}

			boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

			if (visitCheck) {
				billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
			} else {
				billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
						loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
			}

			/* Retrieve labReport List */
			labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
					loginForm.getClinicID());

			String dummy = "success";

			request.setAttribute("lasteEnteredVisitList", "");

			request.setAttribute("lasteEnteredPrescList", dummy);

			request.setAttribute("lasteEnteredBillList", dummy);

			String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

			request.setAttribute("medicalCertiText", medicatCertificate);

			String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

			request.setAttribute("referralLetter", referralLetter);

			/*
			 * retrieving prescription list by visitID
			 */
			prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID());

			InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

			diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());

			String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
			request.setAttribute("paymentType", paymentType);

			/*
			 * retrieving symptomCheck list by visitID
			 */
			symptomList = patientDAOInf.retrievesymptomCheckList(patientForm.getVisitID());

			historyList = patientDAOInf.retrieveMedicalHistoryList(patientForm.getPatientID());

			complaintList = patientDAOInf.retrievecomplaintList(patientForm.getVisitID());

			medicationList = patientDAOInf.retrieveCurrentMedicationList(patientForm.getPatientID());

			diagnoseList = configurationUtil.getDiagnoseList();

			request.setAttribute("apptID", patientForm.getAptID());

			drugList = configurationUtil.getTradeNameList();

			InvestigationList = configurationUtil.getInvestigationList();
			frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

			// chargeTypeList = configurationUtil.getChargeTypeList();

			doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

			hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

			doctorList1 = configurationUtil.getDoctorList(loginForm.getPracticeID());

			reportList = configurationUtil.getRepostList(loginForm.getVisitTypeID());

			categoryList = configurationUtil.getCategoryList();

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Add General Physician Billing Exception Occurred.",
					loginForm.getUserID());

			return ERROR;
		} else {
			addActionError("Failed to add visit bill. Please check server logs for more details.");

			// HttpServletRequest request = ServletActionContext.getRequest();

			String billingTabCheck = "enable";

			request.setAttribute("billingTabCheck", billingTabCheck);

			/*
			 * Update appointment status to Billing
			 */
			patientDAOInf.updateBillingAppointmentStatus(patientForm.getPatientID(), patientForm.getAptID());

			/*
			 * retrieving patientList which contains visit details
			 */
			if (formNameArray[0].trim().equals("generalOPDNew.jsp")
					|| formNameArray[0].trim().equals("telephonicNew.jsp")
					|| formNameArray[0].trim().equals("physicianOPDNew.jsp")
					|| formNameArray[0].trim().equals("generalPhysicianOPD.jsp")
					|| formNameArray[0].trim().equals("generalPhysicianGokhaleOPD.jsp")) {
				patientList = patientDAOInf.retrieveDefaultPatientDetails(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID(), patientForm.getAptID(),
						loginForm.getVisitTypeID());

				System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[0].trim());

				// Setting add opd page name value in pageName variable
				setPageName(formNameArray[0].trim());

			} else if (formNameArray[0].trim().equals("genaralClinicOPDNew.jsp")) {
				patientList = patientDAOInf.retrieveGeneralClinicPatientDetails(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID());
				System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[0].trim());

				// Setting add opd page name value in pageName variable
				setPageName(formNameArray[0].trim());

			} else if (formNameArray[0].trim().equals("genaralClinicIPDNew.jsp")) {
				patientList = patientDAOInf.retrieveGenaralClinicPatientDetailsForIPDVisit(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID());
				System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[0].trim());

				// Setting add opd page name value in pageName variable
				setPageName(formNameArray[0].trim());

			} else if (formNameArray[1].trim().equals("genaralClinicOPDEdit.jsp")) {
				patientList = patientDAOInf.retrieveGeneralClinicPatientDetails(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID());
				System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[1].trim());

				// Setting add opd page name value in pageName variable
				setPageName(formNameArray[1].trim());

			} else if (formNameArray[1].trim().equals("genaralClinicIPDEdit.jsp")) {
				patientList = patientDAOInf.retrieveGenaralClinicPatientDetailsForIPDVisit(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID());
				System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[1].trim());

				// Setting add opd page name value in pageName variable
				setPageName(formNameArray[1].trim());

			} else {
				String visitType = daoInf1.retrieveVisitTypeNameByID(loginForm.getVisitTypeID());
				System.out.println("visitype is ::" + visitType);

				patientList = patientDAOInf.retrieveLastEnteredVisitDetail(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID(), visitType);
				System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[1].trim());

				// Setting add opd page name value in pageName variable
				setPageName(formNameArray[1].trim());
			}

			boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

			if (visitCheck) {
				billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
			} else {
				billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
						loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
			}

			/* Retrieve labReport List */
			labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
					loginForm.getClinicID());

			// String dummy = "";
			String dummy = "success";

			request.setAttribute("lasteEnteredVisitList", dummy);

			request.setAttribute("lasteEnteredPrescList", dummy);

			request.setAttribute("lasteEnteredBillList", dummy);

			String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

			request.setAttribute("medicalCertiText", medicatCertificate);

			String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

			request.setAttribute("referralLetter", referralLetter);

			/*
			 * retrieving prescription list by visitID
			 */
			prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID());

			InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

			diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());

			/*
			 * retrieving symptomCheck list by visitID
			 */
			symptomList = patientDAOInf.retrievesymptomCheckList(patientForm.getVisitID());

			historyList = patientDAOInf.retrieveMedicalHistoryList(patientForm.getPatientID());

			complaintList = patientDAOInf.retrievecomplaintList(patientForm.getVisitID());

			medicationList = patientDAOInf.retrieveCurrentMedicationList(patientForm.getPatientID());

			diagnoseList = configurationUtil.getDiagnoseList();

			request.setAttribute("apptID", patientForm.getAptID());

			drugList = configurationUtil.getTradeNameList();

			InvestigationList = configurationUtil.getInvestigationList();

			frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

			String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
			request.setAttribute("paymentType", paymentType);

			doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

			hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

			doctorList1 = configurationUtil.getDoctorList(loginForm.getPracticeID());

			reportList = configurationUtil.getRepostList(loginForm.getVisitTypeID());

			categoryList = configurationUtil.getCategoryList();

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Add General Physician Billing Exception Occurred.",
					loginForm.getUserID());

			return ERROR;
		}

	}

	/**
	 * 
	 * @return String
	 * @throws Exception
	 */
	public String addNewBill() throws Exception {

		System.out.println("addbutton val:" + patientForm.getAddButton());
		if (patientForm.getAddButton().startsWith(",")) {
			patientForm.getAddButton().substring(1);

			System.out.println("addbutton val is :" + patientForm.getAddButton());
		}

		if (patientForm.getAddButton().equals("print")) {
			System.out.println("inside add button = print");
			printBill();
		} else if (patientForm.getAddButton().equals("download")) {
			System.out.println("inside add button = download");
			downloadBill();
		} else {

			System.out.println("outside add button print");
			serviceInf = new eDhanvantariServiceImpl();
			patientDAOInf = new PatientDAOImpl();

			LoginDAOInf daoInf = new LoginDAOImpl();

			SMSSender smsSender = new SMSSender();

			EmailUtil emailUtil = new EmailUtil();

			ConvertToPDFUtil convertToPDFUtil = new ConvertToPDFUtil();

			PrescriptionManagementDAOInf managementDAOInf = new PrescriptionManagementDAOImpl();

			RegistrationDAOinf registrationDAOinf = new RegistrationDAOImpl();

			ClinicDAOInf daoInf1 = new ClinicDAOImpl();
			/*
			 * Getting user role from session
			 */
			LoginForm loginForm = (LoginForm) session.get("USER");

			int nextVisitDays = patientDAOInf.retrieveNextVisitDays(loginForm.getVisitTypeID());

			String username = patientDAOInf.retrieveUsernameBYuserID(loginForm.getUserID());
			System.out.println("username loginform is ::" + username);

			/*
			 * Getting form name to be display based on logged in User
			 */
			String[] formNameArray = loginForm.getOPDJSPName().split("&");

			String check1 = patientDAOInf.verifyReferralLetter(patientForm.getVisitID());
			System.out.println("check1 value in action:" + check1);
			request.setAttribute("referralLetterCheck", check1);

			String check = patientDAOInf.verifyMedicalCertificate(patientForm.getVisitID());
			System.out.println("check value in action:" + check);
			request.setAttribute("medicalCertiCheck", check);

			message = serviceInf.configureBill(patientForm, loginForm.getUserID());

			orthoBillItemList = patientDAOInf.retrieveOrthoBillingItemList(patientForm.getVisitID());

			if (message.equalsIgnoreCase("success")) {

				addActionMessage("New Bill added successfully.");

				HttpServletRequest request = ServletActionContext.getRequest();

				String billingTabCheck = "enable";

				request.setAttribute("billingTabCheck", billingTabCheck);

				/*
				 * Retrieving patient's mobile no, if mobile is not null, then sending patient a
				 * welcome message
				 */
				String mobileNo = patientDAOInf.retrievePatientMobileNoByID(patientForm.getPatientID());
				System.out.println("mobile no. of patient::" + mobileNo);

				boolean SMSCheck1 = util.verifyCommunicationCheck("smsReviewForm");
				System.out.println("smscheck::" + SMSCheck1);
				if (SMSCheck1) {
					/*
					 * Sending feedback SMS to patient
					 */
					smsSender.sendFeedbackSMS(mobileNo, patientForm.getPatientID(), loginForm.getPracticeID());
				}

				/*
				 * Retrieving patient's email ID, if not null, then sending patient a welcome
				 * mail
				 */
				String emailID = patientDAOInf.retrievePatientEmailByID(patientForm.getPatientID());
				System.out.println("email. of patient::" + emailID);
				boolean EmailCheck1 = util.verifyCommunicationCheck("emailReviewForm");

				if (EmailCheck1) {

					/*
					 * Sending feedback email to patient
					 */
					emailUtil.sendFeedbackMail(patientForm.getPatientID(), emailID, loginForm.getPracticeID());
				}

				/*
				 * Update appointment status to Billing
				 */
				patientDAOInf.updateBillingAppointmentStatus(patientForm.getPatientID(), patientForm.getAptID());

				/*
				 * retrieving patientList which contains visit details
				 */
				if (formNameArray[0].trim().equals("generalOPDNew.jsp")
						|| formNameArray[0].trim().equals("telephonicNew.jsp")
						|| formNameArray[0].trim().equals("physicianOPDNew.jsp")
						|| formNameArray[0].trim().equals("generalPhysicianOPD.jsp")
						|| formNameArray[0].trim().equals("generalPhysicianGokhaleOPD.jsp")) {
					patientList = patientDAOInf.retrieveDefaultPatientDetails(patientForm.getPatientID(),
							patientForm.getVisitID(), loginForm.getClinicID(), patientForm.getAptID(),
							loginForm.getVisitTypeID());

				} else if (formNameArray[0].trim().equals("genaralClinicOPDNew.jsp")) {
					patientList = patientDAOInf.retrieveGeneralClinicPatientDetails(patientForm.getPatientID(),
							patientForm.getVisitID(), loginForm.getClinicID());

				} else if (formNameArray[0].trim().equals("genaralClinicIPDNew.jsp")) {
					patientList = patientDAOInf.retrieveGenaralClinicPatientDetailsForIPDVisit(
							patientForm.getPatientID(), patientForm.getVisitID(), loginForm.getClinicID());
				} else {

					String visitType = daoInf1.retrieveVisitTypeNameByID(loginForm.getVisitTypeID());
					System.out.println("visitype is ::" + visitType);

					patientList = patientDAOInf.retrieveLastEnteredVisitDetail(patientForm.getPatientID(),
							patientForm.getVisitID(), loginForm.getClinicID(), visitType);

				}
				System.out.println("visit ID is  ::: " + patientForm.getVisitID());
				boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

				if (visitCheck) {
					System.out.println("yes");
					billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
				} else {
					System.out.println("NO");
					billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
							loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
				}

				/* Retrieve labReport List */
				labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
						loginForm.getClinicID());

				// String dummy = "";

				String dummy = "success";

				request.setAttribute("lasteEnteredVisitList", dummy);

				request.setAttribute("lasteEnteredPrescList", dummy);

				request.setAttribute("lasteEnteredBillList", dummy);

				String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

				request.setAttribute("medicalCertiText", medicatCertificate);

				String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

				request.setAttribute("referralLetter", referralLetter);

				/*
				 * retrieving prescription list by visitID
				 */
				prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID());

				InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

				diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());

				/*
				 * retrieving symptomCheck list by visitID
				 */
				symptomList = patientDAOInf.retrievesymptomCheckList(patientForm.getVisitID());

				historyList = patientDAOInf.retrieveMedicalHistoryList(patientForm.getPatientID());

				medicationList = patientDAOInf.retrieveCurrentMedicationList(patientForm.getPatientID());

				complaintList = patientDAOInf.retrievecomplaintList(patientForm.getVisitID());

				String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
				request.setAttribute("paymentType", paymentType);

				// Checking if the CRF form is for Gokhale clinic, if so then load the diagnosis
				// from the json file else load the diagnosis from the PVDiagnosis table
				if (formNameArray[0].trim().equals("generalPhysicianGokhaleOPD.jsp")) {

					// Retrieving diagnosis list for the last visit ID
					orthoDiagnosisList = patientDAOInf.retrieveOrthoDiagnosisList(patientForm.getVisitID());

					ServletContext context = request.getServletContext();

					String realPath = context.getRealPath("/");

					JSONParser parser = new JSONParser();

					JSONArray diagnosisJSON = (JSONArray) parser
							.parse(new FileReader(realPath + File.separator + "ortho_charges.json"));

					for (Object jsonData : diagnosisJSON) {
						JSONObject data = (JSONObject) jsonData;

						// diagnoseList.put((String) data.get("rate"), (String) data.get("diagnosis"));
					}

				}
				diagnoseList = configurationUtil.getDiagnoseList();

				request.setAttribute("apptID", patientForm.getAptID());

				drugList = configurationUtil.getTradeNameList();

				InvestigationList = configurationUtil.getInvestigationList();

				frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

				doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

				categoryList = configurationUtil.getCategoryList();

				hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

				doctorList1 = configurationUtil.getDoctorList(loginForm.getPracticeID());

				reportList = configurationUtil.getRepostList(loginForm.getVisitTypeID());

				// Inserting values into Audit table
				daoInf.insertAudit(request.getRemoteAddr(), "Add General Physician Billing", loginForm.getUserID());

				System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[0].trim());

				// Setting add opd page name value in pageName variable
				setPageName(formNameArray[0].trim());

				return SUCCESS;
			} else if (message.equals("noVisit")) {
				addActionError("No visit added.Please add visit first.");

				HttpServletRequest request = ServletActionContext.getRequest();

				String billingTabCheck = "enable";

				request.setAttribute("billingTabCheck", billingTabCheck);

				/*
				 * Update appointment status to Billing
				 */
				patientDAOInf.updateBillingAppointmentStatus(patientForm.getPatientID(), patientForm.getAptID());

				/*
				 * retrieving patientList which contains visit details
				 */
				if (formNameArray[0].trim().equals("generalOPDNew.jsp")
						|| formNameArray[0].trim().equals("telephonicNew.jsp")
						|| formNameArray[0].trim().equals("physicianOPDNew.jsp")
						|| formNameArray[0].trim().equals("generalPhysicianOPD.jsp")
						|| formNameArray[0].trim().equals("generalPhysicianGokhaleOPD.jsp")) {
					patientList = patientDAOInf.retrieveDefaultPatientDetails(patientForm.getPatientID(),
							patientForm.getVisitID(), loginForm.getClinicID(), patientForm.getAptID(),
							loginForm.getVisitTypeID());
				} else if (formNameArray[0].trim().equals("genaralClinicOPDNew.jsp")) {
					patientList = patientDAOInf.retrieveGeneralClinicPatientDetails(patientForm.getPatientID(),
							patientForm.getVisitID(), loginForm.getClinicID());

				} else {
					String visitType = daoInf1.retrieveVisitTypeNameByID(loginForm.getVisitTypeID());
					System.out.println("visitype is ::" + visitType);

					patientList = patientDAOInf.retrieveLastEnteredVisitDetail(patientForm.getPatientID(),
							patientForm.getVisitID(), loginForm.getClinicID(), visitType);

				}

				boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

				if (visitCheck) {
					billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
				} else {
					billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
							loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
				}

				/* Retrieve labReport List */
				labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
						loginForm.getClinicID());

				String dummy = "";

				request.setAttribute("lasteEnteredVisitList", dummy);

				request.setAttribute("lasteEnteredPrescList", dummy);

				request.setAttribute("lasteEnteredBillList", dummy);

				String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

				request.setAttribute("medicalCertiText", medicatCertificate);

				String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

				request.setAttribute("referralLetter", referralLetter);
				/*
				 * retrieving prescription list by visitID
				 */
				prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID());

				InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

				diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());

				String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
				request.setAttribute("paymentType", paymentType);

				/*
				 * retrieving symptomCheck list by visitID
				 */
				symptomList = patientDAOInf.retrievesymptomCheckList(patientForm.getVisitID());

				historyList = patientDAOInf.retrieveMedicalHistoryList(patientForm.getPatientID());

				complaintList = patientDAOInf.retrievecomplaintList(patientForm.getVisitID());

				medicationList = patientDAOInf.retrieveCurrentMedicationList(patientForm.getPatientID());

				// Checking if the CRF form is for Gokhale clinic, if so then load the diagnosis
				// from the json file else load the diagnosis from the PVDiagnosis table
				if (formNameArray[0].trim().equals("generalPhysicianGokhaleOPD.jsp")) {

					// Retrieving diagnosis list for the last visit ID
					orthoDiagnosisList = patientDAOInf.retrieveOrthoDiagnosisList(patientForm.getVisitID());

					ServletContext context = request.getServletContext();

					String realPath = context.getRealPath("/");

					JSONParser parser = new JSONParser();

					JSONArray diagnosisJSON = (JSONArray) parser
							.parse(new FileReader(realPath + File.separator + "ortho_charges.json"));

					for (Object jsonData : diagnosisJSON) {
						JSONObject data = (JSONObject) jsonData;

						// diagnoseList.put((String) data.get("rate"), (String) data.get("diagnosis"));
					}

				}
				diagnoseList = configurationUtil.getDiagnoseList();

				request.setAttribute("apptID", patientForm.getAptID());

				drugList = configurationUtil.getTradeNameList();

				InvestigationList = configurationUtil.getInvestigationList();
				frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

				// chargeTypeList = configurationUtil.getChargeTypeList();

				doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

				hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

				doctorList1 = configurationUtil.getDoctorList(loginForm.getPracticeID());

				reportList = configurationUtil.getRepostList(loginForm.getVisitTypeID());

				categoryList = configurationUtil.getCategoryList();

				// Inserting values into Audit table
				daoInf.insertAudit(request.getRemoteAddr(), "Add General Physician Billing Exception Occurred.",
						loginForm.getUserID());

				System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[0].trim());

				// Setting add opd page name value in pageName variable
				setPageName(formNameArray[0].trim());

				return ERROR;
			} else {
				addActionError("Failed to add visit bill. Please check server logs for more details.");

				HttpServletRequest request = ServletActionContext.getRequest();

				String billingTabCheck = "enable";

				request.setAttribute("billingTabCheck", billingTabCheck);

				/*
				 * Update appointment status to Billing
				 */
				patientDAOInf.updateBillingAppointmentStatus(patientForm.getPatientID(), patientForm.getAptID());

				/*
				 * retrieving patientList which contains visit details
				 */
				if (formNameArray[0].trim().equals("generalOPDNew.jsp")
						|| formNameArray[0].trim().equals("telephonicNew.jsp")
						|| formNameArray[0].trim().equals("physicianOPDNew.jsp")
						|| formNameArray[0].trim().equals("generalPhysicianOPD.jsp")
						|| formNameArray[0].trim().equals("generalPhysicianGokhaleOPD.jsp")) {
					patientList = patientDAOInf.retrieveDefaultPatientDetails(patientForm.getPatientID(),
							patientForm.getVisitID(), loginForm.getClinicID(), patientForm.getAptID(),
							loginForm.getVisitTypeID());
				} else if (formNameArray[0].trim().equals("genaralClinicOPDNew.jsp")) {
					patientList = patientDAOInf.retrieveGeneralClinicPatientDetails(patientForm.getPatientID(),
							patientForm.getVisitID(), loginForm.getClinicID());

				} else {
					String visitType = daoInf1.retrieveVisitTypeNameByID(loginForm.getVisitTypeID());
					System.out.println("visitype is ::" + visitType);

					patientList = patientDAOInf.retrieveLastEnteredVisitDetail(patientForm.getPatientID(),
							patientForm.getVisitID(), loginForm.getClinicID(), visitType);

				}

				boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

				if (visitCheck) {
					billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
				} else {
					billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
							loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
				}

				/* Retrieve labReport List */
				labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
						loginForm.getClinicID());

				// String dummy = "";
				String dummy = "success";

				request.setAttribute("lasteEnteredVisitList", "");

				request.setAttribute("lasteEnteredPrescList", dummy);

				request.setAttribute("lasteEnteredBillList", dummy);

				String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

				request.setAttribute("medicalCertiText", medicatCertificate);

				String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

				request.setAttribute("referralLetter", referralLetter);
				/*
				 * retrieving prescription list by visitID
				 */
				prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID());

				InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

				diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());

				/*
				 * retrieving symptomCheck list by visitID
				 */
				symptomList = patientDAOInf.retrievesymptomCheckList(patientForm.getVisitID());

				historyList = patientDAOInf.retrieveMedicalHistoryList(patientForm.getPatientID());

				complaintList = patientDAOInf.retrievecomplaintList(patientForm.getVisitID());

				medicationList = patientDAOInf.retrieveCurrentMedicationList(patientForm.getPatientID());

				// Checking if the CRF form is for Gokhale clinic, if so then load the diagnosis
				// from the json file else load the diagnosis from the PVDiagnosis table
				if (formNameArray[0].trim().equals("generalPhysicianGokhaleOPD.jsp")) {

					// Retrieving diagnosis list for the last visit ID
					orthoDiagnosisList = patientDAOInf.retrieveOrthoDiagnosisList(patientForm.getVisitID());

					ServletContext context = request.getServletContext();

					String realPath = context.getRealPath("/");

					JSONParser parser = new JSONParser();

					JSONArray diagnosisJSON = (JSONArray) parser
							.parse(new FileReader(realPath + File.separator + "ortho_charges.json"));

					for (Object jsonData : diagnosisJSON) {
						JSONObject data = (JSONObject) jsonData;

						// diagnoseList.put((String) data.get("rate"), (String) data.get("diagnosis"));
					}

				}
				diagnoseList = configurationUtil.getDiagnoseList();

				request.setAttribute("apptID", patientForm.getAptID());

				drugList = configurationUtil.getTradeNameList();

				InvestigationList = configurationUtil.getInvestigationList();

				frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

				String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
				request.setAttribute("paymentType", paymentType);

				doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

				hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

				doctorList1 = configurationUtil.getDoctorList(loginForm.getPracticeID());

				reportList = configurationUtil.getRepostList(loginForm.getVisitTypeID());

				categoryList = configurationUtil.getCategoryList();

				// Inserting values into Audit table
				daoInf.insertAudit(request.getRemoteAddr(), "Add General Physician Billing Exception Occurred.",
						loginForm.getUserID());

				System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[0].trim());

				// Setting add opd page name value in pageName variable
				setPageName(formNameArray[0].trim());

				return ERROR;
			}

		}
		return SUCCESS;
	}

	/**
	 * 
	 * @return
	 * @throws Exception
	 */
	public String addNewIPDOpthBill() throws Exception {

		System.out.println("addbutton val:" + patientForm.getAddButton());
		if (patientForm.getAddButton().startsWith(",")) {
			patientForm.getAddButton().substring(1);

			System.out.println("addbutton val is :" + patientForm.getAddButton());
		}

		System.out.println("outside add button print");
		serviceInf = new eDhanvantariServiceImpl();
		patientDAOInf = new PatientDAOImpl();

		LoginDAOInf daoInf = new LoginDAOImpl();

		SMSSender smsSender = new SMSSender();

		EmailUtil emailUtil = new EmailUtil();

		ConvertToPDFUtil convertToPDFUtil = new ConvertToPDFUtil();

		PrescriptionManagementDAOInf managementDAOInf = new PrescriptionManagementDAOImpl();

		RegistrationDAOinf registrationDAOinf = new RegistrationDAOImpl();

		ClinicDAOInf daoInf1 = new ClinicDAOImpl();
		/*
		 * Getting user role from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");

		String username = patientDAOInf.retrieveUsernameBYuserID(loginForm.getUserID());

		String accessKey = xmlUtil.getAccessKey();

		String secreteKey = xmlUtil.getSecreteKey();

		AWSS3Connect awss3Connect = new AWSS3Connect();

		// getting input file location from S3 bucket
		String s3reportFilePath = xmlUtil.getS3RDMLReportFilePath();

		String s3LogoFilePath = xmlUtil.getS3RDMLFilePath();

		// getting s3 bucket name
		String bucketName = util.getS3BucketName();

		// getting s3 bucket region
		String bucketRegion = xmlUtil.getS3BucketRegion();

		AWSCredentials credentials = new BasicAWSCredentials(accessKey, secreteKey);

		AmazonS3 s3 = AmazonS3ClientBuilder.standard().withCredentials(new AWSStaticCredentialsProvider(credentials))
				.withRegion(bucketRegion).build();

		request.setAttribute("consentDocFile", "Yes");

		/*
		 * Getting form name to be display based on logged in User
		 */
		String[] formNameArray = loginForm.getOPDJSPName().split("&");

		String check1 = patientDAOInf.verifyReferralLetter(patientForm.getVisitID());
		System.out.println("check1 value in action:" + check1);
		request.setAttribute("referralLetterCheck", check1);

		String check = patientDAOInf.verifyMedicalCertificate(patientForm.getVisitID());
		System.out.println("check value in action:" + check);
		request.setAttribute("medicalCertiCheck", check);

		message = serviceInf.configureBill(patientForm, loginForm.getUserID());

		if (message.equalsIgnoreCase("success")) {

			addActionMessage("New Bill added successfully.");

			HttpServletRequest request = ServletActionContext.getRequest();

			String billingTabCheck = "enable";

			request.setAttribute("billingTabCheck", billingTabCheck);

			/*
			 * Retrieving patient's mobile no, if mobile is not null, then sending patient a
			 * welcome message
			 */
			String mobileNo = patientDAOInf.retrievePatientMobileNoByID(patientForm.getPatientID());
			System.out.println("mobile no. of patient::" + mobileNo);

			boolean SMSCheck1 = util.verifyCommunicationCheck("smsReviewForm");
			System.out.println("smscheck::" + SMSCheck1);
			if (SMSCheck1) {
				/*
				 * Sending feedback SMS to patient
				 */
				smsSender.sendFeedbackSMS(mobileNo, patientForm.getPatientID(), loginForm.getPracticeID());
			}

			/*
			 * Retrieving patient's email ID, if not null, then sending patient a welcome
			 * mail
			 */
			String emailID = patientDAOInf.retrievePatientEmailByID(patientForm.getPatientID());
			System.out.println("email. of patient::" + emailID);
			boolean EmailCheck1 = util.verifyCommunicationCheck("emailReviewForm");

			if (EmailCheck1) {

				/*
				 * Sending feedback email to patient
				 */
				emailUtil.sendFeedbackMail(patientForm.getPatientID(), emailID, loginForm.getPracticeID());
			}

			/*
			 * Update appointment status to Billing
			 */
			patientDAOInf.updateBillingAppointmentStatus(patientForm.getPatientID(), patientForm.getAptID());

			int productID = patientDAOInf.retrieveProductID(patientForm.getVisitID());

			/*
			 * Update appointment status to Billing
			 */

			patientDAOInf.updateIOLChargeStock(productID);

			if (patientForm.getAddButton().equals("print") || patientForm.getAddButton().equals("Print")) {
				ServletContext context = request.getServletContext();

				String realPath = context.getRealPath("/");

				System.out.println("Real path is :: " + realPath);

				// String pdfOutFIleName = reportFilePath + patientForm.getFirstName() +
				// patientForm.getLastName()
				String pdfOutFIleName = patientForm.getFirstName() + patientForm.getLastName()
						+ patientForm.getPatientID() + "_" + patientForm.getVisitID() + "b.pdf";

				// Bill PDF for general practice
				message = convertToPDFUtil.convertIPDBillingPDF(patientForm.getPatientID(), patientForm.getVisitID(),
						realPath, pdfOutFIleName, loginForm.getClinicID(), loginForm.getPracticeID(), username, s3,
						s3LogoFilePath, bucketName);

				if (message.equals("success")) {
					File fileToDownload = new File(realPath + "/" + pdfOutFIleName);

					// Storing file to S3 RDML INPUT FILE location
					message = awss3Connect.pushFile(fileToDownload, pdfOutFIleName, bucketName, bucketRegion,
							s3reportFilePath);

					S3ObjectInputStream s3ObjectInputStream = s3
							.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, pdfOutFIleName))
							.getObjectContent();

					patientForm.setFileInputStream(s3ObjectInputStream);
					patientForm.setFileName(pdfOutFIleName);

					request.setAttribute("PDFOutFileName", pdfOutFIleName);
				} else {
					addActionError(
							"Bill saved successfull but failed to generate PDF. Please check server logs for more details.");
				}
			}

			billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());

			/* Retrieve labReport List */
			labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
					loginForm.getClinicID());

			// String dummy = "";

			String lastEneteredVisitList = "success";

			request.setAttribute("lastEneteredVisitList", lastEneteredVisitList);

			String dummy = "success";

			request.setAttribute("lasteEnteredVisitList", dummy);

			request.setAttribute("consentText", "success");

			String ipdVisitPage = "display";

			boolean hasConsent = patientDAOInf.verifyhasConsentValue(loginForm.getVisitTypeID());

			if (hasConsent) {

				String consentDocFileName = patientDAOInf.retrieveConsentDocFileName(loginForm.getVisitTypeID());

				request.setAttribute("consentDocFileName", consentDocFileName);
			}

			orthoBillItemList = patientDAOInf.retrieveOrthoBillingItemList(patientForm.getVisitID());

			LabInvastigationList = patientDAOInf.reytrieveLabInvastigationLstByVisitID(patientForm.getVisitID());

			request.setAttribute("LabInvastigationList", LabInvastigationList);

			request.setAttribute("display", ipdVisitPage);

			patientList = patientDAOInf.retireveLastEneteredIPDVisit(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID());

			IPDComplaintsList = patientDAOInf.retrieveIPDComplaintsList(patientForm.getVisitID());

			diagnoseList = configurationUtil.getDiagnoseList();

			String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

			request.setAttribute("medicalCertiText", medicatCertificate);

			String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

			request.setAttribute("referralLetter", referralLetter);

			/*
			 * retrieving prescription list by visitID
			 */
			prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID());

			InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

			diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());

			String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
			request.setAttribute("paymentType", paymentType);

			request.setAttribute("apptID", patientForm.getAptID());

			drugList = configurationUtil.getTradeNameList();

			InvestigationList = configurationUtil.getInvestigationList();

			frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

			doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

			categoryList = configurationUtil.getCategoryList();

			hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Add General Physician Billing", loginForm.getUserID());

			System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[0].trim());

			// Setting add opd page name value in pageName variable
			setPageName(formNameArray[0].trim());

			return SUCCESS;
		} else if (message.equals("noVisit")) {
			addActionError("No visit added.Please add visit first.");

			HttpServletRequest request = ServletActionContext.getRequest();

			String billingTabCheck = "enable";

			request.setAttribute("billingTabCheck", billingTabCheck);

			/*
			 * Update appointment status to Billing
			 */
			patientDAOInf.updateBillingAppointmentStatus(patientForm.getPatientID(), patientForm.getAptID());

			String lastEneteredVisitList = "success";

			request.setAttribute("lastEneteredVisitList", lastEneteredVisitList);

			String dummy = "success";

			request.setAttribute("lasteEnteredVisitList", dummy);

			request.setAttribute("consentText", "success");

			String ipdVisitPage = "display";

			orthoBillItemList = patientDAOInf.retrieveOrthoBillingItemList(patientForm.getVisitID());

			boolean hasConsent = patientDAOInf.verifyhasConsentValue(loginForm.getVisitTypeID());

			if (hasConsent) {

				String consentDocFileName = patientDAOInf.retrieveConsentDocFileName(loginForm.getVisitTypeID());

				request.setAttribute("consentDocFileName", consentDocFileName);
			}

			LabInvastigationList = patientDAOInf.reytrieveLabInvastigationLstByVisitID(patientForm.getVisitID());

			request.setAttribute("LabInvastigationList", LabInvastigationList);

			request.setAttribute("display", ipdVisitPage);

			patientList = patientDAOInf.retireveLastEneteredIPDVisit(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID());

			IPDComplaintsList = patientDAOInf.retrieveIPDComplaintsList(patientForm.getVisitID());

			diagnoseList = configurationUtil.getDiagnoseList();

			billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());

			/* Retrieve labReport List */
			labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
					loginForm.getClinicID());

			String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

			request.setAttribute("medicalCertiText", medicatCertificate);

			String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

			request.setAttribute("referralLetter", referralLetter);
			/*
			 * retrieving prescription list by visitID
			 */
			prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID());

			InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

			diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());

			String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
			request.setAttribute("paymentType", paymentType);

			request.setAttribute("apptID", patientForm.getAptID());

			drugList = configurationUtil.getTradeNameList();

			InvestigationList = configurationUtil.getInvestigationList();
			frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

			// chargeTypeList = configurationUtil.getChargeTypeList();

			doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

			hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

			categoryList = configurationUtil.getCategoryList();

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Add General Physician Billing Exception Occurred.",
					loginForm.getUserID());

			System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[0].trim());

			// Setting add opd page name value in pageName variable
			setPageName(formNameArray[0].trim());

			return ERROR;
		} else {
			addActionError("Failed to add visit bill. Please check server logs for more details.");

			HttpServletRequest request = ServletActionContext.getRequest();

			String billingTabCheck = "enable";

			request.setAttribute("billingTabCheck", billingTabCheck);

			/*
			 * Update appointment status to Billing
			 */
			patientDAOInf.updateBillingAppointmentStatus(patientForm.getPatientID(), patientForm.getAptID());

			String lastEneteredVisitList = "success";

			request.setAttribute("lastEneteredVisitList", lastEneteredVisitList);

			String dummy = "success";

			request.setAttribute("lasteEnteredVisitList", dummy);

			request.setAttribute("consentText", "success");

			String ipdVisitPage = "display";

			boolean hasConsent = patientDAOInf.verifyhasConsentValue(loginForm.getVisitTypeID());

			if (hasConsent) {

				String consentDocFileName = patientDAOInf.retrieveConsentDocFileName(loginForm.getVisitTypeID());

				request.setAttribute("consentDocFileName", consentDocFileName);
			}

			orthoBillItemList = patientDAOInf.retrieveOrthoBillingItemList(patientForm.getVisitID());

			LabInvastigationList = patientDAOInf.reytrieveLabInvastigationLstByVisitID(patientForm.getVisitID());

			request.setAttribute("LabInvastigationList", LabInvastigationList);

			request.setAttribute("display", ipdVisitPage);

			patientList = patientDAOInf.retireveLastEneteredIPDVisit(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID());

			IPDComplaintsList = patientDAOInf.retrieveIPDComplaintsList(patientForm.getVisitID());

			diagnoseList = configurationUtil.getDiagnoseList();

			billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());

			/* Retrieve labReport List */
			labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
					loginForm.getClinicID());

			String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

			request.setAttribute("medicalCertiText", medicatCertificate);

			String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

			request.setAttribute("referralLetter", referralLetter);
			/*
			 * retrieving prescription list by visitID
			 */
			prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID());

			InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

			diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());

			request.setAttribute("apptID", patientForm.getAptID());

			drugList = configurationUtil.getTradeNameList();

			InvestigationList = configurationUtil.getInvestigationList();

			frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

			String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
			request.setAttribute("paymentType", paymentType);

			doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

			hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

			categoryList = configurationUtil.getCategoryList();

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Add General Physician Billing Exception Occurred.",
					loginForm.getUserID());

			System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[0].trim());

			// Setting add opd page name value in pageName variable
			setPageName(formNameArray[0].trim());

			return ERROR;
		}
	}

	/**
	 * 
	 * @return
	 * @throws Exception
	 */
	public String editIPDOpthBill() throws Exception {

		System.out.println("addbutton val:" + patientForm.getAddButton());
		if (patientForm.getAddButton().startsWith(",")) {
			patientForm.getAddButton().substring(1);

			System.out.println("addbutton val is :" + patientForm.getAddButton());
		}

		System.out.println("outside add button print");
		serviceInf = new eDhanvantariServiceImpl();
		patientDAOInf = new PatientDAOImpl();

		LoginDAOInf daoInf = new LoginDAOImpl();

		SMSSender smsSender = new SMSSender();

		EmailUtil emailUtil = new EmailUtil();

		ConvertToPDFUtil convertToPDFUtil = new ConvertToPDFUtil();

		PrescriptionManagementDAOInf managementDAOInf = new PrescriptionManagementDAOImpl();

		RegistrationDAOinf registrationDAOinf = new RegistrationDAOImpl();

		ClinicDAOInf daoInf1 = new ClinicDAOImpl();
		/*
		 * Getting user role from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");

		String username = patientDAOInf.retrieveUsernameBYuserID(loginForm.getUserID());

		String accessKey = xmlUtil.getAccessKey();

		String secreteKey = xmlUtil.getSecreteKey();

		AWSS3Connect awss3Connect = new AWSS3Connect();

		// getting input file location from S3 bucket
		String s3reportFilePath = xmlUtil.getS3RDMLReportFilePath();

		String s3LogoFilePath = xmlUtil.getS3RDMLFilePath();

		// getting s3 bucket name
		String bucketName = util.getS3BucketName();

		// getting s3 bucket region
		String bucketRegion = xmlUtil.getS3BucketRegion();

		AWSCredentials credentials = new BasicAWSCredentials(accessKey, secreteKey);

		AmazonS3 s3 = AmazonS3ClientBuilder.standard().withCredentials(new AWSStaticCredentialsProvider(credentials))
				.withRegion(bucketRegion).build();

		request.setAttribute("consentDocFile", "Yes");

		/*
		 * Getting form name to be display based on logged in User
		 */
		String[] formNameArray = loginForm.getOPDJSPName().split("&");

		String check1 = patientDAOInf.verifyReferralLetter(patientForm.getVisitID());
		System.out.println("check1 value in action:" + check1);
		request.setAttribute("referralLetterCheck", check1);

		String check = patientDAOInf.verifyMedicalCertificate(patientForm.getVisitID());
		System.out.println("check value in action:" + check);
		request.setAttribute("medicalCertiCheck", check);

		message = serviceInf.configureBill(patientForm, loginForm.getUserID());

		if (message.equalsIgnoreCase("success")) {

			addActionMessage("Bill saved successfully.");

			HttpServletRequest request = ServletActionContext.getRequest();

			String billingTabCheck = "enable";

			request.setAttribute("billingTabCheck", billingTabCheck);

			/*
			 * Retrieving patient's mobile no, if mobile is not null, then sending patient a
			 * welcome message
			 */
			String mobileNo = patientDAOInf.retrievePatientMobileNoByID(patientForm.getPatientID());
			System.out.println("mobile no. of patient::" + mobileNo);

			boolean SMSCheck1 = util.verifyCommunicationCheck("smsReviewForm");
			System.out.println("smscheck::" + SMSCheck1);
			if (SMSCheck1) {
				/*
				 * Sending feedback SMS to patient
				 */
				smsSender.sendFeedbackSMS(mobileNo, patientForm.getPatientID(), loginForm.getPracticeID());
			}

			/*
			 * Retrieving patient's email ID, if not null, then sending patient a welcome
			 * mail
			 */
			String emailID = patientDAOInf.retrievePatientEmailByID(patientForm.getPatientID());
			System.out.println("email. of patient::" + emailID);
			boolean EmailCheck1 = util.verifyCommunicationCheck("emailReviewForm");

			if (EmailCheck1) {

				/*
				 * Sending feedback email to patient
				 */
				emailUtil.sendFeedbackMail(patientForm.getPatientID(), emailID, loginForm.getPracticeID());
			}

			/*
			 * Update appointment status to Billing
			 */
			patientDAOInf.updateBillingAppointmentStatus(patientForm.getPatientID(), patientForm.getAptID());

			int productID = patientDAOInf.retrieveProductID(patientForm.getVisitID());

			/*
			 * Update appointment status to Billing
			 */

			patientDAOInf.updateIOLChargeStock(productID);

			if (patientForm.getAddButton().equals("print") || patientForm.getAddButton().equals("Print")) {
				ServletContext context = request.getServletContext();

				String realPath = context.getRealPath("/");

				System.out.println("Real path is :: " + realPath);

				// String pdfOutFIleName = reportFilePath + patientForm.getFirstName() +
				// patientForm.getLastName()
				String pdfOutFIleName = patientForm.getFirstName() + patientForm.getLastName()
						+ patientForm.getPatientID() + "_" + patientForm.getVisitID() + "b.pdf";

				// Bill PDF for general practice
				message = convertToPDFUtil.convertIPDBillingPDF(patientForm.getPatientID(), patientForm.getVisitID(),
						realPath, pdfOutFIleName, loginForm.getClinicID(), loginForm.getPracticeID(), username, s3,
						s3LogoFilePath, bucketName);

				if (message.equals("success")) {
					File fileToDownload = new File(realPath + "/" + pdfOutFIleName);

					// Storing file to S3 RDML INPUT FILE location
					message = awss3Connect.pushFile(fileToDownload, pdfOutFIleName, bucketName, bucketRegion,
							s3reportFilePath);

					S3ObjectInputStream s3ObjectInputStream = s3
							.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, pdfOutFIleName))
							.getObjectContent();

					patientForm.setFileInputStream(s3ObjectInputStream);
					patientForm.setFileName(pdfOutFIleName);

					request.setAttribute("PDFOutFileName", pdfOutFIleName);
				} else {
					addActionError(
							"Bill saved successfull but failed to generate PDF. Please check server logs for more details.");
				}
			}

			orthoBillItemList = patientDAOInf.retrieveOrthoBillingItemList(patientForm.getVisitID());

			billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());

			/* Retrieve labReport List */
			labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
					loginForm.getClinicID());

			// String dummy = "";

			String lastEneteredVisitList = "success";

			request.setAttribute("lastEneteredVisitList", lastEneteredVisitList);

			String dummy = "success";

			request.setAttribute("lasteEnteredVisitList", dummy);

			request.setAttribute("consentText", "success");

			String ipdVisitPage = "display";

			boolean hasConsent = patientDAOInf.verifyhasConsentValue(loginForm.getVisitTypeID());

			if (hasConsent) {

				String consentDocFileName = patientDAOInf.retrieveConsentDocFileName(loginForm.getVisitTypeID());

				request.setAttribute("consentDocFileName", consentDocFileName);
			}

			LabInvastigationList = patientDAOInf.reytrieveLabInvastigationLstByVisitID(patientForm.getVisitID());

			request.setAttribute("LabInvastigationList", LabInvastigationList);

			request.setAttribute("display", ipdVisitPage);

			patientList = patientDAOInf.retireveLastEneteredIPDVisit(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID());

			IPDComplaintsList = patientDAOInf.retrieveIPDComplaintsList(patientForm.getVisitID());

			diagnoseList = configurationUtil.getDiagnoseList();

			String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

			request.setAttribute("medicalCertiText", medicatCertificate);

			String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

			request.setAttribute("referralLetter", referralLetter);

			/*
			 * retrieving prescription list by visitID
			 */
			prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID());

			InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

			diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());

			String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
			request.setAttribute("paymentType", paymentType);

			request.setAttribute("apptID", patientForm.getAptID());

			drugList = configurationUtil.getTradeNameList();

			InvestigationList = configurationUtil.getInvestigationList();

			frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

			doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

			categoryList = configurationUtil.getCategoryList();

			hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Edit IPD Billing", loginForm.getUserID());

			System.out.println("Edit OPD JSP Page name for logged in user is ::: " + formNameArray[1].trim());

			// Setting add opd page name value in pageName variable
			setPageName(formNameArray[1].trim());

			return SUCCESS;
		} else {
			addActionError("Failed to save visit bill. Please check server logs for more details.");

			HttpServletRequest request = ServletActionContext.getRequest();

			String billingTabCheck = "enable";

			request.setAttribute("billingTabCheck", billingTabCheck);

			/*
			 * Update appointment status to Billing
			 */
			patientDAOInf.updateBillingAppointmentStatus(patientForm.getPatientID(), patientForm.getAptID());

			String lastEneteredVisitList = "success";

			request.setAttribute("lastEneteredVisitList", lastEneteredVisitList);

			String dummy = "success";

			request.setAttribute("lasteEnteredVisitList", dummy);

			request.setAttribute("consentText", "success");

			String ipdVisitPage = "display";

			orthoBillItemList = patientDAOInf.retrieveOrthoBillingItemList(patientForm.getVisitID());

			boolean hasConsent = patientDAOInf.verifyhasConsentValue(loginForm.getVisitTypeID());

			if (hasConsent) {

				String consentDocFileName = patientDAOInf.retrieveConsentDocFileName(loginForm.getVisitTypeID());

				request.setAttribute("consentDocFileName", consentDocFileName);
			}

			LabInvastigationList = patientDAOInf.reytrieveLabInvastigationLstByVisitID(patientForm.getVisitID());

			request.setAttribute("LabInvastigationList", LabInvastigationList);

			request.setAttribute("display", ipdVisitPage);

			patientList = patientDAOInf.retireveLastEneteredIPDVisit(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID());

			IPDComplaintsList = patientDAOInf.retrieveIPDComplaintsList(patientForm.getVisitID());

			diagnoseList = configurationUtil.getDiagnoseList();

			billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());

			/* Retrieve labReport List */
			labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
					loginForm.getClinicID());

			String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

			request.setAttribute("medicalCertiText", medicatCertificate);

			String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

			request.setAttribute("referralLetter", referralLetter);
			/*
			 * retrieving prescription list by visitID
			 */
			prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID());

			InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

			diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());

			request.setAttribute("apptID", patientForm.getAptID());

			drugList = configurationUtil.getTradeNameList();

			InvestigationList = configurationUtil.getInvestigationList();

			frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

			String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
			request.setAttribute("paymentType", paymentType);

			doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

			hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

			categoryList = configurationUtil.getCategoryList();

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Edit IPD Billing Exception Occurred.", loginForm.getUserID());

			System.out.println("Edit OPD JSP Page name for logged in user is ::: " + formNameArray[1].trim());

			// Setting add opd page name value in pageName variable
			setPageName(formNameArray[1].trim());

			return ERROR;
		}
	}

	public String viewOphthVisit() throws Exception {

		RegistrationDAOinf registrationDAOinf = new RegistrationDAOImpl();
		/*
		 * Getting user role from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");

		patientDAOInf = new PatientDAOImpl();

		LoginDAOInf daoInf = new LoginDAOImpl();

		ClinicDAOInf daoInf1 = new ClinicDAOImpl();

		PrescriptionManagementDAOInf managementDAOInf = new PrescriptionManagementDAOImpl();

		System.out.println("VISIT ID INSIDE RENDER::" + patientForm.getVisitID() + " patientid;"
				+ loginForm.getPatientID() + " visit type id:" + patientForm.getVisitTypeID());
		System.out.println("clinicid:" + loginForm.getClinicID() + " apttid;" + patientForm.getAptID() + " suffix::"
				+ loginForm.getClinicSuffix() + " clinic idd:" + patientForm.getClinicID());

		String opticianTabEnable = "Enable";

		request.setAttribute("opticianTabEnable", opticianTabEnable);

		/*
		 * Retrieving patientID from VisitID
		 */
		patientForm.setPatientID(patientDAOInf.retrievePatientIDByVisitID(patientForm.getVisitID()));

		// reteiving consultation charges from prescription table based on visitID
		String consltnCharges = String
				.valueOf(patientDAOInf.retrieveConsultationChargesFromPrescription(patientForm.getVisitID()));

		request.setAttribute("consltnCharges", consltnCharges);

		/*
		 * Getting form name to be display based on logged in User
		 */

		// String[] formNameArray = loginForm.getOPDJSPName().split("&");

		// System.out.println("Add OPD JSP Page name for logged in user is ::: " +
		// formNameArray[1].trim());

		String check1 = patientDAOInf.verifyReferralLetter(patientForm.getVisitID());
		System.out.println("check1 value in action:" + check1);
		request.setAttribute("referralLetterCheck", check1);

		String check = patientDAOInf.verifyMedicalCertificate(patientForm.getVisitID());
		System.out.println("check value in action:" + check);
		request.setAttribute("medicalCertiCheck", check);

		String check2 = patientDAOInf.verifyFrameDetailsExist(patientForm.getVisitID(), "Eyewear");
		System.out.println("check2 value for frame:" + check2);
		request.setAttribute("frameDetailsCheck", check2);

		/*
		 * Getting careType name with VisitTypeID
		 */
		String CareType = patientDAOInf.retrieveCareType(patientForm.getVisitTypeID());

		/*
		 * Verifying whether visit exist for the patient or not, if not then disable
		 * View Last Visit button
		 */
		int patientVisitExistCheck = patientDAOInf.verifyVisitDetails(loginForm.getPatientID(),
				loginForm.getClinicID());

		String disableButtonCheck = "enable";
		if (patientVisitExistCheck == 0) {
			disableButtonCheck = "disable";
		}

		request.setAttribute("disableButtonCheck", disableButtonCheck);

		/*
		 * Retrieving patient age based on patientID
		 */
		String patientAge = patientDAOInf.retrievePatientAgeByPatientID(loginForm.getPatientID());

		request.setAttribute("patientAge", patientAge);

		/*
		 * retrieving patient gender based on patientID
		 */
		String patientGender = patientDAOInf.retrievePatientGenderByPatientID(loginForm.getPatientID());

		request.setAttribute("gender", patientGender);

		hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

		String visitType = daoInf1.retrieveVisitTypeNameByID(patientForm.getVisitTypeID());
		System.out.println("visitype is ::" + visitType);
		request.setAttribute("visitType", visitType);

		patientList = patientDAOInf.retrieveLastEnteredVisitDetail(loginForm.getPatientID(), patientForm.getVisitID(),
				loginForm.getClinicID(), visitType);

		boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

		System.out.println("Details: " + visitCheck + " patientDetails: " + patientList);

		if (visitCheck) {
			billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
		} else {
			billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(patientForm.getVisitTypeID(),
					loginForm.getClinicID(), loginForm.getClinicSuffix(), loginForm.getPatientID());
		}

		/* Retrieve labReport List */
		labReportList = patientDAOInf.retrievelabReportDetailsList(loginForm.getPatientID(), loginForm.getClinicID());

		request.setAttribute("apptID", patientForm.getAptID());

		System.out.println("billList: " + billList);

		/*
		 * retrieving prescription list by visitID
		 */
		prescriptionList = patientDAOInf.retrievePrescriptionList(loginForm.getPatientID(), patientForm.getVisitID());

		InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

		diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());

		String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
		request.setAttribute("paymentType", paymentType);

		String dummy = "success";

		request.setAttribute("lasteEnteredVisitList", dummy);

		request.setAttribute("lasteEnteredPrescList", dummy);

		String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

		request.setAttribute("medicalCertiText", medicatCertificate);

		String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

		request.setAttribute("referralLetter", referralLetter);

		doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

		diagnoseList = configurationUtil.getDiagnoseList();

		resayuDiagnosisList = configurationUtil.getDiagnoseList();

		resayuDiagnosisList.put("Other", "Other");

		drugList = configurationUtil.getTradeNameList();

		InvestigationList = configurationUtil.getInvestigationList();

		frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

		categoryList = configurationUtil.getCategoryList();

		// Inserting values into Audit table

		// daoInf.insertAudit(request.getRemoteAddr(), "Edit OPD Visit",
		// loginForm.getUserID());

		// Setting add opd page name value in pageName variable
		setPageName("viewOphthVisit.jsp");

		return SUCCESS;
	}

	public String viewTelephonicVisit() throws Exception {

		RegistrationDAOinf registrationDAOinf = new RegistrationDAOImpl();
		/*
		 * Getting user role from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");

		patientDAOInf = new PatientDAOImpl();

		LoginDAOInf daoInf = new LoginDAOImpl();

		ClinicDAOInf daoInf1 = new ClinicDAOImpl();

		PrescriptionManagementDAOInf managementDAOInf = new PrescriptionManagementDAOImpl();

		System.out.println("VISIT ID INSIDE RENDER::" + patientForm.getVisitID() + " patientid;"
				+ loginForm.getPatientID() + " visit type id:" + patientForm.getVisitTypeID());
		System.out.println("clinicid:" + loginForm.getClinicID() + " apttid;" + patientForm.getAptID() + " suffix::"
				+ loginForm.getClinicSuffix() + " clinic idd:" + patientForm.getClinicID());

		String medicalCertificateTabEnable = "Enable";

		request.setAttribute("medicalCertificateTabEnable", medicalCertificateTabEnable);

		String referralLetterTabEnable = "Enable";

		request.setAttribute("referralLetterTabEnable", referralLetterTabEnable);

		String prescTabCheck = "enable";

		request.setAttribute("prescTabCheck", prescTabCheck);

		String billingTabCheck = "enable";

		request.setAttribute("billingTabCheck", billingTabCheck);

		request.setAttribute("labReportResult", "Success");

		String visitType = daoInf1.retrieveVisitTypeNameByID(patientForm.getVisitTypeID());
		System.out.println("visitype is ::" + visitType);
		request.setAttribute("visitType", visitType);

		/*
		 * Retrieving patientID from VisitID
		 */
		patientForm.setPatientID(patientDAOInf.retrievePatientIDByVisitID(patientForm.getVisitID()));

		// reteiving consultation charges from prescription table based on visitID
		String consltnCharges = String
				.valueOf(patientDAOInf.retrieveConsultationChargesFromPrescription(patientForm.getVisitID()));

		request.setAttribute("consltnCharges", consltnCharges);

		/*
		 * Getting form name to be display based on logged in User
		 */

		String[] formNameArray = loginForm.getOPDJSPName().split("&");

		System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[1].trim());

		String check1 = patientDAOInf.verifyReferralLetter(patientForm.getVisitID());
		System.out.println("check1 value in action:" + check1);
		request.setAttribute("referralLetterCheck", check1);

		String check = patientDAOInf.verifyMedicalCertificate(patientForm.getVisitID());
		System.out.println("check value in action:" + check);
		request.setAttribute("medicalCertiCheck", check);
		/*
		 * Getting careType name with VisitTypeID
		 */
		String CareType = patientDAOInf.retrieveCareType(patientForm.getVisitTypeID());

		/*
		 * Verifying whether visit exist for the patient or not, if not then disable
		 * View Last Visit button
		 */
		int patientVisitExistCheck = patientDAOInf.verifyVisitDetails(loginForm.getPatientID(),
				loginForm.getClinicID());

		String disableButtonCheck = "enable";
		if (patientVisitExistCheck == 0) {
			disableButtonCheck = "disable";
		}

		request.setAttribute("disableButtonCheck", disableButtonCheck);

		/*
		 * Retrieving patient age based on patientID
		 */
		String patientAge = patientDAOInf.retrievePatientAgeByPatientID(loginForm.getPatientID());

		request.setAttribute("patientAge", patientAge);

		/*
		 * retrieving patient gender based on patientID
		 */
		String patientGender = patientDAOInf.retrievePatientGenderByPatientID(loginForm.getPatientID());

		request.setAttribute("gender", patientGender);

		hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

		/*
		 * retrieving patientList which contains visit details
		 */

		patientList = patientDAOInf.retrieveDefaultPatientDetails(loginForm.getPatientID(), patientForm.getVisitID(),
				loginForm.getClinicID(), patientForm.getAptID(), patientForm.getVisitTypeID());

		boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

		if (visitCheck) {
			billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
		} else {
			billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(patientForm.getVisitTypeID(),
					loginForm.getClinicID(), loginForm.getClinicSuffix(), loginForm.getPatientID());
		}

		/* Retrieve labReport List */
		labReportList = patientDAOInf.retrievelabReportDetailsList(loginForm.getPatientID(), loginForm.getClinicID());

		String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
		request.setAttribute("paymentType", paymentType);

		String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

		request.setAttribute("medicalCertiText", medicatCertificate);

		String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

		request.setAttribute("referralLetter", referralLetter);
		/*
		 * retrieving prescription list by visitID
		 */
		prescriptionList = patientDAOInf.retrievePrescriptionList(loginForm.getPatientID(), patientForm.getVisitID(),
				loginForm.getClinicID());

		InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

		diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());
		/*
		 * retrieving symptomCheck list by visitID
		 */
		symptomList = patientDAOInf.retrievesymptomCheckList(patientForm.getVisitID());

		complaintList = patientDAOInf.retrievecomplaintList(patientForm.getVisitID());

		historyList = patientDAOInf.retrieveMedicalHistoryList(loginForm.getPatientID());

		medicationList = patientDAOInf.retrieveCurrentMedicationList(loginForm.getPatientID());

		diagnoseList = configurationUtil.getDiagnoseList();

		request.setAttribute("apptID", patientForm.getAptID());

		drugList = configurationUtil.getTradeNameList();

		InvestigationList = configurationUtil.getInvestigationList();

		frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

		doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

		categoryList = configurationUtil.getCategoryList();

		hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

		// Inserting values into Audit table
		// daoInf.insertAudit(request.getRemoteAddr(), "Edit General Physician
		// Prescription",loginForm.getUserID());

		// System.out.println("Edit OPD JSP Page name for logged in user is ::: " +
		// formNameArray[1].trim());

		// Setting add opd page name value in pageName variable
		setPageName("viewTelephonicVisit.jsp");

		return SUCCESS;

	}

	public String viewGenericVisit() throws Exception {

		RegistrationDAOinf registrationDAOinf = new RegistrationDAOImpl();
		/*
		 * Getting user role from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");

		patientDAOInf = new PatientDAOImpl();

		LoginDAOInf daoInf = new LoginDAOImpl();

		ClinicDAOInf daoInf1 = new ClinicDAOImpl();

		PrescriptionManagementDAOInf managementDAOInf = new PrescriptionManagementDAOImpl();

		System.out.println("VISIT ID INSIDE RENDER::" + patientForm.getVisitID() + " patientid;"
				+ loginForm.getPatientID() + " visit type id:" + patientForm.getVisitTypeID());
		System.out.println("clinicid:" + loginForm.getClinicID() + " apttid;" + patientForm.getAptID() + " suffix::"
				+ loginForm.getClinicSuffix() + " patient clinic idd:" + patientForm.getClinicID());

		String medicalCertificateTabEnable = "Enable";

		request.setAttribute("medicalCertificateTabEnable", medicalCertificateTabEnable);

		String referralLetterTabEnable = "Enable";

		request.setAttribute("referralLetterTabEnable", referralLetterTabEnable);

		String prescTabCheck = "enable";

		request.setAttribute("prescTabCheck", prescTabCheck);

		String billingTabCheck = "enable";

		request.setAttribute("billingTabCheck", billingTabCheck);

		request.setAttribute("labReportResult", "Success");

		request.setAttribute("clinicID", patientForm.getClinicID());

		String visitType = daoInf1.retrieveVisitTypeNameByID(patientForm.getVisitTypeID());
		System.out.println("visitype is ::" + visitType);
		request.setAttribute("visitType", visitType);

		/*
		 * Retrieving patientID from VisitID
		 */
		patientForm.setPatientID(patientDAOInf.retrievePatientIDByVisitID(patientForm.getVisitID()));

		// reteiving consultation charges from prescription table based on visitID
		String consltnCharges = String
				.valueOf(patientDAOInf.retrieveConsultationChargesFromPrescription(patientForm.getVisitID()));

		request.setAttribute("consltnCharges", consltnCharges);

		/*
		 * Getting form name to be display based on logged in User
		 */

		String[] formNameArray = loginForm.getOPDJSPName().split("&");

		System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[1].trim());

		String check1 = patientDAOInf.verifyReferralLetter(patientForm.getVisitID());
		System.out.println("check1 value in action:" + check1);
		request.setAttribute("referralLetterCheck", check1);

		String check = patientDAOInf.verifyMedicalCertificate(patientForm.getVisitID());
		System.out.println("check value in action:" + check);
		request.setAttribute("medicalCertiCheck", check);
		/*
		 * Getting careType name with VisitTypeID
		 */
		String CareType = patientDAOInf.retrieveCareType(patientForm.getVisitTypeID());

		/*
		 * Verifying whether visit exist for the patient or not, if not then disable
		 * View Last Visit button
		 */
		int patientVisitExistCheck = patientDAOInf.verifyVisitDetails(loginForm.getPatientID(),
				loginForm.getClinicID());

		String disableButtonCheck = "enable";
		if (patientVisitExistCheck == 0) {
			disableButtonCheck = "disable";
		}

		request.setAttribute("disableButtonCheck", disableButtonCheck);

		/*
		 * Retrieving patient age based on patientID
		 */
		String patientAge = patientDAOInf.retrievePatientAgeByPatientID(loginForm.getPatientID());

		request.setAttribute("patientAge", patientAge);

		/*
		 * retrieving patient gender based on patientID
		 */
		String patientGender = patientDAOInf.retrievePatientGenderByPatientID(loginForm.getPatientID());

		request.setAttribute("gender", patientGender);

		hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

		/*
		 * retrieving patientList which contains visit details
		 */

		patientList = patientDAOInf.retrieveDefaultPatientDetails(loginForm.getPatientID(), patientForm.getVisitID(),
				loginForm.getClinicID(), patientForm.getAptID(), patientForm.getVisitTypeID());

		boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

		if (visitCheck) {
			billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
		} else {
			billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(patientForm.getVisitTypeID(),
					loginForm.getClinicID(), loginForm.getClinicSuffix(), loginForm.getPatientID());
		}

		/* Retrieve labReport List */
		labReportList = patientDAOInf.retrievelabReportDetailsList(loginForm.getPatientID(), loginForm.getClinicID());

		String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
		request.setAttribute("paymentType", paymentType);

		String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

		request.setAttribute("medicalCertiText", medicatCertificate);

		String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

		request.setAttribute("referralLetter", referralLetter);
		/*
		 * retrieving prescription list by visitID
		 */
		prescriptionList = patientDAOInf.retrievePrescriptionList(loginForm.getPatientID(), patientForm.getVisitID(),
				loginForm.getClinicID());

		InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

		diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());
		/*
		 * retrieving symptomCheck list by visitID
		 */
		symptomList = patientDAOInf.retrievesymptomCheckList(patientForm.getVisitID());

		complaintList = patientDAOInf.retrievecomplaintList(patientForm.getVisitID());

		historyList = patientDAOInf.retrieveMedicalHistoryList(loginForm.getPatientID());

		medicationList = patientDAOInf.retrieveCurrentMedicationList(loginForm.getPatientID());

		diagnoseList = configurationUtil.getDiagnoseList();

		request.setAttribute("apptID", patientForm.getAptID());

		drugList = configurationUtil.getTradeNameList();

		InvestigationList = configurationUtil.getInvestigationList();

		frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

		doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

		categoryList = configurationUtil.getCategoryList();

		hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

		// Inserting values into Audit table
		// daoInf.insertAudit(request.getRemoteAddr(), "Edit General Physician
		// Prescription",loginForm.getUserID());

		// System.out.println("Edit OPD JSP Page name for logged in user is ::: " +
		// formNameArray[1].trim());

		// Setting add opd page name value in pageName variable
		setPageName("viewGenericVisit.jsp");

		return SUCCESS;

	}

	// Common function for sending pdf in response
	public void handlePdfResponse(HttpServletResponse response, String filePath) {
		File pdfFile = new File(filePath);

		if (!pdfFile.exists()) {
			try {
				response.sendError(HttpServletResponse.SC_NOT_FOUND, "File not found");
			} catch (Exception e) {
				e.printStackTrace();
			}
			return;
		}

		try (FileInputStream fis = new FileInputStream(pdfFile); OutputStream os = response.getOutputStream()) {

			byte[] buffer = new byte[1024];
			int bytesRead;
			while ((bytesRead = fis.read(buffer)) != -1) {
				os.write(buffer, 0, bytesRead);
			}

			os.flush(); // Ensure all data is written out

		} catch (Exception e) {
			e.printStackTrace();
			try {
				response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, "Error reading file");
			} catch (Exception ex) {
				ex.printStackTrace();
			}
		}

		deleteFile(filePath);
	}

	// Common fuction for deleting pdf from local storage.
	private void deleteFile(String filePath) {
		File file = new File(filePath);
		if (file.exists()) {
			if (file.delete()) {
				System.out.println("File deleted successfully.");
			} else {
				System.out.println("Failed to delete the file.");
			}
		} else {
			System.out.println("File does not exist.");
		}
	}

	public void getVisitDetails() throws Exception {
		RegistrationDAOinf registrationDAOinf = new RegistrationDAOImpl();

		LoginForm loginForm = (LoginForm) session.get("USER");

		patientDAOInf = new PatientDAOImpl();

		LoginDAOInf daoInf = new LoginDAOImpl();

		ClinicDAOInf daoInf1 = new ClinicDAOImpl();

		ConvertToPDFUtil convertToPDFUtil = new ConvertToPDFUtil();

		String s3LogoFilePath = xmlUtil.getS3RDMLFilePath();

		String s3reportFilePath = xmlUtil.getS3RDMLReportFilePath();

		String bucketName = util.getS3BucketName();

		String username = patientDAOInf.retrieveUsernameBYuserID(loginForm.getUserID());

		String accessKey = xmlUtil.getAccessKey();

		String secreteKey = xmlUtil.getSecreteKey();

		ServletContext context = request.getServletContext();

		String realPath = context.getRealPath("/");

		String pdfOutFileName = "ViewOnly" + patientForm.getPatientID() + "_" + patientForm.getVisitID() + ".pdf";

		AWSCredentials credentials = new BasicAWSCredentials(accessKey, secreteKey);

		String bucketRegion = xmlUtil.getS3BucketRegion();

		AmazonS3 s3 = AmazonS3ClientBuilder.standard().withCredentials(new AWSStaticCredentialsProvider(credentials))
				.withRegion(bucketRegion).build();

		int visitTypeID = patientForm.getVisitTypeID();

		loginForm.setVisitTypeID(visitTypeID);

		String visitType = daoInf1.retrieveVisitTypeNameByID(loginForm.getVisitTypeID());

		String jspPageName = patientDAOInf.retrieveJSPPageNameByVisitTypeID(visitTypeID);

		int check = 0;
		int visitID = 0;

		loginForm.setOPDJSPName(jspPageName);

		session.put("USER", loginForm);

		String[] formNameArray = loginForm.getOPDJSPName().split("&");

		String CareType = patientDAOInf.retrieveCareType(loginForm.getVisitTypeID());

		JSONObject values = patientDAOInf.verifyVisitExistsForAppointment(patientForm.getPatientID(),
				patientForm.getAptID());

		JSONArray releaseArray = (JSONArray) values.get("Release");

		if (releaseArray != null && !releaseArray.isEmpty()) {

			JSONObject firstObject = (JSONObject) releaseArray.get(0);

			check = (int) firstObject.get("check");
			visitID = (int) firstObject.get("visitID");

		} else {

			System.out.println("No data found.");
		}

		if (check == 0) {

			response.setContentType("application/pdf");
			response.setContentLength(0);

			return;
		} else {
			if (CareType.equals("IPD")) {
				if (formNameArray[1].trim().equals("genaralClinicIPDEdit.jsp")) {

					message = convertToPDFUtil.convertGenaralIPDClinicVisitPDF(patientForm.getPatientID(), visitID,
							realPath, pdfOutFileName, patientForm.getClinicID(), patientForm.getPracticeID(), username,
							s3, s3LogoFilePath, bucketName);

				} else {

					message = convertToPDFUtil.convertIPDPDF(patientForm.getPatientID(), visitID, pdfOutFileName,
							realPath, s3, s3LogoFilePath, bucketName, null);

				}

				if (message.equalsIgnoreCase("success")) {
					String path = realPath + "/" + pdfOutFileName;

					response.setContentType("application/pdf");
					response.setHeader("Content-Disposition", "inline; filename=\"" + pdfOutFileName + "\"");

					File pdfFile = new File(path);
					if (!pdfFile.exists()) {
						response.sendError(HttpServletResponse.SC_NOT_FOUND, "File not found");
					}

					handlePdfResponse(response, path);
					return;
				}
			} else {
				if (formNameArray[1].trim().equals("generalOPDEdit.jsp")
						|| formNameArray[1].trim().equals("telephonicEdit.jsp")
						|| formNameArray[1].trim().equals("physicianOPDEdit.jsp")
						|| formNameArray[1].trim().equals("generalPhysicianOPDEdit.jsp")
						|| formNameArray[1].trim().equals("generalPhysicianGokhaleOPDEdit.jsp")) {

					message = convertToPDFUtil.convertGenPhyVisitPDF(patientForm.getPatientID(), visitID, realPath,
							pdfOutFileName, visitType, loginForm.getPracticeID(), username, s3, s3LogoFilePath,
							bucketName);

				} else if (formNameArray[1].trim().equals("generalHospitalOPDEdit.jsp")) {

					message = convertToPDFUtil.convertGeneralHospitalVisitPDF(patientForm.getPatientID(), visitID,
							realPath, pdfOutFileName, patientForm.getClinicID(), s3, s3LogoFilePath, bucketName);

				} else if (formNameArray[1].trim().equals("genaralClinicOPDEdit.jsp")) {

					message = convertToPDFUtil.convertGenaralClinicVisitPDF(patientForm.getPatientID(), visitID,
							realPath, pdfOutFileName, patientForm.getClinicID(), patientForm.getPracticeID(), username,
							s3, s3LogoFilePath, bucketName);

				} else if (formNameArray[1].trim().equals("mhatreLabOPDEdit.jsp")
						|| formNameArray[1].trim().equals("labOPDEdit.jsp")
						|| formNameArray[1].trim().equals("BDPOPDPackageEdit.jsp")) {

					message = convertToPDFUtil.convertLabReportPDF(patientForm.getPatientID(), visitID, realPath,
							pdfOutFileName, patientForm.getClinicID(), patientForm.getMdDoctorID(),
							patientForm.getPracticeID(), username, s3, s3LogoFilePath, bucketName);

				} else if (formNameArray[1].trim().equals("ctScanOPDEdit.jsp")
						|| formNameArray[1].trim().equals("xRayOPDEdit.jsp")
						|| formNameArray[1].trim().equals("usgOPDEdit.jsp")) {

					message = convertToPDFUtil.convertBDPReportPDF(patientForm.getPatientID(), visitID, realPath,
							pdfOutFileName, patientForm.getClinicID(), patientForm.getPracticeID(), username, s3,
							s3reportFilePath, bucketName);

				} else {

					if (visitType.equalsIgnoreCase("ophthalmology")) {

						System.out.printf("Visit type: %s", visitType);

						message = convertToPDFUtil.convertOphthalmOPDPDF(visitID, patientForm.getPatientID(),
								patientForm.getClinicID(), realPath, pdfOutFileName, visitType, s3, s3reportFilePath,
								bucketName, patientForm.getPracticeID(), username);
					} else {

						System.out.printf("Visit type: %s", visitType);

						message = convertToPDFUtil.convertOPDPDF(visitID, patientForm.getPatientID(),
								loginForm.getClinicID(), realPath, pdfOutFileName, visitType, s3, s3LogoFilePath,
								bucketName, null);
					}
				}

				if (message.equalsIgnoreCase("success")) {
					String path = realPath + "/" + pdfOutFileName;

					response.setContentType("application/pdf");
					response.setHeader("Content-Disposition", "inline; filename=\"" + pdfOutFileName + "\"");

					File pdfFile = new File(path);
					if (!pdfFile.exists()) {
						response.sendError(HttpServletResponse.SC_NOT_FOUND, "File not found");
					}

					handlePdfResponse(response, path);
					return;
				}
			}
		}
	}
	
	/**
	 * 
	 * @return String
	 * @throws Exception
	 */
	public String renderViewVisit() throws Exception {

		RegistrationDAOinf registrationDAOinf = new RegistrationDAOImpl();

		/*
		 * Getting user role from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");

		patientDAOInf = new PatientDAOImpl();

		LoginDAOInf daoInf = new LoginDAOImpl();

		ClinicDAOInf daoInf1 = new ClinicDAOImpl();

		ConvertToPDFUtil convertToPDFUtil = new ConvertToPDFUtil();

		String s3LogoFilePath = xmlUtil.getS3RDMLFilePath();

		String s3reportFilePath = xmlUtil.getS3RDMLReportFilePath();

		String bucketName = util.getS3BucketName();

		String username = patientDAOInf.retrieveUsernameBYuserID(loginForm.getUserID());

		String accessKey = xmlUtil.getAccessKey();

		String secreteKey = xmlUtil.getSecreteKey();

		AWSCredentials credentials = new BasicAWSCredentials(accessKey, secreteKey);

		String bucketRegion = xmlUtil.getS3BucketRegion();

		AmazonS3 s3 = AmazonS3ClientBuilder.standard().withCredentials(new AWSStaticCredentialsProvider(credentials))
				.withRegion(bucketRegion).build();

		PrescriptionManagementDAOInf managementDAOInf = new PrescriptionManagementDAOImpl();

		System.out.println("VISIT ID INSIDE RENDER::" + patientForm.getVisitID());
		System.out.println(
				"VISIT ID INSIDE RENDER::" + patientForm.getVisitID() + " patientid;" + patientForm.getPatientID());
		System.out.println("clinicid:" + loginForm.getClinicID() + " apttid;" + patientForm.getAptID() + " suffix::"
				+ loginForm.getClinicSuffix());

		// Retrieving visitTypeID based on visitID from Visit table
		int visitTypeID = patientDAOInf.retrieveVisitTypeIDByVisitID(patientForm.getVisitID());

		// setting visitTypeID into session
		loginForm.setVisitTypeID(visitTypeID);

		/*
		 * Retrieving jsp page name based on new visitTypeID
		 */
		String jspPageName = patientDAOInf.retrieveJSPPageNameByVisitTypeID(visitTypeID);

		/*
		 * Setting this retrieve jspPAgeName in OPDFormname variable into userForm
		 */
		loginForm.setOPDJSPName(jspPageName);

		session.put("USER", loginForm);

		/*
		 * Retrieving patientID from VisitID
		 */
		patientForm.setPatientID(patientDAOInf.retrievePatientIDByVisitID(patientForm.getVisitID()));
		System.out.println("patientidd:" + patientForm.getPatientID());

		// reteiving consultation charges from prescription table based on visitID
		String consltnCharges = String
				.valueOf(patientDAOInf.retrieveConsultationChargesFromPrescription(patientForm.getVisitID()));

		request.setAttribute("consltnCharges", consltnCharges);

		labTestValueListNew = configurationUtil.getLabInvestigationsValueList(patientForm.getVisitID());

		request.setAttribute("labTestValueListNew", labTestValueListNew);

		/*
		 * Getting form name to be display based on logged in User
		 */

		String[] formNameArray = loginForm.getOPDJSPName().split("&");

		System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[1].trim());

		String check1 = patientDAOInf.verifyReferralLetter(patientForm.getVisitID());
		System.out.println("check1 value in action:" + check1);
		request.setAttribute("referralLetterCheck", check1);

		String check = patientDAOInf.verifyMedicalCertificate(patientForm.getVisitID());
		System.out.println("check value in action:" + check);
		request.setAttribute("medicalCertiCheck", check);
		/*
		 * Getting careType name with VisitTypeID
		 */
		String CareType = patientDAOInf.retrieveCareType(loginForm.getVisitTypeID());

		/*
		 * Verifying whether visit exist for the patient or not, if not then disable
		 * View Last Visit button
		 */
		int patientVisitExistCheck = patientDAOInf.verifyVisitDetails(patientForm.getPatientID(),
				loginForm.getClinicID());

		String disableButtonCheck = "enable";
		if (patientVisitExistCheck == 0) {
			disableButtonCheck = "disable";
		}

		request.setAttribute("disableButtonCheck", disableButtonCheck);

		/*
		 * Retrieving patient age based on patientID
		 */
		String patientAge = patientDAOInf.retrievePatientAgeByPatientID(patientForm.getPatientID());

		request.setAttribute("patientAge", patientAge);

		/*
		 * retrieving patient gender based on patientID
		 */
		String patientGender = patientDAOInf.retrievePatientGenderByPatientID(patientForm.getPatientID());

		request.setAttribute("gender", patientGender);

		request.setAttribute("apptID", patientForm.getAptID());

		hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

		/*
		 * on the basis of careType name .jsp pages of CRF forms will be displayed
		 */
		if (CareType.equals("IPD")) {

			if (formNameArray[1].trim().equals("generalHospitalIPDEdit.jsp")) {
				System.out.println("Inside GeneralHospital ipd edit" + patientForm.getPatientID() + ".."
						+ loginForm.getClinicID() + ".." + patientForm.getVisitID());
				patientList = patientDAOInf.retrieveIPDPatientDetails(patientForm.getPatientID(),
						loginForm.getClinicID(), patientForm.getVisitID());
			} else if (formNameArray[1].trim().equals("genaralClinicIPDEdit.jsp")) {
				/*
				 * retrieving patientList which contains visit details
				 */

				patientList = patientDAOInf.retrieveGenaralClinicPatientDetailsForIPDVisit(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID());

				boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

				if (visitCheck) {

					billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
				} else {
					billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
							loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
				}
				/* Retrieve labReport List */
				labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
						loginForm.getClinicID());

				complaintList = patientDAOInf.retrievecomplaintList(patientForm.getVisitID());

				String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
				request.setAttribute("paymentType", paymentType);

				/* Retrieve labReport List */
				labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
						loginForm.getClinicID());

				String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

				request.setAttribute("medicalCertiText", medicatCertificate);

				String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

				request.setAttribute("referralLetter", referralLetter);

				hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());
				/*
				 * retrieving prescription list by visitID
				 */
				prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID());

				InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

				diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());

				InvestigationList = configurationUtil.getInvestigationList();

				diagnoseList = configurationUtil.getDiagnoseList();

				request.setAttribute("apptID", patientForm.getAptID());

				frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

			} else {
				String buttonValue = request.getParameter("buttonValue");

				System.out.printf("buttonValue: %s%n", buttonValue);

				if (buttonValue != null && !buttonValue.equalsIgnoreCase("null")) {
					if (buttonValue.equalsIgnoreCase("view")) {
						String pdfOutFileName = "ViewOnly" + patientForm.getPatientID() + "_" + patientForm.getVisitID()
								+ ".pdf";

						String visitType = daoInf1.retrieveVisitTypeNameByID(loginForm.getVisitTypeID());

						ServletContext context = request.getServletContext();
						String realPath = context.getRealPath("/");

						message = convertToPDFUtil.convertIPDPDF(patientForm.getPatientID(), patientForm.getVisitID(),
								pdfOutFileName, realPath, s3, s3LogoFilePath, bucketName, null);

						String path = realPath + "/" + pdfOutFileName;

						if (message.equalsIgnoreCase("success")) {
							response.setContentType("application/pdf");
							response.setHeader("Content-Disposition", "inline; filename=\"" + pdfOutFileName + "\"");

							File pdfFile = new File(path);
							if (!pdfFile.exists()) {
								response.sendError(HttpServletResponse.SC_NOT_FOUND, "File not found");
							}

							try (FileInputStream fis = new FileInputStream(pdfFile);
									OutputStream os1 = response.getOutputStream()) {

								byte[] buffer = new byte[1024];
								int bytesRead;
								while ((bytesRead = fis.read(buffer)) != -1) {
									os1.write(buffer, 0, bytesRead);
								}

								os1.flush(); // Ensure all data is written out

							} catch (Exception e) {
								// Log and handle the exception
								e.printStackTrace();
								response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, "Error reading file");
							}

							// Attempt to delete the file
							File file = new File(path);
							if (file.exists()) {
								if (file.delete()) {
									System.out.println("File deleted successfully.");
								} else {
									System.out.println("Failed to delete the file.");
								}
							} else {
								System.out.println("File does not exist.");
							}

							return SUCCESS;
						}
					}
				}

				patientList = patientDAOInf.retireveLastEneteredIPDVisit(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID());
			}
			// retrieving room type from Visit table based on last visitID
			int roomTypeID = patientDAOInf.retrieveRoomTypeByVisitID(patientForm.getVisitID());

			request.setAttribute("roomTypeID", roomTypeID);

			// retrieving IPD Tariff charge list by visitID
			IPDTariffChargeList = patientDAOInf.retrieveIPDChargesByVisitID(patientForm.getVisitID(),
					ActivityStatus.TARIFF);

			// retrieving IPD consultant charge list by visitID
			IPDConsultantChargeList = patientDAOInf.retrieveIPDChargesByVisitID(patientForm.getVisitID(),
					ActivityStatus.CONSULTANT);

			// retrieving OT charge list based on visitID
			OTChargeList = patientDAOInf.retrieveOTChargesByVisitID(patientForm.getVisitID());

			// check isDischarge of visit type, if its 1 then only retrieving charges
			// details for billing
			boolean isDischarge = patientDAOInf.verifyIPDDischargeVisitType(loginForm.getVisitTypeID());

			if (isDischarge) {

				// retrieving patient's last new visit ID
				int newVisitID = patientDAOInf.retrieveNewVisitRef(patientForm.getVisitID());

				// verify whether Receipt exists for the current visitID if so then retrieving
				// details from Transaction and receipt table else retrieving details from
				// IPDCharges and OTCharges tbale
				boolean receiptExists = patientDAOInf.verifyVisitExists("Receipt", newVisitID);

				if (receiptExists) {

					String paymentType = patientDAOInf.retrievePaymentType(newVisitID);

					request.setAttribute("paymentType", paymentType);

					billList = patientDAOInf.retrieveVisitBillingByVisitID(newVisitID);

					// retrieving ipd tariff charges list based newVisitID
					IPDBillTariffChargeList = patientDAOInf.retrieveIPDTransactionsByVisitID(newVisitID,
							ActivityStatus.TARIFF);

					// retrieving ipd consultant charges list based newVisitID
					IPDBillConsultantChargeList = patientDAOInf.retrieveIPDTransactionsByVisitID(newVisitID,
							ActivityStatus.CONSULTANT);

					// retrieving OT charges list based on newVisitID
					OTBillChargeList = patientDAOInf.retrieveIPDTransactionsByVisitID(newVisitID, ActivityStatus.OT);

				} else {

					// retrieving ipd tariff charges list based newVisitID
					IPDBillTariffChargeList = patientDAOInf.retrieveIPDChargesDetailsByNewVisitID(newVisitID,
							ActivityStatus.TARIFF);

					// retrieving ipd consultant charges list based newVisitID
					IPDBillConsultantChargeList = patientDAOInf.retrieveIPDChargesDetailsByNewVisitID(newVisitID,
							ActivityStatus.CONSULTANT);

					// retrieving OT charges list based on newVisitID
					OTBillChargeList = patientDAOInf.retrieveOTChargesDetailsByNewVisitID(newVisitID);

					// retrieving receipt details i.e., receipt no receipt date , total amount, net
					// amount, advance paytment, emrgency charges, balance payment
					billList = patientDAOInf.retrieveIPDBillCharges(loginForm.getVisitTypeID(), loginForm.getClinicID(),
							loginForm.getClinicSuffix(), newVisitID);

				}

			}

			String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
			request.setAttribute("paymentType", paymentType);

			orthoBillItemList = patientDAOInf.retrieveOrthoBillingItemList(patientForm.getVisitID());

			boolean hasConsent = patientDAOInf.verifyhasConsentValue(loginForm.getVisitTypeID());

			if (hasConsent) {

				String consentDocFileName = patientDAOInf.retrieveConsentDocFileName(loginForm.getVisitTypeID());

				request.setAttribute("consentDocFileName", consentDocFileName);
			}

			boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

			if (visitCheck) {

				billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
			} else {
				billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
						loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
			}

			/*
			 * retrieving prescription list by visitID
			 */
			prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID());

			InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

			diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());

			request.setAttribute("consentDocFile", "Yes");

			String lastEneteredVisitList = "success";

			request.setAttribute("lastEneteredVisitList", lastEneteredVisitList);

			String dummy = "success";

			request.setAttribute("lasteEnteredVisitList", dummy);

			String ipdVisitPage = "display";

			request.setAttribute("display", ipdVisitPage);

			String updateCheck = "update";

			request.setAttribute("updateCheck", updateCheck);

			request.setAttribute("consentText", "success");

			symptomList = patientDAOInf.retrievesymptomCheckList(patientForm.getVisitID());

			complaintList = patientDAOInf.retrievecomplaintList(patientForm.getVisitID());

			historyList = patientDAOInf.retrieveMedicalHistoryList(patientForm.getPatientID());

			medicationList = patientDAOInf.retrieveCurrentMedicationList(patientForm.getPatientID());

			LabInvastigationList = patientDAOInf.reytrieveLabInvastigationLstByVisitID(patientForm.getVisitID());

			request.setAttribute("LabInvastigationList", LabInvastigationList);

			IPDComplaintsList = patientDAOInf.retrieveIPDComplaintsList(patientForm.getVisitID());

			diagnoseList = configurationUtil.getDiagnoseList();

			categoryList = configurationUtil.getCategoryList();

			int productID = patientDAOInf.retrieveProductID(patientForm.getVisitID());

			request.setAttribute("productID", productID);

			// Inserting into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Edit IPD Visit", loginForm.getUserID());

			// Setting add ipd page name value in pageName variable
			setPageName(formNameArray[1].trim());

			return SUCCESS;

		} else {

			if (formNameArray[1].trim().equals("generalOPDEdit.jsp")
					|| formNameArray[1].trim().equals("telephonicEdit.jsp")
					|| formNameArray[1].trim().equals("physicianOPDEdit.jsp")
					|| formNameArray[1].trim().equals("generalPhysicianOPDEdit.jsp")
					|| formNameArray[1].trim().equals("generalPhysicianGokhaleOPDEdit.jsp")) {

				String buttonValue = request.getParameter("buttonValue");

				System.out.printf("buttonValue: %s%n", request.getParameter("buttonValue"));

				if (buttonValue != null && !buttonValue.equalsIgnoreCase("null")) {
					if (buttonValue.equalsIgnoreCase("view")) {
						String pdfOutFIleName = "View" + "Only" + patientForm.getPatientID() + "_"
								+ patientForm.getVisitID() + ".pdf";

						String visitType = daoInf1.retrieveVisitTypeNameByID(loginForm.getVisitTypeID());

						ServletContext context = request.getServletContext();

						String realPath = context.getRealPath("/");

						message = convertToPDFUtil.convertGenPhyVisitPDF(patientForm.getPatientID(),
								patientForm.getVisitID(), realPath, pdfOutFIleName, visitType,
								loginForm.getPracticeID(), username, s3, s3LogoFilePath, bucketName);
						String path = realPath + "/" + pdfOutFIleName;

						if (message.equalsIgnoreCase("success")) {
							response.setContentType("application/pdf");
							response.setHeader("Content-Disposition", "inline; filename=\"" + pdfOutFIleName + "\"");

							File pdfFile = new File(path);
							if (!pdfFile.exists()) {
								response.sendError(HttpServletResponse.SC_NOT_FOUND, "File not found");
							}

							try (FileInputStream fis = new FileInputStream(pdfFile);
									OutputStream os1 = response.getOutputStream()) {

								byte[] buffer = new byte[1024];
								int bytesRead;
								while ((bytesRead = fis.read(buffer)) != -1) {
									os1.write(buffer, 0, bytesRead);
								}

								os1.flush(); // Ensure all data is written out
								os1.close();

							} catch (Exception e) {
								// Log and handle the exception
								e.printStackTrace();
								response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, "Error reading file");
							}

							File file = new File(path);

							// Check if the file exists
							if (file.exists()) {
								// Attempt to delete the file
								if (file.delete()) {
									System.out.println("File deleted successfully.");
								} else {
									System.out.println("Failed to delete the file.");
								}
							} else {
								System.out.println("File does not exist.");
							}
							return SUCCESS;
						}
					}
				}

				orthoBillItemList = patientDAOInf.retrieveOrthoBillingItemList(patientForm.getVisitID());

				/*
				 * retrieving patientList which contains visit details
				 */

				patientList = patientDAOInf.retrieveDefaultPatientDetails(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID(), patientForm.getAptID(),
						loginForm.getVisitTypeID());

				boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

				if (visitCheck) {
					billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
				} else {
					billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
							loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
				}

				/* Retrieve labReport List */
				labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
						loginForm.getClinicID());

				String dummy = "success";

				request.setAttribute("lasteEnteredVisitList", dummy);

				String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
				request.setAttribute("paymentType", paymentType);

				String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

				request.setAttribute("medicalCertiText", medicatCertificate);

				String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

				request.setAttribute("referralLetter", referralLetter);
				/*
				 * retrieving prescription list by visitID
				 */
				prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID());

				InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

				diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());
				/*
				 * retrieving symptomCheck list by visitID
				 */
				symptomList = patientDAOInf.retrievesymptomCheckList(patientForm.getVisitID());

				complaintList = patientDAOInf.retrievecomplaintList(patientForm.getVisitID());

				historyList = patientDAOInf.retrieveMedicalHistoryList(patientForm.getPatientID());

				medicationList = patientDAOInf.retrieveCurrentMedicationList(patientForm.getPatientID());

				// Checking if the CRF form is for Gokhale clinic, if so then load the diagnosis
				// from the json file else load the diagnosis from the PVDiagnosis table
				if (formNameArray[1].trim().equals("generalPhysicianGokhaleOPDEdit.jsp")) {

					// Retrieving diagnosis list for the last visit ID
					orthoDiagnosisList = patientDAOInf.retrieveOrthoDiagnosisList(patientForm.getVisitID());

					HttpServletRequest request = ServletActionContext.getRequest();

					ServletContext context = request.getServletContext();

					String realPath = context.getRealPath("/");

					JSONParser parser = new JSONParser();

					JSONArray diagnosisJSON = (JSONArray) parser
							.parse(new FileReader(realPath + File.separator + "ortho_charges.json"));

					for (Object jsonData : diagnosisJSON) {
						JSONObject data = (JSONObject) jsonData;

						diagnoseList.put((String) data.get("rate"), (String) data.get("diagnosis"));
					}

				}
				diagnoseList = configurationUtil.getDiagnoseList();

				drugList = configurationUtil.getTradeNameList();

				InvestigationList = configurationUtil.getInvestigationList();

				frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

				doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

				categoryList = configurationUtil.getCategoryList();

				hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

				// Inserting values into Audit table
				daoInf.insertAudit(request.getRemoteAddr(), "Edit General Physician Prescription",
						loginForm.getUserID());

				System.out.println("Edit OPD JSP Page name for logged in user is ::: " + formNameArray[1].trim());

				// Setting add opd page name value in pageName variable
				setPageName(formNameArray[1].trim());

				return SUCCESS;

			} else if (formNameArray[1].trim().equals("generalHospitalOPDEdit.jsp")) {

				request.setAttribute("apptID", patientForm.getAptID());

				patientList = patientDAOInf.retrieveGeneralHospitalPatientDetailsForExistiongVisit(
						patientForm.getPatientID(), patientForm.getVisitID(), loginForm.getClinicID());

				boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

				if (visitCheck) {
					billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
				} else {
					billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
							loginForm.getClinicID(), loginForm.getClinicSuffix());
				}

				String dummy = "success";

				request.setAttribute("lasteEnteredVisitList", dummy);

				OPDChargesList = managementDAOInf.retrieveAllOPDCharges(loginForm.getPracticeID());
				request.setAttribute("OPDChargesList", OPDChargesList);

				String ChargesDetails = managementDAOInf.retrieveOPDChargesDetailsByReceiptID(patientForm.getVisitID());
				request.setAttribute("ChargesDetails", ChargesDetails);

				LabTestList = managementDAOInf.retrieveAllLabTests(loginForm.getPracticeID());
				request.setAttribute("LabTestList", LabTestList);

				String InvestigationDetails = managementDAOInf
						.retrieveInvestigationDetailsByVisitID(patientForm.getVisitID());
				request.setAttribute("InvestigationDetails", InvestigationDetails);

				String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
				request.setAttribute("paymentType", paymentType);

				// retrieving present complaint list for last visit of patient
				String complaintList = patientDAOInf.retrievePresentComplaintsOfLastVisit(patientForm.getVisitID());
				request.setAttribute("complaintList", complaintList);

				PVComplaints = patientDAOInf.getPVComplaints();

				String categoryList = patientDAOInf.retrieveCategoryListOfLastVisit(patientForm.getVisitID());
				request.setAttribute("categoryList", categoryList);

				MedicalHistory = patientDAOInf.retrievemedicalHistoryListOfLastVisit(patientForm,
						patientForm.getPatientID());
				request.setAttribute("MedicalHistory", MedicalHistory);

				FamilyHistory = patientDAOInf.retrieveFamilyHistoryListOfLastVisit(patientForm,
						patientForm.getPatientID());
				request.setAttribute("FamilyHistory", FamilyHistory);

				PersonalHistory = patientDAOInf.retrievePersonalHistoryListOfLastVisit(patientForm,
						patientForm.getPatientID());
				request.setAttribute("PersonalHistory", PersonalHistory);

				otherInvstigationList = patientDAOInf.retrieveOtherFindingsListByVisitID(patientForm.getVisitID());

				onEaminationList = patientDAOInf.retrieveOnExaminationListByVisitID(patientForm.getVisitID());
				request.setAttribute("onEaminationList", onEaminationList);

				/* Retrieve labReport List */
				labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
						loginForm.getClinicID());

				vitalSignsList = patientDAOInf.retrieveVitalSignsListByVisitID(patientForm.getVisitID());

				InjectionPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
						patientForm.getVisitID(), "Injection");
				InjectionList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Injection");

				TabletPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
						patientForm.getVisitID(), "Tablet");
				TabletList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Tablet");

				LiquidPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
						patientForm.getVisitID(), "Liquid");
				LiquidList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Liquid");

				DiagnosisList = configurationUtil.getDiagnosisList();

				String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

				request.setAttribute("medicalCertiText", medicatCertificate);

				String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

				request.setAttribute("referralLetter", referralLetter);

				drugList = configurationUtil.getTradeNameList();

				frequencyList = configurationUtil.getFrequencyList();

				// chargeTypeList = configurationUtil.getChargeTypeList();

				doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

				hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());
				// Setting add opd page name value in pageName variable
				setPageName(formNameArray[1].trim());

				return SUCCESS;

			} else if (formNameArray[1].trim().equals("genaralClinicOPDEdit.jsp")) {

				request.setAttribute("apptID", patientForm.getAptID());

				patientList = patientDAOInf.retrieveGeneralClinicPatientDetails(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID());

				boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

				if (visitCheck) {
					billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
				} else {
					billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
							loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
				}

				String dummy = "success";

				request.setAttribute("lasteEnteredVisitList", dummy);

				/* Retrieve labReport List */
				labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
						loginForm.getClinicID());

				String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
				request.setAttribute("paymentType", paymentType);

				String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

				request.setAttribute("medicalCertiText", medicatCertificate);

				String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

				request.setAttribute("referralLetter", referralLetter);

				complaintList = patientDAOInf.retrievecomplaintList(patientForm.getVisitID());

				historyList = patientDAOInf.retrieveMedicalHistoryList(patientForm.getPatientID());

				medicationList = patientDAOInf.retrieveCurrentMedicationList(patientForm.getPatientID());

				hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());
				/*
				 * retrieving prescription list by visitID
				 */
				prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID());

				InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

				InvestigationList = configurationUtil.getInvestigationList();

				diagnoseList = configurationUtil.getDiagnoseList();

				frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

				// Setting add opd page name value in pageName variable
				setPageName(formNameArray[1].trim());

				return SUCCESS;

			} else if (formNameArray[1].trim().equals("mhatreLabOPDEdit.jsp")
					|| formNameArray[1].trim().equals("labOPDEdit.jsp")
					|| formNameArray[1].trim().equals("BDPOPDPackageEdit.jsp")) {

				String buttonValue = request.getParameter("buttonValue");

				testTypeList = patientDAOInf.retrieveTestTypeForVisitByVisitID(patientForm.getVisitID());

				reportListByVisitID.put(2, "Lab Test Report");

				for (String testTypeValue : testTypeList) {
					String[] testTypeArray = testTypeValue.split("==");

					String testType = testTypeArray[1];
					int investigationID = Integer.parseInt(testTypeArray[0]);
					String test = testTypeArray[2];

					if (testType.equalsIgnoreCase("USG") || testType.equalsIgnoreCase("CTScan")
							|| testType.equalsIgnoreCase("XRay")) {
						reportListByVisitID.put(investigationID, test);
					}

				}

				System.out.printf("buttonValue: %s%n", request.getParameter("buttonValue"));

				if (buttonValue != null && !buttonValue.equalsIgnoreCase("null")) {
					if (buttonValue.equalsIgnoreCase("view")) {
						String pdfOutFIleName = "View" + "Only" + patientForm.getPatientID() + "_"
								+ patientForm.getVisitID() + ".pdf";

						String visitType = daoInf1.retrieveVisitTypeNameByID(loginForm.getVisitTypeID());

						ServletContext context = request.getServletContext();

						String realPath = context.getRealPath("/");

						message = convertToPDFUtil.convertLabReportPDF(patientForm.getPatientID(),
								patientForm.getVisitID(), realPath, pdfOutFIleName, patientForm.getClinicID(),
								patientForm.getMdDoctorID(), patientForm.getPracticeID(), username, s3, s3LogoFilePath,
								bucketName);
						String path = realPath + "/" + pdfOutFIleName;

						if (message.equalsIgnoreCase("success")) {
							response.setContentType("application/pdf");
							response.setHeader("Content-Disposition", "inline; filename=\"" + pdfOutFIleName + "\"");

							File pdfFile = new File(path);
							if (!pdfFile.exists()) {
								response.sendError(HttpServletResponse.SC_NOT_FOUND, "File not found");
							}

							try (FileInputStream fis = new FileInputStream(pdfFile);
									OutputStream os1 = response.getOutputStream()) {

								byte[] buffer = new byte[1024];
								int bytesRead;
								while ((bytesRead = fis.read(buffer)) != -1) {
									os1.write(buffer, 0, bytesRead);
								}

								os1.flush(); // Ensure all data is written out
								os1.close();

							} catch (Exception e) {
								// Log and handle the exception
								e.printStackTrace();
								response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, "Error reading file");
							}

							File file = new File(path);

							// Check if the file exists
							if (file.exists()) {
								// Attempt to delete the file
								if (file.delete()) {
									System.out.println("File deleted successfully.");
								} else {
									System.out.println("Failed to delete the file.");
								}
							} else {
								System.out.println("File does not exist.");
							}
							return SUCCESS;
						}
					}
				}

				String paymentType = patientDAOInf.retrievePaymentType(patientForm.getVisitID());

				request.setAttribute("paymentType", paymentType);

				boolean resultCheck = patientDAOInf.verifyResultAddedForVisit(patientForm.getVisitID());

				request.setAttribute("resultCheck", resultCheck);

				patientList = patientDAOInf.retrieveLabPatientDetails(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID(), patientForm.getAptID());

				mdDetailsList = configurationUtil.getMDDoctorList(loginForm.getPracticeID());

				labTestValueListNew = configurationUtil.getLabInvestigationsValueList(patientForm.getVisitID());

				request.setAttribute("labTestValueListNew", labTestValueListNew);

				labTestValueListNew1 = configurationUtil.getLabInvestigationsValueList1(patientForm.getVisitID());

				request.setAttribute("labTestValueListNew1", labTestValueListNew1);

				billList = patientDAOInf.retrieveBillDetail(patientForm.getVisitID(), loginForm.getVisitTypeID(),
						loginForm.getClinicID(), loginForm.getClinicSuffix());

				testTypeList = patientDAOInf.retrieveTestTypeForVisitByVisitID(patientForm.getVisitID());

				request.setAttribute("testTypeList", testTypeList);

				// verify whether receipt added for the current visitID if yes then retrieve the
				// details from Transctions tables else retrive the details from the
				// LabInvestigation tables for the corresponding visitID based on isGroup check
				boolean billCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

				if (billCheck) {

					System.out.println("billCheck: " + billCheck);
					request.setAttribute("billCheck", "true");

					prescriptionList = patientDAOInf.retrieveTransactionListByVisitID(patientForm.getVisitID());
				} else {

					request.setAttribute("billCheck", "false");

					prescriptionList = patientDAOInf.retrieveTransactionDetailsByVisitID(patientForm.getVisitID());

					groupTestList = patientDAOInf
							.retrieveTransactionDetailsForGroupTestByVisitID(patientForm.getVisitID());
				}

				reportList = configurationUtil.getRepostList(loginForm.getVisitTypeID());

				labTestListNew = patientDAOInf.retrieveExistingLabTestByVisitID(patientForm.getVisitID());

				subGroups = patientDAOInf.manupulateSubGroupData(labTestListNew, loginForm);
				
				request.setAttribute("subGroups", subGroups);

				request.setAttribute("labTestList", labTestListNew);

				String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

				request.setAttribute("medicalCertiText", medicatCertificate);

				String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

				request.setAttribute("referralLetter", referralLetter);

				genderMap.put("Male", "normalValues");
				genderMap.put("Female", "normalValuesWomen");
				genderMap.put("Child", "normalValuesChild");

				diagnoseList = configurationUtil.getDiagnoseList();

				getGroupTestList = configurationUtil.getGroupTestList(loginForm.getPracticeID(),
						genderMap.get(patientGender));
				getSingleTestList = configurationUtil.getSingleTestList(loginForm.getPracticeID(),
						genderMap.get(patientGender));

				referringDoctorList = configurationUtil.getReferringDoctorList1(loginForm.getPracticeID());
				refDocList = configurationUtil.getRefDocList(loginForm.getPracticeID());

				doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

				doctorList1 = configurationUtil.getDoctorList(loginForm.getPracticeID());

				// Setting add opd page name value in pageName variable
				setPageName(formNameArray[1].trim());

				return SUCCESS;

			} else if (formNameArray[1].trim().equals("ctScanOPDEdit.jsp")
					|| formNameArray[1].trim().equals("xRayOPDEdit.jsp")
					|| formNameArray[1].trim().equals("usgOPDEdit.jsp")) {
				String visitType = daoInf1.retrieveVisitTypeNameByID(loginForm.getVisitTypeID());
				patientList = patientDAOInf.retrieveLastEnteredVisitDetail(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID(), visitType);

				doctorList1 = configurationUtil.getDoctorList(loginForm.getPracticeID());

				referringDoctorList = configurationUtil.getReferringDoctorList1(loginForm.getPracticeID());

				reportList = configurationUtil.getRepostList(patientForm.getVisitTypeID());

				labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
						loginForm.getClinicID());

				String Template = patientDAOInf.retrieveTemplate(patientForm.getVisitID());

				request.setAttribute("Template", Template);

				int clinicianID = patientDAOInf.retrieveclinicianID(patientForm.getVisitID());

				request.setAttribute("clinicianID", clinicianID);

				int reportID = patientDAOInf.retrieveReportID(patientForm.getVisitID());

				request.setAttribute("reportID", reportID);

				String paymentType = patientDAOInf.retrievePaymentType(patientForm.getVisitID());
				System.out.println("age of son ::# " + patientForm.getSonAge());
				request.setAttribute("paymentType", paymentType);
				request.setAttribute("sonAge", patientDAOInf.getSonAge(patientForm.getVisitID()));
				request.setAttribute("daughterAge", patientDAOInf.getDaughterAge(patientForm.getVisitID()));
				boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

				if (visitCheck) {
					billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
				} else {
					billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
							loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
				}

				setPageName(formNameArray[1].trim());
				return SUCCESS;
			} else {
				System.out.println("else loop edit:::");

				orthoBillItemList = patientDAOInf.retrieveOrthoBillingItemList(patientForm.getVisitID());

				String visitType = daoInf1.retrieveVisitTypeNameByID(loginForm.getVisitTypeID());
				System.out.println("visitype is ::" + visitType);

				String buttonValue = request.getParameter("buttonValue");

				if (buttonValue != null && !buttonValue.equalsIgnoreCase("null")) {
					String pdfOutFIleName = "View" + "Only" + patientForm.getPatientID() + "_"
							+ patientForm.getVisitID() + ".pdf";

					ServletContext context = request.getServletContext();

					String realPath = context.getRealPath("/");
					if (buttonValue.equalsIgnoreCase("view")) {
						if (visitType.equalsIgnoreCase("ophthalmology")) {
							System.out.printf("buttonValue: %s%n", request.getParameter("buttonValue"));
							System.out.printf("Visit type: %s", visitType);

							message = convertToPDFUtil.convertOphthalmOPDPDF(patientForm.getVisitID(),
									patientForm.getPatientID(), patientForm.getClinicID(), realPath, pdfOutFIleName,
									visitType, s3, s3reportFilePath, bucketName, patientForm.getPracticeID(), username);
						} else {
							System.out.printf("buttonValue: %s%n", request.getParameter("buttonValue"));
							System.out.printf("Visit type: %s", visitType);

							message = convertToPDFUtil.convertOPDPDF(patientForm.getVisitID(),
									patientForm.getPatientID(), loginForm.getClinicID(), realPath, pdfOutFIleName,
									visitType, s3, s3LogoFilePath, bucketName, null);
						}
					}
					if (message.equalsIgnoreCase("success")) {
						String path = realPath + "/" + pdfOutFIleName;
						response.setContentType("application/pdf");
						response.setHeader("Content-Disposition", "inline; filename=\"" + pdfOutFIleName + "\"");

						File pdfFile = new File(path);
						if (!pdfFile.exists()) {
							response.sendError(HttpServletResponse.SC_NOT_FOUND, "File not found");
						}

						try (FileInputStream fis = new FileInputStream(pdfFile);
								OutputStream os1 = response.getOutputStream()) {

							byte[] buffer = new byte[1024];
							int bytesRead;
							while ((bytesRead = fis.read(buffer)) != -1) {
								os1.write(buffer, 0, bytesRead);
							}

							os1.flush(); // Ensure all data is written out
							os1.close();

						} catch (Exception e) {
							// Log and handle the exception
							e.printStackTrace();
							response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, "Error reading file");
						}

						File file = new File(path);

						// Check if the file exists
						if (file.exists()) {
							// Attempt to delete the file
							if (file.delete()) {
								System.out.println("File deleted successfully.");
							} else {
								System.out.println("Failed to delete the file.");
							}
						} else {
							System.out.println("File does not exist.");
						}
						return SUCCESS;
					}
				}

				patientList = patientDAOInf.retrieveLastEnteredVisitDetail(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID(), visitType);

				boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

				System.out.println("Details: " + visitCheck + " patientDetails: " + patientList);

				if (visitCheck) {
					billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
				} else {
					billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
							loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
				}

				/* Retrieve labReport List */
				labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
						loginForm.getClinicID());

				request.setAttribute("apptID", patientForm.getAptID());

				System.out.println("billList: " + billList);

				/*
				 * retrieving prescription list by visitID
				 */
				prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
						patientForm.getVisitID());

				InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

				diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());

				proceduresList = patientDAOInf.retrieveProceduresList(patientForm.getVisitID());

				String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
				request.setAttribute("paymentType", paymentType);

				String dummy = "success";

				request.setAttribute("lasteEnteredVisitList", dummy);

				request.setAttribute("lasteEnteredPrescList", dummy);

				String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

				request.setAttribute("medicalCertiText", medicatCertificate);

				String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

				request.setAttribute("referralLetter", referralLetter);

				doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

				diagnoseList = configurationUtil.getDiagnoseList();

				resayuDiagnosisList = configurationUtil.getDiagnoseList();

				resayuDiagnosisList.put("Other", "Other");

				drugList = configurationUtil.getTradeNameList();

				InvestigationList = configurationUtil.getInvestigationList();

				DiagnosticList1 = configurationUtil.getDiagnosticList1();

				ProcedureList = configurationUtil.getProceduresList();

				refDocList = configurationUtil.getRefDocList(loginForm.getPracticeID());

				frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

				categoryList = configurationUtil.getCategoryList();

				// Inserting values into Audit table
				daoInf.insertAudit(request.getRemoteAddr(), "Edit OPD Visit", loginForm.getUserID());

				// Setting add opd page name value in pageName variable
				setPageName(formNameArray[1].trim());
				System.out.println("from name is" + formNameArray[1]);
				return SUCCESS;
			}
		}
	}

	/**
	 * 
	 * @return String
	 * @throws Exception
	 */
	public String renderViewVisitList() throws Exception {
		patientDAOInf = new PatientDAOImpl();
		patientList = null;

		/*
		 * Getting clinicID from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");

		System.out.println("..." + loginForm.getOPDJSPName());

		/*
		 * Retrieving patient full name based on patient ID
		 */
		String patientName = patientDAOInf.retrievePatientFullName(patientForm.getPatientID());

		/*
		 * Retrieving patient's visit details
		 */
		patientList = patientDAOInf.retrievePatientVisitDetail(patientForm.getPatientID(), loginForm.getClinicID());

		patientName += "("
				+ patientDAOInf.retrieveClinicRegNoByClinicID(loginForm.getClinicID(), patientForm.getPatientID())
				+ ")";

		if (patientForm.getVisitID() != 0) {
			String patientFNameLName = patientDAOInf.retrievePatientFirstLastNameByID(patientForm.getPatientID())
					.replaceAll(" ", "");

			String pdfOutFIleName = patientFNameLName + patientForm.getPatientID() + "_" + patientForm.getVisitID()
					+ "_bill.pdf";

			request.setAttribute("PDFOutFileName", pdfOutFIleName);
		}

		/*
		 * Setting patient name into request in order to display it on view existing
		 * list page
		 */
		request.setAttribute("patientName", patientName);

		return SUCCESS;

	}

	public String editSurvey() throws Exception {
		patientDAOInf = new PatientDAOImpl();

		serviceInf = new eDhanvantariServiceImpl();

		/*
		 * Getting user role from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");

		message = serviceInf.editSurvey(patientForm);
		if (message.equalsIgnoreCase("success")) {
			addActionMessage("Successfully updated Survey details.");

			/*
			 * Getting form name to be display based on logged in User
			 */
			String[] formNameArray = loginForm.getOPDJSPName().split("&");

			System.out.println("Edit OPD JSP Page name for logged in user is ::: " + formNameArray[1].trim());

			// Setting Edit opd page name value in pageName variable
			setPageName(formNameArray[1].trim());

			return SUCCESS;
		} else {
			addActionError("Failed to update Survey details. Please check logs for more details.");

			/*
			 * Getting form name to be display based on logged in User
			 */
			String[] formNameArray = loginForm.getOPDJSPName().split("&");

			System.out.println("Edit OPD JSP Page name for logged in user is ::: " + formNameArray[1].trim());

			// Setting Edit opd page name value in pageName variable
			setPageName(formNameArray[1].trim());

			return ERROR;
		}
	}

	/**
	 * 
	 * @return String
	 * @throws Exception
	 */
	public String editVisit() throws Exception {
		patientDAOInf = new PatientDAOImpl();

		serviceInf = new eDhanvantariServiceImpl();

		LoginDAOInf daoInf = new LoginDAOImpl();

		RegistrationDAOinf registrationDAOinf = new RegistrationDAOImpl();
		PrescriptionManagementDAOInf managementDAOInf = new PrescriptionManagementDAOImpl();

		/*
		 * Getting user role from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");

		String check1 = patientDAOInf.verifyReferralLetter(patientForm.getVisitID());
		System.out.println("check1 value in action:" + check1);
		request.setAttribute("referralLetterCheck", check1);

		String check = patientDAOInf.verifyMedicalCertificate(patientForm.getVisitID());
		System.out.println("check value in action:" + check);
		request.setAttribute("medicalCertiCheck", check);

		String[] formNameArray = loginForm.getOPDJSPName().split("&");

		message = serviceInf.editGenPhyVisit(patientForm);

		if (message.equalsIgnoreCase("success")) {
			addActionMessage("Successfully updated Visit details.");

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Edit General Physician Visit", loginForm.getUserID());

			/*
			 * Verifying whether visit exist for the patient or not, if not then disable
			 * View Last Visit button
			 */
			int patientVisitExistCheck = patientDAOInf.verifyVisitDetails(patientForm.getPatientID(),
					loginForm.getClinicID());

			String disableButtonCheck = "enable";
			if (patientVisitExistCheck == 0) {
				disableButtonCheck = "disable";
			}

			request.setAttribute("disableButtonCheck", disableButtonCheck);

			/*
			 * Retrieving patient age based on patientID
			 */
			String patientAge = patientDAOInf.retrievePatientAgeByPatientID(patientForm.getPatientID());

			request.setAttribute("patientAge", patientAge);

			/*
			 * retrieving patient gender based on patientID
			 */
			String patientGender = patientDAOInf.retrievePatientGenderByPatientID(patientForm.getPatientID());

			request.setAttribute("gender", patientGender);

			hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

			/*
			 * retrieving patientList which contains visit details
			 */

			patientList = patientDAOInf.retrieveDefaultPatientDetails(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID(), patientForm.getAptID(),
					loginForm.getVisitTypeID());

			boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

			if (visitCheck) {
				billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
			} else {
				billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
						loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
			}

			/* Retrieve labReport List */
			labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
					loginForm.getClinicID());

			String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
			request.setAttribute("paymentType", paymentType);

			String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

			request.setAttribute("medicalCertiText", medicatCertificate);

			String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

			request.setAttribute("referralLetter", referralLetter);
			/*
			 * retrieving prescription list by visitID
			 */
			prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID());

			InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

			diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());
			/*
			 * retrieving symptomCheck list by visitID
			 */
			symptomList = patientDAOInf.retrievesymptomCheckList(patientForm.getVisitID());

			complaintList = patientDAOInf.retrievecomplaintList(patientForm.getVisitID());

			historyList = patientDAOInf.retrieveMedicalHistoryList(patientForm.getPatientID());

			medicationList = patientDAOInf.retrieveCurrentMedicationList(patientForm.getPatientID());

			// Checking if the CRF form is for Gokhale clinic, if so then load the diagnosis
			// from the json file else load the diagnosis from the PVDiagnosis table
			if (formNameArray[1].trim().equals("generalPhysicianGokhaleOPDEdit.jsp")) {

				// Retrieving diagnosis list for the last visit ID
				orthoDiagnosisList = patientDAOInf.retrieveOrthoDiagnosisList(patientForm.getVisitID());

				HttpServletRequest request = ServletActionContext.getRequest();

				ServletContext context = request.getServletContext();

				String realPath = context.getRealPath("/");

				JSONParser parser = new JSONParser();

				JSONArray diagnosisJSON = (JSONArray) parser
						.parse(new FileReader(realPath + File.separator + "ortho_charges.json"));

				for (Object jsonData : diagnosisJSON) {
					JSONObject data = (JSONObject) jsonData;

					// diagnoseList.put((String) data.get("rate"), (String) data.get("diagnosis"));
				}

			}
			diagnoseList = configurationUtil.getDiagnoseList();

			request.setAttribute("apptID", patientForm.getAptID());

			drugList = configurationUtil.getTradeNameList();

			InvestigationList = configurationUtil.getInvestigationList();

			frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

			doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

			categoryList = configurationUtil.getCategoryList();

			hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

			doctorList1 = configurationUtil.getDoctorList(loginForm.getPracticeID());

			reportList = configurationUtil.getRepostList(loginForm.getVisitTypeID());

			String Template = patientDAOInf.retrieveTemplate(patientForm.getVisitID());

			request.setAttribute("Template", Template);

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Edit General Physician Prescription", loginForm.getUserID());

			System.out.println("Edit OPD JSP Page name for logged in user is ::: " + formNameArray[1].trim());

			// Setting add opd page name value in pageName variable
			setPageName(formNameArray[1].trim());

			return SUCCESS;

		} else {
			addActionError("Failed to update Visit details. Please check logs for more details.");

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Edit General Physician Visit Exception occurred",
					loginForm.getUserID());

			/*
			 * Verifying whether visit exist for the patient or not, if not then disable
			 * View Last Visit button
			 */
			int patientVisitExistCheck = patientDAOInf.verifyVisitDetails(patientForm.getPatientID(),
					loginForm.getClinicID());

			String disableButtonCheck = "enable";
			if (patientVisitExistCheck == 0) {
				disableButtonCheck = "disable";
			}

			request.setAttribute("disableButtonCheck", disableButtonCheck);

			request.setAttribute("apptID", patientForm.getAptID());

			/*
			 * Retrieving patient age based on patientID
			 */
			String patientAge = patientDAOInf.retrievePatientAgeByPatientID(patientForm.getPatientID());

			request.setAttribute("patientAge", patientAge);

			/*
			 * retrieving patient gender based on patientID
			 */
			String patientGender = patientDAOInf.retrievePatientGenderByPatientID(patientForm.getPatientID());

			request.setAttribute("gender", patientGender);

			hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

			patientList = patientDAOInf.retrieveDefaultPatientDetails(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID(), patientForm.getAptID(),
					loginForm.getVisitTypeID());

			boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

			if (visitCheck) {
				billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
			} else {
				billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
						loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
			}

			/*
			 * retrieving prescription list by visitID
			 */
			prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID());

			/* Retrieve labReport List */
			labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
					loginForm.getClinicID());
			/*
			 * retrieving symptomCheck list by visitID
			 */
			symptomList = patientDAOInf.retrievesymptomCheckList(patientForm.getVisitID());

			historyList = patientDAOInf.retrieveMedicalHistoryList(patientForm.getPatientID());

			medicationList = patientDAOInf.retrieveCurrentMedicationList(patientForm.getPatientID());

			complaintList = patientDAOInf.retrievecomplaintList(patientForm.getVisitID());

			String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

			request.setAttribute("medicalCertiText", medicatCertificate);

			String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

			request.setAttribute("referralLetter", referralLetter);

			doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

			// Checking if the CRF form is for Gokhale clinic, if so then load the diagnosis
			// from the json file else load the diagnosis from the PVDiagnosis table
			if (formNameArray[1].trim().equals("generalPhysicianGokhaleOPDEdit.jsp")) {

				// Retrieving diagnosis list for the last visit ID
				orthoDiagnosisList = patientDAOInf.retrieveOrthoDiagnosisList(patientForm.getVisitID());

				HttpServletRequest request = ServletActionContext.getRequest();

				ServletContext context = request.getServletContext();

				String realPath = context.getRealPath("/");

				JSONParser parser = new JSONParser();

				JSONArray diagnosisJSON = (JSONArray) parser
						.parse(new FileReader(realPath + File.separator + "ortho_charges.json"));

				for (Object jsonData : diagnosisJSON) {
					JSONObject data = (JSONObject) jsonData;

					// diagnoseList.put((String) data.get("rate"), (String) data.get("diagnosis"));
				}

			}
			diagnoseList = configurationUtil.getDiagnoseList();

			resayuDiagnosisList = configurationUtil.getDiagnoseList();

			resayuDiagnosisList.put("Other", "Other");

			drugList = configurationUtil.getTradeNameList();

			InvestigationList = configurationUtil.getInvestigationList();

			frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

			InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

			diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());

			categoryList = configurationUtil.getCategoryList();

			doctorList1 = configurationUtil.getDoctorList(loginForm.getPracticeID());

			reportList = configurationUtil.getRepostList(loginForm.getVisitTypeID());

			String Template = patientDAOInf.retrieveTemplate(patientForm.getVisitID());

			request.setAttribute("Template", Template);

			/*
			 * Getting form name to be display based on logged in User
			 */
			System.out.println("Edit OPD JSP Page name for logged in user is ::: " + formNameArray[1].trim());

			// Setting Edit opd page name value in pageName variable
			setPageName(formNameArray[1].trim());

			return ERROR;
		}

	}

	/**
	 * 
	 * @return String
	 * @throws Exception
	 */
	public String editPrescription() throws Exception {

		if (patientForm.getAddButton().startsWith(",")) {
			patientForm.getAddButton().substring(1);
		}

		if (patientForm.getAddButton().equals("print") || patientForm.getAddButton().equals("Print")) {
			System.out.println("inside add button = print");
			updatePrintGenPhyPrescription();
		} else if (patientForm.getAddButton().equals("download")) {
			System.out.println("inside add button = download");
			updateDownloadGenPhyPrescription();
		} else {
			System.out.println("outside add button = print");

			patientDAOInf = new PatientDAOImpl();

			serviceInf = new eDhanvantariServiceImpl();

			SMSSender smsSender = new SMSSender();

			EmailUtil emailUtil = new EmailUtil();

			ConvertToPDFUtil convertToPDFUtil = new ConvertToPDFUtil();

			LoginDAOInf daoInf = new LoginDAOImpl();

			ClinicDAOInf daoInf1 = new ClinicDAOImpl();

			RegistrationDAOinf registrationDAOinf = new RegistrationDAOImpl();

			PrescriptionManagementDAOInf managementDAOInf = new PrescriptionManagementDAOImpl();

			String accessKey = xmlUtil.getAccessKey();

			String secreteKey = xmlUtil.getSecreteKey();

			AWSS3Connect awss3Connect = new AWSS3Connect();

			// getting input file location from S3 bucket
			String s3reportFilePath = xmlUtil.getS3RDMLReportFilePath();

			String s3LogoFilePath = xmlUtil.getS3RDMLFilePath();

			// getting s3 bucket name
			String bucketName = util.getS3BucketName();

			// getting s3 bucket region
			String bucketRegion = xmlUtil.getS3BucketRegion();

			AWSCredentials credentials = new BasicAWSCredentials(accessKey, secreteKey);

			AmazonS3 s3 = AmazonS3ClientBuilder.standard()
					.withCredentials(new AWSStaticCredentialsProvider(credentials)).withRegion(bucketRegion).build();

			orthoBillItemList = patientDAOInf.retrieveOrthoBillingItemList(patientForm.getVisitID());

			/*
			 * Getting user role from session
			 */
			LoginForm loginForm = (LoginForm) session.get("USER");

			System.out.println("userid loginform is::" + loginForm.getUserID());
			String username = patientDAOInf.retrieveUsernameBYuserID(loginForm.getUserID());
			System.out.println("username loginform is ::" + username);

			/*
			 * Getting form name to be display based on logged in User
			 */
			String[] formNameArray = loginForm.getOPDJSPName().split("&");

			patientForm.setClinicID(loginForm.getClinicID());

			String check1 = patientDAOInf.verifyReferralLetter(patientForm.getVisitID());
			System.out.println("check1 value in action:" + check1);
			request.setAttribute("referralLetterCheck", check1);

			String check = patientDAOInf.verifyMedicalCertificate(patientForm.getVisitID());
			System.out.println("check value in action:" + check);
			request.setAttribute("medicalCertiCheck", check);

			message = serviceInf.addNewPrescription(patientForm);

			if (message.equals("success")) {

				addActionMessage("Prescription added successfully.");

				String prescTabCheck = "enable";

				request.setAttribute("prescTabCheck", prescTabCheck);

				HttpServletRequest request = ServletActionContext.getRequest();

				ServletContext context = request.getServletContext();

				String realPath = context.getRealPath("/");

				// String pdfOutFIleName = realPath + patientForm.getFirstName() +
				// patientForm.getLastName()
				String pdfOutFIleName = patientForm.getFirstName() + patientForm.getLastName()
						+ patientForm.getPatientID() + "_" + patientForm.getVisitID() + "p.pdf";

				message = convertToPDFUtil.convertPrescriptionPDF(patientForm.getPatientID(), patientForm.getVisitID(),
						realPath, pdfOutFIleName, loginForm.getClinicID(), loginForm.getPracticeID(), username, s3,
						s3LogoFilePath, bucketName);

				if (message.equals("success")) {

					File inputFile = new File(realPath + "/" + pdfOutFIleName);

					// Storing file to S3 RDML INPUT FILE location
					message = awss3Connect.pushFile(inputFile, pdfOutFIleName, bucketName, bucketRegion,
							s3reportFilePath);

					S3ObjectInputStream s3ObjectInputStream = s3
							.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, pdfOutFIleName))
							.getObjectContent();

					patientForm.setFileInputStream(s3ObjectInputStream);
					patientForm.setFileName(pdfOutFIleName);

					boolean EmailCheck = util.verifyCommunicationCheck("emailPresc");

					if (EmailCheck) {

						/*
						 * Retrieving patient's email ID, if not null, then sending patient a welcome
						 * mail
						 */
						String emailID = patientDAOInf.retrievePatientEmailByID(patientForm.getPatientID());

						if (emailID == null || emailID == "") {
							System.out.println("EmailID no not found for patient.");
						} else {

							if (emailID.isEmpty()) {
								System.out.println("EmailID no not found for patient.");
							} else {

								/*
								 * Sending prescription mail to patient
								 */
								emailUtil.sendPrescriptionMail(patientForm.getPatientID(), loginForm.getPracticeID(),
										loginForm.getClinicID(), patientForm.getVisitID(), realPath, pdfOutFIleName,
										emailID);
							}

						}

					}

					/*
					 * Check whether appointment udpated flag is on or not, and depending upon that
					 * sending SMS and Email
					 */
					boolean SMSCheck = util.verifyCommunicationCheck("smsPresc");

					if (SMSCheck) {

						/*
						 * Retrieving patient's mobile no, if mobile is not null, then sending patient a
						 * welcome message
						 */
						String mobileNo = patientDAOInf.retrievePatientMobileNoByID(patientForm.getPatientID());

						/*
						 * Sending patient a welcome as well as Appointment scheduled message on
						 * checking whether mobile no is available for that patient or not
						 */
						if (mobileNo == null || mobileNo == "") {
							System.out.println("Mobile no not found for patient.");
						} else {

							if (mobileNo.isEmpty()) {
								System.out.println("Mobile no not found for patient.");
							} else {

								/*
								 * Sending bill details SMS to patient
								 */
								smsSender.sendGeneralisedPrescriptionORBillSMS(patientForm.getVisitID(), mobileNo,
										loginForm.getPracticeID(), loginForm.getClinicID(), ActivityStatus.PRESCRIPTION,
										pdfOutFIleName);

							}

						}

					}

				}

				/*
				 * Update appointment status to Prescription
				 */
				patientDAOInf.updatePrescriptionAppointmentStatus(patientForm.getPatientID(), patientForm.getAptID());

				int lastVisitID = patientDAOInf.retrieveLastVisitID(patientForm.getPatientID(),
						loginForm.getClinicID());
				/*
				 * retrieving patientList which contains visit details
				 */
				if (formNameArray[1].trim().equals("generalOPDEdit.jsp")
						|| formNameArray[1].trim().equals("telephonicEdit.jsp")
						|| formNameArray[1].trim().equals("physicianOPDEdit.jsp")
						|| formNameArray[1].trim().equals("generalPhysicianOPDEdit.jsp")
						|| formNameArray[1].trim().equals("generalPhysicianGokhaleOPDEdit.jsp")) {
					patientList = patientDAOInf.retrieveDefaultPatientDetails(patientForm.getPatientID(),
							patientForm.getVisitID(), loginForm.getClinicID(), patientForm.getAptID(),
							loginForm.getVisitTypeID());
				} else {
					String visitType = daoInf1.retrieveVisitTypeNameByID(loginForm.getVisitTypeID());
					System.out.println("visitype is ::" + visitType);

					patientList = patientDAOInf.retrieveLastEnteredVisitDetail(patientForm.getPatientID(),
							patientForm.getVisitID(), loginForm.getClinicID(), visitType);

				}

				boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

				if (visitCheck) {
					billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
				} else {
					billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
							loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
				}

				/* Retrieve labReport List */
				labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
						loginForm.getClinicID());

				String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
				request.setAttribute("paymentType", paymentType);

				String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

				request.setAttribute("medicalCertiText", medicatCertificate);

				String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

				request.setAttribute("referralLetter", referralLetter);
				/*
				 * retrieving prescription list by visitID
				 */
				prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID());

				InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

				diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());

				proceduresList = patientDAOInf.retrieveProceduresList(patientForm.getVisitID());

				/*
				 * retrieving symptomCheck list by visitID
				 */
				symptomList = patientDAOInf.retrievesymptomCheckList(patientForm.getVisitID());

				complaintList = patientDAOInf.retrievecomplaintList(patientForm.getVisitID());

				historyList = patientDAOInf.retrieveMedicalHistoryList(patientForm.getPatientID());

				medicationList = patientDAOInf.retrieveCurrentMedicationList(patientForm.getPatientID());

				// Checking if the CRF form is for Gokhale clinic, if so then load the diagnosis
				// from the json file else load the diagnosis from the PVDiagnosis table
				if (formNameArray[1].trim().equals("generalPhysicianGokhaleOPDEdit.jsp")) {

					// Retrieving diagnosis list for the last visit ID
					orthoDiagnosisList = patientDAOInf.retrieveOrthoDiagnosisList(patientForm.getVisitID());

					JSONParser parser = new JSONParser();

					JSONArray diagnosisJSON = (JSONArray) parser
							.parse(new FileReader(realPath + File.separator + "ortho_charges.json"));

					for (Object jsonData : diagnosisJSON) {
						JSONObject data = (JSONObject) jsonData;

						// diagnoseList.put((String) data.get("rate"), (String) data.get("diagnosis"));
					}

				}
				diagnoseList = configurationUtil.getDiagnoseList();

				request.setAttribute("apptID", patientForm.getAptID());

				drugList = configurationUtil.getTradeNameList();

				InvestigationList = configurationUtil.getInvestigationList();

				DiagnosticList1 = configurationUtil.getDiagnosticList1();

				ProcedureList = configurationUtil.getProceduresList();

				frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

				doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

				categoryList = configurationUtil.getCategoryList();

				hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

				// Inserting values into Audit table
				daoInf.insertAudit(request.getRemoteAddr(), "Edit General Physician Prescription",
						loginForm.getUserID());

				System.out.println("Edit OPD JSP Page name for logged in user is ::: " + formNameArray[1].trim());

				// Setting add opd page name value in pageName variable
				setPageName(formNameArray[1].trim());

				return SUCCESS;

			} else if (message.equals("noVisit")) {

				addActionError("No visit added. Please add visit first.");

				String prescTabCheck = "enable";

				request.setAttribute("prescTabCheck", prescTabCheck);

				int lastVisitID = patientDAOInf.retrieveLastVisitID(patientForm.getPatientID(),
						loginForm.getClinicID());

				String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

				request.setAttribute("medicalCertiText", medicatCertificate);

				String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

				request.setAttribute("referralLetter", referralLetter);
				/*
				 * retrieving patientList which contains visit details
				 */
				if (formNameArray[1].trim().equals("generalOPDEdit.jsp")
						|| formNameArray[1].trim().equals("telephonicEdit.jsp")
						|| formNameArray[1].trim().equals("physicianOPDEdit.jsp")
						|| formNameArray[1].trim().equals("generalPhysicianOPDEdit.jsp")
						|| formNameArray[1].trim().equals("generalPhysicianGokhaleOPDEdit.jsp")) {
					patientList = patientDAOInf.retrieveDefaultPatientDetails(patientForm.getPatientID(),
							patientForm.getVisitID(), loginForm.getClinicID(), patientForm.getAptID(),
							loginForm.getVisitTypeID());
				} else {
					String visitType = daoInf1.retrieveVisitTypeNameByID(loginForm.getVisitTypeID());
					System.out.println("visitype is ::" + visitType);

					patientList = patientDAOInf.retrieveLastEnteredVisitDetail(patientForm.getPatientID(),
							patientForm.getVisitID(), loginForm.getClinicID(), visitType);

				}
				hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

				/*
				 * retrieving prescription list by visitID
				 */
				prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID());

				InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

				diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());

				proceduresList = patientDAOInf.retrieveProceduresList(patientForm.getVisitID());

				/*
				 * retrieving symptomCheck list by visitID
				 */
				symptomList = patientDAOInf.retrievesymptomCheckList(patientForm.getVisitID());

				complaintList = patientDAOInf.retrievecomplaintList(patientForm.getVisitID());

				historyList = patientDAOInf.retrieveMedicalHistoryList(patientForm.getPatientID());

				medicationList = patientDAOInf.retrieveCurrentMedicationList(patientForm.getPatientID());

				boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

				if (visitCheck) {
					billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
				} else {
					billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
							loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
				}

				/* Retrieve labReport List */
				labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
						loginForm.getClinicID());

				String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
				request.setAttribute("paymentType", paymentType);

				request.setAttribute("apptID", patientForm.getAptID());

				// Checking if the CRF form is for Gokhale clinic, if so then load the diagnosis
				// from the json file else load the diagnosis from the PVDiagnosis table
				if (formNameArray[1].trim().equals("generalPhysicianGokhaleOPDEdit.jsp")) {

					// Retrieving diagnosis list for the last visit ID
					orthoDiagnosisList = patientDAOInf.retrieveOrthoDiagnosisList(patientForm.getVisitID());

					HttpServletRequest request = ServletActionContext.getRequest();

					ServletContext context = request.getServletContext();

					String realPath = context.getRealPath("/");

					JSONParser parser = new JSONParser();

					JSONArray diagnosisJSON = (JSONArray) parser
							.parse(new FileReader(realPath + File.separator + "ortho_charges.json"));

					for (Object jsonData : diagnosisJSON) {
						JSONObject data = (JSONObject) jsonData;

						// diagnoseList.put((String) data.get("rate"), (String) data.get("diagnosis"));
					}

				}
				diagnoseList = configurationUtil.getDiagnoseList();

				drugList = configurationUtil.getTradeNameList();

				categoryList = configurationUtil.getCategoryList();

				InvestigationList = configurationUtil.getInvestigationList();

				DiagnosticList1 = configurationUtil.getDiagnosticList1();

				ProcedureList = configurationUtil.getProceduresList();

				frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

				// chargeTypeList = configurationUtil.getChargeTypeList();

				doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

				// Inserting values into Audit table
				daoInf.insertAudit(request.getRemoteAddr(), "Edit General Physician Prescription Exception occurred",
						loginForm.getUserID());

				System.out.println("Edit OPD JSP Page name for logged in user is ::: " + formNameArray[1].trim());

				// Setting add opd page name value in pageName variable
				setPageName(formNameArray[1].trim());

				return ERROR;

			} else {

				addActionError(
						"Eexception occurred while adding prescription details. Please check server logs for more details.");

				String prescTabCheck = "enable";

				request.setAttribute("prescTabCheck", prescTabCheck);

				String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

				request.setAttribute("medicalCertiText", medicatCertificate);

				String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

				request.setAttribute("referralLetter", referralLetter);

				int lastVisitID = patientDAOInf.retrieveLastVisitID(patientForm.getPatientID(),
						loginForm.getClinicID());

				/*
				 * retrieving patientList which contains visit details
				 */
				if (formNameArray[1].trim().equals("generalOPDEdit.jsp")
						|| formNameArray[1].trim().equals("telephonicEdit.jsp")
						|| formNameArray[1].trim().equals("physicianOPDEdit.jsp")
						|| formNameArray[1].trim().equals("generalPhysicianOPDEdit.jsp")
						|| formNameArray[1].trim().equals("generalPhysicianGokhaleOPDEdit.jsp")) {
					patientList = patientDAOInf.retrieveDefaultPatientDetails(patientForm.getPatientID(),
							patientForm.getVisitID(), loginForm.getClinicID(), patientForm.getAptID(),
							loginForm.getVisitTypeID());
				} else {
					String visitType = daoInf1.retrieveVisitTypeNameByID(loginForm.getVisitTypeID());
					System.out.println("visitype is ::" + visitType);

					patientList = patientDAOInf.retrieveLastEnteredVisitDetail(patientForm.getPatientID(),
							patientForm.getVisitID(), loginForm.getClinicID(), visitType);

				}

				hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

				request.setAttribute("apptID", patientForm.getAptID());

				boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

				if (visitCheck) {
					billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
				} else {
					billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
							loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
				}

				/*
				 * retrieving prescription list by visitID
				 */
				prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID());

				InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

				diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());

				proceduresList = patientDAOInf.retrieveProceduresList(patientForm.getVisitID());

				/*
				 * retrieving symptomCheck list by visitID
				 */
				symptomList = patientDAOInf.retrievesymptomCheckList(patientForm.getVisitID());

				complaintList = patientDAOInf.retrievecomplaintList(patientForm.getVisitID());

				historyList = patientDAOInf.retrieveMedicalHistoryList(patientForm.getPatientID());

				medicationList = patientDAOInf.retrieveCurrentMedicationList(patientForm.getPatientID());

				/* Retrieve labReport List */
				labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
						loginForm.getClinicID());

				String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
				request.setAttribute("paymentType", paymentType);

				// Checking if the CRF form is for Gokhale clinic, if so then load the diagnosis
				// from the json file else load the diagnosis from the PVDiagnosis table
				if (formNameArray[1].trim().equals("generalPhysicianGokhaleOPDEdit.jsp")) {

					// Retrieving diagnosis list for the last visit ID
					orthoDiagnosisList = patientDAOInf.retrieveOrthoDiagnosisList(patientForm.getVisitID());

					HttpServletRequest request = ServletActionContext.getRequest();

					ServletContext context = request.getServletContext();

					String realPath = context.getRealPath("/");

					JSONParser parser = new JSONParser();

					JSONArray diagnosisJSON = (JSONArray) parser
							.parse(new FileReader(realPath + File.separator + "ortho_charges.json"));

					for (Object jsonData : diagnosisJSON) {
						JSONObject data = (JSONObject) jsonData;

						// diagnoseList.put((String) data.get("rate"), (String) data.get("diagnosis"));
					}

				}
				diagnoseList = configurationUtil.getDiagnoseList();

				drugList = configurationUtil.getTradeNameList();

				InvestigationList = configurationUtil.getInvestigationList();

				DiagnosticList1 = configurationUtil.getDiagnosticList1();

				ProcedureList = configurationUtil.getProceduresList();

				categoryList = configurationUtil.getCategoryList();

				frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

				// chargeTypeList = configurationUtil.getChargeTypeList();

				doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

				// Inserting values into Audit table
				daoInf.insertAudit(request.getRemoteAddr(), "Edit General Physician Prescription Exception occurred",
						loginForm.getUserID());

				System.out.println("EDit OPD JSP Page name for logged in user is ::: " + formNameArray[1].trim());

				// Setting add opd page name value in pageName variable
				setPageName(formNameArray[1].trim());

				return ERROR;
			}
		}
		return SUCCESS;
	}

	/**
	 * 
	 * @return String
	 * @throws Exception
	 */
	public String editInvestigation() throws Exception {

		patientDAOInf = new PatientDAOImpl();

		serviceInf = new eDhanvantariServiceImpl();

		ConvertToPDFUtil convertToPDFUtil = new ConvertToPDFUtil();

		LoginDAOInf daoInf = new LoginDAOImpl();

		ClinicDAOInf daoInf1 = new ClinicDAOImpl();

		RegistrationDAOinf registrationDAOinf = new RegistrationDAOImpl();

		PrescriptionManagementDAOInf managementDAOInf = new PrescriptionManagementDAOImpl();

		String accessKey = xmlUtil.getAccessKey();

		String secreteKey = xmlUtil.getSecreteKey();

		AWSS3Connect awss3Connect = new AWSS3Connect();

		// getting input file location from S3 bucket
		String s3reportFilePath = xmlUtil.getS3RDMLReportFilePath();

		String s3LogoFilePath = xmlUtil.getS3RDMLFilePath();

		// getting s3 bucket name
		String bucketName = util.getS3BucketName();

		// getting s3 bucket region
		String bucketRegion = xmlUtil.getS3BucketRegion();

		AWSCredentials credentials = new BasicAWSCredentials(accessKey, secreteKey);

		AmazonS3 s3 = AmazonS3ClientBuilder.standard().withCredentials(new AWSStaticCredentialsProvider(credentials))
				.withRegion(bucketRegion).build();

		/*
		 * Getting user role from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");

		String username = patientDAOInf.retrieveUsernameBYuserID(loginForm.getUserID());

		/*
		 * Getting form name to be display based on logged in User
		 */
		String[] formNameArray = loginForm.getOPDJSPName().split("&");

		patientForm.setClinicID(loginForm.getClinicID());

		String check1 = patientDAOInf.verifyReferralLetter(patientForm.getVisitID());

		request.setAttribute("referralLetterCheck", check1);

		String check = patientDAOInf.verifyMedicalCertificate(patientForm.getVisitID());

		request.setAttribute("medicalCertiCheck", check);

		message = serviceInf.addNewInvestigation(patientForm);

		if (message.equals("success")) {

			addActionMessage("Investigation added successfully.");

			String investTabCheck = "enable";

			request.setAttribute("investTabCheck", investTabCheck);

			HttpServletRequest request = ServletActionContext.getRequest();

			ServletContext context = request.getServletContext();

			String realPath = context.getRealPath("/");

			String pdfOutFIleName = patientForm.getFirstName() + patientForm.getLastName() + patientForm.getPatientID()
					+ "_" + patientForm.getVisitID() + "I.pdf";

			message = convertToPDFUtil.convertInvestigationPDF(patientForm.getPatientID(), patientForm.getVisitID(),
					realPath, pdfOutFIleName, loginForm.getClinicID(), loginForm.getPracticeID(), username, s3,
					s3LogoFilePath, bucketName);

			if (message.equals("success")) {

				File inputFile = new File(realPath + "/" + pdfOutFIleName);

				// Storing file to S3 RDML INPUT FILE location
				message = awss3Connect.pushFile(inputFile, pdfOutFIleName, bucketName, bucketRegion, s3reportFilePath);

				S3ObjectInputStream s3ObjectInputStream = s3
						.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, pdfOutFIleName))
						.getObjectContent();

				patientForm.setFileInputStream(s3ObjectInputStream);
				patientForm.setFileName(pdfOutFIleName);
			}

			/*
			 * retrieving patientList which contains visit details
			 */
			if (formNameArray[1].trim().equals("generalOPDEdit.jsp")
					|| formNameArray[1].trim().equals("telephonicEdit.jsp")
					|| formNameArray[1].trim().equals("physicianOPDEdit.jsp")
					|| formNameArray[1].trim().equals("generalPhysicianOPDEdit.jsp")
					|| formNameArray[1].trim().equals("generalPhysicianGokhaleOPDEdit.jsp")) {

				patientList = patientDAOInf.retrieveDefaultPatientDetails(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID(), patientForm.getAptID(),
						loginForm.getVisitTypeID());
			} else {
				String visitType = daoInf1.retrieveVisitTypeNameByID(loginForm.getVisitTypeID());

				patientList = patientDAOInf.retrieveLastEnteredVisitDetail(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID(), visitType);
			}

			boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

			if (visitCheck) {
				billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
			} else {
				billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
						loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
			}

			/* Retrieve labReport List */
			labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
					loginForm.getClinicID());

			String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
			request.setAttribute("paymentType", paymentType);

			String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

			request.setAttribute("medicalCertiText", medicatCertificate);

			String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

			request.setAttribute("referralLetter", referralLetter);
			/*
			 * retrieving prescription list by visitID
			 */
			prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID());

			InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

			diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());
			/*
			 * retrieving symptomCheck list by visitID
			 */
			symptomList = patientDAOInf.retrievesymptomCheckList(patientForm.getVisitID());

			complaintList = patientDAOInf.retrievecomplaintList(patientForm.getVisitID());

			historyList = patientDAOInf.retrieveMedicalHistoryList(patientForm.getPatientID());

			medicationList = patientDAOInf.retrieveCurrentMedicationList(patientForm.getPatientID());

			diagnoseList = configurationUtil.getDiagnoseList();

			request.setAttribute("apptID", patientForm.getAptID());

			drugList = configurationUtil.getTradeNameList();

			InvestigationList = configurationUtil.getInvestigationList();

			frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

			doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

			categoryList = configurationUtil.getCategoryList();

			hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Edit General Physician Prescription", loginForm.getUserID());

			System.out.println("Edit OPD JSP Page name for logged in user is ::: " + formNameArray[1].trim());

			// Setting add opd page name value in pageName variable
			setPageName(formNameArray[1].trim());

			return SUCCESS;

		} else if (message.equals("noVisit")) {

			addActionError("No visit added. Please add visit first.");

			String investTabCheck = "enable";

			request.setAttribute("investTabCheck", investTabCheck);

			String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

			request.setAttribute("medicalCertiText", medicatCertificate);

			String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

			request.setAttribute("referralLetter", referralLetter);
			/*
			 * retrieving patientList which contains visit details
			 */
			if (formNameArray[1].trim().equals("generalOPDEdit.jsp")
					|| formNameArray[1].trim().equals("telephonicEdit.jsp")
					|| formNameArray[1].trim().equals("physicianOPDEdit.jsp")
					|| formNameArray[1].trim().equals("generalPhysicianOPDEdit.jsp")
					|| formNameArray[1].trim().equals("generalPhysicianGokhaleOPDEdit.jsp")) {

				patientList = patientDAOInf.retrieveDefaultPatientDetails(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID(), patientForm.getAptID(),
						loginForm.getVisitTypeID());
			} else {
				String visitType = daoInf1.retrieveVisitTypeNameByID(loginForm.getVisitTypeID());

				patientList = patientDAOInf.retrieveLastEnteredVisitDetail(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID(), visitType);

			}
			hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

			/*
			 * retrieving prescription list by visitID
			 */
			prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID());

			InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

			diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());
			/*
			 * retrieving symptomCheck list by visitID
			 */
			symptomList = patientDAOInf.retrievesymptomCheckList(patientForm.getVisitID());

			complaintList = patientDAOInf.retrievecomplaintList(patientForm.getVisitID());

			historyList = patientDAOInf.retrieveMedicalHistoryList(patientForm.getPatientID());

			medicationList = patientDAOInf.retrieveCurrentMedicationList(patientForm.getPatientID());

			boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

			if (visitCheck) {
				billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
			} else {
				billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
						loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
			}

			/* Retrieve labReport List */
			labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
					loginForm.getClinicID());

			String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
			request.setAttribute("paymentType", paymentType);

			request.setAttribute("apptID", patientForm.getAptID());

			diagnoseList = configurationUtil.getDiagnoseList();

			drugList = configurationUtil.getTradeNameList();

			categoryList = configurationUtil.getCategoryList();

			InvestigationList = configurationUtil.getInvestigationList();

			frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

			// chargeTypeList = configurationUtil.getChargeTypeList();

			doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Edit General Physician Prescription Exception occurred",
					loginForm.getUserID());

			System.out.println("Edit OPD JSP Page name for logged in user is ::: " + formNameArray[1].trim());

			// Setting add opd page name value in pageName variable
			setPageName(formNameArray[1].trim());

			return ERROR;

		} else {

			addActionError(
					"Eexception occurred while adding prescription details. Please check server logs for more details.");

			String investTabCheck = "enable";

			request.setAttribute("investTabCheck", investTabCheck);

			String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

			request.setAttribute("medicalCertiText", medicatCertificate);

			String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

			request.setAttribute("referralLetter", referralLetter);

			/*
			 * retrieving patientList which contains visit details
			 */
			if (formNameArray[1].trim().equals("generalOPDEdit.jsp")
					|| formNameArray[1].trim().equals("telephonicEdit.jsp")
					|| formNameArray[1].trim().equals("physicianOPDEdit.jsp")
					|| formNameArray[1].trim().equals("generalPhysicianOPDEdit.jsp")
					|| formNameArray[1].trim().equals("generalPhysicianGokhaleOPDEdit.jsp")) {

				patientList = patientDAOInf.retrieveDefaultPatientDetails(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID(), patientForm.getAptID(),
						loginForm.getVisitTypeID());
			} else {
				String visitType = daoInf1.retrieveVisitTypeNameByID(loginForm.getVisitTypeID());

				patientList = patientDAOInf.retrieveLastEnteredVisitDetail(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID(), visitType);
			}

			hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

			request.setAttribute("apptID", patientForm.getAptID());

			boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

			if (visitCheck) {
				billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
			} else {
				billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
						loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
			}

			/*
			 * retrieving prescription list by visitID
			 */
			prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID());

			InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

			diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());

			/*
			 * retrieving symptomCheck list by visitID
			 */
			symptomList = patientDAOInf.retrievesymptomCheckList(patientForm.getVisitID());

			complaintList = patientDAOInf.retrievecomplaintList(patientForm.getVisitID());

			historyList = patientDAOInf.retrieveMedicalHistoryList(patientForm.getPatientID());

			medicationList = patientDAOInf.retrieveCurrentMedicationList(patientForm.getPatientID());

			/* Retrieve labReport List */
			labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
					loginForm.getClinicID());

			String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
			request.setAttribute("paymentType", paymentType);

			diagnoseList = configurationUtil.getDiagnoseList();

			drugList = configurationUtil.getTradeNameList();

			InvestigationList = configurationUtil.getInvestigationList();

			categoryList = configurationUtil.getCategoryList();

			frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

			// chargeTypeList = configurationUtil.getChargeTypeList();

			doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Edit General Physician Prescription Exception occurred",
					loginForm.getUserID());

			System.out.println("EDit OPD JSP Page name for logged in user is ::: " + formNameArray[1].trim());

			// Setting add opd page name value in pageName variable
			setPageName(formNameArray[1].trim());

			return ERROR;
		}
	}

	public String updatePrintBill() throws Exception {

		serviceInf = new eDhanvantariServiceImpl();
		patientDAOInf = new PatientDAOImpl();

		LoginDAOInf daoInf = new LoginDAOImpl();

		SMSSender smsSender = new SMSSender();

		EmailUtil emailUtil = new EmailUtil();

		ConvertToPDFUtil convertToPDFUtil = new ConvertToPDFUtil();

		RegistrationDAOinf registrationDAOinf = new RegistrationDAOImpl();

		PrescriptionManagementDAOInf managementDAOInf = new PrescriptionManagementDAOImpl();

		ClinicDAOInf daoInf1 = new ClinicDAOImpl();

		String accessKey = xmlUtil.getAccessKey();

		String secreteKey = xmlUtil.getSecreteKey();

		AWSS3Connect awss3Connect = new AWSS3Connect();

		// getting input file location from S3 bucket
		String s3reportFilePath = xmlUtil.getS3RDMLReportFilePath();

		// getting s3 bucket name
		String bucketName = util.getS3BucketName();

		String s3LogoFilePath = xmlUtil.getS3RDMLFilePath();

		// getting s3 bucket region
		String bucketRegion = xmlUtil.getS3BucketRegion();

		AWSCredentials credentials = new BasicAWSCredentials(accessKey, secreteKey);

		AmazonS3 s3 = AmazonS3ClientBuilder.standard().withCredentials(new AWSStaticCredentialsProvider(credentials))
				.withRegion(bucketRegion).build();

		String billingTabCheck = "enable";

		request.setAttribute("billingTabCheck", billingTabCheck);

		/*
		 * Getting user role from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");

		patientForm.setClinicID(loginForm.getClinicID());

		int lastVisitID = patientDAOInf.retrieveLastVisitID(patientForm.getPatientID(), loginForm.getClinicID());

		System.out.println("userid loginform is::" + loginForm.getUserID());
		String username = patientDAOInf.retrieveUsernameBYuserID(loginForm.getUserID());
		System.out.println("username loginform is ::" + username);
		/*
		 * Getting form name to be display based on logged in User
		 */
		String[] formNameArray = loginForm.getOPDJSPName().split("&");

		String check1 = patientDAOInf.verifyReferralLetter(patientForm.getVisitID());
		System.out.println("check1 value in action:" + check1);
		request.setAttribute("referralLetterCheck", check1);

		String check = patientDAOInf.verifyMedicalCertificate(patientForm.getVisitID());
		System.out.println("check value in action:" + check);
		request.setAttribute("medicalCertiCheck", check);

		message = serviceInf.configureBill(patientForm, loginForm.getUserID());

		orthoBillItemList = patientDAOInf.retrieveOrthoBillingItemList(patientForm.getVisitID());

		if (message.equalsIgnoreCase("success")) {
			addActionMessage("Successfully updated Billing details.");

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Edit General Physician Bill", loginForm.getUserID());

			/*
			 * Retrieving patient's mobile no, if mobile is not null, then sending patient a
			 * welcome message
			 */

			String mobileNo = patientDAOInf.retrievePatientMobileNoByID(patientForm.getPatientID());
			boolean SMSCheck1 = util.verifyCommunicationCheck("smsReviewForm");

			if (SMSCheck1) {
				/*
				 * Sending feedback SMS to patient
				 */
				smsSender.sendFeedbackSMS(mobileNo, patientForm.getPatientID(), loginForm.getPracticeID());
			}

			/*
			 * Retrieving patient's email ID, if not null, then sending patient a welcome
			 * mail
			 */
			String emailID = patientDAOInf.retrievePatientEmailByID(patientForm.getPatientID());

			boolean EmailCheck1 = util.verifyCommunicationCheck("emailReviewForm");

			if (EmailCheck1) {

				/*
				 * Sending feedback email to patient
				 */
				emailUtil.sendFeedbackMail(patientForm.getPatientID(), emailID, loginForm.getPracticeID());
			}

		}
		HttpServletRequest request = ServletActionContext.getRequest();

		ServletContext context = request.getServletContext();

		String realPath = context.getRealPath("/");

		// String pdfOutFIleName = reportFilePath + patientForm.getFirstName() +
		// patientForm.getLastName()
		String pdfOutFIleName = patientForm.getFirstName() + patientForm.getLastName() + patientForm.getPatientID()
				+ "_" + patientForm.getVisitID() + "b.pdf";

		if (formNameArray[1].trim().equals("generalPhysicianGokhaleOPDEdit.jsp")
				|| formNameArray[1].trim().equals("ophthalmologyOPDEdit2.jsp")
				|| formNameArray[1].trim().equals("PecOPDEdit.jsp")
				|| formNameArray[1].trim().equals("generalPhysicianOPDEdit.jsp")) {
			message = convertToPDFUtil.convertOrthoBillingPDF(patientForm.getPatientID(), patientForm.getVisitID(),
					realPath, pdfOutFIleName, loginForm.getClinicID(), loginForm.getPracticeID(), username, s3,
					s3LogoFilePath, bucketName);
		} else {
			message = convertToPDFUtil.convertBillingPDF(patientForm.getPatientID(), patientForm.getVisitID(), realPath,
					pdfOutFIleName, loginForm.getClinicID(), loginForm.getPracticeID(), username, s3, s3LogoFilePath,
					bucketName);
		}

		if (message.equalsIgnoreCase("success")) {

			File inputFile = new File(realPath + "/" + pdfOutFIleName);

			// Storing file to S3 RDML INPUT FILE location
			message = awss3Connect.pushFile(inputFile, pdfOutFIleName, bucketName, bucketRegion, s3reportFilePath);

			S3ObjectInputStream s3ObjectInputStream = s3
					.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, pdfOutFIleName))
					.getObjectContent();

			patientForm.setFileInputStream(s3ObjectInputStream);

			patientForm.setFileName(pdfOutFIleName);

			request.setAttribute("PDFOutFileName", pdfOutFIleName);

			/*
			 * Check whether appointment udpated flag is on or not, and depending upon that
			 * sending SMS and Email
			 */
			String mobileNo = patientDAOInf.retrievePatientMobileNoByID(patientForm.getPatientID());
			boolean SMSCheck = util.verifyCommunicationCheck("smsBill");

			if (SMSCheck) {

				/*
				 * Sending patient a welcome as well as Appointment scheduled message on
				 * checking whether mobile no is available for that patient or not
				 */
				if (mobileNo == null || mobileNo == "") {
					System.out.println("Mobile no not found for patient.");
				} else {

					if (mobileNo.isEmpty()) {
						System.out.println("Mobile no not found for patient.");
					} else {

						/*
						 * Sending bill details SMS to patient
						 */
						smsSender.sendGeneralisedPrescriptionORBillSMS(patientForm.getVisitID(), mobileNo,
								loginForm.getPracticeID(), loginForm.getClinicID(), ActivityStatus.BILL,
								pdfOutFIleName);

					}

				}

			}

			/*
			 * Check whether appointment udpated flag is on or not, and depending upon that
			 * sending SMS and Email
			 */
			boolean EmailCheck = util.verifyCommunicationCheck("emailBill");

			if (EmailCheck) {

				/*
				 * Retrieving patient's email ID, if not null, then sending patient a welcome
				 * mail
				 */
				String emailID = patientDAOInf.retrievePatientEmailByID(patientForm.getPatientID());

				if (emailID == null || emailID == "") {
					System.out.println("EmailID no not found for patient.");
				} else {

					if (emailID.isEmpty()) {
						System.out.println("EmailID no not found for patient.");
					} else {

						/*
						 * String fileName = patientForm.getFirstName() + patientForm.getLastName() +
						 * patientForm.getPatientID() + "_" + patientForm.getVisitID() + "_bill.pdf";
						 */
						/*
						 * Sending welcome mail to patient
						 */
						emailUtil.sendBillingMail(patientForm.getPatientID(), loginForm.getPracticeID(),
								loginForm.getClinicID(), patientForm.getVisitID(), pdfOutFIleName, emailID);
					}

				}

			}
			/*
			 * Verifying whether visit exist for the patient or not, if not then disable
			 * View Last Visit button
			 */
			int patientVisitExistCheck = patientDAOInf.verifyVisitDetails(patientForm.getPatientID(),
					loginForm.getClinicID());

			String disableButtonCheck = "enable";
			if (patientVisitExistCheck == 0) {
				disableButtonCheck = "disable";
			}

			request.setAttribute("disableButtonCheck", disableButtonCheck);

			/*
			 * Update appointment status to Billing
			 */
			patientDAOInf.updateBillingAppointmentStatus(patientForm.getPatientID(), patientForm.getAptID());

			// chck if the isConsultationDone flag is set, if so then update the appointment
			// status to Done
			if (patientForm.getIsConsultationDone() == 1) {
				patientDAOInf.updateDoneAppointmentStatus(patientForm.getPatientID(), patientForm.getVisitID());
				patientDAOInf.updateConsultationFlagInVisit(patientForm.getVisitID(),
						patientForm.getIsConsultationDone());
			}

			/*
			 * Retrieving patient age based on patientID
			 */
			String patientAge = patientDAOInf.retrievePatientAgeByPatientID(patientForm.getPatientID());

			request.setAttribute("patientAge", patientAge);

			request.setAttribute("apptID", patientForm.getAptID());

			/*
			 * retrieving patient gender based on patientID
			 */
			String patientGender = patientDAOInf.retrievePatientGenderByPatientID(patientForm.getPatientID());

			request.setAttribute("gender", patientGender);

			hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

			/*
			 * retrieving patientList which contains visit details
			 */
			if (formNameArray[1].trim().equals("generalOPDEdit.jsp")
					|| formNameArray[1].trim().equals("telephonicEdit.jsp")
					|| formNameArray[1].trim().equals("physicianOPDEdit.jsp")
					|| formNameArray[1].trim().equals("generalPhysicianOPDEdit.jsp")
					|| formNameArray[1].trim().equals("generalPhysicianGokhaleOPDEdit.jsp")) {
				patientList = patientDAOInf.retrieveDefaultPatientDetails(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID(), patientForm.getAptID(),
						loginForm.getVisitTypeID());
			} else if (formNameArray[1].trim().equals("genaralClinicOPDEdit.jsp")) {
				patientList = patientDAOInf.retrieveGeneralClinicPatientDetails(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID());

			} else if (formNameArray[1].trim().equals("genaralClinicIPDEdit.jsp")) {
				patientList = patientDAOInf.retrieveGenaralClinicPatientDetailsForIPDVisit(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID());

			} else {
				String visitType = daoInf1.retrieveVisitTypeNameByID(loginForm.getVisitTypeID());
				System.out.println("visitype is ::" + visitType);

				patientList = patientDAOInf.retrieveLastEnteredVisitDetail(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID(), visitType);

			}

			lasteEnteredVisitList = patientDAOInf.retrieveLastEnteredVisitDetail(patientForm.getPatientID());

			String dummy = "";

			request.setAttribute("lasteEnteredVisitList", "success");

			request.setAttribute("lasteEnteredPrescList", dummy);

			request.setAttribute("apptID", patientForm.getAptID());

			request.setAttribute("opticianFloatCheck", "empty");

			boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

			if (visitCheck) {
				billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
			} else {
				billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
						loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
			}

			String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
			request.setAttribute("paymentType", paymentType);
			/*
			 * retrieving prescription list by visitID
			 */
			prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID());

			InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

			diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());

			/* Retrieve labReport List */
			labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
					loginForm.getClinicID());
			/*
			 * retrieving symptomCheck list by visitID
			 */
			symptomList = patientDAOInf.retrievesymptomCheckList(patientForm.getVisitID());

			historyList = patientDAOInf.retrieveMedicalHistoryList(patientForm.getPatientID());

			medicationList = patientDAOInf.retrieveCurrentMedicationList(patientForm.getPatientID());

			complaintList = patientDAOInf.retrievecomplaintList(patientForm.getVisitID());

			String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

			request.setAttribute("medicalCertiText", medicatCertificate);

			String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

			request.setAttribute("referralLetter", referralLetter);

			doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

			// Checking if the CRF form is for Gokhale clinic, if so then load the diagnosis
			// from the json file else load the diagnosis from the PVDiagnosis table
			if (formNameArray[1].trim().equals("generalPhysicianGokhaleOPDEdit.jsp")) {

				// Retrieving diagnosis list for the last visit ID
				orthoDiagnosisList = patientDAOInf.retrieveOrthoDiagnosisList(patientForm.getVisitID());

				JSONParser parser = new JSONParser();

				JSONArray diagnosisJSON = (JSONArray) parser
						.parse(new FileReader(realPath + File.separator + "ortho_charges.json"));

				for (Object jsonData : diagnosisJSON) {
					JSONObject data = (JSONObject) jsonData;

					// diagnoseList.put((String) data.get("rate"), (String) data.get("diagnosis"));
				}

			}
			diagnoseList = configurationUtil.getDiagnoseList();

			categoryList = configurationUtil.getCategoryList();

			resayuDiagnosisList = configurationUtil.getDiagnoseList();

			resayuDiagnosisList.put("Other", "Other");

			drugList = configurationUtil.getTradeNameList();

			InvestigationList = configurationUtil.getInvestigationList();

			frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

			doctorList1 = configurationUtil.getDoctorList(loginForm.getPracticeID());

			reportList = configurationUtil.getRepostList(loginForm.getVisitTypeID());

			System.out.println("Edit OPD JSP Page name for logged in user is ::: " + formNameArray[1].trim());

			// Setting Edit opd page name value in pageName variable
			setPageName(formNameArray[1].trim());
			return SUCCESS;
		} else {
			addActionError("Failed to update Billing details. Please check logs for more details.");

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Edit General Physician Billing Exception Occurred.",
					loginForm.getUserID());

			/*
			 * Verifying whether visit exist for the patient or not, if not then disable
			 * View Last Visit button
			 */
			int patientVisitExistCheck = patientDAOInf.verifyVisitDetails(patientForm.getPatientID(),
					loginForm.getClinicID());

			String disableButtonCheck = "enable";
			if (patientVisitExistCheck == 0) {
				disableButtonCheck = "disable";
			}

			request.setAttribute("disableButtonCheck", disableButtonCheck);

			/*
			 * Update appointment status to Billing
			 */
			patientDAOInf.updateBillingAppointmentStatus(patientForm.getPatientID(), patientForm.getAptID());

			/*
			 * Retrieving patient age based on patientID
			 */
			String patientAge = patientDAOInf.retrievePatientAgeByPatientID(patientForm.getPatientID());

			request.setAttribute("patientAge", patientAge);

			/*
			 * retrieving patient gender based on patientID
			 */
			String patientGender = patientDAOInf.retrievePatientGenderByPatientID(patientForm.getPatientID());

			request.setAttribute("gender", patientGender);

			hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

			/*
			 * retrieving patientList which contains visit details
			 */
			if (formNameArray[1].trim().equals("generalOPDEdit.jsp")
					|| formNameArray[1].trim().equals("telephonicEdit.jsp")
					|| formNameArray[1].trim().equals("physicianOPDEdit.jsp")
					|| formNameArray[1].trim().equals("generalPhysicianOPDEdit.jsp")
					|| formNameArray[1].trim().equals("generalPhysicianGokhaleOPDEdit.jsp")) {
				patientList = patientDAOInf.retrieveDefaultPatientDetails(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID(), patientForm.getAptID(),
						loginForm.getVisitTypeID());
			} else if (formNameArray[1].trim().equals("genaralClinicOPDEdit.jsp")) {
				patientList = patientDAOInf.retrieveGeneralClinicPatientDetails(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID());

			} else if (formNameArray[1].trim().equals("genaralClinicIPDEdit.jsp")) {
				patientList = patientDAOInf.retrieveGenaralClinicPatientDetailsForIPDVisit(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID());

			} else {
				String visitType = daoInf1.retrieveVisitTypeNameByID(loginForm.getVisitTypeID());
				System.out.println("visitype is ::" + visitType);

				patientList = patientDAOInf.retrieveLastEnteredVisitDetail(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID(), visitType);

			}

			boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

			if (visitCheck) {
				billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
			} else {
				billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
						loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
			}

			/*
			 * retrieving symptomCheck list by visitID
			 */
			symptomList = patientDAOInf.retrievesymptomCheckList(patientForm.getVisitID());

			complaintList = patientDAOInf.retrievecomplaintList(patientForm.getVisitID());

			historyList = patientDAOInf.retrieveMedicalHistoryList(patientForm.getPatientID());

			medicationList = patientDAOInf.retrieveCurrentMedicationList(patientForm.getPatientID());

			/* Retrieve labReport List */
			labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
					loginForm.getClinicID());
			/*
			 * retrieving prescription list by visitID
			 */
			prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID());

			InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

			diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());

			String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

			request.setAttribute("medicalCertiText", medicatCertificate);

			String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

			request.setAttribute("referralLetter", referralLetter);

			request.setAttribute("apptID", patientForm.getAptID());

			doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

			// Checking if the CRF form is for Gokhale clinic, if so then load the diagnosis
			// from the json file else load the diagnosis from the PVDiagnosis table
			if (formNameArray[1].trim().equals("generalPhysicianGokhaleOPDEdit.jsp")) {

				// Retrieving diagnosis list for the last visit ID
				orthoDiagnosisList = patientDAOInf.retrieveOrthoDiagnosisList(patientForm.getVisitID());

				JSONParser parser = new JSONParser();

				JSONArray diagnosisJSON = (JSONArray) parser
						.parse(new FileReader(realPath + File.separator + "ortho_charges.json"));

				for (Object jsonData : diagnosisJSON) {
					JSONObject data = (JSONObject) jsonData;

					// diagnoseList.put((String) data.get("rate"), (String) data.get("diagnosis"));
				}

			}
			diagnoseList = configurationUtil.getDiagnoseList();

			resayuDiagnosisList = configurationUtil.getDiagnoseList();

			resayuDiagnosisList.put("Other", "Other");

			drugList = configurationUtil.getTradeNameList();

			categoryList = configurationUtil.getCategoryList();

			InvestigationList = configurationUtil.getInvestigationList();

			frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

			doctorList1 = configurationUtil.getDoctorList(loginForm.getPracticeID());

			reportList = configurationUtil.getRepostList(loginForm.getVisitTypeID());

			System.out.println("Edit OPD JSP Page name for logged in user is ::: " + formNameArray[1].trim());

			// Setting Edit opd page name value in pageName variable
			setPageName(formNameArray[1].trim());

			return ERROR;
		}

	}

	public String updateDownloadBill() throws Exception {

		serviceInf = new eDhanvantariServiceImpl();
		patientDAOInf = new PatientDAOImpl();

		LoginDAOInf daoInf = new LoginDAOImpl();

		SMSSender smsSender = new SMSSender();

		EmailUtil emailUtil = new EmailUtil();

		ConvertToPDFUtil convertToPDFUtil = new ConvertToPDFUtil();

		RegistrationDAOinf registrationDAOinf = new RegistrationDAOImpl();

		ClinicDAOInf daoInf1 = new ClinicDAOImpl();

		String accessKey = xmlUtil.getAccessKey();

		String secreteKey = xmlUtil.getSecreteKey();

		AWSS3Connect awss3Connect = new AWSS3Connect();

		// getting input file location from S3 bucket
		String s3reportFilePath = xmlUtil.getS3RDMLReportFilePath();

		// getting s3 bucket name
		String bucketName = util.getS3BucketName();

		String s3LogoFilePath = xmlUtil.getS3RDMLFilePath();

		// getting s3 bucket region
		String bucketRegion = xmlUtil.getS3BucketRegion();

		AWSCredentials credentials = new BasicAWSCredentials(accessKey, secreteKey);

		AmazonS3 s3 = AmazonS3ClientBuilder.standard().withCredentials(new AWSStaticCredentialsProvider(credentials))
				.withRegion(bucketRegion).build();

		String billingTabCheck = "enable";

		request.setAttribute("billingTabCheck", billingTabCheck);

		/*
		 * Getting user role from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");

		patientForm.setClinicID(loginForm.getClinicID());

		int lastVisitID = patientDAOInf.retrieveLastVisitID(patientForm.getPatientID(), loginForm.getClinicID());

		System.out.println("userid loginform is::" + loginForm.getUserID());
		String username = patientDAOInf.retrieveUsernameBYuserID(loginForm.getUserID());
		System.out.println("username loginform is ::" + username);
		/*
		 * Getting form name to be display based on logged in User
		 */
		String[] formNameArray = loginForm.getOPDJSPName().split("&");

		String check1 = patientDAOInf.verifyReferralLetter(patientForm.getVisitID());
		System.out.println("check1 value in action:" + check1);
		request.setAttribute("referralLetterCheck", check1);

		String check = patientDAOInf.verifyMedicalCertificate(patientForm.getVisitID());
		System.out.println("check value in action:" + check);
		request.setAttribute("medicalCertiCheck", check);

		HttpServletRequest request = ServletActionContext.getRequest();

		ServletContext context = request.getServletContext();

		String realPath = context.getRealPath("/");

		System.out.println("Real path is :: " + realPath);

		orthoBillItemList = patientDAOInf.retrieveOrthoBillingItemList(patientForm.getVisitID());

		// String pdfOutFIleName = realPath + patientForm.getFirstName() +
		// patientForm.getLastName()
		String pdfOutFIleName = patientForm.getFirstName() + patientForm.getLastName() + patientForm.getPatientID()
				+ "_" + patientForm.getVisitID() + "p.pdf";

		if (formNameArray[1].trim().equals("generalPhysicianGokhaleOPDEdit.jsp")
				|| formNameArray[1].trim().equals("ophthalmologyOPDEdit2.jsp")
				|| formNameArray[1].trim().equals("PecOPDEdit.jsp")) {
			message = convertToPDFUtil.convertOrthoBillingPDF(patientForm.getPatientID(), patientForm.getVisitID(),
					realPath, pdfOutFIleName, loginForm.getClinicID(), loginForm.getPracticeID(), username, s3,
					s3LogoFilePath, bucketName);
		} else {
			message = convertToPDFUtil.convertBillingPDF(patientForm.getPatientID(), patientForm.getVisitID(), realPath,
					pdfOutFIleName, loginForm.getClinicID(), loginForm.getPracticeID(), username, s3, s3LogoFilePath,
					bucketName);
		}

		if (message.equalsIgnoreCase("success")) {

			System.out.println("out File name from action ::::: " + pdfOutFIleName);

			File fileToDownload = new File(realPath + "/" + pdfOutFIleName);

			// Storing file to S3 RDML INPUT FILE location
			message = awss3Connect.pushFile(fileToDownload, pdfOutFIleName, bucketName, bucketRegion, s3reportFilePath);

			S3ObjectInputStream s3ObjectInputStream = s3
					.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, pdfOutFIleName))
					.getObjectContent();

			patientForm.setFileInputStream(s3ObjectInputStream);

			patientForm.setFileName(pdfOutFIleName);

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Edit General Physician Bill", loginForm.getUserID());

			/*
			 * Check whether appointment udpated flag is on or not, and depending upon that
			 * sending SMS and Email
			 */
			boolean SMSCheck = util.verifyCommunicationCheck("smsPresc");

			if (SMSCheck) {

				/*
				 * Retrieving patient's mobile no, if mobile is not null, then sending patient a
				 * welcome message
				 */
				String mobileNo = patientDAOInf.retrievePatientMobileNoByID(patientForm.getPatientID());

				/*
				 * Sending patient a welcome as well as Appointment scheduled message on
				 * checking whether mobile no is available for that patient or not
				 */
				if (mobileNo == null || mobileNo == "") {
					System.out.println("Mobile no not found for patient.");
				} else {

					if (mobileNo.isEmpty()) {
						System.out.println("Mobile no not found for patient.");
					} else {

						/*
						 * Sending bill details SMS to patient
						 */
						smsSender.sendGeneralisedPrescriptionORBillSMS(patientForm.getVisitID(), mobileNo,
								loginForm.getPracticeID(), loginForm.getClinicID(), ActivityStatus.BILL,
								pdfOutFIleName);

					}

				}

			}
			/*
			 * Verifying whether visit exist for the patient or not, if not then disable
			 * View Last Visit button
			 */
			int patientVisitExistCheck = patientDAOInf.verifyVisitDetails(patientForm.getPatientID(),
					loginForm.getClinicID());

			String disableButtonCheck = "enable";
			if (patientVisitExistCheck == 0) {
				disableButtonCheck = "disable";
			}

			request.setAttribute("disableButtonCheck", disableButtonCheck);

			/*
			 * Update appointment status to Billing
			 */
			patientDAOInf.updateBillingAppointmentStatus(patientForm.getPatientID(), patientForm.getAptID());

			/*
			 * Retrieving patient age based on patientID
			 */
			String patientAge = patientDAOInf.retrievePatientAgeByPatientID(patientForm.getPatientID());

			request.setAttribute("patientAge", patientAge);

			request.setAttribute("apptID", patientForm.getAptID());

			/*
			 * retrieving patient gender based on patientID
			 */
			String patientGender = patientDAOInf.retrievePatientGenderByPatientID(patientForm.getPatientID());

			request.setAttribute("gender", patientGender);

			hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

			/*
			 * retrieving patientList which contains visit details
			 */
			if (formNameArray[1].trim().equals("generalOPDEdit.jsp")
					|| formNameArray[1].trim().equals("telephonicEdit.jsp")
					|| formNameArray[1].trim().equals("physicianOPDEdit.jsp")
					|| formNameArray[1].trim().equals("generalPhysicianOPDEdit.jsp")
					|| formNameArray[1].trim().equals("generalPhysicianGokhaleOPDEdit.jsp")) {
				patientList = patientDAOInf.retrieveDefaultPatientDetails(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID(), patientForm.getAptID(),
						loginForm.getVisitTypeID());
			} else {
				String visitType = daoInf1.retrieveVisitTypeNameByID(loginForm.getVisitTypeID());
				System.out.println("visitype is ::" + visitType);

				patientList = patientDAOInf.retrieveLastEnteredVisitDetail(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID(), visitType);

			}

			boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

			if (visitCheck) {
				billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
			} else {
				billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
						loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
			}

			/*
			 * retrieving prescription list by visitID
			 */
			prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID());

			InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

			diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());

			/* Retrieve labReport List */
			labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
					loginForm.getClinicID());
			/*
			 * retrieving symptomCheck list by visitID
			 */
			symptomList = patientDAOInf.retrievesymptomCheckList(patientForm.getVisitID());

			historyList = patientDAOInf.retrieveMedicalHistoryList(patientForm.getPatientID());

			medicationList = patientDAOInf.retrieveCurrentMedicationList(patientForm.getPatientID());

			complaintList = patientDAOInf.retrievecomplaintList(patientForm.getVisitID());

			String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

			request.setAttribute("medicalCertiText", medicatCertificate);

			String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

			request.setAttribute("referralLetter", referralLetter);

			doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

			// Checking if the CRF form is for Gokhale clinic, if so then load the diagnosis
			// from the json file else load the diagnosis from the PVDiagnosis table
			if (formNameArray[1].trim().equals("generalPhysicianGokhaleOPDEdit.jsp")) {

				// Retrieving diagnosis list for the last visit ID
				orthoDiagnosisList = patientDAOInf.retrieveOrthoDiagnosisList(patientForm.getVisitID());

				JSONParser parser = new JSONParser();

				JSONArray diagnosisJSON = (JSONArray) parser
						.parse(new FileReader(realPath + File.separator + "ortho_charges.json"));

				for (Object jsonData : diagnosisJSON) {
					JSONObject data = (JSONObject) jsonData;

					// diagnoseList.put((String) data.get("rate"), (String) data.get("diagnosis"));
				}

			}
			diagnoseList = configurationUtil.getDiagnoseList();

			categoryList = configurationUtil.getCategoryList();

			resayuDiagnosisList = configurationUtil.getDiagnoseList();

			resayuDiagnosisList.put("Other", "Other");

			drugList = configurationUtil.getTradeNameList();

			InvestigationList = configurationUtil.getInvestigationList();

			frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

			System.out.println("Edit OPD JSP Page name for logged in user is ::: " + formNameArray[1].trim());

			// Setting Edit opd page name value in pageName variable
			setPageName(formNameArray[1].trim());
			return SUCCESS;
		} else {
			addActionError("Failed to update Billing details. Please check logs for more details.");

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Edit General Physician Billing Exception Occurred.",
					loginForm.getUserID());

			/*
			 * Verifying whether visit exist for the patient or not, if not then disable
			 * View Last Visit button
			 */
			int patientVisitExistCheck = patientDAOInf.verifyVisitDetails(patientForm.getPatientID(),
					loginForm.getClinicID());

			String disableButtonCheck = "enable";
			if (patientVisitExistCheck == 0) {
				disableButtonCheck = "disable";
			}

			request.setAttribute("disableButtonCheck", disableButtonCheck);

			/*
			 * Update appointment status to Billing
			 */
			patientDAOInf.updateBillingAppointmentStatus(patientForm.getPatientID(), patientForm.getAptID());

			/*
			 * Retrieving patient age based on patientID
			 */
			String patientAge = patientDAOInf.retrievePatientAgeByPatientID(patientForm.getPatientID());

			request.setAttribute("patientAge", patientAge);

			/*
			 * retrieving patient gender based on patientID
			 */
			String patientGender = patientDAOInf.retrievePatientGenderByPatientID(patientForm.getPatientID());

			request.setAttribute("gender", patientGender);

			hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

			/*
			 * retrieving patientList which contains visit details
			 */
			if (formNameArray[1].trim().equals("generalOPDEdit.jsp")
					|| formNameArray[1].trim().equals("telephonicEdit.jsp")
					|| formNameArray[1].trim().equals("physicianOPDEdit.jsp")
					|| formNameArray[1].trim().equals("generalPhysicianOPDEdit.jsp")
					|| formNameArray[1].trim().equals("generalPhysicianGokhaleOPDEdit.jsp")) {
				patientList = patientDAOInf.retrieveDefaultPatientDetails(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID(), patientForm.getAptID(),
						loginForm.getVisitTypeID());
			} else {
				String visitType = daoInf1.retrieveVisitTypeNameByID(loginForm.getVisitTypeID());
				System.out.println("visitype is ::" + visitType);

				patientList = patientDAOInf.retrieveLastEnteredVisitDetail(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID(), visitType);

			}

			boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

			if (visitCheck) {
				billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
			} else {
				billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
						loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
			}

			/*
			 * retrieving symptomCheck list by visitID
			 */
			symptomList = patientDAOInf.retrievesymptomCheckList(patientForm.getVisitID());

			complaintList = patientDAOInf.retrievecomplaintList(patientForm.getVisitID());

			historyList = patientDAOInf.retrieveMedicalHistoryList(patientForm.getPatientID());

			medicationList = patientDAOInf.retrieveCurrentMedicationList(patientForm.getPatientID());

			/* Retrieve labReport List */
			labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
					loginForm.getClinicID());
			/*
			 * retrieving prescription list by visitID
			 */
			prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID());

			InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

			diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());
			String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

			request.setAttribute("medicalCertiText", medicatCertificate);

			String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

			request.setAttribute("referralLetter", referralLetter);

			request.setAttribute("apptID", patientForm.getAptID());

			doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

			// Checking if the CRF form is for Gokhale clinic, if so then load the diagnosis
			// from the json file else load the diagnosis from the PVDiagnosis table
			if (formNameArray[1].trim().equals("generalPhysicianGokhaleOPDEdit.jsp")) {

				// Retrieving diagnosis list for the last visit ID
				orthoDiagnosisList = patientDAOInf.retrieveOrthoDiagnosisList(patientForm.getVisitID());

				JSONParser parser = new JSONParser();

				JSONArray diagnosisJSON = (JSONArray) parser
						.parse(new FileReader(realPath + File.separator + "ortho_charges.json"));

				for (Object jsonData : diagnosisJSON) {
					JSONObject data = (JSONObject) jsonData;

					diagnoseList.put((String) data.get("rate"), (String) data.get("diagnosis"));
				}

			} else {
				diagnoseList = configurationUtil.getDiagnoseList();
			}

			resayuDiagnosisList = configurationUtil.getDiagnoseList();

			resayuDiagnosisList.put("Other", "Other");

			drugList = configurationUtil.getTradeNameList();

			categoryList = configurationUtil.getCategoryList();

			InvestigationList = configurationUtil.getInvestigationList();

			frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

			System.out.println("Edit OPD JSP Page name for logged in user is ::: " + formNameArray[1].trim());

			// Setting Edit opd page name value in pageName variable
			setPageName(formNameArray[1].trim());

			return ERROR;
		}

	}

	/**
	 * 
	 * @return String
	 * @throws Exception
	 */
	public String editBill() throws Exception {
		System.out.println("edit add button val:" + patientForm.getAddButton());

		if (patientForm.getAddButton().startsWith(",")) {
			patientForm.getAddButton().substring(1);
		}

		if (patientForm.getAddButton().equals("print") || patientForm.getAddButton().equals("Print")) {
			System.out.println("inside add button = print");
			updatePrintBill();
		} else if (patientForm.getAddButton().equals("download")) {
			System.out.println("inside add button = download");
			downloadBill();
		} else {
			System.out.println("outside add button = print");
			serviceInf = new eDhanvantariServiceImpl();
			patientDAOInf = new PatientDAOImpl();

			LoginDAOInf daoInf = new LoginDAOImpl();

			SMSSender smsSender = new SMSSender();

			EmailUtil emailUtil = new EmailUtil();

			RegistrationDAOinf registrationDAOinf = new RegistrationDAOImpl();

			PrescriptionManagementDAOInf managementDAOInf = new PrescriptionManagementDAOImpl();

			ClinicDAOInf daoInf1 = new ClinicDAOImpl();

			String billingTabCheck = "enable";

			request.setAttribute("billingTabCheck", billingTabCheck);

			/*
			 * Getting user role from session
			 */
			LoginForm loginForm = (LoginForm) session.get("USER");

			patientForm.setClinicID(loginForm.getClinicID());

			int lastVisitID = patientDAOInf.retrieveLastVisitID(patientForm.getPatientID(), loginForm.getClinicID());

			/*
			 * Getting form name to be display based on logged in User
			 */
			String[] formNameArray = loginForm.getOPDJSPName().split("&");

			String check1 = patientDAOInf.verifyReferralLetter(patientForm.getVisitID());
			System.out.println("check1 value in action:" + check1);
			request.setAttribute("referralLetterCheck", check1);

			String check = patientDAOInf.verifyMedicalCertificate(patientForm.getVisitID());
			System.out.println("check value in action:" + check);
			request.setAttribute("medicalCertiCheck", check);

			message = serviceInf.configureBill(patientForm, loginForm.getUserID());

			orthoBillItemList = patientDAOInf.retrieveOrthoBillingItemList(patientForm.getVisitID());

			if (message.equalsIgnoreCase("success")) {
				addActionMessage("Successfully updated Billing details.");

				// Inserting values into Audit table
				daoInf.insertAudit(request.getRemoteAddr(), "Edit General Physician Bill", loginForm.getUserID());

				/*
				 * Retrieving patient's mobile no, if mobile is not null, then sending patient a
				 * welcome message
				 */
				String mobileNo = patientDAOInf.retrievePatientMobileNoByID(patientForm.getPatientID());

				boolean SMSCheck1 = util.verifyCommunicationCheck("smsReviewForm");

				if (SMSCheck1) {
					/*
					 * Sending feedback SMS to patient
					 */
					smsSender.sendFeedbackSMS(mobileNo, patientForm.getPatientID(), loginForm.getPracticeID());
				}

				/*
				 * Retrieving patient's email ID, if not null, then sending patient a welcome
				 * mail
				 */
				String emailID = patientDAOInf.retrievePatientEmailByID(patientForm.getPatientID());

				boolean EmailCheck1 = util.verifyCommunicationCheck("emailReviewForm");

				if (EmailCheck1) {

					/*
					 * Sending feedback email to patient
					 */
					emailUtil.sendFeedbackMail(patientForm.getPatientID(), emailID, loginForm.getPracticeID());
				}

				/*
				 * Verifying whether visit exist for the patient or not, if not then disable
				 * View Last Visit button
				 */
				int patientVisitExistCheck = patientDAOInf.verifyVisitDetails(patientForm.getPatientID(),
						loginForm.getClinicID());

				String disableButtonCheck = "enable";
				if (patientVisitExistCheck == 0) {
					disableButtonCheck = "disable";
				}

				request.setAttribute("disableButtonCheck", disableButtonCheck);

				/*
				 * Update appointment status to Billing
				 */
				patientDAOInf.updateBillingAppointmentStatus(patientForm.getPatientID(), patientForm.getAptID());

				// chck if the isConsultationDone flag is set, if so then update the appointment
				// status to Done
				if (patientForm.getIsConsultationDone() == 1) {
					patientDAOInf.updateDoneAppointmentStatus(patientForm.getPatientID(), patientForm.getVisitID());
					patientDAOInf.updateConsultationFlagInVisit(patientForm.getVisitID(),
							patientForm.getIsConsultationDone());
				}

				/*
				 * Retrieving patient age based on patientID
				 */
				String patientAge = patientDAOInf.retrievePatientAgeByPatientID(patientForm.getPatientID());

				request.setAttribute("patientAge", patientAge);

				request.setAttribute("apptID", patientForm.getAptID());

				/*
				 * retrieving patient gender based on patientID
				 */
				String patientGender = patientDAOInf.retrievePatientGenderByPatientID(patientForm.getPatientID());

				request.setAttribute("gender", patientGender);

				hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

				/*
				 * retrieving patientList which contains visit details
				 */
				if (formNameArray[1].trim().equals("generalOPDEdit.jsp")
						|| formNameArray[1].trim().equals("telephonicEdit.jsp")
						|| formNameArray[1].trim().equals("physicianOPDEdit.jsp")
						|| formNameArray[1].trim().equals("generalPhysicianOPDEdit.jsp")
						|| formNameArray[1].trim().equals("generalPhysicianGokhaleOPDEdit.jsp")) {
					patientList = patientDAOInf.retrieveDefaultPatientDetails(patientForm.getPatientID(),
							patientForm.getVisitID(), loginForm.getClinicID(), patientForm.getAptID(),
							loginForm.getVisitTypeID());
				} else if (formNameArray[1].trim().equals("genaralClinicOPDEdit.jsp")) {
					patientList = patientDAOInf.retrieveGeneralClinicPatientDetails(patientForm.getPatientID(),
							patientForm.getVisitID(), loginForm.getClinicID());

				} else if (formNameArray[1].trim().equals("genaralClinicIPDEdit.jsp")) {
					patientList = patientDAOInf.retrieveGenaralClinicPatientDetailsForIPDVisit(
							patientForm.getPatientID(), patientForm.getVisitID(), loginForm.getClinicID());

				} else {
					String visitType = daoInf1.retrieveVisitTypeNameByID(loginForm.getVisitTypeID());
					System.out.println("visitype is ::" + visitType);

					patientList = patientDAOInf.retrieveLastEnteredVisitDetail(patientForm.getPatientID(),
							patientForm.getVisitID(), loginForm.getClinicID(), visitType);

				}

				lasteEnteredVisitList = patientDAOInf.retrieveLastEnteredVisitDetail(patientForm.getPatientID());

				String dummy = "";

				request.setAttribute("lasteEnteredVisitList", "success");

				request.setAttribute("lasteEnteredPrescList", dummy);

				request.setAttribute("opticianFloatCheck", "empty");

				boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

				if (visitCheck) {
					billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
				} else {
					billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
							loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
				}

				String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
				request.setAttribute("paymentType", paymentType);

				/*
				 * retrieving prescription list by visitID
				 */
				prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID());

				InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

				diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());

				/* Retrieve labReport List */
				labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
						loginForm.getClinicID());
				/*
				 * retrieving symptomCheck list by visitID
				 */
				symptomList = patientDAOInf.retrievesymptomCheckList(patientForm.getVisitID());

				historyList = patientDAOInf.retrieveMedicalHistoryList(patientForm.getPatientID());

				medicationList = patientDAOInf.retrieveCurrentMedicationList(patientForm.getPatientID());

				complaintList = patientDAOInf.retrievecomplaintList(patientForm.getVisitID());

				String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

				request.setAttribute("medicalCertiText", medicatCertificate);

				String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

				request.setAttribute("referralLetter", referralLetter);

				doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

				// Checking if the CRF form is for Gokhale clinic, if so then load the diagnosis
				// from the json file else load the diagnosis from the PVDiagnosis table
				if (formNameArray[1].trim().equals("generalPhysicianGokhaleOPDEdit.jsp")) {

					// Retrieving diagnosis list for the last visit ID
					orthoDiagnosisList = patientDAOInf.retrieveOrthoDiagnosisList(patientForm.getVisitID());

					HttpServletRequest request = ServletActionContext.getRequest();

					ServletContext context = request.getServletContext();

					String realPath = context.getRealPath("/");

					JSONParser parser = new JSONParser();

					JSONArray diagnosisJSON = (JSONArray) parser
							.parse(new FileReader(realPath + File.separator + "ortho_charges.json"));

					for (Object jsonData : diagnosisJSON) {
						JSONObject data = (JSONObject) jsonData;

						// diagnoseList.put((String) data.get("rate"), (String) data.get("diagnosis"));
					}

				}
				diagnoseList = configurationUtil.getDiagnoseList();

				categoryList = configurationUtil.getCategoryList();

				resayuDiagnosisList = configurationUtil.getDiagnoseList();

				resayuDiagnosisList.put("Other", "Other");

				drugList = configurationUtil.getTradeNameList();

				InvestigationList = configurationUtil.getInvestigationList();

				frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

				System.out.println("Edit OPD JSP Page name for logged in user is ::: " + formNameArray[1].trim());

				// Setting Edit opd page name value in pageName variable
				setPageName(formNameArray[1].trim());
				return SUCCESS;
			} else {
				addActionError("Failed to update Billing details. Please check logs for more details.");

				// Inserting values into Audit table
				daoInf.insertAudit(request.getRemoteAddr(), "Edit General Physician Billing Exception Occurred.",
						loginForm.getUserID());

				/*
				 * Verifying whether visit exist for the patient or not, if not then disable
				 * View Last Visit button
				 */
				int patientVisitExistCheck = patientDAOInf.verifyVisitDetails(patientForm.getPatientID(),
						loginForm.getClinicID());

				String disableButtonCheck = "enable";
				if (patientVisitExistCheck == 0) {
					disableButtonCheck = "disable";
				}

				request.setAttribute("disableButtonCheck", disableButtonCheck);

				/*
				 * Update appointment status to Billing
				 */
				patientDAOInf.updateBillingAppointmentStatus(patientForm.getPatientID(), patientForm.getAptID());

				/*
				 * Retrieving patient age based on patientID
				 */
				String patientAge = patientDAOInf.retrievePatientAgeByPatientID(patientForm.getPatientID());

				request.setAttribute("patientAge", patientAge);

				/*
				 * retrieving patient gender based on patientID
				 */
				String patientGender = patientDAOInf.retrievePatientGenderByPatientID(patientForm.getPatientID());

				request.setAttribute("gender", patientGender);

				hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

				/*
				 * retrieving patientList which contains visit details
				 */
				if (formNameArray[1].trim().equals("generalOPDEdit.jsp")
						|| formNameArray[1].trim().equals("telephonicEdit.jsp")
						|| formNameArray[1].trim().equals("physicianOPDEdit.jsp")
						|| formNameArray[1].trim().equals("generalPhysicianOPDEdit.jsp")
						|| formNameArray[1].trim().equals("generalPhysicianGokhaleOPDEdit.jsp")) {
					patientList = patientDAOInf.retrieveDefaultPatientDetails(patientForm.getPatientID(),
							patientForm.getVisitID(), loginForm.getClinicID(), patientForm.getAptID(),
							loginForm.getVisitTypeID());
				} else if (formNameArray[1].trim().equals("genaralClinicOPDEdit.jsp")) {
					patientList = patientDAOInf.retrieveGeneralClinicPatientDetails(patientForm.getPatientID(),
							patientForm.getVisitID(), loginForm.getClinicID());

				} else if (formNameArray[1].trim().equals("genaralClinicIPDEdit.jsp")) {
					patientList = patientDAOInf.retrieveGenaralClinicPatientDetailsForIPDVisit(
							patientForm.getPatientID(), patientForm.getVisitID(), loginForm.getClinicID());

				} else {
					String visitType = daoInf1.retrieveVisitTypeNameByID(loginForm.getVisitTypeID());
					System.out.println("visitype is ::" + visitType);

					patientList = patientDAOInf.retrieveLastEnteredVisitDetail(patientForm.getPatientID(),
							patientForm.getVisitID(), loginForm.getClinicID(), visitType);

				}

				boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

				if (visitCheck) {
					billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
				} else {
					billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
							loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
				}

				/*
				 * retrieving symptomCheck list by visitID
				 */
				symptomList = patientDAOInf.retrievesymptomCheckList(patientForm.getVisitID());

				complaintList = patientDAOInf.retrievecomplaintList(patientForm.getVisitID());

				historyList = patientDAOInf.retrieveMedicalHistoryList(patientForm.getPatientID());

				medicationList = patientDAOInf.retrieveCurrentMedicationList(patientForm.getPatientID());

				/* Retrieve labReport List */
				labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
						loginForm.getClinicID());
				/*
				 * retrieving prescription list by visitID
				 */
				prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID());

				InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

				diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());
				String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

				request.setAttribute("medicalCertiText", medicatCertificate);

				String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

				request.setAttribute("referralLetter", referralLetter);

				request.setAttribute("apptID", patientForm.getAptID());

				doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

				// Checking if the CRF form is for Gokhale clinic, if so then load the diagnosis
				// from the json file else load the diagnosis from the PVDiagnosis table
				if (formNameArray[1].trim().equals("generalPhysicianGokhaleOPDEdit.jsp")) {

					// Retrieving diagnosis list for the last visit ID
					orthoDiagnosisList = patientDAOInf.retrieveOrthoDiagnosisList(patientForm.getVisitID());

					HttpServletRequest request = ServletActionContext.getRequest();

					ServletContext context = request.getServletContext();

					String realPath = context.getRealPath("/");

					JSONParser parser = new JSONParser();

					JSONArray diagnosisJSON = (JSONArray) parser
							.parse(new FileReader(realPath + File.separator + "ortho_charges.json"));

					for (Object jsonData : diagnosisJSON) {
						JSONObject data = (JSONObject) jsonData;

						// diagnoseList.put((String) data.get("rate"), (String) data.get("diagnosis"));
					}

				}
				diagnoseList = configurationUtil.getDiagnoseList();

				resayuDiagnosisList = configurationUtil.getDiagnoseList();

				resayuDiagnosisList.put("Other", "Other");

				drugList = configurationUtil.getTradeNameList();

				categoryList = configurationUtil.getCategoryList();

				InvestigationList = configurationUtil.getInvestigationList();

				frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

				System.out.println("Edit OPD JSP Page name for logged in user is ::: " + formNameArray[1].trim());

				// Setting Edit opd page name value in pageName variable
				setPageName(formNameArray[1].trim());

				return ERROR;
			}
		}
		return SUCCESS;
	}

	/**
	 * 
	 * @return
	 * @throws Exception
	 */
	public String addNewOPDVisit() throws Exception {

		if (patientForm.getSavePrintVisitID().equals("print") || patientForm.getSavePrintVisitID().equals("Print")) {

			printAddNewOPDVisit();
			return SUCCESS;
		} else {

			patientDAOInf = new PatientDAOImpl();

			serviceInf = new eDhanvantariServiceImpl();

			/*
			 * Getting user role from session
			 */
			LoginForm loginForm = (LoginForm) session.get("USER");

			LoginDAOInf daoInf = new LoginDAOImpl();
			ClinicDAOInf daoInf1 = new ClinicDAOImpl();

			PrescriptionManagementDAOInf managementDAOInf = new PrescriptionManagementDAOImpl();

			/*
			 * Setting clinicID from session into clinicID variable from PatientForm
			 */
			patientForm.setClinicID(loginForm.getClinicID());

			patientForm.setVisitTypeID(loginForm.getVisitTypeID());

			String visitType = daoInf1.retrieveVisitTypeNameByID(loginForm.getVisitTypeID());

			patientList = serviceInf.addNewOPDVisit(patientForm, visitType);

			if (patientList.size() > 0) {

				addActionMessage("New OPD visit added successfully.");

				// adding data to maintain visit edit history
				patientForm.setAction("Add");
				patientForm.setVisitType("OPD");
				patientForm.setUserID(loginForm.getUserID());
				patientForm.setClinicID(loginForm.getClinicID());

				patientDAOInf.insertVisitEditHistoryDetails(patientForm);

				diagnoseList = configurationUtil.getDiagnoseList();

				String dummy = "success";

				request.setAttribute("lasteEnteredVisitList", "success");

				request.setAttribute("lasteEnteredPrescList", "success");

				String check1 = patientDAOInf.verifyReferralLetter(patientForm.getVisitID());
				System.out.println("check1 value in action:" + check1);
				request.setAttribute("referralLetterCheck", check1);

				String check = patientDAOInf.verifyMedicalCertificate(patientForm.getVisitID());
				System.out.println("check value in action:" + check);
				request.setAttribute("medicalCertiCheck", check);

				boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

				patientList = patientDAOInf.retrieveLastEnteredVisitDetail(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID(), visitType);

				if (visitCheck) {
					billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
				} else {
					billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
							loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
				}

				/*
				 * Update appointment status to Consultation
				 */
				patientDAOInf.updateConsultationAppointmentStatus(patientForm.getPatientID(), patientForm.getAptID());

				/* Retrieve labReport List */
				labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
						loginForm.getClinicID());

				String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
				request.setAttribute("paymentType", paymentType);

				String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

				request.setAttribute("medicalCertiText", medicatCertificate);

				String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

				request.setAttribute("referralLetter", referralLetter);

				drugList = configurationUtil.getTradeNameList();

				InvestigationList = configurationUtil.getInvestigationList();

				DiagnosticList1 = configurationUtil.getDiagnosticList1();

				ProcedureList = configurationUtil.getProceduresList();

				frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

				request.setAttribute("opticianFloatCheck", "empty");

				categoryList = configurationUtil.getCategoryList();

				doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

				request.setAttribute("apptID", patientForm.getAptID());

				// Inserting values into Audit table
				daoInf.insertAudit(request.getRemoteAddr(), "Add OPD Visit", loginForm.getUserID());

				/*
				 * Getting form name to be display based on logged in User
				 */
				String[] formNameArray = loginForm.getOPDJSPName().split("&");

				System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[0].trim());

				// Setting add opd page name value in pageName variable
				setPageName(formNameArray[0].trim());

				return SUCCESS;

			} else {

				addActionError("Failed to add new OPD visit.Please check server logs for more details.");

				diagnoseList = configurationUtil.getDiagnoseList();

				patientList = patientDAOInf.retrieveLastEnteredVisitDetail(patientForm.getPatientID(),
						patientForm.getLastVisitID(), loginForm.getClinicID(), visitType);

				diagnoseList = configurationUtil.getDiagnoseList();

				String dummy = "";

				request.setAttribute("lasteEnteredVisitList", dummy);

				request.setAttribute("lasteEnteredPrescList", "success");

				request.setAttribute("medicalCertiCheck", "no");
				request.setAttribute("referralLetterCheck", "no");

				drugList = configurationUtil.getTradeNameList();

				InvestigationList = configurationUtil.getInvestigationList();

				DiagnosticList1 = configurationUtil.getDiagnosticList1();

				ProcedureList = configurationUtil.getProceduresList();

				frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

				/* Retrieve labReport List */
				labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
						loginForm.getClinicID());

				boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

				if (visitCheck) {
					billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
				} else {
					billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
							loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
				}

				String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
				request.setAttribute("paymentType", paymentType);

				request.setAttribute("opticianFloatCheck", "empty");

				String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

				request.setAttribute("medicalCertiText", medicatCertificate);

				String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

				request.setAttribute("referralLetter", referralLetter);

				doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

				categoryList = configurationUtil.getCategoryList();

				/*
				 * Update appointment status to Consultation
				 */
				patientDAOInf.updateConsultationAppointmentStatus(patientForm.getPatientID(), patientForm.getAptID());

				/*
				 * retrieve last inserted visit ID for care type OPD by patientID
				 */

				request.setAttribute("apptID", patientForm.getAptID());

				// Inserting values into Audit table
				daoInf.insertAudit(request.getRemoteAddr(), "Add OPD Visit Exception occurred", loginForm.getUserID());

				/*
				 * Getting form name to be display based on logged in User
				 */
				String[] formNameArray = loginForm.getOPDJSPName().split("&");

				System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[0].trim());

				// Setting add opd page name value in pageName variable
				setPageName(formNameArray[0].trim());

				return ERROR;

			}
		}
	}

	public String printAddNewOPDVisit() {
		patientDAOInf = new PatientDAOImpl();

		serviceInf = new eDhanvantariServiceImpl();

		SMSSender smsSender = new SMSSender();

		EmailUtil emailUtil = new EmailUtil();

		ConvertToPDFUtil convertToPDFUtil = new ConvertToPDFUtil();

		LoginDAOInf daoInf = new LoginDAOImpl();

		ClinicDAOInf daoInf1 = new ClinicDAOImpl();

		RegistrationDAOinf registrationDAOinf = new RegistrationDAOImpl();

		PrescriptionManagementDAOInf managementDAOInf = new PrescriptionManagementDAOImpl();

		String accessKey = xmlUtil.getAccessKey();

		String secreteKey = xmlUtil.getSecreteKey();

		AWSS3Connect awss3Connect = new AWSS3Connect();

		// getting input file location from S3 bucket
		String s3reportFilePath = xmlUtil.getS3RDMLReportFilePath();

		String s3LogoFilePath = xmlUtil.getS3RDMLFilePath();

		// getting s3 bucket name
		String bucketName = util.getS3BucketName();

		// getting s3 bucket region
		String bucketRegion = xmlUtil.getS3BucketRegion();

		// Set the presigned URL to expire after one hour.
		java.util.Date expiration = new java.util.Date();
		long expTimeMillis = expiration.getTime();
		expTimeMillis += 1000 * 60 * 60;
		expiration.setTime(expTimeMillis);

		AWSCredentials credentials = new BasicAWSCredentials(accessKey, secreteKey);

		AmazonS3 s3 = AmazonS3ClientBuilder.standard().withCredentials(new AWSStaticCredentialsProvider(credentials))
				.withRegion(bucketRegion).build();

		/*
		 * Getting user role from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");

		String username = patientDAOInf.retrieveUsernameBYuserID(loginForm.getUserID());

		patientDAOInf = new PatientDAOImpl();

		serviceInf = new eDhanvantariServiceImpl();

		diagnoseList = configurationUtil.getDiagnoseList();

		/*
		 * Setting clinicID from session into clinicID variable from PatientForm
		 */
		patientForm.setClinicID(loginForm.getClinicID());

		patientForm.setVisitTypeID(loginForm.getVisitTypeID());

		String visitType = daoInf1.retrieveVisitTypeNameByID(loginForm.getVisitTypeID());

		patientList = serviceInf.addNewOPDVisit(patientForm, visitType);

		if (patientList.size() > 0) {

			addActionMessage("New OPD visit added successfully.");

			// adding data to maintain visit edit history
			patientForm.setAction("Add");
			patientForm.setVisitType("OPD");
			patientForm.setUserID(loginForm.getUserID());
			patientForm.setClinicID(loginForm.getClinicID());

			patientDAOInf.insertVisitEditHistoryDetails(patientForm);

			String dummy = "success";

			request.setAttribute("lasteEnteredVisitList", "success");

			request.setAttribute("lasteEnteredPrescList", "success");

			String check1 = patientDAOInf.verifyReferralLetter(patientForm.getVisitID());
			System.out.println("check1 value in action:" + check1);
			request.setAttribute("referralLetterCheck", check1);

			String check = patientDAOInf.verifyMedicalCertificate(patientForm.getVisitID());
			System.out.println("check value in action:" + check);
			request.setAttribute("medicalCertiCheck", check);

			boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

			patientList = patientDAOInf.retrieveLastEnteredVisitDetail(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID(), visitType);

			if (visitCheck) {
				billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
			} else {
				billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
						loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
			}

			/*
			 * Update appointment status to Consultation
			 */
			patientDAOInf.updateConsultationAppointmentStatus(patientForm.getPatientID(), patientForm.getAptID());

			/* Retrieve labReport List */
			labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
					loginForm.getClinicID());

			String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
			request.setAttribute("paymentType", paymentType);

			String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

			request.setAttribute("medicalCertiText", medicatCertificate);

			String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

			request.setAttribute("referralLetter", referralLetter);

			drugList = configurationUtil.getTradeNameList();

			InvestigationList = configurationUtil.getInvestigationList();

			frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

			request.setAttribute("opticianFloatCheck", "empty");

			categoryList = configurationUtil.getCategoryList();

			doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

			request.setAttribute("apptID", patientForm.getAptID());

			HttpServletRequest request = ServletActionContext.getRequest();

			ServletContext context = request.getServletContext();
			String realPath = context.getRealPath("/");

			String pdfOutFIleName = patientForm.getFirstName() + patientForm.getLastName() + patientForm.getPatientID()
					+ "_" + patientForm.getVisitID() + "Visit.pdf";

			if (patientForm.getSelectedPrintField() == null || patientForm.getSelectedPrintField().isEmpty()) {
				message = convertToPDFUtil.convertOPDPDF(patientForm.getVisitID(), patientForm.getPatientID(),
						loginForm.getClinicID(), realPath, pdfOutFIleName, visitType, s3, s3LogoFilePath, bucketName,
						null);
			} else {
				message = convertToPDFUtil.convertOPDPDF(patientForm.getVisitID(), patientForm.getPatientID(),
						loginForm.getClinicID(), realPath, pdfOutFIleName, visitType, s3, s3LogoFilePath, bucketName,
						patientForm.getSelectedPrintField());
			}

			System.out.println("ppdfOutFIleName ::: " + pdfOutFIleName);
			request.setAttribute("PDFOutFileName", pdfOutFIleName);

			File inputFile = new File(realPath + "/" + pdfOutFIleName);

			message = awss3Connect.pushFile(inputFile, pdfOutFIleName, bucketName, bucketRegion, s3reportFilePath);

			S3ObjectInputStream s3ObjectInputStream = s3
					.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, pdfOutFIleName))
					.getObjectContent();

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Add OPD Visit", loginForm.getUserID());

			/*
			 * Getting form name to be display based on logged in User
			 */
			String[] formNameArray = loginForm.getOPDJSPName().split("&");

			System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[0].trim());

			// Setting add opd page name value in pageName variable
			setPageName(formNameArray[0].trim());

			return SUCCESS;

		} else {

			addActionError("Failed to add new OPD visit.Please check server logs for more details.");

			patientList = patientDAOInf.retrieveLastEnteredVisitDetail(patientForm.getPatientID(),
					patientForm.getLastVisitID(), loginForm.getClinicID(), visitType);

			diagnoseList = configurationUtil.getDiagnoseList();

			String dummy = "";

			request.setAttribute("lasteEnteredVisitList", dummy);

			request.setAttribute("lasteEnteredPrescList", "success");

			request.setAttribute("medicalCertiCheck", "no");
			request.setAttribute("referralLetterCheck", "no");

			drugList = configurationUtil.getTradeNameList();

			InvestigationList = configurationUtil.getInvestigationList();

			frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

			/* Retrieve labReport List */
			labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
					loginForm.getClinicID());

			boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

			if (visitCheck) {
				billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
			} else {
				billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
						loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
			}

			String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
			request.setAttribute("paymentType", paymentType);

			request.setAttribute("opticianFloatCheck", "empty");

			String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

			request.setAttribute("medicalCertiText", medicatCertificate);

			String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

			request.setAttribute("referralLetter", referralLetter);

			doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

			categoryList = configurationUtil.getCategoryList();

			/*
			 * Update appointment status to Consultation
			 */
			patientDAOInf.updateConsultationAppointmentStatus(patientForm.getPatientID(), patientForm.getAptID());

			/*
			 * retrieve last inserted visit ID for care type OPD by patientID
			 */

			request.setAttribute("apptID", patientForm.getAptID());

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Add OPD Visit Exception occurred", loginForm.getUserID());

			/*
			 * Getting form name to be display based on logged in User
			 */
			String[] formNameArray = loginForm.getOPDJSPName().split("&");

			System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[0].trim());

			// Setting add opd page name value in pageName variable
			setPageName(formNameArray[0].trim());

			return ERROR;

		}

	}

	/**
	 * 
	 * @return
	 * @throws Exception
	 */
	public String printOPDVisit() throws Exception {

		patientDAOInf = new PatientDAOImpl();

		serviceInf = new eDhanvantariServiceImpl();

		ConvertToPDFUtil convertToPDFUtil = new ConvertToPDFUtil();
		ClinicDAOInf daoInf1 = new ClinicDAOImpl();
		/*
		 * Getting user role from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");

		LoginDAOInf daoInf = new LoginDAOImpl();

		PrescriptionManagementDAOInf managementDAOInf = new PrescriptionManagementDAOImpl();

		String accessKey = xmlUtil.getAccessKey();

		String secreteKey = xmlUtil.getSecreteKey();

		AWSS3Connect awss3Connect = new AWSS3Connect();

		// getting input file location from S3 bucket
		String s3reportFilePath = xmlUtil.getS3RDMLReportFilePath();

		// getting s3 bucket name
		String bucketName = util.getS3BucketName();

		// getting s3 bucket region
		String bucketRegion = xmlUtil.getS3BucketRegion();

		String s3LogoFilePath = xmlUtil.getS3RDMLFilePath();

		AWSCredentials credentials = new BasicAWSCredentials(accessKey, secreteKey);

		AmazonS3 s3 = AmazonS3ClientBuilder.standard().withCredentials(new AWSStaticCredentialsProvider(credentials))
				.withRegion(bucketRegion).build();

		/*
		 * Setting clinicID from session into clinicID variable from PatientForm
		 */
		patientForm.setClinicID(loginForm.getClinicID());

		patientForm.setVisitTypeID(loginForm.getVisitTypeID());

		ServletContext context = request.getServletContext();

		String realPath = context.getRealPath("/");

		// String pdfOutFIleName = reportFilePath + patientForm.getFirstName() +
		// patientForm.getLastName()
		String pdfOutFIleName = patientForm.getFirstName() + patientForm.getLastName() + patientForm.getPatientID()
				+ "_" + patientForm.getVisitID() + "opd.pdf";

		String visitType = daoInf1.retrieveVisitTypeNameByID(loginForm.getVisitTypeID());
		System.out.println("visitype is ::" + visitType);

		String check1 = patientDAOInf.verifyReferralLetter(patientForm.getVisitID());
		System.out.println("check1 value in action:" + check1);
		request.setAttribute("referralLetterCheck", check1);

		String check = patientDAOInf.verifyMedicalCertificate(patientForm.getVisitID());
		System.out.println("check value in action:" + check);
		request.setAttribute("medicalCertiCheck", check);

		if (patientForm.getSelectedPrintField() == null || patientForm.getSelectedPrintField().isEmpty()) {
			message = convertToPDFUtil.convertOPDPDF(patientForm.getVisitID(), patientForm.getPatientID(),
					loginForm.getClinicID(), realPath, pdfOutFIleName, visitType, s3, s3LogoFilePath, bucketName, null);
		} else {
			message = convertToPDFUtil.convertOPDPDF(patientForm.getVisitID(), patientForm.getPatientID(),
					loginForm.getClinicID(), realPath, pdfOutFIleName, visitType, s3, s3LogoFilePath, bucketName,
					patientForm.getSelectedPrintField());
		}

		if (message.equalsIgnoreCase("success")) {

			// adding data to maintain visit edit history
			patientForm.setAction("Edit");
			patientForm.setVisitType("OPD");
			patientForm.setUserID(loginForm.getUserID());
			patientForm.setClinicID(loginForm.getClinicID());

			patientDAOInf.insertVisitEditHistoryDetails(patientForm);

			File inputFile = new File(realPath + "/" + pdfOutFIleName);

			// Storing file to S3 RDML INPUT FILE location
			message = awss3Connect.pushFile(inputFile, pdfOutFIleName, bucketName, bucketRegion, s3reportFilePath);

			S3ObjectInputStream s3ObjectInputStream = s3
					.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, pdfOutFIleName))
					.getObjectContent();

			System.out.println("s3ObjectInputStream.........: " + s3ObjectInputStream + "--" + pdfOutFIleName);
			patientForm.setFileInputStream(s3ObjectInputStream);
			request.setAttribute("PDFOutFileName", pdfOutFIleName);
			patientForm.setFileName(pdfOutFIleName);

			patientList = patientDAOInf.retrieveLastEnteredVisitDetail(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID(), visitType);

			boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

			if (visitCheck) {
				billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
			} else {
				billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
						loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
			}

			/* Retrieve labReport List */
			labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
					loginForm.getClinicID());

			String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
			request.setAttribute("paymentType", paymentType);

			String dummy = "";

			request.setAttribute("lasteEnteredVisitList", "");

			request.setAttribute("lasteEnteredPrescList", dummy);

			String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

			request.setAttribute("medicalCertiText", medicatCertificate);

			String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

			request.setAttribute("referralLetter", referralLetter);

			complaintList = patientDAOInf.retrievecomplaintList(patientForm.getVisitID());

			historyList = patientDAOInf.retrieveMedicalHistoryList(patientForm.getPatientID());

			medicationList = patientDAOInf.retrieveCurrentMedicationList(patientForm.getPatientID());

			drugList = configurationUtil.getTradeNameList();

			InvestigationList = configurationUtil.getInvestigationList();

			frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

			request.setAttribute("opticianFloatCheck", "empty");

			doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

			categoryList = configurationUtil.getCategoryList();

			request.setAttribute("apptID", patientForm.getAptID());

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Add OPD Visit", loginForm.getUserID());

			/*
			 * Getting form name to be display based on logged in User
			 */
			String[] formNameArray = loginForm.getOPDJSPName().split("&");

			System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[0].trim());

			// Setting add opd page name value in pageName variable
			setPageName(formNameArray[0].trim());

			return SUCCESS;

		} else {

			addActionError("Failed to create OPD visit PDF.Please check server logs for more details.");

			String dummy = "success";

			request.setAttribute("lasteEnteredVisitList", "");

			request.setAttribute("lasteEnteredPrescList", dummy);

			request.setAttribute("opticianFloatCheck", "empty");

			patientList = patientDAOInf.retrieveLastEnteredVisitDetail(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID(), visitType);

			drugList = configurationUtil.getTradeNameList();

			InvestigationList = configurationUtil.getInvestigationList();

			frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

			boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

			if (visitCheck) {
				billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
			} else {
				billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
						loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
			}

			/* Retrieve labReport List */
			labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
					loginForm.getClinicID());

			String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
			request.setAttribute("paymentType", paymentType);

			request.setAttribute("opticianFloatCheck", "empty");

			String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

			request.setAttribute("medicalCertiText", medicatCertificate);

			String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

			request.setAttribute("referralLetter", referralLetter);

			request.setAttribute("apptID", patientForm.getAptID());

			complaintList = patientDAOInf.retrievecomplaintList(patientForm.getVisitID());

			historyList = patientDAOInf.retrieveMedicalHistoryList(patientForm.getPatientID());

			medicationList = patientDAOInf.retrieveCurrentMedicationList(patientForm.getPatientID());

			doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

			categoryList = configurationUtil.getCategoryList();

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Add OPD Visit Exception occurred", loginForm.getUserID());

			/*
			 * Getting form name to be display based on logged in User
			 */
			String[] formNameArray = loginForm.getOPDJSPName().split("&");

			System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[0].trim());

			// Setting add opd page name value in pageName variable
			setPageName(formNameArray[0].trim());

			return ERROR;

		}
	}

	/**
	 * 
	 * @return
	 * @throws Exception
	 */
	public String renderIPDVisit() throws Exception {

		patientDAOInf = new PatientDAOImpl();

		/*
		 * Getting user role from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");

		/*
		 * Retrieving last visitNumber for the patient in order to check whether OPD
		 * visit is added for the patient or not, if not then give error msg saying no
		 * OPD visit added. Please add new OPD visit first, else proceed further.
		 */
		int visitNumber = patientDAOInf.retrieveVisitNumber(patientForm.getPatientID(), loginForm.getClinicID());

		// if (visitNumber != 0) {
		if (visitNumber > 1) {

			/*
			 * Retrieving appointment ID in order to set it into patientForm
			 */
			int aptID = patientForm.getAptID();

			/*
			 * retrieving patient details from Patient table based on patientID
			 */
			patientList = patientDAOInf.retrievePatientDetailsByPatientID(patientForm.getPatientID(), 0,
					loginForm.getClinicID());

			// Setting appointmentID into request variable
			request.setAttribute("appointmentID", String.valueOf(aptID));

			String investigationOECheck = "empty";

			request.setAttribute("renderCheck", "check");

			request.setAttribute("investigationOECheck", investigationOECheck);

			diagnoseList = configurationUtil.getDiagnoseList();

			String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

			request.setAttribute("medicalCertiText", medicatCertificate);

			String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

			request.setAttribute("referralLetter", referralLetter);

			doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

			drugList = configurationUtil.getTradeNameList();

			InvestigationList = configurationUtil.getInvestigationList();

			frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

			categoryList = configurationUtil.getCategoryList();

			/*
			 * Getting form name to be display based on logged in User
			 */
			String[] formNameArray = loginForm.getIPDJSPName().split("&");

			System.out.println("Add IPD JSP Page name for logged in user is ::: " + formNameArray[0].trim());

			// Setting add ipd page name value in pageName variable
			setPageName(formNameArray[0].trim());

			return SUCCESS;

		} else {

			addActionError("No OPD visit added for this patient. Please add new OPD visit first.");

			return ERROR;

		}
	}

	/**
	 * 
	 * @return
	 * @throws Exception
	 */
	public String addNewOptician() throws Exception {
		patientDAOInf = new PatientDAOImpl();
		serviceInf = new eDhanvantariServiceImpl();

		ConvertToPDFUtil convertToPDFUtil = new ConvertToPDFUtil();

		/*
		 * Getting user role from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");

		LoginDAOInf daoInf = new LoginDAOImpl();

		ClinicDAOInf daoInf1 = new ClinicDAOImpl();

		PrescriptionManagementDAOInf managementDAOInf = new PrescriptionManagementDAOImpl();

		String accessKey = xmlUtil.getAccessKey();

		String secreteKey = xmlUtil.getSecreteKey();

		AWSS3Connect awss3Connect = new AWSS3Connect();

		// getting input file location from S3 bucket
		String s3reportFilePath = xmlUtil.getS3RDMLReportFilePath();

		// getting s3 bucket name
		String bucketName = util.getS3BucketName();

		// getting s3 bucket region
		String bucketRegion = xmlUtil.getS3BucketRegion();

		String s3LogoFilePath = xmlUtil.getS3RDMLFilePath();

		AWSCredentials credentials = new BasicAWSCredentials(accessKey, secreteKey);

		AmazonS3 s3 = AmazonS3ClientBuilder.standard().withCredentials(new AWSStaticCredentialsProvider(credentials))
				.withRegion(bucketRegion).build();

		/*
		 * Setting clinicID from session into clinicID variable from PatientForm
		 */
		patientForm.setClinicID(loginForm.getClinicID());

		patientForm.setVisitTypeID(loginForm.getVisitTypeID());

		String check1 = patientDAOInf.verifyReferralLetter(patientForm.getVisitID());
		System.out.println("check1 value in action:" + check1);
		request.setAttribute("referralLetterCheck", check1);

		String check = patientDAOInf.verifyMedicalCertificate(patientForm.getVisitID());
		System.out.println("check value in action:" + check);
		request.setAttribute("medicalCertiCheck", check);

		if (loginForm.getUserType().equals("optician")) {

			/*
			 * Retrieving last entered visit's visitNumber and adding one to it in order to
			 * insert new visitNumber into Patient table
			 */
			int visitNumber = patientDAOInf.retrieveVisitNumber(patientForm.getPatientID(), patientForm.getClinicID());

			// visitNumber += 1;

			message = patientDAOInf.insertOPDVisitForOpticianDetails(patientForm, visitNumber);

			/*
			 * Retrieving last visitID for visit Type 'New' to insert it as the value of
			 * newVisitRef if visitType selected by user is 'Follow-up'
			 */
			int visitID = patientDAOInf.retrievVisitID(patientForm.getPatientID(), patientForm.getClinicID());

			patientForm.setVisitID(visitID);

		}

		/*
		 * Checking whether visitID is 0, if yes, then give error msg saying please add
		 * visit first else proceed further
		 */
		if (patientForm.getVisitID() == 0) {

			addActionError("No visit added. Please add visit first.");

			/*
			 * retrieve last inserted visit ID for care type OPD by patientID
			 */
			int lastOPDVisitID = patientDAOInf.retrievVisitID(patientForm.getPatientID(), patientForm.getClinicID());

			String visitType = daoInf1.retrieveVisitTypeNameByID(loginForm.getVisitTypeID());
			System.out.println("visitype is ::" + visitType);

			patientList = patientDAOInf.retrieveLastEnteredVisitDetail(patientForm.getPatientID(), lastOPDVisitID,
					loginForm.getClinicID(), visitType);

			lasteEnteredVisitList = patientDAOInf.retrieveLastEnteredVisitDetail(patientForm.getPatientID());

			boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

			if (visitCheck) {
				billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
			} else {
				billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
						loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
			}

			/* Retrieve labReport List */
			labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
					loginForm.getClinicID());

			String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
			request.setAttribute("paymentType", paymentType);

			String dummy = "";

			request.setAttribute("lasteEnteredVisitList", dummy);

			/*
			 * retrieving prescription list by visitID
			 */
			prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID());

			InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

			diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());
			/*
			 * retrieving symptomCheck list by visitID
			 */
			symptomList = patientDAOInf.retrievesymptomCheckList(patientForm.getVisitID());

			complaintList = patientDAOInf.retrievecomplaintList(patientForm.getVisitID());

			request.setAttribute("apptID", patientForm.getAptID());

			request.setAttribute("opticianFloatCheck", "empty");

			doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

			diagnoseList = configurationUtil.getDiagnoseList();

			drugList = configurationUtil.getTradeNameList();

			InvestigationList = configurationUtil.getInvestigationList();

			categoryList = configurationUtil.getCategoryList();

			frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Add OPD Optician Exception occurred", loginForm.getUserID());

			/*
			 * Getting form name to be display based on logged in User
			 */
			String[] formNameArray = loginForm.getOPDJSPName().split("&");

			System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[0].trim());

			// Setting add opd page name value in pageName variable
			setPageName(formNameArray[0].trim());

			return ERROR;

		} else {

			boolean checkOptician = patientDAOInf.verifyVisitExists("Optometry", patientForm.getVisitID());

			if (checkOptician) {

				message = serviceInf.updateOptician(patientForm);
			} else {

				message = serviceInf.addOptician(patientForm);
			}

			if (message.equalsIgnoreCase("success")) {

				HttpServletRequest request = ServletActionContext.getRequest();

				ServletContext context = request.getServletContext();

				String realPath = context.getRealPath("/");
				System.out.println("Real path is :: " + realPath);

				// String pdfOutFIleName = realPath + patientForm.getFirstName() +
				// patientForm.getLastName()
				String pdfOutFIleName = patientForm.getFirstName() + patientForm.getLastName()
						+ patientForm.getPatientID() + "_" + patientForm.getVisitID() + "opt" + ".pdf";

				message = convertToPDFUtil.convertOpticianPDF(patientForm.getPatientID(), patientForm.getVisitID(),
						patientForm.getOpticinID(), patientForm.getLastVisitID(), loginForm.getUserType(), realPath,
						pdfOutFIleName, s3, s3LogoFilePath, bucketName);
				if (message.equalsIgnoreCase("success")) {
					addActionMessage("Successfully inserted Optician details.");

					File inputFile = new File(realPath + "/" + pdfOutFIleName);

					// Storing file to S3 RDML INPUT FILE location
					message = awss3Connect.pushFile(inputFile, pdfOutFIleName, bucketName, bucketRegion,
							s3reportFilePath);

					S3ObjectInputStream s3ObjectInputStream = s3
							.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, pdfOutFIleName))
							.getObjectContent();

					patientForm.setFileInputStream(s3ObjectInputStream);

					patientForm.setFileName(pdfOutFIleName);

					request.setAttribute("lasteEnteredVisitList", "");

					String opticianTabEnable = "Enable";

					request.setAttribute("opticianTabEnable", opticianTabEnable);

					String visitType = daoInf1.retrieveVisitTypeNameByID(loginForm.getVisitTypeID());
					System.out.println("visitype is ::" + visitType);

					patientList = patientDAOInf.retrieveLastEnteredVisitDetail(patientForm.getPatientID(),
							patientForm.getVisitID(), loginForm.getClinicID(), visitType);

					boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

					if (visitCheck) {
						billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
					} else {
						billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
								loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
					}

					/* Retrieve labReport List */
					labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
							loginForm.getClinicID());

					String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
					request.setAttribute("paymentType", paymentType);

					/*
					 * retrieving prescription list by visitID
					 */
					prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
							patientForm.getVisitID(), loginForm.getClinicID());

					InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

					diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());
					/*
					 * retrieving symptomCheck list by visitID
					 */
					symptomList = patientDAOInf.retrievesymptomCheckList(patientForm.getVisitID());

					complaintList = patientDAOInf.retrievecomplaintList(patientForm.getVisitID());

					diagnoseList = configurationUtil.getDiagnoseList();

					drugList = configurationUtil.getTradeNameList();

					InvestigationList = configurationUtil.getInvestigationList();

					frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

					request.setAttribute("apptID", patientForm.getAptID());

					categoryList = configurationUtil.getCategoryList();

					doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

					// Inserting values into Audit table
					daoInf.insertAudit(request.getRemoteAddr(), "Add OPD Optician", loginForm.getUserID());

					/*
					 * Getting form name to be display based on logged in User
					 */
					String[] formNameArray = loginForm.getOPDJSPName().split("&");

					System.out
							.println("Add OPtician JSP Page name for logged in user is ::: " + formNameArray[0].trim());

					// Setting add opd page name value in pageName variable
					setPageName(formNameArray[0].trim());

					return SUCCESS;
				} else {
					addActionError("Failed to add Optician details. Please check server logs for more details.");

					lastEneteredOpticianList = patientDAOInf.retrieveLastOpticianDetails(patientForm.getOpticinID());

					String visitType = daoInf1.retrieveVisitTypeNameByID(loginForm.getVisitTypeID());

					patientList = patientDAOInf.retrieveLastEnteredVisitDetail(patientForm.getPatientID(),
							patientForm.getLastVisitID(), loginForm.getClinicID(), visitType);

					boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

					if (visitCheck) {
						billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
					} else {
						billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
								loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
					}

					/* Retrieve labReport List */
					labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
							loginForm.getClinicID());

					String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
					request.setAttribute("paymentType", paymentType);

					request.setAttribute("lasteEnteredVisitList", "");

					/*
					 * retrieving prescription list by visitID
					 */
					prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
							patientForm.getVisitID(), loginForm.getClinicID());

					InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

					diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());
					/*
					 * retrieving symptomCheck list by visitID
					 */
					symptomList = patientDAOInf.retrievesymptomCheckList(patientForm.getVisitID());

					complaintList = patientDAOInf.retrievecomplaintList(patientForm.getVisitID());

					diagnoseList = configurationUtil.getDiagnoseList();

					drugList = configurationUtil.getTradeNameList();

					InvestigationList = configurationUtil.getInvestigationList();

					categoryList = configurationUtil.getCategoryList();

					frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

					request.setAttribute("apptID", patientForm.getAptID());

					String opticianTabEnable = "Enable";

					request.setAttribute("opticianTabEnable", opticianTabEnable);

					doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

					// Inserting values into Audit table
					daoInf.insertAudit(request.getRemoteAddr(), "Add OPD Optician Exception occurred",
							loginForm.getUserID());

					/*
					 * Getting form name to be display based on logged in User
					 */
					String[] formNameArray = loginForm.getOPDJSPName().split("&");

					System.out
							.println("Add optician JSP Page name for logged in user is ::: " + formNameArray[0].trim());

					// Setting add opd page name value in pageName variable
					setPageName(formNameArray[0].trim());

					return ERROR;
				}
			} else {
				addActionError("Failed to insert Optician details. Please check log for more detials.");

				lastEneteredOpticianList = patientDAOInf.retrieveLastOpticianDetails(patientForm.getVisitID());

				request.setAttribute("apptID", patientForm.getAptID());

				String visitType = daoInf1.retrieveVisitTypeNameByID(loginForm.getVisitTypeID());

				patientList = patientDAOInf.retrieveLastEnteredVisitDetail(patientForm.getPatientID(),
						patientForm.getLastVisitID(), loginForm.getClinicID(), visitType);

				boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

				if (visitCheck) {
					billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
				} else {
					billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
							loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
				}

				/* Retrieve labReport List */
				labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
						loginForm.getClinicID());

				String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
				request.setAttribute("paymentType", paymentType);

				request.setAttribute("lasteEnteredVisitList", "");

				/*
				 * retrieving prescription list by visitID
				 */
				prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID());

				InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

				diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());
				/*
				 * retrieving symptomCheck list by visitID
				 */
				symptomList = patientDAOInf.retrievesymptomCheckList(patientForm.getVisitID());

				complaintList = patientDAOInf.retrievecomplaintList(patientForm.getVisitID());

				diagnoseList = configurationUtil.getDiagnoseList();

				drugList = configurationUtil.getTradeNameList();

				InvestigationList = configurationUtil.getInvestigationList();

				categoryList = configurationUtil.getCategoryList();

				frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

				String opticianTabEnable = "Enable";

				request.setAttribute("opticianTabEnable", opticianTabEnable);

				doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

				// Inserting values into Audit table
				daoInf.insertAudit(request.getRemoteAddr(), "Add OPD Optician Exception occurred",
						loginForm.getUserID());

				/*
				 * Getting form name to be display based on logged in User
				 */
				String[] formNameArray = loginForm.getOPDJSPName().split("&");

				System.out.println("Add optician JSP Page name for logged in user is ::: " + formNameArray[0].trim());

				// Setting add opd page name value in pageName variable
				setPageName(formNameArray[0].trim());

				return ERROR;
			}
		}
	}

	/**
	 * 
	 * @return
	 * @throws Exception
	 */
	public String printOptician() throws Exception {
		patientDAOInf = new PatientDAOImpl();
		serviceInf = new eDhanvantariServiceImpl();

		ConvertToPDFUtil convertToPDFUtil = new ConvertToPDFUtil();
		ClinicDAOInf daoInf1 = new ClinicDAOImpl();
		/*
		 * Getting user role from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");

		LoginDAOInf daoInf = new LoginDAOImpl();

		PrescriptionManagementDAOInf managementDAOInf = new PrescriptionManagementDAOImpl();

		String accessKey = xmlUtil.getAccessKey();

		String secreteKey = xmlUtil.getSecreteKey();

		AWSS3Connect awss3Connect = new AWSS3Connect();

		// getting input file location from S3 bucket
		String s3reportFilePath = xmlUtil.getS3RDMLReportFilePath();

		// getting s3 bucket name
		String bucketName = util.getS3BucketName();

		// getting s3 bucket region
		String bucketRegion = xmlUtil.getS3BucketRegion();

		String s3LogoFilePath = xmlUtil.getS3RDMLFilePath();

		AWSCredentials credentials = new BasicAWSCredentials(accessKey, secreteKey);

		AmazonS3 s3 = AmazonS3ClientBuilder.standard().withCredentials(new AWSStaticCredentialsProvider(credentials))
				.withRegion(bucketRegion).build();

		/*
		 * Setting clinicID from session into clinicID variable from PatientForm
		 */
		patientForm.setClinicID(loginForm.getClinicID());

		patientForm.setVisitTypeID(loginForm.getVisitTypeID());

		String check1 = patientDAOInf.verifyReferralLetter(patientForm.getVisitID());

		request.setAttribute("referralLetterCheck", check1);

		String check = patientDAOInf.verifyMedicalCertificate(patientForm.getVisitID());

		request.setAttribute("medicalCertiCheck", check);

		if (loginForm.getUserType().equals("optician")) {

			/*
			 * Retrieving last entered visit's visitNumber and adding one to it in order to
			 * insert new visitNumber into Patient table
			 */
			int visitNumber = patientDAOInf.retrieveVisitNumber(patientForm.getPatientID(), patientForm.getClinicID());

			// visitNumber += 1;

			message = patientDAOInf.insertOPDVisitForOpticianDetails(patientForm, visitNumber);

			/*
			 * Retrieving last visitID for visit Type 'New' to insert it as the value of
			 * newVisitRef if visitType selected by user is 'Follow-up'
			 */
			int visitID = patientDAOInf.retrievVisitID(patientForm.getPatientID(), patientForm.getClinicID());

			patientForm.setVisitID(visitID);

		}

		/*
		 * Checking whether visitID is 0, if yes, then give error msg saying please add
		 * visit first else proceed further
		 */
		if (patientForm.getVisitID() == 0) {

			addActionError("No visit added. Please add visit first.");

			/*
			 * retrieve last inserted visit ID for care type OPD by patientID
			 */
			int lastOPDVisitID = patientDAOInf.retrievVisitID(patientForm.getPatientID(), patientForm.getClinicID());

			String visitType = daoInf1.retrieveVisitTypeNameByID(loginForm.getVisitTypeID());

			patientList = patientDAOInf.retrieveLastEnteredVisitDetail(patientForm.getPatientID(), lastOPDVisitID,
					loginForm.getClinicID(), visitType);

			lasteEnteredVisitList = patientDAOInf.retrieveLastEnteredVisitDetail(patientForm.getPatientID());

			boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

			if (visitCheck) {
				billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
			} else {
				billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
						loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
			}

			/* Retrieve labReport List */
			labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
					loginForm.getClinicID());

			String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
			request.setAttribute("paymentType", paymentType);

			String dummy = "";

			request.setAttribute("lasteEnteredVisitList", dummy);

			/*
			 * retrieving prescription list by visitID
			 */
			prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID());

			InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

			diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());
			/*
			 * retrieving symptomCheck list by visitID
			 */
			symptomList = patientDAOInf.retrievesymptomCheckList(patientForm.getVisitID());

			complaintList = patientDAOInf.retrievecomplaintList(patientForm.getVisitID());

			request.setAttribute("apptID", patientForm.getAptID());

			request.setAttribute("opticianFloatCheck", "empty");

			doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

			diagnoseList = configurationUtil.getDiagnoseList();

			drugList = configurationUtil.getTradeNameList();

			InvestigationList = configurationUtil.getInvestigationList();

			categoryList = configurationUtil.getCategoryList();

			frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Add OPD Optician Exception occurred", loginForm.getUserID());

			/*
			 * Getting form name to be display based on logged in User
			 */
			String[] formNameArray = loginForm.getOPDJSPName().split("&");

			System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[0].trim());

			// Setting add opd page name value in pageName variable
			setPageName(formNameArray[0].trim());

			return ERROR;

		} else {

			boolean checkOptician = patientDAOInf.verifyVisitExists("Optometry", patientForm.getVisitID());

			if (checkOptician) {

				message = serviceInf.updateOptician(patientForm);
			} else {

				message = serviceInf.addOptician(patientForm);
			}

			if (message.equalsIgnoreCase("success")) {

				HttpServletRequest request = ServletActionContext.getRequest();

				ServletContext context = request.getServletContext();

				String realPath = context.getRealPath("/");
				System.out.println("Real path is :: " + realPath);

				// String pdfOutFIleName = reportFilePath + patientForm.getFirstName() +
				// patientForm.getLastName()
				String pdfOutFIleName = patientForm.getFirstName() + patientForm.getLastName()
						+ patientForm.getPatientID() + "_" + patientForm.getVisitID() + "opt" + ".pdf";

				message = convertToPDFUtil.convertOpticianPDF(patientForm.getPatientID(), patientForm.getVisitID(),
						patientForm.getOpticinID(), patientForm.getLastVisitID(), loginForm.getUserType(), realPath,
						pdfOutFIleName, s3, s3LogoFilePath, bucketName);
				if (message.equalsIgnoreCase("success")) {
					addActionMessage("Successfully inserted Optician details.");

					File inputFile = new File(realPath + "/" + pdfOutFIleName);

					// Storing file to S3 RDML INPUT FILE location
					message = awss3Connect.pushFile(inputFile, pdfOutFIleName, bucketName, bucketRegion,
							s3reportFilePath);

					S3ObjectInputStream s3ObjectInputStream = s3
							.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, pdfOutFIleName))
							.getObjectContent();

					patientForm.setFileInputStream(s3ObjectInputStream);

					patientForm.setFileName(pdfOutFIleName);

					request.setAttribute("lasteEnteredVisitList", "");

					String opticianTabEnable = "Enable";

					request.setAttribute("opticianTabEnable", opticianTabEnable);

					String visitType = daoInf1.retrieveVisitTypeNameByID(loginForm.getVisitTypeID());
					System.out.println("visitype is ::" + visitType);

					patientList = patientDAOInf.retrieveLastEnteredVisitDetail(patientForm.getPatientID(),
							patientForm.getVisitID(), loginForm.getClinicID(), visitType);

					boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

					if (visitCheck) {
						billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
					} else {
						billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
								loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
					}

					/* Retrieve labReport List */
					labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
							loginForm.getClinicID());

					String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
					request.setAttribute("paymentType", paymentType);

					/*
					 * retrieving prescription list by visitID
					 */
					prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
							patientForm.getVisitID(), loginForm.getClinicID());

					InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

					diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());
					/*
					 * retrieving symptomCheck list by visitID
					 */
					symptomList = patientDAOInf.retrievesymptomCheckList(patientForm.getVisitID());

					complaintList = patientDAOInf.retrievecomplaintList(patientForm.getVisitID());

					diagnoseList = configurationUtil.getDiagnoseList();

					drugList = configurationUtil.getTradeNameList();

					InvestigationList = configurationUtil.getInvestigationList();

					frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

					request.setAttribute("apptID", patientForm.getAptID());

					categoryList = configurationUtil.getCategoryList();

					doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

					// Inserting values into Audit table
					daoInf.insertAudit(request.getRemoteAddr(), "Add OPD Optician", loginForm.getUserID());

					/*
					 * Getting form name to be display based on logged in User
					 */
					String[] formNameArray = loginForm.getOPDJSPName().split("&");

					System.out
							.println("Add OPtician JSP Page name for logged in user is ::: " + formNameArray[0].trim());

					// Setting add opd page name value in pageName variable
					setPageName(formNameArray[0].trim());

					return SUCCESS;
				} else {
					addActionError("Failed to add Optician details. Please check server logs for more details.");

					lastEneteredOpticianList = patientDAOInf.retrieveLastOpticianDetails(patientForm.getOpticinID());

					String visitType = daoInf1.retrieveVisitTypeNameByID(loginForm.getVisitTypeID());
					System.out.println("visitype is ::" + visitType);

					patientList = patientDAOInf.retrieveLastEnteredVisitDetail(patientForm.getPatientID(),
							patientForm.getLastVisitID(), loginForm.getClinicID(), visitType);

					boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

					if (visitCheck) {
						billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
					} else {
						billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
								loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
					}

					/* Retrieve labReport List */
					labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
							loginForm.getClinicID());

					String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
					request.setAttribute("paymentType", paymentType);

					request.setAttribute("lasteEnteredVisitList", "");

					/*
					 * retrieving prescription list by visitID
					 */
					prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
							patientForm.getVisitID(), loginForm.getClinicID());

					InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

					diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());
					/*
					 * retrieving symptomCheck list by visitID
					 */
					symptomList = patientDAOInf.retrievesymptomCheckList(patientForm.getVisitID());

					complaintList = patientDAOInf.retrievecomplaintList(patientForm.getVisitID());

					diagnoseList = configurationUtil.getDiagnoseList();

					drugList = configurationUtil.getTradeNameList();

					InvestigationList = configurationUtil.getInvestigationList();

					categoryList = configurationUtil.getCategoryList();

					frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

					request.setAttribute("apptID", patientForm.getAptID());

					String opticianTabEnable = "Enable";

					request.setAttribute("opticianTabEnable", opticianTabEnable);

					doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

					// Inserting values into Audit table
					daoInf.insertAudit(request.getRemoteAddr(), "Add OPD Optician Exception occurred",
							loginForm.getUserID());

					/*
					 * Getting form name to be display based on logged in User
					 */
					String[] formNameArray = loginForm.getOPDJSPName().split("&");

					System.out
							.println("Add optician JSP Page name for logged in user is ::: " + formNameArray[0].trim());

					// Setting add opd page name value in pageName variable
					setPageName(formNameArray[0].trim());

					return ERROR;
				}
			} else {
				addActionError("Failed to insert Optician details. Please check log for more detials.");

				lastEneteredOpticianList = patientDAOInf.retrieveLastOpticianDetails(patientForm.getVisitID());

				request.setAttribute("apptID", patientForm.getAptID());

				String visitType = daoInf1.retrieveVisitTypeNameByID(loginForm.getVisitTypeID());

				patientList = patientDAOInf.retrieveLastEnteredVisitDetail(patientForm.getPatientID(),
						patientForm.getLastVisitID(), loginForm.getClinicID(), visitType);

				boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

				if (visitCheck) {
					billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
				} else {
					billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
							loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
				}

				/* Retrieve labReport List */
				labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
						loginForm.getClinicID());

				String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
				request.setAttribute("paymentType", paymentType);

				request.setAttribute("lasteEnteredVisitList", "");

				/*
				 * retrieving prescription list by visitID
				 */
				prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID());

				InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

				diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());
				/*
				 * retrieving symptomCheck list by visitID
				 */
				symptomList = patientDAOInf.retrievesymptomCheckList(patientForm.getVisitID());

				complaintList = patientDAOInf.retrievecomplaintList(patientForm.getVisitID());

				diagnoseList = configurationUtil.getDiagnoseList();

				drugList = configurationUtil.getTradeNameList();

				InvestigationList = configurationUtil.getInvestigationList();

				categoryList = configurationUtil.getCategoryList();

				frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

				String opticianTabEnable = "Enable";

				request.setAttribute("opticianTabEnable", opticianTabEnable);

				doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

				// Inserting values into Audit table
				daoInf.insertAudit(request.getRemoteAddr(), "Add OPD Optician Exception occurred",
						loginForm.getUserID());

				/*
				 * Getting form name to be display based on logged in User
				 */
				String[] formNameArray = loginForm.getOPDJSPName().split("&");

				System.out.println("Add optician JSP Page name for logged in user is ::: " + formNameArray[0].trim());

				// Setting add opd page name value in pageName variable
				setPageName(formNameArray[0].trim());

				return ERROR;
			}
		}
	}

	/**
	 * 
	 * @throws Exception
	 */
	public void fetchOldGlassPreviousValue() throws Exception {

		patientDAOInf = new PatientDAOImpl();

		JSONObject values = new JSONObject();

		JSONArray array = new JSONArray();
		values = new JSONObject();

		JSONObject object = new JSONObject();

		try {
			/*
			 * Retrieving visit ID
			 */

			System.out.println("Your VisitID is ::: " + patientForm.getVisitID());

			// int visitID = Integer.parseInt(request.getParameter("visitID"));
			int visitID = patientForm.getVisitID();
			System.out.println("Previous VIsitID is ::: " + visitID);

			/*
			 * Retrieving opticianID based on visitID
			 */
			int opticianID = patientDAOInf.retrieveOpticianID(visitID);

			if (opticianID != 0) {
				values = patientDAOInf.retrieveLastOLDGlasses(opticianID);

				PrintWriter out = response.getWriter();

				out.print(values);

			} else {
				object.put("check", "0");
				array.add(object);

				values.put("Release", array);

				PrintWriter out = response.getWriter();

				out.print(values);
			}

		} catch (Exception exception) {
			exception.printStackTrace();
			System.out.println("Exception occured while inserting Prescription details into table due to:::"
					+ exception.getMessage());

			object.put("ExceptionMessage", "No visit added. Please add visit first.");
			array.add(object);

			values.put("Release", array);

			PrintWriter out = response.getWriter();

			out.print(values);
		}

	}

	/**
	 * 
	 * @throws Exception
	 */
	public void deleteReceiptItemByID() throws Exception {

		patientDAOInf = new PatientDAOImpl();

		JSONObject values = new JSONObject();

		JSONArray array = new JSONArray();
		values = new JSONObject();

		JSONObject object = new JSONObject();

		try {

			/*
			 * Retrieving opticianID based on visitID
			 */
			values = patientDAOInf.deleteReceiptItemByID(patientForm.getReceiptItemID());

			PrintWriter out = response.getWriter();

			out.print(values);

		} catch (Exception exception) {
			exception.printStackTrace();
			System.out.println("Exception occured while deleting receipt item from ReceiptItems table due to:::"
					+ exception.getMessage());

			object.put("status", "error");
			array.add(object);

			values.put("Release", array);

			PrintWriter out = response.getWriter();

			out.print(values);
		}

	}

	/**
	 * 
	 * @return
	 * @throws Exception
	 */
	public String updateOPDVisit() throws Exception {
		serviceInf = new eDhanvantariServiceImpl();
		patientDAOInf = new PatientDAOImpl();

		ConvertToPDFUtil convertToPDFUtil = new ConvertToPDFUtil();

		LoginDAOInf daoInf = new LoginDAOImpl();

		ClinicDAOInf daoInf1 = new ClinicDAOImpl();

		PrescriptionManagementDAOInf managementDAOInf = new PrescriptionManagementDAOImpl();

		/*
		 * Getting user role from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");

		patientForm.setClinicID(loginForm.getClinicID());

		int lastVisitID = patientDAOInf.retrieveLastVisitID(patientForm.getPatientID(), loginForm.getClinicID());

		String check1 = patientDAOInf.verifyReferralLetter(patientForm.getVisitID());
		System.out.println("check1 value in action:" + check1);
		request.setAttribute("referralLetterCheck", check1);

		String check = patientDAOInf.verifyMedicalCertificate(patientForm.getVisitID());
		System.out.println("check value in action:" + check);
		request.setAttribute("medicalCertiCheck", check);

		orthoBillItemList = patientDAOInf.retrieveOrthoBillingItemList(patientForm.getVisitID());

		message = serviceInf.updateOPDVisit(patientForm);

		if (message.equalsIgnoreCase("success")) {

			HttpServletRequest request = ServletActionContext.getRequest();

			ServletContext context = request.getServletContext();

			addActionMessage("OPD visit updated successfully.");

			// adding data to maintain visit edit history
			patientForm.setAction("Edit");
			patientForm.setVisitType("OPD");
			patientForm.setUserID(loginForm.getUserID());
			patientForm.setClinicID(loginForm.getClinicID());

			patientDAOInf.insertVisitEditHistoryDetails(patientForm);

			lasteEnteredVisitList = patientDAOInf.retrieveLastEnteredVisitDetail(patientForm.getPatientID());

			String dummy = "";

			request.setAttribute("lasteEnteredVisitList", dummy);

			request.setAttribute("lasteEnteredPrescList", dummy);

			request.setAttribute("opticianFloatCheck", "empty");

			String visitType = daoInf1.retrieveVisitTypeNameByID(loginForm.getVisitTypeID());
			System.out.println("visitype is ::" + visitType);

			patientList = patientDAOInf.retrieveLastEnteredVisitDetail(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID(), visitType);

			boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

			if (visitCheck) {
				billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
			} else {
				billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
						loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
			}

			request.setAttribute("apptID", patientForm.getAptID());

			/*
			 * retrieving prescription list by visitID
			 */
			prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID());

			/* Retrieve labReport List */
			labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
					loginForm.getClinicID());

			/*
			 * retrieving symptomCheck list by visitID
			 */
			symptomList = patientDAOInf.retrievesymptomCheckList(patientForm.getVisitID());

			complaintList = patientDAOInf.retrievecomplaintList(patientForm.getVisitID());

			String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
			request.setAttribute("paymentType", paymentType);

			String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

			request.setAttribute("medicalCertiText", medicatCertificate);

			String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

			request.setAttribute("referralLetter", referralLetter);

			diagnoseList = configurationUtil.getDiagnoseList();

			drugList = configurationUtil.getTradeNameList();

			InvestigationList = configurationUtil.getInvestigationList();

			InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

			diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());

			categoryList = configurationUtil.getCategoryList();

			frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

			doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

			daoInf.insertAudit(request.getRemoteAddr(), "Edit OPD Visit", loginForm.getUserID());

			/*
			 * Getting form name to be display based on logged in User
			 */
			String[] formNameArray = loginForm.getOPDJSPName().split("&");

			System.out.println("Update optician JSP Page name for logged in user is ::: " + formNameArray[1].trim());

			// Setting add opd page name value in pageName variable
			setPageName(formNameArray[1].trim());

			return SUCCESS;

		} else {
			addActionError("Failed to update OPD visit.Please check server logs for more details.");

			String visitType = daoInf1.retrieveVisitTypeNameByID(loginForm.getVisitTypeID());
			System.out.println("visitype is ::" + visitType);

			patientList = patientDAOInf.retrieveLastEnteredVisitDetail(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID(), visitType);

			request.setAttribute("opticianFloatCheck", "empty");

			String dummy = "success";

			request.setAttribute("lasteEnteredVisitList", dummy);

			request.setAttribute("lasteEnteredPrescList", dummy);

			boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

			if (visitCheck) {
				billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
			} else {
				billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
						loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
			}

			request.setAttribute("apptID", patientForm.getAptID());

			/*
			 * retrieving prescription list by visitID
			 */
			prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID());

			/* Retrieve labReport List */
			labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
					loginForm.getClinicID());

			/*
			 * retrieving symptomCheck list by visitID
			 */
			symptomList = patientDAOInf.retrievesymptomCheckList(patientForm.getVisitID());

			complaintList = patientDAOInf.retrievecomplaintList(patientForm.getVisitID());

			String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
			request.setAttribute("paymentType", paymentType);

			diagnoseList = configurationUtil.getDiagnoseList();

			drugList = configurationUtil.getTradeNameList();

			InvestigationList = configurationUtil.getInvestigationList();

			String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

			System.out.println("medical certificate text is ::: " + medicatCertificate);

			String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

			request.setAttribute("referralLetter", referralLetter);

			frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

			categoryList = configurationUtil.getCategoryList();

			doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

			daoInf.insertAudit(request.getRemoteAddr(), "Edit OPD Visit Exception occurred", loginForm.getUserID());

			/*
			 * Getting form name to be display based on logged in User
			 */
			String[] formNameArray = loginForm.getOPDJSPName().split("&");

			System.out.println("Update optician JSP Page name for logged in user is ::: " + formNameArray[1].trim());

			// Setting add opd page name value in pageName variable
			setPageName(formNameArray[1].trim());

			return ERROR;
		}
	}

	/**
	 * 
	 * @return
	 * @throws Exception
	 */
	public String updateAddOPDVisit() throws Exception {
		serviceInf = new eDhanvantariServiceImpl();
		patientDAOInf = new PatientDAOImpl();

		LoginDAOInf daoInf = new LoginDAOImpl();

		ClinicDAOInf daoInf1 = new ClinicDAOImpl();

		PrescriptionManagementDAOInf managementDAOInf = new PrescriptionManagementDAOImpl();

		/*
		 * Getting user role from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");

		patientForm.setClinicID(loginForm.getClinicID());

		int lastVisitID = patientDAOInf.retrieveLastVisitID(patientForm.getPatientID(), loginForm.getClinicID());

		message = serviceInf.updateOPDVisit(patientForm);

		if (message.equalsIgnoreCase("success")) {

			addActionMessage("OPD visit updated successfully.");

			lasteEnteredVisitList = patientDAOInf.retrieveLastEnteredVisitDetail(patientForm.getPatientID());

			String dummy = "";

			request.setAttribute("lasteEnteredVisitList", "");

			request.setAttribute("lasteEnteredPrescList", dummy);

			request.setAttribute("opticianFloatCheck", "empty");

			String visitType = daoInf1.retrieveVisitTypeNameByID(loginForm.getVisitTypeID());
			System.out.println("visitype is ::" + visitType);

			patientList = patientDAOInf.retrieveLastEnteredVisitDetail(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID(), visitType);

			boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

			if (visitCheck) {
				billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
			} else {
				billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
						loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
			}

			request.setAttribute("apptID", patientForm.getAptID());

			/*
			 * retrieving prescription list by visitID
			 */
			prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID());

			/* Retrieve labReport List */
			labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
					loginForm.getClinicID());

			/*
			 * retrieving symptomCheck list by visitID
			 */
			symptomList = patientDAOInf.retrievesymptomCheckList(patientForm.getVisitID());

			complaintList = patientDAOInf.retrievecomplaintList(patientForm.getVisitID());

			String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
			request.setAttribute("paymentType", paymentType);

			String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

			request.setAttribute("medicalCertiText", medicatCertificate);

			String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

			request.setAttribute("referralLetter", referralLetter);

			diagnoseList = configurationUtil.getDiagnoseList();

			drugList = configurationUtil.getTradeNameList();

			InvestigationList = configurationUtil.getInvestigationList();

			categoryList = configurationUtil.getCategoryList();

			frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

			doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

			daoInf.insertAudit(request.getRemoteAddr(), "Edit OPD Visit", loginForm.getUserID());

			/*
			 * Getting form name to be display based on logged in User
			 */
			String[] formNameArray = loginForm.getOPDJSPName().split("&");

			System.out.println("Update optician JSP Page name for logged in user is ::: " + formNameArray[0].trim());

			// Setting add opd page name value in pageName variable
			setPageName(formNameArray[0].trim());

			return SUCCESS;

		} else {
			addActionError("Failed to update OPD visit.Please check server logs for more details.");

			String visitType = daoInf1.retrieveVisitTypeNameByID(loginForm.getVisitTypeID());
			System.out.println("visitype is ::" + visitType);

			patientList = patientDAOInf.retrieveLastEnteredVisitDetail(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID(), visitType);

			request.setAttribute("opticianFloatCheck", "empty");

			String dummy = "success";

			request.setAttribute("lasteEnteredVisitList", "");

			request.setAttribute("lasteEnteredPrescList", dummy);

			boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

			if (visitCheck) {
				billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
			} else {
				billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
						loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
			}

			request.setAttribute("apptID", patientForm.getAptID());

			/*
			 * retrieving prescription list by visitID
			 */
			prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID());

			/* Retrieve labReport List */
			labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
					loginForm.getClinicID());

			/*
			 * retrieving symptomCheck list by visitID
			 */
			symptomList = patientDAOInf.retrievesymptomCheckList(patientForm.getVisitID());

			complaintList = patientDAOInf.retrievecomplaintList(patientForm.getVisitID());

			String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
			request.setAttribute("paymentType", paymentType);

			diagnoseList = configurationUtil.getDiagnoseList();

			drugList = configurationUtil.getTradeNameList();

			InvestigationList = configurationUtil.getInvestigationList();

			String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

			System.out.println("medical certificate text is ::: " + medicatCertificate);

			String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

			request.setAttribute("referralLetter", referralLetter);

			frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

			categoryList = configurationUtil.getCategoryList();

			doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

			daoInf.insertAudit(request.getRemoteAddr(), "Edit OPD Visit Exception occurred", loginForm.getUserID());

			/*
			 * Getting form name to be display based on logged in User
			 */
			String[] formNameArray = loginForm.getOPDJSPName().split("&");

			System.out.println("Update optician JSP Page name for logged in user is ::: " + formNameArray[0].trim());

			// Setting add opd page name value in pageName variable
			setPageName(formNameArray[0].trim());

			return ERROR;
		}
	}

	/**
	 * 
	 * @return
	 * @throws Exception
	 */
	public String updatePrintOPDVisit() throws Exception {
		serviceInf = new eDhanvantariServiceImpl();
		patientDAOInf = new PatientDAOImpl();

		ConvertToPDFUtil convertToPDFUtil = new ConvertToPDFUtil();

		LoginDAOInf daoInf = new LoginDAOImpl();

		PrescriptionManagementDAOInf managementDAOInf = new PrescriptionManagementDAOImpl();

		String accessKey = xmlUtil.getAccessKey();

		String secreteKey = xmlUtil.getSecreteKey();

		AWSS3Connect awss3Connect = new AWSS3Connect();

		// getting input file location from S3 bucket
		String s3reportFilePath = xmlUtil.getS3RDMLReportFilePath();

		// getting s3 bucket name
		String bucketName = util.getS3BucketName();

		// getting s3 bucket region
		String bucketRegion = xmlUtil.getS3BucketRegion();

		String s3LogoFilePath = xmlUtil.getS3RDMLFilePath();

		AWSCredentials credentials = new BasicAWSCredentials(accessKey, secreteKey);

		AmazonS3 s3 = AmazonS3ClientBuilder.standard().withCredentials(new AWSStaticCredentialsProvider(credentials))
				.withRegion(bucketRegion).build();

		/*
		 * Getting user role from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");
		ClinicDAOInf daoInf1 = new ClinicDAOImpl();
		int nextVisitDays = patientDAOInf.retrieveNextVisitDays(loginForm.getVisitTypeID());

		message = serviceInf.updateOPDVisit(patientForm);

		if (message.equalsIgnoreCase("success")) {

			HttpServletRequest request = ServletActionContext.getRequest();

			ServletContext context = request.getServletContext();

			String realPath = context.getRealPath("/");
			System.out.println("Real path is :: " + realPath);

			// String pdfOutFIleName = reportFilePath + patientForm.getFirstName() +
			// patientForm.getLastName()
			String pdfOutFIleName = patientForm.getFirstName() + patientForm.getLastName() + patientForm.getPatientID()
					+ "_" + patientForm.getVisitID() + "opd.pdf";

			String visitType = daoInf1.retrieveVisitTypeNameByID(loginForm.getVisitTypeID());
			System.out.println("visitype is ::" + visitType);

			if (patientForm.getSelectedPrintField() == null || patientForm.getSelectedPrintField().isEmpty()) {
				message = convertToPDFUtil.convertOPDPDF(patientForm.getVisitID(), patientForm.getPatientID(),
						loginForm.getClinicID(), realPath, pdfOutFIleName, visitType, s3, s3LogoFilePath, bucketName,
						null);
			} else {
				message = convertToPDFUtil.convertOPDPDF(patientForm.getVisitID(), patientForm.getPatientID(),
						loginForm.getClinicID(), realPath, pdfOutFIleName, visitType, s3, s3LogoFilePath, bucketName,
						patientForm.getSelectedPrintField());
			}

			if (message.equalsIgnoreCase("success")) {

				addActionMessage("OPD visit updated successfully.");

				File inputFile = new File(realPath + "/" + pdfOutFIleName);

				// Storing file to S3 RDML INPUT FILE location
				message = awss3Connect.pushFile(inputFile, pdfOutFIleName, bucketName, bucketRegion, s3reportFilePath);

				S3ObjectInputStream s3ObjectInputStream = s3
						.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, pdfOutFIleName))
						.getObjectContent();

				patientForm.setFileInputStream(s3ObjectInputStream);

				patientForm.setFileName(pdfOutFIleName);

				lasteEnteredVisitList = patientDAOInf.retrieveLastEnteredVisitDetail(patientForm.getPatientID());

				String dummy = "";

				request.setAttribute("lasteEnteredVisitList", dummy);

				request.setAttribute("lasteEnteredPrescList", dummy);

				request.setAttribute("opticianFloatCheck", "empty");

				patientList = patientDAOInf.retrieveLastEnteredVisitDetail(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID(), visitType);

				boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

				if (visitCheck) {
					billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
				} else {
					billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
							loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
				}

				request.setAttribute("apptID", patientForm.getAptID());

				/*
				 * retrieving prescription list by visitID
				 */
				prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID());

				/* Retrieve labReport List */
				labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
						loginForm.getClinicID());

				/*
				 * retrieving symptomCheck list by visitID
				 */
				symptomList = patientDAOInf.retrievesymptomCheckList(patientForm.getVisitID());

				complaintList = patientDAOInf.retrievecomplaintList(patientForm.getVisitID());

				String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
				request.setAttribute("paymentType", paymentType);

				String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

				request.setAttribute("medicalCertiText", medicatCertificate);

				String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

				request.setAttribute("referralLetter", referralLetter);

				diagnoseList = configurationUtil.getDiagnoseList();

				drugList = configurationUtil.getTradeNameList();

				InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

				diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());

				InvestigationList = configurationUtil.getInvestigationList();

				categoryList = configurationUtil.getCategoryList();

				frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

				doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

				daoInf.insertAudit(request.getRemoteAddr(), "Edit OPD Visit", loginForm.getUserID());

				/*
				 * Getting form name to be display based on logged in User
				 */
				String[] formNameArray = loginForm.getOPDJSPName().split("&");

				System.out
						.println("Update optician JSP Page name for logged in user is ::: " + formNameArray[1].trim());

				// Setting add opd page name value in pageName variable
				setPageName(formNameArray[1].trim());

				return SUCCESS;

			} else {
				addActionError("Failed to update OPD visit.Please check server logs for more details.");

				patientList = patientDAOInf.retrieveExistingVisitList(patientForm.getPatientID(),
						patientForm.getVisitID());

				String dummy = "success";

				request.setAttribute("lasteEnteredVisitList", dummy);

				request.setAttribute("lasteEnteredPrescList", dummy);

				diagnoseList = configurationUtil.getDiagnoseList();

				String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

				request.setAttribute("opticianFloatCheck", "empty");

				request.setAttribute("medicalCertiText", medicatCertificate);

				String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

				request.setAttribute("referralLetter", referralLetter);

				boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

				if (visitCheck) {
					billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
				} else {
					billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
							loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
				}

				request.setAttribute("apptID", patientForm.getAptID());
				/*
				 * retrieving prescription list by visitID
				 */
				prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID());

				/* Retrieve labReport List */
				labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
						loginForm.getClinicID());

				/*
				 * retrieving symptomCheck list by visitID
				 */
				symptomList = patientDAOInf.retrievesymptomCheckList(patientForm.getVisitID());

				complaintList = patientDAOInf.retrievecomplaintList(patientForm.getVisitID());

				String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
				request.setAttribute("paymentType", paymentType);

				drugList = configurationUtil.getTradeNameList();
				InvestigationList = configurationUtil.getInvestigationList();
				frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

				doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

				categoryList = configurationUtil.getCategoryList();

				daoInf.insertAudit(request.getRemoteAddr(), "Edit OPD Visit Exception occurred", loginForm.getUserID());

				/*
				 * Getting form name to be display based on logged in User
				 */
				String[] formNameArray = loginForm.getOPDJSPName().split("&");

				System.out
						.println("Update optician JSP Page name for logged in user is ::: " + formNameArray[1].trim());

				// Setting add opd page name value in pageName variable
				setPageName(formNameArray[1].trim());

				return ERROR;
			}

		} else {
			addActionError("Failed to update OPD visit.Please check server logs for more details.");

			patientList = patientDAOInf.retrieveExistingVisitList(patientForm.getPatientID(), patientForm.getVisitID());

			String dummy = "success";

			request.setAttribute("lasteEnteredVisitList", dummy);

			request.setAttribute("lasteEnteredPrescList", dummy);

			request.setAttribute("opticianFloatCheck", "empty");

			boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

			if (visitCheck) {
				billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
			} else {
				billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
						loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
			}

			request.setAttribute("apptID", patientForm.getAptID());

			/*
			 * retrieving prescription list by visitID
			 */
			prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID());

			/* Retrieve labReport List */
			labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
					loginForm.getClinicID());

			/*
			 * retrieving symptomCheck list by visitID
			 */
			symptomList = patientDAOInf.retrievesymptomCheckList(patientForm.getVisitID());

			complaintList = patientDAOInf.retrievecomplaintList(patientForm.getVisitID());

			String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
			request.setAttribute("paymentType", paymentType);

			diagnoseList = configurationUtil.getDiagnoseList();

			drugList = configurationUtil.getTradeNameList();

			InvestigationList = configurationUtil.getInvestigationList();

			categoryList = configurationUtil.getCategoryList();

			String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

			System.out.println("medical certificate text is ::: " + medicatCertificate);

			String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

			request.setAttribute("referralLetter", referralLetter);

			frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

			doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

			daoInf.insertAudit(request.getRemoteAddr(), "Edit OPD Visit Exception occurred", loginForm.getUserID());

			/*
			 * Getting form name to be display based on logged in User
			 */
			String[] formNameArray = loginForm.getOPDJSPName().split("&");

			System.out.println("Update optician JSP Page name for logged in user is ::: " + formNameArray[1].trim());

			// Setting add opd page name value in pageName variable
			setPageName(formNameArray[1].trim());

			return ERROR;
		}
	}

	/**
	 * 
	 * @return
	 * @throws Exception
	 */
	public String updateOptician() throws Exception {

		patientDAOInf = new PatientDAOImpl();
		serviceInf = new eDhanvantariServiceImpl();

		ConvertToPDFUtil convertToPDFUtil = new ConvertToPDFUtil();

		LoginDAOInf daoInf = new LoginDAOImpl();

		ClinicDAOInf daoInf1 = new ClinicDAOImpl();

		PrescriptionManagementDAOInf managementDAOInf = new PrescriptionManagementDAOImpl();

		String accessKey = xmlUtil.getAccessKey();

		String secreteKey = xmlUtil.getSecreteKey();

		AWSS3Connect awss3Connect = new AWSS3Connect();

		// getting input file location from S3 bucket
		String s3reportFilePath = xmlUtil.getS3RDMLReportFilePath();

		// getting s3 bucket name
		String bucketName = util.getS3BucketName();

		// getting s3 bucket region
		String bucketRegion = xmlUtil.getS3BucketRegion();

		String s3LogoFilePath = xmlUtil.getS3RDMLFilePath();

		AWSCredentials credentials = new BasicAWSCredentials(accessKey, secreteKey);

		AmazonS3 s3 = AmazonS3ClientBuilder.standard().withCredentials(new AWSStaticCredentialsProvider(credentials))
				.withRegion(bucketRegion).build();

		/*
		 * Getting user role from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");

		String check1 = patientDAOInf.verifyReferralLetter(patientForm.getVisitID());

		request.setAttribute("referralLetterCheck", check1);

		String check = patientDAOInf.verifyMedicalCertificate(patientForm.getVisitID());

		request.setAttribute("medicalCertiCheck", check);

		boolean checkOptician = patientDAOInf.verifyVisitExists("Optometry", patientForm.getVisitID());

		if (checkOptician) {

			message = serviceInf.updateOptician(patientForm);
		} else {

			message = serviceInf.addOptician(patientForm);
		}

		if (message.equalsIgnoreCase("success")) {

			HttpServletRequest request = ServletActionContext.getRequest();

			ServletContext context = request.getServletContext();

			String realPath = context.getRealPath("/");
			System.out.println("Real path is :: " + realPath);

			// String pdfOutFIleName = realPath + patientForm.getFirstName() +
			// patientForm.getLastName()
			String pdfOutFIleName = patientForm.getFirstName() + patientForm.getLastName() + patientForm.getPatientID()
					+ "_" + patientForm.getVisitID() + "opt" + ".pdf";

			message = convertToPDFUtil.convertOpticianPDF(patientForm.getPatientID(), patientForm.getVisitID(),
					patientForm.getOpticinID(), patientForm.getLastVisitID(), loginForm.getUserType(), realPath,
					pdfOutFIleName, s3, s3LogoFilePath, bucketName);
			if (message.equalsIgnoreCase("success")) {
				addActionMessage("Successfully updated Optician details.");

				File inputFile = new File(realPath + "/" + pdfOutFIleName);

				// Storing file to S3 RDML INPUT FILE location
				message = awss3Connect.pushFile(inputFile, pdfOutFIleName, bucketName, bucketRegion, s3reportFilePath);

				S3ObjectInputStream s3ObjectInputStream = s3
						.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, pdfOutFIleName))
						.getObjectContent();

				patientForm.setFileInputStream(s3ObjectInputStream);

				patientForm.setFileName(pdfOutFIleName);

				lasteEnteredVisitList = patientDAOInf.retrieveLastEnteredVisitDetail(patientForm.getPatientID());

				String dummy = "";

				request.setAttribute("lasteEnteredVisitList", dummy);

				String visitType = daoInf1.retrieveVisitTypeNameByID(loginForm.getVisitTypeID());

				patientList = patientDAOInf.retrieveLastEnteredVisitDetail(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID(), visitType);

				request.setAttribute("apptID", patientForm.getAptID());

				String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

				request.setAttribute("medicalCertiText", medicatCertificate);

				String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

				String opticianTabEnable = "Enable";

				request.setAttribute("opticianTabEnable", opticianTabEnable);

				request.setAttribute("referralLetter", referralLetter);

				boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

				if (visitCheck) {
					billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
				} else {
					billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
							loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
				}

				/*
				 * retrieving prescription list by visitID
				 */
				prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID());

				/* Retrieve labReport List */
				labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
						loginForm.getClinicID());

				/*
				 * retrieving symptomCheck list by visitID
				 */
				symptomList = patientDAOInf.retrievesymptomCheckList(patientForm.getVisitID());

				complaintList = patientDAOInf.retrievecomplaintList(patientForm.getVisitID());

				String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
				request.setAttribute("paymentType", paymentType);

				diagnoseList = configurationUtil.getDiagnoseList();

				drugList = configurationUtil.getTradeNameList();

				InvestigationList = configurationUtil.getInvestigationList();

				frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

				doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

				categoryList = configurationUtil.getCategoryList();

				// Inserting into Audit table
				daoInf.insertAudit(request.getRemoteAddr(), "Edit OPD Optician", loginForm.getUserID());

				/*
				 * Getting form name to be display based on logged in User
				 */
				String[] formNameArray = loginForm.getOPDJSPName().split("&");

				System.out
						.println("Update optician JSP Page name for logged in user is ::: " + formNameArray[1].trim());

				// Setting add opd page name value in pageName variable
				setPageName(formNameArray[1].trim());

				return SUCCESS;

			} else {
				addActionError("Failed to udpate Optician details. Please check server logs for more details.");

				String visitType = daoInf1.retrieveVisitTypeNameByID(loginForm.getVisitTypeID());

				patientList = patientDAOInf.retrieveLastEnteredVisitDetail(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID(), visitType);

				String dummy = "";

				request.setAttribute("lasteEnteredVisitList", dummy);

				boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

				if (visitCheck) {
					billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
				} else {
					billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
							loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
				}

				request.setAttribute("apptID", patientForm.getAptID());

				/*
				 * retrieving prescription list by visitID
				 */
				prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID());

				/* Retrieve labReport List */
				labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
						loginForm.getClinicID());

				/*
				 * retrieving symptomCheck list by visitID
				 */
				symptomList = patientDAOInf.retrievesymptomCheckList(patientForm.getVisitID());

				complaintList = patientDAOInf.retrievecomplaintList(patientForm.getVisitID());

				String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
				request.setAttribute("paymentType", paymentType);

				diagnoseList = configurationUtil.getDiagnoseList();

				drugList = configurationUtil.getTradeNameList();

				InvestigationList = configurationUtil.getInvestigationList();

				frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

				categoryList = configurationUtil.getCategoryList();

				String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

				request.setAttribute("medicalCertiText", medicatCertificate);

				String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

				String opticianTabEnable = "Enable";

				request.setAttribute("opticianTabEnable", opticianTabEnable);

				request.setAttribute("referralLetter", referralLetter);

				doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

				// Inserting into Audit table
				daoInf.insertAudit(request.getRemoteAddr(), "Edit OPD Optician Exception occurred",
						loginForm.getUserID());

				/*
				 * Getting form name to be display based on logged in User
				 */
				String[] formNameArray = loginForm.getOPDJSPName().split("&");

				System.out
						.println("Update optician JSP Page name for logged in user is ::: " + formNameArray[1].trim());

				// Setting add opd page name value in pageName variable
				setPageName(formNameArray[1].trim());

				return ERROR;
			}
		} else {
			addActionError("Failed to update Optician details. Please check log for more detials.");

			String visitType = daoInf1.retrieveVisitTypeNameByID(loginForm.getVisitTypeID());

			patientList = patientDAOInf.retrieveLastEnteredVisitDetail(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID(), visitType);

			String dummy = "";

			request.setAttribute("lasteEnteredVisitList", dummy);

			boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

			if (visitCheck) {
				billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
			} else {
				billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
						loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
			}

			request.setAttribute("apptID", patientForm.getAptID());

			/*
			 * retrieving prescription list by visitID
			 */
			prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID());

			/* Retrieve labReport List */
			labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
					loginForm.getClinicID());

			/*
			 * retrieving symptomCheck list by visitID
			 */
			symptomList = patientDAOInf.retrievesymptomCheckList(patientForm.getVisitID());

			complaintList = patientDAOInf.retrievecomplaintList(patientForm.getVisitID());

			String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
			request.setAttribute("paymentType", paymentType);

			diagnoseList = configurationUtil.getDiagnoseList();

			InvestigationList = configurationUtil.getInvestigationList();

			frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

			categoryList = configurationUtil.getCategoryList();

			String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

			request.setAttribute("medicalCertiText", medicatCertificate);

			String opticianTabEnable = "Enable";

			request.setAttribute("opticianTabEnable", opticianTabEnable);

			String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

			request.setAttribute("referralLetter", referralLetter);

			doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

			// Inserting into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Edit OPD Optician Exception occurred", loginForm.getUserID());

			/*
			 * Getting form name to be display based on logged in User
			 */
			String[] formNameArray = loginForm.getOPDJSPName().split("&");

			System.out.println("Update optician JSP Page name for logged in user is ::: " + formNameArray[1].trim());

			// Setting add opd page name value in pageName variable
			setPageName(formNameArray[1].trim());

			return ERROR;
		}
	}

	/**
	 * 
	 * @return
	 * @throws Exception
	 */
	public String printUpdateOptician() throws Exception {

		patientDAOInf = new PatientDAOImpl();
		serviceInf = new eDhanvantariServiceImpl();

		ConvertToPDFUtil convertToPDFUtil = new ConvertToPDFUtil();

		LoginDAOInf daoInf = new LoginDAOImpl();

		ClinicDAOInf daoInf1 = new ClinicDAOImpl();

		PrescriptionManagementDAOInf managementDAOInf = new PrescriptionManagementDAOImpl();

		String accessKey = xmlUtil.getAccessKey();

		String secreteKey = xmlUtil.getSecreteKey();

		AWSS3Connect awss3Connect = new AWSS3Connect();

		// getting input file location from S3 bucket
		String s3reportFilePath = xmlUtil.getS3RDMLReportFilePath();

		// getting s3 bucket name
		String bucketName = util.getS3BucketName();

		// getting s3 bucket region
		String bucketRegion = xmlUtil.getS3BucketRegion();

		String s3LogoFilePath = xmlUtil.getS3RDMLFilePath();

		AWSCredentials credentials = new BasicAWSCredentials(accessKey, secreteKey);

		AmazonS3 s3 = AmazonS3ClientBuilder.standard().withCredentials(new AWSStaticCredentialsProvider(credentials))
				.withRegion(bucketRegion).build();

		/*
		 * Getting user role from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");

		patientForm.setClinicID(loginForm.getClinicID());

		int lastVisitID = patientDAOInf.retrieveLastVisitID(patientForm.getPatientID(), loginForm.getClinicID());

		String check1 = patientDAOInf.verifyReferralLetter(patientForm.getVisitID());
		System.out.println("check1 value in action:" + check1);
		request.setAttribute("referralLetterCheck", check1);

		String check = patientDAOInf.verifyMedicalCertificate(patientForm.getVisitID());
		System.out.println("check value in action:" + check);
		request.setAttribute("medicalCertiCheck", check);

		boolean checkOptician = patientDAOInf.verifyVisitExists("Optometry", patientForm.getVisitID());

		if (checkOptician) {

			message = serviceInf.updateOptician(patientForm);
		} else {

			message = serviceInf.addOptician(patientForm);
		}

		// message = serviceInf.updateOptician(patientForm);

		if (message.equalsIgnoreCase("success")) {

			HttpServletRequest request = ServletActionContext.getRequest();

			ServletContext context = request.getServletContext();

			String realPath = context.getRealPath("/");
			System.out.println("Real path is :: " + realPath);

			// String pdfOutFIleName = reportFilePath + patientForm.getFirstName() +
			// patientForm.getLastName()
			String pdfOutFIleName = patientForm.getFirstName() + patientForm.getLastName() + patientForm.getPatientID()
					+ "_" + patientForm.getVisitID() + "opt" + ".pdf";

			message = convertToPDFUtil.convertOpticianPDF(patientForm.getPatientID(), patientForm.getVisitID(),
					patientForm.getOpticinID(), patientForm.getLastVisitID(), loginForm.getUserType(), realPath,
					pdfOutFIleName, s3, s3LogoFilePath, bucketName);
			if (message.equalsIgnoreCase("success")) {
				addActionMessage("Successfully updated Optician details.");

				File inputFile = new File(realPath + "/" + pdfOutFIleName);

				// Storing file to S3 RDML INPUT FILE location
				message = awss3Connect.pushFile(inputFile, pdfOutFIleName, bucketName, bucketRegion, s3reportFilePath);

				S3ObjectInputStream s3ObjectInputStream = s3
						.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, pdfOutFIleName))
						.getObjectContent();

				patientForm.setFileInputStream(s3ObjectInputStream);

				patientForm.setFileName(pdfOutFIleName);

				lasteEnteredVisitList = patientDAOInf.retrieveLastEnteredVisitDetail(patientForm.getPatientID());

				String dummy = "";

				request.setAttribute("lasteEnteredVisitList", dummy);

				String visitType = daoInf1.retrieveVisitTypeNameByID(loginForm.getVisitTypeID());
				System.out.println("visitype is ::" + visitType);

				patientList = patientDAOInf.retrieveLastEnteredVisitDetail(patientForm.getPatientID(), lastVisitID,
						loginForm.getClinicID(), visitType);

				request.setAttribute("apptID", patientForm.getAptID());

				String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

				request.setAttribute("medicalCertiText", medicatCertificate);

				String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

				String opticianTabEnable = "Enable";

				request.setAttribute("opticianTabEnable", opticianTabEnable);

				request.setAttribute("referralLetter", referralLetter);

				boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

				if (visitCheck) {
					billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
				} else {
					billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
							loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
				}

				/*
				 * retrieving prescription list by visitID
				 */
				prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID());

				/* Retrieve labReport List */
				labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
						loginForm.getClinicID());

				/*
				 * retrieving symptomCheck list by visitID
				 */
				symptomList = patientDAOInf.retrievesymptomCheckList(patientForm.getVisitID());

				complaintList = patientDAOInf.retrievecomplaintList(patientForm.getVisitID());

				String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
				request.setAttribute("paymentType", paymentType);

				diagnoseList = configurationUtil.getDiagnoseList();

				drugList = configurationUtil.getTradeNameList();

				InvestigationList = configurationUtil.getInvestigationList();

				InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

				diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());

				frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

				doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

				categoryList = configurationUtil.getCategoryList();

				// Inserting into Audit table
				daoInf.insertAudit(request.getRemoteAddr(), "Edit OPD Optician", loginForm.getUserID());

				/*
				 * Getting form name to be display based on logged in User
				 */
				String[] formNameArray = loginForm.getOPDJSPName().split("&");

				System.out
						.println("Update optician JSP Page name for logged in user is ::: " + formNameArray[1].trim());

				// Setting add opd page name value in pageName variable
				setPageName(formNameArray[1].trim());

				return SUCCESS;

			} else {
				addActionError("Failed to udpate Optician.Please check server logs for more details.");

				String visitType = daoInf1.retrieveVisitTypeNameByID(loginForm.getVisitTypeID());
				System.out.println("visitype is ::" + visitType);

				patientList = patientDAOInf.retrieveLastEnteredVisitDetail(patientForm.getPatientID(), lastVisitID,
						loginForm.getClinicID(), visitType);

				String dummy = "";

				request.setAttribute("lasteEnteredVisitList", dummy);

				boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

				if (visitCheck) {
					billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
				} else {
					billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
							loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
				}

				request.setAttribute("apptID", patientForm.getAptID());

				/*
				 * retrieving prescription list by visitID
				 */
				prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID());

				/* Retrieve labReport List */
				labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
						loginForm.getClinicID());

				/*
				 * retrieving symptomCheck list by visitID
				 */
				symptomList = patientDAOInf.retrievesymptomCheckList(patientForm.getVisitID());

				complaintList = patientDAOInf.retrievecomplaintList(patientForm.getVisitID());

				String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
				request.setAttribute("paymentType", paymentType);

				diagnoseList = configurationUtil.getDiagnoseList();

				drugList = configurationUtil.getTradeNameList();

				InvestigationList = configurationUtil.getInvestigationList();

				InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

				diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());

				frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

				categoryList = configurationUtil.getCategoryList();

				String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

				request.setAttribute("medicalCertiText", medicatCertificate);

				String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

				String opticianTabEnable = "Enable";

				request.setAttribute("opticianTabEnable", opticianTabEnable);

				request.setAttribute("referralLetter", referralLetter);

				doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

				// Inserting into Audit table
				daoInf.insertAudit(request.getRemoteAddr(), "Edit OPD Optician Exception occurred",
						loginForm.getUserID());

				/*
				 * Getting form name to be display based on logged in User
				 */
				String[] formNameArray = loginForm.getOPDJSPName().split("&");

				System.out
						.println("Update optician JSP Page name for logged in user is ::: " + formNameArray[1].trim());

				// Setting add opd page name value in pageName variable
				setPageName(formNameArray[1].trim());

				return ERROR;
			}
		} else {
			addActionError("Failed to update Optician details. Please check log for more detials.");

			String visitType = daoInf1.retrieveVisitTypeNameByID(loginForm.getVisitTypeID());
			System.out.println("visitype is ::" + visitType);

			patientList = patientDAOInf.retrieveLastEnteredVisitDetail(patientForm.getPatientID(), lastVisitID,
					loginForm.getClinicID(), visitType);

			String dummy = "";

			request.setAttribute("lasteEnteredVisitList", dummy);

			boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

			if (visitCheck) {
				billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
			} else {
				billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
						loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
			}

			request.setAttribute("apptID", patientForm.getAptID());

			/*
			 * retrieving prescription list by visitID
			 */
			prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID());

			/* Retrieve labReport List */
			labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
					loginForm.getClinicID());

			/*
			 * retrieving symptomCheck list by visitID
			 */
			symptomList = patientDAOInf.retrievesymptomCheckList(patientForm.getVisitID());

			complaintList = patientDAOInf.retrievecomplaintList(patientForm.getVisitID());

			String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
			request.setAttribute("paymentType", paymentType);

			diagnoseList = configurationUtil.getDiagnoseList();

			InvestigationList = configurationUtil.getInvestigationList();

			InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

			diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());

			frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

			categoryList = configurationUtil.getCategoryList();

			String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

			request.setAttribute("medicalCertiText", medicatCertificate);

			String opticianTabEnable = "Enable";

			request.setAttribute("opticianTabEnable", opticianTabEnable);

			String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

			request.setAttribute("referralLetter", referralLetter);

			doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

			// Inserting into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Edit OPD Optician Exception occurred", loginForm.getUserID());

			/*
			 * Getting form name to be display based on logged in User
			 */
			String[] formNameArray = loginForm.getOPDJSPName().split("&");

			System.out.println("Update optician JSP Page name for logged in user is ::: " + formNameArray[1].trim());

			// Setting add opd page name value in pageName variable
			setPageName(formNameArray[1].trim());

			return ERROR;
		}
	}

	/**
	 * 
	 * @throws Exception
	 */
	public void searchTradeNameList() throws Exception {

		response.setContentType("application/json");

		drugList = configurationUtil.getTradeNameList(patientForm.getSearchPatientName());

		String searchList = new Gson().toJson(drugList);

		response.getWriter().write(searchList);
	}

	/**
	 * 
	 * @throws Exception
	 */
	public void searchLabTestNameList() throws Exception {

		patientDAOInf = new PatientDAOImpl();

		/*
		 * Getting user role from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");

		response.setContentType("application/json");

		/*
		 * retrieving patient gender based on patientID
		 */
		String patientGender = patientDAOInf.retrievePatientGenderByPatientID(patientForm.getPatientID());

		genderMap.put("Male", "normalValues");
		genderMap.put("Female", "normalValuesWomen");
		genderMap.put("Child", "normalValuesChild");

		groupLabTestMap = patientDAOInf.retrieveGroupLabTestsList(genderMap.get(patientGender),
				patientForm.getSearchTestName(), loginForm.getPracticeID(), patientForm.getGroupCheck());

		String searchList = new Gson().toJson(groupLabTestMap);

		response.getWriter().write(searchList);
	}

	public String addNewSurvey() throws Exception {
		patientDAOInf = new PatientDAOImpl();

		serviceInf = new eDhanvantariServiceImpl();

		LoginDAOInf daoInf = new LoginDAOImpl();

		/*
		 * Getting user role from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");
		loginForm = (LoginForm) session.get("USER");

		int clinicID = loginForm.getClinicID();
		int lastVolunteerID = patientDAOInf.retrieveLastVolunteerID(clinicID);
		System.out.println("last vol id at new:" + lastVolunteerID);

		/*
		 * ; inserting survey details into Volunteer table
		 */
		message = serviceInf.addNewSurvey(patientForm, clinicID);
		if (message.equals("success")) {

			addActionMessage("New visit added successfully.");

			/*
			 * retrieving patientList which contains visit details
			 */
			patientList = patientDAOInf.retrieveSurveyDetails(patientForm, loginForm.getClinicID(), lastVolunteerID);

			/*
			 * Getting form name to be display based on logged in User
			 */
			String[] formNameArray = loginForm.getOPDJSPName().split("&");

			System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[0].trim());

			// Setting add opd page name value in pageName variable
			setPageName(formNameArray[0].trim());

			return SUCCESS;
		} else {
			addActionError("Eexception occurred while adding survey details. Please check logs for more details.");

			patientList = patientDAOInf.retrieveSurveyDetails(patientForm, loginForm.getClinicID(), lastVolunteerID);

			/*
			 * Getting form name to be display based on logged in User
			 */
			String[] formNameArray = loginForm.getOPDJSPName().split("&");

			System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[0].trim());

			// Setting add opd page name value in pageName variable
			setPageName(formNameArray[0].trim());

			return ERROR;
		}

	}

	/**
	 * 
	 * @return
	 * @throws Exception
	 */
	public String addNewVisit() throws Exception {

		patientDAOInf = new PatientDAOImpl();

		serviceInf = new eDhanvantariServiceImpl();

		LoginDAOInf daoInf = new LoginDAOImpl();

		RegistrationDAOinf registrationDAOinf = new RegistrationDAOImpl();
		PrescriptionManagementDAOInf managementDAOInf = new PrescriptionManagementDAOImpl();

		/*
		 * Getting user role from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");
		loginForm = (LoginForm) session.get("USER");

		/*
		 * Setting clinicID from session into clinicID variable from PatientForm
		 */
		patientForm.setClinicID(loginForm.getClinicID());
		patientForm.setVisitTypeID(loginForm.getVisitTypeID());
		patientForm.setClinicianID(loginForm.getUserID());

		String[] formNameArray = loginForm.getOPDJSPName().split("&");

		/*
		 * inserting visit details into Visit table
		 */
		message = serviceInf.addNewGenPhyVisit(patientForm);

		if (message.equals("success")) {

			addActionMessage("New visit added successfully.");

			/*
			 * retrieving patientList which contains visit details
			 */

			patientList = patientDAOInf.retrieveDefaultPatientDetails(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID(), patientForm.getAptID(),
					loginForm.getVisitTypeID());

			boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

			if (visitCheck) {
				billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
			} else {
				billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
						loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
			}

			/* Retrieve labReport List */
			labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
					loginForm.getClinicID());

			String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
			request.setAttribute("paymentType", paymentType);

			// String dummy = "";
			String dummy = "success";

			request.setAttribute("lasteEnteredVisitList", dummy);

			request.setAttribute("lasteEnteredPrescList", "");

			request.setAttribute("lasteEnteredBillList", "");

			String check1 = patientDAOInf.verifyReferralLetter(patientForm.getVisitID());
			System.out.println("check1 value in action:" + check1);
			request.setAttribute("referralLetterCheck", check1);

			String check = patientDAOInf.verifyMedicalCertificate(patientForm.getVisitID());
			System.out.println("check value in action:" + check);
			request.setAttribute("medicalCertiCheck", check);

			String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

			request.setAttribute("medicalCertiText", medicatCertificate);

			String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

			request.setAttribute("referralLetter", referralLetter);
			/*
			 * retrieving prescription list by visitID
			 */
			prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID());

			InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

			diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());
			InvestigationList = configurationUtil.getInvestigationList();

			/*
			 * Update appointment status to Consultation
			 */
			patientDAOInf.updateConsultationAppointmentStatus(patientForm.getPatientID(), patientForm.getAptID());

			/*
			 * retrieving symptomCheck list by visitID
			 */
			symptomList = patientDAOInf.retrievesymptomCheckList(patientForm.getVisitID());

			complaintList = patientDAOInf.retrievecomplaintList(patientForm.getVisitID());

			historyList = patientDAOInf.retrieveMedicalHistoryList(patientForm.getPatientID());

			medicationList = patientDAOInf.retrieveCurrentMedicationList(patientForm.getPatientID());

			orthoBillItemList = patientDAOInf.retrieveOrthoBillingItemList(patientForm.getVisitID());

			// Checking if the CRF form is for Gokhale clinic, if so then load the diagnosis
			// from the json file else load the diagnosis from the PVDiagnosis table
			if (formNameArray[0].trim().equals("generalPhysicianGokhaleOPD.jsp")) {

				// Retrieving diagnosis list for the last visit ID
				orthoDiagnosisList = patientDAOInf.retrieveOrthoDiagnosisList(patientForm.getVisitID());

				HttpServletRequest request = ServletActionContext.getRequest();

				ServletContext context = request.getServletContext();

				String realPath = context.getRealPath("/");

				JSONParser parser = new JSONParser();

				JSONArray diagnosisJSON = (JSONArray) parser
						.parse(new FileReader(realPath + File.separator + "ortho_charges.json"));

				for (Object jsonData : diagnosisJSON) {
					JSONObject data = (JSONObject) jsonData;

					// diagnoseList.put((String) data.get("rate"), (String) data.get("diagnosis"));
				}

			}
			diagnoseList = configurationUtil.getDiagnoseList();

			request.setAttribute("apptID", patientForm.getAptID());

			// drugList = configurationUtil.getTradeNameList();

			frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

			doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

			// categoryList = configurationUtil.getCategoryList();

			if (loginForm.getPracticeID() == 60) {
				drugList = configurationUtil.getPECTradeNameList();
				categoryList = configurationUtil.getPECCategoryList();
			} else {
				drugList = configurationUtil.getTradeNameList();
				categoryList = configurationUtil.getCategoryList();
			}

			hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Add General Physician Prescription", loginForm.getUserID());

			System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[0].trim());

			// Setting add opd page name value in pageName variable
			setPageName(formNameArray[0].trim());

			return SUCCESS;

		} else {

			addActionError("Eexception occurred while adding visit details. Please check logs for more details.");

			String dummy = "success";

			request.setAttribute("lasteEnteredVisitList", "");

			request.setAttribute("lasteEnteredPrescList", "");

			request.setAttribute("lasteEnteredBillList", "");

			/*
			 * retrieving patientList which contains visit details
			 */
			patientList = patientDAOInf.retrieveDefaultPatientDetails(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID(), patientForm.getAptID(),
					loginForm.getVisitTypeID());

			hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

			request.setAttribute("apptID", patientForm.getAptID());

			request.setAttribute("medicalCertiCheck", "no");

			request.setAttribute("referralLetterCheck", "no");

			// Checking if the CRF form is for Gokhale clinic, if so then load the diagnosis
			// from the json file else load the diagnosis from the PVDiagnosis table
			if (formNameArray[0].trim().equals("generalPhysicianGokhaleOPD.jsp")) {

				// Retrieving diagnosis list for the last visit ID
				orthoDiagnosisList = patientDAOInf.retrieveOrthoDiagnosisList(patientForm.getVisitID());

				HttpServletRequest request = ServletActionContext.getRequest();

				ServletContext context = request.getServletContext();

				String realPath = context.getRealPath("/");

				JSONParser parser = new JSONParser();

				JSONArray diagnosisJSON = (JSONArray) parser
						.parse(new FileReader(realPath + File.separator + "ortho_charges.json"));

				for (Object jsonData : diagnosisJSON) {
					JSONObject data = (JSONObject) jsonData;

					// diagnoseList.put((String) data.get("rate"), (String) data.get("diagnosis"));
				}

			}
			diagnoseList = configurationUtil.getDiagnoseList();

			billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
					loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());

			orthoBillItemList = patientDAOInf.retrieveOrthoBillingItemList(patientForm.getVisitID());

			/*
			 * retrieving prescription list by visitID
			 */
			/*
			 * retrieving prescription list by visitID
			 */
			prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID());

			/* Retrieve labReport List */
			labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
					loginForm.getClinicID());

			/*
			 * retrieving symptomCheck list by visitID
			 */
			symptomList = patientDAOInf.retrievesymptomCheckList(patientForm.getVisitID());

			complaintList = patientDAOInf.retrievecomplaintList(patientForm.getVisitID());

			String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
			request.setAttribute("paymentType", paymentType);

			historyList = patientDAOInf.retrieveMedicalHistoryList(patientForm.getPatientID());

			medicationList = patientDAOInf.retrieveCurrentMedicationList(patientForm.getPatientID());

			// drugList = configurationUtil.getTradeNameList();

			InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

			diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());

			InvestigationList = configurationUtil.getInvestigationList();

			frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

			doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

			// categoryList = configurationUtil.getCategoryList();

			if (loginForm.getPracticeID() == 60) {
				drugList = configurationUtil.getPECTradeNameList();
				categoryList = configurationUtil.getPECCategoryList();
			} else {
				drugList = configurationUtil.getTradeNameList();
				categoryList = configurationUtil.getCategoryList();
			}

			/*
			 * Update appointment status to Consultation
			 */
			patientDAOInf.updateConsultationAppointmentStatus(patientForm.getPatientID(), patientForm.getAptID());

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Add General Physician Visit Exception occurred",
					loginForm.getUserID());

			System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[0].trim());

			// Setting add opd page name value in pageName variable
			setPageName(formNameArray[0].trim());

			return ERROR;

		}

	}

	/**
	 * @return the complaintList
	 */
	public List<PatientForm> getComplaintList() {
		return complaintList;
	}

	/**
	 * @param complaintList the complaintList to set
	 */
	public void setComplaintList(List<PatientForm> complaintList) {
		this.complaintList = complaintList;
	}

	/**
	 * @return the historyList
	 */
	public List<PatientForm> getHistoryList() {
		return historyList;
	}

	/**
	 * @param historyList the historyList to set
	 */
	public void setHistoryList(List<PatientForm> historyList) {
		this.historyList = historyList;
	}

	/**
	 * @return the medicationList
	 */
	public List<PatientForm> getMedicationList() {
		return medicationList;
	}

	/**
	 * @param medicationList the medicationList to set
	 */
	public void setMedicationList(List<PatientForm> medicationList) {
		this.medicationList = medicationList;
	}

	/**
	 * 
	 * @return
	 * @throws Exception
	 */
	public String addMedicalCerificate() throws Exception {
		/*
		 * Getting user role from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");

		patientDAOInf = new PatientDAOImpl();

		ConvertToPDFUtil convertToPDFUtil = new ConvertToPDFUtil();

		LoginDAOInf daoInf = new LoginDAOImpl();

		RegistrationDAOinf registrationDAOinf = new RegistrationDAOImpl();

		ClinicDAOInf daoInf1 = new ClinicDAOImpl();

		PrescriptionManagementDAOInf managementDAOInf = new PrescriptionManagementDAOImpl();

		String accessKey = xmlUtil.getAccessKey();

		String secreteKey = xmlUtil.getSecreteKey();

		AWSS3Connect awss3Connect = new AWSS3Connect();

		// getting input file location from S3 bucket

		String s3reportFilePath = xmlUtil.getS3RDMLReportFilePath();

		// getting s3 bucket name
		String bucketName = util.getS3BucketName();

		// getting s3 bucket region
		String bucketRegion = xmlUtil.getS3BucketRegion();

		String s3LogoFilePath = xmlUtil.getS3RDMLFilePath();

		orthoBillItemList = patientDAOInf.retrieveOrthoBillingItemList(patientForm.getVisitID());

		AWSCredentials credentials = new BasicAWSCredentials(accessKey, secreteKey);

		AmazonS3 s3 = AmazonS3ClientBuilder.standard().withCredentials(new AWSStaticCredentialsProvider(credentials))
				.withRegion(bucketRegion).build();

		boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

		if (visitCheck) {
			billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
		} else {
			billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
					loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
		}

		/*
		 * Getting form name to be display based on logged in User
		 */
		String[] formNameArray = loginForm.getOPDJSPName().split("&");

		System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[0].trim());

		// String dummy = "";
		String dummy = "success";

		request.setAttribute("lasteEnteredVisitList", dummy);

		OPDChargesList = managementDAOInf.retrieveAllOPDCharges(loginForm.getPracticeID());
		request.setAttribute("OPDChargesList", OPDChargesList);

		String ChargesDetails = managementDAOInf.retrieveOPDChargesDetailsByReceiptID(patientForm.getVisitID());
		request.setAttribute("ChargesDetails", ChargesDetails);

		LabTestList = managementDAOInf.retrieveAllLabTests(loginForm.getPracticeID());
		request.setAttribute("LabTestList", LabTestList);

		String InvestigationDetails = managementDAOInf.retrieveInvestigationDetailsByVisitID(patientForm.getVisitID());
		request.setAttribute("InvestigationDetails", InvestigationDetails);

		/*
		 * Checking whether vistId is 0, if yes, then give error msg saying No visit
		 * added. Please add visit first else proceed further to upload lab report files
		 */
		if (patientForm.getVisitID() == 0) {

			addActionError("No visit added. Please add visit first.");

			String medicalCertificateTabEnable = "Enable";

			request.setAttribute("medicalCertificateTabEnable", medicalCertificateTabEnable);

			request.setAttribute("printAvailable", "No");

			String check1 = patientDAOInf.verifyReferralLetter(patientForm.getVisitID());
			System.out.println("check1 value in action:" + check1);
			request.setAttribute("referralLetterCheck", "no");

			String check = patientDAOInf.verifyMedicalCertificate(patientForm.getVisitID());
			System.out.println("check value in action:" + check);
			request.setAttribute("medicalCertiCheck", "no");
			/*
			 * retrieving patientList which contains visit details
			 */
			if (formNameArray[0].trim().equals("generalOPDNew.jsp")
					|| formNameArray[0].trim().equals("physicianOPDNew.jsp")
					|| formNameArray[0].trim().equals("generalPhysicianOPD.jsp")
					|| formNameArray[0].trim().equals("generalPhysicianGokhaleOPD.jsp")) {

				patientList = patientDAOInf.retrieveDefaultPatientDetails(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID(), patientForm.getAptID(),
						loginForm.getVisitTypeID());
			} else if (formNameArray[0].trim().equals("genaralClinicOPDNew.jsp")) {
				patientList = patientDAOInf.retrieveGeneralClinicPatientDetails(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID());

			} else if (formNameArray[0].trim().equals("genaralClinicIPDNew.jsp")) {
				patientList = patientDAOInf.retrieveGenaralClinicPatientDetailsForIPDVisit(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID());
			} else {
				String visitType = daoInf1.retrieveVisitTypeNameByID(loginForm.getVisitTypeID());
				System.out.println("visitype is ::" + visitType);

				patientList = patientDAOInf.retrieveLastEnteredVisitDetail(patientForm.getPatientID(),
						patientForm.getLastVisitID(), loginForm.getClinicID(), visitType);
			}

			// retrieving present complaint list for last visit of patient
			String complaintList1 = patientDAOInf.retrievePresentComplaintsOfLastVisit(patientForm.getVisitID());

			request.setAttribute("complaintList", complaintList1);

			/* HashMap<String, String> PVComplaints = patientDAOInf.getPVComplaints(); */

			PVComplaints = patientDAOInf.getPVComplaints();

			String categoryList1 = patientDAOInf.retrieveCategoryListOfLastVisit(patientForm.getVisitID());
			request.setAttribute("categoryList", categoryList1);

			MedicalHistory = patientDAOInf.retrievemedicalHistoryListOfLastVisit(patientForm,
					patientForm.getPatientID());
			request.setAttribute("MedicalHistory", MedicalHistory);

			FamilyHistory = patientDAOInf.retrieveFamilyHistoryListOfLastVisit(patientForm, patientForm.getPatientID());
			request.setAttribute("FamilyHistory", FamilyHistory);

			PersonalHistory = patientDAOInf.retrievePersonalHistoryListOfLastVisit(patientForm,
					patientForm.getPatientID());
			request.setAttribute("PersonalHistory", PersonalHistory);

			onEaminationList = patientDAOInf.retrieveOnExaminationListByVisitID(patientForm.getVisitID());
			request.setAttribute("onEaminationList", onEaminationList);

			InjectionPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID(), "Injection");
			InjectionList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Injection");

			TabletPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID(), "Tablet");
			TabletList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Tablet");

			LiquidPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID(), "Liquid");
			LiquidList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Liquid");

			/*
			 * retrieving prescription list by visitID
			 */
			prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID());

			InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

			diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());

			/* Retrieve labReport List */
			labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
					loginForm.getClinicID());

			/*
			 * retrieving symptomCheck list by visitID
			 */
			symptomList = patientDAOInf.retrievesymptomCheckList(patientForm.getVisitID());

			complaintList = patientDAOInf.retrievecomplaintList(patientForm.getVisitID());

			String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
			request.setAttribute("paymentType", paymentType);

			// Checking if the CRF form is for Gokhale clinic, if so then load the diagnosis
			// from the json file else load the diagnosis from the PVDiagnosis table
			if (formNameArray[0].trim().equals("generalPhysicianGokhaleOPD.jsp")) {

				// Retrieving diagnosis list for the last visit ID
				orthoDiagnosisList = patientDAOInf.retrieveOrthoDiagnosisList(patientForm.getVisitID());

				HttpServletRequest request = ServletActionContext.getRequest();

				ServletContext context = request.getServletContext();

				String realPath = context.getRealPath("/");

				JSONParser parser = new JSONParser();

				JSONArray diagnosisJSON = (JSONArray) parser
						.parse(new FileReader(realPath + File.separator + "ortho_charges.json"));

				for (Object jsonData : diagnosisJSON) {
					JSONObject data = (JSONObject) jsonData;

					// diagnoseList.put((String) data.get("rate"), (String) data.get("diagnosis"));
				}

			}
			diagnoseList = configurationUtil.getDiagnoseList();

			request.setAttribute("apptID", patientForm.getAptID());

			drugList = configurationUtil.getTradeNameList();

			InvestigationList = configurationUtil.getInvestigationList();

			frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

			// chargeTypeList = configurationUtil.getChargeTypeList();

			doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

			categoryList = configurationUtil.getCategoryList();

			hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Add Medical Certificate Exception Occurred.",
					loginForm.getUserID());

			// Setting add opd page name value in pageName variable
			setPageName(formNameArray[0].trim());

			return ERROR;

		} else {

			boolean medCheck = patientDAOInf.verifyVisitExists("MedicalDocuments", patientForm.getVisitID());

			if (medCheck) {
				message = patientDAOInf.updateMedicalCertificate(patientForm.getMedicalCerti(),
						patientForm.getVisitID());
			} else {
				message = patientDAOInf.insertMedicalCertificate(patientForm.getMedicalCerti(),
						patientForm.getVisitID());
			}

			if (message.equalsIgnoreCase("success")) {

				String medicalCertificateTabEnable = "Enable";

				request.setAttribute("medicalCertificateTabEnable", medicalCertificateTabEnable);

				request.setAttribute("printAvailable", "Yes");

				HttpServletRequest request = ServletActionContext.getRequest();

				ServletContext context = request.getServletContext();

				String realPath = context.getRealPath("/");
				System.out.println("Real path is :: " + realPath);

				// String pdfOutFIleName = reportFilePath + patientForm.getFirstName() +
				// patientForm.getLastName()
				String pdfOutFIleName = patientForm.getFirstName() + patientForm.getLastName()
						+ patientForm.getPatientID() + "_" + patientForm.getVisitID() + "medc.pdf";

				message = convertToPDFUtil.convertMedicalCertificatePDF(patientForm.getMedicalCertiForPDF(),
						pdfOutFIleName, realPath, s3, s3LogoFilePath, bucketName);
				if (message.equalsIgnoreCase("success")) {

					File inputFile = new File(realPath + "/" + pdfOutFIleName);

					// Storing file to S3 RDML INPUT FILE location
					message = awss3Connect.pushFile(inputFile, pdfOutFIleName, bucketName, bucketRegion,
							s3reportFilePath);

					S3ObjectInputStream s3ObjectInputStream = s3
							.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, pdfOutFIleName))
							.getObjectContent();

					patientForm.setFileInputStream(s3ObjectInputStream);

					patientForm.setFileName(pdfOutFIleName);

					addActionMessage("Successfully created Medical certificate details.");

					String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

					request.setAttribute("medicalCertiText", medicatCertificate);

					String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

					request.setAttribute("referralLetter", referralLetter);

					String check1 = patientDAOInf.verifyReferralLetter(patientForm.getVisitID());
					System.out.println("check1 value in action:" + check1);
					request.setAttribute("referralLetterCheck", check1);

					String check = patientDAOInf.verifyMedicalCertificate(patientForm.getVisitID());
					System.out.println("check value in action:" + check);
					request.setAttribute("medicalCertiCheck", check);

					/*
					 * retrieving patientList which contains visit details
					 */
					if (formNameArray[0].trim().equals("generalOPDNew.jsp")
							|| formNameArray[0].trim().equals("physicianOPDNew.jsp")
							|| formNameArray[0].trim().equals("generalPhysicianOPD.jsp")
							|| formNameArray[0].trim().equals("generalPhysicianGokhaleOPD.jsp")) {

						patientList = patientDAOInf.retrieveDefaultPatientDetails(patientForm.getPatientID(),
								patientForm.getVisitID(), loginForm.getClinicID(), patientForm.getAptID(),
								loginForm.getVisitTypeID());
					} else if (formNameArray[0].trim().equals("genaralClinicOPDNew.jsp")) {
						patientList = patientDAOInf.retrieveGeneralClinicPatientDetails(patientForm.getPatientID(),
								patientForm.getVisitID(), loginForm.getClinicID());

					} else if (formNameArray[0].trim().equals("genaralClinicIPDNew.jsp")) {
						patientList = patientDAOInf.retrieveGenaralClinicPatientDetailsForIPDVisit(
								patientForm.getPatientID(), patientForm.getVisitID(), loginForm.getClinicID());
					} else {
						String visitType = daoInf1.retrieveVisitTypeNameByID(loginForm.getVisitTypeID());
						System.out.println("visitype is ::" + visitType);

						patientList = patientDAOInf.retrieveLastEnteredVisitDetail(patientForm.getPatientID(),
								patientForm.getVisitID(), loginForm.getClinicID(), visitType);
					}

					// retrieving present complaint list for last visit of patient
					String complaintList1 = patientDAOInf
							.retrievePresentComplaintsOfLastVisit(patientForm.getVisitID());

					request.setAttribute("complaintList", complaintList1);

					/* HashMap<String, String> PVComplaints = patientDAOInf.getPVComplaints(); */

					PVComplaints = patientDAOInf.getPVComplaints();

					String categoryList1 = patientDAOInf.retrieveCategoryListOfLastVisit(patientForm.getVisitID());
					request.setAttribute("categoryList", categoryList1);

					MedicalHistory = patientDAOInf.retrievemedicalHistoryListOfLastVisit(patientForm,
							patientForm.getPatientID());
					request.setAttribute("MedicalHistory", MedicalHistory);

					FamilyHistory = patientDAOInf.retrieveFamilyHistoryListOfLastVisit(patientForm,
							patientForm.getPatientID());
					request.setAttribute("FamilyHistory", FamilyHistory);

					PersonalHistory = patientDAOInf.retrievePersonalHistoryListOfLastVisit(patientForm,
							patientForm.getPatientID());
					request.setAttribute("PersonalHistory", PersonalHistory);

					onEaminationList = patientDAOInf.retrieveOnExaminationListByVisitID(patientForm.getVisitID());
					request.setAttribute("onEaminationList", onEaminationList);

					InjectionPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(
							patientForm.getPatientID(), patientForm.getVisitID(), "Injection");
					InjectionList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(),
							"Injection");

					TabletPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
							patientForm.getVisitID(), "Tablet");
					TabletList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Tablet");

					LiquidPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
							patientForm.getVisitID(), "Liquid");
					LiquidList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Liquid");

					/*
					 * retrieving prescription list by visitID
					 */
					prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
							patientForm.getVisitID(), loginForm.getClinicID());

					InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

					diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());

					/* Retrieve labReport List */
					labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
							loginForm.getClinicID());

					/*
					 * retrieving symptomCheck list by visitID
					 */
					symptomList = patientDAOInf.retrievesymptomCheckList(patientForm.getVisitID());

					complaintList = patientDAOInf.retrievecomplaintList(patientForm.getVisitID());

					String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
					request.setAttribute("paymentType", paymentType);

					// Checking if the CRF form is for Gokhale clinic, if so then load the diagnosis
					// from the json file else load the diagnosis from the PVDiagnosis table
					if (formNameArray[0].trim().equals("generalPhysicianGokhaleOPD.jsp")) {

						// Retrieving diagnosis list for the last visit ID
						orthoDiagnosisList = patientDAOInf.retrieveOrthoDiagnosisList(patientForm.getVisitID());

						JSONParser parser = new JSONParser();

						JSONArray diagnosisJSON = (JSONArray) parser
								.parse(new FileReader(realPath + File.separator + "ortho_charges.json"));

						for (Object jsonData : diagnosisJSON) {
							JSONObject data = (JSONObject) jsonData;

							// diagnoseList.put((String) data.get("rate"), (String) data.get("diagnosis"));
						}

					}
					diagnoseList = configurationUtil.getDiagnoseList();

					request.setAttribute("apptID", patientForm.getAptID());

					drugList = configurationUtil.getTradeNameList();

					InvestigationList = configurationUtil.getInvestigationList();

					frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

					// chargeTypeList = configurationUtil.getChargeTypeList();

					doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

					categoryList = configurationUtil.getCategoryList();

					hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

					// Inserting values into Audit table
					daoInf.insertAudit(request.getRemoteAddr(), "Add Medical Certificate", loginForm.getUserID());

					// Setting add opd page name value in pageName variable
					setPageName(formNameArray[0].trim());

					return SUCCESS;

				} else {
					addActionError("Failed to create medical certificate .Please check server logs for more details.");

					String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

					request.setAttribute("medicalCertiText", medicatCertificate);

					String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

					request.setAttribute("referralLetter", referralLetter);

					String check1 = patientDAOInf.verifyReferralLetter(patientForm.getVisitID());
					System.out.println("check1 value in action:" + check1);
					request.setAttribute("referralLetterCheck", check1);

					String check = patientDAOInf.verifyMedicalCertificate(patientForm.getVisitID());
					System.out.println("check value in action:" + check);
					request.setAttribute("medicalCertiCheck", check);

					/*
					 * retrieving patientList which contains visit details
					 */
					if (formNameArray[0].trim().equals("generalOPDNew.jsp")
							|| formNameArray[0].trim().equals("physicianOPDNew.jsp")
							|| formNameArray[0].trim().equals("generalPhysicianOPD.jsp")
							|| formNameArray[0].trim().equals("generalPhysicianGokhaleOPD.jsp")) {

						patientList = patientDAOInf.retrieveDefaultPatientDetails(patientForm.getPatientID(),
								patientForm.getVisitID(), loginForm.getClinicID(), patientForm.getAptID(),
								loginForm.getVisitTypeID());
					} else if (formNameArray[0].trim().equals("genaralClinicOPDNew.jsp")) {
						patientList = patientDAOInf.retrieveGeneralClinicPatientDetails(patientForm.getPatientID(),
								patientForm.getVisitID(), loginForm.getClinicID());

					} else if (formNameArray[0].trim().equals("genaralClinicIPDNew.jsp")) {
						patientList = patientDAOInf.retrieveGenaralClinicPatientDetailsForIPDVisit(
								patientForm.getPatientID(), patientForm.getVisitID(), loginForm.getClinicID());
					} else {
						String visitType = daoInf1.retrieveVisitTypeNameByID(loginForm.getVisitTypeID());
						System.out.println("visitype is ::" + visitType);

						patientList = patientDAOInf.retrieveLastEnteredVisitDetail(patientForm.getPatientID(),
								patientForm.getLastVisitID(), loginForm.getClinicID(), visitType);
					}

					// retrieving present complaint list for last visit of patient
					String complaintList1 = patientDAOInf
							.retrievePresentComplaintsOfLastVisit(patientForm.getVisitID());

					request.setAttribute("complaintList", complaintList1);

					/* HashMap<String, String> PVComplaints = patientDAOInf.getPVComplaints(); */

					PVComplaints = patientDAOInf.getPVComplaints();

					String categoryList1 = patientDAOInf.retrieveCategoryListOfLastVisit(patientForm.getVisitID());
					request.setAttribute("categoryList", categoryList1);

					MedicalHistory = patientDAOInf.retrievemedicalHistoryListOfLastVisit(patientForm,
							patientForm.getPatientID());
					request.setAttribute("MedicalHistory", MedicalHistory);

					FamilyHistory = patientDAOInf.retrieveFamilyHistoryListOfLastVisit(patientForm,
							patientForm.getPatientID());
					request.setAttribute("FamilyHistory", FamilyHistory);

					PersonalHistory = patientDAOInf.retrievePersonalHistoryListOfLastVisit(patientForm,
							patientForm.getPatientID());
					request.setAttribute("PersonalHistory", PersonalHistory);

					onEaminationList = patientDAOInf.retrieveOnExaminationListByVisitID(patientForm.getVisitID());
					request.setAttribute("onEaminationList", onEaminationList);

					InjectionPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(
							patientForm.getPatientID(), patientForm.getVisitID(), "Injection");
					InjectionList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(),
							"Injection");

					TabletPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
							patientForm.getVisitID(), "Tablet");
					TabletList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Tablet");

					LiquidPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
							patientForm.getVisitID(), "Liquid");
					LiquidList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Liquid");

					/*
					 * retrieving prescription list by visitID
					 */
					prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
							patientForm.getVisitID(), loginForm.getClinicID());

					InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

					diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());

					/* Retrieve labReport List */
					labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
							loginForm.getClinicID());

					/*
					 * retrieving symptomCheck list by visitID
					 */
					symptomList = patientDAOInf.retrievesymptomCheckList(patientForm.getVisitID());

					complaintList = patientDAOInf.retrievecomplaintList(patientForm.getVisitID());

					String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
					request.setAttribute("paymentType", paymentType);

					// Checking if the CRF form is for Gokhale clinic, if so then load the diagnosis
					// from the json file else load the diagnosis from the PVDiagnosis table
					if (formNameArray[0].trim().equals("generalPhysicianGokhaleOPD.jsp")) {

						// Retrieving diagnosis list for the last visit ID
						orthoDiagnosisList = patientDAOInf.retrieveOrthoDiagnosisList(patientForm.getVisitID());

						JSONParser parser = new JSONParser();

						JSONArray diagnosisJSON = (JSONArray) parser
								.parse(new FileReader(realPath + File.separator + "ortho_charges.json"));

						for (Object jsonData : diagnosisJSON) {
							JSONObject data = (JSONObject) jsonData;

							// diagnoseList.put((String) data.get("rate"), (String) data.get("diagnosis"));
						}

					}
					diagnoseList = configurationUtil.getDiagnoseList();

					request.setAttribute("apptID", patientForm.getAptID());

					categoryList = configurationUtil.getCategoryList();

					drugList = configurationUtil.getTradeNameList();

					InvestigationList = configurationUtil.getInvestigationList();

					frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

					// chargeTypeList = configurationUtil.getChargeTypeList();

					doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

					hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

					// Inserting values into Audit table
					daoInf.insertAudit(request.getRemoteAddr(), "Add Medical Certificate PDF Exception Occurred.",
							loginForm.getUserID());

					// Setting add opd page name value in pageName variable
					setPageName(formNameArray[0].trim());

					return ERROR;
				}
			} else {
				addActionError("Failed to add medical certificate. Please check log for more detials.");

				String medicalCertificateTabEnable = "Enable";

				request.setAttribute("medicalCertificateTabEnable", medicalCertificateTabEnable);

				request.setAttribute("printAvailable", "Yes");

				String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

				request.setAttribute("medicalCertiText", medicatCertificate);

				String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

				request.setAttribute("referralLetter", referralLetter);

				String check1 = patientDAOInf.verifyReferralLetter(patientForm.getVisitID());
				System.out.println("check1 value in action:" + check1);
				request.setAttribute("referralLetterCheck", check1);

				String check = patientDAOInf.verifyMedicalCertificate(patientForm.getVisitID());
				System.out.println("check value in action:" + check);
				request.setAttribute("medicalCertiCheck", check);
				/*
				 * retrieving patientList which contains visit details
				 */
				if (formNameArray[0].trim().equals("generalOPDNew.jsp")
						|| formNameArray[0].trim().equals("physicianOPDNew.jsp")
						|| formNameArray[0].trim().equals("generalPhysicianOPD.jsp")
						|| formNameArray[0].trim().equals("generalPhysicianGokhaleOPD.jsp")) {

					patientList = patientDAOInf.retrieveDefaultPatientDetails(patientForm.getPatientID(),
							patientForm.getVisitID(), loginForm.getClinicID(), patientForm.getAptID(),
							loginForm.getVisitTypeID());
				} else if (formNameArray[0].trim().equals("genaralClinicOPDNew.jsp")) {
					patientList = patientDAOInf.retrieveGeneralClinicPatientDetails(patientForm.getPatientID(),
							patientForm.getVisitID(), loginForm.getClinicID());

				} else if (formNameArray[0].trim().equals("genaralClinicIPDNew.jsp")) {
					patientList = patientDAOInf.retrieveGenaralClinicPatientDetailsForIPDVisit(
							patientForm.getPatientID(), patientForm.getVisitID(), loginForm.getClinicID());
				} else {
					String visitType = daoInf1.retrieveVisitTypeNameByID(loginForm.getVisitTypeID());
					System.out.println("visitype is ::" + visitType);

					patientList = patientDAOInf.retrieveLastEnteredVisitDetail(patientForm.getPatientID(),
							patientForm.getLastVisitID(), loginForm.getClinicID(), visitType);
				}

				// retrieving present complaint list for last visit of patient
				String complaintList1 = patientDAOInf.retrievePresentComplaintsOfLastVisit(patientForm.getVisitID());

				request.setAttribute("complaintList", complaintList1);

				/* HashMap<String, String> PVComplaints = patientDAOInf.getPVComplaints(); */

				PVComplaints = patientDAOInf.getPVComplaints();

				String categoryList1 = patientDAOInf.retrieveCategoryListOfLastVisit(patientForm.getVisitID());
				request.setAttribute("categoryList", categoryList1);

				MedicalHistory = patientDAOInf.retrievemedicalHistoryListOfLastVisit(patientForm,
						patientForm.getPatientID());
				request.setAttribute("MedicalHistory", MedicalHistory);

				FamilyHistory = patientDAOInf.retrieveFamilyHistoryListOfLastVisit(patientForm,
						patientForm.getPatientID());
				request.setAttribute("FamilyHistory", FamilyHistory);

				PersonalHistory = patientDAOInf.retrievePersonalHistoryListOfLastVisit(patientForm,
						patientForm.getPatientID());
				request.setAttribute("PersonalHistory", PersonalHistory);

				onEaminationList = patientDAOInf.retrieveOnExaminationListByVisitID(patientForm.getVisitID());
				request.setAttribute("onEaminationList", onEaminationList);

				InjectionPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
						patientForm.getVisitID(), "Injection");
				InjectionList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Injection");

				TabletPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
						patientForm.getVisitID(), "Tablet");
				TabletList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Tablet");

				LiquidPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
						patientForm.getVisitID(), "Liquid");
				LiquidList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Liquid");

				/*
				 * retrieving prescription list by visitID
				 */
				prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID());

				InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

				diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());

				/* Retrieve labReport List */
				labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
						loginForm.getClinicID());

				String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
				request.setAttribute("paymentType", paymentType);

				/*
				 * retrieving symptomCheck list by visitID
				 */
				symptomList = patientDAOInf.retrievesymptomCheckList(patientForm.getVisitID());

				complaintList = patientDAOInf.retrievecomplaintList(patientForm.getVisitID());

				// Checking if the CRF form is for Gokhale clinic, if so then load the diagnosis
				// from the json file else load the diagnosis from the PVDiagnosis table
				if (formNameArray[0].trim().equals("generalPhysicianGokhaleOPD.jsp")) {

					// Retrieving diagnosis list for the last visit ID
					orthoDiagnosisList = patientDAOInf.retrieveOrthoDiagnosisList(patientForm.getVisitID());

					HttpServletRequest request = ServletActionContext.getRequest();

					ServletContext context = request.getServletContext();

					String realPath = context.getRealPath("/");

					JSONParser parser = new JSONParser();

					JSONArray diagnosisJSON = (JSONArray) parser
							.parse(new FileReader(realPath + File.separator + "ortho_charges.json"));

					for (Object jsonData : diagnosisJSON) {
						JSONObject data = (JSONObject) jsonData;

						// diagnoseList.put((String) data.get("rate"), (String) data.get("diagnosis"));
					}

				}
				diagnoseList = configurationUtil.getDiagnoseList();

				request.setAttribute("apptID", patientForm.getAptID());

				drugList = configurationUtil.getTradeNameList();

				InvestigationList = configurationUtil.getInvestigationList();

				categoryList = configurationUtil.getCategoryList();

				frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

				// chargeTypeList = configurationUtil.getChargeTypeList();

				doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

				hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

				// Inserting values into Audit table
				daoInf.insertAudit(request.getRemoteAddr(), "Add Medical Certificate Exception Occurred.",
						loginForm.getUserID());

				// Setting add opd page name value in pageName variable
				setPageName(formNameArray[0].trim());

				return ERROR;
			}
		}
	}

	/**
	 * 
	 * @return
	 * @throws Exception
	 */
	public String updateMedicalCertificate() throws Exception {
		/*
		 * Getting user role from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");

		patientForm.setClinicID(loginForm.getClinicID());

		patientDAOInf = new PatientDAOImpl();

		ConvertToPDFUtil convertToPDFUtil = new ConvertToPDFUtil();

		LoginDAOInf daoInf = new LoginDAOImpl();

		ClinicDAOInf daoInf1 = new ClinicDAOImpl();

		RegistrationDAOinf registrationDAOinf = new RegistrationDAOImpl();

		PrescriptionManagementDAOInf managementDAOInf = new PrescriptionManagementDAOImpl();

		String accessKey = xmlUtil.getAccessKey();

		String secreteKey = xmlUtil.getSecreteKey();

		AWSS3Connect awss3Connect = new AWSS3Connect();

		// getting input file location from S3 bucket
		String s3reportFilePath = xmlUtil.getS3RDMLReportFilePath();

		// getting s3 bucket name
		String bucketName = util.getS3BucketName();

		// getting s3 bucket region
		String bucketRegion = xmlUtil.getS3BucketRegion();

		String s3LogoFilePath = xmlUtil.getS3RDMLFilePath();

		AWSCredentials credentials = new BasicAWSCredentials(accessKey, secreteKey);

		AmazonS3 s3 = AmazonS3ClientBuilder.standard().withCredentials(new AWSStaticCredentialsProvider(credentials))
				.withRegion(bucketRegion).build();

		int lastVisitID = patientDAOInf.retrieveLastVisitID(patientForm.getPatientID(), loginForm.getClinicID());

		String medicalCertificateTabEnable = "Enable";

		request.setAttribute("medicalCertificateTabEnable", medicalCertificateTabEnable);

		orthoBillItemList = patientDAOInf.retrieveOrthoBillingItemList(patientForm.getVisitID());

		boolean medCheck = patientDAOInf.verifyVisitExists("MedicalDocuments", patientForm.getVisitID());

		if (medCheck) {
			message = patientDAOInf.updateMedicalCertificate(patientForm.getMedicalCerti(), patientForm.getVisitID());
		} else {
			message = patientDAOInf.insertMedicalCertificate(patientForm.getMedicalCerti(), patientForm.getVisitID());
		}

		String dummy = "success";

		request.setAttribute("lasteEnteredVisitList", dummy);

		/*
		 * Getting form name to be display based on logged in User
		 */
		String[] formNameArray = loginForm.getOPDJSPName().split("&");

		System.out.println("Edit OPD JSP Page name for logged in user is ::: " + formNameArray[1].trim());

		if (message.equalsIgnoreCase("success")) {
			HttpServletRequest request = ServletActionContext.getRequest();

			ServletContext context = request.getServletContext();

			String realPath = context.getRealPath("/");
			System.out.println("Real path is :: " + realPath);

			// String pdfOutFIleName = reportFilePath + patientForm.getFirstName() +
			// patientForm.getLastName()
			String pdfOutFIleName = patientForm.getFirstName() + patientForm.getLastName() + patientForm.getPatientID()
					+ "_" + patientForm.getVisitID() + "medc.pdf";

			message = convertToPDFUtil.convertMedicalCertificatePDF(patientForm.getMedicalCertiForPDF(), pdfOutFIleName,
					realPath, s3, s3LogoFilePath, bucketName);
			if (message.equalsIgnoreCase("success")) {

				File inputFile = new File(realPath + "/" + pdfOutFIleName);

				// Storing file to S3 RDML INPUT FILE location
				message = awss3Connect.pushFile(inputFile, pdfOutFIleName, bucketName, bucketRegion, s3reportFilePath);

				S3ObjectInputStream s3ObjectInputStream = s3
						.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, pdfOutFIleName))
						.getObjectContent();

				patientForm.setFileInputStream(s3ObjectInputStream);

				patientForm.setFileName(pdfOutFIleName);

				addActionMessage("Successfully udpated Medical certificate details.");

				// Inserting values into Audit table
				daoInf.insertAudit(request.getRemoteAddr(), "Edit Medical Certificate", loginForm.getUserID());

				/*
				 * Verifying whether visit exist for the patient or not, if not then disable
				 * View Last Visit button
				 */
				int patientVisitExistCheck = patientDAOInf.verifyVisitDetails(patientForm.getPatientID(),
						loginForm.getClinicID());

				String disableButtonCheck = "enable";
				if (patientVisitExistCheck == 0) {
					disableButtonCheck = "disable";
				}

				request.setAttribute("disableButtonCheck", disableButtonCheck);

				request.setAttribute("apptID", patientForm.getAptID());

				/*
				 * Retrieving patient age based on patientID
				 */
				String patientAge = patientDAOInf.retrievePatientAgeByPatientID(patientForm.getPatientID());

				request.setAttribute("patientAge", patientAge);

				/*
				 * retrieving patient gender based on patientID
				 */
				String patientGender = patientDAOInf.retrievePatientGenderByPatientID(patientForm.getPatientID());

				request.setAttribute("gender", patientGender);

				hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

				/*
				 * retrieving patientList which contains visit details
				 */
				if (formNameArray[1].trim().equals("generalOPDEdit.jsp")
						|| formNameArray[1].trim().equals("physicianOPDEdit.jsp")
						|| formNameArray[1].trim().equals("generalPhysicianOPDEdit.jsp")
						|| formNameArray[1].trim().equals("generalPhysicianGokhaleOPDEdit.jsp")) {
					patientList = patientDAOInf.retrieveDefaultPatientDetails(patientForm.getPatientID(),
							patientForm.getVisitID(), loginForm.getClinicID(), patientForm.getAptID(),
							loginForm.getVisitTypeID());
				} else if (formNameArray[1].trim().equals("generalHospitalOPDEdit.jsp")) {

					patientList = patientDAOInf.retrieveGeneralHospitalPatientDetailsForExistiongVisit(
							patientForm.getPatientID(), patientForm.getVisitID(), loginForm.getClinicID());
				} else if (formNameArray[1].trim().equals("genaralClinicOPDEdit.jsp")) {
					patientList = patientDAOInf.retrieveGeneralClinicPatientDetails(patientForm.getPatientID(),
							patientForm.getVisitID(), loginForm.getClinicID());

				} else if (formNameArray[1].trim().equals("genaralClinicIPDEdit.jsp")) {
					patientList = patientDAOInf.retrieveGenaralClinicPatientDetailsForIPDVisit(
							patientForm.getPatientID(), patientForm.getVisitID(), loginForm.getClinicID());

				} else {

					String visitType = daoInf1.retrieveVisitTypeNameByID(loginForm.getVisitTypeID());
					System.out.println("visitype is ::" + visitType);

					patientList = patientDAOInf.retrieveLastEnteredVisitDetail(patientForm.getPatientID(),
							patientForm.getVisitID(), loginForm.getClinicID(), visitType);

				}

				boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

				if (visitCheck) {
					billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
				} else {
					billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
							loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
				}

				OPDChargesList = managementDAOInf.retrieveAllOPDCharges(loginForm.getPracticeID());
				request.setAttribute("OPDChargesList", OPDChargesList);

				String ChargesDetails = managementDAOInf.retrieveOPDChargesDetailsByReceiptID(patientForm.getVisitID());
				request.setAttribute("ChargesDetails", ChargesDetails);

				LabTestList = managementDAOInf.retrieveAllLabTests(loginForm.getPracticeID());
				request.setAttribute("LabTestList", LabTestList);

				String InvestigationDetails = managementDAOInf
						.retrieveInvestigationDetailsByVisitID(patientForm.getVisitID());
				request.setAttribute("InvestigationDetails", InvestigationDetails);

				// retrieving present complaint list for last visit of patient
				String complaintList1 = patientDAOInf.retrievePresentComplaintsOfLastVisit(patientForm.getVisitID());
				request.setAttribute("complaintList", complaintList1);

				String categoryList1 = patientDAOInf.retrieveCategoryListOfLastVisit(patientForm.getVisitID());
				request.setAttribute("categoryList", categoryList1);

				PVComplaints = patientDAOInf.getPVComplaints();

				MedicalHistory = patientDAOInf.retrievemedicalHistoryListOfLastVisit(patientForm,
						patientForm.getPatientID());
				request.setAttribute("MedicalHistory", MedicalHistory);

				FamilyHistory = patientDAOInf.retrieveFamilyHistoryListOfLastVisit(patientForm,
						patientForm.getPatientID());
				request.setAttribute("FamilyHistory", FamilyHistory);

				PersonalHistory = patientDAOInf.retrievePersonalHistoryListOfLastVisit(patientForm,
						patientForm.getPatientID());
				request.setAttribute("PersonalHistory", PersonalHistory);

				onEaminationList = patientDAOInf.retrieveOnExaminationListByVisitID(patientForm.getVisitID());
				request.setAttribute("onEaminationList", onEaminationList);

				request.setAttribute("lasteEnteredVisitList", dummy);

				InjectionPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
						patientForm.getVisitID(), "Injection");
				InjectionList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Injection");

				TabletPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
						patientForm.getVisitID(), "Tablet");
				TabletList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Tablet");

				LiquidPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
						patientForm.getVisitID(), "Liquid");
				LiquidList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Liquid");

				/*
				 * retrieving prescription list by visitID
				 */
				prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID());

				InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

				diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());

				/* Retrieve labReport List */
				labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
						loginForm.getClinicID());

				String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
				request.setAttribute("paymentType", paymentType);

				/*
				 * retrieving symptomCheck list by visitID
				 */
				symptomList = patientDAOInf.retrievesymptomCheckList(patientForm.getVisitID());

				complaintList = patientDAOInf.retrievecomplaintList(patientForm.getVisitID());

				historyList = patientDAOInf.retrieveMedicalHistoryList(patientForm.getPatientID());

				medicationList = patientDAOInf.retrieveCurrentMedicationList(patientForm.getPatientID());

				String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

				request.setAttribute("medicalCertiText", medicatCertificate);

				String check1 = patientDAOInf.verifyReferralLetter(patientForm.getVisitID());
				System.out.println("check1 value in action:" + check1);
				request.setAttribute("referralLetterCheck", check1);

				String check = patientDAOInf.verifyMedicalCertificate(patientForm.getVisitID());
				System.out.println("check value in action:" + check);
				request.setAttribute("medicalCertiCheck", check);

				String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

				request.setAttribute("referralLetter", referralLetter);

				/*
				 * retrieve last inserted visit ID for care type OPD by patientID
				 */
				// int lastOPDVisitID =
				// patientDAOInf.retrieveLastOPDVisitID(patientForm.getPatientID());

				// chargeTypeList = configurationUtil.getChargeTypeList();

				doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

				// Checking if the CRF form is for Gokhale clinic, if so then load the diagnosis
				// from the json file else load the diagnosis from the PVDiagnosis table
				if (formNameArray[1].trim().equals("generalPhysicianGokhaleOPDEdit.jsp")) {

					// Retrieving diagnosis list for the last visit ID
					orthoDiagnosisList = patientDAOInf.retrieveOrthoDiagnosisList(patientForm.getVisitID());

					JSONParser parser = new JSONParser();

					JSONArray diagnosisJSON = (JSONArray) parser
							.parse(new FileReader(realPath + File.separator + "ortho_charges.json"));

					for (Object jsonData : diagnosisJSON) {
						JSONObject data = (JSONObject) jsonData;

						// diagnoseList.put((String) data.get("rate"), (String) data.get("diagnosis"));
					}

				}
				diagnoseList = configurationUtil.getDiagnoseList();

				resayuDiagnosisList = configurationUtil.getDiagnoseList();

				categoryList = configurationUtil.getCategoryList();

				resayuDiagnosisList.put("Other", "Other");

				drugList = configurationUtil.getTradeNameList();
				InvestigationList = configurationUtil.getInvestigationList();

				frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

				// Setting Edit opd page name value in pageName variable
				setPageName(formNameArray[1].trim());

				return SUCCESS;
			} else {
				addActionError("Failed to update medical certificate .Please check server logs for more details.");

				// Inserting values into Audit table
				daoInf.insertAudit(request.getRemoteAddr(), "Edit Medical Certificate PDF Exception Occurred.",
						loginForm.getUserID());

				/*
				 * Verifying whether visit exist for the patient or not, if not then disable
				 * View Last Visit button
				 */
				int patientVisitExistCheck = patientDAOInf.verifyVisitDetails(patientForm.getPatientID(),
						loginForm.getClinicID());

				String disableButtonCheck = "enable";
				if (patientVisitExistCheck == 0) {
					disableButtonCheck = "disable";
				}

				request.setAttribute("disableButtonCheck", disableButtonCheck);

				OPDChargesList = managementDAOInf.retrieveAllOPDCharges(loginForm.getPracticeID());
				request.setAttribute("OPDChargesList", OPDChargesList);

				String ChargesDetails = managementDAOInf.retrieveOPDChargesDetailsByReceiptID(patientForm.getVisitID());
				request.setAttribute("ChargesDetails", ChargesDetails);

				LabTestList = managementDAOInf.retrieveAllLabTests(loginForm.getPracticeID());
				request.setAttribute("LabTestList", LabTestList);

				String InvestigationDetails = managementDAOInf
						.retrieveInvestigationDetailsByVisitID(patientForm.getVisitID());
				request.setAttribute("InvestigationDetails", InvestigationDetails);

				// retrieving present complaint list for last visit of patient
				String complaintList1 = patientDAOInf.retrievePresentComplaintsOfLastVisit(patientForm.getVisitID());
				request.setAttribute("complaintList", complaintList1);

				String categoryList1 = patientDAOInf.retrieveCategoryListOfLastVisit(patientForm.getVisitID());
				request.setAttribute("categoryList", categoryList1);

				PVComplaints = patientDAOInf.getPVComplaints();

				MedicalHistory = patientDAOInf.retrievemedicalHistoryListOfLastVisit(patientForm,
						patientForm.getPatientID());
				request.setAttribute("MedicalHistory", MedicalHistory);

				FamilyHistory = patientDAOInf.retrieveFamilyHistoryListOfLastVisit(patientForm,
						patientForm.getPatientID());
				request.setAttribute("FamilyHistory", FamilyHistory);

				PersonalHistory = patientDAOInf.retrievePersonalHistoryListOfLastVisit(patientForm,
						patientForm.getPatientID());
				request.setAttribute("PersonalHistory", PersonalHistory);

				onEaminationList = patientDAOInf.retrieveOnExaminationListByVisitID(patientForm.getVisitID());
				request.setAttribute("onEaminationList", onEaminationList);

				/* Retrieve labReport List */
				labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
						loginForm.getClinicID());

				request.setAttribute("lasteEnteredVisitList", dummy);

				InjectionPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
						patientForm.getVisitID(), "Injection");
				InjectionList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Injection");

				TabletPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
						patientForm.getVisitID(), "Tablet");
				TabletList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Tablet");

				LiquidPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
						patientForm.getVisitID(), "Liquid");
				LiquidList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Liquid");

				/*
				 * Retrieving patient age based on patientID
				 */
				String patientAge = patientDAOInf.retrievePatientAgeByPatientID(patientForm.getPatientID());

				request.setAttribute("patientAge", patientAge);

				request.setAttribute("apptID", patientForm.getAptID());

				/*
				 * retrieving patient gender based on patientID
				 */
				String patientGender = patientDAOInf.retrievePatientGenderByPatientID(patientForm.getPatientID());

				request.setAttribute("gender", patientGender);

				hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

				/*
				 * retrieving patientList which contains visit details
				 */
				if (formNameArray[1].trim().equals("generalOPDEdit.jsp")
						|| formNameArray[1].trim().equals("physicianOPDEdit.jsp")
						|| formNameArray[1].trim().equals("generalPhysicianOPDEdit.jsp")
						|| formNameArray[1].trim().equals("generalPhysicianGokhaleOPDEdit.jsp")) {
					patientList = patientDAOInf.retrieveDefaultPatientDetails(patientForm.getPatientID(),
							patientForm.getVisitID(), loginForm.getClinicID(), patientForm.getAptID(),
							loginForm.getVisitTypeID());
				} else if (formNameArray[1].trim().equals("generalHospitalOPDEdit.jsp")) {

					patientList = patientDAOInf.retrieveGeneralHospitalPatientDetailsForExistiongVisit(
							patientForm.getPatientID(), patientForm.getVisitID(), loginForm.getClinicID());
				} else if (formNameArray[1].trim().equals("genaralClinicOPDEdit.jsp")) {
					patientList = patientDAOInf.retrieveGeneralClinicPatientDetails(patientForm.getPatientID(),
							patientForm.getVisitID(), loginForm.getClinicID());

				} else if (formNameArray[1].trim().equals("genaralClinicIPDEdit.jsp")) {
					patientList = patientDAOInf.retrieveGenaralClinicPatientDetailsForIPDVisit(
							patientForm.getPatientID(), patientForm.getVisitID(), loginForm.getClinicID());

				} else {
					String visitType = daoInf1.retrieveVisitTypeNameByID(loginForm.getVisitTypeID());
					System.out.println("visitype is ::" + visitType);

					patientList = patientDAOInf.retrieveLastEnteredVisitDetail(patientForm.getPatientID(),
							patientForm.getVisitID(), loginForm.getClinicID(), visitType);

				}

				boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

				if (visitCheck) {
					billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
				} else {
					billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
							loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
				}

				/*
				 * retrieving prescription list by visitID
				 */
				prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID());

				InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

				diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());

				/* Retrieve labReport List */
				labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
						loginForm.getClinicID());

				/*
				 * retrieving symptomCheck list by visitID
				 */
				symptomList = patientDAOInf.retrievesymptomCheckList(patientForm.getVisitID());

				complaintList = patientDAOInf.retrievecomplaintList(patientForm.getVisitID());

				historyList = patientDAOInf.retrieveMedicalHistoryList(patientForm.getPatientID());

				medicationList = patientDAOInf.retrieveCurrentMedicationList(patientForm.getPatientID());

				String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
				request.setAttribute("paymentType", paymentType);

				String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

				request.setAttribute("medicalCertiText", medicatCertificate);

				String check1 = patientDAOInf.verifyReferralLetter(patientForm.getVisitID());
				System.out.println("check1 value in action:" + check1);
				request.setAttribute("referralLetterCheck", check1);

				String check = patientDAOInf.verifyMedicalCertificate(patientForm.getVisitID());
				System.out.println("check value in action:" + check);
				request.setAttribute("medicalCertiCheck", check);

				String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

				request.setAttribute("referralLetter", referralLetter);

				/*
				 * retrieve last inserted visit ID for care type OPD by patientID
				 */
				// int lastOPDVisitID =
				// patientDAOInf.retrieveLastOPDVisitID(patientForm.getPatientID());

				// chargeTypeList = configurationUtil.getChargeTypeList();

				doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

				// Checking if the CRF form is for Gokhale clinic, if so then load the diagnosis
				// from the json file else load the diagnosis from the PVDiagnosis table
				if (formNameArray[1].trim().equals("generalPhysicianGokhaleOPDEdit.jsp")) {

					// Retrieving diagnosis list for the last visit ID
					orthoDiagnosisList = patientDAOInf.retrieveOrthoDiagnosisList(patientForm.getVisitID());

					JSONParser parser = new JSONParser();

					JSONArray diagnosisJSON = (JSONArray) parser
							.parse(new FileReader(realPath + File.separator + "ortho_charges.json"));

					for (Object jsonData : diagnosisJSON) {
						JSONObject data = (JSONObject) jsonData;

						// diagnoseList.put((String) data.get("rate"), (String) data.get("diagnosis"));
					}

				}
				diagnoseList = configurationUtil.getDiagnoseList();

				categoryList = configurationUtil.getCategoryList();

				resayuDiagnosisList = configurationUtil.getDiagnoseList();

				resayuDiagnosisList.put("Other", "Other");

				drugList = configurationUtil.getTradeNameList();

				InvestigationList = configurationUtil.getInvestigationList();

				frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

				// Setting Edit opd page name value in pageName variable
				setPageName(formNameArray[1].trim());

				return ERROR;
			}
		} else {
			addActionError("Failed to update medical certificate. Please check log for more detials.");

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Edit Medical Certificate Exception Occurred.",
					loginForm.getUserID());

			/*
			 * Verifying whether visit exist for the patient or not, if not then disable
			 * View Last Visit button
			 */
			int patientVisitExistCheck = patientDAOInf.verifyVisitDetails(patientForm.getPatientID(),
					loginForm.getClinicID());

			String disableButtonCheck = "enable";
			if (patientVisitExistCheck == 0) {
				disableButtonCheck = "disable";
			}

			request.setAttribute("disableButtonCheck", disableButtonCheck);

			/*
			 * Retrieving patient age based on patientID
			 */
			String patientAge = patientDAOInf.retrievePatientAgeByPatientID(patientForm.getPatientID());

			request.setAttribute("patientAge", patientAge);

			/*
			 * retrieving patient gender based on patientID
			 */
			String patientGender = patientDAOInf.retrievePatientGenderByPatientID(patientForm.getPatientID());

			request.setAttribute("gender", patientGender);

			request.setAttribute("apptID", patientForm.getAptID());

			hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

			/*
			 * retrieving patientList which contains visit details
			 */
			if (formNameArray[1].trim().equals("generalOPDEdit.jsp")
					|| formNameArray[1].trim().equals("physicianOPDEdit.jsp")
					|| formNameArray[1].trim().equals("generalPhysicianOPDEdit.jsp")
					|| formNameArray[1].trim().equals("generalPhysicianGokhaleOPDEdit.jsp")) {
				patientList = patientDAOInf.retrieveDefaultPatientDetails(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID(), patientForm.getAptID(),
						loginForm.getVisitTypeID());
			} else if (formNameArray[1].trim().equals("generalHospitalOPDEdit.jsp")) {

				patientList = patientDAOInf.retrieveGeneralHospitalPatientDetailsForExistiongVisit(
						patientForm.getPatientID(), patientForm.getVisitID(), loginForm.getClinicID());
			} else if (formNameArray[1].trim().equals("genaralClinicOPDEdit.jsp")) {
				patientList = patientDAOInf.retrieveGeneralClinicPatientDetails(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID());

			} else if (formNameArray[1].trim().equals("genaralClinicIPDEdit.jsp")) {
				patientList = patientDAOInf.retrieveGenaralClinicPatientDetailsForIPDVisit(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID());

			} else {
				String visitType = daoInf1.retrieveVisitTypeNameByID(loginForm.getVisitTypeID());
				System.out.println("visitype is ::" + visitType);

				patientList = patientDAOInf.retrieveLastEnteredVisitDetail(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID(), visitType);

			}

			boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

			if (visitCheck) {
				billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
			} else {
				billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
						loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
			}

			// retrieving present complaint list for last visit of patient
			String complaintList1 = patientDAOInf.retrievePresentComplaintsOfLastVisit(patientForm.getVisitID());
			request.setAttribute("complaintList", complaintList1);

			String categoryList1 = patientDAOInf.retrieveCategoryListOfLastVisit(patientForm.getVisitID());
			request.setAttribute("categoryList", categoryList1);

			PVComplaints = patientDAOInf.getPVComplaints();

			MedicalHistory = patientDAOInf.retrievemedicalHistoryListOfLastVisit(patientForm,
					patientForm.getPatientID());
			request.setAttribute("MedicalHistory", MedicalHistory);

			FamilyHistory = patientDAOInf.retrieveFamilyHistoryListOfLastVisit(patientForm, patientForm.getPatientID());
			request.setAttribute("FamilyHistory", FamilyHistory);

			PersonalHistory = patientDAOInf.retrievePersonalHistoryListOfLastVisit(patientForm,
					patientForm.getPatientID());
			request.setAttribute("PersonalHistory", PersonalHistory);

			onEaminationList = patientDAOInf.retrieveOnExaminationListByVisitID(patientForm.getVisitID());
			request.setAttribute("onEaminationList", onEaminationList);

			request.setAttribute("lasteEnteredVisitList", dummy);

			InjectionPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID(), "Injection");
			InjectionList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Injection");

			TabletPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID(), "Tablet");
			TabletList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Tablet");

			LiquidPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID(), "Liquid");
			LiquidList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Liquid");
			/*
			 * retrieving prescription list by visitID
			 */
			prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID());

			InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

			diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());

			/* Retrieve labReport List */
			labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
					loginForm.getClinicID());

			/*
			 * retrieving symptomCheck list by visitID
			 */
			symptomList = patientDAOInf.retrievesymptomCheckList(patientForm.getVisitID());

			complaintList = patientDAOInf.retrievecomplaintList(patientForm.getVisitID());

			historyList = patientDAOInf.retrieveMedicalHistoryList(patientForm.getPatientID());

			medicationList = patientDAOInf.retrieveCurrentMedicationList(patientForm.getPatientID());

			String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
			request.setAttribute("paymentType", paymentType);

			String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

			request.setAttribute("medicalCertiText", medicatCertificate);

			String check1 = patientDAOInf.verifyReferralLetter(patientForm.getVisitID());
			System.out.println("check1 value in action:" + check1);
			request.setAttribute("referralLetterCheck", check1);

			String check = patientDAOInf.verifyMedicalCertificate(patientForm.getVisitID());
			System.out.println("check value in action:" + check);
			request.setAttribute("medicalCertiCheck", check);

			String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

			request.setAttribute("referralLetter", referralLetter);

			/*
			 * retrieve last inserted visit ID for care type OPD by patientID
			 */
			// int lastOPDVisitID =
			// patientDAOInf.retrieveLastOPDVisitID(patientForm.getPatientID());

			// chargeTypeList = configurationUtil.getChargeTypeList();

			doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

			// Checking if the CRF form is for Gokhale clinic, if so then load the diagnosis
			// from the json file else load the diagnosis from the PVDiagnosis table
			if (formNameArray[1].trim().equals("generalPhysicianGokhaleOPDEdit.jsp")) {

				// Retrieving diagnosis list for the last visit ID
				orthoDiagnosisList = patientDAOInf.retrieveOrthoDiagnosisList(patientForm.getVisitID());

				HttpServletRequest request = ServletActionContext.getRequest();

				ServletContext context = request.getServletContext();

				String realPath = context.getRealPath("/");

				JSONParser parser = new JSONParser();

				JSONArray diagnosisJSON = (JSONArray) parser
						.parse(new FileReader(realPath + File.separator + "ortho_charges.json"));

				for (Object jsonData : diagnosisJSON) {
					JSONObject data = (JSONObject) jsonData;

					// diagnoseList.put((String) data.get("rate"), (String) data.get("diagnosis"));
				}

			}
			diagnoseList = configurationUtil.getDiagnoseList();

			resayuDiagnosisList = configurationUtil.getDiagnoseList();

			resayuDiagnosisList.put("Other", "Other");

			drugList = configurationUtil.getTradeNameList();

			InvestigationList = configurationUtil.getInvestigationList();

			frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

			categoryList = configurationUtil.getCategoryList();

			// Setting Edit opd page name value in pageName variable
			setPageName(formNameArray[1].trim());

			return ERROR;
		}
	}

	/**
	 * 
	 * @return
	 * @throws Exception
	 */
	public String addReferralLetter() throws Exception {
		/*
		 * Getting user role from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");

		patientDAOInf = new PatientDAOImpl();

		LoginDAOInf daoInf = new LoginDAOImpl();

		ClinicDAOInf daoInf1 = new ClinicDAOImpl();

		RegistrationDAOinf registrationDAOinf = new RegistrationDAOImpl();

		PrescriptionManagementDAOInf managementDAOInf = new PrescriptionManagementDAOImpl();

		ConvertToPDFUtil convertToPDFUtil = new ConvertToPDFUtil();

		String accessKey = xmlUtil.getAccessKey();

		String secreteKey = xmlUtil.getSecreteKey();

		AWSS3Connect awss3Connect = new AWSS3Connect();

		// getting input file location from S3 bucket
		String s3reportFilePath = xmlUtil.getS3RDMLReportFilePath();

		// getting s3 bucket name
		String bucketName = util.getS3BucketName();

		// getting s3 bucket region
		String bucketRegion = xmlUtil.getS3BucketRegion();

		String s3LogoFilePath = xmlUtil.getS3RDMLFilePath();

		AWSCredentials credentials = new BasicAWSCredentials(accessKey, secreteKey);

		orthoBillItemList = patientDAOInf.retrieveOrthoBillingItemList(patientForm.getVisitID());

		AmazonS3 s3 = AmazonS3ClientBuilder.standard().withCredentials(new AWSStaticCredentialsProvider(credentials))
				.withRegion(bucketRegion).build();

		boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

		if (visitCheck) {
			billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
		} else {
			billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
					loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
		}

		// String dummy = "";
		String dummy = "success";

		request.setAttribute("lasteEnteredVisitList", dummy);

		OPDChargesList = managementDAOInf.retrieveAllOPDCharges(loginForm.getPracticeID());
		request.setAttribute("OPDChargesList", OPDChargesList);

		String ChargesDetails = managementDAOInf.retrieveOPDChargesDetailsByReceiptID(patientForm.getVisitID());
		request.setAttribute("ChargesDetails", ChargesDetails);

		LabTestList = managementDAOInf.retrieveAllLabTests(loginForm.getPracticeID());
		request.setAttribute("LabTestList", LabTestList);

		String InvestigationDetails = managementDAOInf.retrieveInvestigationDetailsByVisitID(patientForm.getVisitID());
		request.setAttribute("InvestigationDetails", InvestigationDetails);

		/*
		 * Getting form name to be display based on logged in User
		 */
		String[] formNameArray = loginForm.getOPDJSPName().split("&");

		System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[0].trim());

		/*
		 * Checking whether vistId is 0, if yes, then give error msg saying No visit
		 * added. Please add visit first else proceed further to upload lab report files
		 */
		if (patientForm.getVisitID() == 0) {

			addActionError("No visit added. Please add visit first.");

			String referralLetterTabEnable = "Enable";

			request.setAttribute("referralLetterTabEnable", referralLetterTabEnable);

			request.setAttribute("printAvailable", "No");

			String check1 = patientDAOInf.verifyReferralLetter(patientForm.getVisitID());
			System.out.println("check1 value in action:" + check1);
			request.setAttribute("referralLetterCheck", "no");

			String check = patientDAOInf.verifyMedicalCertificate(patientForm.getVisitID());
			System.out.println("check value in action:" + check);
			request.setAttribute("medicalCertiCheck", "no");

			/*
			 * retrieving patientList which contains visit details
			 */
			if (formNameArray[0].trim().equals("generalOPDNew.jsp")
					|| formNameArray[0].trim().equals("physicianOPDNew.jsp")
					|| formNameArray[0].trim().equals("generalPhysicianOPD.jsp")
					|| formNameArray[0].trim().equals("generalPhysicianGokhaleOPD.jsp")) {

				patientList = patientDAOInf.retrieveDefaultPatientDetails(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID(), patientForm.getAptID(),
						loginForm.getVisitTypeID());
			} else if (formNameArray[0].trim().equals("genaralClinicOPDNew.jsp")) {
				patientList = patientDAOInf.retrieveGeneralClinicPatientDetails(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID());

			} else if (formNameArray[0].trim().equals("genaralClinicIPDNew.jsp")) {
				patientList = patientDAOInf.retrieveGenaralClinicPatientDetailsForIPDVisit(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID());
			} else {
				String visitType = daoInf1.retrieveVisitTypeNameByID(loginForm.getVisitTypeID());
				System.out.println("visitype is ::" + visitType);

				patientList = patientDAOInf.retrieveLastEnteredVisitDetail(patientForm.getPatientID(),
						patientForm.getLastVisitID(), loginForm.getClinicID(), visitType);
			}

			// retrieving present complaint list for last visit of patient
			String complaintList1 = patientDAOInf.retrievePresentComplaintsOfLastVisit(patientForm.getVisitID());

			request.setAttribute("complaintList", complaintList1);

			/* HashMap<String, String> PVComplaints = patientDAOInf.getPVComplaints(); */

			PVComplaints = patientDAOInf.getPVComplaints();

			String categoryList1 = patientDAOInf.retrieveCategoryListOfLastVisit(patientForm.getVisitID());
			request.setAttribute("categoryList", categoryList1);

			MedicalHistory = patientDAOInf.retrievemedicalHistoryListOfLastVisit(patientForm,
					patientForm.getPatientID());
			request.setAttribute("MedicalHistory", MedicalHistory);

			FamilyHistory = patientDAOInf.retrieveFamilyHistoryListOfLastVisit(patientForm, patientForm.getPatientID());
			request.setAttribute("FamilyHistory", FamilyHistory);

			PersonalHistory = patientDAOInf.retrievePersonalHistoryListOfLastVisit(patientForm,
					patientForm.getPatientID());
			request.setAttribute("PersonalHistory", PersonalHistory);

			onEaminationList = patientDAOInf.retrieveOnExaminationListByVisitID(patientForm.getVisitID());
			request.setAttribute("onEaminationList", onEaminationList);

			InjectionPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID(), "Injection");
			InjectionList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Injection");

			TabletPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID(), "Tablet");
			TabletList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Tablet");

			LiquidPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID(), "Liquid");
			LiquidList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Liquid");

			/*
			 * retrieving prescription list by visitID
			 */
			prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID());

			InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

			diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());

			/*
			 * retrieving symptomCheck list by visitID
			 */
			symptomList = patientDAOInf.retrievesymptomCheckList(patientForm.getVisitID());

			complaintList = patientDAOInf.retrievecomplaintList(patientForm.getVisitID());

			historyList = patientDAOInf.retrieveMedicalHistoryList(patientForm.getPatientID());

			medicationList = patientDAOInf.retrieveCurrentMedicationList(patientForm.getPatientID());

			/* Retrieve labReport List */
			labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
					loginForm.getClinicID());

			String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
			request.setAttribute("paymentType", paymentType);

			// Checking if the CRF form is for Gokhale clinic, if so then load the diagnosis
			// from the json file else load the diagnosis from the PVDiagnosis table
			if (formNameArray[0].trim().equals("generalPhysicianGokhaleOPD.jsp")) {

				// Retrieving diagnosis list for the last visit ID
				orthoDiagnosisList = patientDAOInf.retrieveOrthoDiagnosisList(patientForm.getVisitID());

				HttpServletRequest request = ServletActionContext.getRequest();

				ServletContext context = request.getServletContext();

				String realPath = context.getRealPath("/");

				JSONParser parser = new JSONParser();

				JSONArray diagnosisJSON = (JSONArray) parser
						.parse(new FileReader(realPath + File.separator + "ortho_charges.json"));

				for (Object jsonData : diagnosisJSON) {
					JSONObject data = (JSONObject) jsonData;

					// diagnoseList.put((String) data.get("rate"), (String) data.get("diagnosis"));
				}

			}
			diagnoseList = configurationUtil.getDiagnoseList();

			request.setAttribute("apptID", patientForm.getAptID());

			drugList = configurationUtil.getTradeNameList();

			InvestigationList = configurationUtil.getInvestigationList();

			frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

			categoryList = configurationUtil.getCategoryList();

			// chargeTypeList = configurationUtil.getChargeTypeList();

			doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

			hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Add General Physician Prescription", loginForm.getUserID());

			// Setting add opd page name value in pageName variable
			setPageName(formNameArray[0].trim());

			return ERROR;

		} else {

			System.out.println("Referral letter :" + patientForm.getReferralLetter());

			boolean medCheck = patientDAOInf.verifyVisitExists("MedicalDocuments", patientForm.getVisitID());

			if (medCheck) {
				message = patientDAOInf.updateReferralLetter(patientForm.getReferralLetter(), patientForm.getVisitID());
			} else {
				message = patientDAOInf.insertReferralLetter(patientForm.getReferralLetter(), patientForm.getVisitID());
			}

			// message = patientDAOInf.insertReferralLetter(patientForm.getReferralLetter(),
			// patientForm.getVisitID());
			if (message.equalsIgnoreCase("success")) {

				String referralLetterTabEnable = "Enable";

				request.setAttribute("referralLetterTabEnable", referralLetterTabEnable);

				request.setAttribute("printAvailable", "Yes");

				HttpServletRequest request = ServletActionContext.getRequest();

				ServletContext context = request.getServletContext();

				String realPath = context.getRealPath("/");
				System.out.println("Real path is :: " + realPath);

				// String pdfOutFIleName = reportFilePath + patientForm.getFirstName() +
				// patientForm.getLastName()
				String pdfOutFIleName = patientForm.getFirstName() + patientForm.getLastName()
						+ patientForm.getPatientID() + "_" + patientForm.getVisitID() + "refl.pdf";

				message = convertToPDFUtil.convertReferralLetterPDF(patientForm.getReferralLetterForPDF(),
						loginForm.getFullName(), pdfOutFIleName, realPath, s3, s3LogoFilePath, bucketName);
				if (message.equalsIgnoreCase("success")) {

					File inputFile = new File(realPath + "/" + pdfOutFIleName);

					// Storing file to S3 RDML INPUT FILE location
					message = awss3Connect.pushFile(inputFile, pdfOutFIleName, bucketName, bucketRegion,
							s3reportFilePath);

					S3ObjectInputStream s3ObjectInputStream = s3
							.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, pdfOutFIleName))
							.getObjectContent();

					patientForm.setFileInputStream(s3ObjectInputStream);

					patientForm.setFileName(pdfOutFIleName);

					addActionMessage("Successfully created Referral Letter details.");

					String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

					request.setAttribute("medicalCertiText", medicatCertificate);

					String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

					request.setAttribute("referralLetter", referralLetter);

					String check1 = patientDAOInf.verifyReferralLetter(patientForm.getVisitID());

					request.setAttribute("referralLetterCheck", check1);

					String check = patientDAOInf.verifyMedicalCertificate(patientForm.getVisitID());

					request.setAttribute("medicalCertiCheck", check);

					/*
					 * retrieving patientList which contains visit details
					 */
					if (formNameArray[0].trim().equals("generalOPDNew.jsp")
							|| formNameArray[0].trim().equals("physicianOPDNew.jsp")
							|| formNameArray[0].trim().equals("generalPhysicianOPD.jsp")
							|| formNameArray[0].trim().equals("generalPhysicianGokhaleOPD.jsp")) {

						patientList = patientDAOInf.retrieveDefaultPatientDetails(patientForm.getPatientID(),
								patientForm.getVisitID(), loginForm.getClinicID(), patientForm.getAptID(),
								loginForm.getVisitTypeID());
					} else if (formNameArray[0].trim().equals("genaralClinicOPDNew.jsp")) {
						patientList = patientDAOInf.retrieveGeneralClinicPatientDetails(patientForm.getPatientID(),
								patientForm.getVisitID(), loginForm.getClinicID());

					} else if (formNameArray[0].trim().equals("genaralClinicIPDNew.jsp")) {
						patientList = patientDAOInf.retrieveGenaralClinicPatientDetailsForIPDVisit(
								patientForm.getPatientID(), patientForm.getVisitID(), loginForm.getClinicID());
					} else {
						String visitType = daoInf1.retrieveVisitTypeNameByID(loginForm.getVisitTypeID());
						System.out.println("visitype is ::" + visitType);

						patientList = patientDAOInf.retrieveLastEnteredVisitDetail(patientForm.getPatientID(),
								patientForm.getVisitID(), loginForm.getClinicID(), visitType);
					}

					// retrieving present complaint list for last visit of patient
					String complaintList1 = patientDAOInf
							.retrievePresentComplaintsOfLastVisit(patientForm.getVisitID());

					request.setAttribute("complaintList", complaintList1);

					/* HashMap<String, String> PVComplaints = patientDAOInf.getPVComplaints(); */

					PVComplaints = patientDAOInf.getPVComplaints();

					String categoryList1 = patientDAOInf.retrieveCategoryListOfLastVisit(patientForm.getVisitID());
					request.setAttribute("categoryList", categoryList1);

					MedicalHistory = patientDAOInf.retrievemedicalHistoryListOfLastVisit(patientForm,
							patientForm.getPatientID());
					request.setAttribute("MedicalHistory", MedicalHistory);

					FamilyHistory = patientDAOInf.retrieveFamilyHistoryListOfLastVisit(patientForm,
							patientForm.getPatientID());
					request.setAttribute("FamilyHistory", FamilyHistory);

					PersonalHistory = patientDAOInf.retrievePersonalHistoryListOfLastVisit(patientForm,
							patientForm.getPatientID());
					request.setAttribute("PersonalHistory", PersonalHistory);

					onEaminationList = patientDAOInf.retrieveOnExaminationListByVisitID(patientForm.getVisitID());
					request.setAttribute("onEaminationList", onEaminationList);

					InjectionPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(
							patientForm.getPatientID(), patientForm.getVisitID(), "Injection");
					InjectionList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(),
							"Injection");

					TabletPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
							patientForm.getVisitID(), "Tablet");
					TabletList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Tablet");

					LiquidPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
							patientForm.getVisitID(), "Liquid");
					LiquidList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Liquid");

					/*
					 * retrieving prescription list by visitID
					 */
					prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
							patientForm.getVisitID(), loginForm.getClinicID());

					InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

					diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());

					/* Retrieve labReport List */
					labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
							loginForm.getClinicID());

					/*
					 * retrieving symptomCheck list by visitID
					 */
					symptomList = patientDAOInf.retrievesymptomCheckList(patientForm.getVisitID());

					complaintList = patientDAOInf.retrievecomplaintList(patientForm.getVisitID());

					historyList = patientDAOInf.retrieveMedicalHistoryList(patientForm.getPatientID());

					medicationList = patientDAOInf.retrieveCurrentMedicationList(patientForm.getPatientID());

					String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());

					request.setAttribute("paymentType", paymentType);

					// Checking if the CRF form is for Gokhale clinic, if so then load the diagnosis
					// from the json file else load the diagnosis from the PVDiagnosis table
					if (formNameArray[0].trim().equals("generalPhysicianGokhaleOPD.jsp")) {

						// Retrieving diagnosis list for the last visit ID
						orthoDiagnosisList = patientDAOInf.retrieveOrthoDiagnosisList(patientForm.getVisitID());

						JSONParser parser = new JSONParser();

						JSONArray diagnosisJSON = (JSONArray) parser
								.parse(new FileReader(realPath + File.separator + "ortho_charges.json"));

						for (Object jsonData : diagnosisJSON) {
							JSONObject data = (JSONObject) jsonData;

							// diagnoseList.put((String) data.get("rate"), (String) data.get("diagnosis"));
						}

					}
					diagnoseList = configurationUtil.getDiagnoseList();

					request.setAttribute("apptID", patientForm.getAptID());

					drugList = configurationUtil.getTradeNameList();

					InvestigationList = configurationUtil.getInvestigationList();

					frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

					// chargeTypeList = configurationUtil.getChargeTypeList();

					doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

					hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

					categoryList = configurationUtil.getCategoryList();

					// Inserting values into Audit table
					daoInf.insertAudit(request.getRemoteAddr(), "Add General Physician Prescription",
							loginForm.getUserID());

					// Setting add opd page name value in pageName variable
					setPageName(formNameArray[0].trim());

					return SUCCESS;
				} else {
					addActionError("Failed to create Referral Letter .Please check server logs for more details.");

					String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

					request.setAttribute("medicalCertiText", medicatCertificate);

					String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

					request.setAttribute("referralLetter", referralLetter);

					String check1 = patientDAOInf.verifyReferralLetter(patientForm.getVisitID());
					System.out.println("check1 value in action:" + check1);
					request.setAttribute("referralLetterCheck", check1);

					String check = patientDAOInf.verifyMedicalCertificate(patientForm.getVisitID());
					System.out.println("check value in action:" + check);
					request.setAttribute("medicalCertiCheck", check);

					/*
					 * retrieving patientList which contains visit details
					 */
					if (formNameArray[0].trim().equals("generalOPDNew.jsp")
							|| formNameArray[0].trim().equals("physicianOPDNew.jsp")
							|| formNameArray[0].trim().equals("generalPhysicianOPD.jsp")
							|| formNameArray[0].trim().equals("generalPhysicianGokhaleOPD.jsp")) {

						patientList = patientDAOInf.retrieveDefaultPatientDetails(patientForm.getPatientID(),
								patientForm.getVisitID(), loginForm.getClinicID(), patientForm.getAptID(),
								loginForm.getVisitTypeID());
					} else if (formNameArray[0].trim().equals("genaralClinicOPDNew.jsp")) {
						patientList = patientDAOInf.retrieveGeneralClinicPatientDetails(patientForm.getPatientID(),
								patientForm.getVisitID(), loginForm.getClinicID());

					} else if (formNameArray[0].trim().equals("genaralClinicIPDNew.jsp")) {
						patientList = patientDAOInf.retrieveGenaralClinicPatientDetailsForIPDVisit(
								patientForm.getPatientID(), patientForm.getVisitID(), loginForm.getClinicID());
					} else {
						String visitType = daoInf1.retrieveVisitTypeNameByID(loginForm.getVisitTypeID());
						System.out.println("visitype is ::" + visitType);

						patientList = patientDAOInf.retrieveLastEnteredVisitDetail(patientForm.getPatientID(),
								patientForm.getLastVisitID(), loginForm.getClinicID(), visitType);
					}

					// retrieving present complaint list for last visit of patient
					String complaintList1 = patientDAOInf
							.retrievePresentComplaintsOfLastVisit(patientForm.getVisitID());

					request.setAttribute("complaintList", complaintList1);

					/* HashMap<String, String> PVComplaints = patientDAOInf.getPVComplaints(); */

					PVComplaints = patientDAOInf.getPVComplaints();

					String categoryList1 = patientDAOInf.retrieveCategoryListOfLastVisit(patientForm.getVisitID());
					request.setAttribute("categoryList", categoryList1);

					MedicalHistory = patientDAOInf.retrievemedicalHistoryListOfLastVisit(patientForm,
							patientForm.getPatientID());
					request.setAttribute("MedicalHistory", MedicalHistory);

					FamilyHistory = patientDAOInf.retrieveFamilyHistoryListOfLastVisit(patientForm,
							patientForm.getPatientID());
					request.setAttribute("FamilyHistory", FamilyHistory);

					PersonalHistory = patientDAOInf.retrievePersonalHistoryListOfLastVisit(patientForm,
							patientForm.getPatientID());
					request.setAttribute("PersonalHistory", PersonalHistory);

					onEaminationList = patientDAOInf.retrieveOnExaminationListByVisitID(patientForm.getVisitID());
					request.setAttribute("onEaminationList", onEaminationList);

					InjectionPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(
							patientForm.getPatientID(), patientForm.getVisitID(), "Injection");
					InjectionList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(),
							"Injection");

					TabletPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
							patientForm.getVisitID(), "Tablet");
					TabletList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Tablet");

					LiquidPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
							patientForm.getVisitID(), "Liquid");
					LiquidList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Liquid");

					/*
					 * retrieving prescription list by visitID
					 */
					prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
							patientForm.getVisitID(), loginForm.getClinicID());

					InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

					diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());

					/* Retrieve labReport List */
					labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
							loginForm.getClinicID());

					/*
					 * retrieving symptomCheck list by visitID
					 */
					symptomList = patientDAOInf.retrievesymptomCheckList(patientForm.getVisitID());

					complaintList = patientDAOInf.retrievecomplaintList(patientForm.getVisitID());

					historyList = patientDAOInf.retrieveMedicalHistoryList(patientForm.getPatientID());

					medicationList = patientDAOInf.retrieveCurrentMedicationList(patientForm.getPatientID());

					String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
					request.setAttribute("paymentType", paymentType);

					// Checking if the CRF form is for Gokhale clinic, if so then load the diagnosis
					// from the json file else load the diagnosis from the PVDiagnosis table
					if (formNameArray[0].trim().equals("generalPhysicianGokhaleOPD.jsp")) {

						// Retrieving diagnosis list for the last visit ID
						orthoDiagnosisList = patientDAOInf.retrieveOrthoDiagnosisList(patientForm.getVisitID());

						JSONParser parser = new JSONParser();

						JSONArray diagnosisJSON = (JSONArray) parser
								.parse(new FileReader(realPath + File.separator + "ortho_charges.json"));

						for (Object jsonData : diagnosisJSON) {
							JSONObject data = (JSONObject) jsonData;

							// diagnoseList.put((String) data.get("rate"), (String) data.get("diagnosis"));
						}

					}
					diagnoseList = configurationUtil.getDiagnoseList();

					request.setAttribute("apptID", patientForm.getAptID());

					drugList = configurationUtil.getTradeNameList();

					InvestigationList = configurationUtil.getInvestigationList();

					frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

					// chargeTypeList = configurationUtil.getChargeTypeList();

					doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

					categoryList = configurationUtil.getCategoryList();

					hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

					// Inserting values into Audit table
					daoInf.insertAudit(request.getRemoteAddr(), "Add General Physician Prescription",
							loginForm.getUserID());

					// Setting add opd page name value in pageName variable
					setPageName(formNameArray[0].trim());

					return ERROR;
				}
			} else {
				addActionError("Failed to add Referral Letter. Please check log for more detials.");

				String referralLetterTabEnable = "Enable";

				request.setAttribute("referralLetterTabEnable", referralLetterTabEnable);

				request.setAttribute("printAvailable", "Yes");

				String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

				request.setAttribute("medicalCertiText", medicatCertificate);

				String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

				request.setAttribute("referralLetter", referralLetter);

				String check1 = patientDAOInf.verifyReferralLetter(patientForm.getVisitID());
				System.out.println("check1 value in action:" + check1);
				request.setAttribute("referralLetterCheck", check1);

				String check = patientDAOInf.verifyMedicalCertificate(patientForm.getVisitID());
				System.out.println("check value in action:" + check);
				request.setAttribute("medicalCertiCheck", check);

				/*
				 * retrieving patientList which contains visit details
				 */
				if (formNameArray[0].trim().equals("generalOPDNew.jsp")
						|| formNameArray[0].trim().equals("physicianOPDNew.jsp")
						|| formNameArray[0].trim().equals("generalPhysicianOPD.jsp")
						|| formNameArray[0].trim().equals("generalPhysicianGokhaleOPD.jsp")) {

					patientList = patientDAOInf.retrieveDefaultPatientDetails(patientForm.getPatientID(),
							patientForm.getVisitID(), loginForm.getClinicID(), patientForm.getAptID(),
							loginForm.getVisitTypeID());
				} else if (formNameArray[0].trim().equals("genaralClinicOPDNew.jsp")) {
					patientList = patientDAOInf.retrieveGeneralClinicPatientDetails(patientForm.getPatientID(),
							patientForm.getVisitID(), loginForm.getClinicID());

				} else if (formNameArray[0].trim().equals("genaralClinicIPDNew.jsp")) {
					patientList = patientDAOInf.retrieveGenaralClinicPatientDetailsForIPDVisit(
							patientForm.getPatientID(), patientForm.getVisitID(), loginForm.getClinicID());
				} else {
					String visitType = daoInf1.retrieveVisitTypeNameByID(loginForm.getVisitTypeID());
					System.out.println("visitype is ::" + visitType);

					patientList = patientDAOInf.retrieveLastEnteredVisitDetail(patientForm.getPatientID(),
							patientForm.getLastVisitID(), loginForm.getClinicID(), visitType);
				}

				// retrieving present complaint list for last visit of patient
				String complaintList1 = patientDAOInf.retrievePresentComplaintsOfLastVisit(patientForm.getVisitID());

				request.setAttribute("complaintList", complaintList1);

				/* HashMap<String, String> PVComplaints = patientDAOInf.getPVComplaints(); */

				PVComplaints = patientDAOInf.getPVComplaints();

				String categoryList1 = patientDAOInf.retrieveCategoryListOfLastVisit(patientForm.getVisitID());
				request.setAttribute("categoryList", categoryList1);

				MedicalHistory = patientDAOInf.retrievemedicalHistoryListOfLastVisit(patientForm,
						patientForm.getPatientID());
				request.setAttribute("MedicalHistory", MedicalHistory);

				FamilyHistory = patientDAOInf.retrieveFamilyHistoryListOfLastVisit(patientForm,
						patientForm.getPatientID());
				request.setAttribute("FamilyHistory", FamilyHistory);

				PersonalHistory = patientDAOInf.retrievePersonalHistoryListOfLastVisit(patientForm,
						patientForm.getPatientID());
				request.setAttribute("PersonalHistory", PersonalHistory);

				onEaminationList = patientDAOInf.retrieveOnExaminationListByVisitID(patientForm.getVisitID());
				request.setAttribute("onEaminationList", onEaminationList);

				InjectionPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
						patientForm.getVisitID(), "Injection");
				InjectionList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Injection");

				TabletPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
						patientForm.getVisitID(), "Tablet");
				TabletList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Tablet");

				LiquidPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
						patientForm.getVisitID(), "Liquid");
				LiquidList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Liquid");

				/*
				 * retrieving prescription list by visitID
				 */
				prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID());

				InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

				diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());

				/* Retrieve labReport List */
				labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
						loginForm.getClinicID());

				/*
				 * retrieving symptomCheck list by visitID
				 */
				symptomList = patientDAOInf.retrievesymptomCheckList(patientForm.getVisitID());

				complaintList = patientDAOInf.retrievecomplaintList(patientForm.getVisitID());

				historyList = patientDAOInf.retrieveMedicalHistoryList(patientForm.getPatientID());

				medicationList = patientDAOInf.retrieveCurrentMedicationList(patientForm.getPatientID());

				String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
				request.setAttribute("paymentType", paymentType);

				// Checking if the CRF form is for Gokhale clinic, if so then load the diagnosis
				// from the json file else load the diagnosis from the PVDiagnosis table
				if (formNameArray[0].trim().equals("generalPhysicianGokhaleOPD.jsp")) {

					// Retrieving diagnosis list for the last visit ID
					orthoDiagnosisList = patientDAOInf.retrieveOrthoDiagnosisList(patientForm.getVisitID());

					HttpServletRequest request = ServletActionContext.getRequest();

					ServletContext context = request.getServletContext();

					String realPath = context.getRealPath("/");

					JSONParser parser = new JSONParser();

					JSONArray diagnosisJSON = (JSONArray) parser
							.parse(new FileReader(realPath + File.separator + "ortho_charges.json"));

					for (Object jsonData : diagnosisJSON) {
						JSONObject data = (JSONObject) jsonData;

						// diagnoseList.put((String) data.get("rate"), (String) data.get("diagnosis"));
					}

				}
				diagnoseList = configurationUtil.getDiagnoseList();

				request.setAttribute("apptID", patientForm.getAptID());

				drugList = configurationUtil.getTradeNameList();

				InvestigationList = configurationUtil.getInvestigationList();

				frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

				// chargeTypeList = configurationUtil.getChargeTypeList();

				doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

				hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

				categoryList = configurationUtil.getCategoryList();

				// Inserting values into Audit table
				daoInf.insertAudit(request.getRemoteAddr(), "Add General Physician Prescription",
						loginForm.getUserID());

				// Setting add opd page name value in pageName variable
				setPageName(formNameArray[0].trim());

				return ERROR;
			}
		}
	}

	/**
	 * 
	 * @return
	 * @throws Exception
	 */
	public String updateReferralLetter() throws Exception {
		/*
		 * Getting user role from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");

		patientForm.setClinicID(loginForm.getClinicID());

		patientDAOInf = new PatientDAOImpl();

		LoginDAOInf daoInf = new LoginDAOImpl();

		ClinicDAOInf daoInf1 = new ClinicDAOImpl();

		ConvertToPDFUtil convertToPDFUtil = new ConvertToPDFUtil();

		RegistrationDAOinf registrationDAOinf = new RegistrationDAOImpl();

		PrescriptionManagementDAOInf managementDAOInf = new PrescriptionManagementDAOImpl();

		String accessKey = xmlUtil.getAccessKey();

		String secreteKey = xmlUtil.getSecreteKey();

		AWSS3Connect awss3Connect = new AWSS3Connect();

		// getting input file location from S3 bucket
		String s3reportFilePath = xmlUtil.getS3RDMLReportFilePath();

		// getting s3 bucket name
		String bucketName = util.getS3BucketName();

		// getting s3 bucket region
		String bucketRegion = xmlUtil.getS3BucketRegion();

		String s3LogoFilePath = xmlUtil.getS3RDMLFilePath();

		AWSCredentials credentials = new BasicAWSCredentials(accessKey, secreteKey);

		AmazonS3 s3 = AmazonS3ClientBuilder.standard().withCredentials(new AWSStaticCredentialsProvider(credentials))
				.withRegion(bucketRegion).build();

		System.out.println("Referral  letter text :::: " + patientForm.getReferralLetter());

		orthoBillItemList = patientDAOInf.retrieveOrthoBillingItemList(patientForm.getVisitID());

		String referralLetterTabEnable = "Enable";

		request.setAttribute("referralLetterTabEnable", referralLetterTabEnable);

		int lastVisitID = patientDAOInf.retrieveLastVisitID(patientForm.getPatientID(), loginForm.getClinicID());

		String dummy = "success";

		request.setAttribute("lasteEnteredVisitList", dummy);

		boolean medCheck = patientDAOInf.verifyVisitExists("MedicalDocuments", patientForm.getVisitID());

		if (medCheck) {
			message = patientDAOInf.updateReferralLetter(patientForm.getReferralLetter(), patientForm.getVisitID());
		} else {
			message = patientDAOInf.insertReferralLetter(patientForm.getReferralLetter(), patientForm.getVisitID());
		}

		/*
		 * Getting form name to be display based on logged in User
		 */
		String[] formNameArray = loginForm.getOPDJSPName().split("&");

		System.out.println("Edit OPD JSP Page name for logged in user is ::: " + formNameArray[1].trim());

		if (message.equalsIgnoreCase("success")) {
			HttpServletRequest request = ServletActionContext.getRequest();

			ServletContext context = request.getServletContext();

			String realPath = context.getRealPath("/");
			System.out.println("Real path is :: " + realPath);

			// String pdfOutFIleName = reportFilePath + patientForm.getFirstName() +
			// patientForm.getLastName()
			String pdfOutFIleName = patientForm.getFirstName() + patientForm.getLastName() + patientForm.getPatientID()
					+ "_" + patientForm.getVisitID() + "refl.pdf";

			message = convertToPDFUtil.convertReferralLetterPDF(patientForm.getReferralLetterForPDF(),
					loginForm.getFullName(), pdfOutFIleName, realPath, s3, s3LogoFilePath, bucketName);

			if (message.equalsIgnoreCase("success")) {
				System.out.println("success after pdf of referral letter");
				addActionMessage("Successfully updated Referral Letter details.");

				File inputFile = new File(realPath + "/" + pdfOutFIleName);

				// Storing file to S3 RDML INPUT FILE location
				message = awss3Connect.pushFile(inputFile, pdfOutFIleName, bucketName, bucketRegion, s3reportFilePath);

				S3ObjectInputStream s3ObjectInputStream = s3
						.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, pdfOutFIleName))
						.getObjectContent();

				patientForm.setFileInputStream(s3ObjectInputStream);

				patientForm.setFileName(pdfOutFIleName);

				// Inserting values into Audit table
				daoInf.insertAudit(request.getRemoteAddr(), "Edit Referral Letter", loginForm.getUserID());

				String check1 = patientDAOInf.verifyReferralLetter(patientForm.getVisitID());
				System.out.println("check1 value in action:" + check1);
				request.setAttribute("referralLetterCheck", check1);

				String check = patientDAOInf.verifyMedicalCertificate(patientForm.getVisitID());
				System.out.println("check value in action:" + check);
				request.setAttribute("medicalCertiCheck", check);

				/*
				 * Verifying whether visit exist for the patient or not, if not then disable
				 * View Last Visit button
				 */
				int patientVisitExistCheck = patientDAOInf.verifyVisitDetails(patientForm.getPatientID(),
						loginForm.getClinicID());

				String disableButtonCheck = "enable";
				if (patientVisitExistCheck == 0) {
					disableButtonCheck = "disable";
				}

				request.setAttribute("disableButtonCheck", disableButtonCheck);

				/*
				 * Retrieving patient age based on patientID
				 */
				String patientAge = patientDAOInf.retrievePatientAgeByPatientID(patientForm.getPatientID());

				request.setAttribute("patientAge", patientAge);

				/*
				 * retrieving patient gender based on patientID
				 */
				String patientGender = patientDAOInf.retrievePatientGenderByPatientID(patientForm.getPatientID());

				request.setAttribute("gender", patientGender);

				request.setAttribute("apptID", patientForm.getAptID());

				hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

				/*
				 * retrieving patientList which contains visit details
				 */
				if (formNameArray[1].trim().equals("generalOPDEdit.jsp")
						|| formNameArray[1].trim().equals("physicianOPDEdit.jsp")
						|| formNameArray[1].trim().equals("generalPhysicianOPDEdit.jsp")
						|| formNameArray[1].trim().equals("generalPhysicianGokhaleOPDEdit.jsp")) {
					patientList = patientDAOInf.retrieveDefaultPatientDetails(patientForm.getPatientID(),
							patientForm.getVisitID(), loginForm.getClinicID(), patientForm.getAptID(),
							loginForm.getVisitTypeID());
				} else if (formNameArray[1].trim().equals("generalHospitalOPDEdit.jsp")) {
					patientList = patientDAOInf.retrieveGeneralHospitalPatientDetailsForExistiongVisit(
							patientForm.getPatientID(), patientForm.getVisitID(), loginForm.getClinicID());
				} else if (formNameArray[1].trim().equals("genaralClinicOPDEdit.jsp")) {
					patientList = patientDAOInf.retrieveGeneralClinicPatientDetails(patientForm.getPatientID(),
							patientForm.getVisitID(), loginForm.getClinicID());

				} else if (formNameArray[1].trim().equals("genaralClinicIPDEdit.jsp")) {
					patientList = patientDAOInf.retrieveGenaralClinicPatientDetailsForIPDVisit(
							patientForm.getPatientID(), patientForm.getVisitID(), loginForm.getClinicID());

				} else {

					String visitType = daoInf1.retrieveVisitTypeNameByID(loginForm.getVisitTypeID());
					System.out.println("visitype is ::" + visitType);

					patientList = patientDAOInf.retrieveLastEnteredVisitDetail(patientForm.getPatientID(),
							patientForm.getVisitID(), loginForm.getClinicID(), visitType);

				}

				boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

				if (visitCheck) {
					billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
				} else {
					billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
							loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
				}

				/* Retrieve labReport List */
				labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
						loginForm.getClinicID());

				OPDChargesList = managementDAOInf.retrieveAllOPDCharges(loginForm.getPracticeID());
				request.setAttribute("OPDChargesList", OPDChargesList);

				String ChargesDetails = managementDAOInf.retrieveOPDChargesDetailsByReceiptID(patientForm.getVisitID());
				request.setAttribute("ChargesDetails", ChargesDetails);

				LabTestList = managementDAOInf.retrieveAllLabTests(loginForm.getPracticeID());
				request.setAttribute("LabTestList", LabTestList);

				String InvestigationDetails = managementDAOInf
						.retrieveInvestigationDetailsByVisitID(patientForm.getVisitID());
				request.setAttribute("InvestigationDetails", InvestigationDetails);

				// retrieving present complaint list for last visit of patient
				String complaintList1 = patientDAOInf.retrievePresentComplaintsOfLastVisit(patientForm.getVisitID());
				request.setAttribute("complaintList", complaintList1);

				String categoryList1 = patientDAOInf.retrieveCategoryListOfLastVisit(patientForm.getVisitID());
				request.setAttribute("categoryList", categoryList1);

				PVComplaints = patientDAOInf.getPVComplaints();

				MedicalHistory = patientDAOInf.retrievemedicalHistoryListOfLastVisit(patientForm,
						patientForm.getPatientID());
				request.setAttribute("MedicalHistory", MedicalHistory);

				FamilyHistory = patientDAOInf.retrieveFamilyHistoryListOfLastVisit(patientForm,
						patientForm.getPatientID());
				request.setAttribute("FamilyHistory", FamilyHistory);

				PersonalHistory = patientDAOInf.retrievePersonalHistoryListOfLastVisit(patientForm,
						patientForm.getPatientID());
				request.setAttribute("PersonalHistory", PersonalHistory);

				onEaminationList = patientDAOInf.retrieveOnExaminationListByVisitID(patientForm.getVisitID());
				request.setAttribute("onEaminationList", onEaminationList);

				request.setAttribute("lasteEnteredVisitList", dummy);

				InjectionPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
						patientForm.getVisitID(), "Injection");
				InjectionList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Injection");

				TabletPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
						patientForm.getVisitID(), "Tablet");
				TabletList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Tablet");

				LiquidPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
						patientForm.getVisitID(), "Liquid");
				LiquidList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Liquid");

				/*
				 * retrieving prescription list by visitID
				 */
				prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID());

				InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

				diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());

				/*
				 * retrieving symptomCheck list by visitID
				 */
				symptomList = patientDAOInf.retrievesymptomCheckList(patientForm.getVisitID());

				complaintList = patientDAOInf.retrievecomplaintList(patientForm.getVisitID());

				historyList = patientDAOInf.retrieveMedicalHistoryList(patientForm.getPatientID());

				medicationList = patientDAOInf.retrieveCurrentMedicationList(patientForm.getPatientID());

				String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
				request.setAttribute("paymentType", paymentType);

				String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

				request.setAttribute("medicalCertiText", medicatCertificate);

				String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

				request.setAttribute("referralLetter", referralLetter);

				doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

				// Checking if the CRF form is for Gokhale clinic, if so then load the diagnosis
				// from the json file else load the diagnosis from the PVDiagnosis table
				if (formNameArray[1].trim().equals("generalPhysicianGokhaleOPDEdit.jsp")) {

					// Retrieving diagnosis list for the last visit ID
					orthoDiagnosisList = patientDAOInf.retrieveOrthoDiagnosisList(patientForm.getVisitID());

					JSONParser parser = new JSONParser();

					JSONArray diagnosisJSON = (JSONArray) parser
							.parse(new FileReader(realPath + File.separator + "ortho_charges.json"));

					for (Object jsonData : diagnosisJSON) {
						JSONObject data = (JSONObject) jsonData;

						// diagnoseList.put((String) data.get("rate"), (String) data.get("diagnosis"));
					}

				}
				diagnoseList = configurationUtil.getDiagnoseList();

				resayuDiagnosisList = configurationUtil.getDiagnoseList();

				resayuDiagnosisList.put("Other", "Other");

				drugList = configurationUtil.getTradeNameList();

				InvestigationList = configurationUtil.getInvestigationList();

				frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

				categoryList = configurationUtil.getCategoryList();

				// Setting Edit opd page name value in pageName variable
				setPageName(formNameArray[1].trim());

				return SUCCESS;
			} else {
				addActionError("Failed to update Referral Letter .Please check server logs for more details.");

				// Inserting values into Audit table
				daoInf.insertAudit(request.getRemoteAddr(), "Edit Referral Letter PDF Exception Occurred.",
						loginForm.getUserID());

				String check1 = patientDAOInf.verifyReferralLetter(patientForm.getVisitID());
				System.out.println("check1 value in action:" + check1);
				request.setAttribute("referralLetterCheck", check1);

				String check = patientDAOInf.verifyMedicalCertificate(patientForm.getVisitID());
				System.out.println("check value in action:" + check);
				request.setAttribute("medicalCertiCheck", check);

				/*
				 * Verifying whether visit exist for the patient or not, if not then disable
				 * View Last Visit button
				 */
				int patientVisitExistCheck = patientDAOInf.verifyVisitDetails(patientForm.getPatientID(),
						loginForm.getClinicID());

				String disableButtonCheck = "enable";
				if (patientVisitExistCheck == 0) {
					disableButtonCheck = "disable";
				}

				request.setAttribute("disableButtonCheck", disableButtonCheck);

				/*
				 * Retrieving patient age based on patientID
				 */
				String patientAge = patientDAOInf.retrievePatientAgeByPatientID(patientForm.getPatientID());

				request.setAttribute("patientAge", patientAge);

				request.setAttribute("apptID", patientForm.getAptID());

				/*
				 * retrieving patient gender based on patientID
				 */
				String patientGender = patientDAOInf.retrievePatientGenderByPatientID(patientForm.getPatientID());

				request.setAttribute("gender", patientGender);

				hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

				if (formNameArray[1].trim().equals("generalOPDEdit.jsp")
						|| formNameArray[1].trim().equals("physicianOPDEdit.jsp")
						|| formNameArray[1].trim().equals("generalPhysicianOPDEdit.jsp")
						|| formNameArray[1].trim().equals("generalPhysicianGokhaleOPDEdit.jsp")) {
					patientList = patientDAOInf.retrieveDefaultPatientDetails(patientForm.getPatientID(),
							patientForm.getVisitID(), loginForm.getClinicID(), patientForm.getAptID(),
							loginForm.getVisitTypeID());
				} else if (formNameArray[1].trim().equals("generalHospitalOPDEdit.jsp")) {
					patientList = patientDAOInf.retrieveGeneralHospitalPatientDetailsForExistiongVisit(
							patientForm.getPatientID(), patientForm.getVisitID(), loginForm.getClinicID());
				} else if (formNameArray[1].trim().equals("genaralClinicOPDEdit.jsp")) {
					patientList = patientDAOInf.retrieveGeneralClinicPatientDetails(patientForm.getPatientID(),
							patientForm.getVisitID(), loginForm.getClinicID());

				} else if (formNameArray[1].trim().equals("genaralClinicIPDEdit.jsp")) {
					patientList = patientDAOInf.retrieveGenaralClinicPatientDetailsForIPDVisit(
							patientForm.getPatientID(), patientForm.getVisitID(), loginForm.getClinicID());

				} else {
					String visitType = daoInf1.retrieveVisitTypeNameByID(loginForm.getVisitTypeID());
					System.out.println("visitype is ::" + visitType);

					patientList = patientDAOInf.retrieveLastEnteredVisitDetail(patientForm.getPatientID(),
							patientForm.getVisitID(), loginForm.getClinicID(), visitType);

				}

				boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

				if (visitCheck) {
					billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
				} else {
					billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
							loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
				}

				/* Retrieve labReport List */
				labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
						loginForm.getClinicID());

				OPDChargesList = managementDAOInf.retrieveAllOPDCharges(loginForm.getPracticeID());
				request.setAttribute("OPDChargesList", OPDChargesList);

				String ChargesDetails = managementDAOInf.retrieveOPDChargesDetailsByReceiptID(patientForm.getVisitID());
				request.setAttribute("ChargesDetails", ChargesDetails);

				LabTestList = managementDAOInf.retrieveAllLabTests(loginForm.getPracticeID());
				request.setAttribute("LabTestList", LabTestList);

				String InvestigationDetails = managementDAOInf
						.retrieveInvestigationDetailsByVisitID(patientForm.getVisitID());
				request.setAttribute("InvestigationDetails", InvestigationDetails);

				// retrieving present complaint list for last visit of patient
				String complaintList1 = patientDAOInf.retrievePresentComplaintsOfLastVisit(patientForm.getVisitID());
				request.setAttribute("complaintList", complaintList1);

				String categoryList1 = patientDAOInf.retrieveCategoryListOfLastVisit(patientForm.getVisitID());
				request.setAttribute("categoryList", categoryList1);

				PVComplaints = patientDAOInf.getPVComplaints();

				MedicalHistory = patientDAOInf.retrievemedicalHistoryListOfLastVisit(patientForm,
						patientForm.getPatientID());
				request.setAttribute("MedicalHistory", MedicalHistory);

				FamilyHistory = patientDAOInf.retrieveFamilyHistoryListOfLastVisit(patientForm,
						patientForm.getPatientID());
				request.setAttribute("FamilyHistory", FamilyHistory);

				PersonalHistory = patientDAOInf.retrievePersonalHistoryListOfLastVisit(patientForm,
						patientForm.getPatientID());
				request.setAttribute("PersonalHistory", PersonalHistory);

				onEaminationList = patientDAOInf.retrieveOnExaminationListByVisitID(patientForm.getVisitID());
				request.setAttribute("onEaminationList", onEaminationList);

				request.setAttribute("lasteEnteredVisitList", dummy);

				InjectionPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
						patientForm.getVisitID(), "Injection");
				InjectionList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Injection");

				TabletPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
						patientForm.getVisitID(), "Tablet");
				TabletList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Tablet");

				LiquidPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
						patientForm.getVisitID(), "Liquid");
				LiquidList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Liquid");
				/*
				 * retrieving prescription list by visitID
				 */
				prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID());

				InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

				diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());

				/*
				 * retrieving symptomCheck list by visitID
				 */
				symptomList = patientDAOInf.retrievesymptomCheckList(patientForm.getVisitID());

				complaintList = patientDAOInf.retrievecomplaintList(patientForm.getVisitID());

				historyList = patientDAOInf.retrieveMedicalHistoryList(patientForm.getPatientID());

				medicationList = patientDAOInf.retrieveCurrentMedicationList(patientForm.getPatientID());

				String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
				request.setAttribute("paymentType", paymentType);

				String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

				request.setAttribute("medicalCertiText", medicatCertificate);

				String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

				request.setAttribute("referralLetter", referralLetter);

				/*
				 * retrieve last inserted visit ID for care type OPD by patientID
				 */
				// int lastOPDVisitID =
				// patientDAOInf.retrieveLastOPDVisitID(patientForm.getPatientID());

				// chargeTypeList = configurationUtil.getChargeTypeList();

				doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

				// Checking if the CRF form is for Gokhale clinic, if so then load the diagnosis
				// from the json file else load the diagnosis from the PVDiagnosis table
				if (formNameArray[1].trim().equals("generalPhysicianGokhaleOPDEdit.jsp")) {

					// Retrieving diagnosis list for the last visit ID
					orthoDiagnosisList = patientDAOInf.retrieveOrthoDiagnosisList(patientForm.getVisitID());

					JSONParser parser = new JSONParser();

					JSONArray diagnosisJSON = (JSONArray) parser
							.parse(new FileReader(realPath + File.separator + "ortho_charges.json"));

					for (Object jsonData : diagnosisJSON) {
						JSONObject data = (JSONObject) jsonData;

						// diagnoseList.put((String) data.get("rate"), (String) data.get("diagnosis"));
					}

				}
				diagnoseList = configurationUtil.getDiagnoseList();

				resayuDiagnosisList = configurationUtil.getDiagnoseList();

				resayuDiagnosisList.put("Other", "Other");

				drugList = configurationUtil.getTradeNameList();

				InvestigationList = configurationUtil.getInvestigationList();

				frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

				categoryList = configurationUtil.getCategoryList();

				// Setting Edit opd page name value in pageName variable
				setPageName(formNameArray[1].trim());

				return ERROR;
			}
		} else {
			addActionError("Failed to udpate Referral Letter. Please check log for more detials.");

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Edit Referral Letter Exception Occurred.",
					loginForm.getUserID());

			String check1 = patientDAOInf.verifyReferralLetter(patientForm.getVisitID());
			System.out.println("check1 value in action:" + check1);
			request.setAttribute("referralLetterCheck", check1);

			String check = patientDAOInf.verifyMedicalCertificate(patientForm.getVisitID());
			System.out.println("check value in action:" + check);
			request.setAttribute("medicalCertiCheck", check);

			/*
			 * Verifying whether visit exist for the patient or not, if not then disable
			 * View Last Visit button
			 */
			int patientVisitExistCheck = patientDAOInf.verifyVisitDetails(patientForm.getPatientID(),
					loginForm.getClinicID());

			String disableButtonCheck = "enable";
			if (patientVisitExistCheck == 0) {
				disableButtonCheck = "disable";
			}

			request.setAttribute("disableButtonCheck", disableButtonCheck);

			/*
			 * Retrieving patient age based on patientID
			 */
			String patientAge = patientDAOInf.retrievePatientAgeByPatientID(patientForm.getPatientID());

			request.setAttribute("patientAge", patientAge);

			/*
			 * retrieving patient gender based on patientID
			 */
			String patientGender = patientDAOInf.retrievePatientGenderByPatientID(patientForm.getPatientID());

			request.setAttribute("gender", patientGender);

			request.setAttribute("apptID", patientForm.getAptID());

			hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

			if (formNameArray[1].trim().equals("generalOPDEdit.jsp")
					|| formNameArray[1].trim().equals("physicianOPDEdit.jsp")
					|| formNameArray[1].trim().equals("generalPhysicianOPDEdit.jsp")
					|| formNameArray[1].trim().equals("generalPhysicianGokhaleOPDEdit.jsp")) {
				patientList = patientDAOInf.retrieveDefaultPatientDetails(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID(), patientForm.getAptID(),
						loginForm.getVisitTypeID());
			} else if (formNameArray[1].trim().equals("generalHospitalOPDEdit.jsp")) {
				patientList = patientDAOInf.retrieveGeneralHospitalPatientDetailsForExistiongVisit(
						patientForm.getPatientID(), patientForm.getVisitID(), loginForm.getClinicID());
			} else if (formNameArray[1].trim().equals("genaralClinicOPDEdit.jsp")) {
				patientList = patientDAOInf.retrieveGeneralClinicPatientDetails(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID());

			} else if (formNameArray[1].trim().equals("genaralClinicIPDEdit.jsp")) {
				patientList = patientDAOInf.retrieveGenaralClinicPatientDetailsForIPDVisit(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID());

			} else {
				String visitType = daoInf1.retrieveVisitTypeNameByID(loginForm.getVisitTypeID());
				System.out.println("visitype is ::" + visitType);

				patientList = patientDAOInf.retrieveLastEnteredVisitDetail(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID(), visitType);

			}

			boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

			if (visitCheck) {
				billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
			} else {
				billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
						loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
			}

			// retrieving present complaint list for last visit of patient
			String complaintList1 = patientDAOInf.retrievePresentComplaintsOfLastVisit(patientForm.getVisitID());
			request.setAttribute("complaintList", complaintList1);

			String categoryList1 = patientDAOInf.retrieveCategoryListOfLastVisit(patientForm.getVisitID());
			request.setAttribute("categoryList", categoryList1);

			PVComplaints = patientDAOInf.getPVComplaints();

			MedicalHistory = patientDAOInf.retrievemedicalHistoryListOfLastVisit(patientForm,
					patientForm.getPatientID());
			request.setAttribute("MedicalHistory", MedicalHistory);

			FamilyHistory = patientDAOInf.retrieveFamilyHistoryListOfLastVisit(patientForm, patientForm.getPatientID());
			request.setAttribute("FamilyHistory", FamilyHistory);

			PersonalHistory = patientDAOInf.retrievePersonalHistoryListOfLastVisit(patientForm,
					patientForm.getPatientID());
			request.setAttribute("PersonalHistory", PersonalHistory);

			onEaminationList = patientDAOInf.retrieveOnExaminationListByVisitID(patientForm.getVisitID());
			request.setAttribute("onEaminationList", onEaminationList);

			request.setAttribute("lasteEnteredVisitList", dummy);

			InjectionPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID(), "Injection");
			InjectionList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Injection");

			TabletPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID(), "Tablet");
			TabletList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Tablet");

			LiquidPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID(), "Liquid");
			LiquidList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Liquid");

			/*
			 * retrieving prescription list by visitID
			 */
			prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID());

			InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

			diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());

			/* Retrieve labReport List */
			labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
					loginForm.getClinicID());

			/*
			 * retrieving symptomCheck list by visitID
			 */
			symptomList = patientDAOInf.retrievesymptomCheckList(patientForm.getVisitID());

			complaintList = patientDAOInf.retrievecomplaintList(patientForm.getVisitID());

			historyList = patientDAOInf.retrieveMedicalHistoryList(patientForm.getPatientID());

			medicationList = patientDAOInf.retrieveCurrentMedicationList(patientForm.getPatientID());

			String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
			request.setAttribute("paymentType", paymentType);

			String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

			request.setAttribute("medicalCertiText", medicatCertificate);

			String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

			request.setAttribute("referralLetter", referralLetter);

			/*
			 * retrieve last inserted visit ID for care type OPD by patientID
			 */
			// int lastOPDVisitID =
			// patientDAOInf.retrieveLastOPDVisitID(patientForm.getPatientID());

			// chargeTypeList = configurationUtil.getChargeTypeList();

			doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

			diagnoseList = configurationUtil.getDiagnoseList();

			resayuDiagnosisList = configurationUtil.getDiagnoseList();

			resayuDiagnosisList.put("Other", "Other");

			drugList = configurationUtil.getTradeNameList();

			InvestigationList = configurationUtil.getInvestigationList();

			frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

			categoryList = configurationUtil.getCategoryList();

			// Setting Edit opd page name value in pageName variable
			setPageName(formNameArray[1].trim());

			return ERROR;
		}
	}

	/**
	 * 
	 * @return
	 * @throws Exception
	 */

	public void labReportView() throws Exception {

		String labReportTabEnable = "Enable";

		request.setAttribute("labReportTabEnable", labReportTabEnable);

		patientDAOInf = new PatientDAOImpl();

		String accessKey = xmlUtil.getAccessKey();

		String secreteKey = xmlUtil.getSecreteKey();

		AWSS3Connect awss3Connect = new AWSS3Connect();

		// getting input file location from S3 bucket
		String s3reportFilePath = xmlUtil.getS3RDMLReportFilePath();

		// getting s3 bucket name
		String bucketName = util.getS3BucketName();

		// getting s3 bucket region
		String bucketRegion = xmlUtil.getS3BucketRegion();

		// Set the presigned URL to expire after one hour.
		java.util.Date expiration = new java.util.Date();
		long expTimeMillis = expiration.getTime();
		expTimeMillis += 1000 * 60 * 60;
		expiration.setTime(expTimeMillis);

		AWSCredentials credentials = new BasicAWSCredentials(accessKey, secreteKey);

		AmazonS3 s3 = AmazonS3ClientBuilder.standard().withCredentials(new AWSStaticCredentialsProvider(credentials))
				.withRegion(bucketRegion).build();

		/*
		 * Getting context path
		 */
		ServletContext context = request.getServletContext();

		String realPath = context.getRealPath("/");

		System.out.println("Report file path is ..." + realPath);

		String reportOutFIleName = patientDAOInf.labReportDownload(patientForm.getReportsID());

		System.out.println("out File name from action ::::: " + reportOutFIleName);

		S3ObjectInputStream s3ObjectInputStream = s3
				.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, reportOutFIleName))
				.getObjectContent();

		patientForm.setFileInputStream(s3ObjectInputStream);

		patientForm.setFileName(reportOutFIleName);

		// InputStream in = new FileInputStream(reportOutFIleName);
		OutputStream out11 = response.getOutputStream();
		byte[] buf = new byte[1024];
		int len;
		while ((len = patientForm.getFileInputStream().read(buf)) > 0) {
			out11.write(buf, 0, len);
		}

		patientForm.getFileInputStream().close();

		out11.close();
	}

	/**
	 * 
	 * @return
	 * @throws Exception
	 */
	public String addNewIPDVisit() throws Exception {

		System.out.println("addNewIPDVisit");

		serviceInf = new eDhanvantariServiceImpl();
		patientDAOInf = new PatientDAOImpl();

		LoginDAOInf daoInf = new LoginDAOImpl();

		String accessKey = xmlUtil.getAccessKey();

		String secreteKey = xmlUtil.getSecreteKey();

		AWSS3Connect awss3Connect = new AWSS3Connect();

		// getting input file location from S3 bucket
		String s3reportFilePath = xmlUtil.getS3RDMLReportFilePath();

		// getting s3 bucket name
		String bucketName = util.getS3BucketName();

		// getting s3 bucket region
		String bucketRegion = xmlUtil.getS3BucketRegion();

		String s3LogoFilePath = xmlUtil.getS3RDMLFilePath();

		AWSCredentials credentials = new BasicAWSCredentials(accessKey, secreteKey);

		AmazonS3 s3 = AmazonS3ClientBuilder.standard().withCredentials(new AWSStaticCredentialsProvider(credentials))
				.withRegion(bucketRegion).build();

		request.setAttribute("apptID", patientForm.getAptID());

		/*
		 * Getting user role from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");

		ConvertToPDFUtil convertToPDFUtil = new ConvertToPDFUtil();

		HttpServletRequest request = ServletActionContext.getRequest();

		ServletContext context = request.getServletContext();

		String realPath = context.getRealPath("/");

		/*
		 * Setting clinicID from session into clinicID variable from PatientForm
		 */
		patientForm.setClinicID(loginForm.getClinicID());
		patientForm.setVisitTypeID(loginForm.getVisitTypeID());

		orthoBillItemList = patientDAOInf.retrieveOrthoBillingItemList(patientForm.getVisitID());

		/*
		 * retrieving prescription list by visitID
		 */
		int lastOPDVisitID = patientDAOInf.retrieveLastIPDVisitID(patientForm.getPatientID(), loginForm.getClinicID());

		prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(), lastOPDVisitID,
				loginForm.getClinicID());

		InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(lastOPDVisitID);

		diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());
		InvestigationList = configurationUtil.getInvestigationList();

		message = serviceInf.addNewIPDVisit(patientForm, realPath);
		if (message.equalsIgnoreCase("success")) {

			System.out.println("Real path is :: " + realPath);

			// adding data to maintain visit edit history
			patientForm.setAction("Add");
			patientForm.setVisitType("IPD");
			patientForm.setUserID(loginForm.getUserID());
			patientForm.setClinicID(loginForm.getClinicID());

			patientDAOInf.insertVisitEditHistoryDetails(patientForm);

			request.setAttribute("consentDocFile", "Yes");

			// String pdfOutFIleName = realPath + patientForm.getFirstName() +
			// patientForm.getLastName()
			String pdfOutFIleName = patientForm.getFirstName() + patientForm.getLastName() + patientForm.getPatientID()
					+ "_" + patientForm.getVisitID() + "ipd.pdf";

			if (patientForm.getSelectedPrintField() == null || patientForm.getSelectedPrintField().isEmpty()) {
				message = convertToPDFUtil.convertIPDPDF(patientForm.getPatientID(), patientForm.getVisitID(),
						pdfOutFIleName, realPath, s3, s3LogoFilePath, bucketName, null);
			} else {
				message = convertToPDFUtil.convertIPDPDF(patientForm.getPatientID(), patientForm.getVisitID(),
						pdfOutFIleName, realPath, s3, s3LogoFilePath, bucketName, patientForm.getSelectedPrintField());
			}

			boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

			if (visitCheck) {
				billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
			} else {
				billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
						loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
			}

			if (message.equalsIgnoreCase("success")) {
				addActionMessage("Successfully inserted IPD visit.");

				File inputFile = new File(realPath + "/" + pdfOutFIleName);

				// Storing file to S3 RDML INPUT FILE location
				message = awss3Connect.pushFile(inputFile, pdfOutFIleName, bucketName, bucketRegion, s3reportFilePath);

				S3ObjectInputStream s3ObjectInputStream = s3
						.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, pdfOutFIleName))
						.getObjectContent();

				request.setAttribute("PDFOutFileName", pdfOutFIleName);

				patientForm.setFileInputStream(s3ObjectInputStream);

				patientForm.setFileName(pdfOutFIleName);

				String lastEneteredVisitList = "success";

				request.setAttribute("lastEneteredVisitList", lastEneteredVisitList);

				String dummy = "success";

				request.setAttribute("lasteEnteredVisitList", dummy);

				request.setAttribute("consentText", "success");

				String ipdVisitPage = "display";

				boolean hasConsent = patientDAOInf.verifyhasConsentValue(loginForm.getVisitTypeID());

				if (hasConsent) {

					String consentDocFileName = patientDAOInf.retrieveConsentDocFileName(loginForm.getVisitTypeID());

					request.setAttribute("consentDocFileName", consentDocFileName);
				}

				LabInvastigationList = patientDAOInf.reytrieveLabInvastigationLstByVisitID(patientForm.getVisitID());

				request.setAttribute("LabInvastigationList", LabInvastigationList);

				request.setAttribute("display", ipdVisitPage);

				patientList = patientDAOInf.retireveLastEneteredIPDVisit(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID());

				IPDComplaintsList = patientDAOInf.retrieveIPDComplaintsList(patientForm.getVisitID());

				diagnoseList = configurationUtil.getDiagnoseList();

				String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

				request.setAttribute("medicalCertiText", medicatCertificate);

				String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

				request.setAttribute("referralLetter", referralLetter);

				doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

				// drugList = configurationUtil.getTradeNameList();

				frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

				// categoryList = configurationUtil.getCategoryList();

				if (loginForm.getPracticeID() == 60) {
					drugList = configurationUtil.getPECTradeNameList();
					categoryList = configurationUtil.getPECCategoryList();
				} else {
					drugList = configurationUtil.getTradeNameList();
					categoryList = configurationUtil.getCategoryList();

				}

				// Inserting into Audit table
				daoInf.insertAudit(request.getRemoteAddr(), "Add IPD Visit", loginForm.getUserID());

				/*
				 * Getting form name to be display based on logged in User
				 */
				String[] formNameArray = loginForm.getOPDJSPName().split("&");

				System.out.println("Add IPD JSP Page name for logged in user is ::: " + formNameArray[0].trim());

				// Setting add ipd page name value in pageName variable
				setPageName(formNameArray[0].trim());

				return SUCCESS;
			} else {
				addActionError("Failed to create PDF for IPD visit. Please check logs for more details.");

				String lastEneteredVisitList = "success";

				request.setAttribute("lastEneteredVisitList", lastEneteredVisitList);

				patientList = patientDAOInf.retireveLastEneteredIPDVisit(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID());
				String dummy = "success";

				request.setAttribute("lasteEnteredVisitList", dummy);

				String ipdVisitPage = "display";

				request.setAttribute("display", ipdVisitPage);

				request.setAttribute("consentText", "success");

				boolean hasConsent = patientDAOInf.verifyhasConsentValue(loginForm.getVisitTypeID());

				if (hasConsent) {

					String consentDocFileName = patientDAOInf.retrieveConsentDocFileName(loginForm.getVisitTypeID());

					request.setAttribute("consentDocFileName", consentDocFileName);

				}

				LabInvastigationList = patientDAOInf.reytrieveLabInvastigationLstByVisitID(patientForm.getVisitID());

				request.setAttribute("LabInvastigationList", LabInvastigationList);

				IPDComplaintsList = patientDAOInf.retrieveIPDComplaintsList(patientForm.getVisitID());

				diagnoseList = configurationUtil.getDiagnoseList();

				String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

				request.setAttribute("medicalCertiText", medicatCertificate);

				String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

				request.setAttribute("referralLetter", referralLetter);

				doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

				// drugList = configurationUtil.getTradeNameList();

				frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

				// categoryList = configurationUtil.getCategoryList();

				if (loginForm.getPracticeID() == 60) {
					drugList = configurationUtil.getPECTradeNameList();
					categoryList = configurationUtil.getPECCategoryList();
				} else {
					drugList = configurationUtil.getTradeNameList();
					categoryList = configurationUtil.getCategoryList();

				}

				// Inserting into Audit table
				daoInf.insertAudit(request.getRemoteAddr(), "Add IPD Visit Exception occurred", loginForm.getUserID());

				/*
				 * Getting form name to be display based on logged in User
				 */
				String[] formNameArray = loginForm.getOPDJSPName().split("&");

				System.out.println("Add IPD JSP Page name for logged in user is ::: " + formNameArray[0].trim());

				// Setting add ipd page name value in pageName variable
				setPageName(formNameArray[0].trim());

				return ERROR;
			}

		} else {
			addActionError("Failed to insert IPD visit. Please check logs for more details.");

			request.setAttribute("consentDocFile", "No");

			String lastEneteredVisitList = "success";

			request.setAttribute("lastEneteredVisitList", lastEneteredVisitList);

			patientList = patientDAOInf.retireveLastEneteredIPDVisit(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID());

			String dummy = "success";

			request.setAttribute("lasteEnteredVisitList", dummy);

			String ipdVisitPage = "display";

			request.setAttribute("display", ipdVisitPage);

			request.setAttribute("consentText", "success");

			boolean hasConsent = patientDAOInf.verifyhasConsentValue(loginForm.getVisitTypeID());

			if (hasConsent) {

				String consentDocFileName = patientDAOInf.retrieveConsentDocFileName(loginForm.getVisitTypeID());

				request.setAttribute("consentDocFileName", consentDocFileName);

			}

			boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

			if (visitCheck) {
				billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
			} else {
				billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
						loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
			}

			LabInvastigationList = patientDAOInf.reytrieveLabInvastigationLstByVisitID(patientForm.getVisitID());

			request.setAttribute("LabInvastigationList", LabInvastigationList);

			IPDComplaintsList = patientDAOInf.retrieveIPDComplaintsList(patientForm.getVisitID());

			diagnoseList = configurationUtil.getDiagnoseList();

			String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

			request.setAttribute("medicalCertiText", medicatCertificate);

			String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

			request.setAttribute("referralLetter", referralLetter);

			doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

			// drugList = configurationUtil.getTradeNameList();

			frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

			// categoryList = configurationUtil.getCategoryList();

			if (loginForm.getPracticeID() == 60) {
				drugList = configurationUtil.getPECTradeNameList();
				categoryList = configurationUtil.getPECCategoryList();
			} else {
				drugList = configurationUtil.getTradeNameList();
				categoryList = configurationUtil.getCategoryList();

			}

			// Inserting into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Add IPD Visit Exception occurred", loginForm.getUserID());

			/*
			 * Getting form name to be display based on logged in User
			 */
			String[] formNameArray = loginForm.getOPDJSPName().split("&");

			System.out.println("Add IPD JSP Page name for logged in user is ::: " + formNameArray[0].trim());

			// Setting add ipd page name value in pageName variable
			setPageName(formNameArray[0].trim());

			return ERROR;
		}

	}

	/**
	 * 
	 * @return
	 * @throws Exception
	 */
	public String downloadConsent() throws Exception {
		/*
		 * Getting user role from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");

		LoginDAOInf daoInf = new LoginDAOImpl();

		patientDAOInf = new PatientDAOImpl();

		RegistrationDAOinf registrationDAOinf = new RegistrationDAOImpl();

		String accessKey = xmlUtil.getAccessKey();

		String secreteKey = xmlUtil.getSecreteKey();

		AWSS3Connect awss3Connect = new AWSS3Connect();

		// getting input file location from S3 bucket
		String s3reportFilePath = xmlUtil.getS3RDMLReportFilePath();

		// getting s3 bucket name
		String bucketName = util.getS3BucketName();

		// getting s3 bucket region
		String bucketRegion = xmlUtil.getS3BucketRegion();

		// Set the presigned URL to expire after one hour.
		java.util.Date expiration = new java.util.Date();
		long expTimeMillis = expiration.getTime();
		expTimeMillis += 1000 * 60 * 60;
		expiration.setTime(expTimeMillis);

		AWSCredentials credentials = new BasicAWSCredentials(accessKey, secreteKey);

		AmazonS3 s3 = AmazonS3ClientBuilder.standard().withCredentials(new AWSStaticCredentialsProvider(credentials))
				.withRegion(bucketRegion).build();

		ServletContext context = request.getServletContext();

		String realPath = context.getRealPath("/");

		/*
		 * Getting form name to be display based on logged in User
		 */
		String[] formNameArray = loginForm.getOPDJSPName().split("&");

		System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[0].trim());

		try {

			String reportOutFIleName = patientForm.getFileName();

			System.out.println("out File name from action ::::: " + reportOutFIleName);

			File fileToDownload = new File(realPath + "/" + reportOutFIleName);

			if (fileToDownload.exists()) {

				System.out.println("Inside exist......");

				// Storing file to S3 RDML INPUT FILE location
				message = awss3Connect.pushFile(fileToDownload, reportOutFIleName, bucketName, bucketRegion,
						s3reportFilePath);

				S3ObjectInputStream s3ObjectInputStream = s3
						.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, reportOutFIleName))
						.getObjectContent();

				patientForm.setFileInputStream(s3ObjectInputStream);

				patientForm.setFileName(reportOutFIleName);

				return SUCCESS;
			} else {

				addActionError("File " + reportOutFIleName + " not found at " + realPath + ". Do check it.");

				String lastEneteredVisitList = "success";

				request.setAttribute("lastEneteredVisitList", lastEneteredVisitList);

				String dummy = "success";

				request.setAttribute("lasteEnteredVisitList", dummy);

				request.setAttribute("consentText", "success");

				String ipdVisitPage = "display";

				request.setAttribute("display", ipdVisitPage);

				patientList = patientDAOInf.retireveLastEneteredIPDVisit(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID());

				boolean hasConsent = patientDAOInf.verifyhasConsentValue(loginForm.getVisitTypeID());

				if (hasConsent) {

					String consentDocFileName = patientDAOInf.retrieveConsentDocFileName(loginForm.getVisitTypeID());

					request.setAttribute("consentDocFileName", consentDocFileName);

				}

				LabInvastigationList = patientDAOInf.reytrieveLabInvastigationLstByVisitID(patientForm.getVisitID());

				request.setAttribute("LabInvastigationList", LabInvastigationList);

				IPDComplaintsList = patientDAOInf.retrieveIPDComplaintsList(patientForm.getVisitID());

				diagnoseList = configurationUtil.getDiagnoseList();

				// Inserting values into Audit table
				daoInf.insertAudit(request.getRemoteAddr(), "Download Consent DOcument Report", loginForm.getUserID());

				// Setting add opd page name value in pageName variable
				setPageName(formNameArray[0].trim());

				return ERROR;
			}

		} catch (Exception exception) {

			StringWriter stringWriter = new StringWriter();

			exception.printStackTrace(new PrintWriter(stringWriter));

			String lastEneteredVisitList = "success";

			request.setAttribute("lastEneteredVisitList", lastEneteredVisitList);

			String dummy = "success";

			request.setAttribute("lasteEnteredVisitList", dummy);

			request.setAttribute("consentText", "success");

			String ipdVisitPage = "display";

			request.setAttribute("display", ipdVisitPage);

			patientList = patientDAOInf.retireveLastEneteredIPDVisit(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID());

			LabInvastigationList = patientDAOInf.reytrieveLabInvastigationLstByVisitID(patientForm.getVisitID());

			request.setAttribute("LabInvastigationList", LabInvastigationList);

			IPDComplaintsList = patientDAOInf.retrieveIPDComplaintsList(patientForm.getVisitID());

			boolean hasConsent = patientDAOInf.verifyhasConsentValue(loginForm.getVisitTypeID());

			if (hasConsent) {

				String consentDocFileName = patientDAOInf.retrieveConsentDocFileName(loginForm.getVisitTypeID());

				request.setAttribute("consentDocFileName", consentDocFileName);

			}

			diagnoseList = configurationUtil.getDiagnoseList();

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Download Lab Report", loginForm.getUserID());

			// Setting add opd page name value in pageName variable
			setPageName(formNameArray[0].trim());

			return ERROR;
		}

	}

	/**
	 * 
	 * @throws Exception
	 */
	public void deleteIPDComplaint() throws Exception {

		patientDAOInf = new PatientDAOImpl();

		JSONObject values = new JSONObject();

		JSONArray array = new JSONArray();
		values = new JSONObject();

		JSONObject object = new JSONObject();

		response.setCharacterEncoding("UTF-8");
		try {
			patientForm.setComplaintID(Integer.parseInt(request.getParameter("complaintID")));

			System.out.println("Complaint ID is ::: " + patientForm.getComplaintID());

			values = patientDAOInf.deleteIPDComplaints(patientForm.getComplaintID());

			PrintWriter out = response.getWriter();

			out.print(values);

		} catch (Exception exception) {
			exception.printStackTrace();
			System.out.println("Exception occured while deleting IPD complaint due to:::" + exception.getMessage());

			object.put("ExceptionMessage", "Exception occured while deleting IPD complaint");
			array.add(object);

			values.put("Release", array);

			PrintWriter out = response.getWriter();

			out.print(values);
		}

	}

	/**
	 * 
	 * @throws Exception
	 */
	public void retrieveIPDComplaintValues() throws Exception {
		patientDAOInf = new PatientDAOImpl();

		JSONObject values = new JSONObject();

		JSONArray array = new JSONArray();
		values = new JSONObject();

		JSONObject object = new JSONObject();

		response.setCharacterEncoding("UTF-8");
		try {
			patientForm.setVisitID(Integer.parseInt(request.getParameter("visitID")));

			System.out.println("Visit ID is ::: " + patientForm.getVisitID());

			values = patientDAOInf.retrieveIPDComplaints(patientForm.getVisitID());

			PrintWriter out = response.getWriter();

			out.print(values);

		} catch (Exception exception) {
			exception.printStackTrace();
			System.out.println(
					"Exception occured while retrieving IPD Complaint details due to:::" + exception.getMessage());

			object.put("ExceptionMessage", "Exception occured while retrieving IPD Complaint details.");
			array.add(object);

			values.put("Release", array);

			PrintWriter out = response.getWriter();

			out.print(values);
		}
	}

	/**
	 * 
	 * @throws Exception
	 */
	public void addIPDContinuationSheet() throws Exception {

		patientDAOInf = new PatientDAOImpl();

		JSONObject values = new JSONObject();

		JSONArray array = new JSONArray();
		values = new JSONObject();

		JSONObject object = new JSONObject();

		response.setCharacterEncoding("UTF-8");

		try {
			/*
			 * Retrieving all values from request and setting into form
			 */
			patientForm.setCountinuationSheetDate(request.getParameter("continuationDate"));
			patientForm.setCountinuationSheetDescription(request.getParameter("continuationDesc"));
			patientForm.setCountinuationSheetTeatment(request.getParameter("continuationTreat"));
			patientForm.setVisitID(Integer.parseInt(request.getParameter("visitID")));

			/*
			 * converting character into UTF 8 format
			 */
			byte[] CSDateBytes = patientForm.getCountinuationSheetDate().getBytes(StandardCharsets.ISO_8859_1);
			patientForm.setCountinuationSheetDate(new String(CSDateBytes, StandardCharsets.UTF_8));

			byte[] CSDescBytes = patientForm.getCountinuationSheetDescription().getBytes(StandardCharsets.ISO_8859_1);
			patientForm.setCountinuationSheetDescription(new String(CSDescBytes, StandardCharsets.UTF_8));

			byte[] CSTreatBytes = patientForm.getCountinuationSheetTeatment().getBytes(StandardCharsets.ISO_8859_1);
			patientForm.setCountinuationSheetTeatment(new String(CSTreatBytes, StandardCharsets.UTF_8));

			System.out.println(patientForm.getCountinuationSheetDate());
			System.out.println(patientForm.getCountinuationSheetDescription());
			System.out.println(patientForm.getCountinuationSheetTeatment());

			values = patientDAOInf.insertIPDContinuationSheet(patientForm);

			System.out.println("Visit id is ::" + patientForm.getVisitID());
			values = patientDAOInf.retrieveIPDContinuationSheet(patientForm.getVisitID());

			PrintWriter out = response.getWriter();

			out.print(values);
		} catch (Exception exception) {
			exception.printStackTrace();
			System.out.println("Exception occured while inserting IPD complaint details into table due to:::"
					+ exception.getMessage());

			object.put("ExceptionMessage", "Failed to retireve IPD complaint details. Please add visit first.");
			array.add(object);

			values.put("Release", array);

			PrintWriter out = response.getWriter();

			out.print(values);
		}

	}

	/**
	 * 
	 * @throws Exception
	 */
	public void deleteIPDCOntinuationSHeet() throws Exception {

		patientDAOInf = new PatientDAOImpl();

		JSONObject values = new JSONObject();

		JSONArray array = new JSONArray();
		values = new JSONObject();

		JSONObject object = new JSONObject();

		response.setCharacterEncoding("UTF-8");
		try {
			patientForm.setContinuationSheetID(Integer.parseInt(request.getParameter("continuationID")));

			System.out.println("Continuation ID is ::: " + patientForm.getContinuationSheetID());

			values = patientDAOInf.deleteIPDContinuationSheet(patientForm.getContinuationSheetID());

			PrintWriter out = response.getWriter();

			out.print(values);

		} catch (Exception exception) {
			exception.printStackTrace();
			System.out.println(
					"Exception occured while deleting IPD Continuation Sheet due to:::" + exception.getMessage());

			object.put("ExceptionMessage", "Exception occured while deleting IPD Continuation Sheet");
			array.add(object);

			values.put("Release", array);

			PrintWriter out = response.getWriter();

			out.print(values);
		}

	}

	/**
	 * 
	 * @throws Exception
	 */
	public void retrieveIPDContinuationSheetValues() throws Exception {
		patientDAOInf = new PatientDAOImpl();

		JSONObject values = new JSONObject();

		JSONArray array = new JSONArray();
		values = new JSONObject();

		JSONObject object = new JSONObject();

		response.setCharacterEncoding("UTF-8");
		try {
			patientForm.setVisitID(Integer.parseInt(request.getParameter("visitID")));

			System.out.println("Visit ID is ::: " + patientForm.getVisitID());

			values = patientDAOInf.retrieveIPDContinuationSheet(patientForm.getVisitID());

			PrintWriter out = response.getWriter();

			out.print(values);

		} catch (Exception exception) {
			exception.printStackTrace();
			System.out.println("Exception occured while retrieving IPD Continuation Sheet details due to:::"
					+ exception.getMessage());

			object.put("ExceptionMessage", "Exception occured while retrieving IPD Continuation Sheet details.");
			array.add(object);

			values.put("Release", array);

			PrintWriter out = response.getWriter();

			out.print(values);
		}
	}

	/**
	 * 
	 * @return
	 * @throws Exception
	 */
	public String printConsent() throws Exception {
		patientDAOInf = new PatientDAOImpl();

		ConvertToPDFUtil convertToPDFUtil = new ConvertToPDFUtil();

		String accessKey = xmlUtil.getAccessKey();

		String secreteKey = xmlUtil.getSecreteKey();

		AWSS3Connect awss3Connect = new AWSS3Connect();

		// getting input file location from S3 bucket
		String s3reportFilePath = xmlUtil.getS3RDMLReportFilePath();

		// getting s3 bucket name
		String bucketName = util.getS3BucketName();

		// getting s3 bucket region
		String bucketRegion = xmlUtil.getS3BucketRegion();

		String s3LogoFilePath = xmlUtil.getS3RDMLFilePath();

		AWSCredentials credentials = new BasicAWSCredentials(accessKey, secreteKey);

		AmazonS3 s3 = AmazonS3ClientBuilder.standard().withCredentials(new AWSStaticCredentialsProvider(credentials))
				.withRegion(bucketRegion).build();

		/*
		 * Getting user role from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");

		/*
		 * Retrieving last entered visit's visitNumber and adding one to it in order to
		 * insert new visitNumber into Patient table
		 */
		int visitNumber = patientDAOInf.retrieveVisitNumber(patientForm.getPatientID(), loginForm.getClinicID());

		// visitNumber += 1;

		/*
		 * Inserting dummy visit details
		 */
		patientDAOInf.insertDummyVisit(patientForm, visitNumber);

		/*
		 * retrieving last entered visit ID based on new visitNumber and setting it into
		 * patientForm's visitID variable
		 */
		patientForm.setVisitID(patientDAOInf.retrieveLastEnteredVisitIDByVisitNumber(visitNumber,
				patientForm.getPatientID(), loginForm.getVisitTypeID(), loginForm.getClinicID()));

		System.out.println("VisitID is ::: " + patientForm.getVisitID());

		message = patientDAOInf.insertConsent(patientForm);

		if (message.equalsIgnoreCase("success")) {
			HttpServletRequest request = ServletActionContext.getRequest();

			ServletContext context = request.getServletContext();

			String realPath = context.getRealPath("/");
			System.out.println("Real path is :: " + realPath);

			// String pdfOutFIleName = realPath + patientForm.getPatientID() + "_" +
			// patientForm.getVisitID()
			String pdfOutFIleName = patientForm.getPatientID() + "_" + patientForm.getVisitID() + "IPDConsent.pdf";

			message = convertToPDFUtil.convertConsentPDF(patientForm.getPatientID(), patientForm.getConsentText(),
					patientForm.getConsentText1(), patientForm.getConsentText2(), pdfOutFIleName, realPath,
					patientForm.getConsentDiagnosis(), s3, s3LogoFilePath, bucketName);

			if (message.equalsIgnoreCase("success")) {

				File inputFile = new File(realPath + "/" + pdfOutFIleName);

				// Storing file to S3 RDML INPUT FILE location
				message = awss3Connect.pushFile(inputFile, pdfOutFIleName, bucketName, bucketRegion, s3reportFilePath);

				S3ObjectInputStream s3ObjectInputStream = s3
						.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, pdfOutFIleName))
						.getObjectContent();

				patientForm.setFileInputStream(s3ObjectInputStream);

				patientForm.setFileName(pdfOutFIleName);

				String lastEneteredVisitList = "success";

				request.setAttribute("lastEneteredVisitList", lastEneteredVisitList);

				String dummy = "success";

				request.setAttribute("lasteEnteredVisitList", dummy);

				String ipdVisitPage = "display";

				request.setAttribute("display", ipdVisitPage);

				String investigationOECheck = "empty";

				request.setAttribute("investigationOECheck", investigationOECheck);

				patientList = new ArrayList<PatientForm>();

				patientList.add(patientForm);

				IPDComplaintsList = patientDAOInf.retrieveIPDComplaintsList(patientForm.getVisitID());

				diagnoseList = configurationUtil.getDiagnoseList();

				/*
				 * Getting form name to be display based on logged in User
				 */
				String[] formNameArray = loginForm.getIPDJSPName().split("&");

				System.out.println("Add IPD JSP Page name for logged in user is ::: " + formNameArray[0].trim());

				// Setting add ipd page name value in pageName variable
				setPageName(formNameArray[0].trim());

				return SUCCESS;
			} else {
				addActionError("Failed to add consent document. Please check logs for more details.");

				String lastEneteredVisitList = "success";

				request.setAttribute("lastEneteredVisitList", lastEneteredVisitList);

				patientList = new ArrayList<PatientForm>();

				String dummy = "success";

				request.setAttribute("lasteEnteredVisitList", dummy);

				patientList.add(patientForm);

				IPDComplaintsList = patientDAOInf.retrieveIPDComplaintsList(patientForm.getVisitID());

				diagnoseList = configurationUtil.getDiagnoseList();

				/*
				 * Getting form name to be display based on logged in User
				 */
				String[] formNameArray = loginForm.getIPDJSPName().split("&");

				System.out.println("Add IPD JSP Page name for logged in user is ::: " + formNameArray[0].trim());

				// Setting add ipd page name value in pageName variable
				setPageName(formNameArray[0].trim());

				return ERROR;
			}
		} else {
			addActionError("Failed to add consent document. Please check logs for more details.");

			String lastEneteredVisitList = "success";

			request.setAttribute("lastEneteredVisitList", lastEneteredVisitList);

			patientList = new ArrayList<PatientForm>();

			String dummy = "success";

			request.setAttribute("lasteEnteredVisitList", dummy);

			patientList.add(patientForm);

			IPDComplaintsList = patientDAOInf.retrieveIPDComplaintsList(patientForm.getVisitID());

			diagnoseList = configurationUtil.getDiagnoseList();

			/*
			 * Getting form name to be display based on logged in User
			 */
			String[] formNameArray = loginForm.getIPDJSPName().split("&");

			System.out.println("Add IPD JSP Page name for logged in user is ::: " + formNameArray[0].trim());

			// Setting add ipd page name value in pageName variable
			setPageName(formNameArray[0].trim());

			return ERROR;
		}

	}

	/**
	 * 
	 * @return
	 * @throws Exception
	 */
	public String updateIPDVisit() throws Exception {

		serviceInf = new eDhanvantariServiceImpl();
		patientDAOInf = new PatientDAOImpl();

		LoginDAOInf daoInf = new LoginDAOImpl();

		String accessKey = xmlUtil.getAccessKey();

		/*
		 * Getting user role from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");

		String secreteKey = xmlUtil.getSecreteKey();

		AWSS3Connect awss3Connect = new AWSS3Connect();

		// getting input file location from S3 bucket
		String s3reportFilePath = xmlUtil.getS3RDMLReportFilePath();

		// getting s3 bucket name
		String bucketName = util.getS3BucketName();

		// getting s3 bucket region
		String bucketRegion = xmlUtil.getS3BucketRegion();

		String s3LogoFilePath = xmlUtil.getS3RDMLFilePath();

		AWSCredentials credentials = new BasicAWSCredentials(accessKey, secreteKey);

		AmazonS3 s3 = AmazonS3ClientBuilder.standard().withCredentials(new AWSStaticCredentialsProvider(credentials))
				.withRegion(bucketRegion).build();

		orthoBillItemList = patientDAOInf.retrieveOrthoBillingItemList(patientForm.getVisitID());

		categoryList = configurationUtil.getCategoryList();

		prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(), patientForm.getVisitID(),
				loginForm.getClinicID());

		ConvertToPDFUtil convertToPDFUtil = new ConvertToPDFUtil();

		message = serviceInf.updateIPDVisit(patientForm);
		if (message.equalsIgnoreCase("success")) {

			// adding data to maintain visit edit history
			patientForm.setAction("Edit");
			patientForm.setVisitType("IPD");
			patientForm.setUserID(loginForm.getUserID());
			patientForm.setClinicID(loginForm.getClinicID());

			patientDAOInf.insertVisitEditHistoryDetails(patientForm);

			HttpServletRequest request = ServletActionContext.getRequest();

			ServletContext context = request.getServletContext();

			String realPath = context.getRealPath("/");
			System.out.println("Real path is :: " + realPath);

			request.setAttribute("consentDocFile", "Yes");

			// String pdfOutFIleName = realPath + patientForm.getFirstName() +
			// patientForm.getLastName()
			String pdfOutFIleName = patientForm.getFirstName() + patientForm.getLastName() + patientForm.getPatientID()
					+ "_" + patientForm.getVisitID() + "ipd.pdf";

			if (patientForm.getSelectedPrintField() == null || patientForm.getSelectedPrintField().isEmpty()) {
				message = convertToPDFUtil.convertIPDPDF(patientForm.getPatientID(), patientForm.getVisitID(),
						pdfOutFIleName, realPath, s3, s3LogoFilePath, bucketName, null);
			} else {
				message = convertToPDFUtil.convertIPDPDF(patientForm.getPatientID(), patientForm.getVisitID(),
						pdfOutFIleName, realPath, s3, s3LogoFilePath, bucketName, patientForm.getSelectedPrintField());
			}

			if (message.equalsIgnoreCase("success")) {
				addActionMessage("Successfully updated IPD visit.");

				File inputFile = new File(realPath + "/" + pdfOutFIleName);

				// Storing file to S3 RDML INPUT FILE location
				message = awss3Connect.pushFile(inputFile, pdfOutFIleName, bucketName, bucketRegion, s3reportFilePath);

				S3ObjectInputStream s3ObjectInputStream = s3
						.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, pdfOutFIleName))
						.getObjectContent();

				request.setAttribute("PDFOutFileName", pdfOutFIleName);

				patientForm.setFileInputStream(s3ObjectInputStream);

				patientForm.setFileName(pdfOutFIleName);

				String lastEneteredVisitList = "success";

				request.setAttribute("lastEneteredVisitList", lastEneteredVisitList);

				String dummy = "success";

				request.setAttribute("lasteEnteredVisitList", dummy);

				String ipdVisitPage = "display";

				request.setAttribute("display", ipdVisitPage);

				String updateCheck = "update";

				request.setAttribute("updateCheck", updateCheck);

				request.setAttribute("consentText", "success");

				patientList = patientDAOInf.retireveLastEneteredIPDVisit(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID());

				boolean hasConsent = patientDAOInf.verifyhasConsentValue(loginForm.getVisitTypeID());

				if (hasConsent) {

					String consentDocFileName = patientDAOInf.retrieveConsentDocFileName(loginForm.getVisitTypeID());

					request.setAttribute("consentDocFileName", consentDocFileName);
				}

				LabInvastigationList = patientDAOInf.reytrieveLabInvastigationLstByVisitID(patientForm.getVisitID());

				request.setAttribute("LabInvastigationList", LabInvastigationList);

				IPDComplaintsList = patientDAOInf.retrieveIPDComplaintsList(patientForm.getVisitID());

				diagnoseList = configurationUtil.getDiagnoseList();

				// Inserting into Audit table
				daoInf.insertAudit(request.getRemoteAddr(), "Edit IPD Visit", loginForm.getUserID());

				/*
				 * Getting form name to be display based on logged in User
				 */
				String[] formNameArray = loginForm.getOPDJSPName().split("&");

				System.out.println("Edit IPD JSP Page name for logged in user is ::: " + formNameArray[1].trim());

				// Setting add ipd page name value in pageName variable
				setPageName(formNameArray[1].trim());

				return SUCCESS;
			} else {
				addActionError("Failed to create PDF for IPD visit. Please check logs for more details.");

				String lastEneteredVisitList = "success";

				request.setAttribute("lastEneteredVisitList", lastEneteredVisitList);

				patientList = patientDAOInf.retireveLastEneteredIPDVisit(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID());

				boolean hasConsent = patientDAOInf.verifyhasConsentValue(loginForm.getVisitTypeID());

				if (hasConsent) {

					String consentDocFileName = patientDAOInf.retrieveConsentDocFileName(loginForm.getVisitTypeID());

					request.setAttribute("consentDocFileName", consentDocFileName);
				}

				String dummy = "success";

				request.setAttribute("lasteEnteredVisitList", dummy);

				String ipdVisitPage = "display";

				request.setAttribute("display", ipdVisitPage);

				String updateCheck = "update";

				request.setAttribute("updateCheck", updateCheck);

				request.setAttribute("consentText", "success");

				LabInvastigationList = patientDAOInf.reytrieveLabInvastigationLstByVisitID(patientForm.getVisitID());

				request.setAttribute("LabInvastigationList", LabInvastigationList);

				IPDComplaintsList = patientDAOInf.retrieveIPDComplaintsList(patientForm.getVisitID());

				diagnoseList = configurationUtil.getDiagnoseList();

				// Inserting into Audit table
				daoInf.insertAudit(request.getRemoteAddr(), "Edit IPD Visit Exception occurred", loginForm.getUserID());

				/*
				 * Getting form name to be display based on logged in User
				 */
				String[] formNameArray = loginForm.getOPDJSPName().split("&");

				System.out.println("Edit IPD JSP Page name for logged in user is ::: " + formNameArray[1].trim());

				// Setting add ipd page name value in pageName variable
				setPageName(formNameArray[1].trim());

				return ERROR;
			}

		} else {
			addActionError("Failed to update IPD visit. Please check logs for more details.");

			String lastEneteredVisitList = "success";

			request.setAttribute("lastEneteredVisitList", lastEneteredVisitList);

			request.setAttribute("consentDocFile", "Yes");

			patientList = patientDAOInf.retireveLastEneteredIPDVisit(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID());

			boolean hasConsent = patientDAOInf.verifyhasConsentValue(loginForm.getVisitTypeID());

			if (hasConsent) {

				String consentDocFileName = patientDAOInf.retrieveConsentDocFileName(loginForm.getVisitTypeID());

				request.setAttribute("consentDocFileName", consentDocFileName);
			}

			String dummy = "success";

			request.setAttribute("lasteEnteredVisitList", dummy);

			String ipdVisitPage = "display";

			request.setAttribute("display", ipdVisitPage);

			request.setAttribute("consentText", "success");

			LabInvastigationList = patientDAOInf.reytrieveLabInvastigationLstByVisitID(patientForm.getVisitID());

			request.setAttribute("LabInvastigationList", LabInvastigationList);

			IPDComplaintsList = patientDAOInf.retrieveIPDComplaintsList(patientForm.getVisitID());

			diagnoseList = configurationUtil.getDiagnoseList();

			// Inserting into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Edit IPD Visit Exception occurred", loginForm.getUserID());

			/*
			 * Getting form name to be display based on logged in User
			 */
			String[] formNameArray = loginForm.getOPDJSPName().split("&");

			System.out.println("Edit IPD JSP Page name for logged in user is ::: " + formNameArray[1].trim());

			// Setting add ipd page name value in pageName variable
			setPageName(formNameArray[1].trim());

			return ERROR;
		}

	}

	/**
	 * 
	 * @return
	 * @throws Exception
	 */
	public String updateConsent() throws Exception {
		patientDAOInf = new PatientDAOImpl();

		String accessKey = xmlUtil.getAccessKey();

		String secreteKey = xmlUtil.getSecreteKey();

		AWSS3Connect awss3Connect = new AWSS3Connect();

		// getting input file location from S3 bucket
		String s3reportFilePath = xmlUtil.getS3RDMLReportFilePath();

		// getting s3 bucket name
		String bucketName = util.getS3BucketName();

		// getting s3 bucket region
		String bucketRegion = xmlUtil.getS3BucketRegion();

		String s3LogoFilePath = xmlUtil.getS3RDMLFilePath();

		AWSCredentials credentials = new BasicAWSCredentials(accessKey, secreteKey);

		AmazonS3 s3 = AmazonS3ClientBuilder.standard().withCredentials(new AWSStaticCredentialsProvider(credentials))
				.withRegion(bucketRegion).build();

		/*
		 * Getting user role from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");

		ConvertToPDFUtil convertToPDFUtil = new ConvertToPDFUtil();

		message = patientDAOInf.updateConsent(patientForm);
		if (message.equalsIgnoreCase("success")) {
			HttpServletRequest request = ServletActionContext.getRequest();

			ServletContext context = request.getServletContext();

			String realPath = context.getRealPath("/");
			System.out.println("Real path is :: " + realPath);

			// String pdfOutFIleName = realPath + patientForm.getPatientID() + "_" +
			// patientForm.getVisitID()
			String pdfOutFIleName = patientForm.getPatientID() + "_" + patientForm.getVisitID() + "IPDConsent.pdf";

			message = convertToPDFUtil.convertConsentPDF(patientForm.getPatientID(), patientForm.getConsentText(),
					patientForm.getConsentText1(), patientForm.getConsentText2(), pdfOutFIleName, realPath,
					patientForm.getConsentDiagnosis(), s3, s3LogoFilePath, bucketName);

			if (message.equalsIgnoreCase("success")) {

				File inputFile = new File(realPath + "/" + pdfOutFIleName);

				// Storing file to S3 RDML INPUT FILE location
				message = awss3Connect.pushFile(inputFile, pdfOutFIleName, bucketName, bucketRegion, s3reportFilePath);

				S3ObjectInputStream s3ObjectInputStream = s3
						.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, pdfOutFIleName))
						.getObjectContent();

				patientForm.setFileInputStream(s3ObjectInputStream);

				patientForm.setFileName(pdfOutFIleName);

				String lastEneteredVisitList = "success";

				request.setAttribute("lastEneteredVisitList", lastEneteredVisitList);

				String dummy = "success";

				request.setAttribute("lasteEnteredVisitList", dummy);

				request.setAttribute("consentText", dummy);

				String ipdVisitPage = "display";

				request.setAttribute("display", ipdVisitPage);

				/*
				 * Retrieving consent text
				 */
				// String consentText =
				// patientDAOInf.retrieveConsent(patientForm
				// .getVisitID());

				/*
				 * Splitting consent text into three different text
				 */
				// String[] array = consentText.split("$");

				/*
				 * Setting array[0] to consentText
				 */
				// String consentText1 = array[0];

				/*
				 * Splitting array[1] in order to get rest two consents
				 */
				// String[] array2 = array[1].split("%");

				// String consentText2 = array2[0];

				// String consentText3 = array2[1];

				// request.setAttribute("consentText1", consentText1);
				// request.setAttribute("consentText2", consentText2);
				// request.setAttribute("consentText3", consentText3);

				patientList = new ArrayList<PatientForm>();

				patientList.add(patientForm);

				IPDComplaintsList = patientDAOInf.retrieveIPDComplaintsList(patientForm.getVisitID());

				diagnoseList = configurationUtil.getDiagnoseList();

				/*
				 * Getting form name to be display based on logged in User
				 */
				String[] formNameArray = loginForm.getIPDJSPName().split("&");

				System.out.println("Edit IPD JSP Page name for logged in user is ::: " + formNameArray[1].trim());

				// Setting add ipd page name value in pageName variable
				setPageName(formNameArray[1].trim());

				return SUCCESS;
			} else {
				addActionError("Failed to create PDF for Consent . Please check logs for more details.");

				String lastEneteredVisitList = "success";

				request.setAttribute("lastEneteredVisitList", lastEneteredVisitList);

				patientList = new ArrayList<PatientForm>();

				String dummy = "success";

				request.setAttribute("lasteEnteredVisitList", dummy);

				String updateCheck = "update";

				request.setAttribute("updateCheck", updateCheck);

				patientList.add(patientForm);

				IPDComplaintsList = patientDAOInf.retrieveIPDComplaintsList(patientForm.getVisitID());

				String ipdVisitPage = "display";

				request.setAttribute("display", ipdVisitPage);

				diagnoseList = configurationUtil.getDiagnoseList();

				/*
				 * Getting form name to be display based on logged in User
				 */
				String[] formNameArray = loginForm.getIPDJSPName().split("&");

				System.out.println("Edit IPD JSP Page name for logged in user is ::: " + formNameArray[1].trim());

				// Setting add ipd page name value in pageName variable
				setPageName(formNameArray[1].trim());

				return ERROR;
			}
		} else {
			addActionError("Failed to udpate consent visit. Please check logs for more details.");

			String lastEneteredVisitList = "success";

			request.setAttribute("lastEneteredVisitList", lastEneteredVisitList);

			patientList = new ArrayList<PatientForm>();

			String dummy = "success";

			request.setAttribute("lasteEnteredVisitList", dummy);

			patientList.add(patientForm);

			IPDComplaintsList = patientDAOInf.retrieveIPDComplaintsList(patientForm.getVisitID());

			diagnoseList = configurationUtil.getDiagnoseList();

			/*
			 * Getting form name to be display based on logged in User
			 */
			String[] formNameArray = loginForm.getIPDJSPName().split("&");

			System.out.println("Edit IPD JSP Page name for logged in user is ::: " + formNameArray[1].trim());

			// Setting add ipd page name value in pageName variable
			setPageName(formNameArray[1].trim());

			return ERROR;
		}

	}

	/**
	 * 
	 * @return
	 * @throws Exception
	 */
	public String searchPatient() throws Exception {
		patientDAOInf = new PatientDAOImpl();
		String fromDate = "";
		String toDate = "";

		/*
		 * Getting clinicID from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");

		/*
		 * Storing patientName from PatientForm into one variable in order to display it
		 * in error message
		 */
		String patientName = patientForm.getPatientName();

		/*
		 * if (patientForm.getSearchCriteria().equals("VisitDate")) { if
		 * (!patientForm.getFromDate().equals("") &&
		 * !patientForm.getToDate().equals("")) { fromDate = patientForm.getFromDate();
		 * toDate = patientForm.getToDate(); } else { fromDate =
		 * patientForm.getFromDate(); toDate = ""; } } else { fromDate = ""; toDate =
		 * ""; }
		 */
		String searchCriteria = patientForm.getSearchCriteria();
		// System.out.println("searchCriteria,,,," + searchCriteria);
		request.setAttribute("searchCriteria", searchCriteria);

		patientList = patientDAOInf.searchPatientByPatientName(patientForm.getPatientName(), loginForm.getPracticeID(),
				loginForm.getClinicID(), patientForm.getSearchCriteria(), fromDate, toDate);

		/*
		 * Checking whether patientList contains record or not, if yes return SUCCESS
		 * else return message saying No Patient Found
		 */
		// System.out.println("patientList size::::" + patientList.size());
		if (patientList.size() != 0) {

			/*
			 * Setting string in order to display the patient table on dashboard
			 */
			String patientCheck = "Patient";

			request.setAttribute("patientCheck", patientCheck);

			return SUCCESS;

		} else {
			addActionError("No Patient found with the " + patientForm.getSearchCriteria() + " : '" + patientName + "'");
			// System.out.println("Patient not found...");

			return ERROR;
		}

	}

	/**
	 * 
	 * @return
	 * @throws Exception
	 */
	public String renderViewMedicalPatientList() throws Exception {

		patientDAOInf = new PatientDAOImpl();

		/*
		 * Getting clinicID from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");

		patientList = patientDAOInf.retrievePatientList(loginForm.getPracticeID(), loginForm.getClinicID());

		/*
		 * Checking whether patientList contains record or not, if yes return SUCCESS
		 * else return message saying No Patient Found
		 */
		if (patientList.size() > 0) {

			/*
			 * Setting string in order to display the patient table on dashboard
			 */
			String patientCheck = "Patient";

			request.setAttribute("patientCheck", patientCheck);

			return SUCCESS;

		} else {

			addActionError("No Patient found. Please add new patient.");

			return ERROR;

		}

	}

	/**
	 * 
	 * @return
	 * @throws Exception
	 */
	public String renderAddApointment() throws Exception {
		patientDAOInf = new PatientDAOImpl();

		/*
		 * Getting clinicID from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");

		/*
		 * Setting patientName into PatientForm's patientName variable
		 */
		patientForm.setPatientName(patientDAOInf.retrievePatientFullName(patientForm.getPatientID()));

		/*
		 * Retrieving appointmentDuration from Calendar table on the basis of clinicID
		 */
		String apptDuration = patientDAOInf.retrieveApptDurationFromClinicID(loginForm.getClinicID());

		System.out.println("Appointment duration is ::: " + apptDuration);

		patientList = new ArrayList<PatientForm>();

		patientList.add(patientForm);

		refDocList = configurationUtil.getRefDocList(loginForm.getPracticeID());

		/*
		 * Setting apptDuration value into request in order to fetch it while adding new
		 * appointment
		 */
		request.setAttribute("apptDuration", apptDuration);

		return SUCCESS;
	}

	/**
	 * 
	 * @return
	 * @throws Exception
	 */
	public String addNewAppointment() throws Exception {
		serviceInf = new eDhanvantariServiceImpl();
		patientDAOInf = new PatientDAOImpl();

		LoginDAOInf daoInf = new LoginDAOImpl();
		ClinicForm clinicForm = new ClinicForm();

		/*
		 * Getting user role from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");

		int patientID = patientForm.getPatientID();

		patientForm.setPracticeID(loginForm.getPracticeID());
		patientForm.setClinicID(loginForm.getClinicID());
		patientForm.setClinicSuffix(loginForm.getClinicSuffix());
		patientForm.setFacilityDashboard(loginForm.getFacilityDashboard());

		message = serviceInf.addNewAppointment(patientForm);
		if (message.equalsIgnoreCase("success")) {
			addActionMessage("Successfully added Appointment.");

			patientList = new ArrayList<PatientForm>();

			patientList.add(patientForm);

			/*
			 * Retrieving appointment details
			 */
			appointmentList = patientDAOInf.retrieveAppointmentList(loginForm.getClinicID(),
					patientForm.getCliniciaID());

			appointmentWeekList = patientDAOInf.retrieveAppointmentWeekList(loginForm.getClinicID(),
					patientForm.getCliniciaID());

			appointmentMonthList = patientDAOInf.retrieveAppointmentMonthList(loginForm.getClinicID(),
					patientForm.getCliniciaID());

			System.out.println("Appointment list size :: " + appointmentList.size());

			refDocList = configurationUtil.getRefDocList(loginForm.getPracticeID());

			/*
			 * Setting string in order to display the appointment table on dashboard
			 */
			String patientCheck = "Appointment";

			request.setAttribute("patientCheck", patientCheck);

			// Check if third party api flag is set for the practice, if so then proceed
			// further
			if (loginForm.getThirdPartyAPIIntegration() == 1) {

				/*
				 * Checking if patientID is 0, if so, then adding new patient into CRM
				 */
				if (patientID == 0) {
					String apiUrl = "https://pec.360oneview.com/create_contact.php";
					String apiResponse = "";

					ClinicDAOInf clinicDAOInf = new ClinicDAOImpl();

					String appointmentType = clinicDAOInf.retrieveVisitTypeNameByID(patientForm.getVisitTypeID());

					// Check if the patient exists into the CRM with the same mobile no
					String crmContactNo = "";

					try (CloseableHttpClient httpClient = HttpClients.createDefault()) {
						// URL of the API endpoint

						HttpPost httpPost = new HttpPost("https://pec.360oneview.com/fetch_contact.php");
						HttpPost postRequest = httpPost;

						// Form data to send
						String formData = "mobile=" + patientForm.getMobile();

						// Set the entity with the form data

						StringEntity entity = new StringEntity(formData, ContentType.APPLICATION_FORM_URLENCODED);
						postRequest.setEntity(entity);

						// Execute the request
						try (CloseableHttpResponse response = httpClient.execute(postRequest)) {
							// Get the response code
							if (response.getStatusLine().getStatusCode() == 200) {
								apiResponse = EntityUtils.toString(response.getEntity());

								org.json.JSONArray diagnosisJSONArray = new org.json.JSONArray("[" + apiResponse + "]");

								for (int i = 0; i < diagnosisJSONArray.length(); i++) {
									org.json.JSONObject diagnosisJSONObject = diagnosisJSONArray.getJSONObject(i);

									crmContactNo = diagnosisJSONObject.getString("contactid");

								}
							} else {
								apiResponse = "Error: " + response.getStatusLine().getStatusCode();
							}
						}

					} catch (Exception e) {
						apiResponse = "Exception: " + e.getMessage();
					}

					System.out.println(
							"CRM Fetch contact API response:::" + apiResponse + " & CRM contactid:::" + crmContactNo);

					if (!(crmContactNo.isEmpty() && crmContactNo.equals("null"))) {

						try {

							OkHttpClient client = new OkHttpClient().newBuilder().build();
							MediaType mediaType = MediaType.parse("text/plain");
							RequestBody body = new MultipartBody.Builder().setType(MultipartBody.FORM)
									.addFormDataPart("email", patientForm.getEmailID())
									.addFormDataPart("firstname", patientForm.getFirstName())
									.addFormDataPart("lastname", patientForm.getLastName())
									.addFormDataPart("mobile", patientForm.getMobile())
									.addFormDataPart("birthday", patientForm.getDateOfBirth())
									.addFormDataPart("Appointment_Type", appointmentType)
									.addFormDataPart("Gender", patientForm.getGender())
									.addFormDataPart("Referred_By", patientForm.getRefDoctor())
									.addFormDataPart("Referral_Doctor", "").addFormDataPart("Aggregator_Name", "")
									.addFormDataPart("Registration_Number", "").addFormDataPart("Role", "")
									.addFormDataPart("mailingstreet", "").addFormDataPart("mailingcity", "")
									.addFormDataPart("mailingstate", "").addFormDataPart("mailingzip", "")
									.addFormDataPart("mailingcountry", "").build();
							Request requestAPI = new Request.Builder()
									.url("https://pec.360oneview.com/create_contact.php").method("POST", body).build();
							Response response = client.newCall(requestAPI).execute();

							String jsonResponseData = response.body().string();

							System.out.println(jsonResponseData);

							System.out.println(response.body().toString());

						} catch (Exception e) {
							System.out.println("Exception occurred whie executing CRM API:::" + e.getMessage());
						}
					}
				}

			}

			// Inserting into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Add Appointment", loginForm.getUserID());

			return SUCCESS;

		} else if (message.equalsIgnoreCase("empty")) {
			addActionError("Null or empty data found. Please add valid data.");

			patientList = new ArrayList<PatientForm>();

			patientList.add(patientForm);

			refDocList = configurationUtil.getRefDocList(loginForm.getPracticeID());

			// Inserting into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Add Appointment Exception occurred", loginForm.getUserID());

			return ERROR;
		} else {
			addActionError("Failed to add new appointment. Please check logs for more details.");

			patientList = new ArrayList<PatientForm>();

			patientList.add(patientForm);

			refDocList = configurationUtil.getRefDocList(loginForm.getPracticeID());

			// Inserting into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Add Appointment Exception occurred", loginForm.getUserID());

			return ERROR;
		}

	}

	/**
	 * 
	 * @return
	 * @throws Exception
	 */
	public String viewAppointment() throws Exception {
		patientDAOInf = new PatientDAOImpl();

		/*
		 * Getting user role from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");

		/*
		 * Retrieving appointment details
		 */
		appointmentList = patientDAOInf.retrieveAppointmentList(loginForm.getClinicID(), patientForm.getCliniciaID());

		appointmentWeekList = patientDAOInf.retrieveAppointmentWeekList(loginForm.getClinicID(),
				patientForm.getCliniciaID());

		appointmentMonthList = patientDAOInf.retrieveAppointmentMonthList(loginForm.getClinicID(),
				patientForm.getCliniciaID());

		System.out.println("Appointment list size :: " + appointmentList.size());

		/*
		 * System.out.println("Appointment list :: " + appointmentList);
		 */

		/*
		 * Setting string in order to display the appointment table on dashboard
		 */
		String patientCheck = "Appointment";

		request.setAttribute("patientCheck", patientCheck);

		// request.setAttribute("appointmentList", appointmentList);

		// request.setAttribute("appointmentWeekList", appointmentWeekList);

		// request.setAttribute("appointmentMonthList", appointmentMonthList);

		if (appointmentList.size() == 0) {

			System.out.println("No Appointment found for today");

			String todayApptMsg = "No appointment available for today. Please add new appointment.";

			request.setAttribute("todayApptMsg", todayApptMsg);
		}

		if (appointmentWeekList.size() == 0) {

			System.out.println("No Appointment found for this week");

			String weekApptMsg = "No appointment available for this week. Please add new appointment.";

			request.setAttribute("weekApptMsg", weekApptMsg);
		}

		if (appointmentMonthList.size() == 0) {

			System.out.println("No Appointment found for this month");

			String monthApptMsg = "No appointment available for this month. Please add new appointment.";

			request.setAttribute("monthApptMsg", monthApptMsg);
		}

		return SUCCESS;
	}

	/**
	 * 
	 * @return
	 * @throws Exception
	 */
	public String confirmAppointment() throws Exception {
		patientDAOInf = new PatientDAOImpl();

		/*
		 * Getting user role from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");

		message = patientDAOInf.confirmAppointment(patientForm.getAptID());
		if (message.equalsIgnoreCase("success")) {
			addActionMessage("Appointment Confirmed.");

			/*
			 * Retrieving appointment details
			 */
			// appointmentList =
			// patientDAOInf.retrieveAppointmentList(loginForm.getClinicID(),
			// patientForm.getCliniciaID());

			String patientCheck = "Appointment";

			request.setAttribute("patientCheck", patientCheck);

			return SUCCESS;
		} else {
			addActionError("Appointment Confirmation failed. Please check logs for more details.");

			/*
			 * Retrieving appointment details
			 */
			// appointmentList =
			// patientDAOInf.retrieveAppointmentList(loginForm.getClinicID(),
			// patientForm.getCliniciaID());

			String patientCheck = "Appointment";

			request.setAttribute("patientCheck", patientCheck);

			return ERROR;
		}
	}

	/**
	 * 
	 * @return
	 * @throws Exception
	 */
	public String cancelAppointment() throws Exception {
		patientDAOInf = new PatientDAOImpl();

		/*
		 * Getting user role from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");

		message = patientDAOInf.cancelAppointment(patientForm.getAptID());
		if (message.equalsIgnoreCase("success")) {
			addActionMessage("Appointment Cancelled.");

			/*
			 * Retrieving appointment details
			 */
			appointmentList = patientDAOInf.retrieveAppointmentList(loginForm.getClinicID(),
					patientForm.getCliniciaID());

			String patientCheck = "Appointment";

			request.setAttribute("patientCheck", patientCheck);

			return SUCCESS;
		} else {
			addActionError("Appointment cancellation failed. Please check logs for more details.");

			/*
			 * Retrieving appointment details
			 */
			appointmentList = patientDAOInf.retrieveAppointmentList(loginForm.getClinicID(),
					patientForm.getCliniciaID());

			String patientCheck = "Appointment";

			request.setAttribute("patientCheck", patientCheck);

			return ERROR;
		}
	}

	/**
	 * 
	 * @return
	 * @throws Exception
	 */
	public String renderAddNewApptVisit() throws Exception {
		patientDAOInf = new PatientDAOImpl();

		/*
		 * Inserting visit details with newVisitRef as 0
		 */
		patientForm.setVisitType("New");

		/*
		 * Getting user role from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");
		ClinicDAOInf daoInf1 = new ClinicDAOImpl();
		/*
		 * Retrieve LAst OPD visitID
		 */
		int opdVisitID = patientDAOInf.retrieveLastOPDVisitID(patientForm.getPatientID(), loginForm.getClinicID());
		System.out.println("Visit ID before inserting visit details:::: " + opdVisitID);

		/*
		 * Retrieving last entered visit No.
		 */
		int finalVisitNumber = patientDAOInf.retrieveVisitNumber(patientForm.getPatientID(), loginForm.getClinicID());
		// int finalVisitNumber = visitNumber + 1;

		int nextVisitDays = patientDAOInf.retrieveNextVisitDays(loginForm.getVisitTypeID());

		message = patientDAOInf.insertPatientVisit(patientForm, finalVisitNumber);

		int newVisitID = patientDAOInf.retrieveLastOPDVisitID(patientForm.getPatientID(), loginForm.getClinicID());
		System.out.println("Visit ID after iserting visit details:::: " + newVisitID);
		if (message.equalsIgnoreCase("success")) {
			/*
			 * retrieving laste enetred Visit ID from Visit table
			 */
			int lastEneteredVisitID = patientDAOInf.retrieveVisitIDbyPatientID(patientForm.getPatientID());
			System.out.println("Last enetred visit ID is :::: " + lastEneteredVisitID);
			/*
			 * Setting lastEnteredVisitID value into PatientForm's visitID variable
			 */
			patientForm.setVisitID(lastEneteredVisitID);
			/*
			 * Inserting into OphthalmologyOPD table
			 */
			message = patientDAOInf.insertOPDVisit(patientForm);
			if (message.equalsIgnoreCase("success")) {
				/*
				 * HttpServletRequest request = ServletActionContext.getRequest();
				 * 
				 * lasteEnteredVisitList = patientDAOInf
				 * .retrieveLastEnteredVisitDetail(patientForm .getPatientID());
				 * 
				 * String dummy = "success";
				 * 
				 * request.setAttribute("lasteEnteredVisitList", dummy);
				 */

				request.setAttribute("opticianFloatCheck", "empty");

				patientDAOInf.insertDummyOptician(patientForm);

				/*
				 * Setting optician ID into PatientForm's opticianID variable
				 */
				patientForm.setOpticinID(patientDAOInf.retrieveOpticianID(newVisitID));

				System.out.println("Optician ID is :::: " + patientForm.getOpticinID());

				patientDAOInf.insertDummyOpticianOldGlasses(patientForm);

				patientDAOInf.insertdummyMedicalDocument(patientForm.getVisitID());

				lastEneteredOpticianList = patientDAOInf.retrieveLastOpticianDetails(opdVisitID);

				String visitType = daoInf1.retrieveVisitTypeNameByID(loginForm.getVisitTypeID());
				System.out.println("visitype is ::" + visitType);

				patientList = patientDAOInf.retrieveLastEnteredVisitDetail(patientForm.getPatientID(), opdVisitID,
						loginForm.getClinicID(), visitType);
				diagnoseList = configurationUtil.getDiagnoseList();

				drugList = configurationUtil.getTradeNameList();

				InvestigationList = configurationUtil.getInvestigationList();

				frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

				/*
				 * prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm
				 * .getPatientID());
				 */

				chargeTypeList = configurationUtil.getChargeTypeList();

				doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

				/*
				 * billList = patientDAOInf.retrieveBillList(patientForm.getPatientID());
				 */

				return SUCCESS;

			} else {
				addActionError("Failed to add new OPD visit.Please check server logs for more details.");

				String visitType = daoInf1.retrieveVisitTypeNameByID(loginForm.getVisitTypeID());
				System.out.println("visitype is ::" + visitType);

				patientList = patientDAOInf.retrieveLastEnteredVisitDetail(patientForm.getPatientID(), opdVisitID,
						loginForm.getClinicID(), visitType);
				diagnoseList = configurationUtil.getDiagnoseList();

				drugList = configurationUtil.getTradeNameList();

				InvestigationList = configurationUtil.getInvestigationList();

				frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

				/*
				 * prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm
				 * .getPatientID());
				 */

				chargeTypeList = configurationUtil.getChargeTypeList();

				doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

				/*
				 * billList = patientDAOInf.retrieveBillList(patientForm.getPatientID());
				 */

				return ERROR;
			}
		} else {
			System.out.println("Failed to insert visit details.");
			addActionError("Failed to insert visit details into Visit Table. Check log for more details.");

			String visitType = daoInf1.retrieveVisitTypeNameByID(loginForm.getVisitTypeID());
			System.out.println("visitype is ::" + visitType);

			patientList = patientDAOInf.retrieveLastEnteredVisitDetail(patientForm.getPatientID(), opdVisitID,
					loginForm.getClinicID(), visitType);
			diagnoseList = configurationUtil.getDiagnoseList();

			drugList = configurationUtil.getTradeNameList();

			InvestigationList = configurationUtil.getInvestigationList();

			frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

			/*
			 * prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm
			 * .getPatientID());
			 */

			chargeTypeList = configurationUtil.getChargeTypeList();

			doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

			/*
			 * billList = patientDAOInf.retrieveBillList(patientForm.getPatientID());
			 */

			return ERROR;
		}
	}

	/**
	 * 
	 * @return
	 * @throws Exception
	 */
	public String printGenPhyVisit() throws Exception {
		/*
		 * Getting user role from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");
		patientForm.setClinicID(loginForm.getClinicID());

		serviceInf = new eDhanvantariServiceImpl();
		LoginDAOInf daoInf = new LoginDAOImpl();
		RegistrationDAOinf registrationDAOinf = new RegistrationDAOImpl();
		PrescriptionManagementDAOInf managementDAOInf = new PrescriptionManagementDAOImpl();
		patientDAOInf = new PatientDAOImpl();
		ClinicDAOInf daoInf1 = new ClinicDAOImpl();

		String accessKey = xmlUtil.getAccessKey();

		String secreteKey = xmlUtil.getSecreteKey();

		AWSS3Connect awss3Connect = new AWSS3Connect();

		// getting input file location from S3 bucket
		String s3reportFilePath = xmlUtil.getS3RDMLReportFilePath();

		// getting s3 bucket name
		String bucketName = util.getS3BucketName();

		// getting s3 bucket region
		String bucketRegion = xmlUtil.getS3BucketRegion();

		String s3LogoFilePath = xmlUtil.getS3RDMLFilePath();

		AWSCredentials credentials = new BasicAWSCredentials(accessKey, secreteKey);

		AmazonS3 s3 = AmazonS3ClientBuilder.standard().withCredentials(new AWSStaticCredentialsProvider(credentials))
				.withRegion(bucketRegion).build();

		ConvertToPDFUtil convertToPDFUtil = new ConvertToPDFUtil();

		System.out.println("userid loginform is::" + loginForm.getUserID());
		String username = patientDAOInf.retrieveUsernameBYuserID(loginForm.getUserID());
		System.out.println("username loginform is ::" + username);

		String check1 = patientDAOInf.verifyReferralLetter(patientForm.getVisitID());
		System.out.println("check1 value in action:" + check1);
		request.setAttribute("referralLetterCheck", check1);

		String check = patientDAOInf.verifyMedicalCertificate(patientForm.getVisitID());
		System.out.println("check value in action:" + check);
		request.setAttribute("medicalCertiCheck", check);

		message = serviceInf.editGenPhyVisit(patientForm);

		if (message.equalsIgnoreCase("success")) {
			addActionMessage("Successfully added Visit details.");

			HttpServletRequest request = ServletActionContext.getRequest();

			ServletContext context = request.getServletContext();

			String visitType = daoInf1.retrieveVisitTypeNameByID(loginForm.getVisitTypeID());
			System.out.println("visitype is ::" + visitType);

			String realPath = context.getRealPath("/");
			System.out.println("Real path is :: " + realPath);

			// String pdfOutFIleName = reportFilePath + patientForm.getFirstName() +
			// patientForm.getLastName()+ patientForm.getPatientID() + "_" +
			// patientForm.getVisitID() + "opd.pdf";
			String pdfOutFIleName = patientForm.getFirstName() + patientForm.getLastName() + patientForm.getPatientID()
					+ "_" + patientForm.getVisitID() + "opd.pdf";

			message = convertToPDFUtil.convertGenPhyVisitPDF(patientForm.getPatientID(), patientForm.getVisitID(),
					realPath, pdfOutFIleName, visitType, loginForm.getPracticeID(), username, s3, s3LogoFilePath,
					bucketName);

			if (message.equalsIgnoreCase("success")) {

				File inputFile = new File(realPath + "/" + pdfOutFIleName);

				// Storing file to S3 RDML INPUT FILE location
				message = awss3Connect.pushFile(inputFile, pdfOutFIleName, bucketName, bucketRegion, s3reportFilePath);

				S3ObjectInputStream s3ObjectInputStream = s3
						.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, pdfOutFIleName))
						.getObjectContent();

				patientForm.setFileInputStream(s3ObjectInputStream);

				patientForm.setFileName(pdfOutFIleName);
				/*
				 * retrieving patientList which contains visit details
				 */

				patientList = patientDAOInf.retrieveDefaultPatientDetails(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID(), patientForm.getAptID(),
						loginForm.getVisitTypeID());

				boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

				if (visitCheck) {
					billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
				} else {
					billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
							loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
				}

				/* Retrieve labReport List */
				labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
						loginForm.getClinicID());

				String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
				request.setAttribute("paymentType", paymentType);

				// String dummy = "";
				String dummy = "success";

				request.setAttribute("lasteEnteredVisitList", dummy);

				request.setAttribute("lasteEnteredPrescList", "");

				request.setAttribute("lasteEnteredBillList", "");

				String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

				request.setAttribute("medicalCertiText", medicatCertificate);

				String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

				request.setAttribute("referralLetter", referralLetter);
				/*
				 * retrieving prescription list by visitID
				 */
				prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID());

				InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

				diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());

				InvestigationList = configurationUtil.getInvestigationList();
				/*
				 * retrieving symptomCheck list by visitID
				 */
				symptomList = patientDAOInf.retrievesymptomCheckList(patientForm.getVisitID());

				complaintList = patientDAOInf.retrievecomplaintList(patientForm.getVisitID());

				historyList = patientDAOInf.retrieveMedicalHistoryList(patientForm.getPatientID());

				medicationList = patientDAOInf.retrieveCurrentMedicationList(patientForm.getPatientID());

				diagnoseList = configurationUtil.getDiagnoseList();

				request.setAttribute("apptID", patientForm.getAptID());

				drugList = configurationUtil.getTradeNameList();

				frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

				doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

				categoryList = configurationUtil.getCategoryList();

				hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

				// Inserting values into Audit table
				daoInf.insertAudit(request.getRemoteAddr(), "Add General Physician Prescription",
						loginForm.getUserID());

				String[] formNameArray = loginForm.getOPDJSPName().split("&");

				System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[0].trim());

				// Setting add opd page name value in pageName variable
				setPageName(formNameArray[0].trim());

				return SUCCESS;

			} else {
				addActionError("Failed to create OPD visit PDF.Please check server logs for more details.");

				patientList = patientDAOInf.retrieveDefaultPatientDetails(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID(), patientForm.getAptID(),
						loginForm.getVisitTypeID());

				lastEneteredOpticianList = patientDAOInf.retrieveLastOpticianDetails(patientForm.getLastVisitID());

				lasteEnteredVisitList = patientDAOInf.retrieveLastEnteredVisitDetail(patientForm.getPatientID());

				String dummy = "success";

				request.setAttribute("lasteEnteredVisitList", "");

				request.setAttribute("lasteEnteredPrescList", "");

				request.setAttribute("lasteEnteredBillList", "");

				request.setAttribute("opticianFloatCheck", "empty");

				String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

				request.setAttribute("medicalCertiText", medicatCertificate);

				String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

				request.setAttribute("referralLetter", referralLetter);

				// Retrieving patient's fistname, middlename and lastname based on patientID

				String patientName = patientDAOInf.retrievePatientNameByPatientID(patientForm.getPatientID());

				// Setting retrieved patient name into request variable in order to // fetch it
				// on addNewVisit page
				request.setAttribute("patientFullName", patientName);

				// Setting patientID into request variable in order to // fetch it on
				// addNewVisit page
				request.setAttribute("addPatientID", patientForm.getPatientID());

				patientList = patientDAOInf.retrieveLastEnteredVisitDetail(patientForm.getPatientID(),
						patientForm.getLastVisitID(), loginForm.getClinicID(), visitType);

				labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
						loginForm.getClinicID());
				String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());

				request.setAttribute("paymentType", paymentType);

				request.setAttribute("apptID", patientForm.getAptID());

				request.setAttribute("opticianFloatCheck", "empty");

				diagnoseList = configurationUtil.getDiagnoseList();

				drugList = configurationUtil.getTradeNameList();

				InvestigationList = configurationUtil.getInvestigationList();

				frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

				symptomList = patientDAOInf.retrievesymptomCheckList(patientForm.getVisitID());

				complaintList = patientDAOInf.retrievecomplaintList(patientForm.getVisitID());

				historyList = patientDAOInf.retrieveMedicalHistoryList(patientForm.getPatientID());

				medicationList = patientDAOInf.retrieveCurrentMedicationList(patientForm.getPatientID());

				// Retrieving last visit ID for patientID and careType OPD

				int lastOPDVisitID = patientDAOInf.retrieveLastOPDVisitID(patientForm.getPatientID(),
						loginForm.getClinicID());

				// Setting last visitID into request variable in order to // fetch it on
				// addNewVisit page
				request.setAttribute("lastOPDVisitID", lastOPDVisitID);

				/*
				 * retrieving prescription list by visitID
				 */
				prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
						patientForm.getVisitID());

				// chargeTypeList = configurationUtil.getChargeTypeList();

				doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

				InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

				diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());

				categoryList = configurationUtil.getCategoryList();

				billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
						loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());

				// Getting form name to be display based on logged in User

				String[] formNameArray = loginForm.getOPDJSPName().split("&");

				System.out.println("Print General physician visit JSP Page name for logged in user is ::: "
						+ formNameArray[0].trim());

				// Setting add opd page name value in pageName variable
				setPageName(formNameArray[0].trim());

			}
		} else {

			addActionError("Eexception occurred while adding visit details. Please check logs for more details.");

			/*
			 * retrieving patientList which contains visit details
			 */
			patientList = patientDAOInf.retrieveDefaultPatientDetails(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID(), patientForm.getAptID(),
					loginForm.getVisitTypeID());

			hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

			request.setAttribute("apptID", patientForm.getAptID());

			diagnoseList = configurationUtil.getDiagnoseList();

			billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
					loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());

			/*
			 * retrieving prescription list by visitID
			 */
			/*
			 * retrieving prescription list by visitID
			 */
			prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID());

			/* Retrieve labReport List */
			labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
					loginForm.getClinicID());

			String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

			request.setAttribute("medicalCertiText", medicatCertificate);

			String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

			request.setAttribute("referralLetter", referralLetter);
			/*
			 * retrieving symptomCheck list by visitID
			 */
			symptomList = patientDAOInf.retrievesymptomCheckList(patientForm.getVisitID());

			historyList = patientDAOInf.retrieveMedicalHistoryList(patientForm.getPatientID());

			medicationList = patientDAOInf.retrieveCurrentMedicationList(patientForm.getPatientID());

			complaintList = patientDAOInf.retrievecomplaintList(patientForm.getVisitID());

			String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
			request.setAttribute("paymentType", paymentType);

			drugList = configurationUtil.getTradeNameList();

			InvestigationList = configurationUtil.getInvestigationList();
			frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

			InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

			diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());

			categoryList = configurationUtil.getCategoryList();

			// chargeTypeList = configurationUtil.getChargeTypeList();

			doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Add General Physician Visit Exception occurred",
					loginForm.getUserID());

			/*
			 * Getting form name to be display based on logged in User
			 */
			String[] formNameArray = loginForm.getOPDJSPName().split("&");

			System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[0].trim());

			// Setting add opd page name value in pageName variable
			setPageName(formNameArray[0].trim());

			// return ERROR;

		}
		return ERROR;
	}

	public String downloadGenPhyVisit() throws Exception {
		/*
		 * Getting user role from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");
		serviceInf = new eDhanvantariServiceImpl();
		LoginDAOInf daoInf = new LoginDAOImpl();
		RegistrationDAOinf registrationDAOinf = new RegistrationDAOImpl();
		PrescriptionManagementDAOInf managementDAOInf = new PrescriptionManagementDAOImpl();
		patientDAOInf = new PatientDAOImpl();
		ClinicDAOInf daoInf1 = new ClinicDAOImpl();

		String accessKey = xmlUtil.getAccessKey();

		String secreteKey = xmlUtil.getSecreteKey();

		AWSS3Connect awss3Connect = new AWSS3Connect();

		// getting input file location from S3 bucket
		String s3reportFilePath = xmlUtil.getS3RDMLReportFilePath();

		// getting s3 bucket name
		String bucketName = util.getS3BucketName();

		// getting s3 bucket region
		String bucketRegion = xmlUtil.getS3BucketRegion();

		String s3LogoFilePath = xmlUtil.getS3RDMLFilePath();

		AWSCredentials credentials = new BasicAWSCredentials(accessKey, secreteKey);

		AmazonS3 s3 = AmazonS3ClientBuilder.standard().withCredentials(new AWSStaticCredentialsProvider(credentials))
				.withRegion(bucketRegion).build();

		ConvertToPDFUtil convertToPDFUtil = new ConvertToPDFUtil();

		System.out.println("userid loginform is::" + loginForm.getUserID());
		String username = patientDAOInf.retrieveUsernameBYuserID(loginForm.getUserID());
		System.out.println("username loginform is ::" + username);

		String check1 = patientDAOInf.verifyReferralLetter(patientForm.getVisitID());
		System.out.println("check1 value in action:" + check1);
		request.setAttribute("referralLetterCheck", check1);

		String check = patientDAOInf.verifyMedicalCertificate(patientForm.getVisitID());
		System.out.println("check value in action:" + check);
		request.setAttribute("medicalCertiCheck", check);

		/*
		 * message = serviceInf.editGenPhyVisit(patientForm);
		 * 
		 * if (message.equalsIgnoreCase("success")) {
		 * addActionMessage("Successfully added Visit details.");
		 */

		HttpServletRequest request = ServletActionContext.getRequest();

		ServletContext context = request.getServletContext();

		String visitType = daoInf1.retrieveVisitTypeNameByID(loginForm.getVisitTypeID());
		System.out.println("visitype is ::" + visitType);

		String realPath = context.getRealPath("/");
		System.out.println("Real path is :: " + realPath);

		// String pdfOutFIleName = realPath + patientForm.getFirstName() +
		// patientForm.getLastName()
		String pdfOutFIleName = patientForm.getFirstName() + patientForm.getLastName() + patientForm.getPatientID()
				+ "_" + patientForm.getVisitID() + "opd.pdf";

		message = convertToPDFUtil.convertGenPhyVisitPDF(patientForm.getPatientID(), patientForm.getVisitID(), realPath,
				pdfOutFIleName, visitType, loginForm.getPracticeID(), username, s3, s3LogoFilePath, bucketName);

		if (message.equalsIgnoreCase("success")) {

			System.out.println("out File name from action ::::: " + pdfOutFIleName);

			// InputStream fileInputStream;
			// String fileName;

			// long contentLength;

			File fileToDownload = new File(realPath + "/" + pdfOutFIleName);

			// Storing file to S3 RDML INPUT FILE location
			message = awss3Connect.pushFile(fileToDownload, pdfOutFIleName, bucketName, bucketRegion, s3reportFilePath);

			S3ObjectInputStream s3ObjectInputStream = s3
					.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, pdfOutFIleName))
					.getObjectContent();

			patientForm.setFileInputStream(s3ObjectInputStream);

			patientForm.setFileName(pdfOutFIleName);

			/*
			 * retrieving patientList which contains visit details
			 */

			patientList = patientDAOInf.retrieveDefaultPatientDetails(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID(), patientForm.getAptID(),
					loginForm.getVisitTypeID());

			boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

			if (visitCheck) {
				billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
			} else {
				billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
						loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
			}

			/* Retrieve labReport List */
			labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
					loginForm.getClinicID());

			String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
			request.setAttribute("paymentType", paymentType);

			// String dummy = "";
			String dummy = "success";

			request.setAttribute("lasteEnteredVisitList", dummy);

			request.setAttribute("lasteEnteredPrescList", "");

			request.setAttribute("lasteEnteredBillList", "");

			String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

			request.setAttribute("medicalCertiText", medicatCertificate);

			String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

			request.setAttribute("referralLetter", referralLetter);
			/*
			 * retrieving prescription list by visitID
			 */
			prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID());

			InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

			diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());
			InvestigationList = configurationUtil.getInvestigationList();
			/*
			 * retrieving symptomCheck list by visitID
			 */
			symptomList = patientDAOInf.retrievesymptomCheckList(patientForm.getVisitID());

			complaintList = patientDAOInf.retrievecomplaintList(patientForm.getVisitID());

			historyList = patientDAOInf.retrieveMedicalHistoryList(patientForm.getPatientID());

			medicationList = patientDAOInf.retrieveCurrentMedicationList(patientForm.getPatientID());

			diagnoseList = configurationUtil.getDiagnoseList();

			request.setAttribute("apptID", patientForm.getAptID());

			drugList = configurationUtil.getTradeNameList();

			frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

			doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

			categoryList = configurationUtil.getCategoryList();

			hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Add General Physician Prescription", loginForm.getUserID());

			String[] formNameArray = loginForm.getOPDJSPName().split("&");

			System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[0].trim());

			// Setting add opd page name value in pageName variable
			setPageName(formNameArray[0].trim());

			return SUCCESS;

		} else {
			addActionError("Failed to create OPD visit PDF.Please check server logs for more details.");

			patientList = patientDAOInf.retrieveDefaultPatientDetails(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID(), patientForm.getAptID(),
					loginForm.getVisitTypeID());

			lastEneteredOpticianList = patientDAOInf.retrieveLastOpticianDetails(patientForm.getLastVisitID());

			lasteEnteredVisitList = patientDAOInf.retrieveLastEnteredVisitDetail(patientForm.getPatientID());

			String dummy = "success";

			request.setAttribute("lasteEnteredVisitList", dummy);

			request.setAttribute("lasteEnteredPrescList", "");

			request.setAttribute("lasteEnteredBillList", "");

			request.setAttribute("opticianFloatCheck", "empty");

			String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

			request.setAttribute("medicalCertiText", medicatCertificate);

			String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

			request.setAttribute("referralLetter", referralLetter);

			// Retrieving patient's fistname, middlename and lastname based on patientID

			String patientName = patientDAOInf.retrievePatientNameByPatientID(patientForm.getPatientID());

			// Setting retrieved patient name into request variable in order to // fetch it
			// on addNewVisit page
			request.setAttribute("patientFullName", patientName);

			// Setting patientID into request variable in order to // fetch it on
			// addNewVisit page
			request.setAttribute("addPatientID", patientForm.getPatientID());

			patientList = patientDAOInf.retrieveLastEnteredVisitDetail(patientForm.getPatientID(),
					patientForm.getLastVisitID(), loginForm.getClinicID(), visitType);

			labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
					loginForm.getClinicID());
			String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());

			request.setAttribute("paymentType", paymentType);

			request.setAttribute("apptID", patientForm.getAptID());

			request.setAttribute("opticianFloatCheck", "empty");

			diagnoseList = configurationUtil.getDiagnoseList();

			drugList = configurationUtil.getTradeNameList();

			InvestigationList = configurationUtil.getInvestigationList();

			frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

			symptomList = patientDAOInf.retrievesymptomCheckList(patientForm.getVisitID());

			complaintList = patientDAOInf.retrievecomplaintList(patientForm.getVisitID());

			historyList = patientDAOInf.retrieveMedicalHistoryList(patientForm.getPatientID());

			medicationList = patientDAOInf.retrieveCurrentMedicationList(patientForm.getPatientID());

			// Retrieving last visit ID for patientID and careType OPD

			int lastOPDVisitID = patientDAOInf.retrieveLastOPDVisitID(patientForm.getPatientID(),
					loginForm.getClinicID());

			// Setting last visitID into request variable in order to // fetch it on
			// addNewVisit page
			request.setAttribute("lastOPDVisitID", lastOPDVisitID);

			/*
			 * retrieving prescription list by visitID
			 */
			prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID());

			// chargeTypeList = configurationUtil.getChargeTypeList();

			doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

			InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

			diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());

			categoryList = configurationUtil.getCategoryList();

			billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
					loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());

			// Getting form name to be display based on logged in User

			String[] formNameArray = loginForm.getOPDJSPName().split("&");

			System.out.println(
					"Print General physician visit JSP Page name for logged in user is ::: " + formNameArray[0].trim());

			// Setting add opd page name value in pageName variable
			setPageName(formNameArray[0].trim());

		}

		return ERROR;
	}

	public String upadateGenPhyVisit() throws Exception {
		/*
		 * Getting user role from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");
		serviceInf = new eDhanvantariServiceImpl();
		LoginDAOInf daoInf = new LoginDAOImpl();
		RegistrationDAOinf registrationDAOinf = new RegistrationDAOImpl();
		PrescriptionManagementDAOInf managementDAOInf = new PrescriptionManagementDAOImpl();
		patientDAOInf = new PatientDAOImpl();
		ClinicDAOInf daoInf1 = new ClinicDAOImpl();

		ConvertToPDFUtil convertToPDFUtil = new ConvertToPDFUtil();

		String check1 = patientDAOInf.verifyReferralLetter(patientForm.getVisitID());
		System.out.println("check1 value in action:" + check1);
		request.setAttribute("referralLetterCheck", check1);

		String check = patientDAOInf.verifyMedicalCertificate(patientForm.getVisitID());
		System.out.println("check value in action:" + check);
		request.setAttribute("medicalCertiCheck", check);

		message = serviceInf.editGenPhyVisit(patientForm);

		if (message.equalsIgnoreCase("success")) {
			addActionMessage("Successfully added Visit details.");

			HttpServletRequest request = ServletActionContext.getRequest();

			ServletContext context = request.getServletContext();

			String visitType = daoInf1.retrieveVisitTypeNameByID(loginForm.getVisitTypeID());

			/*
			 * retrieving patientList which contains visit details
			 */

			patientList = patientDAOInf.retrieveDefaultPatientDetails(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID(), patientForm.getAptID(),
					loginForm.getVisitTypeID());

			boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

			if (visitCheck) {
				billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
			} else {
				billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
						loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
			}

			/* Retrieve labReport List */
			labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
					loginForm.getClinicID());

			String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
			request.setAttribute("paymentType", paymentType);

			// String dummy = "";

			String dummy = "success";

			request.setAttribute("lasteEnteredVisitList", dummy);

			request.setAttribute("lasteEnteredPrescList", "");

			request.setAttribute("lasteEnteredBillList", "");

			String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

			request.setAttribute("medicalCertiText", medicatCertificate);

			String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

			request.setAttribute("referralLetter", referralLetter);
			/*
			 * retrieving prescription list by visitID
			 */
			prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID());

			InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

			diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());
			InvestigationList = configurationUtil.getInvestigationList();

			orthoBillItemList = patientDAOInf.retrieveOrthoBillingItemList(patientForm.getVisitID());

			String[] formNameArray = loginForm.getOPDJSPName().split("&");

			// Checking if the CRF form is for Gokhale clinic, if so then load the diagnosis
			// from the json file else load the diagnosis from the PVDiagnosis table
			if (formNameArray[0].trim().equals("generalPhysicianGokhaleOPD.jsp")) {

				// Retrieving diagnosis list for the last visit ID
				orthoDiagnosisList = patientDAOInf.retrieveOrthoDiagnosisList(patientForm.getVisitID());

				String realPath = context.getRealPath("/");

				JSONParser parser = new JSONParser();

				JSONArray diagnosisJSON = (JSONArray) parser
						.parse(new FileReader(realPath + File.separator + "ortho_charges.json"));

				for (Object jsonData : diagnosisJSON) {
					JSONObject data = (JSONObject) jsonData;

					// diagnoseList.put((String) data.get("rate"), (String) data.get("diagnosis"));
				}

			}

			/*
			 * retrieving symptomCheck list by visitID
			 */
			symptomList = patientDAOInf.retrievesymptomCheckList(patientForm.getVisitID());

			complaintList = patientDAOInf.retrievecomplaintList(patientForm.getVisitID());

			historyList = patientDAOInf.retrieveMedicalHistoryList(patientForm.getPatientID());

			medicationList = patientDAOInf.retrieveCurrentMedicationList(patientForm.getPatientID());

			diagnoseList = configurationUtil.getDiagnoseList();

			request.setAttribute("apptID", patientForm.getAptID());

			drugList = configurationUtil.getTradeNameList();

			frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

			doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

			categoryList = configurationUtil.getCategoryList();

			hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Add General Physician Prescription", loginForm.getUserID());

			System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[0].trim());

			// Setting add opd page name value in pageName variable
			setPageName(formNameArray[0].trim());

			return SUCCESS;

		} else {

			addActionError("Eexception occurred while adding visit details. Please check logs for more details.");

			String dummy = "success";

			request.setAttribute("lasteEnteredVisitList", "");

			request.setAttribute("lasteEnteredPrescList", "");

			request.setAttribute("lasteEnteredBillList", "");

			/*
			 * retrieving patientList which contains visit details
			 */
			patientList = patientDAOInf.retrieveDefaultPatientDetails(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID(), patientForm.getAptID(),
					loginForm.getVisitTypeID());

			hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

			request.setAttribute("apptID", patientForm.getAptID());

			diagnoseList = configurationUtil.getDiagnoseList();

			billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
					loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());

			prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID());

			/* Retrieve labReport List */
			labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
					loginForm.getClinicID());

			String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

			request.setAttribute("medicalCertiText", medicatCertificate);

			String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

			request.setAttribute("referralLetter", referralLetter);

			orthoBillItemList = patientDAOInf.retrieveOrthoBillingItemList(patientForm.getVisitID());

			String[] formNameArray = loginForm.getOPDJSPName().split("&");

			// Checking if the CRF form is for Gokhale clinic, if so then load the diagnosis
			// from the json file else load the diagnosis from the PVDiagnosis table
			if (formNameArray[0].trim().equals("generalPhysicianGokhaleOPD.jsp")) {

				// Retrieving diagnosis list for the last visit ID
				orthoDiagnosisList = patientDAOInf.retrieveOrthoDiagnosisList(patientForm.getVisitID());

				HttpServletRequest request = ServletActionContext.getRequest();

				ServletContext context = request.getServletContext();

				String realPath = context.getRealPath("/");

				JSONParser parser = new JSONParser();

				JSONArray diagnosisJSON = (JSONArray) parser
						.parse(new FileReader(realPath + File.separator + "ortho_charges.json"));

				for (Object jsonData : diagnosisJSON) {
					JSONObject data = (JSONObject) jsonData;

					// diagnoseList.put((String) data.get("rate"), (String) data.get("diagnosis"));
				}

			}

			/*
			 * retrieving symptomCheck list by visitID
			 */
			symptomList = patientDAOInf.retrievesymptomCheckList(patientForm.getVisitID());

			historyList = patientDAOInf.retrieveMedicalHistoryList(patientForm.getPatientID());

			medicationList = patientDAOInf.retrieveCurrentMedicationList(patientForm.getPatientID());

			complaintList = patientDAOInf.retrievecomplaintList(patientForm.getVisitID());

			String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
			request.setAttribute("paymentType", paymentType);

			drugList = configurationUtil.getTradeNameList();

			InvestigationList = configurationUtil.getInvestigationList();
			frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

			InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

			diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());

			categoryList = configurationUtil.getCategoryList();

			// chargeTypeList = configurationUtil.getChargeTypeList();

			doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Add General Physician Visit Exception occurred",
					loginForm.getUserID());

			/*
			 * Getting form name to be display based on logged in User
			 */
			System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[0].trim());

			// Setting add opd page name value in pageName variable
			setPageName(formNameArray[0].trim());

		}
		return ERROR;
	}

	/**
	 * 
	 * @return
	 * @throws Exception
	 */
	public String downloadGenPhyPrescription() throws Exception {

		patientDAOInf = new PatientDAOImpl();

		serviceInf = new eDhanvantariServiceImpl();

		SMSSender smsSender = new SMSSender();

		EmailUtil emailUtil = new EmailUtil();

		ConvertToPDFUtil convertToPDFUtil = new ConvertToPDFUtil();

		LoginDAOInf daoInf = new LoginDAOImpl();

		ClinicDAOInf daoInf1 = new ClinicDAOImpl();

		RegistrationDAOinf registrationDAOinf = new RegistrationDAOImpl();

		PrescriptionManagementDAOInf managementDAOInf = new PrescriptionManagementDAOImpl();

		String accessKey = xmlUtil.getAccessKey();

		String secreteKey = xmlUtil.getSecreteKey();

		AWSS3Connect awss3Connect = new AWSS3Connect();

		// getting input file location from S3 bucket
		String s3reportFilePath = xmlUtil.getS3RDMLReportFilePath();

		// getting s3 bucket name
		String bucketName = util.getS3BucketName();

		// getting s3 bucket region
		String bucketRegion = xmlUtil.getS3BucketRegion();

		String s3LogoFilePath = xmlUtil.getS3RDMLFilePath();

		AWSCredentials credentials = new BasicAWSCredentials(accessKey, secreteKey);

		AmazonS3 s3 = AmazonS3ClientBuilder.standard().withCredentials(new AWSStaticCredentialsProvider(credentials))
				.withRegion(bucketRegion).build();

		/*
		 * Getting user role from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");

		String username = patientDAOInf.retrieveUsernameBYuserID(loginForm.getUserID());

		/*
		 * Getting form name to be display based on logged in User
		 */
		String[] formNameArray = loginForm.getOPDJSPName().split("&");

		patientForm.setClinicID(loginForm.getClinicID());

		String check1 = patientDAOInf.verifyReferralLetter(patientForm.getVisitID());

		request.setAttribute("referralLetterCheck", check1);

		String check = patientDAOInf.verifyMedicalCertificate(patientForm.getVisitID());

		request.setAttribute("medicalCertiCheck", check);

		HttpServletRequest request = ServletActionContext.getRequest();

		ServletContext context = request.getServletContext();

		String realPath = context.getRealPath("/");

		String pdfOutFIleName = patientForm.getFirstName() + patientForm.getLastName() + patientForm.getPatientID()
				+ "_" + patientForm.getVisitID() + "p.pdf";

		if (formNameArray[0].trim().equals("generalPhysicianOPD.jsp")) {

			message = convertToPDFUtil.convertPrescriptionForPhysicianOPDPDF(patientForm.getPatientID(),
					patientForm.getVisitID(), realPath, pdfOutFIleName, loginForm.getClinicID(),
					loginForm.getPracticeID(), username, s3, s3LogoFilePath, bucketName);
		} else if (formNameArray[0].trim().equals("generalPhysicianGokhaleOPD.jsp")) {

			message = convertToPDFUtil.convertPrescriptionForOrthoPhysicianOPDPDF(patientForm.getPatientID(),
					patientForm.getVisitID(), realPath, pdfOutFIleName, loginForm.getClinicID(),
					loginForm.getPracticeID(), username, s3, s3LogoFilePath, bucketName);
		} else {
			message = convertToPDFUtil.convertPrescriptionPDF(patientForm.getPatientID(), patientForm.getVisitID(),
					realPath, pdfOutFIleName, loginForm.getClinicID(), loginForm.getPracticeID(), username, s3,
					s3LogoFilePath, bucketName);
		}

		orthoBillItemList = patientDAOInf.retrieveOrthoBillingItemList(patientForm.getVisitID());

		if (message.equals("success")) {

			System.out.println("out File name from action ::::: " + pdfOutFIleName);

			File fileToDownload = new File(realPath + "/" + pdfOutFIleName);

			// Storing file to S3 RDML INPUT FILE location
			message = awss3Connect.pushFile(fileToDownload, pdfOutFIleName, bucketName, bucketRegion, s3reportFilePath);

			S3ObjectInputStream s3ObjectInputStream = s3
					.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, pdfOutFIleName))
					.getObjectContent();

			patientForm.setFileInputStream(s3ObjectInputStream);

			patientForm.setFileName(pdfOutFIleName);

			String prescTabCheck = "enable";

			request.setAttribute("prescTabCheck", prescTabCheck);

			/*
			 * Check whether appointment udpated flag is on or not, and depending upon that
			 * sending SMS and Email
			 */
			boolean SMSCheck = util.verifyCommunicationCheck("smsPresc");

			if (SMSCheck) {

				/*
				 * Retrieving patient's mobile no, if mobile is not null, then sending patient a
				 * welcome message
				 */
				String mobileNo = patientDAOInf.retrievePatientMobileNoByID(patientForm.getPatientID());

				/*
				 * Sending patient a welcome as well as Appointment scheduled message on
				 * checking whether mobile no is available for that patient or not
				 */
				if (mobileNo == null || mobileNo == "") {
					System.out.println("Mobile no not found for patient.");
				} else {

					if (mobileNo.isEmpty()) {
						System.out.println("Mobile no not found for patient.");
					} else {

						/*
						 * Sending bill details SMS to patient
						 */
						smsSender.sendGeneralisedPrescriptionORBillSMS(patientForm.getVisitID(), mobileNo,
								loginForm.getPracticeID(), loginForm.getClinicID(), ActivityStatus.PRESCRIPTION,
								pdfOutFIleName);

					}

				}

			}

			boolean EmailCheck = util.verifyCommunicationCheck("emailPresc");

			if (EmailCheck) {

				/*
				 * Retrieving patient's email ID, if not null, then sending patient a welcome
				 * mail
				 */
				String emailID = patientDAOInf.retrievePatientEmailByID(patientForm.getPatientID());

				if (emailID == null || emailID == "") {
					System.out.println("EmailID no not found for patient.");
				} else {

					if (emailID.isEmpty()) {
						System.out.println("EmailID no not found for patient.");
					} else {

						/*
						 * Sending prescription mail to patient
						 */
						emailUtil.sendPrescriptionMail(patientForm.getPatientID(), loginForm.getPracticeID(),
								loginForm.getClinicID(), patientForm.getVisitID(), realPath, pdfOutFIleName, emailID);
					}

				}

			}

			/*
			 * Update appointment status to Prescription
			 */
			patientDAOInf.updatePrescriptionAppointmentStatus(patientForm.getPatientID(), patientForm.getAptID());

			/*
			 * retrieving patientList which contains visit details
			 */
			if (formNameArray[0].trim().equals("generalOPDNew.jsp")
					|| formNameArray[0].trim().equals("telephonicNew.jsp")
					|| formNameArray[0].trim().equals("physicianOPDNew.jsp")
					|| formNameArray[0].trim().equals("generalPhysicianOPD.jsp")
					|| formNameArray[0].trim().equals("generalPhysicianGokhaleOPD.jsp")) {
				patientList = patientDAOInf.retrieveDefaultPatientDetails(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID(), patientForm.getAptID(),
						loginForm.getVisitTypeID());
			} else {
				String visitType = daoInf1.retrieveVisitTypeNameByID(loginForm.getVisitTypeID());
				System.out.println("visitype is ::" + visitType);

				patientList = patientDAOInf.retrieveLastEnteredVisitDetail(patientForm.getPatientID(),
						patientForm.getLastVisitID(), loginForm.getClinicID(), visitType);

			}

			boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

			if (visitCheck) {
				billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
			} else {
				billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
						loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
			}

			/* Retrieve labReport List */
			labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
					loginForm.getClinicID());

			String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
			request.setAttribute("paymentType", paymentType);

			String dummy = "success";

			request.setAttribute("lasteEnteredVisitList", dummy);

			request.setAttribute("lasteEnteredPrescList", dummy);

			request.setAttribute("lasteEnteredBillList", "");

			String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

			request.setAttribute("medicalCertiText", medicatCertificate);

			String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

			request.setAttribute("referralLetter", referralLetter);

			/*
			 * retrieving prescription list by visitID
			 */
			prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID());

			InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

			diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());

			/*
			 * retrieving symptomCheck list by visitID
			 */
			symptomList = patientDAOInf.retrievesymptomCheckList(patientForm.getVisitID());

			historyList = patientDAOInf.retrieveMedicalHistoryList(patientForm.getPatientID());

			medicationList = patientDAOInf.retrieveCurrentMedicationList(patientForm.getPatientID());

			complaintList = patientDAOInf.retrievecomplaintList(patientForm.getVisitID());

			// Checking if the CRF form is for Gokhale clinic, if so then load the diagnosis
			// from the json file else load the diagnosis from the PVDiagnosis table
			if (formNameArray[0].trim().equals("generalPhysicianGokhaleOPD.jsp")) {

				// Retrieving diagnosis list for the last visit ID
				orthoDiagnosisList = patientDAOInf.retrieveOrthoDiagnosisList(patientForm.getVisitID());

				JSONParser parser = new JSONParser();

				JSONArray diagnosisJSON = (JSONArray) parser
						.parse(new FileReader(realPath + File.separator + "ortho_charges.json"));

				for (Object jsonData : diagnosisJSON) {
					JSONObject data = (JSONObject) jsonData;

					// diagnoseList.put((String) data.get("rate"), (String) data.get("diagnosis"));
				}

			}
			diagnoseList = configurationUtil.getDiagnoseList();

			request.setAttribute("apptID", patientForm.getAptID());

			drugList = configurationUtil.getTradeNameList();

			InvestigationList = configurationUtil.getInvestigationList();

			frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

			doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

			categoryList = configurationUtil.getCategoryList();

			hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Add General Physician Prescription", loginForm.getUserID());

			System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[0].trim());

			// Setting add opd page name value in pageName variable
			setPageName(formNameArray[0].trim());

			return SUCCESS;

		} else if (message.equals("noVisit")) {

			addActionError("No visit added. Please add visit first.");

			String prescTabCheck = "enable";

			request.setAttribute("prescTabCheck", prescTabCheck);

			String dummy = "";

			request.setAttribute("lasteEnteredVisitList", dummy);

			request.setAttribute("lasteEnteredPrescList", dummy);

			request.setAttribute("lasteEnteredBillList", dummy);

			String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

			request.setAttribute("medicalCertiText", medicatCertificate);

			String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

			request.setAttribute("referralLetter", referralLetter);

			/*
			 * retrieving patientList which contains visit details
			 */
			if (formNameArray[0].trim().equals("generalOPDNew.jsp")
					|| formNameArray[0].trim().equals("telephonicNew.jsp")
					|| formNameArray[0].trim().equals("physicianOPDNew.jsp")
					|| formNameArray[0].trim().equals("generalPhysicianOPD.jsp")
					|| formNameArray[0].trim().equals("generalPhysicianGokhaleOPD.jsp")) {
				patientList = patientDAOInf.retrieveDefaultPatientDetails(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID(), patientForm.getAptID(),
						loginForm.getVisitTypeID());
			} else {
				String visitType = daoInf1.retrieveVisitTypeNameByID(loginForm.getVisitTypeID());
				System.out.println("visitype is ::" + visitType);

				patientList = patientDAOInf.retrieveLastEnteredVisitDetail(patientForm.getPatientID(),
						patientForm.getLastVisitID(), loginForm.getClinicID(), visitType);

			}
			hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

			/*
			 * retrieving prescription list by visitID
			 */
			prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID());

			InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

			diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());

			/*
			 * retrieving symptomCheck list by visitID
			 */
			symptomList = patientDAOInf.retrievesymptomCheckList(patientForm.getVisitID());

			historyList = patientDAOInf.retrieveMedicalHistoryList(patientForm.getPatientID());

			medicationList = patientDAOInf.retrieveCurrentMedicationList(patientForm.getPatientID());

			complaintList = patientDAOInf.retrievecomplaintList(patientForm.getVisitID());

			boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

			if (visitCheck) {
				billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
			} else {
				billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
						loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
			}

			/* Retrieve labReport List */
			labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
					loginForm.getClinicID());

			String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
			request.setAttribute("paymentType", paymentType);

			request.setAttribute("apptID", patientForm.getAptID());

			// Checking if the CRF form is for Gokhale clinic, if so then load the diagnosis
			// from the json file else load the diagnosis from the PVDiagnosis table
			if (formNameArray[0].trim().equals("generalPhysicianGokhaleOPD.jsp")) {

				// Retrieving diagnosis list for the last visit ID
				orthoDiagnosisList = patientDAOInf.retrieveOrthoDiagnosisList(patientForm.getVisitID());

				JSONParser parser = new JSONParser();

				JSONArray diagnosisJSON = (JSONArray) parser
						.parse(new FileReader(realPath + File.separator + "ortho_charges.json"));

				for (Object jsonData : diagnosisJSON) {
					JSONObject data = (JSONObject) jsonData;

					// diagnoseList.put((String) data.get("rate"), (String) data.get("diagnosis"));
				}

			}
			diagnoseList = configurationUtil.getDiagnoseList();

			drugList = configurationUtil.getTradeNameList();

			InvestigationList = configurationUtil.getInvestigationList();

			frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

			// chargeTypeList = configurationUtil.getChargeTypeList();

			doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

			categoryList = configurationUtil.getCategoryList();

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Add General Physician Prescription Exception occurred",
					loginForm.getUserID());

			System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[0].trim());

			// Setting add opd page name value in pageName variable
			setPageName(formNameArray[0].trim());

			return ERROR;

		} else {

			addActionError(
					"Eexception occurred while adding prescription details. Please check server logs for more details.");

			String prescTabCheck = "enable";

			request.setAttribute("prescTabCheck", prescTabCheck);

			String dummy = "";

			request.setAttribute("lasteEnteredVisitList", "success");

			request.setAttribute("lasteEnteredPrescList", dummy);

			request.setAttribute("lasteEnteredBillList", dummy);

			String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

			request.setAttribute("medicalCertiText", medicatCertificate);

			String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

			request.setAttribute("referralLetter", referralLetter);
			/*
			 * retrieving patientList which contains visit details
			 */
			if (formNameArray[0].trim().equals("generalOPDNew.jsp")
					|| formNameArray[0].trim().equals("telephonicNew.jsp")
					|| formNameArray[0].trim().equals("physicianOPDNew.jsp")
					|| formNameArray[0].trim().equals("generalPhysicianOPD.jsp")
					|| formNameArray[0].trim().equals("generalPhysicianGokhaleOPD.jsp")) {
				patientList = patientDAOInf.retrieveDefaultPatientDetails(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID(), patientForm.getAptID(),
						loginForm.getVisitTypeID());
			} else {
				String visitType = daoInf1.retrieveVisitTypeNameByID(loginForm.getVisitTypeID());
				System.out.println("visitype is ::" + visitType);

				patientList = patientDAOInf.retrieveLastEnteredVisitDetail(patientForm.getPatientID(),
						patientForm.getLastVisitID(), loginForm.getClinicID(), visitType);

			}

			hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

			request.setAttribute("apptID", patientForm.getAptID());

			boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

			if (visitCheck) {
				billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
			} else {
				billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
						loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
			}

			/*
			 * retrieving prescription list by visitID
			 */
			prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID());

			InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

			diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());
			/*
			 * retrieving symptomCheck list by visitID
			 */
			symptomList = patientDAOInf.retrievesymptomCheckList(patientForm.getVisitID());

			historyList = patientDAOInf.retrieveMedicalHistoryList(patientForm.getPatientID());

			medicationList = patientDAOInf.retrieveCurrentMedicationList(patientForm.getPatientID());

			complaintList = patientDAOInf.retrievecomplaintList(patientForm.getVisitID());

			/* Retrieve labReport List */
			labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
					loginForm.getClinicID());

			String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
			request.setAttribute("paymentType", paymentType);

			categoryList = configurationUtil.getCategoryList();

			// Checking if the CRF form is for Gokhale clinic, if so then load the diagnosis
			// from the json file else load the diagnosis from the PVDiagnosis table
			if (formNameArray[0].trim().equals("generalPhysicianGokhaleOPD.jsp")) {

				// Retrieving diagnosis list for the last visit ID
				orthoDiagnosisList = patientDAOInf.retrieveOrthoDiagnosisList(patientForm.getVisitID());

				JSONParser parser = new JSONParser();

				JSONArray diagnosisJSON = (JSONArray) parser
						.parse(new FileReader(realPath + File.separator + "ortho_charges.json"));

				for (Object jsonData : diagnosisJSON) {
					JSONObject data = (JSONObject) jsonData;

					// diagnoseList.put((String) data.get("rate"), (String) data.get("diagnosis"));
				}

			}
			diagnoseList = configurationUtil.getDiagnoseList();

			drugList = configurationUtil.getTradeNameList();

			InvestigationList = configurationUtil.getInvestigationList();

			frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

			// chargeTypeList = configurationUtil.getChargeTypeList();

			doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Add General Physician Prescription Exception occurred",
					loginForm.getUserID());

			System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[0].trim());

			// Setting add opd page name value in pageName variable
			setPageName(formNameArray[0].trim());

			return ERROR;

		}
	}

	public String printGenPhyPrescription() throws Exception {

		patientDAOInf = new PatientDAOImpl();

		serviceInf = new eDhanvantariServiceImpl();

		SMSSender smsSender = new SMSSender();

		EmailUtil emailUtil = new EmailUtil();

		ConvertToPDFUtil convertToPDFUtil = new ConvertToPDFUtil();

		LoginDAOInf daoInf = new LoginDAOImpl();

		ClinicDAOInf daoInf1 = new ClinicDAOImpl();

		RegistrationDAOinf registrationDAOinf = new RegistrationDAOImpl();

		PrescriptionManagementDAOInf managementDAOInf = new PrescriptionManagementDAOImpl();

		String accessKey = xmlUtil.getAccessKey();

		String secreteKey = xmlUtil.getSecreteKey();

		AWSS3Connect awss3Connect = new AWSS3Connect();

		// getting input file location from S3 bucket
		String s3reportFilePath = xmlUtil.getS3RDMLReportFilePath();

		String s3LogoFilePath = xmlUtil.getS3RDMLFilePath();

		// getting s3 bucket name
		String bucketName = util.getS3BucketName();

		// getting s3 bucket region
		String bucketRegion = xmlUtil.getS3BucketRegion();

		// Set the presigned URL to expire after one hour.
		java.util.Date expiration = new java.util.Date();
		long expTimeMillis = expiration.getTime();
		expTimeMillis += 1000 * 60 * 60;
		expiration.setTime(expTimeMillis);

		orthoBillItemList = patientDAOInf.retrieveOrthoBillingItemList(patientForm.getVisitID());

		AWSCredentials credentials = new BasicAWSCredentials(accessKey, secreteKey);

		AmazonS3 s3 = AmazonS3ClientBuilder.standard().withCredentials(new AWSStaticCredentialsProvider(credentials))
				.withRegion(bucketRegion).build();

		/*
		 * Getting user role from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");

		String username = patientDAOInf.retrieveUsernameBYuserID(loginForm.getUserID());

		/*
		 * Getting form name to be display based on logged in User
		 */
		String[] formNameArray = loginForm.getOPDJSPName().split("&");

		patientForm.setClinicID(loginForm.getClinicID());

		String check1 = patientDAOInf.verifyReferralLetter(patientForm.getVisitID());

		request.setAttribute("referralLetterCheck", check1);

		String check = patientDAOInf.verifyMedicalCertificate(patientForm.getVisitID());

		request.setAttribute("medicalCertiCheck", check);

		message = serviceInf.addNewPrescription(patientForm);

		if (message.equals("success")) {

			addActionMessage("Prescription added successfully.");

			String prescTabCheck = "enable";

			request.setAttribute("prescTabCheck", prescTabCheck);

			HttpServletRequest request = ServletActionContext.getRequest();

			ServletContext context = request.getServletContext();

			String realPath = context.getRealPath("/");

			// String pdfOutFIleName = reportFilePath + patientForm.getFirstName() +
			// patientForm.getLastName()
			String pdfOutFIleName = patientForm.getFirstName() + patientForm.getLastName() + patientForm.getPatientID()
					+ "_" + patientForm.getVisitID() + "p.pdf";

			System.out.println("PRESC FILE PATH IS::" + pdfOutFIleName);

			if (formNameArray[0].trim().equals("generalPhysicianOPD.jsp")) {

				message = convertToPDFUtil.convertPrescriptionForPhysicianOPDPDF(patientForm.getPatientID(),
						patientForm.getVisitID(), realPath, pdfOutFIleName, loginForm.getClinicID(),
						loginForm.getPracticeID(), username, s3, s3LogoFilePath, bucketName);
			} else if (formNameArray[0].trim().equals("generalPhysicianGokhaleOPD.jsp")) {

				message = convertToPDFUtil.convertPrescriptionForOrthoPhysicianOPDPDF(patientForm.getPatientID(),
						patientForm.getVisitID(), realPath, pdfOutFIleName, loginForm.getClinicID(),
						loginForm.getPracticeID(), username, s3, s3LogoFilePath, bucketName);
			} else if (formNameArray[0].trim().equals("ophthalmologyOPDNew2.jsp")) {

				String visitType = daoInf1.retrieveVisitTypeNameByID(loginForm.getVisitTypeID());

				message = convertToPDFUtil.convertOphthalmOPDPDF(patientForm.getVisitID(), patientForm.getPatientID(),
						loginForm.getClinicID(), realPath, pdfOutFIleName, visitType, s3, s3reportFilePath, bucketName,
						loginForm.getPracticeID(), username);

			} else {
				message = convertToPDFUtil.convertPrescriptionPDF(patientForm.getPatientID(), patientForm.getVisitID(),
						realPath, pdfOutFIleName, loginForm.getClinicID(), loginForm.getPracticeID(), username, s3,
						s3LogoFilePath, bucketName);
			}

			if (message.equals("success")) {

				File inputFile = new File(realPath + "/" + pdfOutFIleName);

				// Storing file to S3 RDML INPUT FILE location
				message = awss3Connect.pushFile(inputFile, pdfOutFIleName, bucketName, bucketRegion, s3reportFilePath);

				S3ObjectInputStream s3ObjectInputStream = s3
						.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, pdfOutFIleName))
						.getObjectContent();

				request.setAttribute("PDFOutFileName", pdfOutFIleName);

				patientForm.setFileInputStream(s3ObjectInputStream);

				patientForm.setFileName(pdfOutFIleName);

				boolean EmailCheck = util.verifyCommunicationCheck("emailPresc");

				if (EmailCheck) {

					/*
					 * Retrieving patient's email ID, if not null, then sending patient a welcome
					 * mail
					 */
					String emailID = patientDAOInf.retrievePatientEmailByID(patientForm.getPatientID());

					if (emailID == null || emailID == "") {
						System.out.println("EmailID no not found for patient.");
					} else {

						if (emailID.isEmpty()) {
							System.out.println("EmailID no not found for patient.");
						} else {

							/*
							 * Sending prescription mail to patient
							 */
							emailUtil.sendPrescriptionMail(patientForm.getPatientID(), loginForm.getPracticeID(),
									loginForm.getClinicID(), patientForm.getVisitID(), realPath, pdfOutFIleName,
									emailID);
						}

					}

				}

				/*
				 * Check whether appointment udpated flag is on or not, and depending upon that
				 * sending SMS and Email
				 */
				boolean SMSCheck = util.verifyCommunicationCheck("smsPresc");

				if (SMSCheck) {

					/*
					 * Retrieving patient's mobile no, if mobile is not null, then sending patient a
					 * welcome message
					 */
					String mobileNo = patientDAOInf.retrievePatientMobileNoByID(patientForm.getPatientID());

					/*
					 * Sending patient a welcome as well as Appointment scheduled message on
					 * checking whether mobile no is available for that patient or not
					 */
					if (mobileNo == null || mobileNo == "") {
						System.out.println("Mobile no not found for patient.");
					} else {

						if (mobileNo.isEmpty()) {
							System.out.println("Mobile no not found for patient.");
						} else {

							/*
							 * Sending bill details SMS to patient
							 */
							smsSender.sendGeneralisedPrescriptionORBillSMS(patientForm.getVisitID(), mobileNo,
									loginForm.getPracticeID(), loginForm.getClinicID(), ActivityStatus.PRESCRIPTION,
									pdfOutFIleName);

						}

					}

				}

			}

			/*
			 * Update appointment status to Prescription
			 */
			patientDAOInf.updatePrescriptionAppointmentStatus(patientForm.getPatientID(), patientForm.getAptID());

			/*
			 * retrieving patientList which contains visit details
			 */
			if (formNameArray[0].trim().equals("generalOPDNew.jsp")
					|| formNameArray[0].trim().equals("telephonicNew.jsp")
					|| formNameArray[0].trim().equals("physicianOPDNew.jsp")
					|| formNameArray[0].trim().equals("generalPhysicianOPD.jsp")
					|| formNameArray[0].trim().equals("generalPhysicianGokhaleOPD.jsp")) {
				patientList = patientDAOInf.retrieveDefaultPatientDetails(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID(), patientForm.getAptID(),
						loginForm.getVisitTypeID());
			} else {
				String visitType = daoInf1.retrieveVisitTypeNameByID(loginForm.getVisitTypeID());
				System.out.println("visitype is ::" + visitType);

				patientList = patientDAOInf.retrieveLastEnteredVisitDetail(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID(), visitType);

			}

			boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

			if (visitCheck) {
				billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
			} else {
				billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
						loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
			}

			/* Retrieve labReport List */
			labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
					loginForm.getClinicID());

			String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
			request.setAttribute("paymentType", paymentType);

			String dummy = "success";

			request.setAttribute("lasteEnteredVisitList", "");

			request.setAttribute("lasteEnteredPrescList", dummy);

			request.setAttribute("lasteEnteredBillList", "");

			String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

			request.setAttribute("medicalCertiText", medicatCertificate);

			String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

			request.setAttribute("referralLetter", referralLetter);

			/*
			 * retrieving prescription list by visitID
			 */
			prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID());

			InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

			diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());
			/*
			 * retrieving symptomCheck list by visitID
			 */
			symptomList = patientDAOInf.retrievesymptomCheckList(patientForm.getVisitID());

			historyList = patientDAOInf.retrieveMedicalHistoryList(patientForm.getPatientID());

			medicationList = patientDAOInf.retrieveCurrentMedicationList(patientForm.getPatientID());

			complaintList = patientDAOInf.retrievecomplaintList(patientForm.getVisitID());

			// Checking if the CRF form is for Gokhale clinic, if so then load the diagnosis
			// from the json file else load the diagnosis from the PVDiagnosis table
			if (formNameArray[0].trim().equals("generalPhysicianGokhaleOPD.jsp")) {

				// Retrieving diagnosis list for the last visit ID
				orthoDiagnosisList = patientDAOInf.retrieveOrthoDiagnosisList(patientForm.getVisitID());

				JSONParser parser = new JSONParser();

				JSONArray diagnosisJSON = (JSONArray) parser
						.parse(new FileReader(realPath + File.separator + "ortho_charges.json"));

				for (Object jsonData : diagnosisJSON) {
					JSONObject data = (JSONObject) jsonData;

					// diagnoseList.put((String) data.get("rate"), (String) data.get("diagnosis"));
				}

			}
			diagnoseList = configurationUtil.getDiagnoseList();

			request.setAttribute("apptID", patientForm.getAptID());

			drugList = configurationUtil.getTradeNameList();

			InvestigationList = configurationUtil.getInvestigationList();

			frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

			doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

			categoryList = configurationUtil.getCategoryList();

			hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Add General Physician Prescription", loginForm.getUserID());

			System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[0].trim());

			// Setting add opd page name value in pageName variable
			setPageName(formNameArray[0].trim());

			return SUCCESS;

		} else if (message.equals("noVisit")) {

			addActionError("No visit added. Please add visit first.");

			String prescTabCheck = "enable";

			request.setAttribute("prescTabCheck", prescTabCheck);

			String dummy = "";

			request.setAttribute("lasteEnteredVisitList", dummy);

			request.setAttribute("lasteEnteredPrescList", dummy);

			request.setAttribute("lasteEnteredBillList", dummy);

			String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

			request.setAttribute("medicalCertiText", medicatCertificate);

			String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

			request.setAttribute("referralLetter", referralLetter);

			/*
			 * retrieving patientList which contains visit details
			 */
			if (formNameArray[0].trim().equals("generalOPDNew.jsp")
					|| formNameArray[0].trim().equals("telephonicNew.jsp")
					|| formNameArray[0].trim().equals("physicianOPDNew.jsp")
					|| formNameArray[0].trim().equals("generalPhysicianOPD.jsp")
					|| formNameArray[0].trim().equals("generalPhysicianGokhaleOPD.jsp")) {
				patientList = patientDAOInf.retrieveDefaultPatientDetails(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID(), patientForm.getAptID(),
						loginForm.getVisitTypeID());
			} else {
				String visitType = daoInf1.retrieveVisitTypeNameByID(loginForm.getVisitTypeID());
				System.out.println("visitype is ::" + visitType);

				patientList = patientDAOInf.retrieveLastEnteredVisitDetail(patientForm.getPatientID(),
						patientForm.getLastVisitID(), loginForm.getClinicID(), visitType);

			}
			hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

			/*
			 * retrieving prescription list by visitID
			 */
			prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID());

			InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

			diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());
			/*
			 * retrieving symptomCheck list by visitID
			 */
			symptomList = patientDAOInf.retrievesymptomCheckList(patientForm.getVisitID());

			historyList = patientDAOInf.retrieveMedicalHistoryList(patientForm.getPatientID());

			medicationList = patientDAOInf.retrieveCurrentMedicationList(patientForm.getPatientID());

			complaintList = patientDAOInf.retrievecomplaintList(patientForm.getVisitID());

			boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

			if (visitCheck) {
				billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
			} else {
				billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
						loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
			}

			/* Retrieve labReport List */
			labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
					loginForm.getClinicID());

			String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
			request.setAttribute("paymentType", paymentType);

			request.setAttribute("apptID", patientForm.getAptID());

			// Checking if the CRF form is for Gokhale clinic, if so then load the diagnosis
			// from the json file else load the diagnosis from the PVDiagnosis table
			if (formNameArray[0].trim().equals("generalPhysicianGokhaleOPD.jsp")) {

				// Retrieving diagnosis list for the last visit ID
				orthoDiagnosisList = patientDAOInf.retrieveOrthoDiagnosisList(patientForm.getVisitID());

				HttpServletRequest request = ServletActionContext.getRequest();

				ServletContext context = request.getServletContext();

				String realPath = context.getRealPath("/");

				JSONParser parser = new JSONParser();

				JSONArray diagnosisJSON = (JSONArray) parser
						.parse(new FileReader(realPath + File.separator + "ortho_charges.json"));

				for (Object jsonData : diagnosisJSON) {
					JSONObject data = (JSONObject) jsonData;

					// diagnoseList.put((String) data.get("rate"), (String) data.get("diagnosis"));
				}

			}
			diagnoseList = configurationUtil.getDiagnoseList();

			drugList = configurationUtil.getTradeNameList();

			InvestigationList = configurationUtil.getInvestigationList();

			frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

			// chargeTypeList = configurationUtil.getChargeTypeList();

			doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

			categoryList = configurationUtil.getCategoryList();

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Add General Physician Prescription Exception occurred",
					loginForm.getUserID());

			System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[0].trim());

			// Setting add opd page name value in pageName variable
			setPageName(formNameArray[0].trim());

			return ERROR;

		} else {

			addActionError(
					"Eexception occurred while adding prescription details. Please check server logs for more details.");

			String prescTabCheck = "enable";

			request.setAttribute("prescTabCheck", prescTabCheck);

			String dummy = "";

			request.setAttribute("lasteEnteredVisitList", "");

			request.setAttribute("lasteEnteredPrescList", dummy);

			request.setAttribute("lasteEnteredBillList", dummy);

			String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

			request.setAttribute("medicalCertiText", medicatCertificate);

			String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

			request.setAttribute("referralLetter", referralLetter);
			/*
			 * retrieving patientList which contains visit details
			 */
			if (formNameArray[0].trim().equals("generalOPDNew.jsp")
					|| formNameArray[0].trim().equals("telephonicNew.jsp")
					|| formNameArray[0].trim().equals("physicianOPDNew.jsp")
					|| formNameArray[0].trim().equals("generalPhysicianOPD.jsp")
					|| formNameArray[0].trim().equals("generalPhysicianGokhaleOPD.jsp")) {
				patientList = patientDAOInf.retrieveDefaultPatientDetails(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID(), patientForm.getAptID(),
						loginForm.getVisitTypeID());
			} else {
				String visitType = daoInf1.retrieveVisitTypeNameByID(loginForm.getVisitTypeID());
				System.out.println("visitype is ::" + visitType);

				patientList = patientDAOInf.retrieveLastEnteredVisitDetail(patientForm.getPatientID(),
						patientForm.getLastVisitID(), loginForm.getClinicID(), visitType);

			}

			hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

			request.setAttribute("apptID", patientForm.getAptID());

			boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

			if (visitCheck) {
				billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
			} else {
				billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
						loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
			}

			/*
			 * retrieving prescription list by visitID
			 */
			prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID());

			InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

			diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());
			/*
			 * retrieving symptomCheck list by visitID
			 */
			symptomList = patientDAOInf.retrievesymptomCheckList(patientForm.getVisitID());

			historyList = patientDAOInf.retrieveMedicalHistoryList(patientForm.getPatientID());

			medicationList = patientDAOInf.retrieveCurrentMedicationList(patientForm.getPatientID());

			complaintList = patientDAOInf.retrievecomplaintList(patientForm.getVisitID());

			/* Retrieve labReport List */
			labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
					loginForm.getClinicID());

			String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
			request.setAttribute("paymentType", paymentType);

			categoryList = configurationUtil.getCategoryList();

			// Checking if the CRF form is for Gokhale clinic, if so then load the diagnosis
			// from the json file else load the diagnosis from the PVDiagnosis table
			if (formNameArray[0].trim().equals("generalPhysicianGokhaleOPD.jsp")) {

				// Retrieving diagnosis list for the last visit ID
				orthoDiagnosisList = patientDAOInf.retrieveOrthoDiagnosisList(patientForm.getVisitID());

				HttpServletRequest request = ServletActionContext.getRequest();

				ServletContext context = request.getServletContext();

				String realPath = context.getRealPath("/");

				JSONParser parser = new JSONParser();

				JSONArray diagnosisJSON = (JSONArray) parser
						.parse(new FileReader(realPath + File.separator + "ortho_charges.json"));

				for (Object jsonData : diagnosisJSON) {
					JSONObject data = (JSONObject) jsonData;

					// diagnoseList.put((String) data.get("rate"), (String) data.get("diagnosis"));
				}

			}
			diagnoseList = configurationUtil.getDiagnoseList();

			drugList = configurationUtil.getTradeNameList();

			InvestigationList = configurationUtil.getInvestigationList();

			frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

			// chargeTypeList = configurationUtil.getChargeTypeList();

			doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Add General Physician Prescription Exception occurred",
					loginForm.getUserID());

			System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[0].trim());

			// Setting add opd page name value in pageName variable
			setPageName(formNameArray[0].trim());

			return ERROR;
		}
	}

	public String printGenPhyInvestigation() throws Exception {

		patientDAOInf = new PatientDAOImpl();

		serviceInf = new eDhanvantariServiceImpl();

		SMSSender smsSender = new SMSSender();

		EmailUtil emailUtil = new EmailUtil();

		ConvertToPDFUtil convertToPDFUtil = new ConvertToPDFUtil();

		LoginDAOInf daoInf = new LoginDAOImpl();

		ClinicDAOInf daoInf1 = new ClinicDAOImpl();

		RegistrationDAOinf registrationDAOinf = new RegistrationDAOImpl();

		PrescriptionManagementDAOInf managementDAOInf = new PrescriptionManagementDAOImpl();

		String accessKey = xmlUtil.getAccessKey();

		String secreteKey = xmlUtil.getSecreteKey();

		AWSS3Connect awss3Connect = new AWSS3Connect();

		// getting input file location from S3 bucket
		String s3reportFilePath = xmlUtil.getS3RDMLReportFilePath();

		// getting s3 bucket name
		String bucketName = util.getS3BucketName();

		// getting s3 bucket region
		String bucketRegion = xmlUtil.getS3BucketRegion();

		String s3LogoFilePath = xmlUtil.getS3RDMLFilePath();

		AWSCredentials credentials = new BasicAWSCredentials(accessKey, secreteKey);

		AmazonS3 s3 = AmazonS3ClientBuilder.standard().withCredentials(new AWSStaticCredentialsProvider(credentials))
				.withRegion(bucketRegion).build();

		/*
		 * Getting user role from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");

		String username = patientDAOInf.retrieveUsernameBYuserID(loginForm.getUserID());

		/*
		 * Getting form name to be display based on logged in User
		 */
		String[] formNameArray = loginForm.getOPDJSPName().split("&");

		patientForm.setClinicID(loginForm.getClinicID());

		String check1 = patientDAOInf.verifyReferralLetter(patientForm.getVisitID());

		request.setAttribute("referralLetterCheck", check1);

		String check = patientDAOInf.verifyMedicalCertificate(patientForm.getVisitID());

		request.setAttribute("medicalCertiCheck", check);

		message = serviceInf.addNewInvestigation(patientForm);

		if (message.equals("success")) {

			addActionMessage("Investigation added successfully.");

			String investTabCheck = "enable";

			request.setAttribute("investTabCheck", investTabCheck);

			HttpServletRequest request = ServletActionContext.getRequest();

			ServletContext context = request.getServletContext();

			String realPath = context.getRealPath("/");

			String pdfOutFIleName = patientForm.getFirstName() + patientForm.getLastName() + patientForm.getPatientID()
					+ "_" + patientForm.getVisitID() + "I.pdf";

			message = convertToPDFUtil.convertInvestigationPDF(patientForm.getPatientID(), patientForm.getVisitID(),
					realPath, pdfOutFIleName, loginForm.getClinicID(), loginForm.getPracticeID(), username, s3,
					s3LogoFilePath, bucketName);

			if (message.equals("success")) {

				File inputFile = new File(realPath + "/" + pdfOutFIleName);

				// Storing file to S3 RDML INPUT FILE location
				message = awss3Connect.pushFile(inputFile, pdfOutFIleName, bucketName, bucketRegion, s3reportFilePath);

				S3ObjectInputStream s3ObjectInputStream = s3
						.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, pdfOutFIleName))
						.getObjectContent();

				patientForm.setFileInputStream(s3ObjectInputStream);
				patientForm.setFileName(pdfOutFIleName);

			}

			/*
			 * retrieving patientList which contains visit details
			 */
			if (formNameArray[0].trim().equals("generalOPDNew.jsp")
					|| formNameArray[0].trim().equals("telephonicNew.jsp")
					|| formNameArray[0].trim().equals("physicianOPDNew.jsp")
					|| formNameArray[0].trim().equals("generalPhysicianOPD.jsp")
					|| formNameArray[0].trim().equals("generalPhysicianGokhaleOPD.jsp")) {

				patientList = patientDAOInf.retrieveDefaultPatientDetails(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID(), patientForm.getAptID(),
						loginForm.getVisitTypeID());
			} else {
				String visitType = daoInf1.retrieveVisitTypeNameByID(loginForm.getVisitTypeID());

				patientList = patientDAOInf.retrieveLastEnteredVisitDetail(patientForm.getPatientID(),
						patientForm.getLastVisitID(), loginForm.getClinicID(), visitType);
			}

			boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

			if (visitCheck) {
				billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
			} else {
				billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
						loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
			}

			/* Retrieve labReport List */
			labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
					loginForm.getClinicID());

			String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
			request.setAttribute("paymentType", paymentType);

			String dummy = "success";

			request.setAttribute("lasteEnteredVisitList", "");

			request.setAttribute("lasteEnteredPrescList", dummy);

			request.setAttribute("lasteEnteredBillList", "");

			String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

			request.setAttribute("medicalCertiText", medicatCertificate);

			String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

			request.setAttribute("referralLetter", referralLetter);

			/*
			 * retrieving prescription list by visitID
			 */
			prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID());

			InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

			diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());
			/*
			 * retrieving symptomCheck list by visitID
			 */
			symptomList = patientDAOInf.retrievesymptomCheckList(patientForm.getVisitID());

			historyList = patientDAOInf.retrieveMedicalHistoryList(patientForm.getPatientID());

			medicationList = patientDAOInf.retrieveCurrentMedicationList(patientForm.getPatientID());

			complaintList = patientDAOInf.retrievecomplaintList(patientForm.getVisitID());

			diagnoseList = configurationUtil.getDiagnoseList();

			request.setAttribute("apptID", patientForm.getAptID());

			drugList = configurationUtil.getTradeNameList();

			InvestigationList = configurationUtil.getInvestigationList();

			frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

			doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

			categoryList = configurationUtil.getCategoryList();

			hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Add General Physician Investigation", loginForm.getUserID());

			System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[0].trim());

			// Setting add opd page name value in pageName variable
			setPageName(formNameArray[0].trim());

			return SUCCESS;

		} else if (message.equals("noVisit")) {

			addActionError("No visit added. Please add visit first.");

			String investTabCheck = "enable";

			request.setAttribute("investTabCheck", investTabCheck);

			String dummy = "";

			request.setAttribute("lasteEnteredVisitList", dummy);

			request.setAttribute("lasteEnteredPrescList", dummy);

			request.setAttribute("lasteEnteredBillList", dummy);

			String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

			request.setAttribute("medicalCertiText", medicatCertificate);

			String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

			request.setAttribute("referralLetter", referralLetter);

			/*
			 * retrieving patientList which contains visit details
			 */
			if (formNameArray[0].trim().equals("generalOPDNew.jsp")
					|| formNameArray[0].trim().equals("telephonicNew.jsp")
					|| formNameArray[0].trim().equals("physicianOPDNew.jsp")
					|| formNameArray[0].trim().equals("generalPhysicianOPD.jsp")
					|| formNameArray[0].trim().equals("generalPhysicianGokhaleOPD.jsp")) {

				patientList = patientDAOInf.retrieveDefaultPatientDetails(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID(), patientForm.getAptID(),
						loginForm.getVisitTypeID());
			} else {
				String visitType = daoInf1.retrieveVisitTypeNameByID(loginForm.getVisitTypeID());
				System.out.println("visitype is ::" + visitType);

				patientList = patientDAOInf.retrieveLastEnteredVisitDetail(patientForm.getPatientID(),
						patientForm.getLastVisitID(), loginForm.getClinicID(), visitType);

			}
			hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

			/*
			 * retrieving prescription list by visitID
			 */
			prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID());

			InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

			diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());
			/*
			 * retrieving symptomCheck list by visitID
			 */
			symptomList = patientDAOInf.retrievesymptomCheckList(patientForm.getVisitID());

			historyList = patientDAOInf.retrieveMedicalHistoryList(patientForm.getPatientID());

			medicationList = patientDAOInf.retrieveCurrentMedicationList(patientForm.getPatientID());

			complaintList = patientDAOInf.retrievecomplaintList(patientForm.getVisitID());

			boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

			if (visitCheck) {
				billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
			} else {
				billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
						loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
			}

			/* Retrieve labReport List */
			labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
					loginForm.getClinicID());

			String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
			request.setAttribute("paymentType", paymentType);

			request.setAttribute("apptID", patientForm.getAptID());

			diagnoseList = configurationUtil.getDiagnoseList();

			drugList = configurationUtil.getTradeNameList();

			InvestigationList = configurationUtil.getInvestigationList();

			frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

			// chargeTypeList = configurationUtil.getChargeTypeList();

			doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

			categoryList = configurationUtil.getCategoryList();

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Add General Physician Investigation Exception occurred",
					loginForm.getUserID());

			System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[0].trim());

			// Setting add opd page name value in pageName variable
			setPageName(formNameArray[0].trim());

			return ERROR;

		} else {

			addActionError(
					"Eexception occurred while adding Investigation details. Please check server logs for more details.");

			String investTabCheck = "enable";

			request.setAttribute("investTabCheck", investTabCheck);

			String dummy = "";

			request.setAttribute("lasteEnteredVisitList", "");

			request.setAttribute("lasteEnteredPrescList", dummy);

			request.setAttribute("lasteEnteredBillList", dummy);

			String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

			request.setAttribute("medicalCertiText", medicatCertificate);

			String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

			request.setAttribute("referralLetter", referralLetter);
			/*
			 * retrieving patientList which contains visit details
			 */
			if (formNameArray[0].trim().equals("generalOPDNew.jsp")
					|| formNameArray[0].trim().equals("telephonicNew.jsp")
					|| formNameArray[0].trim().equals("physicianOPDNew.jsp")
					|| formNameArray[0].trim().equals("generalPhysicianOPD.jsp")
					|| formNameArray[0].trim().equals("generalPhysicianGokhaleOPD.jsp")) {

				patientList = patientDAOInf.retrieveDefaultPatientDetails(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID(), patientForm.getAptID(),
						loginForm.getVisitTypeID());
			} else {
				String visitType = daoInf1.retrieveVisitTypeNameByID(loginForm.getVisitTypeID());
				System.out.println("visitype is ::" + visitType);

				patientList = patientDAOInf.retrieveLastEnteredVisitDetail(patientForm.getPatientID(),
						patientForm.getLastVisitID(), loginForm.getClinicID(), visitType);

			}

			hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

			request.setAttribute("apptID", patientForm.getAptID());

			boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

			if (visitCheck) {
				billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
			} else {
				billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
						loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
			}

			/*
			 * retrieving prescription list by visitID
			 */
			prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID());

			InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

			diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());
			/*
			 * retrieving symptomCheck list by visitID
			 */
			symptomList = patientDAOInf.retrievesymptomCheckList(patientForm.getVisitID());

			historyList = patientDAOInf.retrieveMedicalHistoryList(patientForm.getPatientID());

			medicationList = patientDAOInf.retrieveCurrentMedicationList(patientForm.getPatientID());

			complaintList = patientDAOInf.retrievecomplaintList(patientForm.getVisitID());

			/* Retrieve labReport List */
			labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
					loginForm.getClinicID());

			String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
			request.setAttribute("paymentType", paymentType);

			categoryList = configurationUtil.getCategoryList();

			diagnoseList = configurationUtil.getDiagnoseList();

			drugList = configurationUtil.getTradeNameList();

			InvestigationList = configurationUtil.getInvestigationList();

			frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

			// chargeTypeList = configurationUtil.getChargeTypeList();

			doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Add General Physician Investigation Exception occurred",
					loginForm.getUserID());

			System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[0].trim());

			// Setting add opd page name value in pageName variable
			setPageName(formNameArray[0].trim());

			return ERROR;

		}
	}

	/**
	 * 
	 * @return
	 * @throws Exception
	 */
	public String printGenPhyBilling() throws Exception {
		/*
		 * Getting user role from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");

		patientDAOInf = new PatientDAOImpl();

		LoginDAOInf daoInf = new LoginDAOImpl();

		RegistrationDAOinf registrationDAOinf = new RegistrationDAOImpl();

		System.out.println("Last visit ID : " + patientForm.getLastVisitID());

		ConvertToPDFUtil convertToPDFUtil = new ConvertToPDFUtil();

		String accessKey = xmlUtil.getAccessKey();

		String secreteKey = xmlUtil.getSecreteKey();

		AWSS3Connect awss3Connect = new AWSS3Connect();

		// getting input file location from S3 bucket
		String s3reportFilePath = xmlUtil.getS3RDMLReportFilePath();

		// getting s3 bucket name
		String bucketName = util.getS3BucketName();

		// getting s3 bucket region
		String bucketRegion = xmlUtil.getS3BucketRegion();

		String s3LogoFilePath = xmlUtil.getS3RDMLFilePath();

		AWSCredentials credentials = new BasicAWSCredentials(accessKey, secreteKey);

		AmazonS3 s3 = AmazonS3ClientBuilder.standard().withCredentials(new AWSStaticCredentialsProvider(credentials))
				.withRegion(bucketRegion).build();

		HttpServletRequest request = ServletActionContext.getRequest();

		ServletContext context = request.getServletContext();

		boolean visitCheck1 = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

		if (visitCheck1) {
			billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
		} else {
			billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
					loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
		}

		String username = patientDAOInf.retrieveUsernameBYuserID(loginForm.getUserID());

		String check1 = patientDAOInf.verifyReferralLetter(patientForm.getVisitID());

		request.setAttribute("referralLetterCheck", check1);

		String check = patientDAOInf.verifyMedicalCertificate(patientForm.getVisitID());

		request.setAttribute("medicalCertiCheck", check);

		orthoBillItemList = patientDAOInf.retrieveOrthoBillingItemList(patientForm.getVisitID());
		/*
		 * verify whther billing has been added for the current visitID, if so then only
		 * proceed further to print prescription else give error msg saying no
		 * prescription added for this visit
		 */
		boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

		if (visitCheck) {

			String realPath = context.getRealPath("/");
			System.out.println("Real path is :: " + realPath);

			// String pdfOutFIleName = realPath + patientForm.getFirstName() +
			// patientForm.getLastName()
			String pdfOutFIleName = patientForm.getFirstName() + patientForm.getLastName() + patientForm.getPatientID()
					+ "_" + patientForm.getVisitID() + "b.pdf";

			message = convertToPDFUtil.convertBillingPDF(patientForm.getPatientID(), patientForm.getVisitID(), realPath,
					pdfOutFIleName, loginForm.getClinicID(), loginForm.getPracticeID(), username, s3, s3LogoFilePath,
					bucketName);
			if (message.equalsIgnoreCase("success")) {

				File inputFile = new File(realPath + "/" + pdfOutFIleName);

				// Storing file to S3 RDML INPUT FILE location
				message = awss3Connect.pushFile(inputFile, pdfOutFIleName, bucketName, bucketRegion, s3reportFilePath);

				S3ObjectInputStream s3ObjectInputStream = s3
						.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, pdfOutFIleName))
						.getObjectContent();

				patientForm.setFileInputStream(s3ObjectInputStream);

				patientForm.setFileName(pdfOutFIleName);

				request.setAttribute("PDFOutFileName", pdfOutFIleName);

				String billingTabCheck = "enable";

				request.setAttribute("billingTabCheck", billingTabCheck);

				String dummy = "";

				request.setAttribute("lasteEnteredVisitList", dummy);

				request.setAttribute("lasteEnteredPrescList", dummy);

				String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

				request.setAttribute("medicalCertiText", medicatCertificate);

				String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

				request.setAttribute("referralLetter", referralLetter);
				/*
				 * retrieving patientList which contains visit details
				 */
				patientList = patientDAOInf.retrieveDefaultPatientDetails(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID(), patientForm.getAptID(),
						loginForm.getVisitTypeID());

				/* Retrieve labReport List */
				labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
						loginForm.getClinicID());

				/*
				 * retrieving prescription list by visitID
				 */
				prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID());

				diagnoseList = configurationUtil.getDiagnoseList();

				request.setAttribute("apptID", patientForm.getAptID());

				drugList = configurationUtil.getTradeNameList();

				InvestigationList = configurationUtil.getInvestigationList();

				frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

				categoryList = configurationUtil.getCategoryList();
				// chargeTypeList = configurationUtil.getChargeTypeList();

				doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

				hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

				// Inserting values into Audit table
				daoInf.insertAudit(request.getRemoteAddr(), "Add General Physician Bill", loginForm.getUserID());

				/*
				 * Getting form name to be display based on logged in User
				 */
				String[] formNameArray = loginForm.getOPDJSPName().split("&");

				System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[0].trim());

				// Setting add opd page name value in pageName variable
				setPageName(formNameArray[0].trim());

				return SUCCESS;

			} else {
				addActionError("Failed to print billing check server logs for more details.");

				String billingTabCheck = "enable";

				request.setAttribute("billingTabCheck", billingTabCheck);

				String dummy = "";

				request.setAttribute("lasteEnteredVisitList", dummy);

				request.setAttribute("lasteEnteredPrescList", dummy);

				String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

				request.setAttribute("medicalCertiText", medicatCertificate);

				String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

				request.setAttribute("referralLetter", referralLetter);
				/*
				 * retrieving patientList which contains visit details
				 */
				patientList = patientDAOInf.retrieveDefaultPatientDetails(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID(), patientForm.getAptID(),
						loginForm.getVisitTypeID());

				/* Retrieve labReport List */
				labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
						loginForm.getClinicID());
				/*
				 * retrieving prescription list by visitID
				 */
				prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID());

				diagnoseList = configurationUtil.getDiagnoseList();

				request.setAttribute("apptID", patientForm.getAptID());

				drugList = configurationUtil.getTradeNameList();

				InvestigationList = configurationUtil.getInvestigationList();

				frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

				categoryList = configurationUtil.getCategoryList();
				// chargeTypeList = configurationUtil.getChargeTypeList();

				doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

				hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

				// Inserting values into Audit table
				daoInf.insertAudit(request.getRemoteAddr(), "Add General Physician Bill Exception Occurred.",
						loginForm.getUserID());

				/*
				 * Getting form name to be display based on logged in User
				 */
				String[] formNameArray = loginForm.getOPDJSPName().split("&");

				System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[0].trim());

				// Setting add opd page name value in pageName variable
				setPageName(formNameArray[0].trim());

				return ERROR;
			}

		} else {
			addActionError("No bill added for current visit. Please add bill first.");

			String billingTabCheck = "enable";

			request.setAttribute("billingTabCheck", billingTabCheck);

			String dummy = "";

			request.setAttribute("lasteEnteredVisitList", dummy);

			request.setAttribute("lasteEnteredPrescList", dummy);

			/*
			 * retrieving patientList which contains visit details
			 */
			patientList = patientDAOInf.retrieveDefaultPatientDetails(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID(), patientForm.getAptID(),
					loginForm.getVisitTypeID());

			/* Retrieve labReport List */
			labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
					loginForm.getClinicID());
			/*
			 * retrieving prescription list by visitID
			 */
			prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID());

			diagnoseList = configurationUtil.getDiagnoseList();

			request.setAttribute("apptID", patientForm.getAptID());

			drugList = configurationUtil.getTradeNameList();

			InvestigationList = configurationUtil.getInvestigationList();

			frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

			categoryList = configurationUtil.getCategoryList();

			// chargeTypeList = configurationUtil.getChargeTypeList();

			doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

			hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Add General Physician Bill Exception Occurred.",
					loginForm.getUserID());

			/*
			 * Getting form name to be display based on logged in User
			 */
			String[] formNameArray = loginForm.getOPDJSPName().split("&");

			System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[0].trim());

			// Setting add opd page name value in pageName variable
			setPageName(formNameArray[0].trim());

			return ERROR;
		}

	}

	/**
	 * 
	 * @return
	 * @throws Exception
	 */
	public String updatePrintGenPhyVisit() throws Exception {
		/*
		 * Getting user role from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");
		serviceInf = new eDhanvantariServiceImpl();
		patientDAOInf = new PatientDAOImpl();
		LoginDAOInf daoInf = new LoginDAOImpl();
		ClinicDAOInf daoInf1 = new ClinicDAOImpl();
		ConvertToPDFUtil convertToPDFUtil = new ConvertToPDFUtil();
		RegistrationDAOinf registrationDAOinf = new RegistrationDAOImpl();
		PrescriptionManagementDAOInf managementDAOInf = new PrescriptionManagementDAOImpl();

		String accessKey = xmlUtil.getAccessKey();

		String secreteKey = xmlUtil.getSecreteKey();

		AWSS3Connect awss3Connect = new AWSS3Connect();

		// getting input file location from S3 bucket
		String s3reportFilePath = xmlUtil.getS3RDMLReportFilePath();

		// getting s3 bucket name
		String bucketName = util.getS3BucketName();

		// getting s3 bucket region
		String bucketRegion = xmlUtil.getS3BucketRegion();

		String s3LogoFilePath = xmlUtil.getS3RDMLFilePath();

		AWSCredentials credentials = new BasicAWSCredentials(accessKey, secreteKey);

		AmazonS3 s3 = AmazonS3ClientBuilder.standard().withCredentials(new AWSStaticCredentialsProvider(credentials))
				.withRegion(bucketRegion).build();

		System.out.println("userid loginform is::" + loginForm.getUserID());
		String username = patientDAOInf.retrieveUsernameBYuserID(loginForm.getUserID());
		System.out.println("username loginform is ::" + username);

		String check1 = patientDAOInf.verifyReferralLetter(patientForm.getVisitID());
		System.out.println("check1 value in action:" + check1);
		request.setAttribute("referralLetterCheck", check1);

		String check = patientDAOInf.verifyMedicalCertificate(patientForm.getVisitID());
		System.out.println("check value in action:" + check);
		request.setAttribute("medicalCertiCheck", check);

		message = serviceInf.editGenPhyVisit(patientForm);

		if (message.equalsIgnoreCase("success")) {
			addActionMessage("Successfully updated Visit details.");

			String realPath = request.getServletContext().getRealPath("/");

			System.out.println("realPath: " + realPath);

			// String pdfOutFIleName = reportFilePath + patientForm.getFirstName() +
			// patientForm.getLastName()
			String pdfOutFIleName = patientForm.getFirstName() + patientForm.getLastName() + patientForm.getPatientID()
					+ "_" + patientForm.getVisitID() + "opd.pdf";

			String visitType = daoInf1.retrieveVisitTypeNameByID(loginForm.getVisitTypeID());
			System.out.println("visitype is ::" + visitType);

			message = convertToPDFUtil.convertGenPhyVisitPDF(patientForm.getPatientID(), patientForm.getVisitID(),
					realPath, pdfOutFIleName, visitType, loginForm.getPracticeID(), username, s3, s3LogoFilePath,
					bucketName);
			if (message.equalsIgnoreCase("success")) {

				File inputFile = new File(realPath + "/" + pdfOutFIleName);

				// Storing file to S3 RDML INPUT FILE location
				message = awss3Connect.pushFile(inputFile, pdfOutFIleName, bucketName, bucketRegion, s3reportFilePath);

				S3ObjectInputStream s3ObjectInputStream = s3
						.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, pdfOutFIleName))
						.getObjectContent();

				patientForm.setFileInputStream(s3ObjectInputStream);

				patientForm.setFileName(pdfOutFIleName);

				/*
				 * Verifying whether visit exist for the patient or not, if not then disable
				 * View Last Visit button
				 */
				int patientVisitExistCheck = patientDAOInf.verifyVisitDetails(patientForm.getPatientID(),
						loginForm.getClinicID());

				String disableButtonCheck = "enable";
				if (patientVisitExistCheck == 0) {
					disableButtonCheck = "disable";
				}

				request.setAttribute("disableButtonCheck", disableButtonCheck);

				/*
				 * Retrieving patient age based on patientID
				 */
				String patientAge = patientDAOInf.retrievePatientAgeByPatientID(patientForm.getPatientID());

				request.setAttribute("patientAge", patientAge);

				/*
				 * retrieving patient gender based on patientID
				 */
				String patientGender = patientDAOInf.retrievePatientGenderByPatientID(patientForm.getPatientID());

				request.setAttribute("gender", patientGender);

				/*
				 * retrieving patientList which contains visit details
				 */

				patientList = patientDAOInf.retrieveDefaultPatientDetails(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID(), patientForm.getAptID(),
						loginForm.getVisitTypeID());

				boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

				if (visitCheck) {
					billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
				} else {
					billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
							loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
				}

				/* Retrieve labReport List */
				labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
						loginForm.getClinicID());

				String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
				request.setAttribute("paymentType", paymentType);

				String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

				request.setAttribute("medicalCertiText", medicatCertificate);

				String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

				request.setAttribute("referralLetter", referralLetter);
				/*
				 * retrieving prescription list by visitID
				 */
				prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID());

				InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

				diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());
				/*
				 * retrieving symptomCheck list by visitID
				 */
				symptomList = patientDAOInf.retrievesymptomCheckList(patientForm.getVisitID());

				complaintList = patientDAOInf.retrievecomplaintList(patientForm.getVisitID());

				historyList = patientDAOInf.retrieveMedicalHistoryList(patientForm.getPatientID());

				medicationList = patientDAOInf.retrieveCurrentMedicationList(patientForm.getPatientID());

				diagnoseList = configurationUtil.getDiagnoseList();

				request.setAttribute("apptID", patientForm.getAptID());

				drugList = configurationUtil.getTradeNameList();

				InvestigationList = configurationUtil.getInvestigationList();

				frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

				doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

				categoryList = configurationUtil.getCategoryList();

				hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

				// Inserting values into Audit table
				daoInf.insertAudit(request.getRemoteAddr(), "Edit General Physician Prescription",
						loginForm.getUserID());

				String[] formNameArray = loginForm.getOPDJSPName().split("&");

				System.out.println("Edit OPD JSP Page name for logged in user is ::: " + formNameArray[1].trim());

				// Setting add opd page name value in pageName variable
				setPageName(formNameArray[1].trim());

				return SUCCESS;

			} else {
				addActionError("Failed to create OPD visit PDF.Please check server logs for more details.");

				lastEneteredOpticianList = patientDAOInf.retrieveLastOpticianDetails(patientForm.getLastVisitID());

				patientList = patientDAOInf.retrieveExistingVisitList(patientForm.getPatientID(),
						patientForm.getVisitID());

				boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

				if (visitCheck) {
					billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
				} else {
					billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
							loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
				}

				/*
				 * retrieving prescription list by visitID
				 */
				prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
						patientForm.getVisitID());

				/* Retrieve labReport List */
				labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
						loginForm.getClinicID());
				/*
				 * retrieving symptomCheck list by visitID
				 */
				symptomList = patientDAOInf.retrievesymptomCheckList(patientForm.getVisitID());

				complaintList = patientDAOInf.retrievecomplaintList(patientForm.getVisitID());

				historyList = patientDAOInf.retrieveMedicalHistoryList(patientForm.getPatientID());

				medicationList = patientDAOInf.retrieveCurrentMedicationList(patientForm.getPatientID());

				String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

				request.setAttribute("medicalCertiText", medicatCertificate);

				String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

				request.setAttribute("referralLetter", referralLetter);

				request.setAttribute("apptID", patientForm.getAptID());

				doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

				diagnoseList = configurationUtil.getDiagnoseList();

				resayuDiagnosisList = configurationUtil.getDiagnoseList();

				resayuDiagnosisList.put("Other", "Other");

				drugList = configurationUtil.getTradeNameList();

				InvestigationList = configurationUtil.getInvestigationList();

				InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

				diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());

				frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

				categoryList = configurationUtil.getCategoryList();

				request.setAttribute("opticianFloatCheck", "empty");

				/*
				 * Getting form name to be display based on logged in User
				 */
				String[] formNameArray = loginForm.getOPDJSPName().split("&");

				System.out.println("Update General physician Visit JSP Page name for logged in user is ::: "
						+ formNameArray[1].trim());

				// Setting add opd page name value in pageName variable
				setPageName(formNameArray[1].trim());

			}
			return SUCCESS;

		} else {
			addActionError("Failed to update Visit details. Please check logs for more details.");

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Edit General Physician Visit Exception occurred",
					loginForm.getUserID());

			/*
			 * Verifying whether visit exist for the patient or not, if not then disable
			 * View Last Visit button
			 */
			int patientVisitExistCheck = patientDAOInf.verifyVisitDetails(patientForm.getPatientID(),
					loginForm.getClinicID());

			String disableButtonCheck = "enable";
			if (patientVisitExistCheck == 0) {
				disableButtonCheck = "disable";
			}

			request.setAttribute("disableButtonCheck", disableButtonCheck);

			request.setAttribute("apptID", patientForm.getAptID());

			/*
			 * Retrieving patient age based on patientID
			 */
			String patientAge = patientDAOInf.retrievePatientAgeByPatientID(patientForm.getPatientID());

			request.setAttribute("patientAge", patientAge);

			/*
			 * retrieving patient gender based on patientID
			 */
			String patientGender = patientDAOInf.retrievePatientGenderByPatientID(patientForm.getPatientID());

			request.setAttribute("gender", patientGender);

			hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

			patientList = patientDAOInf.retrieveDefaultPatientDetails(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID(), patientForm.getAptID(),
					loginForm.getVisitTypeID());

			boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

			if (visitCheck) {
				billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
			} else {
				billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
						loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
			}

			/*
			 * retrieving prescription list by visitID
			 */
			prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID());

			/* Retrieve labReport List */
			labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
					loginForm.getClinicID());
			/*
			 * retrieving symptomCheck list by visitID
			 */
			symptomList = patientDAOInf.retrievesymptomCheckList(patientForm.getVisitID());

			complaintList = patientDAOInf.retrievecomplaintList(patientForm.getVisitID());

			String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

			request.setAttribute("medicalCertiText", medicatCertificate);

			String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

			request.setAttribute("referralLetter", referralLetter);

			doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

			diagnoseList = configurationUtil.getDiagnoseList();

			resayuDiagnosisList = configurationUtil.getDiagnoseList();

			resayuDiagnosisList.put("Other", "Other");

			drugList = configurationUtil.getTradeNameList();

			InvestigationList = configurationUtil.getInvestigationList();

			InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

			diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());

			historyList = patientDAOInf.retrieveMedicalHistoryList(patientForm.getPatientID());

			medicationList = patientDAOInf.retrieveCurrentMedicationList(patientForm.getPatientID());

			frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

			categoryList = configurationUtil.getCategoryList();

			/*
			 * Getting form name to be display based on logged in User
			 */
			String[] formNameArray = loginForm.getOPDJSPName().split("&");

			System.out.println("Edit OPD JSP Page name for logged in user is ::: " + formNameArray[1].trim());

			// Setting Edit opd page name value in pageName variable
			setPageName(formNameArray[1].trim());

			return ERROR;
		}

	}

	public String downloadCRF() throws Exception {
		ClinicDAOInf daoInf1 = new ClinicDAOImpl();

		ConvertToPDFUtil convertToPDFUtil = new ConvertToPDFUtil();

		String accessKey = xmlUtil.getAccessKey();

		String secreteKey = xmlUtil.getSecreteKey();

		AWSS3Connect awss3Connect = new AWSS3Connect();

		// getting input file location from S3 bucket
		String s3reportFilePath = xmlUtil.getS3RDMLReportFilePath();

		// getting s3 bucket name
		String bucketName = util.getS3BucketName();

		// getting s3 bucket region
		String bucketRegion = xmlUtil.getS3BucketRegion();

		String s3LogoFilePath = xmlUtil.getS3RDMLFilePath();

		AWSCredentials credentials = new BasicAWSCredentials(accessKey, secreteKey);

		AmazonS3 s3 = AmazonS3ClientBuilder.standard().withCredentials(new AWSStaticCredentialsProvider(credentials))
				.withRegion(bucketRegion).build();

		LoginForm loginForm = (LoginForm) session.get("USER");

		System.out.println("form name:" + patientForm.getFormName() + "  visitid:" + patientForm.getVisitID());

		HttpServletRequest request = ServletActionContext.getRequest();

		ServletContext context = request.getServletContext();

		String realPath = context.getRealPath("/");
		System.out.println("Real path is :: " + realPath);

		// String pdfOutFIleName = realPath + loginForm.getFirstName() +
		// loginForm.getLastName() + loginForm.getPatientID()
		String pdfOutFIleName = loginForm.getFirstName() + loginForm.getLastName() + loginForm.getPatientID() + "_"
				+ patientForm.getVisitID() + "opd.pdf";

		String visitType = daoInf1.retrieveVisitTypeNameByID(loginForm.getVisitTypeID());

		String formName = patientForm.getFormName();

		if (formName.equals("DefaultOpthalmologyOPD")) {

			message = convertToPDFUtil.convertOPDPDF(patientForm.getVisitID(), loginForm.getPatientID(),
					loginForm.getClinicID(), realPath, pdfOutFIleName, visitType, s3, s3LogoFilePath, bucketName, null);

		} else if (formName.equals("DefaultGeneralOPD") || formName.equals("telephonic")) {

			message = convertToPDFUtil.convertGenPhyVisitPDF(loginForm.getPatientID(), patientForm.getVisitID(),
					realPath, pdfOutFIleName, visitType, loginForm.getPracticeID(), patientForm.getFirstName(), s3,
					s3LogoFilePath, bucketName);
		}

		if (message.equalsIgnoreCase("success")) {

			System.out.println("out File name from action ::::: " + pdfOutFIleName);

			File fileToDownload = new File(realPath + "/" + pdfOutFIleName);

			// Storing file to S3 RDML INPUT FILE location
			message = awss3Connect.pushFile(fileToDownload, pdfOutFIleName, bucketName, bucketRegion, s3reportFilePath);

			S3ObjectInputStream s3ObjectInputStream = s3
					.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, pdfOutFIleName))
					.getObjectContent();

			patientForm.setFileInputStream(s3ObjectInputStream);

			patientForm.setFileName(pdfOutFIleName);
		}

		return SUCCESS;
	}

	public String downloadPRESC() throws Exception {

		ClinicDAOInf daoInf1 = new ClinicDAOImpl();

		ConvertToPDFUtil convertToPDFUtil = new ConvertToPDFUtil();

		String accessKey = xmlUtil.getAccessKey();

		String secreteKey = xmlUtil.getSecreteKey();

		AWSS3Connect awss3Connect = new AWSS3Connect();

		// getting input file location from S3 bucket
		String s3reportFilePath = xmlUtil.getS3RDMLReportFilePath();

		// getting s3 bucket name
		String bucketName = util.getS3BucketName();

		// getting s3 bucket region
		String bucketRegion = xmlUtil.getS3BucketRegion();

		String s3LogoFilePath = xmlUtil.getS3RDMLFilePath();

		AWSCredentials credentials = new BasicAWSCredentials(accessKey, secreteKey);

		AmazonS3 s3 = AmazonS3ClientBuilder.standard().withCredentials(new AWSStaticCredentialsProvider(credentials))
				.withRegion(bucketRegion).build();

		LoginForm loginForm = (LoginForm) session.get("USER");

		System.out.println("form name:" + patientForm.getFormName() + "  visitid:" + patientForm.getVisitID());

		HttpServletRequest request = ServletActionContext.getRequest();

		ServletContext context = request.getServletContext();

		String realPath = context.getRealPath("/");

		// String pdfOutFIleName = realPath + loginForm.getFirstName() +
		// loginForm.getLastName() + loginForm.getPatientID()
		String pdfOutFIleName = loginForm.getFirstName() + loginForm.getLastName() + loginForm.getPatientID() + "_"
				+ patientForm.getVisitID() + "p.pdf";

		message = convertToPDFUtil.convertPrescriptionPDF(loginForm.getPatientID(), patientForm.getVisitID(), realPath,
				pdfOutFIleName, loginForm.getClinicID(), loginForm.getPracticeID(), patientForm.getFirstName(), s3,
				s3LogoFilePath, bucketName);

		if (message.equals("success")) {

			System.out.println("out File name from action ::::: " + pdfOutFIleName);

			File fileToDownload = new File(realPath + "/" + pdfOutFIleName);

			// Storing file to S3 RDML INPUT FILE location
			message = awss3Connect.pushFile(fileToDownload, pdfOutFIleName, bucketName, bucketRegion, s3reportFilePath);

			S3ObjectInputStream s3ObjectInputStream = s3
					.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, pdfOutFIleName))
					.getObjectContent();

			patientForm.setFileInputStream(s3ObjectInputStream);
			patientForm.setFileName(pdfOutFIleName);
		}
		return SUCCESS;
	}

	public String downloadBILL() throws Exception {

		ClinicDAOInf daoInf1 = new ClinicDAOImpl();

		ConvertToPDFUtil convertToPDFUtil = new ConvertToPDFUtil();

		String accessKey = xmlUtil.getAccessKey();

		String secreteKey = xmlUtil.getSecreteKey();

		AWSS3Connect awss3Connect = new AWSS3Connect();

		// getting input file location from S3 bucket
		String s3reportFilePath = xmlUtil.getS3RDMLReportFilePath();

		// getting s3 bucket name
		String bucketName = util.getS3BucketName();

		// getting s3 bucket region
		String bucketRegion = xmlUtil.getS3BucketRegion();

		String s3LogoFilePath = xmlUtil.getS3RDMLFilePath();

		AWSCredentials credentials = new BasicAWSCredentials(accessKey, secreteKey);

		AmazonS3 s3 = AmazonS3ClientBuilder.standard().withCredentials(new AWSStaticCredentialsProvider(credentials))
				.withRegion(bucketRegion).build();

		orthoBillItemList = patientDAOInf.retrieveOrthoBillingItemList(patientForm.getVisitID());

		LoginForm loginForm = (LoginForm) session.get("USER");

		HttpServletRequest request = ServletActionContext.getRequest();

		ServletContext context = request.getServletContext();

		String realPath = context.getRealPath("/");

		System.out.println("Real path is :: " + realPath);

		String pdfOutFIleName = loginForm.getFirstName() + loginForm.getLastName() + loginForm.getPatientID() + "_"
				+ patientForm.getVisitID() + "p.pdf";

		message = convertToPDFUtil.convertBillingPDF(loginForm.getPatientID(), patientForm.getVisitID(), realPath,
				pdfOutFIleName, loginForm.getClinicID(), loginForm.getPracticeID(), patientForm.getFirstName(), s3,
				s3LogoFilePath, bucketName);

		if (message.equalsIgnoreCase("success")) {

			System.out.println("out File name from action ::::: " + pdfOutFIleName);

			File fileToDownload = new File(realPath + "/" + pdfOutFIleName);

			// Storing file to S3 RDML INPUT FILE location
			message = awss3Connect.pushFile(fileToDownload, pdfOutFIleName, bucketName, bucketRegion, s3reportFilePath);

			S3ObjectInputStream s3ObjectInputStream = s3
					.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, pdfOutFIleName))
					.getObjectContent();

			patientForm.setFileInputStream(s3ObjectInputStream);
			patientForm.setFileName(pdfOutFIleName);
		}
		return SUCCESS;

	}

	public void viewCRF() throws Exception {

		patientDAOInf = new PatientDAOImpl();

		LoginDAOInf daoInf = new LoginDAOImpl();

		JSONObject values = new JSONObject();

		JSONArray array = new JSONArray();

		values = new JSONObject();

		JSONObject object = new JSONObject();

		response.setCharacterEncoding("UTF-8");

		int check = 0;

		LoginForm loginForm = (LoginForm) session.get("USER");

		try {

			if (patientForm.getFormName().equals("DefaultGeneralOPD")
					|| patientForm.getFormName().equals("telephonic")) {

				object = new JSONObject();

				patientList = patientDAOInf.retrieveDefaultPatientDetails(loginForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID(), patientForm.getAptID(),
						patientForm.getVisitTypeID());

				for (PatientForm form : patientList) {

					object.put("patientID", form.getPatientID());
					object.put("patientName", form.getFirstName() + " " + form.getLastName());
					object.put("age", form.getAge());
					object.put("regNo", form.getRegistrationNo());
					object.put("mobile", form.getMobile());
					object.put("gender", form.getGender());
					object.put("bloodGroup", form.getBloodGroup());
					object.put("visitDate", form.getFirstVisitDate());
					object.put("cancerType", form.getCancerType());

					object.put("smoking", form.getPersonalHistorySmoking());
					object.put("smokingDetails", form.getPersonalHistorySmokingDetails());
					object.put("alcohol", form.getPersonalHistoryAlcohol());
					object.put("alcoholDetails", form.getPersonalHistoryAlcoholDetails());
					object.put("tobacco", form.getPersonalHistoryTobacco());
					object.put("tobaccoDetails", form.getPersonalHistoryTobaccoDetails());
					object.put("foodChoice", form.getPersonalHistoryFoodChoice());
					object.put("foodChoiceDetails", form.getPersonalHistoryFoodChoiceDetails());

					object.put("weight", form.getWeight());
					object.put("pulse", form.getOEPulse());
					object.put("systolicBP", form.getOEBPSys());
					object.put("diastolicBP", form.getOEBPDia());
				}

				complaintList = patientDAOInf.retrievecomplaintList(patientForm.getVisitID());

				for (PatientForm form : complaintList) {

					object.put("complaintID", form.getComplaintID());
					object.put("complaints", form.getSymptomCheckName());
					object.put("complaintDuration", form.getDuration());
					object.put("complaintComments", form.getComments());

				}

				historyList = patientDAOInf.retrieveMedicalHistoryList(loginForm.getPatientID());
				for (PatientForm form : historyList) {

					object.put("historyID", form.getHistoryID());
					object.put("diagnosis", form.getDiagnosis());
					object.put("description", form.getDescription());
				}

				medicationList = patientDAOInf.retrieveCurrentMedicationList(loginForm.getPatientID());
				for (PatientForm form : medicationList) {

					object.put("medicationID", form.getMedicationID());
					object.put("drugName", form.getDrugName());
					object.put("medicationDuration", form.getDuration());
					object.put("medicationComments", form.getComments());
				}

				check = 1;
				object.put("check", check);

				array.add(object);

				values.put("Release1", array);

				PrintWriter out = response.getWriter();

				out.print(values);

			} else if (patientForm.getFormName().equals("DefaultOpthalmologyOPD")) {
				String visitType = daoInf.retrieveVisitTypeNameByID(patientForm.getVisitTypeID());

				patientList = patientDAOInf.retrieveLastEnteredVisitDetail(loginForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID(), visitType);
				for (PatientForm form : patientList) {

					object.put("patientID", form.getPatientID());
					object.put("patientName", form.getFirstName() + " " + form.getLastName());
					object.put("visitDate", form.getVisitDate());
					object.put("age", form.getAge());
					object.put("gender", form.getGender());
					object.put("cancerType", form.getCancerType());
					object.put("visitType", form.getVisitType());
					object.put("medicalNotes", form.getMedicalNotes());

					object.put("eyeLidUpperOD", form.getEyeLidUpperOD());
					object.put("eyeLidUpperOS", form.getEyeLidUpperOS());
					object.put("eyeLidLowerOD", form.getEyeLidLowerOD());
					object.put("eyeLidLowerOS", form.getEyeLidLowerOS());

					object.put("visualAcuityDistOD", form.getVisualAcuityDistOD());
					object.put("visualAcuityNearOD", form.getVisualAcuityNearOD());

					object.put("visualAcuityDistOS", form.getVisualAcuityDistOS());
					object.put("visualAcuityNearOS", form.getVisualAcuityNearOS());

					object.put("pinholeVisionDistOD", form.getPinholeVisionDistOD());
					object.put("pinholeVisionNearOD", form.getPinholeVisionNearOD());

					object.put("pinholeVisionDistOS", form.getPinholeVisionDistOS());
					object.put("pinholeVisionNearOS", form.getPinholeVisionNearOS());

					object.put("BCVADistOD", form.getBCVADistOD());
					object.put("BCVANearOD", form.getBCVANearOD());

					object.put("BCVADistOS", form.getBCVADistOS());
					object.put("BCVANearOS", form.getBCVANearOS());

					object.put("conjunctivaOD", form.getConjunctivaOD());
					object.put("conjunctivaOS", form.getConjunctivaOS());

					object.put("scleraOD", form.getScleraOD());
					object.put("scleraOS", form.getScleraOS());

					object.put("CorneaOD", form.getCorneaOD());
					object.put("CorneaOS", form.getCorneaOS());

					object.put("ACOD", form.getACOD());
					object.put("ACOS", form.getACOS());

					object.put("irisOD", form.getIrisOD());
					object.put("irisOS", form.getIrisOS());

					object.put("lensOD", form.getLensOD());
					object.put("lensOS", form.getLensOS());

					object.put("discOD", form.getDiscOD());
					object.put("vesselOD", form.getVesselOD());
					object.put("maculaOD", form.getMaculaOD());

					object.put("discOS", form.getDiscOS());
					object.put("vesselOS", form.getVesselOS());
					object.put("maculaOS", form.getMaculaOS());

					object.put("posteriorComment", form.getPosteriorComment());

					object.put("IODOD", form.getIODOD());
					object.put("IODOS", form.getIODOS());

					object.put("sacOD", form.getSacOD());
					object.put("sacOS", form.getSacOS());

					object.put("k1OD", form.getK1OD());
					object.put("k1OS", form.getK1OS());

					object.put("k2OD", form.getK2OD());
					object.put("k2OS", form.getK2OS());

					object.put("axialLengthOD", form.getAxialLengthOD());
					object.put("axialLengthOS", form.getAxialLengthOS());

					object.put("IOLOD", form.getIOLOD());
					object.put("IOLOS", form.getIOLOS());

					object.put("biometryComment", form.getBiometryComment());

				}

				check = 1;
				object.put("check", check);

				array.add(object);

				values.put("Release2", array);

				PrintWriter out = response.getWriter();

				out.print(values);

			}

		} catch (Exception exception) {
			exception.printStackTrace();

			object.put("ErrMsg", "Error occured while Retrieveing CRF value");

			check = 0;

			object.put("check", check);

			array.add(object);

			values.put("Release1", array);

			PrintWriter out = response.getWriter();

			out.print(values);

		}

	}

	public void viewPRESC() throws Exception {

		patientDAOInf = new PatientDAOImpl();

		LoginDAOInf daoInf = new LoginDAOImpl();

		JSONObject values = new JSONObject();

		JSONArray array = new JSONArray();

		values = new JSONObject();

		JSONObject object = new JSONObject();

		response.setCharacterEncoding("UTF-8");

		int check = 0;

		LoginForm loginForm = (LoginForm) session.get("USER");

		try {

			patientList = patientDAOInf.retrieveDefaultPatientDetails(loginForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID(), patientForm.getAptID(),
					patientForm.getVisitTypeID());

			for (PatientForm form : patientList) {

				object.put("patientID", form.getPatientID());
				object.put("cancerType", form.getCancerType());
				object.put("advice", form.getAdvice());
				object.put("nextVisitDays", form.getNextVisitDays());
			}

			InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

			diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());

			for (PatientForm form : InvestigationTestsList) {

				object.put("investigation", form.getInvestigation());
			}

			prescriptionList = patientDAOInf.retrievePrescriptionList(loginForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID());

			for (PatientForm form : prescriptionList) {

				object.put("tradeName", form.getTradeName());
				object.put("frequency", form.getFrequency());
				object.put("numberOfDays", form.getNoOfDays());
				object.put("productQuantity", form.getProductQuantity());
				object.put("comment", form.getComment());
			}

			check = 1;
			object.put("check", check);

			array.add(object);

			values.put("Release1", array);

			PrintWriter out = response.getWriter();

			out.print(values);

		} catch (Exception exception) {
			exception.printStackTrace();

			object.put("ErrMsg", "Error occured while retrieving PRESC values");

			check = 0;

			object.put("check", check);

			array.add(object);

			values.put("Release1", array);

			PrintWriter out = response.getWriter();

			out.print(values);

		}

	}

	public void viewBILL() throws Exception {
		System.out.println("inside view bill");

		patientDAOInf = new PatientDAOImpl();

		LoginDAOInf daoInf = new LoginDAOImpl();

		JSONObject values = new JSONObject();

		JSONArray array = new JSONArray();

		values = new JSONObject();

		JSONObject object = new JSONObject();

		response.setCharacterEncoding("UTF-8");

		int check = 0;

		LoginForm loginForm = (LoginForm) session.get("USER");

		try {

			visitList = daoInf.retrievePatientVisitList(loginForm.getPatientID(), loginForm.getClinicID());

			for (PatientForm form : visitList) {

				object.put("visitType", form.getVisitType());

			}

			billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());

			for (PatientForm form : billList) {

				object.put("receiptDate", form.getReceiptDate());
				object.put("receiptNo", form.getReceiptNo());
				object.put("cancerType", form.getCancerType());
				object.put("charges", form.getCharges());
				object.put("totalBill", form.getNetAmount());
				object.put("advPayment", form.getAdvPayment());
				object.put("balPayment", form.getBalPayment());
				object.put("paymentType", form.getPaymentType());
				object.put("cashPaid", form.getCashPaid());
				object.put("cashToReturn", form.getCashToReturn());
				object.put("chequeIssueBy", form.getChequeIssuedBy());
				object.put("chequeNumber", form.getChequeNo());
				object.put("bankName", form.getChequeBankName());
				object.put("bankBranch", form.getChequeBankBranch());
				object.put("chequeDate", form.getChequeDate());
				object.put("chequeAmount", form.getChequeAmt());
				object.put("cardAmount", form.getCardAmount());
				object.put("cardNumber", form.getCardMobileNo());
				object.put("mobile", form.getCMobileNo());
				object.put("creditNote", form.getCreditNoteBal());
				object.put("otherMode", form.getOtherType());
				object.put("otherAmount", form.getOtherAmount());
			}

			check = 1;
			object.put("check", check);

			array.add(object);

			values.put("Release1", array);

			PrintWriter out = response.getWriter();

			out.print(values);

		} catch (Exception exception) {
			exception.printStackTrace();

			object.put("ErrMsg", "Error occured while retrieving PRESC values");

			check = 0;

			object.put("check", check);

			array.add(object);

			values.put("Release1", array);

			PrintWriter out = response.getWriter();

			out.print(values);

		}

	}

	public String updateDownloadGenPhyVisit() throws Exception {
		System.out.println("inside download crf.." + patientForm.getVisitID());
		/*
		 * Getting user role from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");
		serviceInf = new eDhanvantariServiceImpl();
		patientDAOInf = new PatientDAOImpl();
		LoginDAOInf daoInf = new LoginDAOImpl();
		ClinicDAOInf daoInf1 = new ClinicDAOImpl();
		ConvertToPDFUtil convertToPDFUtil = new ConvertToPDFUtil();
		RegistrationDAOinf registrationDAOinf = new RegistrationDAOImpl();
		PrescriptionManagementDAOInf managementDAOInf = new PrescriptionManagementDAOImpl();

		String accessKey = xmlUtil.getAccessKey();

		String secreteKey = xmlUtil.getSecreteKey();

		AWSS3Connect awss3Connect = new AWSS3Connect();

		// getting input file location from S3 bucket
		String s3reportFilePath = xmlUtil.getS3RDMLReportFilePath();

		// getting s3 bucket name
		String bucketName = util.getS3BucketName();

		// getting s3 bucket region
		String bucketRegion = xmlUtil.getS3BucketRegion();

		String s3LogoFilePath = xmlUtil.getS3RDMLFilePath();

		AWSCredentials credentials = new BasicAWSCredentials(accessKey, secreteKey);

		AmazonS3 s3 = AmazonS3ClientBuilder.standard().withCredentials(new AWSStaticCredentialsProvider(credentials))
				.withRegion(bucketRegion).build();

		System.out.println("userid loginform is::" + loginForm.getUserID());
		String username = patientDAOInf.retrieveUsernameBYuserID(loginForm.getUserID());
		System.out.println("username loginform is ::" + username);

		String check1 = patientDAOInf.verifyReferralLetter(patientForm.getVisitID());
		System.out.println("check1 value in action:" + check1);
		request.setAttribute("referralLetterCheck", check1);

		String check = patientDAOInf.verifyMedicalCertificate(patientForm.getVisitID());
		System.out.println("check value in action:" + check);
		request.setAttribute("medicalCertiCheck", check);

		/*
		 * message = serviceInf.editGenPhyVisit(patientForm);
		 * 
		 * if (message.equalsIgnoreCase("success")) {
		 * addActionMessage("Successfully updated Visit details.");
		 */

		HttpServletRequest request = ServletActionContext.getRequest();

		ServletContext context = request.getServletContext();

		String realPath = context.getRealPath("/");
		System.out.println("Real path is :: " + realPath);

		// String pdfOutFIleName = realPath + patientForm.getFirstName() +
		// patientForm.getLastName()
		String pdfOutFIleName = patientForm.getFirstName() + patientForm.getLastName() + patientForm.getPatientID()
				+ "_" + patientForm.getVisitID() + "opd.pdf";

		String visitType = daoInf1.retrieveVisitTypeNameByID(loginForm.getVisitTypeID());
		System.out.println("visitype is ::" + visitType);

		message = convertToPDFUtil.convertGenPhyVisitPDF(patientForm.getPatientID(), patientForm.getVisitID(), realPath,
				pdfOutFIleName, visitType, loginForm.getPracticeID(), username, s3, s3LogoFilePath, bucketName);

		if (message.equalsIgnoreCase("success")) {

			System.out.println("out File name from action ::::: " + pdfOutFIleName);

			File fileToDownload = new File(realPath + "/" + pdfOutFIleName);

			// Storing file to S3 RDML INPUT FILE location
			message = awss3Connect.pushFile(fileToDownload, pdfOutFIleName, bucketName, bucketRegion, s3reportFilePath);

			S3ObjectInputStream s3ObjectInputStream = s3
					.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, pdfOutFIleName))
					.getObjectContent();

			patientForm.setFileInputStream(s3ObjectInputStream);
			patientForm.setFileName(pdfOutFIleName);

			int patientVisitExistCheck = patientDAOInf.verifyVisitDetails(patientForm.getPatientID(),
					loginForm.getClinicID());

			String disableButtonCheck = "enable";
			if (patientVisitExistCheck == 0) {
				disableButtonCheck = "disable";
			}

			request.setAttribute("disableButtonCheck", disableButtonCheck);

			/*
			 * Retrieving patient age based on patientID
			 */
			String patientAge = patientDAOInf.retrievePatientAgeByPatientID(patientForm.getPatientID());

			request.setAttribute("patientAge", patientAge);
			/*
			 * retrieving patient gender based on patientID
			 */
			String patientGender = patientDAOInf.retrievePatientGenderByPatientID(patientForm.getPatientID());

			request.setAttribute("gender", patientGender);

			/*
			 * retrieving patientList which contains visit details
			 */

			patientList = patientDAOInf.retrieveDefaultPatientDetails(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID(), patientForm.getAptID(),
					loginForm.getVisitTypeID());

			boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

			if (visitCheck) {
				billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
			} else {
				billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
						loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
			}

			/* Retrieve labReport List */
			labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
					loginForm.getClinicID());

			String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
			request.setAttribute("paymentType", paymentType);

			String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

			request.setAttribute("medicalCertiText", medicatCertificate);

			String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

			request.setAttribute("referralLetter", referralLetter);
			/*
			 * retrieving prescription list by visitID
			 */
			prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID());

			InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

			diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());
			/*
			 * retrieving symptomCheck list by visitID
			 */
			symptomList = patientDAOInf.retrievesymptomCheckList(patientForm.getVisitID());

			complaintList = patientDAOInf.retrievecomplaintList(patientForm.getVisitID());

			historyList = patientDAOInf.retrieveMedicalHistoryList(patientForm.getPatientID());

			medicationList = patientDAOInf.retrieveCurrentMedicationList(patientForm.getPatientID());

			diagnoseList = configurationUtil.getDiagnoseList();

			request.setAttribute("apptID", patientForm.getAptID());

			drugList = configurationUtil.getTradeNameList();

			InvestigationList = configurationUtil.getInvestigationList();

			frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

			doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

			categoryList = configurationUtil.getCategoryList();

			hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Edit General Physician Prescription", loginForm.getUserID());

			String[] formNameArray = loginForm.getOPDJSPName().split("&");

			System.out.println("Edit OPD JSP Page name for logged in user is ::: " + formNameArray[1].trim());

			// Setting add opd page name value in pageName variable
			setPageName(formNameArray[1].trim());

			return SUCCESS;
		} else {
			addActionError("Failed to create OPD visit PDF.Please check server logs for more details.");

			lastEneteredOpticianList = patientDAOInf.retrieveLastOpticianDetails(patientForm.getLastVisitID());

			patientList = patientDAOInf.retrieveExistingVisitList(patientForm.getPatientID(), patientForm.getVisitID());
			boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

			if (visitCheck) {
				billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
			} else {
				billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
						loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
			}

			/*
			 * retrieving prescription list by visitID
			 */
			prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID());

			/* Retrieve labReport List */
			labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
					loginForm.getClinicID());
			/*
			 * retrieving symptomCheck list by visitID
			 */
			symptomList = patientDAOInf.retrievesymptomCheckList(patientForm.getVisitID());

			complaintList = patientDAOInf.retrievecomplaintList(patientForm.getVisitID());

			historyList = patientDAOInf.retrieveMedicalHistoryList(patientForm.getPatientID());

			medicationList = patientDAOInf.retrieveCurrentMedicationList(patientForm.getPatientID());

			String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

			request.setAttribute("medicalCertiText", medicatCertificate);

			String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

			request.setAttribute("referralLetter", referralLetter);

			request.setAttribute("apptID", patientForm.getAptID());

			doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

			diagnoseList = configurationUtil.getDiagnoseList();

			resayuDiagnosisList = configurationUtil.getDiagnoseList();

			resayuDiagnosisList.put("Other", "Other");

			drugList = configurationUtil.getTradeNameList();

			InvestigationList = configurationUtil.getInvestigationList();

			InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

			diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());

			frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

			categoryList = configurationUtil.getCategoryList();

			/*
			 * String dummy = "success";
			 * 
			 * request.setAttribute("lasteEnteredVisitList", dummy);
			 * 
			 * request.setAttribute("lasteEnteredPrescList", dummy);
			 * 
			 * request.setAttribute("lasteEnteredBillList", dummy);
			 */

			request.setAttribute("opticianFloatCheck", "empty");

			/*
			 * Getting form name to be display based on logged in User
			 */
			String[] formNameArray = loginForm.getOPDJSPName().split("&");

			System.out.println("Update General physician Visit JSP Page name for logged in user is ::: "
					+ formNameArray[1].trim());

			// Setting add opd page name value in pageName variable
			setPageName(formNameArray[1].trim());

		}

		return ERROR;
	}

	/**
	 * 
	 * @return
	 * @throws Exception
	 */
	public String updatePrintGenPhyPrescription() throws Exception {

		patientDAOInf = new PatientDAOImpl();

		serviceInf = new eDhanvantariServiceImpl();

		SMSSender smsSender = new SMSSender();

		EmailUtil emailUtil = new EmailUtil();

		ConvertToPDFUtil convertToPDFUtil = new ConvertToPDFUtil();

		LoginDAOInf daoInf = new LoginDAOImpl();

		ClinicDAOInf daoInf1 = new ClinicDAOImpl();
		RegistrationDAOinf registrationDAOinf = new RegistrationDAOImpl();

		PrescriptionManagementDAOInf managementDAOInf = new PrescriptionManagementDAOImpl();

		String accessKey = xmlUtil.getAccessKey();

		String secreteKey = xmlUtil.getSecreteKey();

		AWSS3Connect awss3Connect = new AWSS3Connect();

		// getting input file location from S3 bucket
		String s3reportFilePath = xmlUtil.getS3RDMLReportFilePath();

		// getting s3 bucket name
		String bucketName = util.getS3BucketName();

		// getting s3 bucket region
		String bucketRegion = xmlUtil.getS3BucketRegion();

		String s3LogoFilePath = xmlUtil.getS3RDMLFilePath();

		AWSCredentials credentials = new BasicAWSCredentials(accessKey, secreteKey);

		AmazonS3 s3 = AmazonS3ClientBuilder.standard().withCredentials(new AWSStaticCredentialsProvider(credentials))
				.withRegion(bucketRegion).build();

		/*
		 * Getting user role from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");

		String username = patientDAOInf.retrieveUsernameBYuserID(loginForm.getUserID());

		/*
		 * Getting form name to be display based on logged in User
		 */
		String[] formNameArray = loginForm.getOPDJSPName().split("&");

		patientForm.setClinicID(loginForm.getClinicID());

		orthoBillItemList = patientDAOInf.retrieveOrthoBillingItemList(patientForm.getVisitID());

		int lastVisitID = patientDAOInf.retrieveLastVisitID(patientForm.getPatientID(), loginForm.getClinicID());

		String check1 = patientDAOInf.verifyReferralLetter(patientForm.getVisitID());

		request.setAttribute("referralLetterCheck", check1);

		String check = patientDAOInf.verifyMedicalCertificate(patientForm.getVisitID());

		request.setAttribute("medicalCertiCheck", check);

		message = serviceInf.addNewPrescription(patientForm);

		if (message.equals("success")) {

			addActionMessage("Prescription added successfully.");

			String prescTabCheck = "enable";

			request.setAttribute("prescTabCheck", prescTabCheck);

			HttpServletRequest request = ServletActionContext.getRequest();

			ServletContext context = request.getServletContext();

			String realPath = context.getRealPath("/");

			// String pdfOutFIleName = reportFilePath + patientForm.getFirstName() +
			// patientForm.getLastName()
			String pdfOutFIleName = patientForm.getFirstName() + patientForm.getLastName() + patientForm.getPatientID()
					+ "_" + patientForm.getVisitID() + "p.pdf";

			System.out.println("PRESC FILE PATH IS::" + pdfOutFIleName);

			if (formNameArray[0].trim().equals("generalPhysicianOPD.jsp")) {

				message = convertToPDFUtil.convertPrescriptionForPhysicianOPDPDF(patientForm.getPatientID(),
						patientForm.getVisitID(), realPath, pdfOutFIleName, loginForm.getClinicID(),
						loginForm.getPracticeID(), username, s3, s3LogoFilePath, bucketName);
			} else if (formNameArray[0].trim().equals("generalPhysicianGokhaleOPD.jsp")) {
				message = convertToPDFUtil.convertPrescriptionForOrthoPhysicianOPDPDF(patientForm.getPatientID(),
						patientForm.getVisitID(), realPath, pdfOutFIleName, loginForm.getClinicID(),
						loginForm.getPracticeID(), username, s3, s3LogoFilePath, bucketName);
			} else if (formNameArray[1].trim().equals("ophthalmologyOPDEdit2.jsp")) {

				String visitType = daoInf1.retrieveVisitTypeNameByID(loginForm.getVisitTypeID());

				message = convertToPDFUtil.convertOphthalmOPDPDF(patientForm.getVisitID(), patientForm.getPatientID(),
						loginForm.getClinicID(), realPath, pdfOutFIleName, visitType, s3, s3reportFilePath, bucketName,
						loginForm.getPracticeID(), username);

			} else {
				message = convertToPDFUtil.convertPrescriptionPDF(patientForm.getPatientID(), patientForm.getVisitID(),
						realPath, pdfOutFIleName, loginForm.getClinicID(), loginForm.getPracticeID(), username, s3,
						s3LogoFilePath, bucketName);
			}

			if (message.equals("success")) {

				File inputFile = new File(realPath + "/" + pdfOutFIleName);

				// Storing file to S3 RDML INPUT FILE location
				message = awss3Connect.pushFile(inputFile, pdfOutFIleName, bucketName, bucketRegion, s3reportFilePath);

				request.setAttribute("PDFOutFileName", pdfOutFIleName);

				S3ObjectInputStream s3ObjectInputStream = s3
						.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, pdfOutFIleName))
						.getObjectContent();

				patientForm.setFileInputStream(s3ObjectInputStream);
				patientForm.setFileName(pdfOutFIleName);

				boolean EmailCheck = util.verifyCommunicationCheck("emailPresc");

				if (EmailCheck) {

					/*
					 * Retrieving patient's email ID, if not null, then sending patient a welcome
					 * mail
					 */
					String emailID = patientDAOInf.retrievePatientEmailByID(patientForm.getPatientID());

					if (emailID == null || emailID == "") {
						System.out.println("EmailID no not found for patient.");
					} else {

						if (emailID.isEmpty()) {
							System.out.println("EmailID no not found for patient.");
						} else {

							/*
							 * Sending prescription mail to patient
							 */
							emailUtil.sendPrescriptionMail(patientForm.getPatientID(), loginForm.getPracticeID(),
									loginForm.getClinicID(), patientForm.getVisitID(), realPath, pdfOutFIleName,
									emailID);
						}

					}

				}

				/*
				 * Check whether appointment udpated flag is on or not, and depending upon that
				 * sending SMS and Email
				 */
				boolean SMSCheck = util.verifyCommunicationCheck("smsPresc");

				if (SMSCheck) {

					/*
					 * Retrieving patient's mobile no, if mobile is not null, then sending patient a
					 * welcome message
					 */
					String mobileNo = patientDAOInf.retrievePatientMobileNoByID(patientForm.getPatientID());

					/*
					 * Sending patient a welcome as well as Appointment scheduled message on
					 * checking whether mobile no is available for that patient or not
					 */
					if (mobileNo == null || mobileNo == "") {
						System.out.println("Mobile no not found for patient.");
					} else {

						if (mobileNo.isEmpty()) {
							System.out.println("Mobile no not found for patient.");
						} else {

							/*
							 * Sending bill details SMS to patient
							 */
							smsSender.sendGeneralisedPrescriptionORBillSMS(patientForm.getVisitID(), mobileNo,
									loginForm.getPracticeID(), loginForm.getClinicID(), ActivityStatus.PRESCRIPTION,
									pdfOutFIleName);

						}

					}

				}

			}

			/*
			 * Update appointment status to Prescription
			 */
			patientDAOInf.updatePrescriptionAppointmentStatus(patientForm.getPatientID(), patientForm.getAptID());

			/*
			 * retrieving patientList which contains visit details
			 */
			if (formNameArray[1].trim().equals("generalOPDEdit.jsp")
					|| formNameArray[1].trim().equals("telephonicEdit.jsp")
					|| formNameArray[1].trim().equals("physicianOPDEdit.jsp")
					|| formNameArray[1].trim().equals("generalPhysicianOPDEdit.jsp")
					|| formNameArray[1].trim().equals("generalPhysicianGokhaleOPDEdit.jsp")) {
				patientList = patientDAOInf.retrieveDefaultPatientDetails(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID(), patientForm.getAptID(),
						loginForm.getVisitTypeID());

			} else {
				String visitType = daoInf1.retrieveVisitTypeNameByID(loginForm.getVisitTypeID());
				System.out.println("visitype is ::" + visitType);

				patientList = patientDAOInf.retrieveLastEnteredVisitDetail(patientForm.getPatientID(), lastVisitID,
						loginForm.getClinicID(), visitType);

			}

			boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

			if (visitCheck) {
				billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
			} else {
				billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
						loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
			}

			/* Retrieve labReport List */
			labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
					loginForm.getClinicID());

			String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
			request.setAttribute("paymentType", paymentType);

			/*
			 * retrieving prescription list by visitID
			 */
			prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID());

			InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

			diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());
			/*
			 * retrieving symptomCheck list by visitID
			 */
			symptomList = patientDAOInf.retrievesymptomCheckList(patientForm.getVisitID());

			historyList = patientDAOInf.retrieveMedicalHistoryList(patientForm.getPatientID());

			medicationList = patientDAOInf.retrieveCurrentMedicationList(patientForm.getPatientID());

			complaintList = patientDAOInf.retrievecomplaintList(patientForm.getVisitID());

			categoryList = configurationUtil.getCategoryList();

			// Checking if the CRF form is for Gokhale clinic, if so then load the diagnosis
			// from the json file else load the diagnosis from the PVDiagnosis table
			if (formNameArray[1].trim().equals("generalPhysicianGokhaleOPDEdit.jsp")) {

				// Retrieving diagnosis list for the last visit ID
				orthoDiagnosisList = patientDAOInf.retrieveOrthoDiagnosisList(patientForm.getVisitID());

				JSONParser parser = new JSONParser();

				JSONArray diagnosisJSON = (JSONArray) parser
						.parse(new FileReader(realPath + File.separator + "ortho_charges.json"));

				for (Object jsonData : diagnosisJSON) {
					JSONObject data = (JSONObject) jsonData;

					// diagnoseList.put((String) data.get("rate"), (String) data.get("diagnosis"));
				}

			}
			diagnoseList = configurationUtil.getDiagnoseList();

			String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

			request.setAttribute("medicalCertiText", medicatCertificate);

			String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

			request.setAttribute("referralLetter", referralLetter);

			request.setAttribute("apptID", patientForm.getAptID());

			drugList = configurationUtil.getTradeNameList();

			InvestigationList = configurationUtil.getInvestigationList();

			frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

			doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

			hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Edit General Physician Prescription", loginForm.getUserID());

			System.out.println("Edit OPD JSP Page name for logged in user is ::: " + formNameArray[1].trim());

			// Setting add opd page name value in pageName variable
			setPageName(formNameArray[1].trim());

			return SUCCESS;

		} else if (message.equals("noVisit")) {

			addActionError("No visit added. Please add visit first.");

			String prescTabCheck = "enable";

			request.setAttribute("prescTabCheck", prescTabCheck);

			/*
			 * retrieving patientList which contains visit details
			 */
			if (formNameArray[1].trim().equals("generalOPDEdit.jsp")
					|| formNameArray[1].trim().equals("telephonicEdit.jsp")
					|| formNameArray[1].trim().equals("physicianOPDEdit.jsp")
					|| formNameArray[1].trim().equals("generalPhysicianOPDEdit.jsp")
					|| formNameArray[1].trim().equals("generalPhysicianGokhaleOPDEdit.jsp")) {
				patientList = patientDAOInf.retrieveDefaultPatientDetails(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID(), patientForm.getAptID(),
						loginForm.getVisitTypeID());
			} else {
				String visitType = daoInf1.retrieveVisitTypeNameByID(loginForm.getVisitTypeID());
				System.out.println("visitype is ::" + visitType);

				patientList = patientDAOInf.retrieveLastEnteredVisitDetail(patientForm.getPatientID(), lastVisitID,
						loginForm.getClinicID(), visitType);

			}
			hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

			/*
			 * retrieving prescription list by visitID
			 */
			prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID());

			InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

			diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());
			/*
			 * retrieving symptomCheck list by visitID
			 */
			symptomList = patientDAOInf.retrievesymptomCheckList(patientForm.getVisitID());

			historyList = patientDAOInf.retrieveMedicalHistoryList(patientForm.getPatientID());

			medicationList = patientDAOInf.retrieveCurrentMedicationList(patientForm.getPatientID());

			complaintList = patientDAOInf.retrievecomplaintList(patientForm.getVisitID());

			String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

			request.setAttribute("medicalCertiText", medicatCertificate);

			String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

			request.setAttribute("referralLetter", referralLetter);

			boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

			if (visitCheck) {
				billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
			} else {
				billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
						loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
			}

			/* Retrieve labReport List */
			labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
					loginForm.getClinicID());

			String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
			request.setAttribute("paymentType", paymentType);

			request.setAttribute("apptID", patientForm.getAptID());

			// Checking if the CRF form is for Gokhale clinic, if so then load the diagnosis
			// from the json file else load the diagnosis from the PVDiagnosis table
			if (formNameArray[1].trim().equals("generalPhysicianGokhaleOPDEdit.jsp")) {

				// Retrieving diagnosis list for the last visit ID
				orthoDiagnosisList = patientDAOInf.retrieveOrthoDiagnosisList(patientForm.getVisitID());

				HttpServletRequest request = ServletActionContext.getRequest();

				ServletContext context = request.getServletContext();

				String realPath = context.getRealPath("/");

				JSONParser parser = new JSONParser();

				JSONArray diagnosisJSON = (JSONArray) parser
						.parse(new FileReader(realPath + File.separator + "ortho_charges.json"));

				for (Object jsonData : diagnosisJSON) {
					JSONObject data = (JSONObject) jsonData;

					// diagnoseList.put((String) data.get("rate"), (String) data.get("diagnosis"));
				}

			}
			diagnoseList = configurationUtil.getDiagnoseList();

			drugList = configurationUtil.getTradeNameList();

			InvestigationList = configurationUtil.getInvestigationList();

			frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

			categoryList = configurationUtil.getCategoryList();

			// chargeTypeList = configurationUtil.getChargeTypeList();

			doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Edit General Physician Prescription Exception occurred",
					loginForm.getUserID());

			System.out.println("Edit OPD JSP Page name for logged in user is ::: " + formNameArray[1].trim());

			// Setting add opd page name value in pageName variable
			setPageName(formNameArray[1].trim());

			return ERROR;

		} else {

			addActionError(
					"Eexception occurred while adding prescription details. Please check server logs for more details.");

			String prescTabCheck = "enable";

			request.setAttribute("prescTabCheck", prescTabCheck);

			/*
			 * retrieving patientList which contains visit details
			 */
			if (formNameArray[1].trim().equals("generalOPDEdit.jsp")
					|| formNameArray[1].trim().equals("telephonicEdit.jsp")
					|| formNameArray[1].trim().equals("physicianOPDEdit.jsp")
					|| formNameArray[1].trim().equals("generalPhysicianOPDEdit.jsp")
					|| formNameArray[1].trim().equals("generalPhysicianGokhaleOPDEdit.jsp")) {
				patientList = patientDAOInf.retrieveDefaultPatientDetails(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID(), patientForm.getAptID(),
						loginForm.getVisitTypeID());
			} else {
				String visitType = daoInf1.retrieveVisitTypeNameByID(loginForm.getVisitTypeID());
				System.out.println("visitype is ::" + visitType);

				patientList = patientDAOInf.retrieveLastEnteredVisitDetail(patientForm.getPatientID(), lastVisitID,
						loginForm.getClinicID(), visitType);

			}

			hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

			request.setAttribute("apptID", patientForm.getAptID());

			boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

			if (visitCheck) {
				billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
			} else {
				billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
						loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
			}

			/*
			 * retrieving prescription list by visitID
			 */
			prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID());

			InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

			diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());
			/*
			 * retrieving symptomCheck list by visitID
			 */
			symptomList = patientDAOInf.retrievesymptomCheckList(patientForm.getVisitID());

			historyList = patientDAOInf.retrieveMedicalHistoryList(patientForm.getPatientID());

			medicationList = patientDAOInf.retrieveCurrentMedicationList(patientForm.getPatientID());

			complaintList = patientDAOInf.retrievecomplaintList(patientForm.getVisitID());

			String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

			request.setAttribute("medicalCertiText", medicatCertificate);

			String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

			request.setAttribute("referralLetter", referralLetter);

			/* Retrieve labReport List */
			labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
					loginForm.getClinicID());

			String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
			request.setAttribute("paymentType", paymentType);

			// Checking if the CRF form is for Gokhale clinic, if so then load the diagnosis
			// from the json file else load the diagnosis from the PVDiagnosis table
			if (formNameArray[1].trim().equals("generalPhysicianGokhaleOPDEdit.jsp")) {

				// Retrieving diagnosis list for the last visit ID
				orthoDiagnosisList = patientDAOInf.retrieveOrthoDiagnosisList(patientForm.getVisitID());

				HttpServletRequest request = ServletActionContext.getRequest();

				ServletContext context = request.getServletContext();

				String realPath = context.getRealPath("/");

				JSONParser parser = new JSONParser();

				JSONArray diagnosisJSON = (JSONArray) parser
						.parse(new FileReader(realPath + File.separator + "ortho_charges.json"));

				for (Object jsonData : diagnosisJSON) {
					JSONObject data = (JSONObject) jsonData;

					// diagnoseList.put((String) data.get("rate"), (String) data.get("diagnosis"));
				}

			}
			diagnoseList = configurationUtil.getDiagnoseList();

			drugList = configurationUtil.getTradeNameList();

			InvestigationList = configurationUtil.getInvestigationList();

			categoryList = configurationUtil.getCategoryList();

			frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

			// chargeTypeList = configurationUtil.getChargeTypeList();

			doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Edit General Physician Prescription Exception occurred",
					loginForm.getUserID());

			System.out.println("EDit OPD JSP Page name for logged in user is ::: " + formNameArray[1].trim());

			// Setting add opd page name value in pageName variable
			setPageName(formNameArray[1].trim());

			return ERROR;
		}

	}

	/**
	 * 
	 * @return
	 * @throws Exception
	 */
	public String updatePrintGenPhyInvestigation() throws Exception {

		patientDAOInf = new PatientDAOImpl();

		serviceInf = new eDhanvantariServiceImpl();

		SMSSender smsSender = new SMSSender();

		EmailUtil emailUtil = new EmailUtil();

		ConvertToPDFUtil convertToPDFUtil = new ConvertToPDFUtil();

		LoginDAOInf daoInf = new LoginDAOImpl();

		ClinicDAOInf daoInf1 = new ClinicDAOImpl();
		RegistrationDAOinf registrationDAOinf = new RegistrationDAOImpl();

		PrescriptionManagementDAOInf managementDAOInf = new PrescriptionManagementDAOImpl();

		String accessKey = xmlUtil.getAccessKey();

		String secreteKey = xmlUtil.getSecreteKey();

		AWSS3Connect awss3Connect = new AWSS3Connect();

		// getting input file location from S3 bucket
		String s3reportFilePath = xmlUtil.getS3RDMLReportFilePath();

		// getting s3 bucket name
		String bucketName = util.getS3BucketName();

		// getting s3 bucket region
		String bucketRegion = xmlUtil.getS3BucketRegion();

		String s3LogoFilePath = xmlUtil.getS3RDMLFilePath();

		AWSCredentials credentials = new BasicAWSCredentials(accessKey, secreteKey);

		AmazonS3 s3 = AmazonS3ClientBuilder.standard().withCredentials(new AWSStaticCredentialsProvider(credentials))
				.withRegion(bucketRegion).build();

		/*
		 * Getting user role from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");

		String username = patientDAOInf.retrieveUsernameBYuserID(loginForm.getUserID());

		/*
		 * Getting form name to be display based on logged in User
		 */
		String[] formNameArray = loginForm.getOPDJSPName().split("&");

		patientForm.setClinicID(loginForm.getClinicID());

		int lastVisitID = patientDAOInf.retrieveLastVisitID(patientForm.getPatientID(), loginForm.getClinicID());

		String check1 = patientDAOInf.verifyReferralLetter(patientForm.getVisitID());

		request.setAttribute("referralLetterCheck", check1);

		String check = patientDAOInf.verifyMedicalCertificate(patientForm.getVisitID());

		request.setAttribute("medicalCertiCheck", check);

		message = serviceInf.addNewInvestigation(patientForm);

		if (message.equals("success")) {

			addActionMessage("Investigation added successfully.");

			String investTabCheck = "enable";

			request.setAttribute("investTabCheck", investTabCheck);

			HttpServletRequest request = ServletActionContext.getRequest();

			ServletContext context = request.getServletContext();

			String realPath = context.getRealPath("/");

			// String pdfOutFIleName = reportFilePath + patientForm.getFirstName() +
			// patientForm.getLastName()
			String pdfOutFIleName = patientForm.getFirstName() + patientForm.getLastName() + patientForm.getPatientID()
					+ "_" + patientForm.getVisitID() + "I.pdf";

			message = convertToPDFUtil.convertInvestigationPDF(patientForm.getPatientID(), patientForm.getVisitID(),
					realPath, pdfOutFIleName, loginForm.getClinicID(), loginForm.getPracticeID(), username, s3,
					s3LogoFilePath, bucketName);

			if (message.equals("success")) {

				File inputFile = new File(realPath + "/" + pdfOutFIleName);

				// Storing file to S3 RDML INPUT FILE location
				message = awss3Connect.pushFile(inputFile, pdfOutFIleName, bucketName, bucketRegion, s3reportFilePath);

				S3ObjectInputStream s3ObjectInputStream = s3
						.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, pdfOutFIleName))
						.getObjectContent();

				patientForm.setFileInputStream(s3ObjectInputStream);

				patientForm.setFileName(pdfOutFIleName);

			}

			/*
			 * retrieving patientList which contains visit details
			 */
			if (formNameArray[1].trim().equals("generalOPDEdit.jsp")
					|| formNameArray[1].trim().equals("telephonicEdit.jsp")
					|| formNameArray[1].trim().equals("physicianOPDEdit.jsp")
					|| formNameArray[1].trim().equals("generalPhysicianOPDEdit.jsp")
					|| formNameArray[1].trim().equals("generalPhysicianGokhaleOPDEdit.jsp")) {
				patientList = patientDAOInf.retrieveDefaultPatientDetails(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID(), patientForm.getAptID(),
						loginForm.getVisitTypeID());

			} else {
				String visitType = daoInf1.retrieveVisitTypeNameByID(loginForm.getVisitTypeID());

				patientList = patientDAOInf.retrieveLastEnteredVisitDetail(patientForm.getPatientID(), lastVisitID,
						loginForm.getClinicID(), visitType);
			}

			boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

			if (visitCheck) {
				billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
			} else {
				billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
						loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
			}

			/* Retrieve labReport List */
			labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
					loginForm.getClinicID());

			String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
			request.setAttribute("paymentType", paymentType);

			/*
			 * retrieving prescription list by visitID
			 */
			prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID());

			InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

			diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());
			/*
			 * retrieving symptomCheck list by visitID
			 */
			symptomList = patientDAOInf.retrievesymptomCheckList(patientForm.getVisitID());

			historyList = patientDAOInf.retrieveMedicalHistoryList(patientForm.getPatientID());

			medicationList = patientDAOInf.retrieveCurrentMedicationList(patientForm.getPatientID());

			complaintList = patientDAOInf.retrievecomplaintList(patientForm.getVisitID());

			categoryList = configurationUtil.getCategoryList();

			diagnoseList = configurationUtil.getDiagnoseList();

			String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

			request.setAttribute("medicalCertiText", medicatCertificate);

			String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

			request.setAttribute("referralLetter", referralLetter);

			request.setAttribute("apptID", patientForm.getAptID());

			drugList = configurationUtil.getTradeNameList();

			InvestigationList = configurationUtil.getInvestigationList();

			frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

			doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

			hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Edit General Physician Investigation", loginForm.getUserID());

			System.out.println("Edit OPD JSP Page name for logged in user is ::: " + formNameArray[1].trim());

			// Setting add opd page name value in pageName variable
			setPageName(formNameArray[1].trim());

			return SUCCESS;

		} else if (message.equals("noVisit")) {

			addActionError("No visit added. Please add visit first.");

			String investTabCheck = "enable";

			request.setAttribute("investTabCheck", investTabCheck);

			/*
			 * retrieving patientList which contains visit details
			 */
			if (formNameArray[1].trim().equals("generalOPDEdit.jsp")
					|| formNameArray[1].trim().equals("telephonicEdit.jsp")
					|| formNameArray[1].trim().equals("physicianOPDEdit.jsp")
					|| formNameArray[1].trim().equals("generalPhysicianOPDEdit.jsp")
					|| formNameArray[1].trim().equals("generalPhysicianGokhaleOPDEdit.jsp")) {
				patientList = patientDAOInf.retrieveDefaultPatientDetails(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID(), patientForm.getAptID(),
						loginForm.getVisitTypeID());
			} else {
				String visitType = daoInf1.retrieveVisitTypeNameByID(loginForm.getVisitTypeID());
				System.out.println("visitype is ::" + visitType);

				patientList = patientDAOInf.retrieveLastEnteredVisitDetail(patientForm.getPatientID(), lastVisitID,
						loginForm.getClinicID(), visitType);

			}
			hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

			/*
			 * retrieving prescription list by visitID
			 */
			prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID());

			InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

			diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());
			/*
			 * retrieving symptomCheck list by visitID
			 */
			symptomList = patientDAOInf.retrievesymptomCheckList(patientForm.getVisitID());

			historyList = patientDAOInf.retrieveMedicalHistoryList(patientForm.getPatientID());

			medicationList = patientDAOInf.retrieveCurrentMedicationList(patientForm.getPatientID());

			complaintList = patientDAOInf.retrievecomplaintList(patientForm.getVisitID());

			String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

			request.setAttribute("medicalCertiText", medicatCertificate);

			String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

			request.setAttribute("referralLetter", referralLetter);

			boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

			if (visitCheck) {
				billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
			} else {
				billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
						loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
			}

			/* Retrieve labReport List */
			labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
					loginForm.getClinicID());

			String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
			request.setAttribute("paymentType", paymentType);

			request.setAttribute("apptID", patientForm.getAptID());

			diagnoseList = configurationUtil.getDiagnoseList();

			drugList = configurationUtil.getTradeNameList();

			InvestigationList = configurationUtil.getInvestigationList();

			frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

			categoryList = configurationUtil.getCategoryList();

			// chargeTypeList = configurationUtil.getChargeTypeList();

			doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Edit General Physician Investigations Exception occurred",
					loginForm.getUserID());

			System.out.println("Edit OPD JSP Page name for logged in user is ::: " + formNameArray[1].trim());

			// Setting add opd page name value in pageName variable
			setPageName(formNameArray[1].trim());

			return ERROR;

		} else {

			addActionError(
					"Eexception occurred while adding Investigation details. Please check server logs for more details.");

			String investTabCheck = "enable";

			request.setAttribute("investTabCheck", investTabCheck);

			/*
			 * retrieving patientList which contains visit details
			 */
			if (formNameArray[1].trim().equals("generalOPDEdit.jsp")
					|| formNameArray[1].trim().equals("telephonicEdit.jsp")
					|| formNameArray[1].trim().equals("physicianOPDEdit.jsp")
					|| formNameArray[1].trim().equals("generalPhysicianOPDEdit.jsp")
					|| formNameArray[1].trim().equals("generalPhysicianGokhaleOPDEdit.jsp")) {

				patientList = patientDAOInf.retrieveDefaultPatientDetails(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID(), patientForm.getAptID(),
						loginForm.getVisitTypeID());
			} else {
				String visitType = daoInf1.retrieveVisitTypeNameByID(loginForm.getVisitTypeID());
				System.out.println("visitype is ::" + visitType);

				patientList = patientDAOInf.retrieveLastEnteredVisitDetail(patientForm.getPatientID(), lastVisitID,
						loginForm.getClinicID(), visitType);

			}

			hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

			request.setAttribute("apptID", patientForm.getAptID());

			boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

			if (visitCheck) {
				billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
			} else {
				billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
						loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
			}

			/*
			 * retrieving prescription list by visitID
			 */
			prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID());

			InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

			diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());
			/*
			 * retrieving symptomCheck list by visitID
			 */
			symptomList = patientDAOInf.retrievesymptomCheckList(patientForm.getVisitID());

			historyList = patientDAOInf.retrieveMedicalHistoryList(patientForm.getPatientID());

			medicationList = patientDAOInf.retrieveCurrentMedicationList(patientForm.getPatientID());

			complaintList = patientDAOInf.retrievecomplaintList(patientForm.getVisitID());

			String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

			request.setAttribute("medicalCertiText", medicatCertificate);

			String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

			request.setAttribute("referralLetter", referralLetter);

			/* Retrieve labReport List */
			labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
					loginForm.getClinicID());

			String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
			request.setAttribute("paymentType", paymentType);

			diagnoseList = configurationUtil.getDiagnoseList();

			drugList = configurationUtil.getTradeNameList();

			InvestigationList = configurationUtil.getInvestigationList();

			categoryList = configurationUtil.getCategoryList();

			frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

			// chargeTypeList = configurationUtil.getChargeTypeList();

			doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Edit General Physician Investigation Exception occurred",
					loginForm.getUserID());

			System.out.println("EDit OPD JSP Page name for logged in user is ::: " + formNameArray[1].trim());

			// Setting add opd page name value in pageName variable
			setPageName(formNameArray[1].trim());

			return ERROR;
		}

	}

	public String updateDownloadGenPhyPrescription() throws Exception {

		patientDAOInf = new PatientDAOImpl();

		serviceInf = new eDhanvantariServiceImpl();

		SMSSender smsSender = new SMSSender();

		EmailUtil emailUtil = new EmailUtil();

		ConvertToPDFUtil convertToPDFUtil = new ConvertToPDFUtil();

		LoginDAOInf daoInf = new LoginDAOImpl();

		ClinicDAOInf daoInf1 = new ClinicDAOImpl();
		RegistrationDAOinf registrationDAOinf = new RegistrationDAOImpl();

		PrescriptionManagementDAOInf managementDAOInf = new PrescriptionManagementDAOImpl();

		String accessKey = xmlUtil.getAccessKey();

		String secreteKey = xmlUtil.getSecreteKey();

		AWSS3Connect awss3Connect = new AWSS3Connect();

		// getting input file location from S3 bucket
		String s3reportFilePath = xmlUtil.getS3RDMLReportFilePath();

		// getting s3 bucket name
		String bucketName = util.getS3BucketName();

		// getting s3 bucket region
		String bucketRegion = xmlUtil.getS3BucketRegion();

		String s3LogoFilePath = xmlUtil.getS3RDMLFilePath();

		AWSCredentials credentials = new BasicAWSCredentials(accessKey, secreteKey);

		AmazonS3 s3 = AmazonS3ClientBuilder.standard().withCredentials(new AWSStaticCredentialsProvider(credentials))
				.withRegion(bucketRegion).build();

		orthoBillItemList = patientDAOInf.retrieveOrthoBillingItemList(patientForm.getVisitID());

		/*
		 * Getting user role from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");

		System.out.println("userid loginform is::" + loginForm.getUserID());
		String username = patientDAOInf.retrieveUsernameBYuserID(loginForm.getUserID());
		System.out.println("username loginform is ::" + username);
		/*
		 * Getting form name to be display based on logged in User
		 */
		String[] formNameArray = loginForm.getOPDJSPName().split("&");

		patientForm.setClinicID(loginForm.getClinicID());

		int lastVisitID = patientDAOInf.retrieveLastVisitID(patientForm.getPatientID(), loginForm.getClinicID());

		String check1 = patientDAOInf.verifyReferralLetter(patientForm.getVisitID());
		System.out.println("check1 value in action:" + check1);
		request.setAttribute("referralLetterCheck", check1);

		String check = patientDAOInf.verifyMedicalCertificate(patientForm.getVisitID());
		System.out.println("check value in action:" + check);
		request.setAttribute("medicalCertiCheck", check);

		HttpServletRequest request = ServletActionContext.getRequest();

		ServletContext context = request.getServletContext();

		String realPath = context.getRealPath("/");

		String pdfOutFIleName = patientForm.getFirstName() + patientForm.getLastName() + patientForm.getPatientID()
				+ "_" + patientForm.getVisitID() + "p.pdf";

		if (formNameArray[1].trim().equals("generalPhysicianOPDEdit.jsp")) {

			message = convertToPDFUtil.convertPrescriptionForPhysicianOPDPDF(patientForm.getPatientID(),
					patientForm.getVisitID(), realPath, pdfOutFIleName, loginForm.getClinicID(),
					loginForm.getPracticeID(), username, s3, s3LogoFilePath, bucketName);
		} else if (formNameArray[1].trim().equals("generalPhysicianGokhaleOPDEdit.jsp")) {

			message = convertToPDFUtil.convertPrescriptionForOrthoPhysicianOPDPDF(patientForm.getPatientID(),
					patientForm.getVisitID(), realPath, pdfOutFIleName, loginForm.getClinicID(),
					loginForm.getPracticeID(), username, s3, s3LogoFilePath, bucketName);

		} else {
			message = convertToPDFUtil.convertPrescriptionPDF(patientForm.getPatientID(), patientForm.getVisitID(),
					realPath, pdfOutFIleName, loginForm.getClinicID(), loginForm.getPracticeID(), username, s3,
					s3LogoFilePath, bucketName);
		}

		if (message.equals("success")) {

			System.out.println("out File name from action ::::: " + pdfOutFIleName);

			File fileToDownload = new File(realPath + "/" + pdfOutFIleName);

			// Storing file to S3 RDML INPUT FILE location
			message = awss3Connect.pushFile(fileToDownload, pdfOutFIleName, bucketName, bucketRegion, s3reportFilePath);

			S3ObjectInputStream s3ObjectInputStream = s3
					.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, pdfOutFIleName))
					.getObjectContent();

			patientForm.setFileInputStream(s3ObjectInputStream);

			patientForm.setFileName(pdfOutFIleName);

			String prescTabCheck = "enable";

			request.setAttribute("prescTabCheck", prescTabCheck);

			/*
			 * Check whether appointment udpated flag is on or not, and depending upon that
			 * sending SMS and Email
			 */
			boolean SMSCheck = util.verifyCommunicationCheck("smsPresc");

			if (SMSCheck) {

				/*
				 * Retrieving patient's mobile no, if mobile is not null, then sending patient a
				 * welcome message
				 */
				String mobileNo = patientDAOInf.retrievePatientMobileNoByID(patientForm.getPatientID());

				/*
				 * Sending patient a welcome as well as Appointment scheduled message on
				 * checking whether mobile no is available for that patient or not
				 */
				if (mobileNo == null || mobileNo == "") {
					System.out.println("Mobile no not found for patient.");
				} else {

					if (mobileNo.isEmpty()) {
						System.out.println("Mobile no not found for patient.");
					} else {

						/*
						 * Sending bill details SMS to patient
						 */
						smsSender.sendGeneralisedPrescriptionORBillSMS(patientForm.getVisitID(), mobileNo,
								loginForm.getPracticeID(), loginForm.getClinicID(), ActivityStatus.PRESCRIPTION,
								pdfOutFIleName);

					}

				}

			}

			boolean EmailCheck = util.verifyCommunicationCheck("emailPresc");

			if (EmailCheck) {

				/*
				 * Retrieving patient's email ID, if not null, then sending patient a welcome
				 * mail
				 */
				String emailID = patientDAOInf.retrievePatientEmailByID(patientForm.getPatientID());

				if (emailID == null || emailID == "") {
					System.out.println("EmailID no not found for patient.");
				} else {

					if (emailID.isEmpty()) {
						System.out.println("EmailID no not found for patient.");
					} else {

						/*
						 * Sending prescription mail to patient
						 */
						emailUtil.sendPrescriptionMail(patientForm.getPatientID(), loginForm.getPracticeID(),
								loginForm.getClinicID(), patientForm.getVisitID(), realPath, pdfOutFIleName, emailID);
					}

				}

			}

			/*
			 * Update appointment status to Prescription
			 */
			patientDAOInf.updatePrescriptionAppointmentStatus(patientForm.getPatientID(), patientForm.getAptID());

			/*
			 * retrieving patientList which contains visit details
			 */
			if (formNameArray[1].trim().equals("generalOPDEdit.jsp")
					|| formNameArray[1].trim().equals("telephonicEdit.jsp")
					|| formNameArray[1].trim().equals("physicianOPDEdit.jsp")
					|| formNameArray[1].trim().equals("generalPhysicianOPDEdit.jsp")
					|| formNameArray[1].trim().equals("generalPhysicianGokhaleOPDEdit.jsp")) {
				patientList = patientDAOInf.retrieveDefaultPatientDetails(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID(), patientForm.getAptID(),
						loginForm.getVisitTypeID());

			} else {
				String visitType = daoInf1.retrieveVisitTypeNameByID(loginForm.getVisitTypeID());
				System.out.println("visitype is ::" + visitType);

				patientList = patientDAOInf.retrieveLastEnteredVisitDetail(patientForm.getPatientID(), lastVisitID,
						loginForm.getClinicID(), visitType);
			}

			boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

			if (visitCheck) {
				billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
			} else {
				billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
						loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
			}

			/* Retrieve labReport List */
			labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
					loginForm.getClinicID());

			String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
			request.setAttribute("paymentType", paymentType);

			/*
			 * retrieving prescription list by visitID
			 */
			prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID());

			InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

			diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());
			/*
			 * retrieving symptomCheck list by visitID
			 */
			symptomList = patientDAOInf.retrievesymptomCheckList(patientForm.getVisitID());

			historyList = patientDAOInf.retrieveMedicalHistoryList(patientForm.getPatientID());

			medicationList = patientDAOInf.retrieveCurrentMedicationList(patientForm.getPatientID());

			complaintList = patientDAOInf.retrievecomplaintList(patientForm.getVisitID());

			categoryList = configurationUtil.getCategoryList();

			// Checking if the CRF form is for Gokhale clinic, if so then load the diagnosis
			// from the json file else load the diagnosis from the PVDiagnosis table
			if (formNameArray[1].trim().equals("generalPhysicianGokhaleOPDEdit.jsp")) {

				// Retrieving diagnosis list for the last visit ID
				orthoDiagnosisList = patientDAOInf.retrieveOrthoDiagnosisList(patientForm.getVisitID());

				JSONParser parser = new JSONParser();

				JSONArray diagnosisJSON = (JSONArray) parser
						.parse(new FileReader(realPath + File.separator + "ortho_charges.json"));

				for (Object jsonData : diagnosisJSON) {
					JSONObject data = (JSONObject) jsonData;

					// diagnoseList.put((String) data.get("rate"), (String) data.get("diagnosis"));
				}

			}
			diagnoseList = configurationUtil.getDiagnoseList();

			String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

			request.setAttribute("medicalCertiText", medicatCertificate);

			String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

			request.setAttribute("referralLetter", referralLetter);

			request.setAttribute("apptID", patientForm.getAptID());

			drugList = configurationUtil.getTradeNameList();

			InvestigationList = configurationUtil.getInvestigationList();

			frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

			doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

			hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Edit General Physician Prescription", loginForm.getUserID());

			System.out.println("Edit OPD JSP Page name for logged in user is ::: " + formNameArray[1].trim());

			// Setting add opd page name value in pageName variable
			setPageName(formNameArray[1].trim());

			return SUCCESS;

		} else if (message.equals("noVisit")) {

			addActionError("No visit added. Please add visit first.");

			String prescTabCheck = "enable";

			request.setAttribute("prescTabCheck", prescTabCheck);

			/*
			 * retrieving patientList which contains visit details
			 */
			if (formNameArray[1].trim().equals("generalOPDEdit.jsp")
					|| formNameArray[1].trim().equals("telephonicEdit.jsp")
					|| formNameArray[1].trim().equals("physicianOPDEdit.jsp")
					|| formNameArray[1].trim().equals("generalPhysicianOPDEdit.jsp")
					|| formNameArray[1].trim().equals("generalPhysicianGokhaleOPDEdit.jsp")) {
				patientList = patientDAOInf.retrieveDefaultPatientDetails(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID(), patientForm.getAptID(),
						loginForm.getVisitTypeID());
			} else {
				String visitType = daoInf1.retrieveVisitTypeNameByID(loginForm.getVisitTypeID());
				System.out.println("visitype is ::" + visitType);

				patientList = patientDAOInf.retrieveLastEnteredVisitDetail(patientForm.getPatientID(), lastVisitID,
						loginForm.getClinicID(), visitType);

			}
			hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

			/*
			 * retrieving prescription list by visitID
			 */
			prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID());

			InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

			diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());
			/*
			 * retrieving symptomCheck list by visitID
			 */
			symptomList = patientDAOInf.retrievesymptomCheckList(patientForm.getVisitID());

			historyList = patientDAOInf.retrieveMedicalHistoryList(patientForm.getPatientID());

			medicationList = patientDAOInf.retrieveCurrentMedicationList(patientForm.getPatientID());

			complaintList = patientDAOInf.retrievecomplaintList(patientForm.getVisitID());

			String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

			request.setAttribute("medicalCertiText", medicatCertificate);

			String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

			request.setAttribute("referralLetter", referralLetter);

			boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

			if (visitCheck) {
				billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
			} else {
				billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
						loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
			}

			/* Retrieve labReport List */
			labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
					loginForm.getClinicID());

			String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
			request.setAttribute("paymentType", paymentType);

			request.setAttribute("apptID", patientForm.getAptID());

			// Checking if the CRF form is for Gokhale clinic, if so then load the diagnosis
			// from the json file else load the diagnosis from the PVDiagnosis table
			if (formNameArray[1].trim().equals("generalPhysicianGokhaleOPDEdit.jsp")) {

				// Retrieving diagnosis list for the last visit ID
				orthoDiagnosisList = patientDAOInf.retrieveOrthoDiagnosisList(patientForm.getVisitID());

				JSONParser parser = new JSONParser();

				JSONArray diagnosisJSON = (JSONArray) parser
						.parse(new FileReader(realPath + File.separator + "ortho_charges.json"));

				for (Object jsonData : diagnosisJSON) {
					JSONObject data = (JSONObject) jsonData;

					// diagnoseList.put((String) data.get("rate"), (String) data.get("diagnosis"));
				}

			}
			diagnoseList = configurationUtil.getDiagnoseList();

			drugList = configurationUtil.getTradeNameList();

			InvestigationList = configurationUtil.getInvestigationList();

			frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

			categoryList = configurationUtil.getCategoryList();

			doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Edit General Physician Prescription Exception occurred",
					loginForm.getUserID());

			System.out.println("Edit OPD JSP Page name for logged in user is ::: " + formNameArray[1].trim());

			// Setting add opd page name value in pageName variable
			setPageName(formNameArray[1].trim());

			return ERROR;

		} else {

			addActionError(
					"Eexception occurred while adding prescription details. Please check server logs for more details.");

			String prescTabCheck = "enable";

			request.setAttribute("prescTabCheck", prescTabCheck);

			/*
			 * retrieving patientList which contains visit details
			 */
			if (formNameArray[1].trim().equals("generalOPDEdit.jsp")
					|| formNameArray[1].trim().equals("telephonicEdit.jsp")
					|| formNameArray[1].trim().equals("physicianOPDEdit.jsp")
					|| formNameArray[1].trim().equals("generalPhysicianOPDEdit.jsp")
					|| formNameArray[1].trim().equals("generalPhysicianGokhaleOPDEdit.jsp")) {
				patientList = patientDAOInf.retrieveDefaultPatientDetails(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID(), patientForm.getAptID(),
						loginForm.getVisitTypeID());
			} else {
				String visitType = daoInf1.retrieveVisitTypeNameByID(loginForm.getVisitTypeID());

				patientList = patientDAOInf.retrieveLastEnteredVisitDetail(patientForm.getPatientID(), lastVisitID,
						loginForm.getClinicID(), visitType);
			}

			hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

			request.setAttribute("apptID", patientForm.getAptID());

			boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

			if (visitCheck) {
				billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
			} else {
				billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
						loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
			}

			/*
			 * retrieving prescription list by visitID
			 */
			prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID());

			InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

			diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());
			/*
			 * retrieving symptomCheck list by visitID
			 */
			symptomList = patientDAOInf.retrievesymptomCheckList(patientForm.getVisitID());

			historyList = patientDAOInf.retrieveMedicalHistoryList(patientForm.getPatientID());

			medicationList = patientDAOInf.retrieveCurrentMedicationList(patientForm.getPatientID());

			complaintList = patientDAOInf.retrievecomplaintList(patientForm.getVisitID());

			String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

			request.setAttribute("medicalCertiText", medicatCertificate);

			String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

			request.setAttribute("referralLetter", referralLetter);

			/* Retrieve labReport List */
			labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
					loginForm.getClinicID());

			String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
			request.setAttribute("paymentType", paymentType);

			// Checking if the CRF form is for Gokhale clinic, if so then load the diagnosis
			// from the json file else load the diagnosis from the PVDiagnosis table
			if (formNameArray[1].trim().equals("generalPhysicianGokhaleOPDEdit.jsp")) {

				// Retrieving diagnosis list for the last visit ID
				orthoDiagnosisList = patientDAOInf.retrieveOrthoDiagnosisList(patientForm.getVisitID());

				JSONParser parser = new JSONParser();

				JSONArray diagnosisJSON = (JSONArray) parser
						.parse(new FileReader(realPath + File.separator + "ortho_charges.json"));

				for (Object jsonData : diagnosisJSON) {
					JSONObject data = (JSONObject) jsonData;

					// diagnoseList.put((String) data.get("rate"), (String) data.get("diagnosis"));
				}

			}
			diagnoseList = configurationUtil.getDiagnoseList();

			drugList = configurationUtil.getTradeNameList();

			InvestigationList = configurationUtil.getInvestigationList();

			categoryList = configurationUtil.getCategoryList();

			frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

			// chargeTypeList = configurationUtil.getChargeTypeList();

			doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Edit General Physician Prescription Exception occurred",
					loginForm.getUserID());

			System.out.println("EDit OPD JSP Page name for logged in user is ::: " + formNameArray[1].trim());

			// Setting add opd page name value in pageName variable
			setPageName(formNameArray[1].trim());

			return ERROR;
		}

	}

	/**
	 * 
	 * @return
	 * @throws Exception
	 */
	public String updatePrintGenPhyBilling() throws Exception {
		/*
		 * Getting user role from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");

		patientForm.setClinicID(loginForm.getClinicID());

		patientDAOInf = new PatientDAOImpl();

		System.out.println("Last visit ID : " + patientForm.getLastVisitID());

		ConvertToPDFUtil convertToPDFUtil = new ConvertToPDFUtil();

		String accessKey = xmlUtil.getAccessKey();

		String secreteKey = xmlUtil.getSecreteKey();

		AWSS3Connect awss3Connect = new AWSS3Connect();

		// getting input file location from S3 bucket
		String s3reportFilePath = xmlUtil.getS3RDMLReportFilePath();

		// getting s3 bucket name
		String bucketName = util.getS3BucketName();

		// getting s3 bucket region
		String bucketRegion = xmlUtil.getS3BucketRegion();

		String s3LogoFilePath = xmlUtil.getS3RDMLFilePath();

		AWSCredentials credentials = new BasicAWSCredentials(accessKey, secreteKey);

		AmazonS3 s3 = AmazonS3ClientBuilder.standard().withCredentials(new AWSStaticCredentialsProvider(credentials))
				.withRegion(bucketRegion).build();

		HttpServletRequest request = ServletActionContext.getRequest();

		ServletContext context = request.getServletContext();

		SMSSender smsSender = new SMSSender();

		EmailUtil emailUtil = new EmailUtil();

		String realPath = context.getRealPath("/");
		System.out.println("Real path is :: " + realPath);

		int lastVisitID = patientDAOInf.retrieveLastVisitID(patientForm.getPatientID(), loginForm.getClinicID());

		System.out.println("userid loginform is::" + loginForm.getUserID());
		String username = patientDAOInf.retrieveUsernameBYuserID(loginForm.getUserID());
		System.out.println("username loginform is ::" + username);

		String check1 = patientDAOInf.verifyReferralLetter(patientForm.getVisitID());
		System.out.println("check1 value in action:" + check1);
		request.setAttribute("referralLetterCheck", check1);

		String check = patientDAOInf.verifyMedicalCertificate(patientForm.getVisitID());
		System.out.println("check value in action:" + check);
		request.setAttribute("medicalCertiCheck", check);

		orthoBillItemList = patientDAOInf.retrieveOrthoBillingItemList(patientForm.getVisitID());

		// String pdfOutFIleName = realPath + patientForm.getFirstName() +
		// patientForm.getLastName()
		String pdfOutFIleName = patientForm.getFirstName() + patientForm.getLastName() + patientForm.getPatientID()
				+ "_" + patientForm.getVisitID() + "b.pdf";

		message = convertToPDFUtil.convertBillingPDF(patientForm.getPatientID(), patientForm.getVisitID(), realPath,
				pdfOutFIleName, loginForm.getClinicID(), loginForm.getPracticeID(), username, s3, s3LogoFilePath,
				bucketName);
		if (message.equalsIgnoreCase("success")) {

			File inputFile = new File(realPath + "/" + pdfOutFIleName);

			// Storing file to S3 RDML INPUT FILE location
			message = awss3Connect.pushFile(inputFile, pdfOutFIleName, bucketName, bucketRegion, s3reportFilePath);

			S3ObjectInputStream s3ObjectInputStream = s3
					.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, pdfOutFIleName))
					.getObjectContent();

			patientForm.setFileInputStream(s3ObjectInputStream);

			patientForm.setFileName(pdfOutFIleName);

			/*
			 * Retrieving patient's mobile no, if mobile is not null, then sending patient a
			 * welcome message
			 */
			String mobileNo = patientDAOInf.retrievePatientMobileNoByID(patientForm.getPatientID());
			System.out.println("mobile no. of patient::" + mobileNo);

			boolean SMSCheck1 = util.verifyCommunicationCheck("smsReviewForm");

			if (SMSCheck1) {
				/*
				 * Sending feedback SMS to patient
				 */
				smsSender.sendFeedbackSMS(mobileNo, patientForm.getPatientID(), loginForm.getPracticeID());
			}

			/*
			 * Retrieving patient's email ID, if not null, then sending patient a welcome
			 * mail
			 */
			String emailID = patientDAOInf.retrievePatientEmailByID(patientForm.getPatientID());
			System.out.println("mobile no. of patient::" + emailID);
			boolean EmailCheck1 = util.verifyCommunicationCheck("emailReviewForm");

			if (EmailCheck1) {

				/*
				 * Sending feedback email to patient
				 */
				emailUtil.sendFeedbackMail(patientForm.getPatientID(), emailID, loginForm.getPracticeID());
			}

			lastEneteredOpticianList = patientDAOInf.retrieveLastOpticianDetails(patientForm.getLastVisitID());

			lasteEnteredVisitList = patientDAOInf.retrieveLastEnteredVisitDetail(patientForm.getPatientID());

			String billingTabCheck = "enable";

			request.setAttribute("billingTabCheck", billingTabCheck);

			String dummy = "";

			request.setAttribute("lasteEnteredVisitList", dummy);

			request.setAttribute("lasteEnteredPrescList", dummy);

			request.setAttribute("opticianFloatCheck", "empty");

			patientList = patientDAOInf.retrieveExistingVisitList(patientForm.getPatientID(), patientForm.getVisitID());
			diagnoseList = configurationUtil.getDiagnoseList();

			drugList = configurationUtil.getTradeNameList();
			InvestigationList = configurationUtil.getInvestigationList();
			InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

			diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());
			frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

			String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

			System.out.println("medical certificate text is ::: " + medicatCertificate);

			request.setAttribute("medicalCertiText", medicatCertificate);

			String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

			request.setAttribute("referralLetter", referralLetter);

			chargeTypeList = configurationUtil.getChargeTypeList();

			doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

			/*
			 * Getting form name to be display based on logged in User
			 */
			String[] formNameArray = loginForm.getOPDJSPName().split("&");

			System.out.println("Update General physician Billing JSP Page name for logged in user is ::: "
					+ formNameArray[1].trim());

			// Setting add opd page name value in pageName variable
			setPageName(formNameArray[1].trim());

			return SUCCESS;
		} else {
			addActionError("Failed to print billing check server logs for more details.");

			lastEneteredOpticianList = patientDAOInf.retrieveLastOpticianDetails(patientForm.getLastVisitID());

			patientList = patientDAOInf.retrieveExistingVisitList(patientForm.getPatientID(), patientForm.getVisitID());
			diagnoseList = configurationUtil.getDiagnoseList();

			drugList = configurationUtil.getTradeNameList();

			InvestigationList = configurationUtil.getInvestigationList();

			InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

			diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());

			frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

			String billingTabCheck = "enable";

			request.setAttribute("billingTabCheck", billingTabCheck);

			String dummy = "";

			request.setAttribute("lasteEnteredVisitList", dummy);

			request.setAttribute("lasteEnteredPrescList", dummy);

			request.setAttribute("opticianFloatCheck", "empty");

			String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

			System.out.println("medical certificate text is ::: " + medicatCertificate);

			request.setAttribute("medicalCertiText", medicatCertificate);

			String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

			request.setAttribute("referralLetter", referralLetter);

			chargeTypeList = configurationUtil.getChargeTypeList();

			doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

			/*
			 * Getting form name to be display based on logged in User
			 */
			String[] formNameArray = loginForm.getOPDJSPName().split("&");

			System.out.println("Update General physician Billing JSP Page name for logged in user is ::: "
					+ formNameArray[1].trim());

			// Setting add opd page name value in pageName variable
			setPageName(formNameArray[1].trim());

			return ERROR;
		}

	}

	/**
	 * 
	 * @return
	 * @throws Exception
	 */
	public String printOPDPrescription() throws Exception {
		/*
		 * Getting user role from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");

		patientDAOInf = new PatientDAOImpl();

		ClinicDAOInf daoInf1 = new ClinicDAOImpl();

		ConvertToPDFUtil convertToPDFUtil = new ConvertToPDFUtil();

		String accessKey = xmlUtil.getAccessKey();

		String secreteKey = xmlUtil.getSecreteKey();

		AWSS3Connect awss3Connect = new AWSS3Connect();

		// getting input file location from S3 bucket
		String s3reportFilePath = xmlUtil.getS3RDMLReportFilePath();

		// getting s3 bucket name
		String bucketName = util.getS3BucketName();

		// getting s3 bucket region
		String bucketRegion = xmlUtil.getS3BucketRegion();

		String s3LogoFilePath = xmlUtil.getS3RDMLFilePath();

		AWSCredentials credentials = new BasicAWSCredentials(accessKey, secreteKey);

		AmazonS3 s3 = AmazonS3ClientBuilder.standard().withCredentials(new AWSStaticCredentialsProvider(credentials))
				.withRegion(bucketRegion).build();

		HttpServletRequest request = ServletActionContext.getRequest();

		ServletContext context = request.getServletContext();

		String realPath = context.getRealPath("/");
		System.out.println("Real path is :: " + realPath);

		int nextVisitDays = patientDAOInf.retrieveNextVisitDays(loginForm.getVisitTypeID());

		/*
		 * Updating nextVisitDays value into Visit table before creating pdf for OPD
		 * prescription
		 */
		patientDAOInf.updateNextVisitDays(patientForm);

		orthoBillItemList = patientDAOInf.retrieveOrthoBillingItemList(patientForm.getVisitID());

		// String pdfOutFIleName = realPath + patientForm.getFirstName() +
		// patientForm.getLastName()
		String pdfOutFIleName = patientForm.getFirstName() + patientForm.getLastName() + patientForm.getPatientID()
				+ "_" + patientForm.getVisitID() + "p.pdf";

		message = convertToPDFUtil.convertOPDPrescriptionPDF(patientForm.getPatientID(), patientForm.getVisitID(),
				realPath, pdfOutFIleName, s3, s3LogoFilePath, bucketName);
		if (message.equalsIgnoreCase("success")) {

			File inputFile = new File(realPath + "/" + pdfOutFIleName);

			// Storing file to S3 RDML INPUT FILE location
			message = awss3Connect.pushFile(inputFile, pdfOutFIleName, bucketName, bucketRegion, s3reportFilePath);

			S3ObjectInputStream s3ObjectInputStream = s3
					.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, pdfOutFIleName))
					.getObjectContent();

			patientForm.setFileInputStream(s3ObjectInputStream);

			patientForm.setFileName(pdfOutFIleName);

			lastEneteredOpticianList = patientDAOInf.retrieveLastOpticianDetails(patientForm.getLastVisitID());

			lasteEnteredVisitList = patientDAOInf.retrieveLastEnteredVisitDetail(patientForm.getPatientID());

			String dummy = "success";

			String prescTabCheck = "enable";

			request.setAttribute("prescTabCheck", prescTabCheck);

			request.setAttribute("lasteEnteredVisitList", dummy);

			request.setAttribute("opticianFloatCheck", "empty");

			String visitType = daoInf1.retrieveVisitTypeNameByID(loginForm.getVisitTypeID());

			patientList = patientDAOInf.retrieveLastEnteredVisitDetail(patientForm.getPatientID(),
					patientForm.getLastVisitID(), loginForm.getClinicID(), visitType);
			diagnoseList = configurationUtil.getDiagnoseList();

			drugList = configurationUtil.getTradeNameList();

			InvestigationList = configurationUtil.getInvestigationList();

			frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

			chargeTypeList = configurationUtil.getChargeTypeList();

			doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

			/*
			 * Getting form name to be display based on logged in User
			 */
			String[] formNameArray = loginForm.getOPDJSPName().split("&");

			System.out.println(
					"Print OPD prescription JSP Page name for logged in user is ::: " + formNameArray[0].trim());

			// Setting add opd page name value in pageName variable
			setPageName(formNameArray[0].trim());

			return SUCCESS;

		} else {
			addActionError("Failed to print OPD Prescription.Please check server logs for more details.");

			lastEneteredOpticianList = patientDAOInf.retrieveLastOpticianDetails(patientForm.getLastVisitID());

			String visitType = daoInf1.retrieveVisitTypeNameByID(loginForm.getVisitTypeID());

			patientList = patientDAOInf.retrieveLastEnteredVisitDetail(patientForm.getPatientID(),
					patientForm.getLastVisitID(), loginForm.getClinicID(), visitType);
			diagnoseList = configurationUtil.getDiagnoseList();

			drugList = configurationUtil.getTradeNameList();

			InvestigationList = configurationUtil.getInvestigationList();

			frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

			String dummy = "success";

			String prescTabCheck = "enable";

			request.setAttribute("prescTabCheck", prescTabCheck);

			request.setAttribute("lasteEnteredVisitList", dummy);

			request.setAttribute("opticianFloatCheck", "empty");

			chargeTypeList = configurationUtil.getChargeTypeList();

			doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

			/*
			 * Getting form name to be display based on logged in User
			 */
			String[] formNameArray = loginForm.getOPDJSPName().split("&");

			System.out.println(
					"Print OPD prescription JSP Page name for logged in user is ::: " + formNameArray[0].trim());

			// Setting add opd page name value in pageName variable
			setPageName(formNameArray[0].trim());

			return ERROR;
		}

	}

	/**
	 * 
	 * @return
	 * @throws Exception
	 */
	public String updatePrintOPDPrescription() throws Exception {
		/*
		 * Getting user role from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");

		patientDAOInf = new PatientDAOImpl();

		ConvertToPDFUtil convertToPDFUtil = new ConvertToPDFUtil();

		String accessKey = xmlUtil.getAccessKey();

		String secreteKey = xmlUtil.getSecreteKey();

		AWSS3Connect awss3Connect = new AWSS3Connect();

		// getting input file location from S3 bucket
		String s3reportFilePath = xmlUtil.getS3RDMLReportFilePath();

		// getting s3 bucket name
		String bucketName = util.getS3BucketName();

		// getting s3 bucket region
		String bucketRegion = xmlUtil.getS3BucketRegion();

		String s3LogoFilePath = xmlUtil.getS3RDMLFilePath();

		AWSCredentials credentials = new BasicAWSCredentials(accessKey, secreteKey);

		AmazonS3 s3 = AmazonS3ClientBuilder.standard().withCredentials(new AWSStaticCredentialsProvider(credentials))
				.withRegion(bucketRegion).build();

		HttpServletRequest request = ServletActionContext.getRequest();

		ServletContext context = request.getServletContext();

		String realPath = context.getRealPath("/");
		System.out.println("Real path is :: " + realPath);

		/*
		 * Updating nextVisitDays value into Visit table before creating pdf for OPD
		 * prescription
		 */
		patientDAOInf.updateNextVisitDays(patientForm);

		orthoBillItemList = patientDAOInf.retrieveOrthoBillingItemList(patientForm.getVisitID());

		// String pdfOutFIleName = realPath + patientForm.getFirstName() +
		// patientForm.getLastName()
		String pdfOutFIleName = patientForm.getFirstName() + patientForm.getLastName() + patientForm.getPatientID()
				+ "_" + patientForm.getVisitID() + "p.pdf";

		message = convertToPDFUtil.convertOPDPrescriptionPDF(patientForm.getPatientID(), patientForm.getVisitID(),
				realPath, pdfOutFIleName, s3, s3LogoFilePath, bucketName);
		if (message.equalsIgnoreCase("success")) {

			File inputFile = new File(realPath + "/" + pdfOutFIleName);

			// Storing file to S3 RDML INPUT FILE location
			message = awss3Connect.pushFile(inputFile, pdfOutFIleName, bucketName, bucketRegion, s3reportFilePath);

			S3ObjectInputStream s3ObjectInputStream = s3
					.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, pdfOutFIleName))
					.getObjectContent();

			patientForm.setFileInputStream(s3ObjectInputStream);

			patientForm.setFileName(pdfOutFIleName);

			lastEneteredOpticianList = patientDAOInf.retrieveLastOpticianDetails(patientForm.getLastVisitID());

			lasteEnteredVisitList = patientDAOInf.retrieveLastEnteredVisitDetail(patientForm.getPatientID());

			String dummy = "success";

			String prescTabCheck = "enable";

			request.setAttribute("prescTabCheck", prescTabCheck);

			request.setAttribute("lasteEnteredVisitList", dummy);

			request.setAttribute("opticianFloatCheck", "empty");

			patientList = patientDAOInf.retrieveExistingVisitList(patientForm.getPatientID(), patientForm.getVisitID());
			diagnoseList = configurationUtil.getDiagnoseList();

			request.setAttribute("apptID", patientForm.getAptID());

			drugList = configurationUtil.getTradeNameList();

			InvestigationList = configurationUtil.getInvestigationList();

			frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

			String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

			System.out.println("medical certificate text is ::: " + medicatCertificate);

			request.setAttribute("medicalCertiText", medicatCertificate);

			String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

			request.setAttribute("referralLetter", referralLetter);

			chargeTypeList = configurationUtil.getChargeTypeList();

			doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

			/*
			 * Getting form name to be display based on logged in User
			 */
			String[] formNameArray = loginForm.getOPDJSPName().split("&");

			System.out.println(
					"Update Print OPD prescription JSP Page name for logged in user is ::: " + formNameArray[1].trim());

			// Setting add opd page name value in pageName variable
			setPageName(formNameArray[1].trim());

			return SUCCESS;

		} else {
			addActionError("Failed to print Prescription.Please check server logs for more details.");

			lastEneteredOpticianList = patientDAOInf.retrieveLastOpticianDetails(patientForm.getLastVisitID());

			patientList = patientDAOInf.retrieveExistingVisitList(patientForm.getPatientID(), patientForm.getVisitID());
			diagnoseList = configurationUtil.getDiagnoseList();

			drugList = configurationUtil.getTradeNameList();

			InvestigationList = configurationUtil.getInvestigationList();

			frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

			String dummy = "success";

			String prescTabCheck = "enable";

			request.setAttribute("prescTabCheck", prescTabCheck);

			request.setAttribute("lasteEnteredVisitList", dummy);

			request.setAttribute("opticianFloatCheck", "empty");

			String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

			System.out.println("medical certificate text is ::: " + medicatCertificate);

			request.setAttribute("medicalCertiText", medicatCertificate);

			String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

			request.setAttribute("referralLetter", referralLetter);

			request.setAttribute("apptID", patientForm.getAptID());

			chargeTypeList = configurationUtil.getChargeTypeList();

			doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

			/*
			 * Getting form name to be display based on logged in User
			 */
			String[] formNameArray = loginForm.getOPDJSPName().split("&");

			System.out.println(
					"Update Print OPD prescription JSP Page name for logged in user is ::: " + formNameArray[1].trim());

			// Setting add opd page name value in pageName variable
			setPageName(formNameArray[1].trim());

			return ERROR;
		}
	}

	/**
	 * 
	 * @return
	 * @throws Exception
	 */
	public String printIPDForm() throws Exception {
		patientDAOInf = new PatientDAOImpl();

		ConvertToPDFUtil convertToPDFUtil = new ConvertToPDFUtil();

		String accessKey = xmlUtil.getAccessKey();

		String secreteKey = xmlUtil.getSecreteKey();

		AWSS3Connect awss3Connect = new AWSS3Connect();

		// getting input file location from S3 bucket
		String s3reportFilePath = xmlUtil.getS3RDMLReportFilePath();

		// getting s3 bucket name
		String bucketName = util.getS3BucketName();

		// getting s3 bucket region
		String bucketRegion = xmlUtil.getS3BucketRegion();

		String s3LogoFilePath = xmlUtil.getS3RDMLFilePath();

		AWSCredentials credentials = new BasicAWSCredentials(accessKey, secreteKey);

		AmazonS3 s3 = AmazonS3ClientBuilder.standard().withCredentials(new AWSStaticCredentialsProvider(credentials))
				.withRegion(bucketRegion).build();

		/*
		 * Getting user role from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");

		HttpServletRequest request = ServletActionContext.getRequest();

		ServletContext context = request.getServletContext();

		String realPath = context.getRealPath("/");
		System.out.println("Real path is :: " + realPath);

		// String pdfOutFIleName = realPath + patientForm.getFirstName() +
		// patientForm.getLastName()
		String pdfOutFIleName = patientForm.getFirstName() + patientForm.getLastName() + patientForm.getPatientID()
				+ "_" + patientForm.getVisitID() + "ipd.pdf";

		message = convertToPDFUtil.printBlankIPDPDF(patientForm.getPatientID(), patientForm.getVisitID(),
				pdfOutFIleName, realPath, s3, s3LogoFilePath, bucketName);

		if (message.equalsIgnoreCase("success")) {

			// adding data to maintain visit edit history
			patientForm.setAction("Add");
			patientForm.setVisitType("IPD");
			patientForm.setUserID(loginForm.getUserID());
			patientForm.setClinicID(loginForm.getClinicID());

			patientDAOInf.insertVisitEditHistoryDetails(patientForm);

			File inputFile = new File(realPath + "/" + pdfOutFIleName);

			// Storing file to S3 RDML INPUT FILE location message =
			awss3Connect.pushFile(inputFile, pdfOutFIleName, bucketName, bucketRegion, s3reportFilePath);

			S3ObjectInputStream s3ObjectInputStream = s3
					.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, pdfOutFIleName))
					.getObjectContent();

			patientForm.setFileInputStream(s3ObjectInputStream);

			patientForm.setFileName(pdfOutFIleName);

			String lastEneteredVisitList = "success";

			request.setAttribute("lastEneteredVisitList", lastEneteredVisitList);

			String dummy = "success";

			request.setAttribute("lasteEnteredVisitList", dummy);

			String ipdVisitPage = "display";

			request.setAttribute("display", ipdVisitPage);

			String investigationOECheck = "empty";

			request.setAttribute("investigationOECheck", investigationOECheck);

			patientList = patientDAOInf.retireveLastEneteredIPDVisit(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID());

			IPDComplaintsList = patientDAOInf.retrieveIPDComplaintsList(patientForm.getVisitID());

			IPDContinuationSheetList = patientDAOInf.retrieveIPDContinuationSheetList(patientForm.getVisitID());

			diagnoseList = configurationUtil.getDiagnoseList();

			LabInvastigationList = new ArrayList<PatientForm>();
			request.setAttribute("LabInvastigationList", LabInvastigationList);

			boolean hasConsent = patientDAOInf.verifyhasConsentValue(loginForm.getVisitTypeID());

			if (hasConsent) {

				String consentDocFileName = patientDAOInf.retrieveConsentDocFileName(loginForm.getVisitTypeID());

				request.setAttribute("consentDocFileName", consentDocFileName);
			}

			/*
			 * Getting form name to be display based on logged in User
			 */
			String[] formNameArray = loginForm.getOPDJSPName().split("&");

			System.out.println("Add IPD JSP Page name for logged in user is ::: " + formNameArray[0].trim());

			// Setting add ipd page name value in pageName variable
			setPageName(formNameArray[0].trim());

			return SUCCESS;
		} else {
			addActionError("Failed to print IPD form. Please check logs for more details.");

			String lastEneteredVisitList = "success";

			request.setAttribute("lastEneteredVisitList", lastEneteredVisitList);

			patientList = patientDAOInf.retireveLastEneteredIPDVisit(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID());

			String dummy = "success";

			request.setAttribute("lasteEnteredVisitList", dummy);

			String ipdVisitPage = "display";

			request.setAttribute("display", ipdVisitPage);

			// patientList.add(patientForm);

			IPDComplaintsList = patientDAOInf.retrieveIPDComplaintsList(patientForm.getVisitID());

			IPDContinuationSheetList = patientDAOInf.retrieveIPDContinuationSheetList(patientForm.getVisitID());

			diagnoseList = configurationUtil.getDiagnoseList();

			LabInvastigationList = new ArrayList<PatientForm>();
			request.setAttribute("LabInvastigationList", LabInvastigationList);

			/*
			 * Getting form name to be display based on logged in User
			 */
			String[] formNameArray = loginForm.getOPDJSPName().split("&");

			System.out.println("Add IPD JSP Page name for logged in user is ::: " + formNameArray[0].trim());

			// Setting add ipd page name value in pageName variable
			setPageName(formNameArray[0].trim());

			return ERROR;
		}

	}

	/**
	 * 
	 * @return
	 * @throws Exception
	 */
	public String updatePrintIPDForm() throws Exception {
		patientDAOInf = new PatientDAOImpl();

		ConvertToPDFUtil convertToPDFUtil = new ConvertToPDFUtil();

		String accessKey = xmlUtil.getAccessKey();

		String secreteKey = xmlUtil.getSecreteKey();

		AWSS3Connect awss3Connect = new AWSS3Connect();

		// getting input file location from S3 bucket
		String s3reportFilePath = xmlUtil.getS3RDMLReportFilePath();

		// getting s3 bucket name
		String bucketName = util.getS3BucketName();

		// getting s3 bucket region
		String bucketRegion = xmlUtil.getS3BucketRegion();

		String s3LogoFilePath = xmlUtil.getS3RDMLFilePath();

		AWSCredentials credentials = new BasicAWSCredentials(accessKey, secreteKey);

		AmazonS3 s3 = AmazonS3ClientBuilder.standard().withCredentials(new AWSStaticCredentialsProvider(credentials))
				.withRegion(bucketRegion).build();

		/*
		 * Getting user role from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");

		HttpServletRequest request = ServletActionContext.getRequest();

		ServletContext context = request.getServletContext();

		String realPath = context.getRealPath("/");
		System.out.println("Real path is :: " + realPath);

		// String pdfOutFIleName = realPath + patientForm.getFirstName() +
		// patientForm.getLastName()
		String pdfOutFIleName = patientForm.getFirstName() + patientForm.getLastName() + patientForm.getPatientID()
				+ "_" + patientForm.getVisitID() + "ipd.pdf";

		message = convertToPDFUtil.printBlankIPDPDF(patientForm.getPatientID(), patientForm.getVisitID(),
				pdfOutFIleName, realPath, s3, s3LogoFilePath, bucketName);

		if (message.equalsIgnoreCase("success")) {

			File inputFile = new File(realPath + "/" + pdfOutFIleName);

			// Storing file to S3 RDML INPUT FILE location
			message = awss3Connect.pushFile(inputFile, pdfOutFIleName, bucketName, bucketRegion, s3reportFilePath);

			S3ObjectInputStream s3ObjectInputStream = s3
					.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, pdfOutFIleName))
					.getObjectContent();

			patientForm.setFileInputStream(s3ObjectInputStream);

			patientForm.setFileName(pdfOutFIleName);

			String lastEneteredVisitList = "success";

			request.setAttribute("lastEneteredVisitList", lastEneteredVisitList);

			String dummy = "success";

			request.setAttribute("lasteEnteredVisitList", dummy);

			String ipdVisitPage = "display";

			request.setAttribute("display", ipdVisitPage);

			String investigationOECheck = "empty";

			request.setAttribute("investigationOECheck", investigationOECheck);

			patientList = new ArrayList<PatientForm>();

			patientList.add(patientForm);

			IPDComplaintsList = patientDAOInf.retrieveIPDComplaintsList(patientForm.getVisitID());

			IPDContinuationSheetList = patientDAOInf.retrieveIPDContinuationSheetList(patientForm.getVisitID());

			diagnoseList = configurationUtil.getDiagnoseList();

			LabInvastigationList = patientDAOInf.reytrieveLabInvastigationLstByVisitID(patientForm.getVisitID());

			request.setAttribute("LabInvastigationList", LabInvastigationList);

			/*
			 * Getting form name to be display based on logged in User
			 */
			String[] formNameArray = loginForm.getOPDJSPName().split("&");

			System.out.println("Edit IPD JSP Page name for logged in user is ::: " + formNameArray[1].trim());

			// Setting add ipd page name value in pageName variable
			setPageName(formNameArray[1].trim());

			return SUCCESS;
		} else {
			addActionError("Failed to print IPD form. Please check logs for more details.");

			String lastEneteredVisitList = "success";

			request.setAttribute("lastEneteredVisitList", lastEneteredVisitList);

			patientList = new ArrayList<PatientForm>();

			String dummy = "success";

			request.setAttribute("lasteEnteredVisitList", dummy);

			String ipdVisitPage = "display";

			request.setAttribute("display", ipdVisitPage);

			patientList.add(patientForm);

			IPDComplaintsList = patientDAOInf.retrieveIPDComplaintsList(patientForm.getVisitID());

			IPDContinuationSheetList = patientDAOInf.retrieveIPDContinuationSheetList(patientForm.getVisitID());

			diagnoseList = configurationUtil.getDiagnoseList();

			LabInvastigationList = patientDAOInf.reytrieveLabInvastigationLstByVisitID(patientForm.getVisitID());

			request.setAttribute("LabInvastigationList", LabInvastigationList);

			/*
			 * Getting form name to be display based on logged in User
			 */
			String[] formNameArray = loginForm.getOPDJSPName().split("&");

			System.out.println("Add IPD JSP Page name for logged in user is ::: " + formNameArray[1].trim());

			// Setting add ipd page name value in pageName variable
			setPageName(formNameArray[1].trim());

			return ERROR;
		}

	}

	/**
	 * 
	 * @return
	 * @throws Exception
	 */
	public String viewLastOPDVisitDetails() throws Exception {
		patientDAOInf = new PatientDAOImpl();

		/*
		 * Getting user role from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");

		/*
		 * Retrieving last entered visitID for careType OPD
		 */
		int lastOPDVisitID = patientDAOInf.retrieveLastOPDVisitIDByPatientID(patientForm.getPatientID(),
				loginForm.getClinicID());

		/*
		 * Storing patientID and visitID into temporary variable
		 */
		int tempPatientID = patientForm.getPatientID();
		int tempVisitID = patientForm.getVisitID();

		/*
		 * Verify how many visits are added for current patient, if only one visit is
		 * added then use that visit id for further process else use lastOPDVisitID
		 * variable
		 */
		List<Integer> visitCountList = patientDAOInf.verifyVisitForPatientByPatientID(patientForm.getPatientID());

		System.out.println("Size of visit count list is :::: " + visitCountList.size());

		if (visitCountList.size() <= 1) {

			System.out.println("visit count list size is one......");

			/*
			 * Retrieving lastOPD Visit details
			 */
			patientList = patientDAOInf.retrieveLastOPDVisitDetails(tempVisitID);

			System.out.println("PatientID and VisitID is ::: " + tempPatientID + " : " + tempVisitID);

			/*
			 * Retrieving last prscription details
			 */
			prescriptionList = patientDAOInf.retrievePrescriptionList(tempPatientID, tempVisitID,
					loginForm.getClinicID());

			return SUCCESS;

		} else {
			System.out.println("visit count list size is more than one......");

			System.out.println("Last entered visitID for care type OPD is ::: " + lastOPDVisitID);

			if (patientForm.getSourceType().equals("all")) {
				/*
				 * Retrieving lastOPD Visit details
				 */
				patientList = patientDAOInf.retrieveAllOPDVisitDetails(tempPatientID, loginForm.getClinicID());

				System.out.println("PatientID and VisitID is ::: " + tempPatientID + " : " + tempVisitID);

				/*
				 * Retrieving last prscription details
				 */
				prescriptionList = patientDAOInf.retrieveAllPatientPrescriptionList(tempPatientID,
						loginForm.getClinicID());
			} else {
				/*
				 * Retrieving lastOPD Visit details
				 */
				patientList = patientDAOInf.retrieveLastOPDVisitDetails(lastOPDVisitID);

				System.out.println("PatientID and VisitID is ::: " + tempPatientID + " : " + tempVisitID);

				/*
				 * Retrieving last prscription details
				 */
				prescriptionList = patientDAOInf.retrievePrescriptionList(tempPatientID, lastOPDVisitID,
						loginForm.getClinicID());
			}

			return SUCCESS;

		}

	}

	/**
	 * 
	 * @return
	 * @throws Exception
	 */
	public String addLabReport() throws Exception {
		/*
		 * Getting user role from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");

		RegistrationDAOinf registrationDAOinf = new RegistrationDAOImpl();

		serviceInf = new eDhanvantariServiceImpl();
		patientDAOInf = new PatientDAOImpl();

		PrescriptionManagementDAOInf managementDAOInf = new PrescriptionManagementDAOImpl();

		LoginDAOInf daoInf = new LoginDAOImpl();

		String accessKey = xmlUtil.getAccessKey();

		String secreteKey = xmlUtil.getSecreteKey();

		AWSS3Connect awss3Connect = new AWSS3Connect();

		// getting input file location from S3 bucket
		String s3reportFilePath = xmlUtil.getS3RDMLReportFilePath();

		// getting s3 bucket name
		String bucketName = util.getS3BucketName();

		// getting s3 bucket region
		String bucketRegion = xmlUtil.getS3BucketRegion();

		// Set the presigned URL to expire after one hour.
		java.util.Date expiration = new java.util.Date();
		long expTimeMillis = expiration.getTime();
		expTimeMillis += 1000 * 60 * 60;
		expiration.setTime(expTimeMillis);

		AWSCredentials credentials = new BasicAWSCredentials(accessKey, secreteKey);

		AmazonS3 s3 = AmazonS3ClientBuilder.standard().withCredentials(new AWSStaticCredentialsProvider(credentials))
				.withRegion(bucketRegion).build();

		String[] formNameArray = loginForm.getOPDJSPName().split("&");
		/*
		 * Getting context path
		 */
		ServletContext context = request.getServletContext();

		String realPath = context.getRealPath("/");

		String check1 = patientDAOInf.verifyReferralLetter(patientForm.getVisitID());
		System.out.println("check1 value in action:" + check1);
		request.setAttribute("referralLetterCheck", check1);

		String check = patientDAOInf.verifyMedicalCertificate(patientForm.getVisitID());
		System.out.println("check value in action:" + check);
		request.setAttribute("medicalCertiCheck", check);

		orthoBillItemList = patientDAOInf.retrieveOrthoBillingItemList(patientForm.getVisitID());

		/*
		 * Checking whether vistId is 0, if yes, then give error msg saying No visit
		 * added. Please add visit first else proceed further to upload lab report files
		 */
		if (patientForm.getVisitID() == 0) {

			addActionError("No visit added. Please add visit first.");

			String labReportTabEnable = "Enable";

			request.setAttribute("labReportTabEnable", labReportTabEnable);

			/*
			 * retrieving patientList which contains visit details
			 */
			patientList = patientDAOInf.retrieveDefaultPatientDetails(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID(), patientForm.getAptID(),
					loginForm.getVisitTypeID());

			String dummy = "";

			request.setAttribute("printAvailable", "No");

			request.setAttribute("lasteEnteredVisitList", "success");

			request.setAttribute("lasteEnteredPrescList", "");

			request.setAttribute("lasteEnteredBillList", "");

			request.setAttribute("labReportResult", "Error");

			String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

			request.setAttribute("medicalCertiText", medicatCertificate);

			String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

			request.setAttribute("referralLetter", referralLetter);

			boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

			if (visitCheck) {
				billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
			} else {
				billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
						loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
			}

			OPDChargesList = managementDAOInf.retrieveAllOPDCharges(loginForm.getPracticeID());
			request.setAttribute("OPDChargesList", OPDChargesList);

			String ChargesDetails = managementDAOInf.retrieveOPDChargesDetailsByReceiptID(patientForm.getVisitID());
			request.setAttribute("ChargesDetails", ChargesDetails);

			LabTestList = managementDAOInf.retrieveAllLabTests(loginForm.getPracticeID());
			request.setAttribute("LabTestList", LabTestList);

			String InvestigationDetails = managementDAOInf
					.retrieveInvestigationDetailsByVisitID(patientForm.getVisitID());
			request.setAttribute("InvestigationDetails", InvestigationDetails);

			// retrieving present complaint list for last visit of patient
			String complaintList1 = patientDAOInf.retrievePresentComplaintsOfLastVisit(patientForm.getVisitID());

			request.setAttribute("complaintList", complaintList1);

			/* HashMap<String, String> PVComplaints = patientDAOInf.getPVComplaints(); */

			PVComplaints = patientDAOInf.getPVComplaints();

			String categoryList1 = patientDAOInf.retrieveCategoryListOfLastVisit(patientForm.getVisitID());
			request.setAttribute("categoryList", categoryList1);

			MedicalHistory = patientDAOInf.retrievemedicalHistoryListOfLastVisit(patientForm,
					patientForm.getPatientID());
			request.setAttribute("MedicalHistory", MedicalHistory);

			FamilyHistory = patientDAOInf.retrieveFamilyHistoryListOfLastVisit(patientForm, patientForm.getPatientID());
			request.setAttribute("FamilyHistory", FamilyHistory);

			PersonalHistory = patientDAOInf.retrievePersonalHistoryListOfLastVisit(patientForm,
					patientForm.getPatientID());
			request.setAttribute("PersonalHistory", PersonalHistory);

			onEaminationList = patientDAOInf.retrieveOnExaminationListByVisitID(patientForm.getVisitID());
			request.setAttribute("onEaminationList", onEaminationList);

			InjectionPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID(), "Injection");
			InjectionList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Injection");

			TabletPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID(), "Tablet");
			TabletList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Tablet");

			LiquidPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID(), "Liquid");
			LiquidList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Liquid");

			frequencyList = configurationUtil.getFrequencyList();

			reportList = configurationUtil.getRepostList(loginForm.getVisitTypeID());
			/*
			 * retrieving prescription list by visitID
			 */
			prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID());

			/* Retrieve labReport List */
			labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
					loginForm.getClinicID());

			/*
			 * retrieving symptomCheck list by visitID
			 */
			symptomList = patientDAOInf.retrievesymptomCheckList(patientForm.getVisitID());

			complaintList = patientDAOInf.retrievecomplaintList(patientForm.getVisitID());

			String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
			request.setAttribute("paymentType", paymentType);

			// Checking if the CRF form is for Gokhale clinic, if so then load the diagnosis
			// from the json file else load the diagnosis from the PVDiagnosis table
			if (formNameArray[0].trim().equals("generalPhysicianGokhaleOPD.jsp")) {

				// Retrieving diagnosis list for the last visit ID
				orthoDiagnosisList = patientDAOInf.retrieveOrthoDiagnosisList(patientForm.getVisitID());

				JSONParser parser = new JSONParser();

				JSONArray diagnosisJSON = (JSONArray) parser
						.parse(new FileReader(realPath + File.separator + "ortho_charges.json"));

				for (Object jsonData : diagnosisJSON) {
					JSONObject data = (JSONObject) jsonData;

					// diagnoseList.put((String) data.get("rate"), (String) data.get("diagnosis"));
				}

			}
			diagnoseList = configurationUtil.getDiagnoseList();

			request.setAttribute("apptID", patientForm.getAptID());

			drugList = configurationUtil.getTradeNameList();

			InvestigationList = configurationUtil.getInvestigationList();

			InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

			diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());

			historyList = patientDAOInf.retrieveMedicalHistoryList(patientForm.getPatientID());

			medicationList = patientDAOInf.retrieveCurrentMedicationList(patientForm.getPatientID());

			categoryList = configurationUtil.getCategoryList();

			frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

			// chargeTypeList = configurationUtil.getChargeTypeList();

			doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

			hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Add Lab Report Exception Occurred", loginForm.getUserID());

			System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[0].trim());

			// Setting add opd page name value in pageName variable
			setPageName(formNameArray[0].trim());

			return ERROR;

		} else {

			message = serviceInf.addLabReport(patientForm, realPath);
			if (message.equalsIgnoreCase("success")) {

				addActionMessage("Successfully added lab reports details.");

				String labReportTabEnable = "Enable";

				request.setAttribute("labReportTabEnable", labReportTabEnable);

				request.setAttribute("labReportResult", "Success");

				request.setAttribute("printAvailable", "No");

				String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

				request.setAttribute("medicalCertiText", medicatCertificate);

				String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

				request.setAttribute("referralLetter", referralLetter);

				boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

				if (visitCheck) {
					billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
				} else {
					billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
							loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
				}

				if (formNameArray[0].trim().equals("genaralClinicOPDNew.jsp")) {
					patientList = patientDAOInf.retrieveGeneralClinicPatientDetails(patientForm.getPatientID(),
							patientForm.getVisitID(), loginForm.getClinicID());

				} else if (formNameArray[0].trim().equals("genaralClinicIPDNew.jsp")) {
					patientList = patientDAOInf.retrieveGenaralClinicPatientDetailsForIPDVisit(
							patientForm.getPatientID(), patientForm.getVisitID(), loginForm.getClinicID());
				} else {
					/*
					 * retrieving patientList which contains visit details
					 */
					patientList = patientDAOInf.retrieveDefaultPatientDetails(patientForm.getPatientID(),
							patientForm.getVisitID(), loginForm.getClinicID(), patientForm.getAptID(),
							loginForm.getVisitTypeID());
				}
				// String dummy = "";
				String dummy = "";

				request.setAttribute("lasteEnteredVisitList", "success");

				request.setAttribute("lasteEnteredPrescList", "success");

				request.setAttribute("lasteEnteredBillList", "success");
				/*
				 * retrieving prescription list by visitID
				 */
				prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID());

				/* Retrieve labReport List */
				labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
						loginForm.getClinicID());

				OPDChargesList = managementDAOInf.retrieveAllOPDCharges(loginForm.getPracticeID());
				request.setAttribute("OPDChargesList", OPDChargesList);

				String ChargesDetails = managementDAOInf.retrieveOPDChargesDetailsByReceiptID(patientForm.getVisitID());
				request.setAttribute("ChargesDetails", ChargesDetails);

				LabTestList = managementDAOInf.retrieveAllLabTests(loginForm.getPracticeID());
				request.setAttribute("LabTestList", LabTestList);

				String InvestigationDetails = managementDAOInf
						.retrieveInvestigationDetailsByVisitID(patientForm.getVisitID());
				request.setAttribute("InvestigationDetails", InvestigationDetails);

				// retrieving present complaint list for last visit of patient
				String complaintList1 = patientDAOInf.retrievePresentComplaintsOfLastVisit(patientForm.getVisitID());

				request.setAttribute("complaintList", complaintList1);

				PVComplaints = patientDAOInf.getPVComplaints();

				String categoryList1 = patientDAOInf.retrieveCategoryListOfLastVisit(patientForm.getVisitID());
				request.setAttribute("categoryList", categoryList1);

				MedicalHistory = patientDAOInf.retrievemedicalHistoryListOfLastVisit(patientForm,
						patientForm.getPatientID());
				request.setAttribute("MedicalHistory", MedicalHistory);

				FamilyHistory = patientDAOInf.retrieveFamilyHistoryListOfLastVisit(patientForm,
						patientForm.getPatientID());
				request.setAttribute("FamilyHistory", FamilyHistory);

				PersonalHistory = patientDAOInf.retrievePersonalHistoryListOfLastVisit(patientForm,
						patientForm.getPatientID());
				request.setAttribute("PersonalHistory", PersonalHistory);

				onEaminationList = patientDAOInf.retrieveOnExaminationListByVisitID(patientForm.getVisitID());
				request.setAttribute("onEaminationList", onEaminationList);

				InjectionPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
						patientForm.getVisitID(), "Injection");
				InjectionList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Injection");

				TabletPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
						patientForm.getVisitID(), "Tablet");
				TabletList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Tablet");

				LiquidPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
						patientForm.getVisitID(), "Liquid");
				LiquidList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Liquid");
				/*
				 * retrieving symptomCheck list by visitID
				 */
				symptomList = patientDAOInf.retrievesymptomCheckList(patientForm.getVisitID());

				complaintList = patientDAOInf.retrievecomplaintList(patientForm.getVisitID());

				String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
				request.setAttribute("paymentType", paymentType);

				// Checking if the CRF form is for Gokhale clinic, if so then load the diagnosis
				// from the json file else load the diagnosis from the PVDiagnosis table
				if (formNameArray[0].trim().equals("generalPhysicianGokhaleOPD.jsp")) {

					// Retrieving diagnosis list for the last visit ID
					orthoDiagnosisList = patientDAOInf.retrieveOrthoDiagnosisList(patientForm.getVisitID());

					HttpServletRequest request = ServletActionContext.getRequest();

					JSONParser parser = new JSONParser();

					JSONArray diagnosisJSON = (JSONArray) parser
							.parse(new FileReader(realPath + File.separator + "ortho_charges.json"));

					for (Object jsonData : diagnosisJSON) {
						JSONObject data = (JSONObject) jsonData;

						// diagnoseList.put((String) data.get("rate"), (String) data.get("diagnosis"));
					}

				}
				diagnoseList = configurationUtil.getDiagnoseList();

				request.setAttribute("apptID", patientForm.getAptID());

				drugList = configurationUtil.getTradeNameList();

				InvestigationList = configurationUtil.getInvestigationList();

				InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

				diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());

				historyList = patientDAOInf.retrieveMedicalHistoryList(patientForm.getPatientID());

				medicationList = patientDAOInf.retrieveCurrentMedicationList(patientForm.getPatientID());

				categoryList = configurationUtil.getCategoryList();

				frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

				reportList = configurationUtil.getRepostList(loginForm.getVisitTypeID());
				// chargeTypeList = configurationUtil.getChargeTypeList();

				doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

				hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

				// Inserting values into Audit table
				daoInf.insertAudit(request.getRemoteAddr(), "Add Lab Report", loginForm.getUserID());

				System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[0].trim());

				// Setting add opd page name value in pageName variable
				setPageName(formNameArray[0].trim());

				return SUCCESS;

			} else if (message.equalsIgnoreCase("input")) {

				addActionError("File not selected to upload. Please select at least one file.");

				String labReportTabEnable = "Enable";

				request.setAttribute("labReportTabEnable", labReportTabEnable);

				request.setAttribute("labReportResult", "Error");

				request.setAttribute("printAvailable", "Yes");

				String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

				request.setAttribute("medicalCertiText", medicatCertificate);

				String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

				request.setAttribute("referralLetter", referralLetter);

				boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

				if (visitCheck) {
					billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
				} else {
					billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
							loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
				}

				if (formNameArray[0].trim().equals("genaralClinicOPDNew.jsp")) {
					patientList = patientDAOInf.retrieveGeneralClinicPatientDetails(patientForm.getPatientID(),
							patientForm.getVisitID(), loginForm.getClinicID());

				} else if (formNameArray[0].trim().equals("genaralClinicIPDNew.jsp")) {
					patientList = patientDAOInf.retrieveGenaralClinicPatientDetailsForIPDVisit(
							patientForm.getPatientID(), patientForm.getVisitID(), loginForm.getClinicID());
				} else {
					/*
					 * retrieving patientList which contains visit details
					 */
					patientList = patientDAOInf.retrieveDefaultPatientDetails(patientForm.getPatientID(),
							patientForm.getVisitID(), loginForm.getClinicID(), patientForm.getAptID(),
							loginForm.getVisitTypeID());
				}
				// String dummy = "";
				String dummy = "";

				request.setAttribute("lasteEnteredVisitList", "success");

				request.setAttribute("lasteEnteredPrescList", "success");

				request.setAttribute("lasteEnteredBillList", "success");

				OPDChargesList = managementDAOInf.retrieveAllOPDCharges(loginForm.getPracticeID());
				request.setAttribute("OPDChargesList", OPDChargesList);

				String ChargesDetails = managementDAOInf.retrieveOPDChargesDetailsByReceiptID(patientForm.getVisitID());
				request.setAttribute("ChargesDetails", ChargesDetails);

				LabTestList = managementDAOInf.retrieveAllLabTests(loginForm.getPracticeID());
				request.setAttribute("LabTestList", LabTestList);

				String InvestigationDetails = managementDAOInf
						.retrieveInvestigationDetailsByVisitID(patientForm.getVisitID());
				request.setAttribute("InvestigationDetails", InvestigationDetails);

				// retrieving present complaint list for last visit of patient
				String complaintList1 = patientDAOInf.retrievePresentComplaintsOfLastVisit(patientForm.getVisitID());

				request.setAttribute("complaintList", complaintList1);

				/* HashMap<String, String> PVComplaints = patientDAOInf.getPVComplaints(); */

				PVComplaints = patientDAOInf.getPVComplaints();

				String categoryList = patientDAOInf.retrieveCategoryListOfLastVisit(patientForm.getVisitID());
				request.setAttribute("categoryList", categoryList);

				MedicalHistory = patientDAOInf.retrievemedicalHistoryListOfLastVisit(patientForm,
						patientForm.getPatientID());
				request.setAttribute("MedicalHistory", MedicalHistory);

				FamilyHistory = patientDAOInf.retrieveFamilyHistoryListOfLastVisit(patientForm,
						patientForm.getPatientID());
				request.setAttribute("FamilyHistory", FamilyHistory);

				PersonalHistory = patientDAOInf.retrievePersonalHistoryListOfLastVisit(patientForm,
						patientForm.getPatientID());
				request.setAttribute("PersonalHistory", PersonalHistory);

				onEaminationList = patientDAOInf.retrieveOnExaminationListByVisitID(patientForm.getVisitID());
				request.setAttribute("onEaminationList", onEaminationList);

				InjectionPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
						patientForm.getVisitID(), "Injection");
				InjectionList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Injection");

				TabletPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
						patientForm.getVisitID(), "Tablet");
				TabletList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Tablet");

				LiquidPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
						patientForm.getVisitID(), "Liquid");
				LiquidList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Liquid");
				/*
				 * retrieving prescription list by visitID
				 */
				prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID());

				/* Retrieve labReport List */
				labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
						loginForm.getClinicID());
				/*
				 * retrieving symptomCheck list by visitID
				 */
				symptomList = patientDAOInf.retrievesymptomCheckList(patientForm.getVisitID());

				complaintList = patientDAOInf.retrievecomplaintList(patientForm.getVisitID());

				String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
				request.setAttribute("paymentType", paymentType);

				// Checking if the CRF form is for Gokhale clinic, if so then load the diagnosis
				// from the json file else load the diagnosis from the PVDiagnosis table
				if (formNameArray[0].trim().equals("generalPhysicianGokhaleOPD.jsp")) {

					// Retrieving diagnosis list for the last visit ID
					orthoDiagnosisList = patientDAOInf.retrieveOrthoDiagnosisList(patientForm.getVisitID());

					HttpServletRequest request = ServletActionContext.getRequest();

					JSONParser parser = new JSONParser();

					JSONArray diagnosisJSON = (JSONArray) parser
							.parse(new FileReader(realPath + File.separator + "ortho_charges.json"));

					for (Object jsonData : diagnosisJSON) {
						JSONObject data = (JSONObject) jsonData;

						// diagnoseList.put((String) data.get("rate"), (String) data.get("diagnosis"));
					}

				}
				diagnoseList = configurationUtil.getDiagnoseList();

				request.setAttribute("apptID", patientForm.getAptID());

				drugList = configurationUtil.getTradeNameList();

				InvestigationList = configurationUtil.getInvestigationList();

				InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

				diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());

				frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

				// chargeTypeList = configurationUtil.getChargeTypeList();

				doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

				reportList = configurationUtil.getRepostList(loginForm.getVisitTypeID());

				hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

				// Inserting values into Audit table
				daoInf.insertAudit(request.getRemoteAddr(), "Add Lab Report Exception Occurred.",
						loginForm.getUserID());

				System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[0].trim());

				// Setting add opd page name value in pageName variable
				setPageName(formNameArray[0].trim());

				return ERROR;

			} else {

				addActionError("Failed to add lab report .Please check server logs for more details.");

				String labReportTabEnable = "Enable";

				request.setAttribute("labReportTabEnable", labReportTabEnable);

				request.setAttribute("labReportResult", "Error");

				request.setAttribute("printAvailable", "Yes");

				String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

				request.setAttribute("medicalCertiText", medicatCertificate);

				String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

				request.setAttribute("referralLetter", referralLetter);

				boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

				if (visitCheck) {
					billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
				} else {
					billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
							loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
				}

				if (formNameArray[0].trim().equals("genaralClinicOPDNew.jsp")) {
					patientList = patientDAOInf.retrieveGeneralClinicPatientDetails(patientForm.getPatientID(),
							patientForm.getVisitID(), loginForm.getClinicID());

				} else if (formNameArray[0].trim().equals("genaralClinicIPDNew.jsp")) {
					patientList = patientDAOInf.retrieveGenaralClinicPatientDetailsForIPDVisit(
							patientForm.getPatientID(), patientForm.getVisitID(), loginForm.getClinicID());
				} else {
					/*
					 * retrieving patientList which contains visit details
					 */
					patientList = patientDAOInf.retrieveDefaultPatientDetails(patientForm.getPatientID(),
							patientForm.getVisitID(), loginForm.getClinicID(), patientForm.getAptID(),
							loginForm.getVisitTypeID());
				}
				// String dummy = "";
				String dummy = "";

				request.setAttribute("lasteEnteredVisitList", "success");

				request.setAttribute("lasteEnteredPrescList", "success");

				request.setAttribute("lasteEnteredBillList", "success");

				// retrieving present complaint list for last visit of patient
				String complaintList1 = patientDAOInf.retrievePresentComplaintsOfLastVisit(patientForm.getVisitID());

				request.setAttribute("complaintList", complaintList1);

				/* HashMap<String, String> PVComplaints = patientDAOInf.getPVComplaints(); */

				PVComplaints = patientDAOInf.getPVComplaints();

				String categoryList1 = patientDAOInf.retrieveCategoryListOfLastVisit(patientForm.getVisitID());
				request.setAttribute("categoryList", categoryList1);

				MedicalHistory = patientDAOInf.retrievemedicalHistoryListOfLastVisit(patientForm,
						patientForm.getPatientID());
				request.setAttribute("MedicalHistory", MedicalHistory);

				FamilyHistory = patientDAOInf.retrieveFamilyHistoryListOfLastVisit(patientForm,
						patientForm.getPatientID());
				request.setAttribute("FamilyHistory", FamilyHistory);

				PersonalHistory = patientDAOInf.retrievePersonalHistoryListOfLastVisit(patientForm,
						patientForm.getPatientID());
				request.setAttribute("PersonalHistory", PersonalHistory);

				onEaminationList = patientDAOInf.retrieveOnExaminationListByVisitID(patientForm.getVisitID());
				request.setAttribute("onEaminationList", onEaminationList);

				InjectionPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
						patientForm.getVisitID(), "Injection");
				InjectionList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Injection");

				TabletPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
						patientForm.getVisitID(), "Tablet");
				TabletList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Tablet");

				LiquidPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
						patientForm.getVisitID(), "Liquid");
				LiquidList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Liquid");
				/*
				 * retrieving prescription list by visitID
				 */
				prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID());

				/* Retrieve labReport List */
				labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
						loginForm.getClinicID());

				/*
				 * retrieving symptomCheck list by visitID
				 */
				symptomList = patientDAOInf.retrievesymptomCheckList(patientForm.getVisitID());

				complaintList = patientDAOInf.retrievecomplaintList(patientForm.getVisitID());

				String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
				request.setAttribute("paymentType", paymentType);

				// Checking if the CRF form is for Gokhale clinic, if so then load the diagnosis
				// from the json file else load the diagnosis from the PVDiagnosis table
				if (formNameArray[0].trim().equals("generalPhysicianGokhaleOPD.jsp")) {

					// Retrieving diagnosis list for the last visit ID
					orthoDiagnosisList = patientDAOInf.retrieveOrthoDiagnosisList(patientForm.getVisitID());

					HttpServletRequest request = ServletActionContext.getRequest();

					JSONParser parser = new JSONParser();

					JSONArray diagnosisJSON = (JSONArray) parser
							.parse(new FileReader(realPath + File.separator + "ortho_charges.json"));

					for (Object jsonData : diagnosisJSON) {
						JSONObject data = (JSONObject) jsonData;

						// diagnoseList.put((String) data.get("rate"), (String) data.get("diagnosis"));
					}

				}
				diagnoseList = configurationUtil.getDiagnoseList();

				request.setAttribute("apptID", patientForm.getAptID());

				drugList = configurationUtil.getTradeNameList();

				InvestigationList = configurationUtil.getInvestigationList();

				InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

				diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());

				historyList = patientDAOInf.retrieveMedicalHistoryList(patientForm.getPatientID());

				medicationList = patientDAOInf.retrieveCurrentMedicationList(patientForm.getPatientID());

				categoryList = configurationUtil.getCategoryList();

				frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

				reportList = configurationUtil.getRepostList(loginForm.getVisitTypeID());

				// chargeTypeList = configurationUtil.getChargeTypeList();

				doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

				hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

				// Inserting values into Audit table
				daoInf.insertAudit(request.getRemoteAddr(), "Add Lab Report Exception Occurred.",
						loginForm.getUserID());

				System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[0].trim());

				// Setting add opd page name value in pageName variable
				setPageName(formNameArray[0].trim());

				return ERROR;
			}
		}
	}

	/**
	 * 
	 * @return
	 * @throws Exceptin
	 */
	public String downloadLabReport() throws Exception {
		/*
		 * Getting user role from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");

		LoginDAOInf daoInf = new LoginDAOImpl();

		patientDAOInf = new PatientDAOImpl();

		ClinicDAOInf daoInf1 = new ClinicDAOImpl();
		RegistrationDAOinf registrationDAOinf = new RegistrationDAOImpl();
		PrescriptionManagementDAOInf managementDAOInf = new PrescriptionManagementDAOImpl();

		/*
		 * Getting form name to be display based on logged in User
		 */
		String[] formNameArray = loginForm.getOPDJSPName().split("&");

		int nextVisitDays = patientDAOInf.retrieveNextVisitDays(loginForm.getVisitTypeID());

		String check1 = patientDAOInf.verifyReferralLetter(patientForm.getVisitID());
		System.out.println("check1 value in action:" + check1);
		request.setAttribute("referralLetterCheck", check1);

		String check = patientDAOInf.verifyMedicalCertificate(patientForm.getVisitID());
		System.out.println("check value in action:" + check);
		request.setAttribute("medicalCertiCheck", check);

		System.out.println("Edit OPD JSP Page name for logged in user is ::: " + formNameArray[1].trim());

		try {

			/*
			 * Getting context path
			 */
			ServletContext context = request.getServletContext();

			String realPath = context.getRealPath("/");

			message = serviceInf.addLabReport(patientForm, realPath);

			orthoBillItemList = patientDAOInf.retrieveOrthoBillingItemList(patientForm.getVisitID());

			if (message.equalsIgnoreCase("success")) {
				addActionMessage("Successfully added lab reports details.");

				String reportOutFIleName = patientDAOInf.labReportDownload(patientForm.getReportsID());

				System.out.println("out File name from action ::::: " + reportOutFIleName);

				String fileName;

				long contentLength;

				File fileToDownload = new File(realPath + reportOutFIleName);

				fileName = fileToDownload.getName();
				contentLength = fileToDownload.length();

				patientForm.setFileInputStream(new FileInputStream(fileToDownload));
				patientForm.setFileName(reportOutFIleName);

				String labReportTabEnable = "Enable";

				request.setAttribute("labReportTabEnable", labReportTabEnable);

				/*
				 * retrieving patientList which contains visit details
				 */
				if (formNameArray[1].trim().equals("generalOPDEdit.jsp")
						|| formNameArray[1].trim().equals("telephonicEdit.jsp")
						|| formNameArray[1].trim().equals("physicianOPDEdit.jsp")
						|| formNameArray[1].trim().equals("generalPhysicianOPDEdit.jsp")
						|| formNameArray[1].trim().equals("generalPhysicianGokhaleOPDEdit.jsp")) {

					patientList = patientDAOInf.retrieveDefaultPatientDetails(patientForm.getPatientID(),
							patientForm.getVisitID(), loginForm.getClinicID(), patientForm.getAptID(),
							loginForm.getVisitTypeID());
				} else {
					String visitType = daoInf1.retrieveVisitTypeNameByID(loginForm.getVisitTypeID());
					System.out.println("visitype is ::" + visitType);

					patientList = patientDAOInf.retrieveLastEnteredVisitDetail(patientForm.getPatientID(),
							patientForm.getVisitID(), loginForm.getClinicID(), visitType);
				}

				boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

				if (visitCheck) {
					billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
				} else {
					billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
							loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
				}

				/*
				 * retrieving prescription list by visitID
				 */
				prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID());

				/* Retrieve labReport List */
				labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
						loginForm.getClinicID());

				/*
				 * retrieving symptomCheck list by visitID
				 */
				symptomList = patientDAOInf.retrievesymptomCheckList(patientForm.getVisitID());

				complaintList = patientDAOInf.retrievecomplaintList(patientForm.getVisitID());

				diagnoseList = configurationUtil.getDiagnoseList();

				request.setAttribute("apptID", patientForm.getAptID());

				drugList = configurationUtil.getTradeNameList();

				InvestigationList = configurationUtil.getInvestigationList();

				InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

				diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());

				historyList = patientDAOInf.retrieveMedicalHistoryList(patientForm.getPatientID());

				medicationList = patientDAOInf.retrieveCurrentMedicationList(patientForm.getPatientID());

				categoryList = configurationUtil.getCategoryList();

				frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

				// chargeTypeList = configurationUtil.getChargeTypeList();

				doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

				hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

				// Inserting values into Audit table
				daoInf.insertAudit(request.getRemoteAddr(), "Download Lab Report", loginForm.getUserID());

				// Setting add opd page name value in pageName variable
				setPageName(formNameArray[1].trim());

				return SUCCESS;
			} else if (message.equalsIgnoreCase("input")) {
				System.out.println("inside INPUT ::::::::::::;");
				addActionError("File not selected to upload. Please select at least one file.");

				String labReportTabEnable = "Enable";

				request.setAttribute("labReportTabEnable", labReportTabEnable);

				request.setAttribute("labReportResult", "Error");

				String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

				request.setAttribute("medicalCertiText", medicatCertificate);

				String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

				request.setAttribute("referralLetter", referralLetter);

				boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

				if (visitCheck) {
					billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
				} else {
					billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
							loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
				}

				/*
				 * retrieving patientList which contains visit details
				 */
				patientList = patientDAOInf.retrieveDefaultPatientDetails(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID(), patientForm.getAptID(),
						loginForm.getVisitTypeID());

				/*
				 * retrieving prescription list by visitID
				 */
				prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID());

				/* Retrieve labReport List */
				labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
						loginForm.getClinicID());
				/*
				 * retrieving symptomCheck list by visitID
				 */
				symptomList = patientDAOInf.retrievesymptomCheckList(patientForm.getVisitID());

				complaintList = patientDAOInf.retrievecomplaintList(patientForm.getVisitID());

				String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
				request.setAttribute("paymentType", paymentType);

				diagnoseList = configurationUtil.getDiagnoseList();

				request.setAttribute("apptID", patientForm.getAptID());

				drugList = configurationUtil.getTradeNameList();

				InvestigationList = configurationUtil.getInvestigationList();

				InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

				diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());

				frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

				// chargeTypeList = configurationUtil.getChargeTypeList();

				doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

				hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

				// Inserting values into Audit table
				daoInf.insertAudit(request.getRemoteAddr(), "Add Lab Report Exception Occurred.",
						loginForm.getUserID());

				/*
				 * Getting form name to be display based on logged in User
				 */
				formNameArray = loginForm.getOPDJSPName().split("&");

				System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[0].trim());

				// Setting add opd page name value in pageName variable
				setPageName(formNameArray[0].trim());

				return ERROR;

			} else {

				addActionError("Failed to add lab report .Please check server logs for more details.");

				String labReportTabEnable = "Enable";

				request.setAttribute("labReportTabEnable", labReportTabEnable);

				request.setAttribute("labReportResult", "Error");

				String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

				request.setAttribute("medicalCertiText", medicatCertificate);

				String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

				request.setAttribute("referralLetter", referralLetter);

				boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

				if (visitCheck) {
					billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
				} else {
					billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
							loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
				}

				/*
				 * retrieving patientList which contains visit details
				 */
				patientList = patientDAOInf.retrieveDefaultPatientDetails(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID(), patientForm.getAptID(),
						loginForm.getVisitTypeID());

				/*
				 * retrieving prescription list by visitID
				 */
				prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID());

				/* Retrieve labReport List */
				labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
						loginForm.getClinicID());

				/*
				 * retrieving symptomCheck list by visitID
				 */
				symptomList = patientDAOInf.retrievesymptomCheckList(patientForm.getVisitID());

				complaintList = patientDAOInf.retrievecomplaintList(patientForm.getVisitID());

				String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
				request.setAttribute("paymentType", paymentType);

				diagnoseList = configurationUtil.getDiagnoseList();

				request.setAttribute("apptID", patientForm.getAptID());

				drugList = configurationUtil.getTradeNameList();

				InvestigationList = configurationUtil.getInvestigationList();

				InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

				diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());

				historyList = patientDAOInf.retrieveMedicalHistoryList(patientForm.getPatientID());

				medicationList = patientDAOInf.retrieveCurrentMedicationList(patientForm.getPatientID());

				categoryList = configurationUtil.getCategoryList();

				frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

				// chargeTypeList = configurationUtil.getChargeTypeList();

				doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

				hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

				// Inserting values into Audit table
				daoInf.insertAudit(request.getRemoteAddr(), "Add Lab Report Exception Occurred.",
						loginForm.getUserID());

				/*
				 * Getting form name to be display based on logged in User
				 */
				formNameArray = loginForm.getOPDJSPName().split("&");

				System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[0].trim());

				// Setting add opd page name value in pageName variable
				setPageName(formNameArray[0].trim());

				return ERROR;
			}
		} catch (Exception exception) {

			StringWriter stringWriter = new StringWriter();

			exception.printStackTrace(new PrintWriter(stringWriter));

			String labReportTabEnable = "Enable";

			request.setAttribute("labReportTabEnable", labReportTabEnable);

			/*
			 * retrieving patientList which contains visit details
			 */
			if (formNameArray[1].trim().equals("generalOPDEdit.jsp")
					|| formNameArray[1].trim().equals("telephonicEdit.jsp")
					|| formNameArray[1].trim().equals("physicianOPDEdit.jsp")
					|| formNameArray[1].trim().equals("generalPhysicianOPDEdit.jsp")
					|| formNameArray[1].trim().equals("generalPhysicianGokhaleOPDEdit.jsp")) {

				patientList = patientDAOInf.retrieveDefaultPatientDetails(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID(), patientForm.getAptID(),
						loginForm.getVisitTypeID());
			} else {
				String visitType = daoInf1.retrieveVisitTypeNameByID(loginForm.getVisitTypeID());
				System.out.println("visitype is ::" + visitType);

				patientList = patientDAOInf.retrieveLastEnteredVisitDetail(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID(), visitType);
			}

			boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

			if (visitCheck) {
				billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
			} else {
				billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
						loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
			}

			prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID());

			/* Retrieve labReport List */
			labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
					loginForm.getClinicID());

			/*
			 * retrieving symptomCheck list by visitID
			 */
			symptomList = patientDAOInf.retrievesymptomCheckList(patientForm.getVisitID());

			complaintList = patientDAOInf.retrievecomplaintList(patientForm.getVisitID());

			diagnoseList = configurationUtil.getDiagnoseList();

			request.setAttribute("apptID", patientForm.getAptID());

			drugList = configurationUtil.getTradeNameList();

			InvestigationList = configurationUtil.getInvestigationList();

			InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

			diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());

			historyList = patientDAOInf.retrieveMedicalHistoryList(patientForm.getPatientID());

			medicationList = patientDAOInf.retrieveCurrentMedicationList(patientForm.getPatientID());

			categoryList = configurationUtil.getCategoryList();

			frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

			// chargeTypeList = configurationUtil.getChargeTypeList();

			doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

			hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Download Lab Report", loginForm.getUserID());

			// Setting add opd page name value in pageName variable
			setPageName(formNameArray[1].trim());

			return ERROR;
		}

	}

	/**
	 * 
	 * @return
	 * @throws Exception
	 */

	/**
	 * 
	 * @return
	 * @throws Exception
	 */
	public String editLabReport() throws Exception {
		/*
		 * Getting user role from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");

		serviceInf = new eDhanvantariServiceImpl();
		patientDAOInf = new PatientDAOImpl();

		LoginDAOInf daoInf = new LoginDAOImpl();

		ClinicDAOInf daoInf1 = new ClinicDAOImpl();

		RegistrationDAOinf registrationDAOinf = new RegistrationDAOImpl();

		PrescriptionManagementDAOInf managementDAOInf = new PrescriptionManagementDAOImpl();

		int nextVisitDays = patientDAOInf.retrieveNextVisitDays(loginForm.getVisitTypeID());

		/*
		 * Getting context path
		 */
		ServletContext context = request.getServletContext();

		String realPath = context.getRealPath("/");

		String check1 = patientDAOInf.verifyReferralLetter(patientForm.getVisitID());
		System.out.println("check1 value in action:" + check1);
		request.setAttribute("referralLetterCheck", check1);

		String check = patientDAOInf.verifyMedicalCertificate(patientForm.getVisitID());
		System.out.println("check value in action:" + check);
		request.setAttribute("medicalCertiCheck", check);

		orthoBillItemList = patientDAOInf.retrieveOrthoBillingItemList(patientForm.getVisitID());

		/*
		 * Getting form name to be display based on logged in User
		 */
		String[] formNameArray = loginForm.getOPDJSPName().split("&");

		System.out.println("Edit OPD JSP Page name for logged in user is ::: " + formNameArray[1].trim());

		System.out.println("VISITID IN EDIT LAB REP::" + patientForm.getVisitID());

		message = serviceInf.addLabReport(patientForm, realPath);
		if (message.equalsIgnoreCase("success")) {

			addActionMessage("Successfully added lab reports details.");

			String labReportTabEnable = "Enable";

			request.setAttribute("labReportTabEnable", labReportTabEnable);

			request.setAttribute("labReportResult", "Success");

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Add Lab report", loginForm.getUserID());

			/*
			 * Verifying whether visit exist for the patient or not, if not then disable
			 * View Last Visit button
			 */
			int patientVisitExistCheck = patientDAOInf.verifyVisitDetails(patientForm.getPatientID(),
					loginForm.getClinicID());

			String disableButtonCheck = "enable";
			if (patientVisitExistCheck == 0) {
				disableButtonCheck = "disable";
			}

			String dummy = "";

			request.setAttribute("lasteEnteredVisitList", "success");

			request.setAttribute("lasteEnteredPrescList", "success");

			request.setAttribute("lasteEnteredBillList", "success");

			request.setAttribute("disableButtonCheck", disableButtonCheck);

			/*
			 * Retrieving patient age based on patientID
			 */
			String patientAge = patientDAOInf.retrievePatientAgeByPatientID(patientForm.getPatientID());

			request.setAttribute("patientAge", patientAge);

			/*
			 * retrieving patient gender based on patientID
			 */
			String patientGender = patientDAOInf.retrievePatientGenderByPatientID(patientForm.getPatientID());

			request.setAttribute("gender", patientGender);

			hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

			if (formNameArray[1].trim().equals("generalOPDEdit.jsp")
					|| formNameArray[1].trim().equals("telephonicEdit.jsp")
					|| formNameArray[1].trim().equals("physicianOPDEdit.jsp")
					|| formNameArray[1].trim().equals("generalPhysicianOPDEdit.jsp")
					|| formNameArray[1].trim().equals("generalPhysicianGokhaleOPDEdit.jsp")) {

				patientList = patientDAOInf.retrieveDefaultPatientDetails(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID(), patientForm.getAptID(),
						loginForm.getVisitTypeID());
			} else if (formNameArray[1].trim().equals("generalHospitalOPDEdit.jsp")) {

				patientList = patientDAOInf.retrieveGeneralHospitalPatientDetailsForExistiongVisit(
						patientForm.getPatientID(), patientForm.getVisitID(), loginForm.getClinicID());
			} else if (formNameArray[1].trim().equals("genaralClinicOPDEdit.jsp")) {
				patientList = patientDAOInf.retrieveGeneralClinicPatientDetails(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID());

			} else if (formNameArray[1].trim().equals("genaralClinicIPDEdit.jsp")) {
				patientList = patientDAOInf.retrieveGenaralClinicPatientDetailsForIPDVisit(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID());

			} else {

				String visitType = daoInf1.retrieveVisitTypeNameByID(loginForm.getVisitTypeID());
				System.out.println("visitype is ::" + visitType);

				patientList = patientDAOInf.retrieveLastEnteredVisitDetail(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID(), visitType);
			}

			boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

			if (visitCheck) {
				billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
			} else {
				billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
						loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
			}

			// retrieving present complaint list for last visit of patient
			String complaintList1 = patientDAOInf.retrievePresentComplaintsOfLastVisit(patientForm.getVisitID());
			request.setAttribute("complaintList", complaintList1);

			String categoryList1 = patientDAOInf.retrieveCategoryListOfLastVisit(patientForm.getVisitID());
			request.setAttribute("categoryList", categoryList1);

			PVComplaints = patientDAOInf.getPVComplaints();

			MedicalHistory = patientDAOInf.retrievemedicalHistoryListOfLastVisit(patientForm,
					patientForm.getPatientID());
			request.setAttribute("MedicalHistory", MedicalHistory);

			FamilyHistory = patientDAOInf.retrieveFamilyHistoryListOfLastVisit(patientForm, patientForm.getPatientID());
			request.setAttribute("FamilyHistory", FamilyHistory);

			PersonalHistory = patientDAOInf.retrievePersonalHistoryListOfLastVisit(patientForm,
					patientForm.getPatientID());
			request.setAttribute("PersonalHistory", PersonalHistory);

			onEaminationList = patientDAOInf.retrieveOnExaminationListByVisitID(patientForm.getVisitID());
			request.setAttribute("onEaminationList", onEaminationList);

			request.setAttribute("lasteEnteredVisitList", dummy);

			InjectionPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID(), "Injection");
			InjectionList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Injection");

			TabletPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID(), "Tablet");
			TabletList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Tablet");

			LiquidPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID(), "Liquid");
			LiquidList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Liquid");

			OPDChargesList = managementDAOInf.retrieveAllOPDCharges(loginForm.getPracticeID());
			request.setAttribute("OPDChargesList", OPDChargesList);

			String ChargesDetails = managementDAOInf.retrieveOPDChargesDetailsByReceiptID(patientForm.getVisitID());
			request.setAttribute("ChargesDetails", ChargesDetails);

			LabTestList = managementDAOInf.retrieveAllLabTests(loginForm.getPracticeID());
			request.setAttribute("LabTestList", LabTestList);

			String InvestigationDetails = managementDAOInf
					.retrieveInvestigationDetailsByVisitID(patientForm.getVisitID());
			request.setAttribute("InvestigationDetails", InvestigationDetails);

			/*
			 * retrieving prescription list by visitID
			 */
			prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID());

			/* Retrieve labReport List */
			labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
					loginForm.getClinicID());

			String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
			request.setAttribute("paymentType", paymentType);

			/*
			 * retrieving symptomCheck list by visitID
			 */
			symptomList = patientDAOInf.retrievesymptomCheckList(patientForm.getVisitID());

			complaintList = patientDAOInf.retrievecomplaintList(patientForm.getVisitID());

			String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

			request.setAttribute("medicalCertiText", medicatCertificate);

			String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

			request.setAttribute("referralLetter", referralLetter);

			request.setAttribute("apptID", patientForm.getAptID());

			doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

			// Checking if the CRF form is for Gokhale clinic, if so then load the diagnosis
			// from the json file else load the diagnosis from the PVDiagnosis table
			if (formNameArray[1].trim().equals("generalPhysicianGokhaleOPDEdit.jsp")) {

				// Retrieving diagnosis list for the last visit ID
				orthoDiagnosisList = patientDAOInf.retrieveOrthoDiagnosisList(patientForm.getVisitID());

				HttpServletRequest request = ServletActionContext.getRequest();

				JSONParser parser = new JSONParser();

				JSONArray diagnosisJSON = (JSONArray) parser
						.parse(new FileReader(realPath + File.separator + "ortho_charges.json"));

				for (Object jsonData : diagnosisJSON) {
					JSONObject data = (JSONObject) jsonData;

					// diagnoseList.put((String) data.get("rate"), (String) data.get("diagnosis"));
				}

			}
			diagnoseList = configurationUtil.getDiagnoseList();

			drugList = configurationUtil.getTradeNameList();

			InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

			diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());

			historyList = patientDAOInf.retrieveMedicalHistoryList(patientForm.getPatientID());

			medicationList = patientDAOInf.retrieveCurrentMedicationList(patientForm.getPatientID());

			categoryList = configurationUtil.getCategoryList();

			InvestigationList = configurationUtil.getInvestigationList();

			frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

			// Setting Edit opd page name value in pageName variable
			setPageName(formNameArray[1].trim());

			return SUCCESS;

		} else if (message.equalsIgnoreCase("input")) {

			System.out.println("inside input::::::::::::;");
			addActionError("File not selected to upload. Please select at least one file.");

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Add Lab report Exception Occurred.", loginForm.getUserID());

			/*
			 * Verifying whether visit exist for the patient or not, if not then disable
			 * View Last Visit button
			 */
			int patientVisitExistCheck = patientDAOInf.verifyVisitDetails(patientForm.getPatientID(),
					loginForm.getClinicID());

			String disableButtonCheck = "enable";
			if (patientVisitExistCheck == 0) {
				disableButtonCheck = "disable";
			}

			request.setAttribute("disableButtonCheck", disableButtonCheck);

			String complaintList1 = patientDAOInf.retrievePresentComplaintsOfLastVisit(patientForm.getVisitID());
			request.setAttribute("complaintList", complaintList1);

			String categoryList1 = patientDAOInf.retrieveCategoryListOfLastVisit(patientForm.getVisitID());
			request.setAttribute("categoryList", categoryList1);

			PVComplaints = patientDAOInf.getPVComplaints();

			MedicalHistory = patientDAOInf.retrievemedicalHistoryListOfLastVisit(patientForm,
					patientForm.getPatientID());
			request.setAttribute("MedicalHistory", MedicalHistory);

			FamilyHistory = patientDAOInf.retrieveFamilyHistoryListOfLastVisit(patientForm, patientForm.getPatientID());
			request.setAttribute("FamilyHistory", FamilyHistory);

			PersonalHistory = patientDAOInf.retrievePersonalHistoryListOfLastVisit(patientForm,
					patientForm.getPatientID());
			request.setAttribute("PersonalHistory", PersonalHistory);

			onEaminationList = patientDAOInf.retrieveOnExaminationListByVisitID(patientForm.getVisitID());
			request.setAttribute("onEaminationList", onEaminationList);

			String dummy = "success";

			request.setAttribute("lasteEnteredVisitList", dummy);

			InjectionPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID(), "Injection");
			InjectionList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Injection");

			TabletPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID(), "Tablet");
			TabletList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Tablet");

			LiquidPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID(), "Liquid");
			LiquidList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Liquid");

			/*
			 * Retrieving patient age based on patientID
			 */
			String patientAge = patientDAOInf.retrievePatientAgeByPatientID(patientForm.getPatientID());

			request.setAttribute("patientAge", patientAge);

			/*
			 * retrieving patient gender based on patientID
			 */
			String patientGender = patientDAOInf.retrievePatientGenderByPatientID(patientForm.getPatientID());

			request.setAttribute("gender", patientGender);

			hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

			if (formNameArray[1].trim().equals("generalOPDEdit.jsp")
					|| formNameArray[1].trim().equals("telephonicEdit.jsp")
					|| formNameArray[1].trim().equals("physicianOPDEdit.jsp")
					|| formNameArray[1].trim().equals("generalPhysicianOPDEdit.jsp")
					|| formNameArray[1].trim().equals("generalPhysicianGokhaleOPDEdit.jsp")) {

				patientList = patientDAOInf.retrieveDefaultPatientDetails(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID(), patientForm.getAptID(),
						loginForm.getVisitTypeID());
			} else if (formNameArray[1].trim().equals("generalHospitalOPDEdit.jsp")) {

				patientList = patientDAOInf.retrieveGeneralHospitalPatientDetailsForExistiongVisit(
						patientForm.getPatientID(), patientForm.getVisitID(), loginForm.getClinicID());
			} else if (formNameArray[1].trim().equals("genaralClinicOPDEdit.jsp")) {
				patientList = patientDAOInf.retrieveGeneralClinicPatientDetails(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID());

			} else if (formNameArray[1].trim().equals("genaralClinicIPDEdit.jsp")) {
				patientList = patientDAOInf.retrieveGenaralClinicPatientDetailsForIPDVisit(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID());

			} else {
				String visitType = daoInf1.retrieveVisitTypeNameByID(loginForm.getVisitTypeID());
				System.out.println("visitype is ::" + visitType);

				patientList = patientDAOInf.retrieveLastEnteredVisitDetail(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID(), visitType);
			}

			boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

			if (visitCheck) {
				billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
			} else {
				billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
						loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
			}

			/*
			 * retrieving prescription list by visitID
			 */
			prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID());

			/* Retrieve labReport List */
			labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
					loginForm.getClinicID());

			/*
			 * retrieving symptomCheck list by visitID
			 */
			symptomList = patientDAOInf.retrievesymptomCheckList(patientForm.getVisitID());

			complaintList = patientDAOInf.retrievecomplaintList(patientForm.getVisitID());

			String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
			request.setAttribute("paymentType", paymentType);

			String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

			request.setAttribute("medicalCertiText", medicatCertificate);

			String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

			request.setAttribute("referralLetter", referralLetter);

			request.setAttribute("apptID", patientForm.getAptID());

			doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

			// Checking if the CRF form is for Gokhale clinic, if so then load the diagnosis
			// from the json file else load the diagnosis from the PVDiagnosis table
			if (formNameArray[1].trim().equals("generalPhysicianGokhaleOPDEdit.jsp")) {

				// Retrieving diagnosis list for the last visit ID
				orthoDiagnosisList = patientDAOInf.retrieveOrthoDiagnosisList(patientForm.getVisitID());

				HttpServletRequest request = ServletActionContext.getRequest();

				JSONParser parser = new JSONParser();

				JSONArray diagnosisJSON = (JSONArray) parser
						.parse(new FileReader(realPath + File.separator + "ortho_charges.json"));

				for (Object jsonData : diagnosisJSON) {
					JSONObject data = (JSONObject) jsonData;

					// diagnoseList.put((String) data.get("rate"), (String) data.get("diagnosis"));
				}

			}
			diagnoseList = configurationUtil.getDiagnoseList();

			drugList = configurationUtil.getTradeNameList();

			InvestigationList = configurationUtil.getInvestigationList();

			frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

			InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

			diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());

			historyList = patientDAOInf.retrieveMedicalHistoryList(patientForm.getPatientID());

			medicationList = patientDAOInf.retrieveCurrentMedicationList(patientForm.getPatientID());

			categoryList = configurationUtil.getCategoryList();

			// Setting Edit opd page name value in pageName variable
			setPageName(formNameArray[1].trim());

			return ERROR;

		} else {

			addActionError("Failed to add lab report .Please check server logs for more details.");

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Add Lab report Exception Occurred.", loginForm.getUserID());

			/*
			 * Verifying whether visit exist for the patient or not, if not then disable
			 * View Last Visit button
			 */
			int patientVisitExistCheck = patientDAOInf.verifyVisitDetails(patientForm.getPatientID(),
					loginForm.getClinicID());

			String disableButtonCheck = "enable";
			if (patientVisitExistCheck == 0) {
				disableButtonCheck = "disable";
			}

			request.setAttribute("disableButtonCheck", disableButtonCheck);

			String complaintList1 = patientDAOInf.retrievePresentComplaintsOfLastVisit(patientForm.getVisitID());
			request.setAttribute("complaintList", complaintList1);

			String categoryList1 = patientDAOInf.retrieveCategoryListOfLastVisit(patientForm.getVisitID());
			request.setAttribute("categoryList", categoryList1);

			PVComplaints = patientDAOInf.getPVComplaints();

			MedicalHistory = patientDAOInf.retrievemedicalHistoryListOfLastVisit(patientForm,
					patientForm.getPatientID());
			request.setAttribute("MedicalHistory", MedicalHistory);

			FamilyHistory = patientDAOInf.retrieveFamilyHistoryListOfLastVisit(patientForm, patientForm.getPatientID());
			request.setAttribute("FamilyHistory", FamilyHistory);

			PersonalHistory = patientDAOInf.retrievePersonalHistoryListOfLastVisit(patientForm,
					patientForm.getPatientID());
			request.setAttribute("PersonalHistory", PersonalHistory);

			onEaminationList = patientDAOInf.retrieveOnExaminationListByVisitID(patientForm.getVisitID());
			request.setAttribute("onEaminationList", onEaminationList);

			String dummy = "success";

			request.setAttribute("lasteEnteredVisitList", dummy);

			InjectionPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID(), "Injection");
			InjectionList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Injection");

			TabletPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID(), "Tablet");
			TabletList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Tablet");

			LiquidPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID(), "Liquid");
			LiquidList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Liquid");

			/*
			 * Retrieving patient age based on patientID
			 */
			String patientAge = patientDAOInf.retrievePatientAgeByPatientID(patientForm.getPatientID());

			request.setAttribute("patientAge", patientAge);

			/*
			 * retrieving patient gender based on patientID
			 */
			String patientGender = patientDAOInf.retrievePatientGenderByPatientID(patientForm.getPatientID());

			request.setAttribute("gender", patientGender);

			hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

			if (formNameArray[1].trim().equals("generalOPDEdit.jsp")
					|| formNameArray[1].trim().equals("telephonicEdit.jsp")
					|| formNameArray[1].trim().equals("physicianOPDEdit.jsp")
					|| formNameArray[1].trim().equals("generalPhysicianOPDEdit.jsp")
					|| formNameArray[1].trim().equals("generalPhysicianGokhaleOPDEdit.jsp")) {

				patientList = patientDAOInf.retrieveDefaultPatientDetails(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID(), patientForm.getAptID(),
						loginForm.getVisitTypeID());
			} else if (formNameArray[1].trim().equals("generalHospitalOPDEdit.jsp")) {

				patientList = patientDAOInf.retrieveGeneralHospitalPatientDetailsForExistiongVisit(
						patientForm.getPatientID(), patientForm.getVisitID(), loginForm.getClinicID());
			} else if (formNameArray[1].trim().equals("genaralClinicOPDEdit.jsp")) {
				patientList = patientDAOInf.retrieveGeneralClinicPatientDetails(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID());

			} else if (formNameArray[1].trim().equals("genaralClinicIPDEdit.jsp")) {
				patientList = patientDAOInf.retrieveGenaralClinicPatientDetailsForIPDVisit(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID());

			} else {
				String visitType = daoInf1.retrieveVisitTypeNameByID(loginForm.getVisitTypeID());
				System.out.println("visitype is ::" + visitType);

				patientList = patientDAOInf.retrieveLastEnteredVisitDetail(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID(), visitType);
			}

			boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

			if (visitCheck) {
				billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
			} else {
				billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
						loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
			}

			/*
			 * retrieving prescription list by visitID
			 */
			prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID());

			/* Retrieve labReport List */
			labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
					loginForm.getClinicID());

			/*
			 * retrieving symptomCheck list by visitID
			 */
			symptomList = patientDAOInf.retrievesymptomCheckList(patientForm.getVisitID());

			complaintList = patientDAOInf.retrievecomplaintList(patientForm.getVisitID());

			String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
			request.setAttribute("paymentType", paymentType);

			String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

			request.setAttribute("medicalCertiText", medicatCertificate);

			String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

			request.setAttribute("referralLetter", referralLetter);

			request.setAttribute("apptID", patientForm.getAptID());

			doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

			// Checking if the CRF form is for Gokhale clinic, if so then load the diagnosis
			// from the json file else load the diagnosis from the PVDiagnosis table
			if (formNameArray[1].trim().equals("generalPhysicianGokhaleOPDEdit.jsp")) {

				// Retrieving diagnosis list for the last visit ID
				orthoDiagnosisList = patientDAOInf.retrieveOrthoDiagnosisList(patientForm.getVisitID());

				HttpServletRequest request = ServletActionContext.getRequest();

				JSONParser parser = new JSONParser();

				JSONArray diagnosisJSON = (JSONArray) parser
						.parse(new FileReader(realPath + File.separator + "ortho_charges.json"));

				for (Object jsonData : diagnosisJSON) {
					JSONObject data = (JSONObject) jsonData;

					// diagnoseList.put((String) data.get("rate"), (String) data.get("diagnosis"));
				}

			}
			diagnoseList = configurationUtil.getDiagnoseList();

			drugList = configurationUtil.getTradeNameList();

			InvestigationList = configurationUtil.getInvestigationList();

			frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

			InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

			diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());

			historyList = patientDAOInf.retrieveMedicalHistoryList(patientForm.getPatientID());

			medicationList = patientDAOInf.retrieveCurrentMedicationList(patientForm.getPatientID());

			categoryList = configurationUtil.getCategoryList();

			// Setting Edit opd page name value in pageName variable
			setPageName(formNameArray[1].trim());

			return ERROR;
		}
	}

	/**
	 * 
	 * @return
	 * @throws Exception
	 */
	public String renderViewApointment() throws Exception {
		patientDAOInf = new PatientDAOImpl();

		/*
		 * Retrieving patientName based on patientID
		 */
		String patientName = patientDAOInf.retrievePatientFullName(patientForm.getPatientID());

		// Setting patient full name with patient ID in request object
		request.setAttribute("patientName", patientName + " (" + patientForm.getPatientID() + ")");

		if (appointmentList.size() > 0) {

			System.out.println("Appointment for patientID " + patientForm.getPatientID() + " found...");

			request.setAttribute("appointmentList", appointmentList);

			request.setAttribute("listEmpty", "non-empty");

			return SUCCESS;

		} else {

			System.out.println("No Appointment found for patient id " + patientForm.getPatientID());

			addActionError("No appointment available for patient " + patientName + " (" + patientForm.getPatientID()
					+ "). Please add new appointment.");

			return ERROR;

		}

	}

	/**
	 * 
	 * @return
	 * @throws Exception
	 */
	public String renderAddPatient() throws Exception {

		patientList = new ArrayList<PatientForm>();

		/*
		 * String apiUrl = "https://pec.360oneview.com/fetch_contact.php"; String
		 * apiResponse = "";
		 * 
		 * try (CloseableHttpClient httpClient = HttpClients.createDefault()) { // URL
		 * of the API endpoint
		 * 
		 * HttpPost httpPost = new
		 * HttpPost("https://pec.360oneview.com/fetch_contact.php"); HttpPost
		 * postRequest = httpPost;
		 * 
		 * // Form data to send String formData = "mobile=1234567854";
		 * 
		 * // Set the entity with the form data
		 * 
		 * StringEntity entity = new StringEntity(formData,
		 * ContentType.APPLICATION_FORM_URLENCODED); postRequest.setEntity(entity);
		 * 
		 * // Execute the request try (CloseableHttpResponse response =
		 * httpClient.execute(postRequest)) { // Get the response code if
		 * (response.getStatusLine().getStatusCode() == 200) { apiResponse =
		 * EntityUtils.toString(response.getEntity()); } else { apiResponse = "Error: "
		 * + response.getStatusLine().getStatusCode(); } }
		 * 
		 * } catch (Exception e) { apiResponse = "Exception: " + e.getMessage(); }
		 * 
		 * System.out.println("API Response..." + apiResponse);
		 */

		// Setting default value of city, state and country
		patientForm.setCity("Pune");
		patientForm.setState("Maharastra");
		patientForm.setCountry("India");
		patientForm.setEmCity("Pune");
		patientForm.setEmState("Maharastra");
		patientForm.setEmCountry("India");

		patientList.add(patientForm);

		/*
		 * Getting clinicID from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");

		request.setAttribute("clinician", "No");

		/*
		 * Getting form name to be display based on logged in User
		 */
		String[] formNameArray = loginForm.getPatientJSPName().split("&");

		System.out.println("Add Patient JSP Page name for logged in user is .....::: " + formNameArray[0].trim());

		// Setting add opd page name value in pageName variable
		setPageName(formNameArray[0].trim());

		return SUCCESS;
	}

	/**
	 * 
	 * @return
	 * @throws Exception
	 */
	public String renderAddNewPatient() throws Exception {

		patientList = new ArrayList<PatientForm>();

		// Setting default value of city, state and country
		patientForm.setCity("Pune");
		patientForm.setState("Maharastra");
		patientForm.setCountry("India");
		patientForm.setEmCity("Pune");
		patientForm.setEmState("Maharastra");
		patientForm.setEmCountry("India");

		patientList.add(patientForm);

		System.out.println("renderaddnewpatient:" + patientForm.getFirstName() + "..." + patientForm.getMobile());
		/*
		 * Getting clinicID from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");

		referringDoctorList = configurationUtil.getReferringDoctorList1(loginForm.getPracticeID());
		refDocList = configurationUtil.getRefDocList(loginForm.getPracticeID());

		request.setAttribute("clinician", "No");

		/*
		 * Getting form name to be display based on logged in User
		 */
		String[] formNameArray = loginForm.getPatientJSPName().split("&");

		System.out.println("Add Patient JSP Page name for logged in user is ::: " + formNameArray[0].trim());

		// Setting add opd page name value in pageName variable
		setPageName(formNameArray[0].trim());

		return SUCCESS;
	}

	/**
	 * 
	 * @throws Exception
	 */
	public void getTradeNameByCategory() throws Exception {
		patientDAOInf = new PatientDAOImpl();

		JSONObject values = new JSONObject();

		JSONArray array = new JSONArray();
		values = new JSONObject();

		JSONObject object = new JSONObject();

		response.setCharacterEncoding("UTF-8");
		try {

			/*
			 * Getting clinicID from session
			 */
			LoginForm loginForm = (LoginForm) session.get("USER");

			// System.out.println("categorory ID.... " +
			// patientForm.getProductCategoryID());

			values = patientDAOInf.retrieveTradeNameByCategory(patientForm.getProductCategoryID(),
					loginForm.getClinicID());

			PrintWriter out = response.getWriter();

			out.print(values);

		} catch (Exception exception) {
			exception.printStackTrace();
			System.out.println("Exception occured while retrieving trade name based on category due to:::"
					+ exception.getMessage());

			object.put("ErrMsg", "Exception occured while retrieving trade name based on category");
			array.add(object);

			values.put("Release", array);

			PrintWriter out = response.getWriter();

			out.print(values);
		}
	}

	/**
	 * 
	 * @throws Exception
	 */
	public void getProductNameAndCategoryID() throws Exception {
		patientDAOInf = new PatientDAOImpl();

		JSONObject values = new JSONObject();

		JSONArray array = new JSONArray();
		values = new JSONObject();

		JSONObject object = new JSONObject();

		response.setCharacterEncoding("UTF-8");
		try {

			values = patientDAOInf.retrieveProductNameAndCategoryIDByProductID(patientForm.getProductID());

			PrintWriter out = response.getWriter();

			out.print(values);

		} catch (Exception exception) {
			exception.printStackTrace();
			System.out.println(
					"Exception occured while retrieving product name and category ID based on productID due to:::"
							+ exception.getMessage());

			object.put("ErrMsg", "Exception occured while retrieving product name and category ID based on productID");
			array.add(object);

			values.put("Release", array);

			PrintWriter out = response.getWriter();

			out.print(values);
		}
	}

	/**
	 * 
	 * @throws Exception
	 */
	public void deletePrescriptionRow() throws Exception {
		patientDAOInf = new PatientDAOImpl();

		JSONObject values = new JSONObject();

		JSONArray array = new JSONArray();
		values = new JSONObject();

		JSONObject object = new JSONObject();

		response.setCharacterEncoding("UTF-8");

		try {
			values = patientDAOInf.deletePrescription(patientForm.getDeleteID());

			PrintWriter out = response.getWriter();

			out.print(values);

		} catch (Exception exception) {
			exception.printStackTrace();

			object.put("ErrMsg", "Exception occured while deleting prescription.");
			array.add(object);

			values.put("Release", array);

			PrintWriter out = response.getWriter();

			out.print(values);
		}
	}

	/**
	 * 
	 * @return
	 * @throws Exception
	 */
	public String renderSendSMS() throws Exception {

		patientDAOInf = new PatientDAOImpl();

		configDAOInf = new ConfigurationDAOImpl();

		LoginDAOInf loginDAOInf = new LoginDAOImpl();

		/*
		 * Getting user role from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");

		diagnoseList = patientDAOInf.retrieveDiagnosisListForSMS(loginForm.getPracticeID());

		clinicList = loginDAOInf.retrieveClinicList(loginForm.getPracticeID());

		SMSTemplateTitleList = configDAOInf.retrieveSMSTemplateTitleList();

		return SUCCESS;

	}

	/**
	 * 
	 * @return
	 * @throws Exception
	 */
	public String sendDiagnosisBulkSMS() throws Exception {

		patientDAOInf = new PatientDAOImpl();

		LoginDAOInf daoInf = new LoginDAOImpl();

		/*
		 * Getting user role from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");

		diagnoseList = patientDAOInf.retrieveDiagnosisListForSMS(loginForm.getPracticeID());

		clinicList = daoInf.retrieveClinicList(loginForm.getPracticeID());

		SMSSender smsSender = new SMSSender();

		message = smsSender.sendSMSToAllPatientBasedOnDiagnosis(patientForm.getDiagnosis(), patientForm.getComment(),
				loginForm.getPracticeID(), patientForm.getCheck(), patientForm.getClinicID(), patientForm.getMobile());

		if (message.equals("success")) {

			addActionMessage("SMS sent successfully.");

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Bulk SMS For Diagnosis Sent.", loginForm.getUserID());

			return SUCCESS;

		} else {

			addActionError("Failed to send SMS. Please check server logs for more details.");

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Bulk SMS For Diagnosis Exception Occurred.",
					loginForm.getUserID());

			return ERROR;

		}

	}

	/**
	 * 
	 * @return
	 * @throws Exception
	 */
	public String changeVisitTypeID() throws Exception {

		patientDAOInf = new PatientDAOImpl();

		/*
		 * Getting userID from Session
		 */
		LoginForm userForm = (LoginForm) session.get("USER");

		userForm.setVisitTypeID(patientForm.getVisitTypeID());

		/*
		 * Retrieving jsp page name based on new visitTypeID
		 */
		String jspPageName = patientDAOInf.retrieveJSPPageNameByVisitTypeID(patientForm.getVisitTypeID());

		/*
		 * Setting this retrieve jspPAgeName in OPDFormname variable into userForm
		 */
		userForm.setOPDJSPName(jspPageName);

		session.put("USER", userForm);

		System.out.println("Visit type set into session successfully.");

		return SUCCESS;
	}

	/**
	 * 
	 * @return
	 * @throws Exception
	 */
	public String setVisitTypeID() throws Exception {

		patientDAOInf = new PatientDAOImpl();

		/*
		 * Getting userID from Session
		 */
		LoginForm userForm = (LoginForm) session.get("USER");

		/*
		 * retrieving visitTypeID from VisitType table based on practiceID and newVisit
		 * flag equal to 1.e Yes
		 */
		int visitTypeID = patientDAOInf.retrieveVisitTypeID(userForm.getPracticeID());

		System.out.println("Visit type ID to set for newly added patient is::" + visitTypeID);

		userForm.setVisitTypeID(visitTypeID);

		session.put("USER", userForm);

		return SUCCESS;
	}

	/**
	 * 
	 * @return
	 * @throws Exception
	 */
	public String renderAddPatientAppointment() throws Exception {

		patientDAOInf = new PatientDAOImpl();

		SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");
		/*
		 * Getting userID from Session
		 */
		LoginForm userForm = (LoginForm) session.get("USER");

		/*
		 * Check whether patientID is 0 or not, if not 0, then retrieving patient
		 * details based on patientID
		 */
		if (patientForm.getPatientID() == 0) {

			patientList = new ArrayList<PatientForm>();

			PatientForm form = new PatientForm();

			String medicalRegNo = patientDAOInf.retirevePatientClinicRegistrationNo(userForm.getClinicSuffix(),
					userForm.getClinicID());

			String medRegNo = patientDAOInf.retireveMedicalRegistrationNo(userForm.getPracticeSuffix());

			form.setFirstName(patientForm.getFirstName());
			form.setMiddleName(patientForm.getMiddleName());
			form.setLastName(patientForm.getLastName());
			form.setMobile(patientForm.getMobile());
			form.setEmailID(patientForm.getEmailID());
			form.setRhFactor(patientForm.getRhFactor());
			form.setGender(patientForm.getGender());
			form.setAge(patientForm.getAge());
			form.setDateOfBirth(patientForm.getDateOfBirth());
			form.setBloodGroup(patientForm.getBloodGroup());
			form.setRegistrationNo(medicalRegNo);
			form.setMedicalRegNo(medRegNo);
			form.setRoomTypeID(patientForm.getRoomTypeID());

			request.setAttribute("roomTypeID", patientForm.getRoomTypeID());

			Date date = new Date();
			SimpleDateFormat format = new SimpleDateFormat("dd-MM-yyyy");
			String currentDate = format.format(date);

			form.setAppointmentDate(currentDate);

			patientList.add(form);

		} else {

			PatientForm form = new PatientForm();

			patientList = patientDAOInf.retrievePatientDetails(patientForm.getPatientID(), 0, userForm.getClinicID(),
					patientForm.getNextApptTaken(), patientForm.getAptID());

			request.setAttribute("roomTypeID", patientForm.getRoomTypeID());
		}

		refDocList = configurationUtil.getRefDocList(userForm.getPracticeID());

		if (userForm.getFacilityDashboard() == 1) {
			return "facilitySuccess";
		} else {
			return SUCCESS;
		}
	}

	/**
	 * 
	 * @throws Exception
	 */
	public void retrieveRegistrationNumber() throws Exception {
		patientDAOInf = new PatientDAOImpl();

		JSONObject values = new JSONObject();

		JSONArray array = new JSONArray();
		values = new JSONObject();

		JSONObject object = new JSONObject();

		response.setCharacterEncoding("UTF-8");

		/*
		 * Getting userID from Session
		 */
		LoginForm userForm = (LoginForm) session.get("USER");

		try {

			object.put("regNo", patientDAOInf.retirevePatientClinicRegistrationNo(userForm.getClinicSuffix(),
					userForm.getClinicID()));

			array.add(object);

			values.put("Release", array);

			PrintWriter out = response.getWriter();

			out.print(values);

		} catch (Exception exception) {
			exception.printStackTrace();

			object.put("ErrMsg", "Exception occured while retrieving registration number");
			array.add(object);

			values.put("Release", array);

			PrintWriter out = response.getWriter();

			out.print(values);
		}
	}

	/**
	 * 
	 * @return
	 * @throws Exception
	 */
	public String renderEditAppointmentVisit() throws Exception {
		/*
		 * Getting user role from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");

		RegistrationDAOinf registrationDAOinf = new RegistrationDAOImpl();

		patientDAOInf = new PatientDAOImpl();

		System.out
				.println("PatientID.." + patientForm.getPatientID() + "\nAppointment ID .. " + patientForm.getAptID());

		/*
		 * Retrieving visitID from Visit table based on patientID and appointmentID
		 */
		patientForm.setVisitID(
				patientDAOInf.retrieveVisitIDByPatientIDAndApptID(patientForm.getPatientID(), patientForm.getAptID()));

		// Retrieving visitTypeID based on visitID from Visit table
		int visitTypeID = patientDAOInf.retrieveVisitTypeIDByVisitID(patientForm.getVisitID());

		// setting visitTypeID into session
		loginForm.setVisitTypeID(visitTypeID);

		/*
		 * Retrieving jsp page name based on new visitTypeID
		 */
		String jspPageName = patientDAOInf.retrieveJSPPageNameByVisitTypeID(visitTypeID);

		/*
		 * Setting this retrieve jspPAgeName in OPDFormname variable into userForm
		 */
		loginForm.setOPDJSPName(jspPageName);

		session.put("USER", loginForm);

		// reteiving consultation charges from prescription table based on visitID
		String consltnCharges = String
				.valueOf(patientDAOInf.retrieveConsultationChargesFromPrescription(patientForm.getVisitID()));

		request.setAttribute("consltnCharges", consltnCharges);

		/*
		 * Getting form name to be display based on logged in User
		 */
		String[] formNameArray = loginForm.getOPDJSPName().split("&");

		System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[1].trim());

		/*
		 * Verifying whether visit exist for the patient or not, if not then disable
		 * View Last Visit button
		 */
		int patientVisitExistCheck = patientDAOInf.verifyVisitDetails(patientForm.getPatientID(),
				loginForm.getClinicID());

		String disableButtonCheck = "enable";
		if (patientVisitExistCheck == 0) {
			disableButtonCheck = "disable";
		}

		request.setAttribute("disableButtonCheck", disableButtonCheck);

		/*
		 * Retrieving patient age based on patientID
		 */
		String patientAge = patientDAOInf.retrievePatientAgeByPatientID(patientForm.getPatientID());

		request.setAttribute("patientAge", patientAge);

		/*
		 * retrieving patient gender based on patientID
		 */
		String patientGender = patientDAOInf.retrievePatientGenderByPatientID(patientForm.getPatientID());

		request.setAttribute("gender", patientGender);

		hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

		int lastOPDVisitID = 0;
		patientList = patientDAOInf.retrieveDefaultPatientDetails(patientForm.getPatientID(), patientForm.getVisitID(),
				loginForm.getClinicID(), patientForm.getAptID(), loginForm.getVisitTypeID());

		boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

		if (visitCheck) {
			billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
		} else {
			billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
					loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
		}

		request.setAttribute("apptID", patientForm.getAptID());

		/*
		 * retrieving prescription list by visitID
		 */
		prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(), patientForm.getVisitID(),
				loginForm.getClinicID());

		InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

		diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());
		String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

		request.setAttribute("medicalCertiText", medicatCertificate);

		String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

		request.setAttribute("referralLetter", referralLetter);

		doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

		diagnoseList = configurationUtil.getDiagnoseList();

		resayuDiagnosisList = configurationUtil.getDiagnoseList();

		resayuDiagnosisList.put("Other", "Other");

		drugList = configurationUtil.getTradeNameList();

		InvestigationList = configurationUtil.getInvestigationList();

		frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

		categoryList = configurationUtil.getCategoryList();

		// Setting add opd page name value in pageName variable
		setPageName(formNameArray[1].trim());

		return SUCCESS;

	}

	/**
	 * 
	 * @throws Exception
	 */
	public void verifyPatientExistsToCurrClinic() throws Exception {
		patientDAOInf = new PatientDAOImpl();

		JSONObject values = new JSONObject();

		JSONArray array = new JSONArray();
		values = new JSONObject();

		JSONObject object = new JSONObject();

		response.setCharacterEncoding("UTF-8");

		/*
		 * Getting userID from Session
		 */
		LoginForm userForm = (LoginForm) session.get("USER");

		try {

			values = patientDAOInf.verifyPatientExists(patientForm.getPatientID(), userForm.getClinicID());

			PrintWriter out = response.getWriter();

			out.print(values);

		} catch (Exception exception) {
			exception.printStackTrace();

			object.put("ErrMsg",
					"Exception occured while verifyign whether patient exists for the current clinic or not.");
			array.add(object);

			values.put("Release", array);

			PrintWriter out = response.getWriter();

			out.print(values);
		}
	}

	/**
	 * 
	 * @throws Exception
	 */
	public void retrievePatientListForDiagnosis() throws Exception {
		patientDAOInf = new PatientDAOImpl();

		JSONObject values = new JSONObject();

		JSONArray array = new JSONArray();
		values = new JSONObject();

		JSONObject object = new JSONObject();

		response.setCharacterEncoding("UTF-8");

		/*
		 * Getting userID from Session
		 */
		LoginForm userForm = (LoginForm) session.get("USER");

		try {

			values = patientDAOInf.retrievePatientListByDiagnosis(patientForm.getDiagnosis(), userForm.getPracticeID(),
					patientForm.getCheck(), patientForm.getClinicID());

			PrintWriter out = response.getWriter();

			out.print(values);

		} catch (Exception exception) {
			exception.printStackTrace();

			object.put("ErrMsg", "Exception occured while retrieving patientlist based on diagnosis");
			array.add(object);

			values.put("Release", array);

			PrintWriter out = response.getWriter();

			out.print(values);
		}
	}

	/**
	 * 
	 */
	public void retrievePatientListForCredit() throws Exception {
		patientDAOInf = new PatientDAOImpl();

		JSONObject values = new JSONObject();

		JSONArray array = new JSONArray();
		values = new JSONObject();

		JSONObject object = new JSONObject();

		response.setCharacterEncoding("UTF-8");

		/*
		 * Getting userID from Session
		 */
		LoginForm userForm = (LoginForm) session.get("USER");

		try {

			values = patientDAOInf.retrievePatientListForCredit(userForm.getPracticeID(), patientForm.getClinicID(),
					patientForm.getCheck());

			PrintWriter out = response.getWriter();

			out.print(values);

		} catch (Exception exception) {
			exception.printStackTrace();

			object.put("ErrMsg",
					"Exception occured while retrieving patientlist based on practice or clinicID for credit");
			array.add(object);

			values.put("Release", array);

			PrintWriter out = response.getWriter();

			out.print(values);
		}
	}

	/**
	 * 
	 * @return
	 * @throws Exception
	 */
	public String sendPatientCreditBulkSMS() throws Exception {

		patientDAOInf = new PatientDAOImpl();

		LoginDAOInf daoInf = new LoginDAOImpl();

		/*
		 * Getting user role from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");

		diagnoseList = patientDAOInf.retrieveDiagnosisListForSMS(loginForm.getPracticeID());

		clinicList = daoInf.retrieveClinicList(loginForm.getPracticeID());

		SMSSender smsSender = new SMSSender();

		message = smsSender.sendBroadcastSMSForPatientCredit(patientForm.getPatientIDString(),
				loginForm.getPracticeID(), patientForm.getClinicID(), patientForm.getCheck());

		if (message.equals("success")) {

			addActionMessage("SMS sent successfully.");

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Bulk SMS For Patient Credit Sent.", loginForm.getUserID());

			return SUCCESS;

		} else {

			addActionError("Failed to send SMS. Please check server logs for more details.");

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Bulk SMS For Patient Credit Exception Occurred.",
					loginForm.getUserID());

			return ERROR;

		}

	}

	/**
	 * 
	 * @throws Exception
	 */
	public void getFrequencyCount() throws Exception {
		patientDAOInf = new PatientDAOImpl();

		JSONObject values = new JSONObject();

		JSONArray array = new JSONArray();
		values = new JSONObject();

		JSONObject object = new JSONObject();

		response.setCharacterEncoding("UTF-8");

		/*
		 * Getting userID from Session
		 */
		LoginForm userForm = (LoginForm) session.get("USER");

		try {

			values = patientDAOInf.retrieveFrequencyCount(patientForm.getFrequency(), userForm.getPracticeID());

			PrintWriter out = response.getWriter();

			out.print(values);

		} catch (Exception exception) {
			exception.printStackTrace();

			object.put("ErrMsg",
					"Exception occured while retrieving frequency count from Frequency table based on frequency");
			array.add(object);

			values.put("Release", array);

			PrintWriter out = response.getWriter();

			out.print(values);
		}
	}

	/**
	 * 
	 * @throws Exception
	 */
	public void addConsent() throws Exception {
		patientDAOInf = new PatientDAOImpl();

		serviceInf = new eDhanvantariServiceImpl();

		JSONObject values = new JSONObject();

		JSONArray array = new JSONArray();
		values = new JSONObject();

		JSONObject object = new JSONObject();

		response.setCharacterEncoding("UTF-8");

		/*
		 * Getting userID from Session
		 */
		LoginForm userForm = (LoginForm) session.get("USER");

		int check = 0;

		try {

			System.out.println("userID:" + userForm.getUserID());
			message = serviceInf.configureConsentDetails(patientForm, userForm.getUserID());

			if (message.equals("success")) {

				object = new JSONObject();

				check = 1;

				object.put("check", check);

				object.put("SuccMsg", "Consent details added successfully.");

				array.add(object);

				values.put("Release", array);

			} else {

				if (check == 0) {

					object = new JSONObject();

					object.put("check", check);

					object.put("ErrMsg", "Error occured while adding consent details");
					array.add(object);

					values.put("Release", array);
				}

			}

			PrintWriter out = response.getWriter();

			out.print(values);

		} catch (Exception exception) {
			exception.printStackTrace();

			object.put("ErrMsg", "Exception occured while inserting frequency details based on prescriptionID");
			array.add(object);

			values.put("Release", array);

			PrintWriter out = response.getWriter();

			out.print(values);
		}
	}

	/**
	 * 
	 * @throws Exception
	 */
	public void retrieveCategoryWithDrugName() throws Exception {
		patientDAOInf = new PatientDAOImpl();

		JSONObject values = new JSONObject();

		JSONArray array = new JSONArray();
		values = new JSONObject();

		JSONObject object = new JSONObject();

		response.setCharacterEncoding("UTF-8");

		/*
		 * Getting userID from Session
		 */
		LoginForm userForm = (LoginForm) session.get("USER");

		try {

			values = patientDAOInf.retrieveCategoryWithDrugName(patientForm.getTradeName(), userForm.getClinicID());

			PrintWriter out = response.getWriter();

			out.print(values);

		} catch (Exception exception) {
			exception.printStackTrace();

			object.put("ErrMsg", "Exception occured while retrieving Category based on DrugName");
			array.add(object);

			values.put("Release", array);

			PrintWriter out = response.getWriter();

			out.print(values);
		}
	}

	/**
	 * 
	 * @throws Exception
	 */
	public void addFrequency() throws Exception {
		patientDAOInf = new PatientDAOImpl();

		serviceInf = new eDhanvantariServiceImpl();

		JSONObject values = new JSONObject();

		JSONArray array = new JSONArray();
		values = new JSONObject();

		JSONObject object = new JSONObject();

		response.setCharacterEncoding("UTF-8");

		/*
		 * Getting userID from Session
		 */
		LoginForm userForm = (LoginForm) session.get("USER");

		int check = 0;

		try {

			serviceInf.addFrequencyDetails(patientForm);

			if (message.equalsIgnoreCase("success")) {

				object = new JSONObject();

				check = 1;

				object.put("check", check);

				array.add(object);

				values.put("Release", array);

			} else {

				if (check == 0) {

					object = new JSONObject();

					object.put("check", check);

					object.put("ErrMsg", "Error occured while inserting frequency details");
					array.add(object);

					values.put("Release", array);
				}

			}

			PrintWriter out = response.getWriter();

			out.print(values);

		} catch (Exception exception) {
			exception.printStackTrace();

			object.put("ErrMsg", "Exception occured while inserting frequency details based on prescriptionID");
			array.add(object);

			values.put("Release", array);

			PrintWriter out = response.getWriter();

			out.print(values);
		}
	}

	/**
	 * 
	 * @throws Exception
	 */
	public void retrieveFrequencyDetailsByPrescriptionID() throws Exception {
		patientDAOInf = new PatientDAOImpl();

		JSONObject values = new JSONObject();

		JSONArray array = new JSONArray();
		values = new JSONObject();

		JSONObject object = new JSONObject();

		response.setCharacterEncoding("UTF-8");

		/*
		 * Getting userID from Session
		 */
		LoginForm userForm = (LoginForm) session.get("USER");

		try {

			values = patientDAOInf.retrieveFrequencyDetailsByPrescriptionID(patientForm.getPrescriptionID());

			PrintWriter out = response.getWriter();

			out.print(values);

		} catch (Exception exception) {
			exception.printStackTrace();

			object.put("ErrMsg", "Exception occured while retrieving Frequency Details By PrescriptionID");
			array.add(object);

			values.put("Release", array);

			PrintWriter out = response.getWriter();

			out.print(values);
		}
	}

	/**
	 * 
	 * @return
	 * @throws Exception
	 */
	public String renderDisablePatient() throws Exception {

		patientDAOInf = new PatientDAOImpl();

		LoginDAOInf daoInf = new LoginDAOImpl();

		/*
		 * Getting clinicID from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");

		message = patientDAOInf.disablePatient(patientForm.getPatientID(), patientForm.getActivityStatus());

		patientList = patientDAOInf.retrievePatientList(loginForm.getPracticeID(), loginForm.getClinicID());

		request.setAttribute("patientListEnable", "patientListEnable");

		if (message.equals("success")) {

			addActionMessage("Patient disabled successfully.");

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Disable Patient", loginForm.getUserID());

			return SUCCESS;

		} else {
			addActionError("Failed to disable patient. Please check server logs for more details.");

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Disable Patient Exception Occurred", loginForm.getUserID());

			return ERROR;
		}

	}

	/**
	 * 
	 * @return
	 * @throws Exception
	 */
	public String renderActivatePatient() throws Exception {

		patientDAOInf = new PatientDAOImpl();

		LoginDAOInf daoInf = new LoginDAOImpl();

		/*
		 * Getting clinicID from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");

		message = patientDAOInf.disablePatient(patientForm.getPatientID(), ActivityStatus.ACTIVE);

		patientList = patientDAOInf.retrievePatientList(loginForm.getPracticeID(), loginForm.getClinicID());

		// request.setAttribute("patientListEnable", "patientListEnable");

		if (message.equals("success")) {

			addActionMessage("Patient activated successfully.");

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Activate Patient", loginForm.getUserID());

			return SUCCESS;

		} else {
			addActionError("Failed to activate patient. Please check server logs for more details.");

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Activate Patient Exception Occurred", loginForm.getUserID());

			return ERROR;
		}

	}

	/**
	 * 
	 * @return
	 * @throws Exception
	 */
	public String activatePatient() throws Exception {
		return SUCCESS;
	}

	/**
	 * 
	 * @throws Exception
	 */
	public void retrievePatientActiveList() throws Exception {
		patientDAOInf = new PatientDAOImpl();

		JSONObject values = new JSONObject();

		JSONArray array = new JSONArray();
		values = new JSONObject();

		JSONObject object = new JSONObject();

		response.setCharacterEncoding("UTF-8");

		/*
		 * Getting userID from Session
		 */
		LoginForm userForm = (LoginForm) session.get("USER");

		try {

			values = patientDAOInf.retrieveActivePatientList(patientForm.getCheck(), userForm.getPracticeID(),
					patientForm.getClinicID());

			PrintWriter out = response.getWriter();

			out.print(values);

		} catch (Exception exception) {
			exception.printStackTrace();

			object.put("ErrMsg", "Exception occured while retrieving active patientlist");
			array.add(object);

			values.put("Release", array);

			PrintWriter out = response.getWriter();

			out.print(values);
		}
	}

	/**
	 * 
	 * @return
	 * @throws Exception
	 */
	public String sendCustomizedBulkSMS() throws Exception {

		patientDAOInf = new PatientDAOImpl();

		configDAOInf = new ConfigurationDAOImpl();

		LoginDAOInf daoInf = new LoginDAOImpl();

		/*
		 * Getting user role from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");

		diagnoseList = patientDAOInf.retrieveDiagnosisListForSMS(loginForm.getPracticeID());

		clinicList = daoInf.retrieveClinicList(loginForm.getPracticeID());

		SMSTemplateTitleList = configDAOInf.retrieveSMSTemplateTitleList();

		SMSSender smsSender = new SMSSender();

		message = smsSender.sendCustomizedBroadcastSMSToPatient(patientForm.getPatientIDString(),
				loginForm.getPracticeID(), patientForm.getClinicID(), patientForm.getComment(), patientForm.getCheck());

		if (message.equals("success")) {

			addActionMessage("SMS sent successfully.");

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Bulk Customized SMS Sent.", loginForm.getUserID());

			return SUCCESS;

		} else if (message.equals("input")) {

			addActionError("No patient found.");

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Bulk Customized SMS Send Exception Occurred.",
					loginForm.getUserID());

			return INPUT;

		} else if (message.equals("noMobile")) {

			addActionError("No mobile no found for this patient.");

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Bulk Customized SMS Send Exception Occurred.",
					loginForm.getUserID());

			return INPUT;

		} else {

			addActionError("Failed to send SMS. Please check server logs for more details.");

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Bulk Customized SMS Send Exception Occurred.",
					loginForm.getUserID());

			return ERROR;

		}

	}

	/**
	 * 
	 * @return
	 * @throws Exception
	 */
	public String viewMyAppointment() throws Exception {
		patientDAOInf = new PatientDAOImpl();

		/*
		 * Getting user role from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");

		/*
		 * Retrieving appointment details
		 */
		appointmentList = patientDAOInf.retrieveMyAppointmentList(loginForm.getUserID(), loginForm.getClinicID());

		appointmentWeekList = patientDAOInf.retrieveMyAppointmentWeekList(loginForm.getUserID(),
				loginForm.getClinicID());

		appointmentMonthList = patientDAOInf.retrieveMyAppointmentMonthList(loginForm.getUserID(),
				loginForm.getClinicID());

		/*
		 * Setting string in order to display the appointment table on dashboard
		 */
		String patientCheck = "Appointment";

		request.setAttribute("patientCheck", patientCheck);

		request.setAttribute("myApptCheck", "mine");

		if (appointmentList.size() == 0) {

			System.out.println("No Appointment found for today");

			String todayApptMsg = "No appointment available for today. Please add new appointment.";

			request.setAttribute("todayApptMsg", todayApptMsg);
		}

		if (appointmentWeekList.size() == 0) {

			System.out.println("No Appointment found for this week");

			String weekApptMsg = "No appointment available for this week. Please add new appointment.";

			request.setAttribute("weekApptMsg", weekApptMsg);
		}

		if (appointmentMonthList.size() == 0) {

			System.out.println("No Appointment found for this month");

			String monthApptMsg = "No appointment available for this month. Please add new appointment.";

			request.setAttribute("monthApptMsg", monthApptMsg);
		}

		return SUCCESS;
	}

	/**
	 * 
	 * @return
	 * @throws Exception
	 */
	public String sendAppointmentReport() throws Exception {

		patientDAOInf = new PatientDAOImpl();

		EmailUtil emailUtil = new EmailUtil();

		LoginDAOInf daoInf = new LoginDAOImpl();

		/*
		 * Getting user role from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");

		ConvertToPDFUtil convertToPDFUtil = new ConvertToPDFUtil();

		String accessKey = xmlUtil.getAccessKey();

		String secreteKey = xmlUtil.getSecreteKey();

		AWSS3Connect awss3Connect = new AWSS3Connect();

		// getting input file location from S3 bucket
		String s3reportFilePath = xmlUtil.getS3RDMLReportFilePath();

		// getting s3 bucket name
		String bucketName = util.getS3BucketName();

		// getting s3 bucket region
		String bucketRegion = xmlUtil.getS3BucketRegion();

		// Set the presigned URL to expire after one hour.
		java.util.Date expiration = new java.util.Date();
		long expTimeMillis = expiration.getTime();
		expTimeMillis += 1000 * 60 * 60;
		expiration.setTime(expTimeMillis);

		AWSCredentials credentials = new BasicAWSCredentials(accessKey, secreteKey);

		AmazonS3 s3 = AmazonS3ClientBuilder.standard().withCredentials(new AWSStaticCredentialsProvider(credentials))
				.withRegion(bucketRegion).build();

		/*
		 * Creating Prescription & Billing PDF file
		 */
		HttpServletRequest request = ServletActionContext.getRequest();

		ServletContext context = request.getServletContext();

		String realPath = context.getRealPath("/");

		String pdfOutFIleName = "";

		if (patientForm.getCheck().equals("Day")) {
			// pdfOutFIleName = realPath + "todaysAppointmentReport.pdf";
			pdfOutFIleName = "todaysAppointmentReport.pdf";
		} else if (patientForm.getCheck().equals("Week")) {
			// pdfOutFIleName = realPath + "weeksAppointmentReport.pdf";
			pdfOutFIleName = "weeksAppointmentReport.pdf";
		} else {
			// pdfOutFIleName = realPath + "monthsAppointmentReport.pdf";
			pdfOutFIleName = "monthsAppointmentReport.pdf";
		}

		message = convertToPDFUtil.generateAppointmentReportPDF(realPath, pdfOutFIleName, patientForm.getCheck(),
				loginForm.getClinicID());

		if (message.equals("success")) {

			File inputFile = new File(realPath + "/" + pdfOutFIleName);

			// Storing file to S3 RDML INPUT FILE location
			message = awss3Connect.pushFile(inputFile, pdfOutFIleName, bucketName, bucketRegion, s3reportFilePath);

			S3ObjectInputStream s3ObjectInputStream = s3
					.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, pdfOutFIleName))
					.getObjectContent();

			patientForm.setFileInputStream(s3ObjectInputStream);

			patientForm.setFileName(pdfOutFIleName);

			/*
			 * Retrieving head userID list and sending mail to all of them
			 */
			List<Integer> headUserIDList = patientDAOInf.retrieveHeadUserIDList(loginForm.getClinicID());

			if (headUserIDList.size() > 0) {

				for (int headUserID : headUserIDList) {

					/*
					 * Retrieving head user's mailID by employeeID
					 */
					String mailID = patientDAOInf.retrieveEmployeeMailID(headUserID);

					if (mailID == null || mailID == "") {
						System.out.println("No emailID found for head.");
					} else {
						if (mailID.isEmpty()) {
							System.out.println("No emailID found for head.");
						} else {

							String fileName = "";

							if (patientForm.getCheck().equals("Day")) {
								fileName = "todaysAppointmentReport.pdf";
							} else if (patientForm.getCheck().equals("Week")) {
								fileName = "weeksAppointmentReport.pdf";
							} else {
								fileName = "monthsAppointmentReport.pdf";
							}

							/*
							 * Sending mail to head about appointment report
							 */
							message = emailUtil.sendAppointmentReportMailToHead(headUserID, loginForm.getPracticeID(),
									loginForm.getClinicID(), realPath, fileName, mailID, patientForm.getCheck());
						}
					}

				}

				if (message.equals("success")) {

					addActionMessage("Email sent successfully.");

					// Inserting values into Audit table
					daoInf.insertAudit(request.getRemoteAddr(), "Appointment Report Sent.", loginForm.getUserID());

					return SUCCESS;
				} else {

					addActionError("Failed to send mail. Please check server logs for more details.");

					// Inserting values into Audit table
					daoInf.insertAudit(request.getRemoteAddr(), "Appointment Report Send Exception Occurred.",
							loginForm.getUserID());

					return ERROR;
				}
			} else {
				System.out.println("No head user found.");

				addActionError("No head user found. Please add new head user.");

				// Inserting values into Audit table
				daoInf.insertAudit(request.getRemoteAddr(), "Appointment Report Sent Exception Occurred.",
						loginForm.getUserID());

				return INPUT;
			}

		} else {

			System.out.println("Failed to create appointment PDF.");

			addActionError("Failed to generate appointment report PDF. Please check server logs for more details.");

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Appointment Report PDF Generation Exception Occurred.",
					loginForm.getUserID());

			return ERROR;

		}

	}

	/**
	 * 
	 * @return
	 * @throws Exception
	 */
	public String renderAddNewPatientAppointment() throws Exception {

		/*
		 * Getting user role from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");

		patientList = new ArrayList<PatientForm>();

		patientForm.setCity("Pune");
		patientForm.setState("Maharastra");
		patientForm.setCountry("India");
		patientForm.setEmCity("Pune");
		patientForm.setEmState("Maharastra");
		patientForm.setEmCountry("India");

		patientList.add(patientForm);

		request.setAttribute("clinician", "No");

		request.setAttribute("apptCheck", "appointment");

		/*
		 * Getting form name to be display based on logged in User
		 */
		String[] formNameArray = loginForm.getPatientJSPName().split("&");

		System.out.println("Add Patient JSP Page name for logged in user is ::: " + formNameArray[0].trim());

		// Setting add opd page name value in pageName variable
		setPageName(formNameArray[0].trim());

		return SUCCESS;
	}

	/**
	 * 
	 * @throws Exception
	 */
	public void retrievePatientVisitHistory() throws Exception {
		patientDAOInf = new PatientDAOImpl();

		JSONObject values = new JSONObject();

		JSONArray array = new JSONArray();
		values = new JSONObject();

		JSONObject object = null;

		response.setCharacterEncoding("UTF-8");

		/*
		 * Getting userID from Session
		 */
		LoginForm userForm = (LoginForm) session.get("USER");

		try {

			List<PatientForm> patientVisitList = patientDAOInf.retrievePatientVisitDetail(patientForm.getPatientID(),
					userForm.getClinicID());

			/*
			 * Retrieving patient full name based on patient ID
			 */
			String patientName = patientDAOInf.retrievePatientFullName(patientForm.getPatientID());

			patientName += "(" + patientForm.getPatientID() + ")";

			if (patientVisitList.size() > 0) {
				for (PatientForm form : patientVisitList) {
					object = new JSONObject();

					object.put("visitID", form.getVisitID());
					object.put("visitType", form.getVisitType());
					object.put("visitNumber", form.getVisitNumber());
					object.put("visitDate", form.getVisitDate());
					object.put("diagnosis", form.getDiagnosis());
					object.put("visitTypeID", form.getVisitTypeID());
					object.put("patientID", patientForm.getPatientID());
					object.put("patientName", patientName);
					object.put("visitCheck", "found");

					array.add(object);

					values.put("Release", array);
				}
			} else {
				object = new JSONObject();

				object.put("visitCheck", "notFound");

				array.add(object);

				values.put("Release", array);
			}

			PrintWriter out = response.getWriter();

			out.print(values);

		} catch (Exception exception) {
			exception.printStackTrace();

			object.put("ErrMsg", "Exception occured while retrieving patient's visit history");
			array.add(object);

			values.put("Release", array);

			PrintWriter out = response.getWriter();

			out.print(values);
		}
	}

	/**
	 * 
	 * @throws Exception
	 */
	public void verifyVisitExistsForAppointment() throws Exception {
		patientDAOInf = new PatientDAOImpl();

		JSONObject values = new JSONObject();

		JSONArray array = new JSONArray();
		values = new JSONObject();

		JSONObject object = new JSONObject();

		response.setCharacterEncoding("UTF-8");
		try {

			values = patientDAOInf.verifyVisitExistsForAppointment(patientForm.getPatientID(), patientForm.getAptID());

			PrintWriter out = response.getWriter();

			out.print(values);

		} catch (Exception exception) {
			exception.printStackTrace();

			object.put("ErrMsg",
					"Exception occured while verifying whether visit exists for appointmentID and patientID");
			array.add(object);

			values.put("Release", array);

			PrintWriter out = response.getWriter();

			out.print(values);
		}
	}

	/**
	 * 
	 * @throws Exception
	 */
	public void verifyUserPassword() throws Exception {
		patientDAOInf = new PatientDAOImpl();

		JSONObject values = new JSONObject();

		JSONArray array = new JSONArray();
		values = new JSONObject();

		JSONObject object = new JSONObject();

		response.setCharacterEncoding("UTF-8");

		/*
		 * Getting user role from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");

		try {

			values = patientDAOInf.verifyUserPassword(patientForm.getCheck(), loginForm.getUserID());

			PrintWriter out = response.getWriter();

			out.print(values);

		} catch (Exception exception) {
			exception.printStackTrace();

			object.put("ErrMsg", "Exception occured while verifying whether user password is corrent or not");
			array.add(object);

			values.put("Release", array);

			PrintWriter out = response.getWriter();

			out.print(values);
		}
	}

	/**
	 * 
	 * @return
	 * @throws Exception
	 */
	public String downloadAppointmentReport() throws Exception {

		patientDAOInf = new PatientDAOImpl();

		EmailUtil emailUtil = new EmailUtil();

		LoginDAOInf daoInf = new LoginDAOImpl();

		String accessKey = xmlUtil.getAccessKey();

		String secreteKey = xmlUtil.getSecreteKey();

		AWSS3Connect awss3Connect = new AWSS3Connect();

		// getting input file location from S3 bucket
		String s3reportFilePath = xmlUtil.getS3RDMLReportFilePath();

		// getting s3 bucket name
		String bucketName = util.getS3BucketName();

		// getting s3 bucket region
		String bucketRegion = xmlUtil.getS3BucketRegion();

		// Set the presigned URL to expire after one hour.
		java.util.Date expiration = new java.util.Date();
		long expTimeMillis = expiration.getTime();
		expTimeMillis += 1000 * 60 * 60;
		expiration.setTime(expTimeMillis);

		AWSCredentials credentials = new BasicAWSCredentials(accessKey, secreteKey);

		AmazonS3 s3 = AmazonS3ClientBuilder.standard().withCredentials(new AWSStaticCredentialsProvider(credentials))
				.withRegion(bucketRegion).build();

		/*
		 * Getting user role from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");

		ConvertToPDFUtil convertToPDFUtil = new ConvertToPDFUtil();

		/*
		 * Creating Prescription & Billing PDF file
		 */
		HttpServletRequest request = ServletActionContext.getRequest();

		ServletContext context = request.getServletContext();

		String realPath = context.getRealPath("/");

		String pdfOutFIleName = "";
		String fileName = "";

		if (patientForm.getCheck().equals("Day")) {
			// pdfOutFIleName = realPath + "todaysAppointmentReport.pdf";
			pdfOutFIleName = "todaysAppointmentReport.pdf";
			fileName = "todaysAppointmentReport.pdf";
		} else if (patientForm.getCheck().equals("Week")) {
			// pdfOutFIleName = realPath + "weeksAppointmentReport.pdf";
			pdfOutFIleName = "weeksAppointmentReport.pdf";
			fileName = "weeksAppointmentReport.pdf";
		} else {
			// pdfOutFIleName = realPath + "monthsAppointmentReport.pdf";
			pdfOutFIleName = "monthsAppointmentReport.pdf";
			fileName = "monthsAppointmentReport.pdf";
		}

		message = convertToPDFUtil.generateAppointmentReportPDF(realPath, pdfOutFIleName, patientForm.getCheck(),
				loginForm.getClinicID());

		if (message.equals("success")) {

			addActionMessage("Successfully generated appointment report");

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Appointment Report Download", loginForm.getUserID());

			File fileToDownload = new File(realPath + "/" + pdfOutFIleName);

			// Storing file to S3 RDML INPUT FILE location
			message = awss3Connect.pushFile(fileToDownload, pdfOutFIleName, bucketName, bucketRegion, s3reportFilePath);

			S3ObjectInputStream s3ObjectInputStream = s3
					.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, pdfOutFIleName))
					.getObjectContent();

			patientForm.setFileInputStream(s3ObjectInputStream);

			patientForm.setFileName(pdfOutFIleName);

			return SUCCESS;

		} else {

			System.out.println("Failed to create appointment PDF.");

			addActionError("Failed to generate appointment report PDF. Please check server logs for more details.");

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Appointment Report PDF Generation Exception Occurred",
					loginForm.getUserID());

			return ERROR;

		}

	}

	/**
	 * 
	 * @return
	 * @throws Exception
	 */
	public String downloadAppointmentReportToday() throws Exception {

		patientDAOInf = new PatientDAOImpl();

		EmailUtil emailUtil = new EmailUtil();

		LoginDAOInf daoInf = new LoginDAOImpl();

		/*
		 * Getting user role from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");

		ConvertToPDFUtil convertToPDFUtil = new ConvertToPDFUtil();

		String accessKey = xmlUtil.getAccessKey();

		String secreteKey = xmlUtil.getSecreteKey();

		AWSS3Connect awss3Connect = new AWSS3Connect();

		// getting input file location from S3 bucket
		String s3reportFilePath = xmlUtil.getS3RDMLReportFilePath();

		// getting s3 bucket name
		String bucketName = util.getS3BucketName();

		// getting s3 bucket region
		String bucketRegion = xmlUtil.getS3BucketRegion();

		// Set the presigned URL to expire after one hour.
		java.util.Date expiration = new java.util.Date();
		long expTimeMillis = expiration.getTime();
		expTimeMillis += 1000 * 60 * 60;
		expiration.setTime(expTimeMillis);

		AWSCredentials credentials = new BasicAWSCredentials(accessKey, secreteKey);

		AmazonS3 s3 = AmazonS3ClientBuilder.standard().withCredentials(new AWSStaticCredentialsProvider(credentials))
				.withRegion(bucketRegion).build();

		/*
		 * Creating Prescription & Billing PDF file
		 */
		HttpServletRequest request = ServletActionContext.getRequest();

		ServletContext context = request.getServletContext();

		String realPath = context.getRealPath("/");

		String pdfOutFIleName = "";
		String fileName = "";

		// pdfOutFIleName = realPath + "todaysAppointmentReport.pdf";
		pdfOutFIleName = "todaysAppointmentReport.pdf";
		fileName = "todaysAppointmentReport.pdf";

		/*
		 * check whether at least appointment list checkbox is checked, if yes, proceed
		 * further to generate PDF else give message saying no records was selected
		 */
		if (patientForm.getAppointmentID() == null) {
			System.out.println("No check box is checked.");

			message = "noSelection";
		} else {

			message = convertToPDFUtil.generatePatientAppointmentReportPDF(realPath, pdfOutFIleName, patientForm,
					loginForm.getClinicID(), "Day");

		}

		if (message.equals("success")) {

			addActionMessage("Successfully generated appointment report");

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Appointment Report Download", loginForm.getUserID());

			File fileToDownload = new File(realPath + "/" + pdfOutFIleName);

			// Storing file to S3 RDML INPUT FILE location
			message = awss3Connect.pushFile(fileToDownload, pdfOutFIleName, bucketName, bucketRegion, s3reportFilePath);

			S3ObjectInputStream s3ObjectInputStream = s3
					.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, pdfOutFIleName))
					.getObjectContent();

			patientForm.setFileInputStream(s3ObjectInputStream);

			patientForm.setFileName(pdfOutFIleName);

			return SUCCESS;

		} else if (message.equals("noSelection")) {

			addActionError("No record was selected. Please select at least one record.");

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Appointment Report Exception Occurred(No Record Selected)",
					loginForm.getUserID());

			return ERROR;

		} else {

			System.out.println("Failed to create appointment PDF.");

			addActionError("Failed to generate appointment report PDF. Please check server logs for more details.");

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Appointment Report PDF Generation Exception Occurred",
					loginForm.getUserID());

			return ERROR;

		}

	}

	/**
	 * 
	 * @return
	 * @throws Exception
	 */
	public String downloadAppointmentReportWeek() throws Exception {

		patientDAOInf = new PatientDAOImpl();

		EmailUtil emailUtil = new EmailUtil();

		LoginDAOInf daoInf = new LoginDAOImpl();

		/*
		 * Getting user role from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");

		ConvertToPDFUtil convertToPDFUtil = new ConvertToPDFUtil();

		String accessKey = xmlUtil.getAccessKey();

		String secreteKey = xmlUtil.getSecreteKey();

		AWSS3Connect awss3Connect = new AWSS3Connect();

		// getting input file location from S3 bucket
		String s3reportFilePath = xmlUtil.getS3RDMLReportFilePath();

		// getting s3 bucket name
		String bucketName = util.getS3BucketName();

		// getting s3 bucket region
		String bucketRegion = xmlUtil.getS3BucketRegion();

		// Set the presigned URL to expire after one hour.
		java.util.Date expiration = new java.util.Date();
		long expTimeMillis = expiration.getTime();
		expTimeMillis += 1000 * 60 * 60;
		expiration.setTime(expTimeMillis);

		AWSCredentials credentials = new BasicAWSCredentials(accessKey, secreteKey);

		AmazonS3 s3 = AmazonS3ClientBuilder.standard().withCredentials(new AWSStaticCredentialsProvider(credentials))
				.withRegion(bucketRegion).build();

		/*
		 * Creating Prescription & Billing PDF file
		 */
		HttpServletRequest request = ServletActionContext.getRequest();

		ServletContext context = request.getServletContext();

		String realPath = context.getRealPath("/");

		String pdfOutFIleName = "";
		String fileName = "";

		// pdfOutFIleName = realPath + "weeksAppointmentReport.pdf";
		pdfOutFIleName = "weeksAppointmentReport.pdf";
		fileName = "weeksAppointmentReport.pdf";

		/*
		 * message = convertToPDFUtil.generateAppointmentReportPDF(realPath,
		 * pdfOutFIleName, patientForm.getCheck(), loginForm.getClinicID());
		 */

		/*
		 * check whether at least appointment list checkbox is checked, if yes, proceed
		 * further to generate PDF else give message saying no records was selected
		 */
		if (patientForm.getAppointmentID() == null) {
			System.out.println("No check box is checked.");

			message = "noSelection";
		} else {

			message = convertToPDFUtil.generatePatientAppointmentReportPDF(realPath, pdfOutFIleName, patientForm,
					loginForm.getClinicID(), "Week");

		}

		if (message.equals("success")) {

			addActionMessage("Successfully generated appointment report");

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Appointment Report Download", loginForm.getUserID());

			File fileToDownload = new File(realPath + "/" + pdfOutFIleName);

			// Storing file to S3 RDML INPUT FILE location
			message = awss3Connect.pushFile(fileToDownload, pdfOutFIleName, bucketName, bucketRegion, s3reportFilePath);

			S3ObjectInputStream s3ObjectInputStream = s3
					.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, pdfOutFIleName))
					.getObjectContent();

			patientForm.setFileInputStream(s3ObjectInputStream);

			patientForm.setFileName(pdfOutFIleName);

			/*
			 * Sending mail to head about appointment report
			 */
			message = emailUtil.sendAppointmentReportMailToHead(3, loginForm.getPracticeID(), loginForm.getClinicID(),
					realPath, pdfOutFIleName, "keerti@kovidbioanalytics.com", "Week");

			return SUCCESS;

		} else if (message.equals("noSelection")) {

			addActionError("No record was selected. Please select at least one record.");

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Appointment Report Exception Occurred(No Record Selected)",
					loginForm.getUserID());

			return ERROR;

		} else {

			System.out.println("Failed to create appointment PDF.");

			addActionError("Failed to generate appointment report PDF. Please check server logs for more details.");

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Appointment Report PDF Generation Exception Occurred",
					loginForm.getUserID());

			return ERROR;

		}

	}

	/**
	 * 
	 * @return
	 * @throws Exception
	 */
	public String downloadAppointmentReportMonth() throws Exception {

		patientDAOInf = new PatientDAOImpl();

		EmailUtil emailUtil = new EmailUtil();

		LoginDAOInf daoInf = new LoginDAOImpl();

		/*
		 * Getting user role from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");

		ConvertToPDFUtil convertToPDFUtil = new ConvertToPDFUtil();

		String accessKey = xmlUtil.getAccessKey();

		String secreteKey = xmlUtil.getSecreteKey();

		AWSS3Connect awss3Connect = new AWSS3Connect();

		// getting input file location from S3 bucket
		String s3reportFilePath = xmlUtil.getS3RDMLReportFilePath();

		// getting s3 bucket name
		String bucketName = util.getS3BucketName();

		// getting s3 bucket region
		String bucketRegion = xmlUtil.getS3BucketRegion();

		// Set the presigned URL to expire after one hour.
		java.util.Date expiration = new java.util.Date();
		long expTimeMillis = expiration.getTime();
		expTimeMillis += 1000 * 60 * 60;
		expiration.setTime(expTimeMillis);

		AWSCredentials credentials = new BasicAWSCredentials(accessKey, secreteKey);

		AmazonS3 s3 = AmazonS3ClientBuilder.standard().withCredentials(new AWSStaticCredentialsProvider(credentials))
				.withRegion(bucketRegion).build();

		/*
		 * Creating Prescription & Billing PDF file
		 */
		HttpServletRequest request = ServletActionContext.getRequest();

		ServletContext context = request.getServletContext();

		String realPath = context.getRealPath("/");

		String pdfOutFIleName = "";
		String fileName = "";

		// pdfOutFIleName = realPath + "monthsAppointmentReport.pdf";
		pdfOutFIleName = "monthsAppointmentReport.pdf";
		fileName = "monthsAppointmentReport.pdf";

		/*
		 * message = convertToPDFUtil.generateAppointmentReportPDF(realPath,
		 * pdfOutFIleName, patientForm.getCheck(), loginForm.getClinicID());
		 */

		/*
		 * check whether at least appointment list checkbox is checked, if yes, proceed
		 * further to generate PDF else give message saying no records was selected
		 */
		if (patientForm.getAppointmentID() == null) {
			System.out.println("No check box is checked.");

			message = "noSelection";
		} else {

			message = convertToPDFUtil.generatePatientAppointmentReportPDF(realPath, pdfOutFIleName, patientForm,
					loginForm.getClinicID(), "Month");

		}

		if (message.equals("success")) {

			addActionMessage("Successfully generated appointment report");

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Appointment Report Download", loginForm.getUserID());

			File fileToDownload = new File(realPath + "/" + pdfOutFIleName);

			// Storing file to S3 RDML INPUT FILE location
			message = awss3Connect.pushFile(fileToDownload, pdfOutFIleName, bucketName, bucketRegion, s3reportFilePath);

			S3ObjectInputStream s3ObjectInputStream = s3
					.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, pdfOutFIleName))
					.getObjectContent();

			patientForm.setFileInputStream(s3ObjectInputStream);

			patientForm.setFileName(pdfOutFIleName);

			return SUCCESS;

		} else if (message.equals("noSelection")) {

			addActionError("No record was selected. Please select at least one record.");

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Appointment Report Exception Occurred(No Record Selected)",
					loginForm.getUserID());

			return ERROR;

		} else {

			System.out.println("Failed to create appointment PDF.");

			addActionError("Failed to generate appointment report PDF. Please check server logs for more details.");

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Appointment Report PDF Generation Exception Occurred",
					loginForm.getUserID());

			return ERROR;

		}

	}

	/**
	 * 
	 * @throws Exception
	 */
	public void searchSurveyLocation() throws Exception {

		response.setContentType("application/json");

		ArrayList<String> list = new ArrayList<String>();

		String surveyDetails = "Dokewadi-1,Dokewadi -2,Gavhanewadi -1,Hiradgaon-1,Hiradgaon-2,Hiradgaon-3,Kokangaon-1,KOkangaon-2,Mawdi-1,Mawdi-2,"
				+ "Pedgaon-1,Pedgaon-2,Pedgaon-3,Pedgaon-4,Pedgaon-5,Pedgaon-6,Kanpewadi-1,Shedgaon-1,Shedgaon-2,Shedgaon-3,Shedgaon-4,Shedgaon-5,"
				+ "Shedgaon-6,Aaghorewadi-1,Ghodegaon-1,Ghodegaon-2,Ghodegaon-3,Chorachiwadi-1,Chorachiwadi-2,Chikhaltanwadi-1,Chikhaltanwadi-2,Welu-1,"
				+ "Mingandumala-1,Mingandumala-2,Takalikadevali-1,Takalikadevali-2,Takalikadevali-3,Takalikadevali-4,Chandgaon-1,Chandgaon-2,Chandgaon-3,"
				+ "Talonar-1,Talonar-2,Talonar-3,Talonar-4,Tandli Dumala-1,Tandli Dumala-2,Tandli Dumala-3,Tandli Dumala-4,Kojegvhan-1,Kojegvhan-2,Mahadevwadi-1,"
				+ "Belvandi-1,Belvandi-2,Belvandi-3,Belvandi-4,Belvandi-5,Belvandi-6,Belvandi-7,Belvandi-8,Yelapne-1,Yelapne-2,Yelapne-3,Yelapne-4,Pijore c-1,"
				+ "Pijore c-2,Polijwadi-1,Polijwadi-2,Rajapur-1,Rajapur-2,Rajapur-3,Math-1,Math-2,Mengalwadi-1,Danewadi-1,Danewadi-2,Mhase-1,Mhase-2,Mhase-3,"
				+ "Raygvhan-1,Raygvhan-2,Wadgaon Shidreg-1,Wadgaon Shidreg-2,Pimpari Kolander-1,Pimpari Kolander-2,Ukkadgaon-1,Ukkadgaon-2,"
				+ "Ukkadgaon-3,Kashi-1,Kashi-2,Kashi-3,Kashi-4,Kashi-5,Kashi-6,Kashi-7,Kashi-8,Kashi-9,Kashi-10,Shangvi-1,Shangvi-2,Nimgaon Khalu-1,"
				+ "Nimgaon Khalu-2,Nimgaon Khalu-3,Gar-1,Gar-2,Kovtha-1,Kovtha-2,Kovtha-3,Shipatkarwadi-1,Ajnuj-1,Ajnuj-2,Ajnuj-3,Aandwadi-1,Aandwadi-2,"
				+ "Aandwadi-3,Aandwadi-4,Arvi-1,Arvi-2,Aanare-1,Lipanaon-1,Lipanaon-2,Lipanaon-3,Lipanaon-4,Lipanaon-5,Lipanaon-6,Lipanaon-7,Lipanaon-8,"
				+ "MundeKarwadi-1,MundeKarwadi-2,MundeKarwadi-3,Janglewadi-1,Janglewadi-2,Mhatar Pimpri-1,Mhatar Pimpr-2,Kolgaon-1,Kolgaon-2,Kolgaon-3,Kolgaon-4,"
				+ "Kolgaon-5,Kolgaon-6,Kolgaon-7,Kolgaon-8,Kolgaon-9,Kolgaon-10,Kolgaon-11,Kolgaon-12,Lagdwadi-1,Mapkarwadi-1,Pandhrewad-1,Vithekarwadi-1,"
				+ "Chikhali-1,Chikhali-2,Chikhali-3,Koregaon-1,Koregaon-2,Juregaon-1,Juregaon-2,Mangujgaon-1,Ghutewadi-1,Ghutewadi-2,Ghargaon-1,Ghargaon-2,"
				+ "Ghargaon-3,Ghargaon-4,Ghargaon-5,Ghargaon-6,Ghotvi-1,Ghotvi-2,Dhorja-1,Dhorja-2,Kothul-1,Kothul-2,Surodi-1,Vadali-1,Vadali-2,Mangaon-1,"
				+ "Mangaon-2,Mangaon-3,Mangaon-4,Mangaon-5,Mandavgan-1,Mandavgan-2,Mandavgan-3,Mandavgan-4,Mandavgan-5,Mandavgan-6,Kamthi-1,Kamthi-2,Mahadulwadi-1,"
				+ "Mahadulwadi-2,Khandgaon-1,Khandgaon-2,Pijore-1,Pijore-2,Walghud-1,Bangarde-1,Bangarde-2,Ghogrgaon-1,Ghogrgaon-2,Ghogrgaon-3,Ghogrgaon-4,"
				+ "Ruikhel-1,Ruikhel-2,Banpimpri-1,Banpimpri-2,chambar sangvi-1,Tardgvhan-1,Tardgvhan-2,Thitesangvi-1,thitesangvi-2,Deulgaon-1,Deulgaon-2,"
				+ "Deulgaon-3,Wadgaon-1,Wadgaon-2,Belvandi kothar-1,Belvandi kothar-2,Pimpalgaon pisa-1,Pimpalgaon pisa-2,Pimpalgaon pisa-3,Pimpalgaon pisa-4,"
				+ "Pimpalgaon pisa-5,Pimpalgaon pisa-6,Pimpalgaon pisa-7,Pimpalgaon pisa-8,Pimpalgaon pisa-9,Khatarwadi-1,Khatarwadi-2,erandoli-1,erandoli-2,"
				+ "Nimbavi-1,Nimbavi-2,Koregavhan-1,Koregavhan-2,sarola somvanshi-1,sarola somvanshi-2,Vijapur-1,Vijapur-2,Vijapur-3,chamunderi-1,chamunderi-2,"
				+ "Dhaalgaon-1,Dhaalgaon-2,Dhaalgaon-3,Dhaalgaon-4,yevati-1,yevati-2,Arangaon D-1,Arangaon D-2,kondegvhan-1,kondegvhan-2,devdaithan-1,devdaithan-2,"
				+ "devdaithan-3,devdaithan-4,devdaithan-5,Hingani-1,Hingani-2,Hingani-3,Gavhanewadi-1,Gavhanewadi-2,Gavhanewadi-3,Parvatwadi-1,Mahadevwadi-1,"
				+ "mdewadhgaon-1,mdewadhgaon-2,mdewadhgaon-3,mdewadhgaon-4,mdewadhgaon-5,Shirasgaon-1,Shirasgaon-2,Hingewadi-1,Hingewadi-2,Hingewadi-3,"
				+ "Hingewadi-4,Hingewadi-5,Bori-1,Bori-2,Pargaon-1,Pargaon-2,Pargaon-3,Pargaon-4,Khetmalijwadi-1,Khetmalijwadi-2,Vagdari-1,Vagdari-2,Vagdari-3,"
				+ "Vagdari-4,Dhokrai-1,Dhokrai-2,Domalwadi-1,choramlewadi-1,Masalwadi-1,Shrigondashahar-1,Shrigondashahar-2,Shrigondashahar-3,Shrigondashahar-4,"
				+ "Shrigondashahar-5,Shrigondashahar-6,Shrigondashahar-7,Shrigondashahar-8,Shrigondashahar-9,Shrigondashahar-10,Shrigondashahar-11,"
				+ "Shrigondashahar-12,Shrigondashahar-13,Shrigondashahar-14,Shrigondashahar-15,Shrigondashahar-16,Shrigondashahar-17,Shrigondashahar-18,"
				+ "Shrigondashahar-19,Shrigondashahar-20,Ukhalgaon-1,Ukhalgaon-2,Baburdi-1,Baburdi-2,Chimbhala-1,Chimbhala-2,Lonivyanknath-1,Lonivyanknath-2,"
				+ "Lonivyanknath-3,Lonivyanknath-4,Lonivyanknath-5,Lonivyanknath-6,Lonivyanknath-7";

		String searchName = request.getParameter("searchName");

		// System.out.println("user entered..."+searchName);

		String array[] = surveyDetails.split(",");

		for (String location : array) {
			if (location.toLowerCase().contains(searchName.toLowerCase())) {
				list.add(location);
			}
		}

		Collections.sort(list);

		String searchList = new Gson().toJson(list);

		// System.out.println("Jso..."+searchList);
		response.getWriter().write(searchList);

	}

	/**
	 * 
	 * @throws Execption
	 */
	public void serachDiagnosis() throws Exception {

		response.setContentType("application/json");

		List<String> diagnosisList = new ArrayList<String>();

		patientDAOInf = new PatientDAOImpl();

		String diagnosis = request.getParameter("searchName");

		diagnosisList = patientDAOInf.retrieveDiagnosis(diagnosis);

		Collections.sort(diagnosisList);

		String searchList = new Gson().toJson(diagnosisList);

		// System.out.println("Jso..."+searchList);
		response.getWriter().write(searchList);

	}

	/**
	 * 
	 * @return
	 * @throws Exception
	 */
	public String addNewGeneralHospitalVisit() throws Exception {

		serviceInf = new eDhanvantariServiceImpl();
		patientDAOInf = new PatientDAOImpl();

		SMSSender sender = new SMSSender();

		LoginDAOInf daoInf = new LoginDAOImpl();

		PrescriptionManagementDAOInf managementDAOInf = new PrescriptionManagementDAOImpl();

		/*
		 * Getting clinicID from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");

		/*
		 * Retrieving patient age based on patientID
		 */
		String patientAge = patientDAOInf.retrievePatientAgeByPatientID(patientForm.getPatientID());

		request.setAttribute("patientAge", patientAge);

		/*
		 * Setting clinicID from session into clinicID variable from PatientForm
		 */
		patientForm.setClinicID(loginForm.getClinicID());

		ServletContext context = request.getServletContext();

		String realPath = context.getRealPath("/");

		request.setAttribute("saveVisitcheck", "Saved");

		/*
		 * Setting visit type ID into patient form
		 */
		patientForm.setVisitTypeID(loginForm.getVisitTypeID());

		request.setAttribute("apptID", patientForm.getAptID());

		patientForm.setPracticeID(loginForm.getPracticeID());

		patientForm.setUserID(loginForm.getUserID());

		message = serviceInf.addGeneralHospitalVisit(patientForm);

		if (message.equals("success")) {

			addActionMessage("Visit added sucessfully.");

			/*
			 * Update appointment status to Consultation
			 */
			patientDAOInf.updateConsultationAppointmentStatus(patientForm.getPatientID(), patientForm.getAptID());

			request.setAttribute("printAvailable", "Yes");

			/*
			 * Check whether employee exists for the logged in user, if so then updated
			 * his/her userID as clinicianID into Appointment table for correspoding table,
			 * else dont
			 */
			int empID = loginForm.getUserID();

			if (empID != 0) {
				patientDAOInf.updateAttendedByInAppointmentForPatient(loginForm.getUserID(), patientForm.getAptID());
			}
			// inserting new record for the patient into VisitStatus table for status Booked
			if (patientForm.getStartDate() == null || patientForm.getStartDate().equals("NA")) {
				System.out.println("start date not found.");
			} else {
				patientDAOInf.insertVisitStatus(patientForm.getVisitID(), patientForm.getAptID(),
						patientForm.getPatientID(), patientForm.getStartDate(), null, ActivityStatus.CONSULTATION,
						loginForm.getClinicID());
			}

			/*
			 * retrieving last visitID for the patientID from Visit table
			 */
			int lastVisitID = patientDAOInf.retrieveLastVisitID(patientForm.getPatientID(), loginForm.getClinicID());

			System.out.println("Last visit ID :: " + lastVisitID);

			patientList = patientDAOInf.retrieveGeneralHospitalPatientDetailsForNewVisit(patientForm.getPatientID(),
					lastVisitID, loginForm.getClinicID(), patientForm.getAptID());

			boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

			if (visitCheck) {
				billList = patientDAOInf.retrieveVisitBillingByVisitID1(patientForm.getVisitID());
			} else {
				billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
						loginForm.getClinicID(), loginForm.getClinicSuffix());
			}

			OPDChargesList = managementDAOInf.retrieveAllOPDCharges(loginForm.getPracticeID());
			request.setAttribute("OPDChargesList", OPDChargesList);

			String ChargesDetails = managementDAOInf.retrieveOPDChargesDetailsByReceiptID(patientForm.getVisitID());
			request.setAttribute("ChargesDetails", ChargesDetails);

			LabTestList = managementDAOInf.retrieveAllLabTests(loginForm.getPracticeID());
			request.setAttribute("LabTestList", LabTestList);

			String InvestigationDetails = managementDAOInf
					.retrieveInvestigationDetailsByVisitID(patientForm.getVisitID());
			request.setAttribute("InvestigationDetails", InvestigationDetails);

			String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
			request.setAttribute("paymentType", paymentType);

			// retrieving present complaint list for last visit of patient
			String complaintList = patientDAOInf.retrievePresentComplaintsOfLastVisit(lastVisitID);

			request.setAttribute("complaintList", complaintList);

			/* HashMap<String, String> PVComplaints = patientDAOInf.getPVComplaints(); */

			PVComplaints = patientDAOInf.getPVComplaints();

			String categoryList = patientDAOInf.retrieveCategoryListOfLastVisit(lastVisitID);
			request.setAttribute("categoryList", categoryList);

			MedicalHistory = patientDAOInf.retrievemedicalHistoryListOfLastVisit(patientForm,
					patientForm.getPatientID());
			request.setAttribute("MedicalHistory", MedicalHistory);

			FamilyHistory = patientDAOInf.retrieveFamilyHistoryListOfLastVisit(patientForm, patientForm.getPatientID());
			request.setAttribute("FamilyHistory", FamilyHistory);

			PersonalHistory = patientDAOInf.retrievePersonalHistoryListOfLastVisit(patientForm,
					patientForm.getPatientID());
			request.setAttribute("PersonalHistory", PersonalHistory);

			onEaminationList = patientDAOInf.retrieveOnExaminationListByVisitID(lastVisitID);
			request.setAttribute("onEaminationList", onEaminationList);

			InjectionPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
					lastVisitID, "Injection");
			InjectionList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Injection");

			TabletPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
					lastVisitID, "Tablet");
			TabletList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Tablet");

			LiquidPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
					lastVisitID, "Liquid");
			LiquidList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Liquid");

			DiagnosisList = configurationUtil.getDiagnoseList();

			/* Retrieve labReport List */
			labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
					loginForm.getClinicID());

			request.setAttribute("apptID", patientForm.getAptID());

			diagnoseList = configurationUtil.getDiagnoseList();

			drugList = configurationUtil.getTradeNameList();

			frequencyList = configurationUtil.getFrequencyList();

			// chargeTypeList = configurationUtil.getChargeTypeList();

			doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

			String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

			request.setAttribute("medicalCertiText", medicatCertificate);

			String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

			request.setAttribute("referralLetter", referralLetter);

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Add GeneralHospital Visit", loginForm.getUserID());

			/*
			 * Getting form name to be display based on logged in User
			 */
			String[] formNameArray = loginForm.getOPDJSPName().split("&");

			System.out.println("Add Rasayu JSP Page name for logged in user is ::: " + formNameArray[0].trim());

			// Setting add opd page name value in pageName variable
			setPageName(formNameArray[0].trim());

			return SUCCESS;

		} else {

			request.setAttribute("printAvailable", "No");
			addActionError("Failed to add visit. Please check server logs for more details.");

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Add GeneralHospital Visit Exception Occurred",
					loginForm.getUserID());

			int lastVisitID = patientDAOInf.retrieveLastVisitID(patientForm.getPatientID(), loginForm.getClinicID());

			System.out.println("Last visit ID :: " + lastVisitID);

			patientList = patientDAOInf.retrieveGeneralHospitalPatientDetailsForNewVisit(patientForm.getPatientID(),
					lastVisitID, loginForm.getClinicID(), patientForm.getAptID());

			boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

			if (visitCheck) {
				billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
			} else {
				billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
						loginForm.getClinicID(), loginForm.getClinicSuffix());
			}

			OPDChargesList = managementDAOInf.retrieveAllOPDCharges(loginForm.getPracticeID());
			request.setAttribute("OPDChargesList", OPDChargesList);

			String ChargesDetails = managementDAOInf.retrieveOPDChargesDetailsByReceiptID(patientForm.getVisitID());
			request.setAttribute("ChargesDetails", ChargesDetails);

			LabTestList = managementDAOInf.retrieveAllLabTests(loginForm.getPracticeID());
			request.setAttribute("LabTestList", LabTestList);

			String InvestigationDetails = managementDAOInf
					.retrieveInvestigationDetailsByVisitID(patientForm.getVisitID());
			request.setAttribute("InvestigationDetails", InvestigationDetails);

			String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
			request.setAttribute("paymentType", paymentType);

			// retrieving present complaint list for last visit of patient
			String complaintList = patientDAOInf.retrievePresentComplaintsOfLastVisit(lastVisitID);

			request.setAttribute("complaintList", complaintList);

			/* HashMap<String, String> PVComplaints = patientDAOInf.getPVComplaints(); */

			PVComplaints = patientDAOInf.getPVComplaints();

			String categoryList = patientDAOInf.retrieveCategoryListOfLastVisit(lastVisitID);
			request.setAttribute("categoryList", categoryList);

			MedicalHistory = patientDAOInf.retrievemedicalHistoryListOfLastVisit(patientForm,
					patientForm.getPatientID());
			request.setAttribute("MedicalHistory", MedicalHistory);

			FamilyHistory = patientDAOInf.retrieveFamilyHistoryListOfLastVisit(patientForm, patientForm.getPatientID());
			request.setAttribute("FamilyHistory", FamilyHistory);

			PersonalHistory = patientDAOInf.retrievePersonalHistoryListOfLastVisit(patientForm,
					patientForm.getPatientID());
			request.setAttribute("PersonalHistory", PersonalHistory);

			onEaminationList = patientDAOInf.retrieveOnExaminationListByVisitID(lastVisitID);
			request.setAttribute("onEaminationList", onEaminationList);

			InjectionPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
					lastVisitID, "Injection");
			InjectionList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Injection");

			TabletPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
					lastVisitID, "Tablet");
			TabletList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Tablet");

			LiquidPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
					lastVisitID, "Liquid");
			LiquidList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Liquid");

			DiagnosisList = configurationUtil.getDiagnosisList();

			/* Retrieve labReport List */
			labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
					loginForm.getClinicID());

			request.setAttribute("apptID", patientForm.getAptID());

			diagnoseList = configurationUtil.getDiagnoseList();

			drugList = configurationUtil.getTradeNameList();

			frequencyList = configurationUtil.getFrequencyList();

			// chargeTypeList = configurationUtil.getChargeTypeList();

			doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

			String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

			request.setAttribute("medicalCertiText", medicatCertificate);

			String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

			request.setAttribute("referralLetter", referralLetter);

			/*
			 * Update appointment status to Consultation
			 */
			patientDAOInf.updateConsultationAppointmentStatus(patientForm.getPatientID(), patientForm.getAptID());

			/*
			 * Getting form name to be display based on logged in User
			 */
			String[] formNameArray = loginForm.getOPDJSPName().split("&");

			System.out.println("Add Rasayu JSP Page name for logged in user is ::: " + formNameArray[0].trim());

			// Setting add opd page name value in pageName variable
			setPageName(formNameArray[0].trim());

			return ERROR;

		}

	}

	public String addNewGeneralHospitalPrescription() throws Exception {

		if (patientForm.getAddButton().startsWith(",")) {
			patientForm.getAddButton().substring(1);
		}

		if (patientForm.getAddButton().equals("print") || patientForm.getAddButton().equals("Print")) {
			System.out.println("inside add button = print");
			printGeneralHospitalPrescription();
		} else {
			System.out.println("outside add button = print");

			patientDAOInf = new PatientDAOImpl();

			serviceInf = new eDhanvantariServiceImpl();

			SMSSender smsSender = new SMSSender();

			EmailUtil emailUtil = new EmailUtil();

			ConvertToPDFUtil convertToPDFUtil = new ConvertToPDFUtil();

			LoginDAOInf daoInf = new LoginDAOImpl();

			RegistrationDAOinf registrationDAOinf = new RegistrationDAOImpl();

			PrescriptionManagementDAOInf managementDAOInf = new PrescriptionManagementDAOImpl();

			/*
			 * Getting user role from session
			 */
			LoginForm loginForm = (LoginForm) session.get("USER");

			/*
			 * Retrieving patient age based on patientID
			 */
			String patientAge = patientDAOInf.retrievePatientAgeByPatientID(patientForm.getPatientID());

			request.setAttribute("patientAge", patientAge);

			/*
			 * Setting clinicID from session into clinicID variable from PatientForm
			 */
			patientForm.setClinicID(loginForm.getClinicID());

			ServletContext context = request.getServletContext();

			String realPath = context.getRealPath("/");

			request.setAttribute("saveVisitcheck", "Saved");

			orthoBillItemList = patientDAOInf.retrieveOrthoBillingItemList(patientForm.getVisitID());

			/*
			 * Setting visit type ID into patient form
			 */
			patientForm.setVisitTypeID(loginForm.getVisitTypeID());

			request.setAttribute("apptID", patientForm.getAptID());

			patientForm.setPracticeID(loginForm.getPracticeID());

			patientForm.setUserID(loginForm.getUserID());

			message = serviceInf.addNewGeneralHospitalPrescription(patientForm);

			if (message.equals("success")) {

				addActionMessage("Prescription added successfully.");

				String prescTabCheck = "enable";

				request.setAttribute("prescTabCheck", prescTabCheck);

				request.setAttribute("printAvailable", "Yes");

				request.setAttribute("printPrescAvailable", "Yes");

				String dummy = "success";

				/*
				 * Update appointment status to Prescription
				 */
				patientDAOInf.updatePrescriptionAppointmentStatus(patientForm.getPatientID(), patientForm.getAptID());

				patientList = patientDAOInf.retrieveGeneralHospitalPatientDetailsForNewVisit(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID(), patientForm.getAptID());

				boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

				if (visitCheck) {
					billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
				} else {
					billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
							loginForm.getClinicID(), loginForm.getClinicSuffix());
				}

				OPDChargesList = managementDAOInf.retrieveAllOPDCharges(loginForm.getPracticeID());
				request.setAttribute("OPDChargesList", OPDChargesList);

				String ChargesDetails = managementDAOInf.retrieveOPDChargesDetailsByReceiptID(patientForm.getVisitID());
				request.setAttribute("ChargesDetails", ChargesDetails);

				LabTestList = managementDAOInf.retrieveAllLabTests(loginForm.getPracticeID());
				request.setAttribute("LabTestList", LabTestList);

				String InvestigationDetails = managementDAOInf
						.retrieveInvestigationDetailsByVisitID(patientForm.getVisitID());
				request.setAttribute("InvestigationDetails", InvestigationDetails);

				String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
				request.setAttribute("paymentType", paymentType);

				// retrieving present complaint list for last visit of patient
				String complaintList = patientDAOInf.retrievePresentComplaintsOfLastVisit(patientForm.getVisitID());

				request.setAttribute("complaintList", complaintList);

				/* HashMap<String, String> PVComplaints = patientDAOInf.getPVComplaints(); */

				PVComplaints = patientDAOInf.getPVComplaints();

				String categoryList = patientDAOInf.retrieveCategoryListOfLastVisit(patientForm.getVisitID());
				request.setAttribute("categoryList", categoryList);

				MedicalHistory = patientDAOInf.retrievemedicalHistoryListOfLastVisit(patientForm,
						patientForm.getPatientID());
				request.setAttribute("MedicalHistory", MedicalHistory);

				FamilyHistory = patientDAOInf.retrieveFamilyHistoryListOfLastVisit(patientForm,
						patientForm.getPatientID());
				request.setAttribute("FamilyHistory", FamilyHistory);

				PersonalHistory = patientDAOInf.retrievePersonalHistoryListOfLastVisit(patientForm,
						patientForm.getPatientID());
				request.setAttribute("PersonalHistory", PersonalHistory);

				onEaminationList = patientDAOInf.retrieveOnExaminationListByVisitID(patientForm.getVisitID());
				request.setAttribute("onEaminationList", onEaminationList);

				InjectionPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
						patientForm.getVisitID(), "Injection");
				InjectionList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Injection");

				TabletPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
						patientForm.getVisitID(), "Tablet");
				TabletList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Tablet");

				LiquidPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
						patientForm.getVisitID(), "Liquid");
				LiquidList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Liquid");

				DiagnosisList = configurationUtil.getDiagnosisList();

				/* Retrieve labReport List */
				labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
						loginForm.getClinicID());

				request.setAttribute("apptID", patientForm.getAptID());

				diagnoseList = configurationUtil.getDiagnoseList();

				drugList = configurationUtil.getTradeNameList();

				frequencyList = configurationUtil.getFrequencyList();

				// chargeTypeList = configurationUtil.getChargeTypeList();

				doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

				String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

				request.setAttribute("medicalCertiText", medicatCertificate);

				String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

				request.setAttribute("referralLetter", referralLetter);
				// Inserting values into Audit table
				daoInf.insertAudit(request.getRemoteAddr(), "Add General Physician Prescription",
						loginForm.getUserID());

				/*
				 * Getting form name to be display based on logged in User
				 */
				String[] formNameArray = loginForm.getOPDJSPName().split("&");

				System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[0].trim());

				// Setting add opd page name value in pageName variable
				setPageName(formNameArray[0].trim());

				return SUCCESS;

			} else if (message.equals("noVisit")) {

				addActionError("No visit added. Please add visit first.");

				String prescTabCheck = "enable";

				request.setAttribute("prescTabCheck", prescTabCheck);

				request.setAttribute("printAvailable", "No");

				request.setAttribute("printPrescAvailable", "No");

				hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

				patientList = patientDAOInf.retrieveGeneralHospitalPatientDetailsForNewVisit(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID(), patientForm.getAptID());

				boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

				if (visitCheck) {
					billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
				} else {
					billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
							loginForm.getClinicID(), loginForm.getClinicSuffix());
				}

				OPDChargesList = managementDAOInf.retrieveAllOPDCharges(loginForm.getPracticeID());
				request.setAttribute("OPDChargesList", OPDChargesList);

				String ChargesDetails = managementDAOInf.retrieveOPDChargesDetailsByReceiptID(patientForm.getVisitID());
				request.setAttribute("ChargesDetails", ChargesDetails);

				LabTestList = managementDAOInf.retrieveAllLabTests(loginForm.getPracticeID());
				request.setAttribute("LabTestList", LabTestList);

				String InvestigationDetails = managementDAOInf
						.retrieveInvestigationDetailsByVisitID(patientForm.getVisitID());
				request.setAttribute("InvestigationDetails", InvestigationDetails);

				String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
				request.setAttribute("paymentType", paymentType);

				// retrieving present complaint list for last visit of patient
				String complaintList = patientDAOInf.retrievePresentComplaintsOfLastVisit(patientForm.getVisitID());

				request.setAttribute("complaintList", complaintList);

				/* HashMap<String, String> PVComplaints = patientDAOInf.getPVComplaints(); */

				PVComplaints = patientDAOInf.getPVComplaints();

				String categoryList = patientDAOInf.retrieveCategoryListOfLastVisit(patientForm.getVisitID());
				request.setAttribute("categoryList", categoryList);

				MedicalHistory = patientDAOInf.retrievemedicalHistoryListOfLastVisit(patientForm,
						patientForm.getPatientID());
				request.setAttribute("MedicalHistory", MedicalHistory);

				FamilyHistory = patientDAOInf.retrieveFamilyHistoryListOfLastVisit(patientForm,
						patientForm.getPatientID());
				request.setAttribute("FamilyHistory", FamilyHistory);

				PersonalHistory = patientDAOInf.retrievePersonalHistoryListOfLastVisit(patientForm,
						patientForm.getPatientID());
				request.setAttribute("PersonalHistory", PersonalHistory);

				onEaminationList = patientDAOInf.retrieveOnExaminationListByVisitID(patientForm.getVisitID());
				request.setAttribute("onEaminationList", onEaminationList);

				InjectionPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
						patientForm.getVisitID(), "Injection");
				InjectionList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Injection");

				TabletPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
						patientForm.getVisitID(), "Tablet");
				TabletList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Tablet");

				LiquidPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
						patientForm.getVisitID(), "Liquid");
				LiquidList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Liquid");

				DiagnosisList = configurationUtil.getDiagnosisList();

				/* Retrieve labReport List */
				labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
						loginForm.getClinicID());

				request.setAttribute("apptID", patientForm.getAptID());

				diagnoseList = configurationUtil.getDiagnoseList();

				drugList = configurationUtil.getTradeNameList();

				frequencyList = configurationUtil.getFrequencyList();

				// chargeTypeList = configurationUtil.getChargeTypeList();

				doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

				String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

				request.setAttribute("medicalCertiText", medicatCertificate);

				String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

				request.setAttribute("referralLetter", referralLetter);

				// Inserting values into Audit table
				daoInf.insertAudit(request.getRemoteAddr(), "Add General Physician Prescription Exception occurred",
						loginForm.getUserID());

				/*
				 * Update appointment status to Prescription
				 */
				patientDAOInf.updatePrescriptionAppointmentStatus(patientForm.getPatientID(), patientForm.getAptID());
				/*
				 * Getting form name to be display based on logged in User
				 */
				String[] formNameArray = loginForm.getOPDJSPName().split("&");

				System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[0].trim());

				// Setting add opd page name value in pageName variable
				setPageName(formNameArray[0].trim());

				return ERROR;

			} else {

				addActionError(
						"Eexception occurred while adding prescription details. Please check server logs for more details.");

				String prescTabCheck = "enable";

				request.setAttribute("prescTabCheck", prescTabCheck);

				request.setAttribute("printAvailable", "Yes");

				request.setAttribute("printPrescAvailable", "No");
				hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

				request.setAttribute("apptID", patientForm.getAptID());

				patientList = patientDAOInf.retrieveGeneralHospitalPatientDetailsForNewVisit(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID(), patientForm.getAptID());

				boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

				if (visitCheck) {
					billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
				} else {
					billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
							loginForm.getClinicID(), loginForm.getClinicSuffix());
				}

				// retrieving present complaint list for last visit of patient
				String complaintList = patientDAOInf.retrievePresentComplaintsOfLastVisit(patientForm.getVisitID());

				request.setAttribute("complaintList", complaintList);

				/* HashMap<String, String> PVComplaints = patientDAOInf.getPVComplaints(); */

				PVComplaints = patientDAOInf.getPVComplaints();

				String categoryList = patientDAOInf.retrieveCategoryListOfLastVisit(patientForm.getVisitID());
				request.setAttribute("categoryList", categoryList);

				MedicalHistory = patientDAOInf.retrievemedicalHistoryListOfLastVisit(patientForm,
						patientForm.getPatientID());
				request.setAttribute("MedicalHistory", MedicalHistory);

				FamilyHistory = patientDAOInf.retrieveFamilyHistoryListOfLastVisit(patientForm,
						patientForm.getPatientID());
				request.setAttribute("FamilyHistory", FamilyHistory);

				PersonalHistory = patientDAOInf.retrievePersonalHistoryListOfLastVisit(patientForm,
						patientForm.getPatientID());
				request.setAttribute("PersonalHistory", PersonalHistory);

				onEaminationList = patientDAOInf.retrieveOnExaminationListByVisitID(patientForm.getVisitID());
				request.setAttribute("onEaminationList", onEaminationList);

				InjectionPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
						patientForm.getVisitID(), "Injection");
				InjectionList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Injection");

				TabletPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
						patientForm.getVisitID(), "Tablet");
				TabletList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Tablet");

				LiquidPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
						patientForm.getVisitID(), "Liquid");
				LiquidList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Liquid");

				DiagnosisList = configurationUtil.getDiagnosisList();

				/* Retrieve labReport List */
				labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
						loginForm.getClinicID());

				String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

				request.setAttribute("medicalCertiText", medicatCertificate);

				String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

				request.setAttribute("referralLetter", referralLetter);

				diagnoseList = configurationUtil.getDiagnoseList();

				drugList = configurationUtil.getTradeNameList();

				frequencyList = configurationUtil.getFrequencyList();

				// chargeTypeList = configurationUtil.getChargeTypeList();

				doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

				// Inserting values into Audit table
				daoInf.insertAudit(request.getRemoteAddr(), "Add General Physician Prescription Exception occurred",
						loginForm.getUserID());

				/*
				 * Update appointment status to Prescription
				 */
				patientDAOInf.updatePrescriptionAppointmentStatus(patientForm.getPatientID(), patientForm.getAptID());
				/*
				 * Getting form name to be display based on logged in User
				 */
				String[] formNameArray = loginForm.getOPDJSPName().split("&");

				System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[0].trim());

				// Setting add opd page name value in pageName variable
				setPageName(formNameArray[0].trim());

				return ERROR;

			}
		}
		return SUCCESS;
	}

	public String printGeneralHospitalVisit() throws Exception {
		/*
		 * Getting user role from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");

		patientDAOInf = new PatientDAOImpl();

		LoginDAOInf daoInf = new LoginDAOImpl();

		PrescriptionManagementDAOInf managementDAOInf = new PrescriptionManagementDAOImpl();

		RegistrationDAOinf registrationDAOinf = new RegistrationDAOImpl();

		ConvertToPDFUtil convertToPDFUtil = new ConvertToPDFUtil();

		String accessKey = xmlUtil.getAccessKey();

		String secreteKey = xmlUtil.getSecreteKey();

		AWSS3Connect awss3Connect = new AWSS3Connect();

		// getting input file location from S3 bucket
		String s3reportFilePath = xmlUtil.getS3RDMLReportFilePath();

		// getting s3 bucket name
		String bucketName = util.getS3BucketName();

		// getting s3 bucket region
		String bucketRegion = xmlUtil.getS3BucketRegion();

		String s3LogoFilePath = xmlUtil.getS3RDMLFilePath();

		AWSCredentials credentials = new BasicAWSCredentials(accessKey, secreteKey);

		AmazonS3 s3 = AmazonS3ClientBuilder.standard().withCredentials(new AWSStaticCredentialsProvider(credentials))
				.withRegion(bucketRegion).build();

		HttpServletRequest request = ServletActionContext.getRequest();

		ServletContext context = request.getServletContext();

		String realPath = context.getRealPath("/");
		System.out.println("Real path is :: " + realPath);

		/*
		 * verify whther prescription has been added for the current visitID, if so then
		 * only proceed further to print prescription else give error msg saying no
		 * prescription added for this visit
		 */
		boolean visitCheck = patientDAOInf.verifyVisitExistsNew("Visit", patientForm.getVisitID());

		if (visitCheck) {

			// String pdfOutFIleName = realPath + patientForm.getFirstName() +
			// patientForm.getLastName()
			String pdfOutFIleName = patientForm.getFirstName() + patientForm.getLastName() + patientForm.getPatientID()
					+ "_" + patientForm.getVisitID() + "opd.pdf";

			message = convertToPDFUtil.convertGeneralHospitalVisitPDF(patientForm.getPatientID(),
					patientForm.getVisitID(), realPath, pdfOutFIleName, loginForm.getClinicID(), s3, s3LogoFilePath,
					bucketName);

			if (message.equalsIgnoreCase("success")) {

				File inputFile = new File(realPath + "/" + pdfOutFIleName);

				// Storing file to S3 RDML INPUT FILE location
				message = awss3Connect.pushFile(inputFile, pdfOutFIleName, bucketName, bucketRegion, s3reportFilePath);

				S3ObjectInputStream s3ObjectInputStream = s3
						.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, pdfOutFIleName))
						.getObjectContent();

				patientForm.setFileInputStream(s3ObjectInputStream);

				patientForm.setFileName(pdfOutFIleName);

				String dummy = "success";

				String prescTabCheck = "enable";

				request.setAttribute("printAvailable", "Yes");

				request.setAttribute("prescTabCheck", prescTabCheck);

				request.setAttribute("lasteEnteredVisitList", dummy);

				/*
				 * retrieving patientList which contains visit details
				 */
				patientList = patientDAOInf.retrieveGeneralHospitalPatientDetailsForNewVisit(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID(), patientForm.getAptID());

				boolean visitCheck1 = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

				if (visitCheck1) {
					billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
				} else {
					billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
							loginForm.getClinicID(), loginForm.getClinicSuffix());
				}

				OPDChargesList = managementDAOInf.retrieveAllOPDCharges(loginForm.getPracticeID());
				request.setAttribute("OPDChargesList", OPDChargesList);

				String ChargesDetails = managementDAOInf.retrieveOPDChargesDetailsByReceiptID(patientForm.getVisitID());
				request.setAttribute("ChargesDetails", ChargesDetails);

				LabTestList = managementDAOInf.retrieveAllLabTests(loginForm.getPracticeID());
				request.setAttribute("LabTestList", LabTestList);

				String InvestigationDetails = managementDAOInf
						.retrieveInvestigationDetailsByVisitID(patientForm.getVisitID());
				request.setAttribute("InvestigationDetails", InvestigationDetails);

				String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
				request.setAttribute("paymentType", paymentType);

				// retrieving present complaint list for last visit of patient
				String complaintList = patientDAOInf.retrievePresentComplaintsOfLastVisit(patientForm.getVisitID());

				request.setAttribute("complaintList", complaintList);

				PVComplaints = patientDAOInf.getPVComplaints();

				String categoryList = patientDAOInf.retrieveCategoryListOfLastVisit(patientForm.getVisitID());
				request.setAttribute("categoryList", categoryList);

				MedicalHistory = patientDAOInf.retrievemedicalHistoryListOfLastVisit(patientForm,
						patientForm.getPatientID());
				request.setAttribute("MedicalHistory", MedicalHistory);

				FamilyHistory = patientDAOInf.retrieveFamilyHistoryListOfLastVisit(patientForm,
						patientForm.getPatientID());
				request.setAttribute("FamilyHistory", FamilyHistory);

				PersonalHistory = patientDAOInf.retrievePersonalHistoryListOfLastVisit(patientForm,
						patientForm.getPatientID());
				request.setAttribute("PersonalHistory", PersonalHistory);

				onEaminationList = patientDAOInf.retrieveOnExaminationListByVisitID(patientForm.getVisitID());
				request.setAttribute("onEaminationList", onEaminationList);

				InjectionPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
						patientForm.getVisitID(), "Injection");
				InjectionList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Injection");

				TabletPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
						patientForm.getVisitID(), "Tablet");
				TabletList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Tablet");

				LiquidPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
						patientForm.getVisitID(), "Liquid");
				LiquidList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Liquid");

				DiagnosisList = configurationUtil.getDiagnosisList();

				/* Retrieve labReport List */
				labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
						loginForm.getClinicID());

				request.setAttribute("apptID", patientForm.getAptID());

				String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

				request.setAttribute("medicalCertiText", medicatCertificate);

				String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

				request.setAttribute("referralLetter", referralLetter);

				// Inserting values into Audit table
				daoInf.insertAudit(request.getRemoteAddr(), "Add General Physician Prescription",
						loginForm.getUserID());

				/*
				 * Getting form name to be display based on logged in User
				 */
				String[] formNameArray = loginForm.getOPDJSPName().split("&");

				System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[0].trim());

				// Setting add opd page name value in pageName variable
				setPageName(formNameArray[0].trim());

				return SUCCESS;

			} else {
				addActionError("Failed to print OPD Visit.Please check server logs for more details.");

				String dummy = "success";

				request.setAttribute("printAvailable", "Yes");

				String prescTabCheck = "enable";

				request.setAttribute("prescTabCheck", prescTabCheck);

				request.setAttribute("lasteEnteredVisitList", dummy);

				request.setAttribute("opticianFloatCheck", "empty");

				/*
				 * retrieving patientList which contains visit details
				 */
				patientList = patientDAOInf.retrieveGeneralHospitalPatientDetailsForNewVisit(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID(), patientForm.getAptID());

				boolean visitCheck1 = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

				if (visitCheck1) {
					billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
				} else {
					billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
							loginForm.getClinicID(), loginForm.getClinicSuffix());
				}

				OPDChargesList = managementDAOInf.retrieveAllOPDCharges(loginForm.getPracticeID());
				request.setAttribute("OPDChargesList", OPDChargesList);

				String ChargesDetails = managementDAOInf.retrieveOPDChargesDetailsByReceiptID(patientForm.getVisitID());
				request.setAttribute("ChargesDetails", ChargesDetails);

				LabTestList = managementDAOInf.retrieveAllLabTests(loginForm.getPracticeID());
				request.setAttribute("LabTestList", LabTestList);

				String InvestigationDetails = managementDAOInf
						.retrieveInvestigationDetailsByVisitID(patientForm.getVisitID());
				request.setAttribute("InvestigationDetails", InvestigationDetails);

				String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
				request.setAttribute("paymentType", paymentType);

				String complaintList = patientDAOInf.retrievePresentComplaintsOfLastVisit(patientForm.getVisitID());

				request.setAttribute("complaintList", complaintList);

				PVComplaints = patientDAOInf.getPVComplaints();

				String categoryList = patientDAOInf.retrieveCategoryListOfLastVisit(patientForm.getVisitID());
				request.setAttribute("categoryList", categoryList);

				MedicalHistory = patientDAOInf.retrievemedicalHistoryListOfLastVisit(patientForm,
						patientForm.getPatientID());
				request.setAttribute("MedicalHistory", MedicalHistory);

				FamilyHistory = patientDAOInf.retrieveFamilyHistoryListOfLastVisit(patientForm,
						patientForm.getPatientID());
				request.setAttribute("FamilyHistory", FamilyHistory);

				PersonalHistory = patientDAOInf.retrievePersonalHistoryListOfLastVisit(patientForm,
						patientForm.getPatientID());
				request.setAttribute("PersonalHistory", PersonalHistory);

				onEaminationList = patientDAOInf.retrieveOnExaminationListByVisitID(patientForm.getVisitID());
				request.setAttribute("onEaminationList", onEaminationList);

				InjectionPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
						patientForm.getVisitID(), "Injection");
				InjectionList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Injection");

				TabletPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
						patientForm.getVisitID(), "Tablet");
				TabletList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Tablet");

				LiquidPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
						patientForm.getVisitID(), "Liquid");
				LiquidList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Liquid");

				DiagnosisList = configurationUtil.getDiagnosisList();

				/* Retrieve labReport List */
				labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
						loginForm.getClinicID());

				request.setAttribute("apptID", patientForm.getAptID());

				String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

				request.setAttribute("medicalCertiText", medicatCertificate);

				String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

				request.setAttribute("referralLetter", referralLetter);

				// Inserting values into Audit table
				daoInf.insertAudit(request.getRemoteAddr(), "Add General Physician Prescription",
						loginForm.getUserID());

				/*
				 * Getting form name to be display based on logged in User
				 */
				String[] formNameArray = loginForm.getOPDJSPName().split("&");

				System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[0].trim());

				// Setting add opd page name value in pageName variable
				setPageName(formNameArray[0].trim());

				return ERROR;
			}

		} else {

			addActionError("No visit added for current visit. Please add visit first.");

			request.setAttribute("printAvailable", "Yes");

			String prescTabCheck = "enable";

			request.setAttribute("prescTabCheck", prescTabCheck);

			/*
			 * retrieving patientList which contains visit details
			 */
			patientList = patientDAOInf.retrieveGeneralHospitalPatientDetailsForNewVisit(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID(), patientForm.getAptID());

			boolean visitCheck1 = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

			if (visitCheck1) {
				billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
			} else {
				billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
						loginForm.getClinicID(), loginForm.getClinicSuffix());
			}

			OPDChargesList = managementDAOInf.retrieveAllOPDCharges(loginForm.getPracticeID());
			request.setAttribute("OPDChargesList", OPDChargesList);

			String ChargesDetails = managementDAOInf.retrieveOPDChargesDetailsByReceiptID(patientForm.getVisitID());
			request.setAttribute("ChargesDetails", ChargesDetails);

			LabTestList = managementDAOInf.retrieveAllLabTests(loginForm.getPracticeID());
			request.setAttribute("LabTestList", LabTestList);

			String InvestigationDetails = managementDAOInf
					.retrieveInvestigationDetailsByVisitID(patientForm.getVisitID());
			request.setAttribute("InvestigationDetails", InvestigationDetails);

			String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
			request.setAttribute("paymentType", paymentType);

			String dummy = "success";

			request.setAttribute("lasteEnteredVisitList", dummy);

			String complaintList = patientDAOInf.retrievePresentComplaintsOfLastVisit(patientForm.getVisitID());

			request.setAttribute("complaintList", complaintList);

			PVComplaints = patientDAOInf.getPVComplaints();

			String categoryList = patientDAOInf.retrieveCategoryListOfLastVisit(patientForm.getVisitID());
			request.setAttribute("categoryList", categoryList);

			MedicalHistory = patientDAOInf.retrievemedicalHistoryListOfLastVisit(patientForm,
					patientForm.getPatientID());
			request.setAttribute("MedicalHistory", MedicalHistory);

			FamilyHistory = patientDAOInf.retrieveFamilyHistoryListOfLastVisit(patientForm, patientForm.getPatientID());
			request.setAttribute("FamilyHistory", FamilyHistory);

			PersonalHistory = patientDAOInf.retrievePersonalHistoryListOfLastVisit(patientForm,
					patientForm.getPatientID());
			request.setAttribute("PersonalHistory", PersonalHistory);

			onEaminationList = patientDAOInf.retrieveOnExaminationListByVisitID(patientForm.getVisitID());
			request.setAttribute("onEaminationList", onEaminationList);

			InjectionPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID(), "Injection");
			InjectionList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Injection");

			TabletPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID(), "Tablet");
			TabletList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Tablet");

			LiquidPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID(), "Liquid");
			LiquidList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Liquid");

			DiagnosisList = configurationUtil.getDiagnosisList();

			/* Retrieve labReport List */
			labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
					loginForm.getClinicID());

			request.setAttribute("apptID", patientForm.getAptID());

			String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

			request.setAttribute("medicalCertiText", medicatCertificate);

			String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

			request.setAttribute("referralLetter", referralLetter);

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Add General Physician Prescription", loginForm.getUserID());

			/*
			 * Getting form name to be display based on logged in User
			 */
			String[] formNameArray = loginForm.getOPDJSPName().split("&");

			System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[0].trim());

			// Setting add opd page name value in pageName variable
			setPageName(formNameArray[0].trim());

			return ERROR;
		}
	}

	public String printGeneralHospitalPrescription() throws Exception {
		/*
		 * Getting user role from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");

		patientDAOInf = new PatientDAOImpl();

		PrescriptionManagementDAOInf managementDAOInf = new PrescriptionManagementDAOImpl();

		LoginDAOInf daoInf = new LoginDAOImpl();

		RegistrationDAOinf registrationDAOinf = new RegistrationDAOImpl();

		ConvertToPDFUtil convertToPDFUtil = new ConvertToPDFUtil();

		String accessKey = xmlUtil.getAccessKey();

		String secreteKey = xmlUtil.getSecreteKey();

		AWSS3Connect awss3Connect = new AWSS3Connect();

		// getting input file location from S3 bucket
		String s3reportFilePath = xmlUtil.getS3RDMLReportFilePath();

		// getting s3 bucket name
		String bucketName = util.getS3BucketName();

		// getting s3 bucket region
		String bucketRegion = xmlUtil.getS3BucketRegion();

		String s3LogoFilePath = xmlUtil.getS3RDMLFilePath();

		AWSCredentials credentials = new BasicAWSCredentials(accessKey, secreteKey);

		orthoBillItemList = patientDAOInf.retrieveOrthoBillingItemList(patientForm.getVisitID());

		AmazonS3 s3 = AmazonS3ClientBuilder.standard().withCredentials(new AWSStaticCredentialsProvider(credentials))
				.withRegion(bucketRegion).build();

		HttpServletRequest request = ServletActionContext.getRequest();

		ServletContext context = request.getServletContext();

		String realPath = context.getRealPath("/");
		System.out.println("Real path is :: " + realPath);

		/*
		 * verify whther prescription or PrescribedInvestigations details has been added
		 * for the current visitID, if so then only proceed further to print
		 * prescription else give error msg saying no prescription added for this visit
		 */

		boolean visitCheckNew = patientDAOInf.verifyVisitExists("PrescribedInvestigations", patientForm.getVisitID());

		boolean visitCheck = patientDAOInf.verifyVisitExists("Prescription", patientForm.getVisitID());

		if (visitCheck || visitCheckNew) {

			// String pdfOutFIleName = realPath + patientForm.getFirstName() +
			// patientForm.getLastName()
			String pdfOutFIleName = patientForm.getFirstName() + patientForm.getLastName() + patientForm.getPatientID()
					+ "_" + patientForm.getVisitID() + "p.pdf";

			message = convertToPDFUtil.convertGeneralHospitalPrescriptionPDF(patientForm.getPatientID(),
					patientForm.getVisitID(), realPath, pdfOutFIleName, loginForm.getClinicID(), s3, s3LogoFilePath,
					bucketName);

			if (message.equalsIgnoreCase("success")) {

				File inputFile = new File(realPath + "/" + pdfOutFIleName);

				// Storing file to S3 RDML INPUT FILE location
				message = awss3Connect.pushFile(inputFile, pdfOutFIleName, bucketName, bucketRegion, s3reportFilePath);

				S3ObjectInputStream s3ObjectInputStream = s3
						.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, pdfOutFIleName))
						.getObjectContent();

				request.setAttribute("PDFOutFileName", pdfOutFIleName);

				patientForm.setFileInputStream(s3ObjectInputStream);

				patientForm.setFileName(pdfOutFIleName);

				String dummy = "success";

				String prescTabCheck = "enable";

				request.setAttribute("prescTabCheck", prescTabCheck);

				request.setAttribute("lasteEnteredVisitList", dummy);

				request.setAttribute("lasteEnteredVisitList", dummy);

				request.setAttribute("printAvailable", "Yes");

				/*
				 * retrieving last visitID for the patientID from Visit table
				 */
				int lastVisitID = patientDAOInf.retrieveLastVisitID(patientForm.getPatientID(),
						loginForm.getClinicID());

				System.out.println("Last visit ID :: " + lastVisitID);

				patientList = patientDAOInf.retrieveGeneralHospitalPatientDetailsForNewVisit(patientForm.getPatientID(),
						lastVisitID, loginForm.getClinicID(), patientForm.getAptID());

				// retrieving present complaint list for last visit of patient
				String complaintList = patientDAOInf.retrievePresentComplaintsOfLastVisit(lastVisitID);

				request.setAttribute("complaintList", complaintList);

				/* HashMap<String, String> PVComplaints = patientDAOInf.getPVComplaints(); */

				PVComplaints = patientDAOInf.getPVComplaints();

				String categoryList = patientDAOInf.retrieveCategoryListOfLastVisit(lastVisitID);
				request.setAttribute("categoryList", categoryList);

				MedicalHistory = patientDAOInf.retrievemedicalHistoryListOfLastVisit(patientForm,
						patientForm.getPatientID());
				request.setAttribute("MedicalHistory", MedicalHistory);

				FamilyHistory = patientDAOInf.retrieveFamilyHistoryListOfLastVisit(patientForm,
						patientForm.getPatientID());
				request.setAttribute("FamilyHistory", FamilyHistory);

				PersonalHistory = patientDAOInf.retrievePersonalHistoryListOfLastVisit(patientForm,
						patientForm.getPatientID());
				request.setAttribute("PersonalHistory", PersonalHistory);

				onEaminationList = patientDAOInf.retrieveOnExaminationListByVisitID(lastVisitID);
				request.setAttribute("onEaminationList", onEaminationList);

				InjectionPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
						lastVisitID, "Injection");
				InjectionList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Injection");

				TabletPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
						lastVisitID, "Tablet");
				TabletList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Tablet");

				LiquidPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
						lastVisitID, "Liquid");
				LiquidList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Liquid");

				boolean visitCheck1 = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

				if (visitCheck1) {
					billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
				} else {
					billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
							loginForm.getClinicID(), loginForm.getClinicSuffix());
				}

				OPDChargesList = managementDAOInf.retrieveAllOPDCharges(loginForm.getPracticeID());
				request.setAttribute("OPDChargesList", OPDChargesList);

				String ChargesDetails = managementDAOInf.retrieveOPDChargesDetailsByReceiptID(patientForm.getVisitID());
				request.setAttribute("ChargesDetails", ChargesDetails);

				LabTestList = managementDAOInf.retrieveAllLabTests(loginForm.getPracticeID());
				request.setAttribute("LabTestList", LabTestList);

				String InvestigationDetails = managementDAOInf
						.retrieveInvestigationDetailsByVisitID(patientForm.getVisitID());
				request.setAttribute("InvestigationDetails", InvestigationDetails);

				String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
				request.setAttribute("paymentType", paymentType);

				DiagnosisList = configurationUtil.getDiagnosisList();

				/* Retrieve labReport List */
				labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
						loginForm.getClinicID());

				request.setAttribute("apptID", patientForm.getAptID());

				diagnoseList = configurationUtil.getDiagnoseList();

				drugList = configurationUtil.getTradeNameList();

				frequencyList = configurationUtil.getFrequencyList();

				// chargeTypeList = configurationUtil.getChargeTypeList();

				doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

				String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

				request.setAttribute("medicalCertiText", medicatCertificate);

				String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

				request.setAttribute("referralLetter", referralLetter);

				request.setAttribute("apptID", patientForm.getAptID());

				// Inserting values into Audit table
				daoInf.insertAudit(request.getRemoteAddr(), "Add General Physician Prescription",
						loginForm.getUserID());

				/*
				 * Getting form name to be display based on logged in User
				 */
				String[] formNameArray = loginForm.getOPDJSPName().split("&");

				System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[0].trim());

				// Setting add opd page name value in pageName variable
				setPageName(formNameArray[0].trim());

				return SUCCESS;

			} else {
				addActionError("Failed to print Prescription.Please check server logs for more details.");

				String dummy = "success";

				String prescTabCheck = "enable";

				request.setAttribute("prescTabCheck", prescTabCheck);

				request.setAttribute("lasteEnteredVisitList", dummy);

				request.setAttribute("opticianFloatCheck", "empty");

				request.setAttribute("lasteEnteredVisitList", dummy);

				request.setAttribute("apptID", patientForm.getAptID());

				request.setAttribute("printAvailable", "Yes");

				/*
				 * retrieving last visitID for the patientID from Visit table
				 */
				int lastVisitID = patientDAOInf.retrieveLastVisitID(patientForm.getPatientID(),
						loginForm.getClinicID());

				System.out.println("Last visit ID :: " + lastVisitID);

				patientList = patientDAOInf.retrieveGeneralHospitalPatientDetailsForNewVisit(patientForm.getPatientID(),
						lastVisitID, loginForm.getClinicID(), patientForm.getAptID());

				boolean visitCheck1 = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

				if (visitCheck1) {
					billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
				} else {
					billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
							loginForm.getClinicID(), loginForm.getClinicSuffix());
				}

				OPDChargesList = managementDAOInf.retrieveAllOPDCharges(loginForm.getPracticeID());
				request.setAttribute("OPDChargesList", OPDChargesList);

				String ChargesDetails = managementDAOInf.retrieveOPDChargesDetailsByReceiptID(patientForm.getVisitID());
				request.setAttribute("ChargesDetails", ChargesDetails);

				LabTestList = managementDAOInf.retrieveAllLabTests(loginForm.getPracticeID());
				request.setAttribute("LabTestList", LabTestList);

				String InvestigationDetails = managementDAOInf
						.retrieveInvestigationDetailsByVisitID(patientForm.getVisitID());
				request.setAttribute("InvestigationDetails", InvestigationDetails);

				String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
				request.setAttribute("paymentType", paymentType);

				// retrieving present complaint list for last visit of patient
				String complaintList = patientDAOInf.retrievePresentComplaintsOfLastVisit(lastVisitID);

				request.setAttribute("complaintList", complaintList);

				/* HashMap<String, String> PVComplaints = patientDAOInf.getPVComplaints(); */

				PVComplaints = patientDAOInf.getPVComplaints();

				String categoryList = patientDAOInf.retrieveCategoryListOfLastVisit(lastVisitID);
				request.setAttribute("categoryList", categoryList);

				MedicalHistory = patientDAOInf.retrievemedicalHistoryListOfLastVisit(patientForm,
						patientForm.getPatientID());
				request.setAttribute("MedicalHistory", MedicalHistory);

				FamilyHistory = patientDAOInf.retrieveFamilyHistoryListOfLastVisit(patientForm,
						patientForm.getPatientID());
				request.setAttribute("FamilyHistory", FamilyHistory);

				PersonalHistory = patientDAOInf.retrievePersonalHistoryListOfLastVisit(patientForm,
						patientForm.getPatientID());
				request.setAttribute("PersonalHistory", PersonalHistory);

				onEaminationList = patientDAOInf.retrieveOnExaminationListByVisitID(lastVisitID);
				request.setAttribute("onEaminationList", onEaminationList);

				InjectionPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
						lastVisitID, "Injection");
				InjectionList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Injection");

				TabletPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
						lastVisitID, "Tablet");
				TabletList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Tablet");

				LiquidPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
						lastVisitID, "Liquid");
				LiquidList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Liquid");

				DiagnosisList = configurationUtil.getDiagnosisList();

				/* Retrieve labReport List */
				labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
						loginForm.getClinicID());

				request.setAttribute("apptID", patientForm.getAptID());

				diagnoseList = configurationUtil.getDiagnoseList();

				drugList = configurationUtil.getTradeNameList();

				frequencyList = configurationUtil.getFrequencyList();

				// chargeTypeList = configurationUtil.getChargeTypeList();

				doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

				String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

				request.setAttribute("medicalCertiText", medicatCertificate);

				String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

				request.setAttribute("referralLetter", referralLetter);

				// Inserting values into Audit table
				daoInf.insertAudit(request.getRemoteAddr(), "Add General Physician Prescription",
						loginForm.getUserID());

				/*
				 * Getting form name to be display based on logged in User
				 */
				String[] formNameArray = loginForm.getOPDJSPName().split("&");

				System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[0].trim());

				// Setting add opd page name value in pageName variable
				setPageName(formNameArray[0].trim());

				return ERROR;
			}

		} else {
			addActionError("No prescription added for current visit. Please add prescription first.");

			String prescTabCheck = "enable";

			request.setAttribute("prescTabCheck", prescTabCheck);

			request.setAttribute("printAvailable", "Yes");

			/*
			 * retrieving last visitID for the patientID from Visit table
			 */
			int lastVisitID = patientDAOInf.retrieveLastVisitID(patientForm.getPatientID(), loginForm.getClinicID());

			System.out.println("Last visit ID :: " + lastVisitID);

			patientList = patientDAOInf.retrieveGeneralHospitalPatientDetailsForNewVisit(patientForm.getPatientID(),
					lastVisitID, loginForm.getClinicID(), patientForm.getAptID());

			boolean visitCheck1 = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

			if (visitCheck1) {
				billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
			} else {
				billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
						loginForm.getClinicID(), loginForm.getClinicSuffix());
			}

			OPDChargesList = managementDAOInf.retrieveAllOPDCharges(loginForm.getPracticeID());
			request.setAttribute("OPDChargesList", OPDChargesList);

			String ChargesDetails = managementDAOInf.retrieveOPDChargesDetailsByReceiptID(patientForm.getVisitID());
			request.setAttribute("ChargesDetails", ChargesDetails);

			LabTestList = managementDAOInf.retrieveAllLabTests(loginForm.getPracticeID());
			request.setAttribute("LabTestList", LabTestList);

			String InvestigationDetails = managementDAOInf
					.retrieveInvestigationDetailsByVisitID(patientForm.getVisitID());
			request.setAttribute("InvestigationDetails", InvestigationDetails);

			String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
			request.setAttribute("paymentType", paymentType);

			// retrieving present complaint list for last visit of patient
			String complaintList = patientDAOInf.retrievePresentComplaintsOfLastVisit(lastVisitID);

			request.setAttribute("complaintList", complaintList);

			/* HashMap<String, String> PVComplaints = patientDAOInf.getPVComplaints(); */

			PVComplaints = patientDAOInf.getPVComplaints();

			String categoryList = patientDAOInf.retrieveCategoryListOfLastVisit(lastVisitID);
			request.setAttribute("categoryList", categoryList);

			MedicalHistory = patientDAOInf.retrievemedicalHistoryListOfLastVisit(patientForm,
					patientForm.getPatientID());
			request.setAttribute("MedicalHistory", MedicalHistory);

			FamilyHistory = patientDAOInf.retrieveFamilyHistoryListOfLastVisit(patientForm, patientForm.getPatientID());
			request.setAttribute("FamilyHistory", FamilyHistory);

			PersonalHistory = patientDAOInf.retrievePersonalHistoryListOfLastVisit(patientForm,
					patientForm.getPatientID());
			request.setAttribute("PersonalHistory", PersonalHistory);

			onEaminationList = patientDAOInf.retrieveOnExaminationListByVisitID(lastVisitID);
			request.setAttribute("onEaminationList", onEaminationList);

			InjectionPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
					lastVisitID, "Injection");
			InjectionList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Injection");

			TabletPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
					lastVisitID, "Tablet");
			TabletList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Tablet");

			LiquidPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
					lastVisitID, "Liquid");
			LiquidList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Liquid");

			DiagnosisList = configurationUtil.getDiagnosisList();

			/* Retrieve labReport List */
			labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
					loginForm.getClinicID());

			request.setAttribute("apptID", patientForm.getAptID());

			diagnoseList = configurationUtil.getDiagnoseList();

			drugList = configurationUtil.getTradeNameList();

			frequencyList = configurationUtil.getFrequencyList();

			// chargeTypeList = configurationUtil.getChargeTypeList();

			doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

			String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

			request.setAttribute("medicalCertiText", medicatCertificate);

			String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

			request.setAttribute("referralLetter", referralLetter);

			String dummy = "success";

			request.setAttribute("lasteEnteredVisitList", dummy);

			request.setAttribute("apptID", patientForm.getAptID());

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Add General Physician Prescription", loginForm.getUserID());

			/*
			 * Getting form name to be display based on logged in User
			 */
			String[] formNameArray = loginForm.getOPDJSPName().split("&");

			System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[0].trim());

			// Setting add opd page name value in pageName variable
			setPageName(formNameArray[0].trim());

			return ERROR;
		}
	}

	public String addNewGeneralHospitalBill() throws Exception {

		serviceInf = new eDhanvantariServiceImpl();
		patientDAOInf = new PatientDAOImpl();

		LoginDAOInf daoInf = new LoginDAOImpl();

		SMSSender smsSender = new SMSSender();

		EmailUtil emailUtil = new EmailUtil();

		RegistrationDAOinf registrationDAOinf = new RegistrationDAOImpl();

		PrescriptionManagementDAOInf managementDAOInf = new PrescriptionManagementDAOImpl();

		String accessKey = xmlUtil.getAccessKey();

		String secreteKey = xmlUtil.getSecreteKey();

		AWSS3Connect awss3Connect = new AWSS3Connect();

		// getting input file location from S3 bucket
		String s3reportFilePath = xmlUtil.getS3RDMLReportFilePath();

		// getting s3 bucket name
		String bucketName = util.getS3BucketName();

		// getting s3 bucket region
		String bucketRegion = xmlUtil.getS3BucketRegion();

		String s3LogoFilePath = xmlUtil.getS3RDMLFilePath();

		AWSCredentials credentials = new BasicAWSCredentials(accessKey, secreteKey);

		AmazonS3 s3 = AmazonS3ClientBuilder.standard().withCredentials(new AWSStaticCredentialsProvider(credentials))
				.withRegion(bucketRegion).build();

		/*
		 * Getting user role from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");

		request.setAttribute("apptID", patientForm.getAptID());

		message = serviceInf.configureGeneralHospitalBill(patientForm);

		orthoBillItemList = patientDAOInf.retrieveOrthoBillingItemList(patientForm.getVisitID());

		if (message.equalsIgnoreCase("success")) {

			addActionMessage("Bill configured successfully.");

			request.setAttribute("printAvailable", "Yes");

			ConvertToPDFUtil convertToPDFUtil = new ConvertToPDFUtil();

			HttpServletRequest request = ServletActionContext.getRequest();
			ServletContext context = request.getServletContext();

			String realPath = context.getRealPath("/");
			System.out.println("Real path is :: " + realPath);

			// String pdfOutFIleName = realPath + patientForm.getFirstName() +
			// patientForm.getLastName()
			String pdfOutFIleName = patientForm.getFirstName() + patientForm.getLastName() + patientForm.getPatientID()
					+ "_" + patientForm.getVisitID() + "b.pdf";

			message = convertToPDFUtil.convertGeneralHospitalBillingPDF(patientForm.getPatientID(),
					patientForm.getVisitID(), realPath, pdfOutFIleName, loginForm.getClinicID(),
					loginForm.getVisitTypeID(), loginForm.getClinicSuffix(), s3, s3LogoFilePath, bucketName,
					loginForm.getPracticeID());

			if (message.equalsIgnoreCase("success")) {

				File inputFile = new File(realPath + "/" + pdfOutFIleName);

				// Storing file to S3 RDML INPUT FILE location
				message = awss3Connect.pushFile(inputFile, pdfOutFIleName, bucketName, bucketRegion, s3reportFilePath);

				S3ObjectInputStream s3ObjectInputStream = s3
						.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, pdfOutFIleName))
						.getObjectContent();

				patientForm.setFileInputStream(s3ObjectInputStream);

				patientForm.setFileName(pdfOutFIleName);

				request.setAttribute("PDFOutFileName", pdfOutFIleName);

				String billingTabCheck = "enable";

				request.setAttribute("billingTabCheck", billingTabCheck);

				request.setAttribute("IPDBillCheck", "Yes");
				/*
				 * Update appointment status to Billing
				 */
				patientDAOInf.updateBillingAppointmentStatus(patientForm.getPatientID(), patientForm.getAptID());

				patientList = patientDAOInf.retrieveGeneralHospitalPatientDetailsForNewVisit(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID(), patientForm.getAptID());

				boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

				if (visitCheck) {
					System.out.println("First....");
					billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
				} else {
					billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
							loginForm.getClinicID(), loginForm.getClinicSuffix());
				}

				OPDChargesList = managementDAOInf.retrieveAllOPDCharges(loginForm.getPracticeID());
				request.setAttribute("OPDChargesList", OPDChargesList);

				String ChargesDetails = managementDAOInf.retrieveOPDChargesDetailsByReceiptID(patientForm.getVisitID());
				request.setAttribute("ChargesDetails", ChargesDetails);

				LabTestList = managementDAOInf.retrieveAllLabTests(loginForm.getPracticeID());
				request.setAttribute("LabTestList", LabTestList);

				String InvestigationDetails = managementDAOInf
						.retrieveInvestigationDetailsByVisitID(patientForm.getVisitID());
				request.setAttribute("InvestigationDetails", InvestigationDetails);

				String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
				request.setAttribute("paymentType", paymentType);

				// retrieving present complaint list for last visit of patient
				String complaintList = patientDAOInf.retrievePresentComplaintsOfLastVisit(patientForm.getVisitID());

				request.setAttribute("complaintList", complaintList);

				/* HashMap<String, String> PVComplaints = patientDAOInf.getPVComplaints(); */

				PVComplaints = patientDAOInf.getPVComplaints();

				String categoryList = patientDAOInf.retrieveCategoryListOfLastVisit(patientForm.getVisitID());
				request.setAttribute("categoryList", categoryList);

				MedicalHistory = patientDAOInf.retrievemedicalHistoryListOfLastVisit(patientForm,
						patientForm.getPatientID());
				request.setAttribute("MedicalHistory", MedicalHistory);

				FamilyHistory = patientDAOInf.retrieveFamilyHistoryListOfLastVisit(patientForm,
						patientForm.getPatientID());
				request.setAttribute("FamilyHistory", FamilyHistory);

				PersonalHistory = patientDAOInf.retrievePersonalHistoryListOfLastVisit(patientForm,
						patientForm.getPatientID());
				request.setAttribute("PersonalHistory", PersonalHistory);

				onEaminationList = patientDAOInf.retrieveOnExaminationListByVisitID(patientForm.getVisitID());
				request.setAttribute("onEaminationList", onEaminationList);

				InjectionPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
						patientForm.getVisitID(), "Injection");
				InjectionList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Injection");

				TabletPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
						patientForm.getVisitID(), "Tablet");
				TabletList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Tablet");

				LiquidPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
						patientForm.getVisitID(), "Liquid");
				LiquidList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Liquid");

				String dummy = "success";

				request.setAttribute("lasteEnteredVisitList", dummy);

				diagnoseList = configurationUtil.getDiagnoseList();

				request.setAttribute("apptID", patientForm.getAptID());

				drugList = configurationUtil.getTradeNameList();

				// chargeTypeList = configurationUtil.getChargeTypeList();

				doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

				hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

				DiagnosisList = configurationUtil.getDiagnosisList();

				String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

				request.setAttribute("medicalCertiText", medicatCertificate);

				String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

				request.setAttribute("referralLetter", referralLetter);

				/* Retrieve labReport List */
				labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
						loginForm.getClinicID());

				// Inserting values into Audit table
				daoInf.insertAudit(request.getRemoteAddr(), "Add General Physician Billing", loginForm.getUserID());

				/*
				 * Getting form name to be display based on logged in User
				 */
				String[] formNameArray = loginForm.getOPDJSPName().split("&");

				System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[0].trim());

				// Setting add opd page name value in pageName variable
				setPageName(formNameArray[0].trim());

				return SUCCESS;

			} else {

				addActionError("Failed to print billing pdf. Please check server logs for more details.");

				/*
				 * Update appointment status to Billing
				 */
				patientDAOInf.updateBillingAppointmentStatus(patientForm.getPatientID(), patientForm.getAptID());

				String dummy = "success";

				request.setAttribute("lasteEnteredVisitList", dummy);

				patientList = patientDAOInf.retrieveGeneralHospitalPatientDetailsForNewVisit(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID(), patientForm.getAptID());

				boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

				if (visitCheck) {
					billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
				} else {
					billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
							loginForm.getClinicID(), loginForm.getClinicSuffix());
				}

				// retrieving present complaint list for last visit of patient
				String complaintList = patientDAOInf.retrievePresentComplaintsOfLastVisit(patientForm.getVisitID());

				request.setAttribute("complaintList", complaintList);

				/* HashMap<String, String> PVComplaints = patientDAOInf.getPVComplaints(); */

				PVComplaints = patientDAOInf.getPVComplaints();

				String categoryList = patientDAOInf.retrieveCategoryListOfLastVisit(patientForm.getVisitID());
				request.setAttribute("categoryList", categoryList);

				MedicalHistory = patientDAOInf.retrievemedicalHistoryListOfLastVisit(patientForm,
						patientForm.getPatientID());
				request.setAttribute("MedicalHistory", MedicalHistory);

				FamilyHistory = patientDAOInf.retrieveFamilyHistoryListOfLastVisit(patientForm,
						patientForm.getPatientID());
				request.setAttribute("FamilyHistory", FamilyHistory);

				PersonalHistory = patientDAOInf.retrievePersonalHistoryListOfLastVisit(patientForm,
						patientForm.getPatientID());
				request.setAttribute("PersonalHistory", PersonalHistory);

				onEaminationList = patientDAOInf.retrieveOnExaminationListByVisitID(patientForm.getVisitID());
				request.setAttribute("onEaminationList", onEaminationList);

				InjectionPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
						patientForm.getVisitID(), "Injection");
				InjectionList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Injection");

				TabletPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
						patientForm.getVisitID(), "Tablet");
				TabletList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Tablet");

				LiquidPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
						patientForm.getVisitID(), "Liquid");
				LiquidList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Liquid");

				diagnoseList = configurationUtil.getDiagnoseList();

				request.setAttribute("apptID", patientForm.getAptID());

				drugList = configurationUtil.getTradeNameList();

				frequencyList = configurationUtil.getFrequencyList();

				// chargeTypeList = configurationUtil.getChargeTypeList();

				doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

				hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

				DiagnosisList = configurationUtil.getDiagnosisList();

				/* Retrieve labReport List */
				labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
						loginForm.getClinicID());

				String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

				request.setAttribute("medicalCertiText", medicatCertificate);

				String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

				request.setAttribute("referralLetter", referralLetter);

				// Inserting values into Audit table
				daoInf.insertAudit(request.getRemoteAddr(), "Add General Physician Billing Exception Occurred.",
						loginForm.getUserID());

				/*
				 * Getting form name to be display based on logged in User
				 */
				String[] formNameArray = loginForm.getOPDJSPName().split("&");

				System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[0].trim());

				// Setting add opd page name value in pageName variable
				setPageName(formNameArray[0].trim());

				return ERROR;

			}

		} else if (message.equals("noVisit")) {
			addActionError("No visit added.Please add visit first.");

			HttpServletRequest request = ServletActionContext.getRequest();

			String billingTabCheck = "enable";

			request.setAttribute("printAvailable", "No");

			request.setAttribute("billingTabCheck", billingTabCheck);

			/*
			 * Update appointment status to Billing
			 */
			patientDAOInf.updateBillingAppointmentStatus(patientForm.getPatientID(), patientForm.getAptID());

			String dummy = "success";

			request.setAttribute("lasteEnteredVisitList", dummy);

			patientList = patientDAOInf.retrieveGeneralHospitalPatientDetailsForNewVisit(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID(), patientForm.getAptID());

			boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

			if (visitCheck) {
				billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
			} else {
				billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
						loginForm.getClinicID(), loginForm.getClinicSuffix());
			}

			OPDChargesList = managementDAOInf.retrieveAllOPDCharges(loginForm.getPracticeID());
			request.setAttribute("OPDChargesList", OPDChargesList);

			String ChargesDetails = managementDAOInf.retrieveOPDChargesDetailsByReceiptID(patientForm.getVisitID());
			request.setAttribute("ChargesDetails", ChargesDetails);

			LabTestList = managementDAOInf.retrieveAllLabTests(loginForm.getPracticeID());
			request.setAttribute("LabTestList", LabTestList);

			String InvestigationDetails = managementDAOInf
					.retrieveInvestigationDetailsByVisitID(patientForm.getVisitID());
			request.setAttribute("InvestigationDetails", InvestigationDetails);

			String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
			request.setAttribute("paymentType", paymentType);

			// retrieving present complaint list for last visit of patient
			String complaintList = patientDAOInf.retrievePresentComplaintsOfLastVisit(patientForm.getVisitID());

			request.setAttribute("complaintList", complaintList);

			/* HashMap<String, String> PVComplaints = patientDAOInf.getPVComplaints(); */

			PVComplaints = patientDAOInf.getPVComplaints();

			String categoryList = patientDAOInf.retrieveCategoryListOfLastVisit(patientForm.getVisitID());
			request.setAttribute("categoryList", categoryList);

			MedicalHistory = patientDAOInf.retrievemedicalHistoryListOfLastVisit(patientForm,
					patientForm.getPatientID());
			request.setAttribute("MedicalHistory", MedicalHistory);

			FamilyHistory = patientDAOInf.retrieveFamilyHistoryListOfLastVisit(patientForm, patientForm.getPatientID());
			request.setAttribute("FamilyHistory", FamilyHistory);

			PersonalHistory = patientDAOInf.retrievePersonalHistoryListOfLastVisit(patientForm,
					patientForm.getPatientID());
			request.setAttribute("PersonalHistory", PersonalHistory);

			onEaminationList = patientDAOInf.retrieveOnExaminationListByVisitID(patientForm.getVisitID());
			request.setAttribute("onEaminationList", onEaminationList);

			InjectionPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID(), "Injection");
			InjectionList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Injection");

			TabletPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID(), "Tablet");
			TabletList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Tablet");

			LiquidPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID(), "Liquid");
			LiquidList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Liquid");

			diagnoseList = configurationUtil.getDiagnoseList();

			request.setAttribute("apptID", patientForm.getAptID());

			drugList = configurationUtil.getTradeNameList();

			frequencyList = configurationUtil.getFrequencyList();

			// chargeTypeList = configurationUtil.getChargeTypeList();

			doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

			hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

			DiagnosisList = configurationUtil.getDiagnosisList();

			String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

			request.setAttribute("medicalCertiText", medicatCertificate);

			String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

			request.setAttribute("referralLetter", referralLetter);

			/* Retrieve labReport List */
			labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
					loginForm.getClinicID());

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Add General Physician Billing Exception Occurred.",
					loginForm.getUserID());

			/*
			 * Getting form name to be display based on logged in User
			 */
			String[] formNameArray = loginForm.getOPDJSPName().split("&");

			System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[0].trim());

			// Setting add opd page name value in pageName variable
			setPageName(formNameArray[0].trim());

			return ERROR;
		} else {
			addActionError("Failed to configure bill. Please check server logs for more details.");

			HttpServletRequest request = ServletActionContext.getRequest();

			String billingTabCheck = "enable";

			request.setAttribute("printAvailable", "Yes");

			request.setAttribute("billingTabCheck", billingTabCheck);

			/*
			 * Update appointment status to Billing
			 */
			patientDAOInf.updateBillingAppointmentStatus(patientForm.getPatientID(), patientForm.getAptID());

			String dummy = "success";

			request.setAttribute("lasteEnteredVisitList", dummy);

			patientList = patientDAOInf.retrieveGeneralHospitalPatientDetailsForNewVisit(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID(), patientForm.getAptID());

			boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

			if (visitCheck) {
				billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
			} else {
				billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
						loginForm.getClinicID(), loginForm.getClinicSuffix());
			}

			// retrieving present complaint list for last visit of patient
			String complaintList = patientDAOInf.retrievePresentComplaintsOfLastVisit(patientForm.getVisitID());

			request.setAttribute("complaintList", complaintList);

			/* HashMap<String, String> PVComplaints = patientDAOInf.getPVComplaints(); */

			PVComplaints = patientDAOInf.getPVComplaints();

			String categoryList = patientDAOInf.retrieveCategoryListOfLastVisit(patientForm.getVisitID());
			request.setAttribute("categoryList", categoryList);

			MedicalHistory = patientDAOInf.retrievemedicalHistoryListOfLastVisit(patientForm,
					patientForm.getPatientID());
			request.setAttribute("MedicalHistory", MedicalHistory);

			FamilyHistory = patientDAOInf.retrieveFamilyHistoryListOfLastVisit(patientForm, patientForm.getPatientID());
			request.setAttribute("FamilyHistory", FamilyHistory);

			PersonalHistory = patientDAOInf.retrievePersonalHistoryListOfLastVisit(patientForm,
					patientForm.getPatientID());
			request.setAttribute("PersonalHistory", PersonalHistory);

			onEaminationList = patientDAOInf.retrieveOnExaminationListByVisitID(patientForm.getVisitID());
			request.setAttribute("onEaminationList", onEaminationList);

			InjectionPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID(), "Injection");
			InjectionList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Injection");

			TabletPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID(), "Tablet");
			TabletList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Tablet");

			LiquidPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID(), "Liquid");
			LiquidList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Liquid");

			diagnoseList = configurationUtil.getDiagnoseList();

			request.setAttribute("apptID", patientForm.getAptID());

			drugList = configurationUtil.getTradeNameList();

			frequencyList = configurationUtil.getFrequencyList();

			// chargeTypeList = configurationUtil.getChargeTypeList();

			doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

			hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

			DiagnosisList = configurationUtil.getDiagnosisList();

			/* Retrieve labReport List */
			labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
					loginForm.getClinicID());

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Add General Physician Billing Exception Occurred.",
					loginForm.getUserID());

			String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

			request.setAttribute("medicalCertiText", medicatCertificate);

			String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

			request.setAttribute("referralLetter", referralLetter);

			/*
			 * Getting form name to be display based on logged in User
			 */
			String[] formNameArray = loginForm.getOPDJSPName().split("&");

			System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[0].trim());

			// Setting add opd page name value in pageName variable
			setPageName(formNameArray[0].trim());

			return ERROR;
		}
	}

	public void generalHospitalLabReportView() throws Exception {

		String labReportTabEnable = "Enable";

		request.setAttribute("labReportTabEnable", labReportTabEnable);

		patientDAOInf = new PatientDAOImpl();

		String accessKey = xmlUtil.getAccessKey();

		String secreteKey = xmlUtil.getSecreteKey();

		AWSS3Connect awss3Connect = new AWSS3Connect();

		// getting input file location from S3 bucket
		String s3reportFilePath = xmlUtil.getS3RDMLReportFilePath();

		// getting s3 bucket name
		String bucketName = util.getS3BucketName();

		// getting s3 bucket region
		String bucketRegion = xmlUtil.getS3BucketRegion();

		// Set the presigned URL to expire after one hour.
		java.util.Date expiration = new java.util.Date();
		long expTimeMillis = expiration.getTime();
		expTimeMillis += 1000 * 60 * 60;
		expiration.setTime(expTimeMillis);

		AWSCredentials credentials = new BasicAWSCredentials(accessKey, secreteKey);

		AmazonS3 s3 = AmazonS3ClientBuilder.standard().withCredentials(new AWSStaticCredentialsProvider(credentials))
				.withRegion(bucketRegion).build();

		/*
		 * Getting context path
		 */
		ServletContext context = request.getServletContext();

		String realPath = context.getRealPath("/");

		System.out.println("Report file path is ..." + realPath);

		String reportOutFIleName = patientDAOInf.generalHospitalLabReportDownload(patientForm.getReportsID());

		System.out.println("out File name from action ::::: " + reportOutFIleName);

		S3ObjectInputStream s3ObjectInputStream = s3
				.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, reportOutFIleName))
				.getObjectContent();

		patientForm.setFileInputStream(s3ObjectInputStream);

		patientForm.setFileName(reportOutFIleName);

		// response.setContentType("application/pdf");
		// InputStream in = new FileInputStream(reportFilePath + reportOutFIleName);
		OutputStream out11 = response.getOutputStream();
		byte[] buf = new byte[1024];
		int len;
		while ((len = patientForm.getFileInputStream().read(buf)) > 0) {
			out11.write(buf, 0, len);
		}

		patientForm.getFileInputStream().close();
		out11.close();

	}

	public String generalHospitalLabReportDownload() throws Exception {

		PrescriptionManagementDAOInf managementDAOInf = new PrescriptionManagementDAOImpl();

		String accessKey = xmlUtil.getAccessKey();

		String secreteKey = xmlUtil.getSecreteKey();

		AWSS3Connect awss3Connect = new AWSS3Connect();

		// getting input file location from S3 bucket
		String s3reportFilePath = xmlUtil.getS3RDMLReportFilePath();

		// getting s3 bucket name
		String bucketName = util.getS3BucketName();

		// getting s3 bucket region
		String bucketRegion = xmlUtil.getS3BucketRegion();

		// Set the presigned URL to expire after one hour.
		java.util.Date expiration = new java.util.Date();
		long expTimeMillis = expiration.getTime();
		expTimeMillis += 1000 * 60 * 60;
		expiration.setTime(expTimeMillis);

		AWSCredentials credentials = new BasicAWSCredentials(accessKey, secreteKey);

		AmazonS3 s3 = AmazonS3ClientBuilder.standard().withCredentials(new AWSStaticCredentialsProvider(credentials))
				.withRegion(bucketRegion).build();

		try {

			String labReportTabEnable = "Enable";

			request.setAttribute("labReportTabEnable", labReportTabEnable);

			patientDAOInf = new PatientDAOImpl();

			orthoBillItemList = patientDAOInf.retrieveOrthoBillingItemList(patientForm.getVisitID());

			/*
			 * Getting context path
			 */
			ServletContext context = request.getServletContext();

			String reportOutFIleName = patientDAOInf.generalHospitalLabReportDownload(patientForm.getReportsID());

			System.out.println("out File name from action ::::: " + reportOutFIleName);

			File fileToDownload = new File(reportOutFIleName);

			S3ObjectInputStream s3ObjectInputStream = s3
					.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, reportOutFIleName))
					.getObjectContent();

			patientForm.setFileInputStream(s3ObjectInputStream);

			patientForm.setFileName(reportOutFIleName);

			/*
			 * Getting user role from session
			 */
			LoginForm loginForm = (LoginForm) session.get("USER");

			/*
			 * Getting form name to be display based on logged in User
			 */
			String[] formNameArray = loginForm.getOPDJSPName().split("&");

			System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[0].trim());

			request.setAttribute("systemStartDate", patientForm.getStartDate());

			request.setAttribute("systemStartDate", patientForm.getStartDate());

			request.setAttribute("printAvailable", "Yes");

			request.setAttribute("apptID", patientForm.getAptID());

			/*
			 * retrieving last visitID for the patientID from Visit table
			 */
			int lastVisitID = patientDAOInf.retrieveLastVisitID(patientForm.getPatientID(), loginForm.getClinicID());

			System.out.println("Last visit ID :: " + lastVisitID);

			patientList = patientDAOInf.retrieveGeneralHospitalPatientDetailsForNewVisit(patientForm.getPatientID(),
					lastVisitID, loginForm.getClinicID(), patientForm.getAptID());

			/*
			 * Checking whether patient exists for current clinic or not, if not, then
			 * inserting a record into ClinicRegistration table with current clinicID and
			 * current patientID but with different registrationNumber
			 */
			boolean check = patientDAOInf.verifyPatientExistsForCurrentClinic(patientForm.getPatientID(),
					loginForm.getClinicID());

			if (check) {
				System.out.println("Patient already registered with the current clinic");
			} else {

				/*
				 * Inserting a record with patientID and clinicID along with clinicRegNo into
				 * ClincRegistration table
				 */
				String cilincRegNo = patientDAOInf.retirevePatientClinicRegistrationNo(loginForm.getClinicSuffix(),
						loginForm.getClinicID());

				message = patientDAOInf.insertClinicRegistration(patientForm.getPatientID(), loginForm.getClinicID(),
						cilincRegNo);

				if (message.equals("success")) {
					System.out.println("Clinic registration details inserted successfully.");
				} else {
					System.out.println("Failed to insert clinic registration details into ClinicRegistration table.");

				}

			}

			// retrieving present complaint list for last visit of patient
			String complaintList = patientDAOInf.retrievePresentComplaintsOfLastVisit(lastVisitID);

			request.setAttribute("complaintList", complaintList);

			/* HashMap<String, String> PVComplaints = patientDAOInf.getPVComplaints(); */

			boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

			if (visitCheck) {
				billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
			} else {
				billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
						loginForm.getClinicID(), loginForm.getClinicSuffix());
			}

			PVComplaints = patientDAOInf.getPVComplaints();

			String categoryList = patientDAOInf.retrieveCategoryListOfLastVisit(lastVisitID);
			request.setAttribute("categoryList", categoryList);

			MedicalHistory = patientDAOInf.retrievemedicalHistoryListOfLastVisit(patientForm,
					patientForm.getPatientID());
			request.setAttribute("MedicalHistory", MedicalHistory);

			FamilyHistory = patientDAOInf.retrieveFamilyHistoryListOfLastVisit(patientForm, patientForm.getPatientID());
			request.setAttribute("FamilyHistory", FamilyHistory);

			PersonalHistory = patientDAOInf.retrievePersonalHistoryListOfLastVisit(patientForm,
					patientForm.getPatientID());
			request.setAttribute("PersonalHistory", PersonalHistory);

			onEaminationList = patientDAOInf.retrieveOnExaminationListByVisitID(lastVisitID);
			request.setAttribute("onEaminationList", onEaminationList);

			InjectionPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
					lastVisitID, "Injection");
			InjectionList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Injection");

			TabletPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
					lastVisitID, "Tablet");
			TabletList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Tablet");

			LiquidPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
					lastVisitID, "Liquid");
			LiquidList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Liquid");

			OPDChargesList = managementDAOInf.retrieveAllOPDCharges(loginForm.getPracticeID());
			request.setAttribute("OPDChargesList", OPDChargesList);

			String ChargesDetails = managementDAOInf.retrieveOPDChargesDetailsByReceiptID(patientForm.getVisitID());
			request.setAttribute("ChargesDetails", ChargesDetails);

			LabTestList = managementDAOInf.retrieveAllLabTests(loginForm.getPracticeID());
			request.setAttribute("LabTestList", LabTestList);

			String InvestigationDetails = managementDAOInf
					.retrieveInvestigationDetailsByVisitID(patientForm.getVisitID());
			request.setAttribute("InvestigationDetails", InvestigationDetails);

			String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
			request.setAttribute("paymentType", paymentType);

			String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(lastVisitID);

			request.setAttribute("medicalCertiText", medicatCertificate);

			String referralLetter = patientDAOInf.retrieveReferralLetter(lastVisitID);

			request.setAttribute("referralLetter", referralLetter);

			// Setting add opd page name value in pageName variable
			setPageName(formNameArray[0].trim());

			return SUCCESS;

		} catch (Exception exception) {

			StringWriter stringWriter = new StringWriter();

			exception.printStackTrace(new PrintWriter(stringWriter));

			String labReportTabEnable = "Enable";

			request.setAttribute("labReportTabEnable", labReportTabEnable);

			request.setAttribute("printAvailable", "Yes");

			/*
			 * Getting user role from session
			 */
			LoginForm loginForm = (LoginForm) session.get("USER");

			/*
			 * Getting form name to be display based on logged in User
			 */
			String[] formNameArray = loginForm.getOPDJSPName().split("&");

			System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[0].trim());

			request.setAttribute("systemStartDate", patientForm.getStartDate());

			request.setAttribute("systemStartDate", patientForm.getStartDate());

			request.setAttribute("apptID", patientForm.getAptID());

			/*
			 * retrieving last visitID for the patientID from Visit table
			 */
			int lastVisitID = patientDAOInf.retrieveLastVisitID(patientForm.getPatientID(), loginForm.getClinicID());

			System.out.println("Last visit ID :: " + lastVisitID);

			patientList = patientDAOInf.retrieveGeneralHospitalPatientDetailsForNewVisit(patientForm.getPatientID(),
					lastVisitID, loginForm.getClinicID(), patientForm.getAptID());

			/*
			 * Checking whether patient exists for current clinic or not, if not, then
			 * inserting a record into ClinicRegistration table with current clinicID and
			 * current patientID but with different registrationNumber
			 */
			boolean check = patientDAOInf.verifyPatientExistsForCurrentClinic(patientForm.getPatientID(),
					loginForm.getClinicID());

			if (check) {
				System.out.println("Patient already registered with the current clinic");
			} else {

				/*
				 * Inserting a record with patientID and clinicID along with clinicRegNo into
				 * ClincRegistration table
				 */
				String cilincRegNo = patientDAOInf.retirevePatientClinicRegistrationNo(loginForm.getClinicSuffix(),
						loginForm.getClinicID());

				message = patientDAOInf.insertClinicRegistration(patientForm.getPatientID(), loginForm.getClinicID(),
						cilincRegNo);

				if (message.equals("success")) {
					System.out.println("Clinic registration details inserted successfully.");
				} else {
					System.out.println("Failed to insert clinic registration details into ClinicRegistration table.");

				}

			}

			// retrieving present complaint list for last visit of patient
			String complaintList = patientDAOInf.retrievePresentComplaintsOfLastVisit(lastVisitID);

			request.setAttribute("complaintList", complaintList);

			/* HashMap<String, String> PVComplaints = patientDAOInf.getPVComplaints(); */

			boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

			if (visitCheck) {
				billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
			} else {
				billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
						loginForm.getClinicID(), loginForm.getClinicSuffix());
			}

			PVComplaints = patientDAOInf.getPVComplaints();

			String categoryList = patientDAOInf.retrieveCategoryListOfLastVisit(lastVisitID);
			request.setAttribute("categoryList", categoryList);

			MedicalHistory = patientDAOInf.retrievemedicalHistoryListOfLastVisit(patientForm,
					patientForm.getPatientID());
			request.setAttribute("MedicalHistory", MedicalHistory);

			FamilyHistory = patientDAOInf.retrieveFamilyHistoryListOfLastVisit(patientForm, patientForm.getPatientID());
			request.setAttribute("FamilyHistory", FamilyHistory);

			PersonalHistory = patientDAOInf.retrievePersonalHistoryListOfLastVisit(patientForm,
					patientForm.getPatientID());
			request.setAttribute("PersonalHistory", PersonalHistory);

			onEaminationList = patientDAOInf.retrieveOnExaminationListByVisitID(lastVisitID);
			request.setAttribute("onEaminationList", onEaminationList);

			InjectionPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
					lastVisitID, "Injection");
			InjectionList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Injection");

			TabletPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
					lastVisitID, "Tablet");
			TabletList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Tablet");

			LiquidPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
					lastVisitID, "Liquid");
			LiquidList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Liquid");

			OPDChargesList = managementDAOInf.retrieveAllOPDCharges(loginForm.getPracticeID());
			request.setAttribute("OPDChargesList", OPDChargesList);

			String ChargesDetails = managementDAOInf.retrieveOPDChargesDetailsByReceiptID(patientForm.getVisitID());
			request.setAttribute("ChargesDetails", ChargesDetails);

			LabTestList = managementDAOInf.retrieveAllLabTests(loginForm.getPracticeID());
			request.setAttribute("LabTestList", LabTestList);

			String InvestigationDetails = managementDAOInf
					.retrieveInvestigationDetailsByVisitID(patientForm.getVisitID());
			request.setAttribute("InvestigationDetails", InvestigationDetails);

			String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
			request.setAttribute("paymentType", paymentType);

			String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(lastVisitID);

			request.setAttribute("medicalCertiText", medicatCertificate);

			String referralLetter = patientDAOInf.retrieveReferralLetter(lastVisitID);

			request.setAttribute("referralLetter", referralLetter);

			// Setting add opd page name value in pageName variable
			setPageName(formNameArray[0].trim());

			addActionError("Failed to download report file.Please check server logs for more details.");
			exception.printStackTrace();
			System.out.println("Exception occured while downloading lab report file into directory due to:::"
					+ exception.getMessage());

			return ERROR;
		}
	}

	public void addBillDetails() throws Exception {
		patientDAOInf = new PatientDAOImpl();

		JSONObject values = new JSONObject();

		JSONArray array = new JSONArray();
		values = new JSONObject();

		JSONObject object = new JSONObject();

		LoginDAOInf daoInf = new LoginDAOImpl();

		/*
		 * Getting user role from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");

		try {
			/*
			 * Retrieving all values from request and setting into form
			 */
			patientForm.setDescription(request.getParameter("chargeType"));
			patientForm.setCharges(Double.parseDouble(request.getParameter("charge")));
			patientForm.setRate(Double.parseDouble(request.getParameter("rate")));
			patientForm.setTotalBill(Double.parseDouble(request.getParameter("totalBill")));
			patientForm.setVisitID(Integer.parseInt(request.getParameter("visitID")));

			System.out.println(patientForm.getDescription());
			System.out.println(patientForm.getCharges());
			System.out.println(patientForm.getRate());

			/*
			 * Checking whether visit Id is 0, if yes, then give error msg saying No visit
			 * added. Please add visit
			 */
			if (patientForm.getVisitID() == 0) {

				object.put("ErrorMessage", "No visit added. Please add visit first.");
				array.add(object);

				values.put("Release", array);

				// Inserting values into Audit table
				daoInf.insertAudit(request.getRemoteAddr(), "Add Billing Exception occurred", loginForm.getUserID());

				PrintWriter out = response.getWriter();

				out.print(values);

			} else {

				values = patientDAOInf.insertBillDetails(patientForm);

				System.out.println("Visit id for Billing is ::" + patientForm.getVisitID());

				values = patientDAOInf.retrieveBillDetail(patientForm.getVisitID(), patientForm.getServiceCharge());

				// Inserting values into Audit table
				daoInf.insertAudit(request.getRemoteAddr(), "Add Billing", loginForm.getUserID());

				PrintWriter out = response.getWriter();

				out.print(values);

			}

		} catch (Exception exception) {
			exception.printStackTrace();
			System.out.println("Exception occured while inserting Prescription details into table due to:::"
					+ exception.getMessage());

			object.put("ExceptionMessage", "No visit added. Please add visit first.");
			array.add(object);

			values.put("Release", array);

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Add Billing Exception occurred", loginForm.getUserID());

			PrintWriter out = response.getWriter();

			out.print(values);
		}
	}

	public void retrieveTradeNameForPrescriptionBYProductID() throws Exception {
		patientDAOInf = new PatientDAOImpl();

		JSONObject values = new JSONObject();

		JSONArray array = new JSONArray();
		values = new JSONObject();

		JSONObject object = new JSONObject();

		/*
		 * Getting user role from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");

		try {
			System.out.println("Category : " + patientForm.getCategory());

			values = patientDAOInf.retrieveTradeNameForPrescriptionBYProductID(patientForm.getTradeName(),
					patientForm.getCategory());

			PrintWriter out = response.getWriter();

			out.print(values);

		} catch (Exception exception) {
			exception.printStackTrace();
			System.out.println(
					"Exception occured while retrieving TradeName with ProductID due to:::" + exception.getMessage());

			object.put("ExcMsg", "Exception occured while retrieving TradeName with ProductID");
			array.add(object);

			values.put("Release1", array);

			PrintWriter out = response.getWriter();

			out.print(values);
		}
	}

	public void deleteGeneralHospitalPrescRow() throws Exception {
		patientDAOInf = new PatientDAOImpl();

		JSONObject values = new JSONObject();

		JSONArray array = new JSONArray();
		values = new JSONObject();

		JSONObject object = new JSONObject();

		response.setCharacterEncoding("UTF-8");

		try {

			// deleting biopsy findings details
			values = patientDAOInf.deleteGeneralHospitalPrescRow(patientForm.getPrescriptionID());

			PrintWriter out = response.getWriter();

			out.print(values);

		} catch (Exception exception) {
			exception.printStackTrace();

			object.put("ErrMsg", "Exception occured while deleting the row");
			array.add(object);

			values.put("Release", array);

			PrintWriter out = response.getWriter();

			out.print(values);
		}
	}

	public void deleteBilling() throws Exception {
		patientDAOInf = new PatientDAOImpl();

		JSONObject values = new JSONObject();

		JSONArray array = new JSONArray();
		values = new JSONObject();

		JSONObject object = new JSONObject();
		try {
			patientForm.setBillID(Integer.parseInt(request.getParameter("billID")));

			System.out.println("Bill ID is ::: " + patientForm.getBillID());

			values = patientDAOInf.deleteBilling(patientForm.getBillID());

			PrintWriter out = response.getWriter();

			out.print(values);

		} catch (Exception exception) {
			exception.printStackTrace();
			System.out.println("Exception occured while deleting BIll due to:::" + exception.getMessage());

			object.put("ExceptionMessage", "Exception occured while deleting bill");
			array.add(object);

			values.put("Release", array);

			PrintWriter out = response.getWriter();

			out.print(values);
		}
	}

	public void retrievePrescriptionValues() throws Exception {
		patientDAOInf = new PatientDAOImpl();

		JSONObject values = new JSONObject();

		JSONArray array = new JSONArray();
		values = new JSONObject();

		JSONObject object = new JSONObject();

		response.setCharacterEncoding("UTF-8");
		try {
			patientForm.setVisitID(Integer.parseInt(request.getParameter("visitID")));

			System.out.println("Visit ID is ::: " + patientForm.getVisitID());

			values = patientDAOInf.retrievePrscriptionDetail(patientForm.getVisitID());

			PrintWriter out = response.getWriter();

			out.print(values);

		} catch (Exception exception) {
			exception.printStackTrace();
			System.out.println(
					"Exception occured while retrieving Prescription details due to:::" + exception.getMessage());

			object.put("ExceptionMessage", "Exception occured while retrieving prescription details.");
			array.add(object);

			values.put("Release", array);

			PrintWriter out = response.getWriter();

			out.print(values);
		}
	}

	public void retrieveBillValues() throws Exception {
		patientDAOInf = new PatientDAOImpl();

		JSONObject values = new JSONObject();

		JSONArray array = new JSONArray();
		values = new JSONObject();

		JSONObject object = new JSONObject();
		try {
			patientForm.setVisitID(Integer.parseInt(request.getParameter("visitID")));

			System.out.println("Visit ID for billing is ::: " + patientForm.getVisitID());

			values = patientDAOInf.retrieveBillDetail(patientForm.getVisitID(), patientForm.getServiceCharge());

			PrintWriter out = response.getWriter();

			out.print(values);

		} catch (Exception exception) {
			exception.printStackTrace();
			System.out.println("Exception occured while retrieving bill details due to:::" + exception.getMessage());

			object.put("ExceptionMessage", "Exception occured while retrieving bill details.");
			array.add(object);

			values.put("Release", array);

			PrintWriter out = response.getWriter();

			out.print(values);
		}
	}

	public String updateGeneralHospitalVisit() throws Exception {

		serviceInf = new eDhanvantariServiceImpl();
		patientDAOInf = new PatientDAOImpl();

		SMSSender sender = new SMSSender();

		LoginDAOInf daoInf = new LoginDAOImpl();

		PrescriptionManagementDAOInf managementDAOInf = new PrescriptionManagementDAOImpl();

		/*
		 * Getting clinicID from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");

		/*
		 * Retrieving patient age based on patientID
		 */
		String patientAge = patientDAOInf.retrievePatientAgeByPatientID(patientForm.getPatientID());

		request.setAttribute("patientAge", patientAge);

		/*
		 * Setting clinicID from session into clinicID variable from PatientForm
		 */
		patientForm.setClinicID(loginForm.getClinicID());

		ServletContext context = request.getServletContext();

		String realPath = context.getRealPath("/");

		request.setAttribute("saveVisitcheck", "Saved");

		/*
		 * Setting visit type ID into patient form
		 */
		patientForm.setVisitTypeID(loginForm.getVisitTypeID());

		request.setAttribute("apptID", patientForm.getAptID());

		patientForm.setPracticeID(loginForm.getPracticeID());

		patientForm.setUserID(loginForm.getUserID());

		message = serviceInf.updateGeneralHospitalVisit(patientForm);

		if (message.equals("success")) {

			addActionMessage("Visit updated sucessfully.");

			request.setAttribute("printAvailable", "Yes");

			/*
			 * Check whether employee exists for the logged in user, if so then updated
			 * his/her userID as clinicianID into Appointment table for correspoding table,
			 * else dont
			 */
			int empID = loginForm.getUserID();

			if (empID != 0) {
				patientDAOInf.updateAttendedByInAppointmentForPatient(loginForm.getUserID(), patientForm.getAptID());
			}

			// inserting new record for the patient into VisitStatus table for status Booked
			if (patientForm.getStartDate() == null || patientForm.getStartDate().equals("NA")) {
				System.out.println("start date not found.");
			} else {
				patientDAOInf.insertVisitStatus(patientForm.getVisitID(), patientForm.getAptID(),
						patientForm.getPatientID(), patientForm.getStartDate(), null, ActivityStatus.CONSULTATION,
						loginForm.getClinicID());
			}

			patientList = patientDAOInf.retrieveGeneralHospitalPatientDetailsForExistiongVisit(
					patientForm.getPatientID(), patientForm.getVisitID(), loginForm.getClinicID());

			System.out.println("Values :" + patientForm.getPatientID() + "-" + patientForm.getVisitID() + "-"
					+ loginForm.getClinicID());

			// retrieving present complaint list for last visit of patient
			String complaintList = patientDAOInf.retrievePresentComplaintsOfLastVisit(patientForm.getVisitID());
			request.setAttribute("complaintList", complaintList);

			String categoryList = patientDAOInf.retrieveCategoryListOfLastVisit(patientForm.getVisitID());
			request.setAttribute("categoryList", categoryList);

			PVComplaints = patientDAOInf.getPVComplaints();

			MedicalHistory = patientDAOInf.retrievemedicalHistoryListOfLastVisit(patientForm,
					patientForm.getPatientID());
			request.setAttribute("MedicalHistory", MedicalHistory);

			FamilyHistory = patientDAOInf.retrieveFamilyHistoryListOfLastVisit(patientForm, patientForm.getPatientID());
			request.setAttribute("FamilyHistory", FamilyHistory);

			PersonalHistory = patientDAOInf.retrievePersonalHistoryListOfLastVisit(patientForm,
					patientForm.getPatientID());
			request.setAttribute("PersonalHistory", PersonalHistory);

			onEaminationList = patientDAOInf.retrieveOnExaminationListByVisitID(patientForm.getVisitID());
			request.setAttribute("onEaminationList", onEaminationList);

			/*
			 * Update appointment status to Consultation
			 */
			patientDAOInf.updateConsultationAppointmentStatus(patientForm.getPatientID(), patientForm.getAptID());

			InjectionPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID(), "Injection");
			InjectionList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Injection");

			TabletPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID(), "Tablet");
			TabletList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Tablet");

			LiquidPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID(), "Liquid");
			LiquidList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Liquid");

			/*
			 * Updating visit type into Appointment based on appointmentID
			 */
			patientDAOInf.updateAppointmentVisitType(patientForm.getAptID(), loginForm.getVisitTypeID());

			boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

			if (visitCheck) {
				billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
			} else {
				billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
						loginForm.getClinicID(), loginForm.getClinicSuffix());
			}

			OPDChargesList = managementDAOInf.retrieveAllOPDCharges(loginForm.getPracticeID());
			request.setAttribute("OPDChargesList", OPDChargesList);

			String ChargesDetails = managementDAOInf.retrieveOPDChargesDetailsByReceiptID(patientForm.getVisitID());
			request.setAttribute("ChargesDetails", ChargesDetails);

			LabTestList = managementDAOInf.retrieveAllLabTests(loginForm.getPracticeID());
			request.setAttribute("LabTestList", LabTestList);

			String InvestigationDetails = managementDAOInf
					.retrieveInvestigationDetailsByVisitID(patientForm.getVisitID());
			request.setAttribute("InvestigationDetails", InvestigationDetails);

			String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
			request.setAttribute("paymentType", paymentType);

			DiagnosisList = configurationUtil.getDiagnosisList();

			/* Retrieve labReport List */
			labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
					loginForm.getClinicID());

			otherInvstigationList = patientDAOInf.retrieveOtherFindingsListByVisitID(patientForm.getVisitID());

			vitalSignsList = patientDAOInf.retrieveVitalSignsListByVisitID(patientForm.getVisitID());

			request.setAttribute("apptID", patientForm.getAptID());

			diagnoseList = configurationUtil.getDiagnoseList();

			drugList = configurationUtil.getTradeNameList();

			frequencyList = configurationUtil.getFrequencyList();

			// chargeTypeList = configurationUtil.getChargeTypeList();

			doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

			String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

			request.setAttribute("medicalCertiText", medicatCertificate);

			String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

			request.setAttribute("referralLetter", referralLetter);

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Update GeneralHospital Visit", loginForm.getUserID());

			/*
			 * Getting form name to be display based on logged in User
			 */
			String[] formNameArray = loginForm.getOPDJSPName().split("&");

			System.out.println(
					"Update GeneralHospital JSP Page name for logged in user is ::: " + formNameArray[1].trim());

			// Setting add opd page name value in pageName variable
			setPageName(formNameArray[1].trim());

			return SUCCESS;

		} else {

			addActionError("Failed to updated visit. Please check server logs for more details.");

			request.setAttribute("printAvailable", "No");

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Update GeneralHospital Visit Exception Occurred",
					loginForm.getUserID());

			otherInvstigationList = patientDAOInf.retrieveOtherFindingsListByVisitID(patientForm.getVisitID());

			onEaminationList = patientDAOInf.retrieveOnExaminationListByVisitID(patientForm.getVisitID());
			request.setAttribute("onEaminationList", onEaminationList);

			/*
			 * Update appointment status to Consultation
			 */
			patientDAOInf.updateConsultationAppointmentStatus(patientForm.getPatientID(), patientForm.getAptID());

			InjectionPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID(), "Injection");
			InjectionList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Injection");

			TabletPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID(), "Tablet");
			TabletList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Tablet");

			LiquidPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID(), "Liquid");
			LiquidList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Liquid");

			vitalSignsList = patientDAOInf.retrieveVitalSignsListByVisitID(patientForm.getVisitID());

			DiagnosisList = configurationUtil.getDiagnosisList();

			/* Retrieve labReport List */
			labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
					loginForm.getClinicID());

			patientList = patientDAOInf.retrieveGeneralHospitalPatientDetailsForExistiongVisit(
					patientForm.getPatientID(), patientForm.getVisitID(), loginForm.getClinicID());

			PVComplaints = patientDAOInf.getPVComplaints();

			boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

			if (visitCheck) {
				billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
			} else {
				billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
						loginForm.getClinicID(), loginForm.getClinicSuffix());
			}

			OPDChargesList = managementDAOInf.retrieveAllOPDCharges(loginForm.getPracticeID());
			request.setAttribute("OPDChargesList", OPDChargesList);

			String ChargesDetails = managementDAOInf.retrieveOPDChargesDetailsByReceiptID(patientForm.getVisitID());
			request.setAttribute("ChargesDetails", ChargesDetails);

			LabTestList = managementDAOInf.retrieveAllLabTests(loginForm.getPracticeID());
			request.setAttribute("LabTestList", LabTestList);

			String InvestigationDetails = managementDAOInf
					.retrieveInvestigationDetailsByVisitID(patientForm.getVisitID());
			request.setAttribute("InvestigationDetails", InvestigationDetails);

			String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
			request.setAttribute("paymentType", paymentType);

			// retrieving present complaint list for last visit of patient
			String complaintList = patientDAOInf.retrievePresentComplaintsOfLastVisit(patientForm.getVisitID());
			request.setAttribute("complaintList", complaintList);

			String categoryList = patientDAOInf.retrieveCategoryListOfLastVisit(patientForm.getVisitID());
			request.setAttribute("categoryList", categoryList);

			MedicalHistory = patientDAOInf.retrievemedicalHistoryListOfLastVisit(patientForm,
					patientForm.getPatientID());
			request.setAttribute("MedicalHistory", MedicalHistory);

			FamilyHistory = patientDAOInf.retrieveFamilyHistoryListOfLastVisit(patientForm, patientForm.getPatientID());
			request.setAttribute("FamilyHistory", FamilyHistory);

			PersonalHistory = patientDAOInf.retrievePersonalHistoryListOfLastVisit(patientForm,
					patientForm.getPatientID());
			request.setAttribute("PersonalHistory", PersonalHistory);

			request.setAttribute("apptID", patientForm.getAptID());

			diagnoseList = configurationUtil.getDiagnoseList();

			drugList = configurationUtil.getTradeNameList();

			frequencyList = configurationUtil.getFrequencyList();

			// chargeTypeList = configurationUtil.getChargeTypeList();

			doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

			String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

			request.setAttribute("medicalCertiText", medicatCertificate);

			String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

			request.setAttribute("referralLetter", referralLetter);

			/*
			 * Getting form name to be display based on logged in User
			 */
			String[] formNameArray = loginForm.getOPDJSPName().split("&");

			System.out.println(
					"Update GeneralHospital JSP Page name for logged in user is ::: " + formNameArray[1].trim());

			// Setting add opd page name value in pageName variable
			setPageName(formNameArray[1].trim());

			return ERROR;

		}

	}

	public String printEditGeneralHospitalVisit() throws Exception {
		/*
		 * Getting user role from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");

		patientDAOInf = new PatientDAOImpl();

		LoginDAOInf daoInf = new LoginDAOImpl();

		RegistrationDAOinf registrationDAOinf = new RegistrationDAOImpl();

		PrescriptionManagementDAOInf managementDAOInf = new PrescriptionManagementDAOImpl();

		ConvertToPDFUtil convertToPDFUtil = new ConvertToPDFUtil();

		String accessKey = xmlUtil.getAccessKey();

		String secreteKey = xmlUtil.getSecreteKey();

		AWSS3Connect awss3Connect = new AWSS3Connect();

		// getting input file location from S3 bucket
		String s3reportFilePath = xmlUtil.getS3RDMLReportFilePath();

		// getting s3 bucket name
		String bucketName = util.getS3BucketName();

		// getting s3 bucket region
		String bucketRegion = xmlUtil.getS3BucketRegion();

		String s3LogoFilePath = xmlUtil.getS3RDMLFilePath();

		AWSCredentials credentials = new BasicAWSCredentials(accessKey, secreteKey);

		AmazonS3 s3 = AmazonS3ClientBuilder.standard().withCredentials(new AWSStaticCredentialsProvider(credentials))
				.withRegion(bucketRegion).build();

		HttpServletRequest request = ServletActionContext.getRequest();

		ServletContext context = request.getServletContext();

		String realPath = context.getRealPath("/");
		System.out.println("Real path is :: " + realPath);

		/*
		 * verify whther prescription has been added for the current visitID, if so then
		 * only proceed further to print prescription else give error msg saying no
		 * prescription added for this visit
		 */
		boolean visitCheck = patientDAOInf.verifyVisitExistsNew("Visit", patientForm.getVisitID());

		if (visitCheck) {

			// String pdfOutFIleName = realPath + patientForm.getFirstName() +
			// patientForm.getLastName()
			String pdfOutFIleName = patientForm.getFirstName() + patientForm.getLastName() + patientForm.getPatientID()
					+ "_" + patientForm.getVisitID() + "opd.pdf";

			message = convertToPDFUtil.convertGeneralHospitalVisitPDF(patientForm.getPatientID(),
					patientForm.getVisitID(), realPath, pdfOutFIleName, loginForm.getClinicID(), s3, s3LogoFilePath,
					bucketName);

			if (message.equalsIgnoreCase("success")) {
				System.out.println("Inside:");

				File inputFile = new File(realPath + "/" + pdfOutFIleName);

				// Storing file to S3 RDML INPUT FILE location
				message = awss3Connect.pushFile(inputFile, pdfOutFIleName, bucketName, bucketRegion, s3reportFilePath);

				S3ObjectInputStream s3ObjectInputStream = s3
						.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, pdfOutFIleName))
						.getObjectContent();

				patientForm.setFileInputStream(s3ObjectInputStream);

				patientForm.setFileName(pdfOutFIleName);

				String dummy = "success";

				String prescTabCheck = "enable";

				request.setAttribute("prescTabCheck", prescTabCheck);

				request.setAttribute("lasteEnteredVisitList", dummy);

				/*
				 * retrieving patientList which contains visit details
				 */
				patientList = patientDAOInf.retrieveGeneralHospitalPatientDetailsForExistiongVisit(
						patientForm.getPatientID(), patientForm.getVisitID(), loginForm.getClinicID());

				// System.out.println("Values
				// :"+patientForm.getPatientID()+"-"+patientForm.getVisitID()+"-"+loginForm.getClinicID());

				boolean visitCheck1 = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

				if (visitCheck1) {
					billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
				} else {
					billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
							loginForm.getClinicID(), loginForm.getClinicSuffix());
				}

				OPDChargesList = managementDAOInf.retrieveAllOPDCharges(loginForm.getPracticeID());
				request.setAttribute("OPDChargesList", OPDChargesList);

				String ChargesDetails = managementDAOInf.retrieveOPDChargesDetailsByReceiptID(patientForm.getVisitID());
				request.setAttribute("ChargesDetails", ChargesDetails);

				LabTestList = managementDAOInf.retrieveAllLabTests(loginForm.getPracticeID());
				request.setAttribute("LabTestList", LabTestList);

				String InvestigationDetails = managementDAOInf
						.retrieveInvestigationDetailsByVisitID(patientForm.getVisitID());
				request.setAttribute("InvestigationDetails", InvestigationDetails);

				String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
				request.setAttribute("paymentType", paymentType);

				// retrieving present complaint list for last visit of patient
				String complaintList = patientDAOInf.retrievePresentComplaintsOfLastVisit(patientForm.getVisitID());
				request.setAttribute("complaintList", complaintList);

				PVComplaints = patientDAOInf.getPVComplaints();

				String categoryList = patientDAOInf.retrieveCategoryListOfLastVisit(patientForm.getVisitID());
				request.setAttribute("categoryList", categoryList);

				MedicalHistory = patientDAOInf.retrievemedicalHistoryListOfLastVisit(patientForm,
						patientForm.getPatientID());
				request.setAttribute("MedicalHistory", MedicalHistory);

				FamilyHistory = patientDAOInf.retrieveFamilyHistoryListOfLastVisit(patientForm,
						patientForm.getPatientID());
				request.setAttribute("FamilyHistory", FamilyHistory);

				PersonalHistory = patientDAOInf.retrievePersonalHistoryListOfLastVisit(patientForm,
						patientForm.getPatientID());
				request.setAttribute("PersonalHistory", PersonalHistory);

				otherInvstigationList = patientDAOInf.retrieveOtherFindingsListByVisitID(patientForm.getVisitID());

				onEaminationList = patientDAOInf.retrieveOnExaminationListByVisitID(patientForm.getVisitID());
				request.setAttribute("onEaminationList", onEaminationList);

				vitalSignsList = patientDAOInf.retrieveVitalSignsListByVisitID(patientForm.getVisitID());

				InjectionPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
						patientForm.getVisitID(), "Injection");
				InjectionList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Injection");

				TabletPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
						patientForm.getVisitID(), "Tablet");
				TabletList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Tablet");

				LiquidPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
						patientForm.getVisitID(), "Liquid");
				LiquidList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Liquid");

				DiagnosisList = configurationUtil.getDiagnosisList();

				/* Retrieve labReport List */
				labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
						loginForm.getClinicID());

				request.setAttribute("lasteEnteredVisitList", dummy);

				request.setAttribute("apptID", patientForm.getAptID());

				String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

				request.setAttribute("medicalCertiText", medicatCertificate);

				String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

				request.setAttribute("referralLetter", referralLetter);

				// Inserting values into Audit table
				daoInf.insertAudit(request.getRemoteAddr(), "Add General Physician Prescription",
						loginForm.getUserID());

				/*
				 * Getting form name to be display based on logged in User
				 */
				String[] formNameArray = loginForm.getOPDJSPName().split("&");

				System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[1].trim());

				// Setting add opd page name value in pageName variable
				setPageName(formNameArray[1].trim());

				return SUCCESS;

			} else {
				addActionError("Failed to print visit.Please check server logs for more details.");

				String dummy = "success";

				String prescTabCheck = "enable";

				request.setAttribute("prescTabCheck", prescTabCheck);

				request.setAttribute("lasteEnteredVisitList", dummy);

				request.setAttribute("opticianFloatCheck", "empty");

				/*
				 * retrieving patientList which contains visit details
				 */
				patientList = patientDAOInf.retrieveGeneralHospitalPatientDetailsForExistiongVisit(
						patientForm.getPatientID(), patientForm.getVisitID(), loginForm.getClinicID());

				// System.out.println("Values
				// :"+patientForm.getPatientID()+"-"+patientForm.getVisitID()+"-"+loginForm.getClinicID());

				boolean visitCheck1 = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

				if (visitCheck1) {
					billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
				} else {
					billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
							loginForm.getClinicID(), loginForm.getClinicSuffix());
				}

				OPDChargesList = managementDAOInf.retrieveAllOPDCharges(loginForm.getPracticeID());
				request.setAttribute("OPDChargesList", OPDChargesList);

				String ChargesDetails = managementDAOInf.retrieveOPDChargesDetailsByReceiptID(patientForm.getVisitID());
				request.setAttribute("ChargesDetails", ChargesDetails);

				LabTestList = managementDAOInf.retrieveAllLabTests(loginForm.getPracticeID());
				request.setAttribute("LabTestList", LabTestList);

				String InvestigationDetails = managementDAOInf
						.retrieveInvestigationDetailsByVisitID(patientForm.getVisitID());
				request.setAttribute("InvestigationDetails", InvestigationDetails);

				String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
				request.setAttribute("paymentType", paymentType);

				// retrieving present complaint list for last visit of patient
				String complaintList = patientDAOInf.retrievePresentComplaintsOfLastVisit(patientForm.getVisitID());
				request.setAttribute("complaintList", complaintList);

				PVComplaints = patientDAOInf.getPVComplaints();

				String categoryList = patientDAOInf.retrieveCategoryListOfLastVisit(patientForm.getVisitID());
				request.setAttribute("categoryList", categoryList);

				MedicalHistory = patientDAOInf.retrievemedicalHistoryListOfLastVisit(patientForm,
						patientForm.getPatientID());
				request.setAttribute("MedicalHistory", MedicalHistory);

				FamilyHistory = patientDAOInf.retrieveFamilyHistoryListOfLastVisit(patientForm,
						patientForm.getPatientID());
				request.setAttribute("FamilyHistory", FamilyHistory);

				PersonalHistory = patientDAOInf.retrievePersonalHistoryListOfLastVisit(patientForm,
						patientForm.getPatientID());
				request.setAttribute("PersonalHistory", PersonalHistory);

				otherInvstigationList = patientDAOInf.retrieveOtherFindingsListByVisitID(patientForm.getVisitID());

				onEaminationList = patientDAOInf.retrieveOnExaminationListByVisitID(patientForm.getVisitID());
				request.setAttribute("onEaminationList", onEaminationList);

				vitalSignsList = patientDAOInf.retrieveVitalSignsListByVisitID(patientForm.getVisitID());

				InjectionPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
						patientForm.getVisitID(), "Injection");
				InjectionList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Injection");

				TabletPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
						patientForm.getVisitID(), "Tablet");
				TabletList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Tablet");

				LiquidPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
						patientForm.getVisitID(), "Liquid");
				LiquidList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Liquid");

				DiagnosisList = configurationUtil.getDiagnosisList();

				/* Retrieve labReport List */
				labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
						loginForm.getClinicID());

				request.setAttribute("lasteEnteredVisitList", dummy);

				request.setAttribute("apptID", patientForm.getAptID());

				String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

				request.setAttribute("medicalCertiText", medicatCertificate);

				String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

				request.setAttribute("referralLetter", referralLetter);

				// Inserting values into Audit table
				daoInf.insertAudit(request.getRemoteAddr(), "Add General Physician Prescription",
						loginForm.getUserID());

				/*
				 * Getting form name to be display based on logged in User
				 */
				String[] formNameArray = loginForm.getOPDJSPName().split("&");

				System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[1].trim());

				// Setting add opd page name value in pageName variable
				setPageName(formNameArray[1].trim());

				return ERROR;
			}

		} else {
			addActionError("No Visit added. Please add Visit first.");

			// String prescTabCheck = "enable";

			// request.setAttribute("prescTabCheck", prescTabCheck);

			/*
			 * retrieving patientList which contains visit details
			 */
			patientList = patientDAOInf.retrieveGeneralHospitalPatientDetailsForExistiongVisit(
					patientForm.getPatientID(), patientForm.getVisitID(), loginForm.getClinicID());

			// System.out.println("Values
			// :"+patientForm.getPatientID()+"-"+patientForm.getVisitID()+"-"+loginForm.getClinicID());

			boolean visitCheck1 = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

			if (visitCheck1) {
				billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
			} else {
				billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
						loginForm.getClinicID(), loginForm.getClinicSuffix());
			}

			OPDChargesList = managementDAOInf.retrieveAllOPDCharges(loginForm.getPracticeID());
			request.setAttribute("OPDChargesList", OPDChargesList);

			String ChargesDetails = managementDAOInf.retrieveOPDChargesDetailsByReceiptID(patientForm.getVisitID());
			request.setAttribute("ChargesDetails", ChargesDetails);

			LabTestList = managementDAOInf.retrieveAllLabTests(loginForm.getPracticeID());
			request.setAttribute("LabTestList", LabTestList);

			String InvestigationDetails = managementDAOInf
					.retrieveInvestigationDetailsByVisitID(patientForm.getVisitID());
			request.setAttribute("InvestigationDetails", InvestigationDetails);

			String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
			request.setAttribute("paymentType", paymentType);

			// retrieving present complaint list for last visit of patient
			String complaintList = patientDAOInf.retrievePresentComplaintsOfLastVisit(patientForm.getVisitID());
			request.setAttribute("complaintList", complaintList);

			PVComplaints = patientDAOInf.getPVComplaints();

			String categoryList = patientDAOInf.retrieveCategoryListOfLastVisit(patientForm.getVisitID());
			request.setAttribute("categoryList", categoryList);

			MedicalHistory = patientDAOInf.retrievemedicalHistoryListOfLastVisit(patientForm,
					patientForm.getPatientID());
			request.setAttribute("MedicalHistory", MedicalHistory);

			FamilyHistory = patientDAOInf.retrieveFamilyHistoryListOfLastVisit(patientForm, patientForm.getPatientID());
			request.setAttribute("FamilyHistory", FamilyHistory);

			PersonalHistory = patientDAOInf.retrievePersonalHistoryListOfLastVisit(patientForm,
					patientForm.getPatientID());
			request.setAttribute("PersonalHistory", PersonalHistory);

			otherInvstigationList = patientDAOInf.retrieveOtherFindingsListByVisitID(patientForm.getVisitID());

			onEaminationList = patientDAOInf.retrieveOnExaminationListByVisitID(patientForm.getVisitID());
			request.setAttribute("onEaminationList", onEaminationList);

			vitalSignsList = patientDAOInf.retrieveVitalSignsListByVisitID(patientForm.getVisitID());

			InjectionPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID(), "Injection");
			InjectionList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Injection");

			TabletPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID(), "Tablet");
			TabletList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Tablet");

			LiquidPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID(), "Liquid");
			LiquidList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Liquid");

			DiagnosisList = configurationUtil.getDiagnosisList();

			/* Retrieve labReport List */
			labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
					loginForm.getClinicID());

			String dummy = "success";

			request.setAttribute("lasteEnteredVisitList", dummy);

			request.setAttribute("apptID", patientForm.getAptID());

			String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

			request.setAttribute("medicalCertiText", medicatCertificate);

			String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

			request.setAttribute("referralLetter", referralLetter);

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Add General Physician Prescription", loginForm.getUserID());

			/*
			 * Getting form name to be display based on logged in User
			 */
			String[] formNameArray = loginForm.getOPDJSPName().split("&");

			System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[1].trim());

			// Setting add opd page name value in pageName variable
			setPageName(formNameArray[1].trim());

			return ERROR;
		}
	}

	public String updateGeneralHospitalPrescription() throws Exception {

		if (patientForm.getAddButton().startsWith(",")) {
			patientForm.getAddButton().substring(1);
		}

		if (patientForm.getAddButton().equals("print") || patientForm.getAddButton().equals("Print")) {
			System.out.println("inside add button = print");
			printEditGeneralHospitalPrescription();
		} else {
			System.out.println("outside add button = print");

			patientDAOInf = new PatientDAOImpl();

			serviceInf = new eDhanvantariServiceImpl();

			LoginDAOInf daoInf = new LoginDAOImpl();

			/*
			 * Getting user role from session
			 */
			LoginForm loginForm = (LoginForm) session.get("USER");

			PrescriptionManagementDAOInf managementDAOInf = new PrescriptionManagementDAOImpl();

			/*
			 * Retrieving patient age based on patientID
			 */
			String patientAge = patientDAOInf.retrievePatientAgeByPatientID(patientForm.getPatientID());

			request.setAttribute("patientAge", patientAge);

			/*
			 * Setting clinicID from session into clinicID variable from PatientForm
			 */
			patientForm.setClinicID(loginForm.getClinicID());

			ServletContext context = request.getServletContext();

			String realPath = context.getRealPath("/");

			request.setAttribute("saveVisitcheck", "Saved");

			orthoBillItemList = patientDAOInf.retrieveOrthoBillingItemList(patientForm.getVisitID());

			/*
			 * Setting visit type ID into patient form
			 */
			patientForm.setVisitTypeID(loginForm.getVisitTypeID());

			request.setAttribute("apptID", patientForm.getAptID());

			patientForm.setPracticeID(loginForm.getPracticeID());

			patientForm.setUserID(loginForm.getUserID());

			message = serviceInf.addNewGeneralHospitalPrescription(patientForm);

			if (message.equals("success")) {

				addActionMessage("Prescription added successfully.");

				String prescTabCheck = "enable";

				request.setAttribute("prescTabCheck", prescTabCheck);

				request.setAttribute("printAvailable", "Yes");

				/*
				 * Update appointment status to Prescription
				 */
				patientDAOInf.updatePrescriptionAppointmentStatus(patientForm.getPatientID(), patientForm.getAptID());

				/*
				 * retrieving patientList which contains visit details
				 */
				patientList = patientDAOInf.retrieveGeneralHospitalPatientDetailsForExistiongVisit(
						patientForm.getPatientID(), patientForm.getVisitID(), loginForm.getClinicID());

				boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

				if (visitCheck) {
					billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
				} else {
					billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
							loginForm.getClinicID(), loginForm.getClinicSuffix());
				}

				OPDChargesList = managementDAOInf.retrieveAllOPDCharges(loginForm.getPracticeID());
				request.setAttribute("OPDChargesList", OPDChargesList);

				String ChargesDetails = managementDAOInf.retrieveOPDChargesDetailsByReceiptID(patientForm.getVisitID());
				request.setAttribute("ChargesDetails", ChargesDetails);

				LabTestList = managementDAOInf.retrieveAllLabTests(loginForm.getPracticeID());
				request.setAttribute("LabTestList", LabTestList);

				String InvestigationDetails = managementDAOInf
						.retrieveInvestigationDetailsByVisitID(patientForm.getVisitID());
				request.setAttribute("InvestigationDetails", InvestigationDetails);

				String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
				request.setAttribute("paymentType", paymentType);

				System.out.println("Values :" + patientForm.getPatientID() + "-" + patientForm.getVisitID() + "-"
						+ loginForm.getClinicID());

				// retrieving present complaint list for last visit of patient
				String complaintList = patientDAOInf.retrievePresentComplaintsOfLastVisit(patientForm.getVisitID());
				request.setAttribute("complaintList", complaintList);

				String categoryList = patientDAOInf.retrieveCategoryListOfLastVisit(patientForm.getVisitID());
				request.setAttribute("categoryList", categoryList);

				PVComplaints = patientDAOInf.getPVComplaints();

				MedicalHistory = patientDAOInf.retrievemedicalHistoryListOfLastVisit(patientForm,
						patientForm.getPatientID());
				request.setAttribute("MedicalHistory", MedicalHistory);

				FamilyHistory = patientDAOInf.retrieveFamilyHistoryListOfLastVisit(patientForm,
						patientForm.getPatientID());
				request.setAttribute("FamilyHistory", FamilyHistory);

				PersonalHistory = patientDAOInf.retrievePersonalHistoryListOfLastVisit(patientForm,
						patientForm.getPatientID());
				request.setAttribute("PersonalHistory", PersonalHistory);

				onEaminationList = patientDAOInf.retrieveOnExaminationListByVisitID(patientForm.getVisitID());
				request.setAttribute("onEaminationList", onEaminationList);

				String dummy = "success";

				request.setAttribute("lasteEnteredVisitList", dummy);

				InjectionPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
						patientForm.getVisitID(), "Injection");
				InjectionList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Injection");

				TabletPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
						patientForm.getVisitID(), "Tablet");
				TabletList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Tablet");

				LiquidPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
						patientForm.getVisitID(), "Liquid");
				LiquidList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Liquid");

				/* Retrieve labReport List */
				labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
						loginForm.getClinicID());
				DiagnosisList = configurationUtil.getDiagnosisList();
				request.setAttribute("apptID", patientForm.getAptID());

				diagnoseList = configurationUtil.getDiagnoseList();

				drugList = configurationUtil.getTradeNameList();

				frequencyList = configurationUtil.getFrequencyList();

				// chargeTypeList = configurationUtil.getChargeTypeList();

				doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

				String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

				request.setAttribute("medicalCertiText", medicatCertificate);

				String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

				request.setAttribute("referralLetter", referralLetter);

				// Inserting values into Audit table
				daoInf.insertAudit(request.getRemoteAddr(), "Add General Physician Prescription",
						loginForm.getUserID());

				/*
				 * Getting form name to be display based on logged in User
				 */
				String[] formNameArray = loginForm.getOPDJSPName().split("&");

				System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[1].trim());

				// Setting add opd page name value in pageName variable
				setPageName(formNameArray[1].trim());

				return SUCCESS;

			} else if (message.equals("noVisit")) {

				addActionError("No visit added. Please add visit first.");

				String prescTabCheck = "enable";

				request.setAttribute("prescTabCheck", prescTabCheck);

				request.setAttribute("printAvailable", "No");
				/*
				 * retrieving patientList which contains visit details
				 */
				patientList = patientDAOInf.retrieveGeneralHospitalPatientDetailsForExistiongVisit(
						patientForm.getPatientID(), patientForm.getVisitID(), loginForm.getClinicID());

				System.out.println("Values :" + patientForm.getPatientID() + "-" + patientForm.getVisitID() + "-"
						+ loginForm.getClinicID());

				boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

				if (visitCheck) {
					billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
				} else {
					billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
							loginForm.getClinicID(), loginForm.getClinicSuffix());
				}

				OPDChargesList = managementDAOInf.retrieveAllOPDCharges(loginForm.getPracticeID());
				request.setAttribute("OPDChargesList", OPDChargesList);

				String ChargesDetails = managementDAOInf.retrieveOPDChargesDetailsByReceiptID(patientForm.getVisitID());
				request.setAttribute("ChargesDetails", ChargesDetails);

				LabTestList = managementDAOInf.retrieveAllLabTests(loginForm.getPracticeID());
				request.setAttribute("LabTestList", LabTestList);

				String InvestigationDetails = managementDAOInf
						.retrieveInvestigationDetailsByVisitID(patientForm.getVisitID());
				request.setAttribute("InvestigationDetails", InvestigationDetails);

				String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
				request.setAttribute("paymentType", paymentType);

				// retrieving present complaint list for last visit of patient
				String complaintList = patientDAOInf.retrievePresentComplaintsOfLastVisit(patientForm.getVisitID());
				request.setAttribute("complaintList", complaintList);

				String categoryList = patientDAOInf.retrieveCategoryListOfLastVisit(patientForm.getVisitID());
				request.setAttribute("categoryList", categoryList);

				PVComplaints = patientDAOInf.getPVComplaints();

				MedicalHistory = patientDAOInf.retrievemedicalHistoryListOfLastVisit(patientForm,
						patientForm.getPatientID());
				request.setAttribute("MedicalHistory", MedicalHistory);

				FamilyHistory = patientDAOInf.retrieveFamilyHistoryListOfLastVisit(patientForm,
						patientForm.getPatientID());
				request.setAttribute("FamilyHistory", FamilyHistory);

				PersonalHistory = patientDAOInf.retrievePersonalHistoryListOfLastVisit(patientForm,
						patientForm.getPatientID());
				request.setAttribute("PersonalHistory", PersonalHistory);

				onEaminationList = patientDAOInf.retrieveOnExaminationListByVisitID(patientForm.getVisitID());
				request.setAttribute("onEaminationList", onEaminationList);

				InjectionPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
						patientForm.getVisitID(), "Injection");
				InjectionList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Injection");

				TabletPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
						patientForm.getVisitID(), "Tablet");
				TabletList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Tablet");

				LiquidPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
						patientForm.getVisitID(), "Liquid");
				LiquidList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Liquid");

				/* Retrieve labReport List */
				labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
						loginForm.getClinicID());
				DiagnosisList = configurationUtil.getDiagnosisList();
				request.setAttribute("apptID", patientForm.getAptID());

				diagnoseList = configurationUtil.getDiagnoseList();

				drugList = configurationUtil.getTradeNameList();

				frequencyList = configurationUtil.getFrequencyList();

				// chargeTypeList = configurationUtil.getChargeTypeList();

				doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

				String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

				request.setAttribute("medicalCertiText", medicatCertificate);

				String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

				request.setAttribute("referralLetter", referralLetter);

				// Inserting values into Audit table
				daoInf.insertAudit(request.getRemoteAddr(), "Add General Physician Prescription Exception occurred",
						loginForm.getUserID());

				/*
				 * Getting form name to be display based on logged in User
				 */
				String[] formNameArray = loginForm.getOPDJSPName().split("&");

				System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[1].trim());

				// Setting add opd page name value in pageName variable
				setPageName(formNameArray[1].trim());

				return ERROR;

			} else {

				addActionError(
						"Eexception occurred while adding prescription details. Please check server logs for more details.");

				String prescTabCheck = "enable";

				request.setAttribute("prescTabCheck", prescTabCheck);

				request.setAttribute("printAvailable", "No");
				/*
				 * retrieving patientList which contains visit details
				 */
				patientList = patientDAOInf.retrieveGeneralHospitalPatientDetailsForExistiongVisit(
						patientForm.getPatientID(), patientForm.getVisitID(), loginForm.getClinicID());

				System.out.println("Values :" + patientForm.getPatientID() + "-" + patientForm.getVisitID() + "-"
						+ loginForm.getClinicID());

				// retrieving present complaint list for last visit of patient
				String complaintList = patientDAOInf.retrievePresentComplaintsOfLastVisit(patientForm.getVisitID());
				request.setAttribute("complaintList", complaintList);

				String categoryList = patientDAOInf.retrieveCategoryListOfLastVisit(patientForm.getVisitID());
				request.setAttribute("categoryList", categoryList);

				PVComplaints = patientDAOInf.getPVComplaints();

				MedicalHistory = patientDAOInf.retrievemedicalHistoryListOfLastVisit(patientForm,
						patientForm.getPatientID());
				request.setAttribute("MedicalHistory", MedicalHistory);

				FamilyHistory = patientDAOInf.retrieveFamilyHistoryListOfLastVisit(patientForm,
						patientForm.getPatientID());
				request.setAttribute("FamilyHistory", FamilyHistory);

				PersonalHistory = patientDAOInf.retrievePersonalHistoryListOfLastVisit(patientForm,
						patientForm.getPatientID());
				request.setAttribute("PersonalHistory", PersonalHistory);

				onEaminationList = patientDAOInf.retrieveOnExaminationListByVisitID(patientForm.getVisitID());
				request.setAttribute("onEaminationList", onEaminationList);

				InjectionPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
						patientForm.getVisitID(), "Injection");
				InjectionList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Injection");

				TabletPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
						patientForm.getVisitID(), "Tablet");
				TabletList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Tablet");

				LiquidPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
						patientForm.getVisitID(), "Liquid");
				LiquidList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Liquid");

				/* Retrieve labReport List */
				labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
						loginForm.getClinicID());
				DiagnosisList = configurationUtil.getDiagnosisList();
				request.setAttribute("apptID", patientForm.getAptID());

				diagnoseList = configurationUtil.getDiagnoseList();

				drugList = configurationUtil.getTradeNameList();

				frequencyList = configurationUtil.getFrequencyList();

				// chargeTypeList = configurationUtil.getChargeTypeList();

				doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

				String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

				request.setAttribute("medicalCertiText", medicatCertificate);

				String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

				request.setAttribute("referralLetter", referralLetter);

				// Inserting values into Audit table
				daoInf.insertAudit(request.getRemoteAddr(), "Add General Physician Prescription Exception occurred",
						loginForm.getUserID());

				/*
				 * Getting form name to be display based on logged in User
				 */
				String[] formNameArray = loginForm.getOPDJSPName().split("&");

				System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[1].trim());

				// Setting add opd page name value in pageName variable
				setPageName(formNameArray[1].trim());

				return ERROR;

			}
		}
		return SUCCESS;
	}

	public String printEditGeneralHospitalPrescription() throws Exception {
		/*
		 * Getting user role from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");

		patientDAOInf = new PatientDAOImpl();

		LoginDAOInf daoInf = new LoginDAOImpl();

		PrescriptionManagementDAOInf managementDAOInf = new PrescriptionManagementDAOImpl();

		RegistrationDAOinf registrationDAOinf = new RegistrationDAOImpl();

		ConvertToPDFUtil convertToPDFUtil = new ConvertToPDFUtil();

		String accessKey = xmlUtil.getAccessKey();

		String secreteKey = xmlUtil.getSecreteKey();

		AWSS3Connect awss3Connect = new AWSS3Connect();

		// getting input file location from S3 bucket
		String s3reportFilePath = xmlUtil.getS3RDMLReportFilePath();

		// getting s3 bucket name
		String bucketName = util.getS3BucketName();

		// getting s3 bucket region
		String bucketRegion = xmlUtil.getS3BucketRegion();

		String s3LogoFilePath = xmlUtil.getS3RDMLFilePath();

		AWSCredentials credentials = new BasicAWSCredentials(accessKey, secreteKey);

		AmazonS3 s3 = AmazonS3ClientBuilder.standard().withCredentials(new AWSStaticCredentialsProvider(credentials))
				.withRegion(bucketRegion).build();

		HttpServletRequest request = ServletActionContext.getRequest();

		ServletContext context = request.getServletContext();

		String realPath = context.getRealPath("/");
		System.out.println("Real path is :: " + realPath);

		orthoBillItemList = patientDAOInf.retrieveOrthoBillingItemList(patientForm.getVisitID());

		/*
		 * verify whther prescription OR PrescribedInvestigations details has been added
		 * for the current visitID, if so then only proceed further to print
		 * prescription else give error msg saying no prescription added for this visit
		 */

		boolean visitCheckNew = patientDAOInf.verifyVisitExists("PrescribedInvestigations", patientForm.getVisitID());

		boolean visitCheck = patientDAOInf.verifyVisitExists("Prescription", patientForm.getVisitID());

		if (visitCheck || visitCheckNew) {

			// String pdfOutFIleName = realPath + patientForm.getFirstName() +
			// patientForm.getLastName()
			String pdfOutFIleName = patientForm.getFirstName() + patientForm.getLastName() + patientForm.getPatientID()
					+ "_" + patientForm.getVisitID() + "p.pdf";

			message = convertToPDFUtil.convertGeneralHospitalPrescriptionPDF(patientForm.getPatientID(),
					patientForm.getVisitID(), realPath, pdfOutFIleName, loginForm.getClinicID(), s3, s3LogoFilePath,
					bucketName);

			if (message.equalsIgnoreCase("success")) {
				System.out.println("Inside:");

				File inputFile = new File(realPath + "/" + pdfOutFIleName);

				// Storing file to S3 RDML INPUT FILE location
				message = awss3Connect.pushFile(inputFile, pdfOutFIleName, bucketName, bucketRegion, s3reportFilePath);

				S3ObjectInputStream s3ObjectInputStream = s3
						.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, pdfOutFIleName))
						.getObjectContent();

				request.setAttribute("PDFOutFileName", pdfOutFIleName);

				patientForm.setFileInputStream(s3ObjectInputStream);

				patientForm.setFileName(pdfOutFIleName);

				String dummy = "success";

				String prescTabCheck = "enable";

				request.setAttribute("prescTabCheck", prescTabCheck);

				request.setAttribute("lasteEnteredVisitList", dummy);

				request.setAttribute("printAvailable", "Yes");

				/*
				 * retrieving patientList which contains visit details
				 */
				patientList = patientDAOInf.retrieveGeneralHospitalPatientDetailsForExistiongVisit(
						patientForm.getPatientID(), patientForm.getVisitID(), loginForm.getClinicID());

				boolean visitCheck1 = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

				if (visitCheck1) {
					billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
				} else {
					billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
							loginForm.getClinicID(), loginForm.getClinicSuffix());
				}

				OPDChargesList = managementDAOInf.retrieveAllOPDCharges(loginForm.getPracticeID());
				request.setAttribute("OPDChargesList", OPDChargesList);

				String ChargesDetails = managementDAOInf.retrieveOPDChargesDetailsByReceiptID(patientForm.getVisitID());
				request.setAttribute("ChargesDetails", ChargesDetails);

				LabTestList = managementDAOInf.retrieveAllLabTests(loginForm.getPracticeID());
				request.setAttribute("LabTestList", LabTestList);

				String InvestigationDetails = managementDAOInf
						.retrieveInvestigationDetailsByVisitID(patientForm.getVisitID());
				request.setAttribute("InvestigationDetails", InvestigationDetails);

				String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
				request.setAttribute("paymentType", paymentType);

				// System.out.println("Values
				// :"+patientForm.getPatientID()+"-"+patientForm.getVisitID()+"-"+loginForm.getClinicID());

				// retrieving present complaint list for last visit of patient
				String complaintList = patientDAOInf.retrievePresentComplaintsOfLastVisit(patientForm.getVisitID());
				request.setAttribute("complaintList", complaintList);

				PVComplaints = patientDAOInf.getPVComplaints();

				String categoryList = patientDAOInf.retrieveCategoryListOfLastVisit(patientForm.getVisitID());
				request.setAttribute("categoryList", categoryList);

				MedicalHistory = patientDAOInf.retrievemedicalHistoryListOfLastVisit(patientForm,
						patientForm.getPatientID());
				request.setAttribute("MedicalHistory", MedicalHistory);

				FamilyHistory = patientDAOInf.retrieveFamilyHistoryListOfLastVisit(patientForm,
						patientForm.getPatientID());
				request.setAttribute("FamilyHistory", FamilyHistory);

				PersonalHistory = patientDAOInf.retrievePersonalHistoryListOfLastVisit(patientForm,
						patientForm.getPatientID());
				request.setAttribute("PersonalHistory", PersonalHistory);

				otherInvstigationList = patientDAOInf.retrieveOtherFindingsListByVisitID(patientForm.getVisitID());

				onEaminationList = patientDAOInf.retrieveOnExaminationListByVisitID(patientForm.getVisitID());
				request.setAttribute("onEaminationList", onEaminationList);

				vitalSignsList = patientDAOInf.retrieveVitalSignsListByVisitID(patientForm.getVisitID());

				InjectionPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
						patientForm.getVisitID(), "Injection");
				InjectionList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Injection");

				TabletPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
						patientForm.getVisitID(), "Tablet");
				TabletList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Tablet");

				LiquidPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
						patientForm.getVisitID(), "Liquid");
				LiquidList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Liquid");

				DiagnosisList = configurationUtil.getDiagnosisList();

				/* Retrieve labReport List */
				labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
						loginForm.getClinicID());

				request.setAttribute("lasteEnteredVisitList", dummy);

				request.setAttribute("apptID", patientForm.getAptID());

				String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

				request.setAttribute("medicalCertiText", medicatCertificate);

				String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

				request.setAttribute("referralLetter", referralLetter);

				// Inserting values into Audit table
				daoInf.insertAudit(request.getRemoteAddr(), "Add General Physician Prescription",
						loginForm.getUserID());

				/*
				 * Getting form name to be display based on logged in User
				 */
				String[] formNameArray = loginForm.getOPDJSPName().split("&");

				System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[1].trim());

				// Setting add opd page name value in pageName variable
				setPageName(formNameArray[1].trim());

				return SUCCESS;

			} else {
				addActionError("Failed to print OPD Visit.Please check server logs for more details.");

				String dummy = "success";

				String prescTabCheck = "enable";

				request.setAttribute("prescTabCheck", prescTabCheck);

				request.setAttribute("lasteEnteredVisitList", dummy);

				request.setAttribute("opticianFloatCheck", "empty");

				request.setAttribute("printAvailable", "Yes");

				/*
				 * retrieving patientList which contains visit details
				 */
				patientList = patientDAOInf.retrieveGeneralHospitalPatientDetailsForExistiongVisit(
						patientForm.getPatientID(), patientForm.getVisitID(), loginForm.getClinicID());

				boolean visitCheck1 = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

				if (visitCheck1) {
					billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
				} else {
					billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
							loginForm.getClinicID(), loginForm.getClinicSuffix());
				}

				OPDChargesList = managementDAOInf.retrieveAllOPDCharges(loginForm.getPracticeID());
				request.setAttribute("OPDChargesList", OPDChargesList);

				String ChargesDetails = managementDAOInf.retrieveOPDChargesDetailsByReceiptID(patientForm.getVisitID());
				request.setAttribute("ChargesDetails", ChargesDetails);

				LabTestList = managementDAOInf.retrieveAllLabTests(loginForm.getPracticeID());
				request.setAttribute("LabTestList", LabTestList);

				String InvestigationDetails = managementDAOInf
						.retrieveInvestigationDetailsByVisitID(patientForm.getVisitID());
				request.setAttribute("InvestigationDetails", InvestigationDetails);

				String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
				request.setAttribute("paymentType", paymentType);

				// System.out.println("Values
				// :"+patientForm.getPatientID()+"-"+patientForm.getVisitID()+"-"+loginForm.getClinicID());

				// retrieving present complaint list for last visit of patient
				String complaintList = patientDAOInf.retrievePresentComplaintsOfLastVisit(patientForm.getVisitID());
				request.setAttribute("complaintList", complaintList);

				PVComplaints = patientDAOInf.getPVComplaints();

				String categoryList = patientDAOInf.retrieveCategoryListOfLastVisit(patientForm.getVisitID());
				request.setAttribute("categoryList", categoryList);

				MedicalHistory = patientDAOInf.retrievemedicalHistoryListOfLastVisit(patientForm,
						patientForm.getPatientID());
				request.setAttribute("MedicalHistory", MedicalHistory);

				FamilyHistory = patientDAOInf.retrieveFamilyHistoryListOfLastVisit(patientForm,
						patientForm.getPatientID());
				request.setAttribute("FamilyHistory", FamilyHistory);

				PersonalHistory = patientDAOInf.retrievePersonalHistoryListOfLastVisit(patientForm,
						patientForm.getPatientID());
				request.setAttribute("PersonalHistory", PersonalHistory);

				otherInvstigationList = patientDAOInf.retrieveOtherFindingsListByVisitID(patientForm.getVisitID());

				onEaminationList = patientDAOInf.retrieveOnExaminationListByVisitID(patientForm.getVisitID());
				request.setAttribute("onEaminationList", onEaminationList);

				vitalSignsList = patientDAOInf.retrieveVitalSignsListByVisitID(patientForm.getVisitID());

				InjectionPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
						patientForm.getVisitID(), "Injection");
				InjectionList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Injection");

				TabletPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
						patientForm.getVisitID(), "Tablet");
				TabletList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Tablet");

				LiquidPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
						patientForm.getVisitID(), "Liquid");
				LiquidList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Liquid");

				DiagnosisList = configurationUtil.getDiagnosisList();

				/* Retrieve labReport List */
				labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
						loginForm.getClinicID());

				request.setAttribute("lasteEnteredVisitList", dummy);

				request.setAttribute("apptID", patientForm.getAptID());

				String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

				request.setAttribute("medicalCertiText", medicatCertificate);

				String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

				request.setAttribute("referralLetter", referralLetter);

				// Inserting values into Audit table
				daoInf.insertAudit(request.getRemoteAddr(), "Add General Physician Prescription",
						loginForm.getUserID());

				/*
				 * Getting form name to be display based on logged in User
				 */
				String[] formNameArray = loginForm.getOPDJSPName().split("&");

				System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[1].trim());

				// Setting add opd page name value in pageName variable
				setPageName(formNameArray[1].trim());

				return ERROR;
			}

		} else {
			addActionError("No prescription added for current visit. Please add prescription first.");

			String prescTabCheck = "enable";

			request.setAttribute("prescTabCheck", prescTabCheck);

			/*
			 * retrieving patientList which contains visit details
			 */
			patientList = patientDAOInf.retrieveGeneralHospitalPatientDetailsForExistiongVisit(
					patientForm.getPatientID(), patientForm.getVisitID(), loginForm.getClinicID());

			// System.out.println("Values
			// :"+patientForm.getPatientID()+"-"+patientForm.getVisitID()+"-"+loginForm.getClinicID());

			boolean visitCheck1 = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

			if (visitCheck1) {
				billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
			} else {
				billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
						loginForm.getClinicID(), loginForm.getClinicSuffix());
			}

			OPDChargesList = managementDAOInf.retrieveAllOPDCharges(loginForm.getPracticeID());
			request.setAttribute("OPDChargesList", OPDChargesList);

			String ChargesDetails = managementDAOInf.retrieveOPDChargesDetailsByReceiptID(patientForm.getVisitID());
			request.setAttribute("ChargesDetails", ChargesDetails);

			LabTestList = managementDAOInf.retrieveAllLabTests(loginForm.getPracticeID());
			request.setAttribute("LabTestList", LabTestList);

			String InvestigationDetails = managementDAOInf
					.retrieveInvestigationDetailsByVisitID(patientForm.getVisitID());
			request.setAttribute("InvestigationDetails", InvestigationDetails);

			String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
			request.setAttribute("paymentType", paymentType);

			// retrieving present complaint list for last visit of patient
			String complaintList = patientDAOInf.retrievePresentComplaintsOfLastVisit(patientForm.getVisitID());
			request.setAttribute("complaintList", complaintList);

			PVComplaints = patientDAOInf.getPVComplaints();

			String categoryList = patientDAOInf.retrieveCategoryListOfLastVisit(patientForm.getVisitID());
			request.setAttribute("categoryList", categoryList);

			MedicalHistory = patientDAOInf.retrievemedicalHistoryListOfLastVisit(patientForm,
					patientForm.getPatientID());
			request.setAttribute("MedicalHistory", MedicalHistory);

			FamilyHistory = patientDAOInf.retrieveFamilyHistoryListOfLastVisit(patientForm, patientForm.getPatientID());
			request.setAttribute("FamilyHistory", FamilyHistory);

			PersonalHistory = patientDAOInf.retrievePersonalHistoryListOfLastVisit(patientForm,
					patientForm.getPatientID());
			request.setAttribute("PersonalHistory", PersonalHistory);

			otherInvstigationList = patientDAOInf.retrieveOtherFindingsListByVisitID(patientForm.getVisitID());

			onEaminationList = patientDAOInf.retrieveOnExaminationListByVisitID(patientForm.getVisitID());
			request.setAttribute("onEaminationList", onEaminationList);

			vitalSignsList = patientDAOInf.retrieveVitalSignsListByVisitID(patientForm.getVisitID());

			InjectionPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID(), "Injection");
			InjectionList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Injection");

			TabletPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID(), "Tablet");
			TabletList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Tablet");

			LiquidPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID(), "Liquid");
			LiquidList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Liquid");

			DiagnosisList = configurationUtil.getDiagnosisList();

			/* Retrieve labReport List */
			labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
					loginForm.getClinicID());

			String dummy = "success";

			request.setAttribute("lasteEnteredVisitList", dummy);

			request.setAttribute("apptID", patientForm.getAptID());

			String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

			request.setAttribute("medicalCertiText", medicatCertificate);

			String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

			request.setAttribute("referralLetter", referralLetter);

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Add General Physician Prescription", loginForm.getUserID());

			/*
			 * Getting form name to be display based on logged in User
			 */
			String[] formNameArray = loginForm.getOPDJSPName().split("&");

			System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[1].trim());

			// Setting add opd page name value in pageName variable
			setPageName(formNameArray[1].trim());

			return ERROR;
		}
	}

	public String editNewBill() throws Exception {
		serviceInf = new eDhanvantariServiceImpl();
		patientDAOInf = new PatientDAOImpl();

		LoginDAOInf daoInf = new LoginDAOImpl();

		PrescriptionManagementDAOInf managementDAOInf = new PrescriptionManagementDAOImpl();

		SMSSender smsSender = new SMSSender();

		EmailUtil emailUtil = new EmailUtil();

		RegistrationDAOinf registrationDAOinf = new RegistrationDAOImpl();

		String accessKey = xmlUtil.getAccessKey();

		String secreteKey = xmlUtil.getSecreteKey();

		AWSS3Connect awss3Connect = new AWSS3Connect();

		// getting input file location from S3 bucket
		String s3reportFilePath = xmlUtil.getS3RDMLReportFilePath();

		// getting s3 bucket name
		String bucketName = util.getS3BucketName();

		// getting s3 bucket region
		String bucketRegion = xmlUtil.getS3BucketRegion();

		String s3LogoFilePath = xmlUtil.getS3RDMLFilePath();

		AWSCredentials credentials = new BasicAWSCredentials(accessKey, secreteKey);

		AmazonS3 s3 = AmazonS3ClientBuilder.standard().withCredentials(new AWSStaticCredentialsProvider(credentials))
				.withRegion(bucketRegion).build();

		/*
		 * Getting user role from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");

		request.setAttribute("apptID", patientForm.getAptID());

		message = serviceInf.configureGeneralHospitalBill(patientForm);

		orthoBillItemList = patientDAOInf.retrieveOrthoBillingItemList(patientForm.getVisitID());

		if (message.equalsIgnoreCase("success")) {
			addActionMessage("Bill configured successfully.");

			ConvertToPDFUtil convertToPDFUtil = new ConvertToPDFUtil();

			HttpServletRequest request = ServletActionContext.getRequest();
			ServletContext context = request.getServletContext();

			String realPath = context.getRealPath("/");
			System.out.println("Real path is :: " + realPath);

			// String pdfOutFIleName = realPath + patientForm.getFirstName() +
			// patientForm.getLastName()
			String pdfOutFIleName = patientForm.getFirstName() + patientForm.getLastName() + patientForm.getPatientID()
					+ "_" + patientForm.getVisitID() + "b.pdf";

			message = convertToPDFUtil.convertGeneralHospitalBillingPDF(patientForm.getPatientID(),
					patientForm.getVisitID(), realPath, pdfOutFIleName, loginForm.getClinicID(),
					loginForm.getVisitTypeID(), loginForm.getClinicSuffix(), s3, s3LogoFilePath, bucketName,
					loginForm.getPracticeID());

			if (message.equalsIgnoreCase("success")) {

				File inputFile = new File(realPath + "/" + pdfOutFIleName);

				// Storing file to S3 RDML INPUT FILE location
				message = awss3Connect.pushFile(inputFile, pdfOutFIleName, bucketName, bucketRegion, s3reportFilePath);

				S3ObjectInputStream s3ObjectInputStream = s3
						.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, pdfOutFIleName))
						.getObjectContent();

				patientForm.setFileInputStream(s3ObjectInputStream);

				patientForm.setFileName(pdfOutFIleName);

				request.setAttribute("PDFOutFileName", pdfOutFIleName);

				String billingTabCheck = "enable";

				request.setAttribute("billingTabCheck", billingTabCheck);

				/*
				 * Update appointment status to Billing
				 */
				patientDAOInf.updateBillingAppointmentStatus(patientForm.getPatientID(), patientForm.getAptID());

				patientList = patientDAOInf.retrieveGeneralHospitalPatientDetailsForExistiongVisit(
						patientForm.getPatientID(), patientForm.getVisitID(), loginForm.getClinicID());

				boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

				if (visitCheck) {
					System.out.println("First....");
					billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
				} else {
					billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
							loginForm.getClinicID(), loginForm.getClinicSuffix());
				}

				OPDChargesList = managementDAOInf.retrieveAllOPDCharges(loginForm.getPracticeID());
				request.setAttribute("OPDChargesList", OPDChargesList);

				String ChargesDetails = managementDAOInf.retrieveOPDChargesDetailsByReceiptID(patientForm.getVisitID());
				request.setAttribute("ChargesDetails", ChargesDetails);

				LabTestList = managementDAOInf.retrieveAllLabTests(loginForm.getPracticeID());
				request.setAttribute("LabTestList", LabTestList);

				String InvestigationDetails = managementDAOInf
						.retrieveInvestigationDetailsByVisitID(patientForm.getVisitID());
				request.setAttribute("InvestigationDetails", InvestigationDetails);

				String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
				request.setAttribute("paymentType", paymentType);

				// retrieving present complaint list for last visit of patient
				String complaintList = patientDAOInf.retrievePresentComplaintsOfLastVisit(patientForm.getVisitID());

				request.setAttribute("complaintList", complaintList);

				/* HashMap<String, String> PVComplaints = patientDAOInf.getPVComplaints(); */

				PVComplaints = patientDAOInf.getPVComplaints();

				String categoryList = patientDAOInf.retrieveCategoryListOfLastVisit(patientForm.getVisitID());
				request.setAttribute("categoryList", categoryList);

				MedicalHistory = patientDAOInf.retrievemedicalHistoryListOfLastVisit(patientForm,
						patientForm.getPatientID());
				request.setAttribute("MedicalHistory", MedicalHistory);

				FamilyHistory = patientDAOInf.retrieveFamilyHistoryListOfLastVisit(patientForm,
						patientForm.getPatientID());
				request.setAttribute("FamilyHistory", FamilyHistory);

				PersonalHistory = patientDAOInf.retrievePersonalHistoryListOfLastVisit(patientForm,
						patientForm.getPatientID());
				request.setAttribute("PersonalHistory", PersonalHistory);

				onEaminationList = patientDAOInf.retrieveOnExaminationListByVisitID(patientForm.getVisitID());
				request.setAttribute("onEaminationList", onEaminationList);

				InjectionPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
						patientForm.getVisitID(), "Injection");
				InjectionList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Injection");

				TabletPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
						patientForm.getVisitID(), "Tablet");
				TabletList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Tablet");

				LiquidPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
						patientForm.getVisitID(), "Liquid");
				LiquidList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Liquid");

				String dummy = "success";

				request.setAttribute("lasteEnteredVisitList", dummy);

				diagnoseList = configurationUtil.getDiagnoseList();

				request.setAttribute("apptID", patientForm.getAptID());

				drugList = configurationUtil.getTradeNameList();

				// chargeTypeList = configurationUtil.getChargeTypeList();

				doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

				hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

				DiagnosisList = configurationUtil.getDiagnosisList();

				/* Retrieve labReport List */
				labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
						loginForm.getClinicID());

				String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

				request.setAttribute("medicalCertiText", medicatCertificate);

				String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

				request.setAttribute("referralLetter", referralLetter);

				// Inserting values into Audit table
				daoInf.insertAudit(request.getRemoteAddr(), "Add General Physician Billing", loginForm.getUserID());

				/*
				 * Getting form name to be display based on logged in User
				 */
				String[] formNameArray = loginForm.getOPDJSPName().split("&");

				System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[0].trim());

				// Setting add opd page name value in pageName variable
				setPageName(formNameArray[1].trim());

				return SUCCESS;

			} else {

				addActionError("Failed to print billing pdf. Please check server logs for more details.");

				/*
				 * Update appointment status to Billing
				 */
				patientDAOInf.updateBillingAppointmentStatus(patientForm.getPatientID(), patientForm.getAptID());

				String dummy = "success";

				request.setAttribute("lasteEnteredVisitList", dummy);

				patientList = patientDAOInf.retrieveGeneralHospitalPatientDetailsForExistiongVisit(
						patientForm.getPatientID(), patientForm.getVisitID(), loginForm.getClinicID());

				boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

				if (visitCheck) {
					billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
				} else {
					billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
							loginForm.getClinicID(), loginForm.getClinicSuffix());
				}

				// retrieving present complaint list for last visit of patient
				String complaintList = patientDAOInf.retrievePresentComplaintsOfLastVisit(patientForm.getVisitID());

				request.setAttribute("complaintList", complaintList);

				/* HashMap<String, String> PVComplaints = patientDAOInf.getPVComplaints(); */

				PVComplaints = patientDAOInf.getPVComplaints();

				String categoryList = patientDAOInf.retrieveCategoryListOfLastVisit(patientForm.getVisitID());
				request.setAttribute("categoryList", categoryList);

				MedicalHistory = patientDAOInf.retrievemedicalHistoryListOfLastVisit(patientForm,
						patientForm.getPatientID());
				request.setAttribute("MedicalHistory", MedicalHistory);

				FamilyHistory = patientDAOInf.retrieveFamilyHistoryListOfLastVisit(patientForm,
						patientForm.getPatientID());
				request.setAttribute("FamilyHistory", FamilyHistory);

				PersonalHistory = patientDAOInf.retrievePersonalHistoryListOfLastVisit(patientForm,
						patientForm.getPatientID());
				request.setAttribute("PersonalHistory", PersonalHistory);

				onEaminationList = patientDAOInf.retrieveOnExaminationListByVisitID(patientForm.getVisitID());
				request.setAttribute("onEaminationList", onEaminationList);

				InjectionPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
						patientForm.getVisitID(), "Injection");
				InjectionList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Injection");

				TabletPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
						patientForm.getVisitID(), "Tablet");
				TabletList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Tablet");

				LiquidPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
						patientForm.getVisitID(), "Liquid");
				LiquidList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Liquid");

				diagnoseList = configurationUtil.getDiagnoseList();

				request.setAttribute("apptID", patientForm.getAptID());

				drugList = configurationUtil.getTradeNameList();

				frequencyList = configurationUtil.getFrequencyList();

				// chargeTypeList = configurationUtil.getChargeTypeList();

				doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

				hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

				DiagnosisList = configurationUtil.getDiagnosisList();

				/* Retrieve labReport List */
				labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
						loginForm.getClinicID());

				String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

				request.setAttribute("medicalCertiText", medicatCertificate);

				String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

				request.setAttribute("referralLetter", referralLetter);

				// Inserting values into Audit table
				daoInf.insertAudit(request.getRemoteAddr(), "Add General Physician Billing Exception Occurred.",
						loginForm.getUserID());

				/*
				 * Getting form name to be display based on logged in User
				 */
				String[] formNameArray = loginForm.getOPDJSPName().split("&");

				System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[0].trim());

				// Setting add opd page name value in pageName variable
				setPageName(formNameArray[1].trim());

				return ERROR;

			}

			/*
			 * Check whether appointment udpated flag is on or not, and depending upon that
			 * sending SMS and Email
			 * 
			 * boolean SMSCheck = util.verifyCommunicationCheck("smsPresc");
			 * 
			 * if (SMSCheck) {
			 * 
			 * 
			 * Retrieving patient's mobile no, if mobile is not null, then sending patient a
			 * welcome message
			 * 
			 * String mobileNo =
			 * patientDAOInf.retrievePatientMobileNoByID(patientForm.getPatientID());
			 * 
			 * 
			 * Sending patient a welcome as well as Appointment scheduled message on
			 * checking whether mobile no is available for that patient or not
			 * 
			 * if (mobileNo == null || mobileNo == "") {
			 * System.out.println("Mobile no not found for patient."); } else {
			 * 
			 * if (mobileNo.isEmpty()) {
			 * System.out.println("Mobile no not found for patient."); } else {
			 * 
			 * 
			 * Sending bill details SMS to patient
			 * 
			 * smsSender.sendGeneralisedPrescriptionORBillSMS(patientForm.getVisitID(),
			 * mobileNo, loginForm.getPracticeID(), loginForm.getClinicID(),
			 * ActivityStatus.BILL);
			 * 
			 * }
			 * 
			 * }
			 * 
			 * }
			 */

		} else if (message.equals("noVisit")) {
			addActionError("No visit added.Please add visit first.");

			HttpServletRequest request = ServletActionContext.getRequest();

			String billingTabCheck = "enable";

			request.setAttribute("billingTabCheck", billingTabCheck);

			/*
			 * Update appointment status to Billing
			 */
			patientDAOInf.updateBillingAppointmentStatus(patientForm.getPatientID(), patientForm.getAptID());

			/*
			 * retrieving patientList which contains visit details
			 */
			patientList = patientDAOInf.retrieveGeneralHospitalPatientDetailsForExistiongVisit(
					patientForm.getPatientID(), patientForm.getVisitID(), loginForm.getClinicID());

			boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

			if (visitCheck) {
				billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
			} else {
				billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
						loginForm.getClinicID(), loginForm.getClinicSuffix());
			}

			OPDChargesList = managementDAOInf.retrieveAllOPDCharges(loginForm.getPracticeID());
			request.setAttribute("OPDChargesList", OPDChargesList);

			String ChargesDetails = managementDAOInf.retrieveOPDChargesDetailsByReceiptID(patientForm.getVisitID());
			request.setAttribute("ChargesDetails", ChargesDetails);

			LabTestList = managementDAOInf.retrieveAllLabTests(loginForm.getPracticeID());
			request.setAttribute("LabTestList", LabTestList);

			String InvestigationDetails = managementDAOInf
					.retrieveInvestigationDetailsByVisitID(patientForm.getVisitID());
			request.setAttribute("InvestigationDetails", InvestigationDetails);

			String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
			request.setAttribute("paymentType", paymentType);

			// retrieving present complaint list for last visit of patient
			String complaintList = patientDAOInf.retrievePresentComplaintsOfLastVisit(patientForm.getVisitID());
			request.setAttribute("complaintList", complaintList);

			String categoryList = patientDAOInf.retrieveCategoryListOfLastVisit(patientForm.getVisitID());
			request.setAttribute("categoryList", categoryList);

			PVComplaints = patientDAOInf.getPVComplaints();

			MedicalHistory = patientDAOInf.retrievemedicalHistoryListOfLastVisit(patientForm,
					patientForm.getPatientID());
			request.setAttribute("MedicalHistory", MedicalHistory);

			FamilyHistory = patientDAOInf.retrieveFamilyHistoryListOfLastVisit(patientForm, patientForm.getPatientID());
			request.setAttribute("FamilyHistory", FamilyHistory);

			PersonalHistory = patientDAOInf.retrievePersonalHistoryListOfLastVisit(patientForm,
					patientForm.getPatientID());
			request.setAttribute("PersonalHistory", PersonalHistory);

			onEaminationList = patientDAOInf.retrieveOnExaminationListByVisitID(patientForm.getVisitID());
			request.setAttribute("onEaminationList", onEaminationList);

			/* Retrieve labReport List */
			labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
					loginForm.getClinicID());

			String dummy = "success";

			request.setAttribute("lasteEnteredVisitList", dummy);

			InjectionPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID(), "Injection");
			InjectionList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Injection");

			TabletPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID(), "Tablet");
			TabletList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Tablet");

			LiquidPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID(), "Liquid");
			LiquidList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Liquid");

			diagnoseList = configurationUtil.getDiagnoseList();

			request.setAttribute("apptID", patientForm.getAptID());

			drugList = configurationUtil.getTradeNameList();

			frequencyList = configurationUtil.getFrequencyList();

			// chargeTypeList = configurationUtil.getChargeTypeList();

			doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

			hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Add General Physician Billing Exception Occurred.",
					loginForm.getUserID());

			String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

			request.setAttribute("medicalCertiText", medicatCertificate);

			String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

			request.setAttribute("referralLetter", referralLetter);

			/*
			 * Getting form name to be display based on logged in User
			 */
			String[] formNameArray = loginForm.getOPDJSPName().split("&");

			System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[0].trim());

			// Setting add opd page name value in pageName variable
			setPageName(formNameArray[1].trim());

			return ERROR;
		} else {
			addActionError("Failed to configure bill. Please check server logs for more details.");

			HttpServletRequest request = ServletActionContext.getRequest();

			String billingTabCheck = "enable";

			request.setAttribute("billingTabCheck", billingTabCheck);

			/*
			 * Update appointment status to Billing
			 */
			patientDAOInf.updateBillingAppointmentStatus(patientForm.getPatientID(), patientForm.getAptID());

			/*
			 * retrieving patientList which contains visit details
			 */
			patientList = patientDAOInf.retrieveGeneralHospitalPatientDetailsForExistiongVisit(
					patientForm.getPatientID(), patientForm.getVisitID(), loginForm.getClinicID());

			boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

			if (visitCheck) {
				billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
			} else {
				billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
						loginForm.getClinicID(), loginForm.getClinicSuffix());
			}

			// retrieving present complaint list for last visit of patient
			String complaintList = patientDAOInf.retrievePresentComplaintsOfLastVisit(patientForm.getVisitID());
			request.setAttribute("complaintList", complaintList);

			String categoryList = patientDAOInf.retrieveCategoryListOfLastVisit(patientForm.getVisitID());
			request.setAttribute("categoryList", categoryList);

			PVComplaints = patientDAOInf.getPVComplaints();

			MedicalHistory = patientDAOInf.retrievemedicalHistoryListOfLastVisit(patientForm,
					patientForm.getPatientID());
			request.setAttribute("MedicalHistory", MedicalHistory);

			FamilyHistory = patientDAOInf.retrieveFamilyHistoryListOfLastVisit(patientForm, patientForm.getPatientID());
			request.setAttribute("FamilyHistory", FamilyHistory);

			PersonalHistory = patientDAOInf.retrievePersonalHistoryListOfLastVisit(patientForm,
					patientForm.getPatientID());
			request.setAttribute("PersonalHistory", PersonalHistory);

			onEaminationList = patientDAOInf.retrieveOnExaminationListByVisitID(patientForm.getVisitID());
			request.setAttribute("onEaminationList", onEaminationList);

			String dummy = "success";

			request.setAttribute("lasteEnteredVisitList", dummy);

			InjectionPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID(), "Injection");
			InjectionList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Injection");

			TabletPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID(), "Tablet");
			TabletList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Tablet");

			LiquidPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID(), "Liquid");
			LiquidList = configurationUtil.getCategoryWiseTradeNameList(loginForm.getClinicID(), "Liquid");

			/* Retrieve labReport List */
			labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
					loginForm.getClinicID());

			diagnoseList = configurationUtil.getDiagnoseList();

			request.setAttribute("apptID", patientForm.getAptID());

			drugList = configurationUtil.getTradeNameList();

			frequencyList = configurationUtil.getFrequencyList();

			// chargeTypeList = configurationUtil.getChargeTypeList();

			doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

			hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

			String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

			request.setAttribute("medicalCertiText", medicatCertificate);

			String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

			request.setAttribute("referralLetter", referralLetter);

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Add General Physician Billing Exception Occurred.",
					loginForm.getUserID());

			/*
			 * Getting form name to be display based on logged in User
			 */
			String[] formNameArray = loginForm.getOPDJSPName().split("&");

			System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[0].trim());

			// Setting add opd page name value in pageName variable
			setPageName(formNameArray[1].trim());

			return ERROR;
		}
	}

	public void retrieveOTChargesDisbursementDetails() throws Exception {
		patientDAOInf = new PatientDAOImpl();

		JSONObject values = new JSONObject();

		JSONArray array = new JSONArray();
		values = new JSONObject();

		JSONObject object = new JSONObject();

		response.setCharacterEncoding("UTF-8");

		try {

			values = patientDAOInf.retrieveOTChargesDisbursementList(patientForm.getOtChargeID());

			PrintWriter out = response.getWriter();

			out.print(values);

		} catch (Exception exception) {
			exception.printStackTrace();

			object.put("ErrMsg", "Exception occured while retrieve OT charges disbursement details");
			array.add(object);

			values.put("Release", array);

			PrintWriter out = response.getWriter();

			out.print(values);
		}
	}

	public String addNewGeneralHospitalIPDVisit() throws Exception {

		patientDAOInf = new PatientDAOImpl();

		serviceInf = new eDhanvantariServiceImpl();

		LoginDAOInf daoInf = new LoginDAOImpl();

		/*
		 * Getting clinicID from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");

		request.setAttribute("apptID", patientForm.getAptID());

		request.setAttribute("saveVisitcheck", "Saved");
		request.setAttribute("IPDBillCheck", "No");

		patientForm.setClinicID(loginForm.getClinicID());
		patientForm.setUserID(loginForm.getUserID());
		patientForm.setPracticeID(loginForm.getPracticeID());
		patientForm.setVisitTypeID(loginForm.getVisitTypeID());

		/*
		 * Getting form name to be display based on logged in User
		 */
		String[] formNameArray = loginForm.getOPDJSPName().split("&");

		System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[0].trim());

		message = serviceInf.addGeneralHospitalIPDVisit(patientForm);

		if (message.equals("success")) {

			addActionMessage("IPD Visit added successfully");

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Add GeneralHospital IPD Visit", loginForm.getUserID());

			/*
			 * Update appointment status to Consultation
			 */
			patientDAOInf.updateConsultationAppointmentStatus(patientForm.getPatientID(), patientForm.getAptID());

			patientList = patientDAOInf.retrieveIPDPatientDetails(patientForm.getPatientID(), loginForm.getClinicID(),
					patientForm.getVisitID());

			/*
			 * Check whether employee exists for the logged in user, if so then updated
			 * his/her userID as clinicianID into Appointment table for correspoding table,
			 * else dont
			 */
			int empID = loginForm.getUserID();

			if (empID != 0) {
				patientDAOInf.updateAttendedByInAppointmentForPatient(loginForm.getUserID(), patientForm.getAptID());
			}

			// inserting new record for the patient into VisitStatus table for status Booked
			if (patientForm.getStartDate() == null || patientForm.getStartDate().equals("NA")) {
				System.out.println("start date not found.");
			} else {
				patientDAOInf.insertVisitStatus(patientForm.getVisitID(), patientForm.getAptID(),
						patientForm.getPatientID(), patientForm.getStartDate(), null, ActivityStatus.CONSULTATION,
						loginForm.getClinicID());
			}

			// check isDischarge of visit type, if its 1 then only retrieving charges
			// details for billing
			boolean isDischarge = patientDAOInf.verifyIPDDischargeVisitType(loginForm.getVisitTypeID());

			if (isDischarge) {

				// retrieving patient's last new visit ID
				int newVisitID = patientDAOInf.retrieveNewVisitRef(patientForm.getVisitID());

				// verify whether Receipt exists for the current visitID if so then retrieving
				// details from Transaction and receipt table else retrieving details from
				// IPDCharges and OTCharges tbale
				boolean receiptExists = patientDAOInf.verifyVisitExists("Receipt", newVisitID);

				if (receiptExists) {

					String paymentType = patientDAOInf.retrievePaymentType(newVisitID);

					request.setAttribute("paymentType", paymentType);

					billList = patientDAOInf.retrieveVisitBillingByVisitID(newVisitID);

					// retrieving ipd tariff charges list based newVisitID
					IPDBillTariffChargeList = patientDAOInf.retrieveIPDTransactionsByVisitID(newVisitID,
							ActivityStatus.TARIFF);

					// retrieving ipd consultant charges list based newVisitID
					IPDBillConsultantChargeList = patientDAOInf.retrieveIPDTransactionsByVisitID(newVisitID,
							ActivityStatus.CONSULTANT);

					// retrieving OT charges list based on newVisitID
					OTBillChargeList = patientDAOInf.retrieveIPDTransactionsByVisitID(newVisitID, ActivityStatus.OT);

				} else {

					// retrieving ipd tariff charges list based newVisitID
					IPDBillTariffChargeList = patientDAOInf.retrieveIPDChargesDetailsByNewVisitID(newVisitID,
							ActivityStatus.TARIFF);

					// retrieving ipd consultant charges list based newVisitID
					IPDBillConsultantChargeList = patientDAOInf.retrieveIPDChargesDetailsByNewVisitID(newVisitID,
							ActivityStatus.CONSULTANT);

					// retrieving OT charges list based on newVisitID
					OTBillChargeList = patientDAOInf.retrieveOTChargesDetailsByNewVisitID(newVisitID);

					// retrieving receipt details i.e., receipt no receipt date , total amount, net
					// amount, advance paytment, emrgency charges, balance payment
					billList = patientDAOInf.retrieveIPDBillCharges(loginForm.getVisitTypeID(), loginForm.getClinicID(),
							loginForm.getClinicSuffix(), newVisitID);

				}

			}

			request.setAttribute("IPDVisitCheck", "Yes");

			// retrieving room type from Visit table based on visitID
			int roomTypeID = patientDAOInf.retrieveRoomTypeByVisitID(patientForm.getVisitID());

			request.setAttribute("roomTypeID", roomTypeID);

			// retrieving IPD Tariff charge list by visitID
			IPDTariffChargeList = patientDAOInf.retrieveIPDChargesByVisitID(patientForm.getVisitID(),
					ActivityStatus.TARIFF);

			System.out.println("IPDTariffChargeList..." + IPDTariffChargeList.size());

			// retrieving IPD consultant charge list by visitID
			IPDConsultantChargeList = patientDAOInf.retrieveIPDChargesByVisitID(patientForm.getVisitID(),
					ActivityStatus.CONSULTANT);

			// retrieving OT charge list based on visitID
			OTChargeList = patientDAOInf.retrieveOTChargesByVisitID(patientForm.getVisitID());

			String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

			request.setAttribute("medicalCertiText", medicatCertificate);

			String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

			request.setAttribute("referralLetter", referralLetter);

			doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

			// Setting add opd page name value in pageName variable
			setPageName(formNameArray[0].trim());

			return SUCCESS;

		} else {

			addActionError("Failed to add IPD visit. Please check server logs for more details.");

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Add GeneralHospital IPD Visit Exception Occurred",
					loginForm.getUserID());

			patientList = patientDAOInf.retrieveIPDPatientDetails(patientForm.getPatientID(), loginForm.getClinicID(),
					patientForm.getVisitID());

			// retrieving last visitID from Visit table based on patientID and clinicID
			int lastVisitID = patientDAOInf.retrieveLastVisitID(patientForm.getPatientID(), loginForm.getClinicID());

			// retrieving room type from Visit table based on last visitID
			int roomTypeID = patientDAOInf.retrieveRoomTypeByVisitID(lastVisitID);

			request.setAttribute("roomTypeID", roomTypeID);

			// check isDischarge of visit type, if its 1 then only retrieving charges
			// details for billing
			boolean isDischarge = patientDAOInf.verifyIPDDischargeVisitType(loginForm.getVisitTypeID());

			if (isDischarge) {

				// retrieving patient's last new visit ID
				int newVisitID = patientDAOInf.retrieveNewVisitRef(patientForm.getVisitID());

				// verify whether Receipt exists for the current visitID if so then retrieving
				// details from Transaction and receipt table else retrieving details from
				// IPDCharges and OTCharges tbale
				boolean receiptExists = patientDAOInf.verifyVisitExists("Receipt", newVisitID);

				if (receiptExists) {

					String paymentType = patientDAOInf.retrievePaymentType(newVisitID);

					request.setAttribute("paymentType", paymentType);

					billList = patientDAOInf.retrieveVisitBillingByVisitID(newVisitID);

					// retrieving ipd tariff charges list based newVisitID
					IPDBillTariffChargeList = patientDAOInf.retrieveIPDTransactionsByVisitID(newVisitID,
							ActivityStatus.TARIFF);

					// retrieving ipd consultant charges list based newVisitID
					IPDBillConsultantChargeList = patientDAOInf.retrieveIPDTransactionsByVisitID(newVisitID,
							ActivityStatus.CONSULTANT);

					// retrieving OT charges list based on newVisitID
					OTBillChargeList = patientDAOInf.retrieveIPDTransactionsByVisitID(newVisitID, ActivityStatus.OT);

				} else {

					// retrieving ipd tariff charges list based newVisitID
					IPDBillTariffChargeList = patientDAOInf.retrieveIPDChargesDetailsByNewVisitID(newVisitID,
							ActivityStatus.TARIFF);

					// retrieving ipd consultant charges list based newVisitID
					IPDBillConsultantChargeList = patientDAOInf.retrieveIPDChargesDetailsByNewVisitID(newVisitID,
							ActivityStatus.CONSULTANT);

					// retrieving OT charges list based on newVisitID
					OTBillChargeList = patientDAOInf.retrieveOTChargesDetailsByNewVisitID(newVisitID);

					// retrieving receipt details i.e., receipt no receipt date , total amount, net
					// amount, advance paytment, emrgency charges, balance payment
					billList = patientDAOInf.retrieveIPDBillCharges(loginForm.getVisitTypeID(), loginForm.getClinicID(),
							loginForm.getClinicSuffix(), newVisitID);

				}

			}

			// retrieving IPD Tariff charge list by visitID
			IPDTariffChargeList = patientDAOInf.retrieveIPDChargesByVisitID(patientForm.getVisitID(),
					ActivityStatus.TARIFF);

			// retrieving IPD consultant charge list by visitID
			IPDConsultantChargeList = patientDAOInf.retrieveIPDChargesByVisitID(patientForm.getVisitID(),
					ActivityStatus.CONSULTANT);

			// retrieving OT charge list based on visitID
			OTChargeList = patientDAOInf.retrieveOTChargesByVisitID(patientForm.getVisitID());

			String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

			request.setAttribute("medicalCertiText", medicatCertificate);

			String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

			request.setAttribute("referralLetter", referralLetter);

			doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

			// Setting add opd page name value in pageName variable
			setPageName(formNameArray[0].trim());

			return ERROR;

		}

	}

	public String editGeneralHospitalAddIPDBill() throws Exception {

		patientDAOInf = new PatientDAOImpl();

		serviceInf = new eDhanvantariServiceImpl();

		LoginDAOInf daoInf = new LoginDAOImpl();

		String accessKey = xmlUtil.getAccessKey();

		String secreteKey = xmlUtil.getSecreteKey();

		AWSS3Connect awss3Connect = new AWSS3Connect();

		// getting input file location from S3 bucket
		String s3reportFilePath = xmlUtil.getS3RDMLReportFilePath();

		// getting s3 bucket name
		String bucketName = util.getS3BucketName();

		// getting s3 bucket region
		String bucketRegion = xmlUtil.getS3BucketRegion();

		String s3LogoFilePath = xmlUtil.getS3RDMLFilePath();

		AWSCredentials credentials = new BasicAWSCredentials(accessKey, secreteKey);

		AmazonS3 s3 = AmazonS3ClientBuilder.standard().withCredentials(new AWSStaticCredentialsProvider(credentials))
				.withRegion(bucketRegion).build();

		/*
		 * Getting clinicID from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");

		request.setAttribute("apptID", patientForm.getAptID());

		request.setAttribute("saveVisitcheck", "Saved");

		patientForm.setClinicID(loginForm.getClinicID());
		patientForm.setUserID(loginForm.getUserID());
		patientForm.setPracticeID(loginForm.getPracticeID());
		patientForm.setVisitTypeID(loginForm.getVisitTypeID());
		patientForm.setClinicSuffix(loginForm.getClinicSuffix());

		String billingTabCheck = "enable";
		request.setAttribute("billingTabCheck", billingTabCheck);

		/*
		 * Getting form name to be display based on logged in User
		 */
		String[] formNameArray = loginForm.getOPDJSPName().split("&");

		message = serviceInf.addGeneralHospitalIPDBill(patientForm);

		orthoBillItemList = patientDAOInf.retrieveOrthoBillingItemList(patientForm.getVisitID());

		if (message.equals("success")) {

			ConvertToPDFUtil convertToPDFUtil = new ConvertToPDFUtil();

			HttpServletRequest request = ServletActionContext.getRequest();
			ServletContext context = request.getServletContext();

			// retrieving patient's last new visit ID
			int newVisitID = patientForm.getVisitID();

			billList = patientDAOInf.retrieveVisitBillingByVisitID(newVisitID);

			String realPath = context.getRealPath("/");
			System.out.println("Real path is :: " + realPath);

			// String pdfOutFIleName = reportFilePath + patientForm.getFirstName() +
			// patientForm.getLastName()
			String pdfOutFIleName = patientForm.getFirstName() + patientForm.getLastName() + patientForm.getPatientID()
					+ "_" + patientForm.getVisitID() + "IPD_b.pdf";

			message = convertToPDFUtil.convertIPDBillPDF(patientForm.getPatientID(), newVisitID, realPath,
					pdfOutFIleName, loginForm.getClinicID(), loginForm.getVisitTypeID(), loginForm.getClinicSuffix(),
					billList, loginForm.getFullName(), s3, s3LogoFilePath, bucketName);

			if (message.equals("success")) {

				addActionMessage("IPD Bill updated successfully");

				File inputFile = new File(realPath + "/" + pdfOutFIleName);

				// Storing file to S3 RDML INPUT FILE location
				message = awss3Connect.pushFile(inputFile, pdfOutFIleName, bucketName, bucketRegion, s3reportFilePath);

				S3ObjectInputStream s3ObjectInputStream = s3
						.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, pdfOutFIleName))
						.getObjectContent();

				patientForm.setFileInputStream(s3ObjectInputStream);

				patientForm.setFileName(pdfOutFIleName);

				request.setAttribute("PDFOutFileName", pdfOutFIleName);

				billList = patientDAOInf.retrieveVisitBillingByVisitID(newVisitID);
				/*
				 * Update appointment status to Consultation
				 */
				patientDAOInf.updateBillingAppointmentStatus(patientForm.getPatientID(), patientForm.getAptID());

				patientList = patientDAOInf.retrieveIPDPatientDetails(patientForm.getPatientID(),
						loginForm.getClinicID(), patientForm.getVisitID());

				// inserting new record for the patient into VisitStatus table for status Booked
				if (patientForm.getStartDate() == null || patientForm.getStartDate().equals("NA")) {
					System.out.println("start date not found.");
				} else {
					patientDAOInf.insertVisitStatus(patientForm.getVisitID(), patientForm.getAptID(),
							patientForm.getPatientID(), patientForm.getStartDate(), null, ActivityStatus.BILLING,
							loginForm.getClinicID());
				}

				// retrieving room type from Visit table based on visitID
				int roomTypeID = patientDAOInf.retrieveRoomTypeByVisitID(patientForm.getVisitID());

				request.setAttribute("roomTypeID", roomTypeID);

				// retrieving IPD Tariff charge list by visitID
				IPDTariffChargeList = patientDAOInf.retrieveIPDChargesByVisitID(patientForm.getVisitID(),
						ActivityStatus.TARIFF);

				// retrieving IPD consultant charge list by visitID
				IPDConsultantChargeList = patientDAOInf.retrieveIPDChargesByVisitID(patientForm.getVisitID(),
						ActivityStatus.CONSULTANT);

				// retrieving OT charge list based on visitID
				OTChargeList = patientDAOInf.retrieveOTChargesByVisitID(patientForm.getVisitID());

				System.out.println("...newVisitID.." + newVisitID);

				String paymentType = patientDAOInf.retrievePaymentType(newVisitID);

				request.setAttribute("paymentType", paymentType);

				// retrieving ipd tariff charges list based newVisitID
				IPDBillTariffChargeList = patientDAOInf.retrieveIPDTransactionsByVisitID(newVisitID,
						ActivityStatus.TARIFF);

				// retrieving ipd consultant charges list based newVisitID
				IPDBillConsultantChargeList = patientDAOInf.retrieveIPDTransactionsByVisitID(newVisitID,
						ActivityStatus.CONSULTANT);

				// retrieving OT charges list based on newVisitID
				OTBillChargeList = patientDAOInf.retrieveIPDTransactionsByVisitID(newVisitID, ActivityStatus.OT);

				String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

				request.setAttribute("medicalCertiText", medicatCertificate);

				String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

				request.setAttribute("referralLetter", referralLetter);

				doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

				// Inserting values into Audit table
				daoInf.insertAudit(request.getRemoteAddr(), "Edit GeneralHospital IPD Bill", loginForm.getUserID());

				// Setting add opd page name value in pageName variable
				setPageName(formNameArray[0].trim());

				return SUCCESS;

			} else {

				addActionError("Failed to generate IPD bill PDF. Please check server logs for more details.");

				/*
				 * Update appointment status to Consultation
				 */
				patientDAOInf.updateBillingAppointmentStatus(patientForm.getPatientID(), patientForm.getAptID());

				patientList = patientDAOInf.retrieveIPDPatientDetails(patientForm.getPatientID(),
						loginForm.getClinicID(), patientForm.getVisitID());

				// inserting new record for the patient into VisitStatus table for status Booked
				if (patientForm.getStartDate() == null || patientForm.getStartDate().equals("NA")) {
					System.out.println("start date not found.");
				} else {
					patientDAOInf.insertVisitStatus(patientForm.getVisitID(), patientForm.getAptID(),
							patientForm.getPatientID(), patientForm.getStartDate(), null, ActivityStatus.BILLING,
							loginForm.getClinicID());
				}

				// retrieving room type from Visit table based on visitID
				int roomTypeID = patientDAOInf.retrieveRoomTypeByVisitID(patientForm.getVisitID());

				request.setAttribute("roomTypeID", roomTypeID);

				// retrieving IPD Tariff charge list by visitID
				IPDTariffChargeList = patientDAOInf.retrieveIPDChargesByVisitID(patientForm.getVisitID(),
						ActivityStatus.TARIFF);

				// retrieving IPD consultant charge list by visitID
				IPDConsultantChargeList = patientDAOInf.retrieveIPDChargesByVisitID(patientForm.getVisitID(),
						ActivityStatus.CONSULTANT);

				// retrieving OT charge list based on visitID
				OTChargeList = patientDAOInf.retrieveOTChargesByVisitID(patientForm.getVisitID());

				System.out.println("...newVisitID.." + newVisitID);

				String paymentType = patientDAOInf.retrievePaymentType(newVisitID);

				request.setAttribute("paymentType", paymentType);

				billList = patientDAOInf.retrieveVisitBillingByVisitID(newVisitID);

				// retrieving ipd tariff charges list based newVisitID
				IPDBillTariffChargeList = patientDAOInf.retrieveIPDTransactionsByVisitID(newVisitID,
						ActivityStatus.TARIFF);

				// retrieving ipd consultant charges list based newVisitID
				IPDBillConsultantChargeList = patientDAOInf.retrieveIPDTransactionsByVisitID(newVisitID,
						ActivityStatus.CONSULTANT);

				// retrieving OT charges list based on newVisitID
				OTBillChargeList = patientDAOInf.retrieveIPDTransactionsByVisitID(newVisitID, ActivityStatus.OT);

				String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

				request.setAttribute("medicalCertiText", medicatCertificate);

				String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

				request.setAttribute("referralLetter", referralLetter);

				doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

				// Inserting values into Audit table
				daoInf.insertAudit(request.getRemoteAddr(), "Edit GeneralHospital IPD Bill PDF Exception Occurred",
						loginForm.getUserID());

				// Setting add opd page name value in pageName variable
				setPageName(formNameArray[0].trim());

				return ERROR;

			}

		} else if (message.equals("noVisit")) {

			addActionError("No visit added. Please add visit first.");

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Edit GeneralHospital IPD Bill Exception Occurred",
					loginForm.getUserID());

			/*
			 * Update appointment status to Consultation
			 */
			patientDAOInf.updateBillingAppointmentStatus(patientForm.getPatientID(), patientForm.getAptID());

			patientList = patientDAOInf.retrieveIPDPatientDetails(patientForm.getPatientID(), loginForm.getClinicID(),
					patientForm.getVisitID());

			// inserting new record for the patient into VisitStatus table for status Booked
			if (patientForm.getStartDate() == null || patientForm.getStartDate().equals("NA")) {
				System.out.println("start date not found.");
			} else {
				patientDAOInf.insertVisitStatus(patientForm.getVisitID(), patientForm.getAptID(),
						patientForm.getPatientID(), patientForm.getStartDate(), null, ActivityStatus.BILLING,
						loginForm.getClinicID());
			}

			// retrieving room type from Visit table based on visitID
			int roomTypeID = patientDAOInf.retrieveRoomTypeByVisitID(patientForm.getVisitID());

			request.setAttribute("roomTypeID", roomTypeID);

			// retrieving IPD Tariff charge list by visitID
			IPDTariffChargeList = patientDAOInf.retrieveIPDChargesByVisitID(patientForm.getVisitID(),
					ActivityStatus.TARIFF);

			// retrieving IPD consultant charge list by visitID
			IPDConsultantChargeList = patientDAOInf.retrieveIPDChargesByVisitID(patientForm.getVisitID(),
					ActivityStatus.CONSULTANT);

			// retrieving OT charge list based on visitID
			OTChargeList = patientDAOInf.retrieveOTChargesByVisitID(patientForm.getVisitID());

			// retrieving patient's last new visit ID
			int newVisitID = patientForm.getVisitID();

			// verify whether Receipt exists for the current visitID if so then retrieving
			// details from Transaction and receipt table else retrieving details from
			// IPDCharges and OTCharges tbale
			boolean receiptExists = patientDAOInf.verifyVisitExists("Receipt", newVisitID);

			if (receiptExists) {

				billList = patientDAOInf.retrieveVisitBillingByVisitID(newVisitID);

				// retrieving ipd tariff charges list based newVisitID
				IPDBillTariffChargeList = patientDAOInf.retrieveIPDTransactionsByVisitID(newVisitID,
						ActivityStatus.TARIFF);

				// retrieving ipd consultant charges list based newVisitID
				IPDBillConsultantChargeList = patientDAOInf.retrieveIPDTransactionsByVisitID(newVisitID,
						ActivityStatus.CONSULTANT);

				// retrieving OT charges list based on newVisitID
				OTBillChargeList = patientDAOInf.retrieveIPDTransactionsByVisitID(newVisitID, ActivityStatus.OT);

			} else {

				// retrieving ipd tariff charges list based newVisitID
				IPDBillTariffChargeList = patientDAOInf.retrieveIPDChargesDetailsByNewVisitID(newVisitID,
						ActivityStatus.TARIFF);

				// retrieving ipd consultant charges list based newVisitID
				IPDBillConsultantChargeList = patientDAOInf.retrieveIPDChargesDetailsByNewVisitID(newVisitID,
						ActivityStatus.CONSULTANT);

				// retrieving OT charges list based on newVisitID
				OTBillChargeList = patientDAOInf.retrieveOTChargesDetailsByNewVisitID(newVisitID);

				// retrieving receipt details i.e., receipt no receipt date , total amount, net
				// amount, advance paytment, emrgency charges, balance payment
				billList = patientDAOInf.retrieveIPDBillCharges(loginForm.getVisitTypeID(), loginForm.getClinicID(),
						loginForm.getClinicSuffix(), newVisitID);

			}

			String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

			request.setAttribute("medicalCertiText", medicatCertificate);

			String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

			request.setAttribute("referralLetter", referralLetter);

			doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

			// Setting add opd page name value in pageName variable
			setPageName(formNameArray[0].trim());

			return ERROR;

		} else {

			addActionError("Failed to update IPD bill. Please check server logs for more details");

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Edit GeneralHospital IPD Bill Exception Occurred",
					loginForm.getUserID());

			/*
			 * Update appointment status to Consultation
			 */
			patientDAOInf.updateBillingAppointmentStatus(patientForm.getPatientID(), patientForm.getAptID());

			patientList = patientDAOInf.retrieveIPDPatientDetails(patientForm.getPatientID(), loginForm.getClinicID(),
					patientForm.getVisitID());

			// inserting new record for the patient into VisitStatus table for status Booked
			if (patientForm.getStartDate() == null || patientForm.getStartDate().equals("NA")) {
				System.out.println("start date not found.");
			} else {
				patientDAOInf.insertVisitStatus(patientForm.getVisitID(), patientForm.getAptID(),
						patientForm.getPatientID(), patientForm.getStartDate(), null, ActivityStatus.BILLING,
						loginForm.getClinicID());
			}

			// retrieving room type from Visit table based on visitID
			int roomTypeID = patientDAOInf.retrieveRoomTypeByVisitID(patientForm.getVisitID());

			request.setAttribute("roomTypeID", roomTypeID);

			// retrieving IPD Tariff charge list by visitID
			IPDTariffChargeList = patientDAOInf.retrieveIPDChargesByVisitID(patientForm.getVisitID(),
					ActivityStatus.TARIFF);

			// retrieving IPD consultant charge list by visitID
			IPDConsultantChargeList = patientDAOInf.retrieveIPDChargesByVisitID(patientForm.getVisitID(),
					ActivityStatus.CONSULTANT);

			// retrieving OT charge list based on visitID
			OTChargeList = patientDAOInf.retrieveOTChargesByVisitID(patientForm.getVisitID());

			// retrieving patient's last new visit ID
			int newVisitID = patientForm.getVisitID();

			// verify whether Receipt exists for the current visitID if so then retrieving
			// details from Transaction and receipt table else retrieving details from
			// IPDCharges and OTCharges tbale
			boolean receiptExists = patientDAOInf.verifyVisitExists("Receipt", newVisitID);

			if (receiptExists) {

				billList = patientDAOInf.retrieveVisitBillingByVisitID(newVisitID);

				// retrieving ipd tariff charges list based newVisitID
				IPDBillTariffChargeList = patientDAOInf.retrieveIPDTransactionsByVisitID(newVisitID,
						ActivityStatus.TARIFF);

				// retrieving ipd consultant charges list based newVisitID
				IPDBillConsultantChargeList = patientDAOInf.retrieveIPDTransactionsByVisitID(newVisitID,
						ActivityStatus.CONSULTANT);

				// retrieving OT charges list based on newVisitID
				OTBillChargeList = patientDAOInf.retrieveIPDTransactionsByVisitID(newVisitID, ActivityStatus.OT);

			} else {

				// retrieving ipd tariff charges list based newVisitID
				IPDBillTariffChargeList = patientDAOInf.retrieveIPDChargesDetailsByNewVisitID(newVisitID,
						ActivityStatus.TARIFF);

				// retrieving ipd consultant charges list based newVisitID
				IPDBillConsultantChargeList = patientDAOInf.retrieveIPDChargesDetailsByNewVisitID(newVisitID,
						ActivityStatus.CONSULTANT);

				// retrieving OT charges list based on newVisitID
				OTBillChargeList = patientDAOInf.retrieveOTChargesDetailsByNewVisitID(newVisitID);

				// retrieving receipt details i.e., receipt no receipt date , total amount, net
				// amount, advance paytment, emrgency charges, balance payment
				billList = patientDAOInf.retrieveIPDBillCharges(loginForm.getVisitTypeID(), loginForm.getClinicID(),
						loginForm.getClinicSuffix(), newVisitID);

			}

			String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

			request.setAttribute("medicalCertiText", medicatCertificate);

			String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

			request.setAttribute("referralLetter", referralLetter);

			doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

			// Setting add opd page name value in pageName variable
			setPageName(formNameArray[0].trim());

			return ERROR;

		}

	}

	public String addNewIPDBill() throws Exception {

		if (patientForm.getAddButton().startsWith(",")) {
			patientForm.getAddButton().substring(1);
		}

		System.out.println("addbutton val:" + patientForm.getAddButton());
		if (patientForm.getAddButton().equals("save")) {
			System.out.println("inside add button = save");
			editGeneralHospitalAddIPDBill();
		} else {

			patientDAOInf = new PatientDAOImpl();

			serviceInf = new eDhanvantariServiceImpl();

			LoginDAOInf daoInf = new LoginDAOImpl();

			String accessKey = xmlUtil.getAccessKey();

			String secreteKey = xmlUtil.getSecreteKey();

			AWSS3Connect awss3Connect = new AWSS3Connect();

			// getting input file location from S3 bucket
			String s3reportFilePath = xmlUtil.getS3RDMLReportFilePath();

			// getting s3 bucket name
			String bucketName = util.getS3BucketName();

			// getting s3 bucket region
			String bucketRegion = xmlUtil.getS3BucketRegion();

			String s3LogoFilePath = xmlUtil.getS3RDMLFilePath();

			AWSCredentials credentials = new BasicAWSCredentials(accessKey, secreteKey);

			AmazonS3 s3 = AmazonS3ClientBuilder.standard()
					.withCredentials(new AWSStaticCredentialsProvider(credentials)).withRegion(bucketRegion).build();

			/*
			 * Getting clinicID from session
			 */
			LoginForm loginForm = (LoginForm) session.get("USER");

			request.setAttribute("apptID", patientForm.getAptID());

			request.setAttribute("saveVisitcheck", "Saved");

			patientForm.setClinicID(loginForm.getClinicID());
			patientForm.setUserID(loginForm.getUserID());
			patientForm.setPracticeID(loginForm.getPracticeID());
			patientForm.setVisitTypeID(loginForm.getVisitTypeID());
			patientForm.setClinicSuffix(loginForm.getClinicSuffix());

			String billingTabCheck = "enable";
			request.setAttribute("billingTabCheck", billingTabCheck);

			request.setAttribute("IPDVisitCheck", "Yes");

			/*
			 * Getting form name to be display based on logged in User
			 */
			String[] formNameArray = loginForm.getOPDJSPName().split("&");

			message = serviceInf.addGeneralHospitalIPDBill(patientForm);

			if (message.equals("success")) {

				ConvertToPDFUtil convertToPDFUtil = new ConvertToPDFUtil();

				HttpServletRequest request = ServletActionContext.getRequest();
				ServletContext context = request.getServletContext();

				// retrieving patient's last new visit ID
				int newVisitID = patientForm.getVisitID();

				billList = patientDAOInf.retrieveVisitBillingByVisitID(newVisitID);

				String realPath = context.getRealPath("/");
				System.out.println("Real path is :: " + realPath);

				String pdfOutFIleName = patientForm.getFirstName() + patientForm.getLastName()
						+ patientForm.getPatientID() + "_" + patientForm.getVisitID() + "IPD_b.pdf";

				message = convertToPDFUtil.convertIPDBillPDF(patientForm.getPatientID(), newVisitID, realPath,
						pdfOutFIleName, loginForm.getClinicID(), loginForm.getVisitTypeID(),
						loginForm.getClinicSuffix(), billList, loginForm.getFullName(), s3, s3LogoFilePath, bucketName);

				if (message.equals("success")) {

					addActionMessage("IPD Bill added successfully");

					File inputFile = new File(realPath + "/" + pdfOutFIleName);

					// Storing file to S3 RDML INPUT FILE location
					message = awss3Connect.pushFile(inputFile, pdfOutFIleName, bucketName, bucketRegion,
							s3reportFilePath);

					S3ObjectInputStream s3ObjectInputStream = s3
							.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, pdfOutFIleName))
							.getObjectContent();

					patientForm.setFileInputStream(s3ObjectInputStream);

					patientForm.setFileName(pdfOutFIleName);

					request.setAttribute("PDFOutFileName", pdfOutFIleName);

					billList = patientDAOInf.retrieveVisitBillingByVisitID(newVisitID);

					request.setAttribute("IPDBillCheck", "Yes");

					/*
					 * Update appointment status to Consultation
					 */
					patientDAOInf.updateBillingAppointmentStatus(patientForm.getPatientID(), patientForm.getAptID());

					patientList = patientDAOInf.retrieveIPDPatientDetails(patientForm.getPatientID(),
							loginForm.getClinicID(), patientForm.getVisitID());

					// inserting new record for the patient into VisitStatus table for status Booked
					if (patientForm.getStartDate() == null || patientForm.getStartDate().equals("NA")) {
						System.out.println("start date not found.");
					} else {
						patientDAOInf.insertVisitStatus(patientForm.getVisitID(), patientForm.getAptID(),
								patientForm.getPatientID(), patientForm.getStartDate(), null, ActivityStatus.BILLING,
								loginForm.getClinicID());
					}

					// retrieving room type from Visit table based on visitID
					int roomTypeID = patientDAOInf.retrieveRoomTypeByVisitID(patientForm.getVisitID());

					request.setAttribute("roomTypeID", roomTypeID);

					// retrieving IPD Tariff charge list by visitID
					IPDTariffChargeList = patientDAOInf.retrieveIPDChargesByVisitID(patientForm.getVisitID(),
							ActivityStatus.TARIFF);

					// retrieving IPD consultant charge list by visitID
					IPDConsultantChargeList = patientDAOInf.retrieveIPDChargesByVisitID(patientForm.getVisitID(),
							ActivityStatus.CONSULTANT);

					// retrieving OT charge list based on visitID
					OTChargeList = patientDAOInf.retrieveOTChargesByVisitID(patientForm.getVisitID());

					String paymentType = patientDAOInf.retrievePaymentType(newVisitID);

					request.setAttribute("paymentType", paymentType);

					// retrieving ipd tariff charges list based newVisitID
					IPDBillTariffChargeList = patientDAOInf.retrieveIPDTransactionsByVisitID(newVisitID,
							ActivityStatus.TARIFF);

					// retrieving ipd consultant charges list based newVisitID
					IPDBillConsultantChargeList = patientDAOInf.retrieveIPDTransactionsByVisitID(newVisitID,
							ActivityStatus.CONSULTANT);

					// retrieving OT charges list based on newVisitID
					OTBillChargeList = patientDAOInf.retrieveIPDTransactionsByVisitID(newVisitID, ActivityStatus.OT);

					String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

					request.setAttribute("medicalCertiText", medicatCertificate);

					String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

					request.setAttribute("referralLetter", referralLetter);

					doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

					// Inserting values into Audit table
					daoInf.insertAudit(request.getRemoteAddr(), "Add GeneralHospital IPD Bill", loginForm.getUserID());

					// Setting add opd page name value in pageName variable
					setPageName(formNameArray[0].trim());

					return SUCCESS;

				} else {

					addActionError("Failed to generate IPD bill PDF. Please check server logs for more details.");

					/*
					 * Update appointment status to Consultation
					 */
					patientDAOInf.updateBillingAppointmentStatus(patientForm.getPatientID(), patientForm.getAptID());

					patientList = patientDAOInf.retrieveIPDPatientDetails(patientForm.getPatientID(),
							loginForm.getClinicID(), patientForm.getVisitID());

					// inserting new record for the patient into VisitStatus table for status Booked
					if (patientForm.getStartDate() == null || patientForm.getStartDate().equals("NA")) {
						System.out.println("start date not found.");
					} else {
						patientDAOInf.insertVisitStatus(patientForm.getVisitID(), patientForm.getAptID(),
								patientForm.getPatientID(), patientForm.getStartDate(), null, ActivityStatus.BILLING,
								loginForm.getClinicID());
					}

					// retrieving room type from Visit table based on visitID
					int roomTypeID = patientDAOInf.retrieveRoomTypeByVisitID(patientForm.getVisitID());

					request.setAttribute("roomTypeID", roomTypeID);

					// retrieving IPD Tariff charge list by visitID
					IPDTariffChargeList = patientDAOInf.retrieveIPDChargesByVisitID(patientForm.getVisitID(),
							ActivityStatus.TARIFF);

					// retrieving IPD consultant charge list by visitID
					IPDConsultantChargeList = patientDAOInf.retrieveIPDChargesByVisitID(patientForm.getVisitID(),
							ActivityStatus.CONSULTANT);

					// retrieving OT charge list based on visitID
					OTChargeList = patientDAOInf.retrieveOTChargesByVisitID(patientForm.getVisitID());

					String paymentType = patientDAOInf.retrievePaymentType(newVisitID);

					request.setAttribute("paymentType", paymentType);

					billList = patientDAOInf.retrieveVisitBillingByVisitID(newVisitID);

					// retrieving ipd tariff charges list based newVisitID
					IPDBillTariffChargeList = patientDAOInf.retrieveIPDTransactionsByVisitID(newVisitID,
							ActivityStatus.TARIFF);

					// retrieving ipd consultant charges list based newVisitID
					IPDBillConsultantChargeList = patientDAOInf.retrieveIPDTransactionsByVisitID(newVisitID,
							ActivityStatus.CONSULTANT);

					// retrieving OT charges list based on newVisitID
					OTBillChargeList = patientDAOInf.retrieveIPDTransactionsByVisitID(newVisitID, ActivityStatus.OT);

					String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

					request.setAttribute("medicalCertiText", medicatCertificate);

					String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

					request.setAttribute("referralLetter", referralLetter);

					doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

					// Inserting values into Audit table
					daoInf.insertAudit(request.getRemoteAddr(), "Add GeneralHospital IPD Bill PDF Exception Occurred",
							loginForm.getUserID());

					// Setting add opd page name value in pageName variable
					setPageName(formNameArray[0].trim());

					return ERROR;

				}

			} else if (message.equals("noVisit")) {

				addActionError("No visit added. Please add visit first.");

				// Inserting values into Audit table
				daoInf.insertAudit(request.getRemoteAddr(), "Add GeneralHospital IPD Bill Exception Occurred",
						loginForm.getUserID());

				/*
				 * Update appointment status to Consultation
				 */
				patientDAOInf.updateBillingAppointmentStatus(patientForm.getPatientID(), patientForm.getAptID());

				patientList = patientDAOInf.retrieveIPDPatientDetails(patientForm.getPatientID(),
						loginForm.getClinicID(), patientForm.getVisitID());

				// inserting new record for the patient into VisitStatus table for status Booked
				if (patientForm.getStartDate() == null || patientForm.getStartDate().equals("NA")) {
					System.out.println("start date not found.");
				} else {
					patientDAOInf.insertVisitStatus(patientForm.getVisitID(), patientForm.getAptID(),
							patientForm.getPatientID(), patientForm.getStartDate(), null, ActivityStatus.BILLING,
							loginForm.getClinicID());
				}

				// retrieving room type from Visit table based on visitID
				int roomTypeID = patientDAOInf.retrieveRoomTypeByVisitID(patientForm.getVisitID());

				request.setAttribute("roomTypeID", roomTypeID);

				// retrieving IPD Tariff charge list by visitID
				IPDTariffChargeList = patientDAOInf.retrieveIPDChargesByVisitID(patientForm.getVisitID(),
						ActivityStatus.TARIFF);

				// retrieving IPD consultant charge list by visitID
				IPDConsultantChargeList = patientDAOInf.retrieveIPDChargesByVisitID(patientForm.getVisitID(),
						ActivityStatus.CONSULTANT);

				// retrieving OT charge list based on visitID
				OTChargeList = patientDAOInf.retrieveOTChargesByVisitID(patientForm.getVisitID());

				// retrieving patient's last new visit ID
				int newVisitID = patientForm.getVisitID();

				// verify whether Receipt exists for the current visitID if so then retrieving
				// details from Transaction and receipt table else retrieving details from
				// IPDCharges and OTCharges tbale
				boolean receiptExists = patientDAOInf.verifyVisitExists("Receipt", newVisitID);

				if (receiptExists) {

					billList = patientDAOInf.retrieveVisitBillingByVisitID(newVisitID);

					// retrieving ipd tariff charges list based newVisitID
					IPDBillTariffChargeList = patientDAOInf.retrieveIPDTransactionsByVisitID(newVisitID,
							ActivityStatus.TARIFF);

					// retrieving ipd consultant charges list based newVisitID
					IPDBillConsultantChargeList = patientDAOInf.retrieveIPDTransactionsByVisitID(newVisitID,
							ActivityStatus.CONSULTANT);

					// retrieving OT charges list based on newVisitID
					OTBillChargeList = patientDAOInf.retrieveIPDTransactionsByVisitID(newVisitID, ActivityStatus.OT);

				} else {

					// retrieving ipd tariff charges list based newVisitID
					IPDBillTariffChargeList = patientDAOInf.retrieveIPDChargesDetailsByNewVisitID(newVisitID,
							ActivityStatus.TARIFF);

					// retrieving ipd consultant charges list based newVisitID
					IPDBillConsultantChargeList = patientDAOInf.retrieveIPDChargesDetailsByNewVisitID(newVisitID,
							ActivityStatus.CONSULTANT);

					// retrieving OT charges list based on newVisitID
					OTBillChargeList = patientDAOInf.retrieveOTChargesDetailsByNewVisitID(newVisitID);

					// retrieving receipt details i.e., receipt no receipt date , total amount, net
					// amount, advance paytment, emrgency charges, balance payment
					billList = patientDAOInf.retrieveIPDBillCharges(loginForm.getVisitTypeID(), loginForm.getClinicID(),
							loginForm.getClinicSuffix(), newVisitID);

				}

				String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

				request.setAttribute("medicalCertiText", medicatCertificate);

				String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

				request.setAttribute("referralLetter", referralLetter);

				doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

				// Setting add opd page name value in pageName variable
				setPageName(formNameArray[0].trim());

				return ERROR;

			} else {

				addActionError("Failed to add IPD bill. Please check server logs for more details");

				// Inserting values into Audit table
				daoInf.insertAudit(request.getRemoteAddr(), "Add GeneralHospital IPD Bill Exception Occurred",
						loginForm.getUserID());

				/*
				 * Update appointment status to Consultation
				 */
				patientDAOInf.updateBillingAppointmentStatus(patientForm.getPatientID(), patientForm.getAptID());

				patientList = patientDAOInf.retrieveIPDPatientDetails(patientForm.getPatientID(),
						loginForm.getClinicID(), patientForm.getVisitID());

				// inserting new record for the patient into VisitStatus table for status Booked
				if (patientForm.getStartDate() == null || patientForm.getStartDate().equals("NA")) {
					System.out.println("start date not found.");
				} else {
					patientDAOInf.insertVisitStatus(patientForm.getVisitID(), patientForm.getAptID(),
							patientForm.getPatientID(), patientForm.getStartDate(), null, ActivityStatus.BILLING,
							loginForm.getClinicID());
				}

				// retrieving room type from Visit table based on visitID
				int roomTypeID = patientDAOInf.retrieveRoomTypeByVisitID(patientForm.getVisitID());

				request.setAttribute("roomTypeID", roomTypeID);

				// retrieving IPD Tariff charge list by visitID
				IPDTariffChargeList = patientDAOInf.retrieveIPDChargesByVisitID(patientForm.getVisitID(),
						ActivityStatus.TARIFF);

				// retrieving IPD consultant charge list by visitID
				IPDConsultantChargeList = patientDAOInf.retrieveIPDChargesByVisitID(patientForm.getVisitID(),
						ActivityStatus.CONSULTANT);

				// retrieving OT charge list based on visitID
				OTChargeList = patientDAOInf.retrieveOTChargesByVisitID(patientForm.getVisitID());

				// retrieving patient's last new visit ID
				int newVisitID = patientForm.getVisitID();

				// verify whether Receipt exists for the current visitID if so then retrieving
				// details from Transaction and receipt table else retrieving details from
				// IPDCharges and OTCharges tbale
				boolean receiptExists = patientDAOInf.verifyVisitExists("Receipt", newVisitID);

				if (receiptExists) {

					billList = patientDAOInf.retrieveVisitBillingByVisitID(newVisitID);

					// retrieving ipd tariff charges list based newVisitID
					IPDBillTariffChargeList = patientDAOInf.retrieveIPDTransactionsByVisitID(newVisitID,
							ActivityStatus.TARIFF);

					// retrieving ipd consultant charges list based newVisitID
					IPDBillConsultantChargeList = patientDAOInf.retrieveIPDTransactionsByVisitID(newVisitID,
							ActivityStatus.CONSULTANT);

					// retrieving OT charges list based on newVisitID
					OTBillChargeList = patientDAOInf.retrieveIPDTransactionsByVisitID(newVisitID, ActivityStatus.OT);

				} else {

					// retrieving ipd tariff charges list based newVisitID
					IPDBillTariffChargeList = patientDAOInf.retrieveIPDChargesDetailsByNewVisitID(newVisitID,
							ActivityStatus.TARIFF);

					// retrieving ipd consultant charges list based newVisitID
					IPDBillConsultantChargeList = patientDAOInf.retrieveIPDChargesDetailsByNewVisitID(newVisitID,
							ActivityStatus.CONSULTANT);

					// retrieving OT charges list based on newVisitID
					OTBillChargeList = patientDAOInf.retrieveOTChargesDetailsByNewVisitID(newVisitID);

					// retrieving receipt details i.e., receipt no receipt date , total amount, net
					// amount, advance paytment, emrgency charges, balance payment
					billList = patientDAOInf.retrieveIPDBillCharges(loginForm.getVisitTypeID(), loginForm.getClinicID(),
							loginForm.getClinicSuffix(), newVisitID);

				}

				String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

				request.setAttribute("medicalCertiText", medicatCertificate);

				String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

				request.setAttribute("referralLetter", referralLetter);

				doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

				// Setting add opd page name value in pageName variable
				setPageName(formNameArray[0].trim());

				return ERROR;

			}
		}
		return SUCCESS;
	}

	public void retrieveIPDTarrifRate() throws Exception {

		response.setContentType("application/json");

		patientDAOInf = new PatientDAOImpl();

		HashMap<String, Object> finalMap = patientDAOInf.retrieveIPDTarrifDetailsByID(patientForm.getTarrifChargeID());

		response.getWriter().write(new Gson().toJson(finalMap));
	}

	/**
	 * 
	 * @throws Exception
	 */
	public void retrieveIPDConsultantRate() throws Exception {

		response.setContentType("application/json");

		patientDAOInf = new PatientDAOImpl();

		HashMap<String, Object> finalMap = patientDAOInf
				.retrieveIPDConsultantDetailsByID(patientForm.getConsultantChargeID());

		response.getWriter().write(new Gson().toJson(finalMap));
	}

	public void retrieveIPDListsByRoomType() throws Exception {

		response.setContentType("application/json");

		patientDAOInf = new PatientDAOImpl();

		ConfigurationUtil configurationUtil = new ConfigurationUtil();

		HashMap<Integer, String> tariffChargeMap = patientDAOInf.retrieveIPDTarrifChargesList(ActivityStatus.ACTIVE,
				patientForm.getRoomTypeID());

		// sorting tariffChargeMap by value in order to display values alphabetically
		LinkedHashMap<Integer, String> sortedTariffChargeMap = configurationUtil.sortHashMapByValue1(tariffChargeMap);

		HashMap<Integer, String> consultantChargeMap = patientDAOInf
				.retrieveIPDConsultantChargesList(ActivityStatus.ACTIVE, patientForm.getRoomTypeID());

		// sorting consultantChargeMap by value in order to display values
		// alphabetically
		LinkedHashMap<Integer, String> sortedConsultantChargeMap = configurationUtil
				.sortHashMapByValue1(consultantChargeMap);

		HashMap<String, String> finalMap = new HashMap<String, String>();

		String tarrifSelectTag = "<select name='' id='tariffItemID' onchange='retrieveIPDTariffRate(this.value);' class='form-control'><option value=''>Select Item</option>";
		for (Integer tariffChargeID : sortedTariffChargeMap.keySet()) {
			tarrifSelectTag += "<option value='" + tariffChargeID + "'>" + tariffChargeMap.get(tariffChargeID)
					+ "</option>";
		}

		tarrifSelectTag += "</select>";

		String consultantSelectTag = "<select name='' id='doctorNameID' class='form-control' onchange='retrieveIPDConsultantRate(this.value);'><option value=''>Select Doctor Name</option>";
		for (Integer consultantChargeId : sortedConsultantChargeMap.keySet()) {
			consultantSelectTag += "<option value='" + consultantChargeId + "'>"
					+ consultantChargeMap.get(consultantChargeId) + "</option>";
		}

		consultantSelectTag += "</select>";

		finalMap.put("tarrifSelectTag", tarrifSelectTag);
		finalMap.put("consultantSelectTag", consultantSelectTag);

		response.getWriter().write(new Gson().toJson(finalMap));
	}

	public String editGeneralHospitalIPDVisit() throws Exception {

		patientDAOInf = new PatientDAOImpl();

		serviceInf = new eDhanvantariServiceImpl();

		LoginDAOInf daoInf = new LoginDAOImpl();

		/*
		 * Getting clinicID from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");

		request.setAttribute("apptID", patientForm.getAptID());

		request.setAttribute("saveVisitcheck", "Saved");

		patientForm.setClinicID(loginForm.getClinicID());
		patientForm.setUserID(loginForm.getUserID());
		patientForm.setPracticeID(loginForm.getPracticeID());
		patientForm.setVisitTypeID(loginForm.getVisitTypeID());
		patientForm.setClinicSuffix(loginForm.getClinicSuffix());

		/*
		 * Getting form name to be display based on logged in User
		 */
		String[] formNameArray = loginForm.getOPDJSPName().split("&");

		System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[1].trim());

		message = serviceInf.editGeneralHospitalIPDVisit(patientForm);

		if (message.equals("success")) {

			addActionMessage("IPD Visit updated successfully");

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Edit GeneralHospital IPD Visit", loginForm.getUserID());

			/*
			 * Update appointment status to Consultation
			 */
			patientDAOInf.updateConsultationAppointmentStatus(patientForm.getPatientID(), patientForm.getAptID());

			patientList = patientDAOInf.retrieveIPDPatientDetails(patientForm.getPatientID(), loginForm.getClinicID(),
					patientForm.getVisitID());

			/*
			 * Check whether employee exists for the logged in user, if so then updated
			 * his/her userID as clinicianID into Appointment table for correspoding table,
			 * else dont
			 */
			int empID = loginForm.getUserID();

			if (empID != 0) {
				patientDAOInf.updateAttendedByInAppointmentForPatient(loginForm.getUserID(), patientForm.getAptID());
			}

			// inserting new record for the patient into VisitStatus table for status Booked
			if (patientForm.getStartDate() == null || patientForm.getStartDate().equals("NA")) {
				System.out.println("start date not found.");
			} else {
				patientDAOInf.insertVisitStatus(patientForm.getVisitID(), patientForm.getAptID(),
						patientForm.getPatientID(), patientForm.getStartDate(), null, ActivityStatus.CONSULTATION,
						loginForm.getClinicID());
			}

			// retrieving room type from Visit table based on visitID
			int roomTypeID = patientDAOInf.retrieveRoomTypeByVisitID(patientForm.getVisitID());

			request.setAttribute("roomTypeID", roomTypeID);

			// retrieving IPD Tariff charge list by visitID
			IPDTariffChargeList = patientDAOInf.retrieveIPDChargesByVisitID(patientForm.getVisitID(),
					ActivityStatus.TARIFF);

			// retrieving IPD consultant charge list by visitID
			IPDConsultantChargeList = patientDAOInf.retrieveIPDChargesByVisitID(patientForm.getVisitID(),
					ActivityStatus.CONSULTANT);

			// retrieving OT charge list based on visitID
			OTChargeList = patientDAOInf.retrieveOTChargesByVisitID(patientForm.getVisitID());

			// check isDischarge of visit type, if its 1 then only retrieving charges
			// details for billing
			boolean isDischarge = patientDAOInf.verifyIPDDischargeVisitType(loginForm.getVisitTypeID());

			if (isDischarge) {

				// retrieving patient's last new visit ID
				int newVisitID = patientDAOInf.retrieveNewVisitRef(patientForm.getVisitID());

				// verify whether Receipt exists for the current visitID if so then retrieving
				// details from Transaction and receipt table else retrieving details from
				// IPDCharges and OTCharges tbale
				boolean receiptExists = patientDAOInf.verifyVisitExists("Receipt", newVisitID);

				// retrieving ipd tariff charges list based newVisitID
				IPDBillTariffChargeList = patientDAOInf.retrieveIPDChargesDetailsByNewVisitID(newVisitID,
						ActivityStatus.TARIFF);

				// retrieving ipd consultant charges list based newVisitID
				IPDBillConsultantChargeList = patientDAOInf.retrieveIPDChargesDetailsByNewVisitID(newVisitID,
						ActivityStatus.CONSULTANT);

				// retrieving OT charges list based on newVisitID
				OTBillChargeList = patientDAOInf.retrieveOTChargesDetailsByNewVisitID(newVisitID);

				// retrieving receipt details i.e., receipt no receipt date , total amount, net
				// amount, advance paytment, emrgency charges, balance payment
				billList = patientDAOInf.retrieveIPDBillCharges(loginForm.getVisitTypeID(), loginForm.getClinicID(),
						loginForm.getClinicSuffix(), newVisitID);
			}

			String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

			request.setAttribute("medicalCertiText", medicatCertificate);

			String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

			request.setAttribute("referralLetter", referralLetter);

			doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

			// Setting add opd page name value in pageName variable
			setPageName(formNameArray[1].trim());

			return SUCCESS;

		} else {

			addActionError("Failed to update IPD visit. Please check server logs for more details.");

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Edit GeneralHospital IPD Visit Exception Occurred",
					loginForm.getUserID());

			patientList = patientDAOInf.retrieveIPDPatientDetails(patientForm.getPatientID(), loginForm.getClinicID(),
					patientForm.getVisitID());

			// retrieving last visitID from Visit table based on patientID and clinicID
			int lastVisitID = patientDAOInf.retrieveLastVisitID(patientForm.getPatientID(), loginForm.getClinicID());

			// retrieving room type from Visit table based on last visitID
			int roomTypeID = patientDAOInf.retrieveRoomTypeByVisitID(lastVisitID);

			request.setAttribute("roomTypeID", roomTypeID);

			// retrieving IPD Tariff charge list by visitID
			IPDTariffChargeList = patientDAOInf.retrieveIPDChargesByVisitID(patientForm.getVisitID(),
					ActivityStatus.TARIFF);

			// retrieving IPD consultant charge list by visitID
			IPDConsultantChargeList = patientDAOInf.retrieveIPDChargesByVisitID(patientForm.getVisitID(),
					ActivityStatus.CONSULTANT);

			// retrieving OT charge list based on visitID
			OTChargeList = patientDAOInf.retrieveOTChargesByVisitID(patientForm.getVisitID());

			// check isDischarge of visit type, if its 1 then only retrieving charges
			// details for billing
			boolean isDischarge = patientDAOInf.verifyIPDDischargeVisitType(loginForm.getVisitTypeID());

			if (isDischarge) {

				// retrieving patient's last new visit ID
				int newVisitID = patientDAOInf.retrieveNewVisitRef(patientForm.getVisitID());

				// verify whether Receipt exists for the current visitID if so then retrieving
				// details from Transaction and receipt table else retrieving details from
				// IPDCharges and OTCharges tbale
				boolean receiptExists = patientDAOInf.verifyVisitExists("Receipt", newVisitID);

				if (receiptExists) {

					String paymentType = patientDAOInf.retrievePaymentType(newVisitID);

					request.setAttribute("paymentType", paymentType);

					billList = patientDAOInf.retrieveVisitBillingByVisitID(newVisitID);

					// retrieving ipd tariff charges list based newVisitID
					IPDBillTariffChargeList = patientDAOInf.retrieveIPDTransactionsByVisitID(newVisitID,
							ActivityStatus.TARIFF);

					// retrieving ipd consultant charges list based newVisitID
					IPDBillConsultantChargeList = patientDAOInf.retrieveIPDTransactionsByVisitID(newVisitID,
							ActivityStatus.CONSULTANT);

					// retrieving OT charges list based on newVisitID
					OTBillChargeList = patientDAOInf.retrieveIPDTransactionsByVisitID(newVisitID, ActivityStatus.OT);

				} else {

					// retrieving ipd tariff charges list based newVisitID
					IPDBillTariffChargeList = patientDAOInf.retrieveIPDChargesDetailsByNewVisitID(newVisitID,
							ActivityStatus.TARIFF);

					// retrieving ipd consultant charges list based newVisitID
					IPDBillConsultantChargeList = patientDAOInf.retrieveIPDChargesDetailsByNewVisitID(newVisitID,
							ActivityStatus.CONSULTANT);

					// retrieving OT charges list based on newVisitID
					OTBillChargeList = patientDAOInf.retrieveOTChargesDetailsByNewVisitID(newVisitID);

					// retrieving receipt details i.e., receipt no receipt date , total amount, net
					// amount, advance paytment, emrgency charges, balance payment
					billList = patientDAOInf.retrieveIPDBillCharges(loginForm.getVisitTypeID(), loginForm.getClinicID(),
							loginForm.getClinicSuffix(), newVisitID);

				}

			}

			String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

			request.setAttribute("medicalCertiText", medicatCertificate);

			String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

			request.setAttribute("referralLetter", referralLetter);

			doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

			// Setting add opd page name value in pageName variable
			setPageName(formNameArray[1].trim());

			return ERROR;

		}

	}

	public String editGeneralHospitalAddIPDVisit() throws Exception {

		patientDAOInf = new PatientDAOImpl();

		serviceInf = new eDhanvantariServiceImpl();

		LoginDAOInf daoInf = new LoginDAOImpl();

		/*
		 * Getting clinicID from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");

		request.setAttribute("apptID", patientForm.getAptID());

		request.setAttribute("saveVisitcheck", "Saved");

		patientForm.setClinicID(loginForm.getClinicID());
		patientForm.setUserID(loginForm.getUserID());
		patientForm.setPracticeID(loginForm.getPracticeID());
		patientForm.setVisitTypeID(loginForm.getVisitTypeID());
		patientForm.setClinicSuffix(loginForm.getClinicSuffix());

		/*
		 * Getting form name to be display based on logged in User
		 */
		String[] formNameArray = loginForm.getOPDJSPName().split("&");

		System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[1].trim());

		message = serviceInf.editGeneralHospitalIPDVisit(patientForm);

		if (message.equals("success")) {

			addActionMessage("IPD Visit updated successfully");

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Edit GeneralHospital IPD Visit", loginForm.getUserID());

			/*
			 * Update appointment status to Consultation
			 */
			patientDAOInf.updateConsultationAppointmentStatus(patientForm.getPatientID(), patientForm.getAptID());

			patientList = patientDAOInf.retrieveIPDPatientDetails(patientForm.getPatientID(), loginForm.getClinicID(),
					patientForm.getVisitID());

			/*
			 * Check whether employee exists for the logged in user, if so then updated
			 * his/her userID as clinicianID into Appointment table for correspoding table,
			 * else dont
			 */
			int empID = loginForm.getUserID();

			if (empID != 0) {
				patientDAOInf.updateAttendedByInAppointmentForPatient(loginForm.getUserID(), patientForm.getAptID());
			}

			// inserting new record for the patient into VisitStatus table for status Booked
			if (patientForm.getStartDate() == null || patientForm.getStartDate().equals("NA")) {
				System.out.println("start date not found.");
			} else {
				patientDAOInf.insertVisitStatus(patientForm.getVisitID(), patientForm.getAptID(),
						patientForm.getPatientID(), patientForm.getStartDate(), null, ActivityStatus.CONSULTATION,
						loginForm.getClinicID());
			}

			// retrieving room type from Visit table based on visitID
			int roomTypeID = patientDAOInf.retrieveRoomTypeByVisitID(patientForm.getVisitID());

			request.setAttribute("roomTypeID", roomTypeID);

			// retrieving IPD Tariff charge list by visitID
			IPDTariffChargeList = patientDAOInf.retrieveIPDChargesByVisitID(patientForm.getVisitID(),
					ActivityStatus.TARIFF);

			// retrieving IPD consultant charge list by visitID
			IPDConsultantChargeList = patientDAOInf.retrieveIPDChargesByVisitID(patientForm.getVisitID(),
					ActivityStatus.CONSULTANT);

			// retrieving OT charge list based on visitID
			OTChargeList = patientDAOInf.retrieveOTChargesByVisitID(patientForm.getVisitID());

			// check isDischarge of visit type, if its 1 then only retrieving charges
			// details for billing
			boolean isDischarge = patientDAOInf.verifyIPDDischargeVisitType(loginForm.getVisitTypeID());

			if (isDischarge) {

				// retrieving patient's last new visit ID
				int newVisitID = patientDAOInf.retrieveNewVisitRef(patientForm.getVisitID());

				// verify whether Receipt exists for the current visitID if so then retrieving
				// details from Transaction and receipt table else retrieving details from
				// IPDCharges and OTCharges tbale
				boolean receiptExists = patientDAOInf.verifyVisitExists("Receipt", newVisitID);

				// retrieving ipd tariff charges list based newVisitID
				IPDBillTariffChargeList = patientDAOInf.retrieveIPDChargesDetailsByNewVisitID(newVisitID,
						ActivityStatus.TARIFF);

				// retrieving ipd consultant charges list based newVisitID
				IPDBillConsultantChargeList = patientDAOInf.retrieveIPDChargesDetailsByNewVisitID(newVisitID,
						ActivityStatus.CONSULTANT);

				// retrieving OT charges list based on newVisitID
				OTBillChargeList = patientDAOInf.retrieveOTChargesDetailsByNewVisitID(newVisitID);

				// retrieving receipt details i.e., receipt no receipt date , total amount, net
				// amount, advance paytment, emrgency charges, balance payment
				billList = patientDAOInf.retrieveIPDBillCharges(loginForm.getVisitTypeID(), loginForm.getClinicID(),
						loginForm.getClinicSuffix(), newVisitID);

			}

			request.setAttribute("IPDVisitCheck", "Yes");
			request.setAttribute("IPDBillCheck", "No");

			String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

			request.setAttribute("medicalCertiText", medicatCertificate);

			String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

			request.setAttribute("referralLetter", referralLetter);

			doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

			// Setting add opd page name value in pageName variable
			setPageName(formNameArray[0].trim());

			return SUCCESS;

		} else {

			addActionError("Failed to update IPD visit. Please check server logs for more details.");

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Edit GeneralHospital IPD Visit Exception Occurred",
					loginForm.getUserID());

			patientList = patientDAOInf.retrieveIPDPatientDetails(patientForm.getPatientID(), loginForm.getClinicID(),
					patientForm.getVisitID());

			// retrieving last visitID from Visit table based on patientID and clinicID
			int lastVisitID = patientDAOInf.retrieveLastVisitID(patientForm.getPatientID(), loginForm.getClinicID());

			// retrieving room type from Visit table based on last visitID
			int roomTypeID = patientDAOInf.retrieveRoomTypeByVisitID(lastVisitID);

			request.setAttribute("roomTypeID", roomTypeID);

			// retrieving IPD Tariff charge list by visitID
			IPDTariffChargeList = patientDAOInf.retrieveIPDChargesByVisitID(patientForm.getVisitID(),
					ActivityStatus.TARIFF);

			// retrieving IPD consultant charge list by visitID
			IPDConsultantChargeList = patientDAOInf.retrieveIPDChargesByVisitID(patientForm.getVisitID(),
					ActivityStatus.CONSULTANT);

			// retrieving OT charge list based on visitID
			OTChargeList = patientDAOInf.retrieveOTChargesByVisitID(patientForm.getVisitID());

			// check isDischarge of visit type, if its 1 then only retrieving charges
			// details for billing
			boolean isDischarge = patientDAOInf.verifyIPDDischargeVisitType(loginForm.getVisitTypeID());

			if (isDischarge) {

				// retrieving patient's last new visit ID
				int newVisitID = patientDAOInf.retrieveNewVisitRef(patientForm.getVisitID());

				// verify whether Receipt exists for the current visitID if so then retrieving
				// details from Transaction and receipt table else retrieving details from
				// IPDCharges and OTCharges tbale
				boolean receiptExists = patientDAOInf.verifyVisitExists("Receipt", newVisitID);

				if (receiptExists) {

					String paymentType = patientDAOInf.retrievePaymentType(newVisitID);

					request.setAttribute("paymentType", paymentType);

					billList = patientDAOInf.retrieveVisitBillingByVisitID(newVisitID);

					// retrieving ipd tariff charges list based newVisitID
					IPDBillTariffChargeList = patientDAOInf.retrieveIPDTransactionsByVisitID(newVisitID,
							ActivityStatus.TARIFF);

					// retrieving ipd consultant charges list based newVisitID
					IPDBillConsultantChargeList = patientDAOInf.retrieveIPDTransactionsByVisitID(newVisitID,
							ActivityStatus.CONSULTANT);

					// retrieving OT charges list based on newVisitID
					OTBillChargeList = patientDAOInf.retrieveIPDTransactionsByVisitID(newVisitID, ActivityStatus.OT);

				} else {

					// retrieving ipd tariff charges list based newVisitID
					IPDBillTariffChargeList = patientDAOInf.retrieveIPDChargesDetailsByNewVisitID(newVisitID,
							ActivityStatus.TARIFF);

					// retrieving ipd consultant charges list based newVisitID
					IPDBillConsultantChargeList = patientDAOInf.retrieveIPDChargesDetailsByNewVisitID(newVisitID,
							ActivityStatus.CONSULTANT);

					// retrieving OT charges list based on newVisitID
					OTBillChargeList = patientDAOInf.retrieveOTChargesDetailsByNewVisitID(newVisitID);

					// retrieving receipt details i.e., receipt no receipt date , total amount, net
					// amount, advance paytment, emrgency charges, balance payment
					billList = patientDAOInf.retrieveIPDBillCharges(loginForm.getVisitTypeID(), loginForm.getClinicID(),
							loginForm.getClinicSuffix(), newVisitID);

				}

			}

			String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

			request.setAttribute("medicalCertiText", medicatCertificate);

			String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

			request.setAttribute("referralLetter", referralLetter);

			doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

			// Setting add opd page name value in pageName variable
			setPageName(formNameArray[0].trim());

			return ERROR;

		}

	}

	public String editIPDBill() throws Exception {

		patientDAOInf = new PatientDAOImpl();

		serviceInf = new eDhanvantariServiceImpl();

		LoginDAOInf daoInf = new LoginDAOImpl();

		String accessKey = xmlUtil.getAccessKey();

		String secreteKey = xmlUtil.getSecreteKey();

		AWSS3Connect awss3Connect = new AWSS3Connect();

		// getting input file location from S3 bucket
		String s3reportFilePath = xmlUtil.getS3RDMLReportFilePath();

		// getting s3 bucket name
		String bucketName = util.getS3BucketName();

		// getting s3 bucket region
		String bucketRegion = xmlUtil.getS3BucketRegion();

		String s3LogoFilePath = xmlUtil.getS3RDMLFilePath();

		AWSCredentials credentials = new BasicAWSCredentials(accessKey, secreteKey);

		AmazonS3 s3 = AmazonS3ClientBuilder.standard().withCredentials(new AWSStaticCredentialsProvider(credentials))
				.withRegion(bucketRegion).build();

		/*
		 * Getting clinicID from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");

		request.setAttribute("apptID", patientForm.getAptID());

		request.setAttribute("saveVisitcheck", "Saved");

		patientForm.setClinicID(loginForm.getClinicID());
		patientForm.setUserID(loginForm.getUserID());
		patientForm.setPracticeID(loginForm.getPracticeID());
		patientForm.setVisitTypeID(loginForm.getVisitTypeID());
		patientForm.setClinicSuffix(loginForm.getClinicSuffix());

		String billingTabCheck = "enable";
		request.setAttribute("billingTabCheck", billingTabCheck);

		/*
		 * Getting form name to be display based on logged in User
		 */
		String[] formNameArray = loginForm.getOPDJSPName().split("&");

		message = serviceInf.addGeneralHospitalIPDBill(patientForm);

		if (message.equals("success")) {

			ConvertToPDFUtil convertToPDFUtil = new ConvertToPDFUtil();

			HttpServletRequest request = ServletActionContext.getRequest();
			ServletContext context = request.getServletContext();

			// retrieving patient's last new visit ID
			int newVisitID = patientForm.getVisitID();

			billList = patientDAOInf.retrieveVisitBillingByVisitID(newVisitID);

			String realPath = context.getRealPath("/");
			System.out.println("Real path is :: " + realPath);

			String pdfOutFIleName = patientForm.getFirstName() + patientForm.getLastName() + patientForm.getPatientID()
					+ "_" + patientForm.getVisitID() + "IPD_b.pdf";

			message = convertToPDFUtil.convertIPDBillPDF(patientForm.getPatientID(), newVisitID, realPath,
					pdfOutFIleName, loginForm.getClinicID(), loginForm.getVisitTypeID(), loginForm.getClinicSuffix(),
					billList, loginForm.getFullName(), s3, s3LogoFilePath, bucketName);

			if (message.equals("success")) {

				addActionMessage("IPD Bill updated successfully");

				File inputFile = new File(realPath + "/" + pdfOutFIleName);

				// Storing file to S3 RDML INPUT FILE location
				message = awss3Connect.pushFile(inputFile, pdfOutFIleName, bucketName, bucketRegion, s3reportFilePath);

				S3ObjectInputStream s3ObjectInputStream = s3
						.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, pdfOutFIleName))
						.getObjectContent();

				patientForm.setFileInputStream(s3ObjectInputStream);

				patientForm.setFileName(pdfOutFIleName);

				request.setAttribute("PDFOutFileName", pdfOutFIleName);

				billList = patientDAOInf.retrieveVisitBillingByVisitID(newVisitID);
				/*
				 * Update appointment status to Consultation
				 */
				patientDAOInf.updateBillingAppointmentStatus(patientForm.getPatientID(), patientForm.getAptID());

				patientList = patientDAOInf.retrieveIPDPatientDetails(patientForm.getPatientID(),
						loginForm.getClinicID(), patientForm.getVisitID());

				// inserting new record for the patient into VisitStatus table for status Booked
				if (patientForm.getStartDate() == null || patientForm.getStartDate().equals("NA")) {
					System.out.println("start date not found.");
				} else {
					patientDAOInf.insertVisitStatus(patientForm.getVisitID(), patientForm.getAptID(),
							patientForm.getPatientID(), patientForm.getStartDate(), null, ActivityStatus.BILLING,
							loginForm.getClinicID());
				}

				// retrieving room type from Visit table based on visitID
				int roomTypeID = patientDAOInf.retrieveRoomTypeByVisitID(patientForm.getVisitID());

				request.setAttribute("roomTypeID", roomTypeID);

				// retrieving IPD Tariff charge list by visitID
				IPDTariffChargeList = patientDAOInf.retrieveIPDChargesByVisitID(patientForm.getVisitID(),
						ActivityStatus.TARIFF);

				// retrieving IPD consultant charge list by visitID
				IPDConsultantChargeList = patientDAOInf.retrieveIPDChargesByVisitID(patientForm.getVisitID(),
						ActivityStatus.CONSULTANT);

				// retrieving OT charge list based on visitID
				OTChargeList = patientDAOInf.retrieveOTChargesByVisitID(patientForm.getVisitID());

				System.out.println("...newVisitID.." + newVisitID);

				String paymentType = patientDAOInf.retrievePaymentType(newVisitID);

				request.setAttribute("paymentType", paymentType);

				// retrieving ipd tariff charges list based newVisitID
				IPDBillTariffChargeList = patientDAOInf.retrieveIPDTransactionsByVisitID(newVisitID,
						ActivityStatus.TARIFF);

				// retrieving ipd consultant charges list based newVisitID
				IPDBillConsultantChargeList = patientDAOInf.retrieveIPDTransactionsByVisitID(newVisitID,
						ActivityStatus.CONSULTANT);

				// retrieving OT charges list based on newVisitID
				OTBillChargeList = patientDAOInf.retrieveIPDTransactionsByVisitID(newVisitID, ActivityStatus.OT);

				String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

				request.setAttribute("medicalCertiText", medicatCertificate);

				String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

				request.setAttribute("referralLetter", referralLetter);

				doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

				// Inserting values into Audit table
				daoInf.insertAudit(request.getRemoteAddr(), "Edit GeneralHospital IPD Bill", loginForm.getUserID());

				// Setting add opd page name value in pageName variable
				setPageName(formNameArray[1].trim());

				return SUCCESS;

			} else {

				addActionError("Failed to generate IPD bill PDF. Please check server logs for more details.");

				/*
				 * Update appointment status to Consultation
				 */
				patientDAOInf.updateBillingAppointmentStatus(patientForm.getPatientID(), patientForm.getAptID());

				patientList = patientDAOInf.retrieveIPDPatientDetails(patientForm.getPatientID(),
						loginForm.getClinicID(), patientForm.getVisitID());

				// inserting new record for the patient into VisitStatus table for status Booked
				if (patientForm.getStartDate() == null || patientForm.getStartDate().equals("NA")) {
					System.out.println("start date not found.");
				} else {
					patientDAOInf.insertVisitStatus(patientForm.getVisitID(), patientForm.getAptID(),
							patientForm.getPatientID(), patientForm.getStartDate(), null, ActivityStatus.BILLING,
							loginForm.getClinicID());
				}

				// retrieving room type from Visit table based on visitID
				int roomTypeID = patientDAOInf.retrieveRoomTypeByVisitID(patientForm.getVisitID());

				request.setAttribute("roomTypeID", roomTypeID);

				// retrieving IPD Tariff charge list by visitID
				IPDTariffChargeList = patientDAOInf.retrieveIPDChargesByVisitID(patientForm.getVisitID(),
						ActivityStatus.TARIFF);

				// retrieving IPD consultant charge list by visitID
				IPDConsultantChargeList = patientDAOInf.retrieveIPDChargesByVisitID(patientForm.getVisitID(),
						ActivityStatus.CONSULTANT);

				// retrieving OT charge list based on visitID
				OTChargeList = patientDAOInf.retrieveOTChargesByVisitID(patientForm.getVisitID());

				System.out.println("...newVisitID.." + newVisitID);

				String paymentType = patientDAOInf.retrievePaymentType(newVisitID);

				request.setAttribute("paymentType", paymentType);

				billList = patientDAOInf.retrieveVisitBillingByVisitID(newVisitID);

				// retrieving ipd tariff charges list based newVisitID
				IPDBillTariffChargeList = patientDAOInf.retrieveIPDTransactionsByVisitID(newVisitID,
						ActivityStatus.TARIFF);

				// retrieving ipd consultant charges list based newVisitID
				IPDBillConsultantChargeList = patientDAOInf.retrieveIPDTransactionsByVisitID(newVisitID,
						ActivityStatus.CONSULTANT);

				// retrieving OT charges list based on newVisitID
				OTBillChargeList = patientDAOInf.retrieveIPDTransactionsByVisitID(newVisitID, ActivityStatus.OT);

				String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

				request.setAttribute("medicalCertiText", medicatCertificate);

				String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

				request.setAttribute("referralLetter", referralLetter);

				doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

				// Inserting values into Audit table
				daoInf.insertAudit(request.getRemoteAddr(), "Edit GeneralHospital IPD Bill PDF Exception Occurred",
						loginForm.getUserID());

				// Setting add opd page name value in pageName variable
				setPageName(formNameArray[1].trim());

				return ERROR;

			}

		} else if (message.equals("noVisit")) {

			addActionError("No visit added. Please add visit first.");

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Edit GeneralHospital IPD Bill Exception Occurred",
					loginForm.getUserID());

			/*
			 * Update appointment status to Consultation
			 */
			patientDAOInf.updateBillingAppointmentStatus(patientForm.getPatientID(), patientForm.getAptID());

			patientList = patientDAOInf.retrieveIPDPatientDetails(patientForm.getPatientID(), loginForm.getClinicID(),
					patientForm.getVisitID());

			// inserting new record for the patient into VisitStatus table for status Booked
			if (patientForm.getStartDate() == null || patientForm.getStartDate().equals("NA")) {
				System.out.println("start date not found.");
			} else {
				patientDAOInf.insertVisitStatus(patientForm.getVisitID(), patientForm.getAptID(),
						patientForm.getPatientID(), patientForm.getStartDate(), null, ActivityStatus.BILLING,
						loginForm.getClinicID());
			}

			// retrieving room type from Visit table based on visitID
			int roomTypeID = patientDAOInf.retrieveRoomTypeByVisitID(patientForm.getVisitID());

			request.setAttribute("roomTypeID", roomTypeID);

			// retrieving IPD Tariff charge list by visitID
			IPDTariffChargeList = patientDAOInf.retrieveIPDChargesByVisitID(patientForm.getVisitID(),
					ActivityStatus.TARIFF);

			// retrieving IPD consultant charge list by visitID
			IPDConsultantChargeList = patientDAOInf.retrieveIPDChargesByVisitID(patientForm.getVisitID(),
					ActivityStatus.CONSULTANT);

			// retrieving OT charge list based on visitID
			OTChargeList = patientDAOInf.retrieveOTChargesByVisitID(patientForm.getVisitID());

			// retrieving patient's last new visit ID
			int newVisitID = patientForm.getVisitID();

			// verify whether Receipt exists for the current visitID if so then retrieving
			// details from Transaction and receipt table else retrieving details from
			// IPDCharges and OTCharges tbale
			boolean receiptExists = patientDAOInf.verifyVisitExists("Receipt", newVisitID);

			if (receiptExists) {

				billList = patientDAOInf.retrieveVisitBillingByVisitID(newVisitID);

				// retrieving ipd tariff charges list based newVisitID
				IPDBillTariffChargeList = patientDAOInf.retrieveIPDTransactionsByVisitID(newVisitID,
						ActivityStatus.TARIFF);

				// retrieving ipd consultant charges list based newVisitID
				IPDBillConsultantChargeList = patientDAOInf.retrieveIPDTransactionsByVisitID(newVisitID,
						ActivityStatus.CONSULTANT);

				// retrieving OT charges list based on newVisitID
				OTBillChargeList = patientDAOInf.retrieveIPDTransactionsByVisitID(newVisitID, ActivityStatus.OT);

			} else {

				// retrieving ipd tariff charges list based newVisitID
				IPDBillTariffChargeList = patientDAOInf.retrieveIPDChargesDetailsByNewVisitID(newVisitID,
						ActivityStatus.TARIFF);

				// retrieving ipd consultant charges list based newVisitID
				IPDBillConsultantChargeList = patientDAOInf.retrieveIPDChargesDetailsByNewVisitID(newVisitID,
						ActivityStatus.CONSULTANT);

				// retrieving OT charges list based on newVisitID
				OTBillChargeList = patientDAOInf.retrieveOTChargesDetailsByNewVisitID(newVisitID);

				// retrieving receipt details i.e., receipt no receipt date , total amount, net
				// amount, advance paytment, emrgency charges, balance payment
				billList = patientDAOInf.retrieveIPDBillCharges(loginForm.getVisitTypeID(), loginForm.getClinicID(),
						loginForm.getClinicSuffix(), newVisitID);

			}

			String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

			request.setAttribute("medicalCertiText", medicatCertificate);

			String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

			request.setAttribute("referralLetter", referralLetter);

			doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

			// Setting add opd page name value in pageName variable
			setPageName(formNameArray[1].trim());

			return ERROR;

		} else {

			addActionError("Failed to update IPD bill. Please check server logs for more details");

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Edit GeneralHospital IPD Bill Exception Occurred",
					loginForm.getUserID());

			/*
			 * Update appointment status to Consultation
			 */
			patientDAOInf.updateBillingAppointmentStatus(patientForm.getPatientID(), patientForm.getAptID());

			patientList = patientDAOInf.retrieveIPDPatientDetails(patientForm.getPatientID(), loginForm.getClinicID(),
					patientForm.getVisitID());

			// inserting new record for the patient into VisitStatus table for status Booked
			if (patientForm.getStartDate() == null || patientForm.getStartDate().equals("NA")) {
				System.out.println("start date not found.");
			} else {
				patientDAOInf.insertVisitStatus(patientForm.getVisitID(), patientForm.getAptID(),
						patientForm.getPatientID(), patientForm.getStartDate(), null, ActivityStatus.BILLING,
						loginForm.getClinicID());
			}

			// retrieving room type from Visit table based on visitID
			int roomTypeID = patientDAOInf.retrieveRoomTypeByVisitID(patientForm.getVisitID());

			request.setAttribute("roomTypeID", roomTypeID);

			// retrieving IPD Tariff charge list by visitID
			IPDTariffChargeList = patientDAOInf.retrieveIPDChargesByVisitID(patientForm.getVisitID(),
					ActivityStatus.TARIFF);

			// retrieving IPD consultant charge list by visitID
			IPDConsultantChargeList = patientDAOInf.retrieveIPDChargesByVisitID(patientForm.getVisitID(),
					ActivityStatus.CONSULTANT);

			// retrieving OT charge list based on visitID
			OTChargeList = patientDAOInf.retrieveOTChargesByVisitID(patientForm.getVisitID());

			// retrieving patient's last new visit ID
			int newVisitID = patientForm.getVisitID();

			// verify whether Receipt exists for the current visitID if so then retrieving
			// details from Transaction and receipt table else retrieving details from
			// IPDCharges and OTCharges tbale
			boolean receiptExists = patientDAOInf.verifyVisitExists("Receipt", newVisitID);

			if (receiptExists) {

				billList = patientDAOInf.retrieveVisitBillingByVisitID(newVisitID);

				// retrieving ipd tariff charges list based newVisitID
				IPDBillTariffChargeList = patientDAOInf.retrieveIPDTransactionsByVisitID(newVisitID,
						ActivityStatus.TARIFF);

				// retrieving ipd consultant charges list based newVisitID
				IPDBillConsultantChargeList = patientDAOInf.retrieveIPDTransactionsByVisitID(newVisitID,
						ActivityStatus.CONSULTANT);

				// retrieving OT charges list based on newVisitID
				OTBillChargeList = patientDAOInf.retrieveIPDTransactionsByVisitID(newVisitID, ActivityStatus.OT);

			} else {

				// retrieving ipd tariff charges list based newVisitID
				IPDBillTariffChargeList = patientDAOInf.retrieveIPDChargesDetailsByNewVisitID(newVisitID,
						ActivityStatus.TARIFF);

				// retrieving ipd consultant charges list based newVisitID
				IPDBillConsultantChargeList = patientDAOInf.retrieveIPDChargesDetailsByNewVisitID(newVisitID,
						ActivityStatus.CONSULTANT);

				// retrieving OT charges list based on newVisitID
				OTBillChargeList = patientDAOInf.retrieveOTChargesDetailsByNewVisitID(newVisitID);

				// retrieving receipt details i.e., receipt no receipt date , total amount, net
				// amount, advance paytment, emrgency charges, balance payment
				billList = patientDAOInf.retrieveIPDBillCharges(loginForm.getVisitTypeID(), loginForm.getClinicID(),
						loginForm.getClinicSuffix(), newVisitID);

			}

			String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

			request.setAttribute("medicalCertiText", medicatCertificate);

			String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

			request.setAttribute("referralLetter", referralLetter);

			doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

			// Setting add opd page name value in pageName variable
			setPageName(formNameArray[1].trim());

			return ERROR;

		}

	}

	public void deleteIPDROw() throws Exception {
		response.setContentType("application/json");

		patientDAOInf = new PatientDAOImpl();

		/*
		 * Getting clinicID from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");

		// retrieving patient's last new visit ID
		int newVisitID = patientDAOInf.retrieveLastNewVisitID(patientForm.getPatientID(), loginForm.getClinicID());

		// verify receipt added for the newVisitID, if yes then dont allow to delete the
		// row else delete the row
		boolean receiptCheck = patientDAOInf.verifyVisitExists("Receipt", newVisitID);

		if (receiptCheck) {
			message = "NA";
		} else {
			message = patientDAOInf.deleteRow(patientForm.getCheck(), patientForm.getDeleteID());
		}

		HashMap<String, Object> finalMap = patientDAOInf
				.retrieveIPDConsultantDetailsByID(patientForm.getConsultantChargeID());

		response.getWriter().write(new Gson().toJson(message));
	}

	public void verifyIPDVisitType() throws Exception {
		patientDAOInf = new PatientDAOImpl();

		JSONObject values = new JSONObject();

		JSONArray array = new JSONArray();
		values = new JSONObject();

		JSONObject object = new JSONObject();

		response.setCharacterEncoding("UTF-8");

		serviceInf = new eDhanvantariServiceImpl();

		try {

			/*
			 * Getting clinicID from session
			 */
			LoginForm loginForm = (LoginForm) session.get("USER");

			String[] formNameArray = loginForm.getOPDJSPName().split("&");

			System.out.println("...formNameArray.." + formNameArray[0]);

			/*
			 * if (formNameArray[1].trim().contains("ophthalmologyIPD")) { message =
			 * "OPDVisit"; } else if (formNameArray[0].trim().contains("IPD")) { message =
			 * serviceInf.verifyIPDVisitType(patientForm.getPatientID(),
			 * loginForm.getClinicID()); System.out.println("message:" + message); } else {
			 * message = "OPDVisit"; }
			 */

			message = "OPDVisit";

			object.put("message", message);

			array.add(object);

			values.put("Release", array);

			PrintWriter out = response.getWriter();

			out.print(values);

		} catch (Exception exception) {
			exception.printStackTrace();

			object.put("message", "Exception occured while update OT charge disbursement");
			array.add(object);

			values.put("Release", array);

			PrintWriter out = response.getWriter();

			out.print(values);
		}
	}

	public void retrieveIPDVisitTypeExceptNew() throws Exception {
		patientDAOInf = new PatientDAOImpl();

		JSONObject values = new JSONObject();

		JSONArray array = new JSONArray();
		values = new JSONObject();

		JSONObject object = new JSONObject();

		response.setCharacterEncoding("UTF-8");

		patientDAOInf = new PatientDAOImpl();

		try {

			/*
			 * Getting clinicID from session
			 */
			LoginForm loginForm = (LoginForm) session.get("USER");

			values = patientDAOInf.retrieveIPDVisitTypeExceptNewVisit(loginForm.getClinicID());
			System.out.println("values::" + loginForm.getClinicID());
			PrintWriter out = response.getWriter();

			out.print(values);

		} catch (Exception exception) {
			exception.printStackTrace();

			object.put("message", "Exception occured while update OT charge disbursement");
			array.add(object);

			values.put("Release", array);

			PrintWriter out = response.getWriter();

			out.print(values);
		}
	}

	public void retrieveNonIPDVisitType() throws Exception {
		patientDAOInf = new PatientDAOImpl();

		JSONObject values = new JSONObject();

		JSONArray array = new JSONArray();
		values = new JSONObject();

		JSONObject object = new JSONObject();

		response.setCharacterEncoding("UTF-8");

		patientDAOInf = new PatientDAOImpl();

		try {

			/*
			 * Getting clinicID from session
			 */
			LoginForm loginForm = (LoginForm) session.get("USER");

			values = patientDAOInf.retrieveNonIPDVisitType(loginForm.getClinicID());

			PrintWriter out = response.getWriter();

			out.print(values);

		} catch (Exception exception) {
			exception.printStackTrace();

			object.put("message", "Exception occured while retrieveing non ipd visit types");
			array.add(object);

			values.put("Release", array);

			PrintWriter out = response.getWriter();

			out.print(values);
		}
	}

	/**
	 * 
	 * @return
	 * @throws Exception
	 */
	public String addNewGeneralClinicVisit() throws Exception {

		patientDAOInf = new PatientDAOImpl();

		serviceInf = new eDhanvantariServiceImpl();

		LoginDAOInf daoInf = new LoginDAOImpl();

		/*
		 * Getting user role from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");
		loginForm = (LoginForm) session.get("USER");

		RegistrationDAOinf registrationDAOinf = new RegistrationDAOImpl();
		PrescriptionManagementDAOInf managementDAOInf = new PrescriptionManagementDAOImpl();
		/*
		 * Setting clinicID from session into clinicID variable from PatientForm
		 */
		patientForm.setClinicID(loginForm.getClinicID());
		patientForm.setVisitTypeID(loginForm.getVisitTypeID());

		boolean newVisitCheck = patientDAOInf.CheckVisitTypeNewVisitCheck(loginForm.getVisitTypeID());

		int lastOPDVisitID = 0;

		if (newVisitCheck) {
			lastOPDVisitID = 0;

		} else {
			lastOPDVisitID = patientDAOInf.retrieveLastOPDVisitID(patientForm.getPatientID(), loginForm.getClinicID());
		}

		/*
		 * inserting visit details into Visit table
		 */
		message = serviceInf.addNewGenaralClinicVisitDetails(patientForm);

		if (message.equals("success")) {

			addActionMessage("New visit added successfully.");

			/*
			 * retrieving patientList which contains visit details
			 */

			patientList = patientDAOInf.retrieveGeneralClinicPatientDetails(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID());

			boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

			if (visitCheck) {
				billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
			} else {
				billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
						loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
			}

			/*
			 * Update appointment status to Consultation
			 */
			patientDAOInf.updateConsultationAppointmentStatus(patientForm.getPatientID(), patientForm.getAptID());

			/* Retrieve labReport List */
			labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
					loginForm.getClinicID());

			String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
			request.setAttribute("paymentType", paymentType);

			// String dummy = "";
			String dummy = "success";

			request.setAttribute("lasteEnteredVisitList", dummy);

			String check1 = patientDAOInf.verifyReferralLetter(patientForm.getVisitID());
			System.out.println("check1 value in action:" + check1);
			request.setAttribute("referralLetterCheck", check1);

			String check = patientDAOInf.verifyMedicalCertificate(patientForm.getVisitID());
			System.out.println("check value in action:" + check);
			request.setAttribute("medicalCertiCheck", check);

			String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

			request.setAttribute("medicalCertiText", medicatCertificate);

			String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

			request.setAttribute("referralLetter", referralLetter);

			symptomList = patientDAOInf.retrievesymptomCheckList(patientForm.getVisitID());

			complaintList = patientDAOInf.retrievecomplaintList(patientForm.getVisitID());

			historyList = patientDAOInf.retrieveMedicalHistoryList(patientForm.getPatientID());

			medicationList = patientDAOInf.retrieveCurrentMedicationList(patientForm.getPatientID());
			/*
			 * retrieving prescription list by visitID
			 */
			prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID());

			InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

			diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());
			InvestigationList = configurationUtil.getInvestigationList();

			diagnoseList = configurationUtil.getDiagnoseList();

			request.setAttribute("apptID", patientForm.getAptID());

			frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

			doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

			hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Added General Clinic Visit & Prescription Details",
					loginForm.getUserID());

			String[] formNameArray = loginForm.getOPDJSPName().split("&");

			System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[0].trim());

			// Setting add opd page name value in pageName variable
			setPageName(formNameArray[0].trim());

			return SUCCESS;

		} else {

			addActionError("Eexception occurred while adding visit details. Please check logs for more details.");

			String dummy = "success";

			request.setAttribute("lasteEnteredVisitList", "");

			hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

			request.setAttribute("medicalCertiCheck", "no");

			request.setAttribute("referralLetterCheck", "no");

			billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
					loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());

			/* Retrieve labReport List */
			labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
					loginForm.getClinicID());

			complaintList = patientDAOInf.retrievecomplaintList(patientForm.getVisitID());

			String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
			request.setAttribute("paymentType", paymentType);

			historyList = patientDAOInf.retrieveMedicalHistoryList(patientForm.getPatientID());

			medicationList = patientDAOInf.retrieveCurrentMedicationList(patientForm.getPatientID());
			/*
			 * retrieving patientList which contains visit details
			 */
			patientList = patientDAOInf.retrieveGenaralClinicPatientDetailsForNewVisit(patientForm.getPatientID(),
					lastOPDVisitID, loginForm.getClinicID());

			request.setAttribute("apptID", patientForm.getAptID());

			diagnoseList = configurationUtil.getDiagnoseList();

			/*
			 * retrieving prescription list by visitID
			 */
			/*
			 * retrieving prescription list by visitID
			 */
			prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID());

			InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

			diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());

			InvestigationList = configurationUtil.getInvestigationList();

			frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(),
					"While Adding General Clinic Visit & Prescription Exception occurred", loginForm.getUserID());

			/*
			 * Update appointment status to Consultation
			 */
			patientDAOInf.updateConsultationAppointmentStatus(patientForm.getPatientID(), patientForm.getAptID());
			/*
			 * Getting form name to be display based on logged in User
			 */
			String[] formNameArray = loginForm.getOPDJSPName().split("&");

			System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[0].trim());

			// Setting add opd page name value in pageName variable
			setPageName(formNameArray[0].trim());

			return ERROR;

		}

	}

	/**
	 * 
	 * @return
	 * @throws Exception
	 */
	public String editGeneralClinicVisit() throws Exception {

		patientDAOInf = new PatientDAOImpl();

		serviceInf = new eDhanvantariServiceImpl();

		LoginDAOInf daoInf = new LoginDAOImpl();

		RegistrationDAOinf registrationDAOinf = new RegistrationDAOImpl();
		PrescriptionManagementDAOInf managementDAOInf = new PrescriptionManagementDAOImpl();
		/*
		 * Getting user role from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");
		loginForm = (LoginForm) session.get("USER");

		/*
		 * Setting clinicID from session into clinicID variable from PatientForm
		 */
		patientForm.setClinicID(loginForm.getClinicID());
		patientForm.setVisitTypeID(loginForm.getVisitTypeID());

		String check1 = patientDAOInf.verifyReferralLetter(patientForm.getVisitID());
		System.out.println("check1 value in action:" + check1);
		request.setAttribute("referralLetterCheck", check1);

		String check = patientDAOInf.verifyMedicalCertificate(patientForm.getVisitID());
		System.out.println("check value in action:" + check);
		request.setAttribute("medicalCertiCheck", check);

		/*
		 * updating visit details into Visit table
		 */
		message = serviceInf.editNewGenaralClinicVisitDetails(patientForm);

		if (message.equals("success")) {

			addActionMessage("Successfully updated Visit details.");

			/*
			 * retrieving patientList which contains visit details
			 */

			patientList = patientDAOInf.retrieveGeneralClinicPatientDetails(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID());

			boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

			if (visitCheck) {
				billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
			} else {
				billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
						loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
			}

			/* Retrieve labReport List */
			labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
					loginForm.getClinicID());

			String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
			request.setAttribute("paymentType", paymentType);

			String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

			request.setAttribute("medicalCertiText", medicatCertificate);

			String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

			request.setAttribute("referralLetter", referralLetter);
			// String dummy = "";
			String dummy = "success";

			request.setAttribute("lasteEnteredVisitList", dummy);

			/*
			 * retrieving prescription list by visitID
			 */
			prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID());

			InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

			diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());
			InvestigationList = configurationUtil.getInvestigationList();

			complaintList = patientDAOInf.retrievecomplaintList(patientForm.getVisitID());

			historyList = patientDAOInf.retrieveMedicalHistoryList(patientForm.getPatientID());

			medicationList = patientDAOInf.retrieveCurrentMedicationList(patientForm.getPatientID());

			diagnoseList = configurationUtil.getDiagnoseList();

			request.setAttribute("apptID", patientForm.getAptID());

			frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

			doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

			hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Updated General Clinic Visit & Prescription Details",
					loginForm.getUserID());

			String[] formNameArray = loginForm.getOPDJSPName().split("&");

			System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[0].trim());

			// Setting add opd page name value in pageName variable
			setPageName(formNameArray[1].trim());

			return SUCCESS;

		} else {

			addActionError("Eexception occurred while updating visit details. Please check logs for more details.");

			String dummy = "success";

			request.setAttribute("lasteEnteredVisitList", "");

			/*
			 * retrieving patientList which contains visit details
			 */
			patientList = patientDAOInf.retrieveGeneralClinicPatientDetails(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID());

			boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

			if (visitCheck) {
				billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
			} else {
				billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
						loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
			}

			/* Retrieve labReport List */
			labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
					loginForm.getClinicID());

			historyList = patientDAOInf.retrieveMedicalHistoryList(patientForm.getPatientID());

			medicationList = patientDAOInf.retrieveCurrentMedicationList(patientForm.getPatientID());

			complaintList = patientDAOInf.retrievecomplaintList(patientForm.getVisitID());

			String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

			request.setAttribute("medicalCertiText", medicatCertificate);

			String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

			request.setAttribute("referralLetter", referralLetter);

			request.setAttribute("apptID", patientForm.getAptID());

			diagnoseList = configurationUtil.getDiagnoseList();

			/*
			 * retrieving prescription list by visitID
			 */
			/*
			 * retrieving prescription list by visitID
			 */
			prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID());

			InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

			diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());

			InvestigationList = configurationUtil.getInvestigationList();

			frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

			hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(),
					"While Updating General Clinic Visit & Prescription Exception occurred", loginForm.getUserID());

			/*
			 * Getting form name to be display based on logged in User
			 */
			String[] formNameArray = loginForm.getOPDJSPName().split("&");

			System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[0].trim());

			// Setting add opd page name value in pageName variable
			setPageName(formNameArray[1].trim());

			return ERROR;

		}

	}

	/**
	 * 
	 * @return
	 * @throws Exception
	 */
	public String updateGeneralClinicVisit() throws Exception {

		patientDAOInf = new PatientDAOImpl();

		serviceInf = new eDhanvantariServiceImpl();

		LoginDAOInf daoInf = new LoginDAOImpl();

		/*
		 * Getting user role from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");
		loginForm = (LoginForm) session.get("USER");

		RegistrationDAOinf registrationDAOinf = new RegistrationDAOImpl();
		PrescriptionManagementDAOInf managementDAOInf = new PrescriptionManagementDAOImpl();
		/*
		 * Setting clinicID from session into clinicID variable from PatientForm
		 */
		patientForm.setClinicID(loginForm.getClinicID());
		patientForm.setVisitTypeID(loginForm.getVisitTypeID());

		String check1 = patientDAOInf.verifyReferralLetter(patientForm.getVisitID());
		System.out.println("check1 value in action:" + check1);
		request.setAttribute("referralLetterCheck", check1);

		String check = patientDAOInf.verifyMedicalCertificate(patientForm.getVisitID());
		System.out.println("check value in action:" + check);
		request.setAttribute("medicalCertiCheck", check);

		/*
		 * updating visit details into Visit table
		 */
		message = serviceInf.editNewGenaralClinicVisitDetails(patientForm);

		if (message.equals("success")) {

			addActionMessage("Successfully updated Visit details.");

			/*
			 * retrieving patientList which contains visit details
			 */

			patientList = patientDAOInf.retrieveGeneralClinicPatientDetails(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID());

			boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

			if (visitCheck) {
				billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
			} else {
				billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
						loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
			}
			// String dummy = "";
			String dummy = "success";

			request.setAttribute("lasteEnteredVisitList", dummy);

			/* Retrieve labReport List */
			labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
					loginForm.getClinicID());

			String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
			request.setAttribute("paymentType", paymentType);

			String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

			request.setAttribute("medicalCertiText", medicatCertificate);

			String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

			request.setAttribute("referralLetter", referralLetter);
			/*
			 * retrieving prescription list by visitID
			 */
			prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID());

			InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

			diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());
			InvestigationList = configurationUtil.getInvestigationList();

			diagnoseList = configurationUtil.getDiagnoseList();

			request.setAttribute("apptID", patientForm.getAptID());

			frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

			doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

			complaintList = patientDAOInf.retrievecomplaintList(patientForm.getVisitID());

			historyList = patientDAOInf.retrieveMedicalHistoryList(patientForm.getPatientID());

			medicationList = patientDAOInf.retrieveCurrentMedicationList(patientForm.getPatientID());

			hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Updated General Clinic Visit & Prescription Details",
					loginForm.getUserID());

			String[] formNameArray = loginForm.getOPDJSPName().split("&");

			System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[0].trim());

			// Setting add opd page name value in pageName variable
			setPageName(formNameArray[0].trim());

			return SUCCESS;

		} else {

			addActionError("Eexception occurred while updating visit details. Please check logs for more details.");

			String dummy = "success";

			request.setAttribute("lasteEnteredVisitList", "");

			/*
			 * retrieving patientList which contains visit details
			 */
			patientList = patientDAOInf.retrieveGeneralClinicPatientDetails(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID());

			request.setAttribute("apptID", patientForm.getAptID());

			diagnoseList = configurationUtil.getDiagnoseList();

			hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

			diagnoseList = configurationUtil.getDiagnoseList();

			billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
					loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());

			/* Retrieve labReport List */
			labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
					loginForm.getClinicID());

			String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

			request.setAttribute("medicalCertiText", medicatCertificate);

			String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

			request.setAttribute("referralLetter", referralLetter);

			historyList = patientDAOInf.retrieveMedicalHistoryList(patientForm.getPatientID());

			medicationList = patientDAOInf.retrieveCurrentMedicationList(patientForm.getPatientID());

			complaintList = patientDAOInf.retrievecomplaintList(patientForm.getVisitID());

			String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
			request.setAttribute("paymentType", paymentType);
			/*
			 * retrieving prescription list by visitID
			 */
			prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID());

			InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

			diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());

			InvestigationList = configurationUtil.getInvestigationList();

			frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(),
					"While Updating General Clinic Visit & Prescription Exception occurred", loginForm.getUserID());

			/*
			 * Getting form name to be display based on logged in User
			 */
			String[] formNameArray = loginForm.getOPDJSPName().split("&");

			System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[0].trim());

			// Setting add opd page name value in pageName variable
			setPageName(formNameArray[0].trim());

			return ERROR;
		}
	}

	/**
	 * 
	 * @return
	 * @throws Exception
	 */
	public String printGeneralClinicVisit() throws Exception {

		patientDAOInf = new PatientDAOImpl();

		serviceInf = new eDhanvantariServiceImpl();

		RegistrationDAOinf registrationDAOinf = new RegistrationDAOImpl();
		PrescriptionManagementDAOInf managementDAOInf = new PrescriptionManagementDAOImpl();

		LoginDAOInf daoInf = new LoginDAOImpl();

		ConvertToPDFUtil convertToPDFUtil = new ConvertToPDFUtil();

		String accessKey = xmlUtil.getAccessKey();

		String secreteKey = xmlUtil.getSecreteKey();

		AWSS3Connect awss3Connect = new AWSS3Connect();

		// getting input file location from S3 bucket
		String s3reportFilePath = xmlUtil.getS3RDMLReportFilePath();

		// getting s3 bucket name
		String bucketName = util.getS3BucketName();

		// getting s3 bucket region
		String bucketRegion = xmlUtil.getS3BucketRegion();

		String s3LogoFilePath = xmlUtil.getS3RDMLFilePath();

		AWSCredentials credentials = new BasicAWSCredentials(accessKey, secreteKey);

		AmazonS3 s3 = AmazonS3ClientBuilder.standard().withCredentials(new AWSStaticCredentialsProvider(credentials))
				.withRegion(bucketRegion).build();

		ServletContext context = request.getServletContext();

		String realPath = context.getRealPath("/");

		/*
		 * Getting user role from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");
		loginForm = (LoginForm) session.get("USER");

		/*
		 * Setting clinicID from session into clinicID variable from PatientForm
		 */
		patientForm.setClinicID(loginForm.getClinicID());
		patientForm.setVisitTypeID(loginForm.getVisitTypeID());

		String username = patientDAOInf.retrieveUsernameBYuserID(loginForm.getUserID());

		String check1 = patientDAOInf.verifyReferralLetter(patientForm.getVisitID());
		System.out.println("check1 value in action:" + check1);
		request.setAttribute("referralLetterCheck", check1);

		String check = patientDAOInf.verifyMedicalCertificate(patientForm.getVisitID());
		System.out.println("check value in action:" + check);
		request.setAttribute("medicalCertiCheck", check);

		/*
		 * Getting form name to be display based on logged in User
		 */
		String[] formNameArray = loginForm.getOPDJSPName().split("&");

		/*
		 * updating visit details into Visit table
		 */
		message = serviceInf.editNewGenaralClinicVisitDetails(patientForm);

		if (message.equals("success")) {

			/*
			 * retrieving patientList which contains visit details
			 */

			patientList = patientDAOInf.retrieveGeneralClinicPatientDetails(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID());

			// String dummy = "";
			String dummy = "success";

			request.setAttribute("lasteEnteredVisitList", dummy);

			// String pdfOutFIleName = realPath + patientForm.getFirstName() +
			// patientForm.getLastName()
			String pdfOutFIleName = patientForm.getFirstName() + patientForm.getLastName() + patientForm.getPatientID()
					+ "_" + patientForm.getVisitID() + "_Visit.pdf";

			message = convertToPDFUtil.convertGenaralClinicVisitPDF(patientForm.getPatientID(),
					patientForm.getVisitID(), realPath, pdfOutFIleName, loginForm.getClinicID(),
					loginForm.getPracticeID(), username, s3, s3LogoFilePath, bucketName);

			if (message.equalsIgnoreCase("success")) {

				addActionMessage("Visit pdf generated successfully");

				File inputFile = new File(realPath + "/" + pdfOutFIleName);

				// Storing file to S3 RDML INPUT FILE location
				message = awss3Connect.pushFile(inputFile, pdfOutFIleName, bucketName, bucketRegion, s3reportFilePath);

				S3ObjectInputStream s3ObjectInputStream = s3
						.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, pdfOutFIleName))
						.getObjectContent();

				patientForm.setFileInputStream(s3ObjectInputStream);

				patientForm.setFileName(pdfOutFIleName);

			} else {
				addActionError("Failed to print visit.Please check server logs for more details.");
			}

			boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

			if (visitCheck) {
				billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
			} else {
				billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
						loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
			}

			/* Retrieve labReport List */
			labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
					loginForm.getClinicID());

			String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
			request.setAttribute("paymentType", paymentType);

			String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

			request.setAttribute("medicalCertiText", medicatCertificate);

			String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

			request.setAttribute("referralLetter", referralLetter);

			complaintList = patientDAOInf.retrievecomplaintList(patientForm.getVisitID());

			historyList = patientDAOInf.retrieveMedicalHistoryList(patientForm.getPatientID());

			medicationList = patientDAOInf.retrieveCurrentMedicationList(patientForm.getPatientID());

			hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());
			/*
			 * retrieving prescription list by visitID
			 */
			prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID());

			InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

			diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());
			InvestigationList = configurationUtil.getInvestigationList();

			diagnoseList = configurationUtil.getDiagnoseList();

			request.setAttribute("apptID", patientForm.getAptID());

			frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

			doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Updated General Clinic Visit & Prescription Details",
					loginForm.getUserID());

			System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[0].trim());

			// Setting add opd page name value in pageName variable
			setPageName(formNameArray[0].trim());

			return SUCCESS;

		} else {

			addActionError("Eexception occurred while updating visit details. Please check logs for more details.");

			String dummy = "success";

			request.setAttribute("lasteEnteredVisitList", "");

			String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

			request.setAttribute("medicalCertiText", medicatCertificate);

			String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

			request.setAttribute("referralLetter", referralLetter);

			labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
					loginForm.getClinicID());
			String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());

			request.setAttribute("paymentType", paymentType);

			complaintList = patientDAOInf.retrievecomplaintList(patientForm.getVisitID());

			historyList = patientDAOInf.retrieveMedicalHistoryList(patientForm.getPatientID());

			medicationList = patientDAOInf.retrieveCurrentMedicationList(patientForm.getPatientID());

			billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
					loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
			/*
			 * retrieving patientList which contains visit details
			 */
			patientList = patientDAOInf.retrieveGeneralClinicPatientDetails(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID());

			request.setAttribute("apptID", patientForm.getAptID());

			diagnoseList = configurationUtil.getDiagnoseList();

			/*
			 * retrieving prescription list by visitID
			 */
			/*
			 * retrieving prescription list by visitID
			 */
			prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID());

			InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

			diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());

			InvestigationList = configurationUtil.getInvestigationList();

			frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(),
					"While Updating General Clinic Visit & Prescription Exception occurred", loginForm.getUserID());

			System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[0].trim());

			// Setting add opd page name value in pageName variable
			setPageName(formNameArray[0].trim());

			return ERROR;
		}
	}

	/**
	 * 
	 * @return
	 * @throws Exception
	 */
	public String printGeneralClinicEditVisit() throws Exception {

		patientDAOInf = new PatientDAOImpl();

		serviceInf = new eDhanvantariServiceImpl();

		LoginDAOInf daoInf = new LoginDAOImpl();

		ConvertToPDFUtil convertToPDFUtil = new ConvertToPDFUtil();

		RegistrationDAOinf registrationDAOinf = new RegistrationDAOImpl();
		PrescriptionManagementDAOInf managementDAOInf = new PrescriptionManagementDAOImpl();

		String accessKey = xmlUtil.getAccessKey();

		String secreteKey = xmlUtil.getSecreteKey();

		AWSS3Connect awss3Connect = new AWSS3Connect();

		// getting input file location from S3 bucket
		String s3reportFilePath = xmlUtil.getS3RDMLReportFilePath();

		// getting s3 bucket name
		String bucketName = util.getS3BucketName();

		// getting s3 bucket region
		String bucketRegion = xmlUtil.getS3BucketRegion();

		String s3LogoFilePath = xmlUtil.getS3RDMLFilePath();

		AWSCredentials credentials = new BasicAWSCredentials(accessKey, secreteKey);

		AmazonS3 s3 = AmazonS3ClientBuilder.standard().withCredentials(new AWSStaticCredentialsProvider(credentials))
				.withRegion(bucketRegion).build();

		ServletContext context = request.getServletContext();

		String realPath = context.getRealPath("/");

		/*
		 * Getting user role from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");
		loginForm = (LoginForm) session.get("USER");

		String check1 = patientDAOInf.verifyReferralLetter(patientForm.getVisitID());
		System.out.println("check1 value in action:" + check1);
		request.setAttribute("referralLetterCheck", check1);

		String check = patientDAOInf.verifyMedicalCertificate(patientForm.getVisitID());
		System.out.println("check value in action:" + check);
		request.setAttribute("medicalCertiCheck", check);

		/*
		 * Setting clinicID from session into clinicID variable from PatientForm
		 */
		patientForm.setClinicID(loginForm.getClinicID());
		patientForm.setVisitTypeID(loginForm.getVisitTypeID());

		String username = patientDAOInf.retrieveUsernameBYuserID(loginForm.getUserID());

		/*
		 * Getting form name to be display based on logged in User
		 */
		String[] formNameArray = loginForm.getOPDJSPName().split("&");

		/*
		 * updating visit details into Visit table
		 */
		message = serviceInf.editNewGenaralClinicVisitDetails(patientForm);

		if (message.equals("success")) {

			/*
			 * retrieving patientList which contains visit details
			 */

			patientList = patientDAOInf.retrieveGeneralClinicPatientDetails(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID());

			// String dummy = "";
			String dummy = "success";

			request.setAttribute("lasteEnteredVisitList", dummy);

			// String pdfOutFIleName = realPath + patientForm.getFirstName() +
			// patientForm.getLastName()
			String pdfOutFIleName = patientForm.getFirstName() + patientForm.getLastName() + patientForm.getPatientID()
					+ "_" + patientForm.getVisitID() + "_Visit.pdf";

			message = convertToPDFUtil.convertGenaralClinicVisitPDF(patientForm.getPatientID(),
					patientForm.getVisitID(), realPath, pdfOutFIleName, loginForm.getClinicID(),
					loginForm.getPracticeID(), username, s3, s3LogoFilePath, bucketName);

			if (message.equalsIgnoreCase("success")) {

				addActionMessage("Visit pdf generated successfully");

				File inputFile = new File(realPath + "/" + pdfOutFIleName);

				// Storing file to S3 RDML INPUT FILE location
				message = awss3Connect.pushFile(inputFile, pdfOutFIleName, bucketName, bucketRegion, s3reportFilePath);

				S3ObjectInputStream s3ObjectInputStream = s3
						.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, pdfOutFIleName))
						.getObjectContent();

				patientForm.setFileInputStream(s3ObjectInputStream);

				patientForm.setFileName(pdfOutFIleName);

			} else {
				addActionError("Failed to print visit.Please check server logs for more details.");
			}

			boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

			if (visitCheck) {
				billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
			} else {
				billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
						loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
			}

			/* Retrieve labReport List */
			labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
					loginForm.getClinicID());

			String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
			request.setAttribute("paymentType", paymentType);

			String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

			request.setAttribute("medicalCertiText", medicatCertificate);

			String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

			request.setAttribute("referralLetter", referralLetter);

			complaintList = patientDAOInf.retrievecomplaintList(patientForm.getVisitID());

			historyList = patientDAOInf.retrieveMedicalHistoryList(patientForm.getPatientID());

			medicationList = patientDAOInf.retrieveCurrentMedicationList(patientForm.getPatientID());
			/*
			 * retrieving prescription list by visitID
			 */
			prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID());

			InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

			diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());
			InvestigationList = configurationUtil.getInvestigationList();

			diagnoseList = configurationUtil.getDiagnoseList();

			request.setAttribute("apptID", patientForm.getAptID());

			frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

			doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

			hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Updated General Clinic Visit & Prescription Details",
					loginForm.getUserID());

			System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[0].trim());

			// Setting add opd page name value in pageName variable
			setPageName(formNameArray[1].trim());

			return SUCCESS;

		} else {

			addActionError("Eexception occurred while updating visit details. Please check logs for more details.");

			String dummy = "success";

			request.setAttribute("lasteEnteredVisitList", "");

			/*
			 * retrieving patientList which contains visit details
			 */
			patientList = patientDAOInf.retrieveGeneralClinicPatientDetails(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID());

			boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

			if (visitCheck) {
				billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
			} else {
				billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
						loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
			}

			/* Retrieve labReport List */
			labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
					loginForm.getClinicID());

			complaintList = patientDAOInf.retrievecomplaintList(patientForm.getVisitID());

			historyList = patientDAOInf.retrieveMedicalHistoryList(patientForm.getPatientID());

			medicationList = patientDAOInf.retrieveCurrentMedicationList(patientForm.getPatientID());

			String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

			request.setAttribute("medicalCertiText", medicatCertificate);

			String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

			request.setAttribute("referralLetter", referralLetter);

			request.setAttribute("apptID", patientForm.getAptID());

			diagnoseList = configurationUtil.getDiagnoseList();

			/*
			 * retrieving prescription list by visitID
			 */
			/*
			 * retrieving prescription list by visitID
			 */
			prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID());

			InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

			diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());

			InvestigationList = configurationUtil.getInvestigationList();

			frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(),
					"While Updating General Clinic Visit & Prescription Exception occurred", loginForm.getUserID());

			System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[0].trim());

			// Setting add opd page name value in pageName variable
			setPageName(formNameArray[1].trim());

			return ERROR;
		}
	}

	/**
	 * 
	 * @return
	 * @throws Exception
	 */
	public String addNewIPDGeneralClinicVisit() throws Exception {

		patientDAOInf = new PatientDAOImpl();

		serviceInf = new eDhanvantariServiceImpl();

		LoginDAOInf daoInf = new LoginDAOImpl();

		/*
		 * Getting user role from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");
		loginForm = (LoginForm) session.get("USER");

		RegistrationDAOinf registrationDAOinf = new RegistrationDAOImpl();
		PrescriptionManagementDAOInf managementDAOInf = new PrescriptionManagementDAOImpl();

		/*
		 * Setting clinicID from session into clinicID variable from PatientForm
		 */
		patientForm.setClinicID(loginForm.getClinicID());
		patientForm.setVisitTypeID(loginForm.getVisitTypeID());

		boolean newVisitCheck = patientDAOInf.CheckVisitTypeNewVisitCheck(loginForm.getVisitTypeID());

		int lastIPDVisitID = 0;

		if (newVisitCheck) {
			lastIPDVisitID = 0;

		} else {
			lastIPDVisitID = patientDAOInf.retrieveLastOPDVisitID(patientForm.getPatientID(), loginForm.getClinicID());
		}

		/*
		 * inserting visit details into Visit table
		 */
		message = serviceInf.addNewIPDGenaralClinicVisitDetails(patientForm);

		if (message.equals("success")) {

			addActionMessage("New visit added successfully.");

			/*
			 * retrieving patientList which contains visit details
			 */
			patientList = patientDAOInf.retrieveGenaralClinicPatientDetailsForIPDVisit(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID());

			boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

			if (visitCheck) {
				billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
			} else {
				billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
						loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
			}

			/*
			 * Update appointment status to Consultation
			 */
			patientDAOInf.updateConsultationAppointmentStatus(patientForm.getPatientID(), patientForm.getAptID());

			/* Retrieve labReport List */
			labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
					loginForm.getClinicID());

			String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
			request.setAttribute("paymentType", paymentType);

			String check1 = patientDAOInf.verifyReferralLetter(patientForm.getVisitID());
			System.out.println("check1 value in action:" + check1);
			request.setAttribute("referralLetterCheck", check1);

			String check = patientDAOInf.verifyMedicalCertificate(patientForm.getVisitID());
			System.out.println("check value in action:" + check);
			request.setAttribute("medicalCertiCheck", check);

			String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

			request.setAttribute("medicalCertiText", medicatCertificate);

			String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

			request.setAttribute("referralLetter", referralLetter);
			// String dummy = "";
			String dummy = "success";

			request.setAttribute("lastEnteredIPDVisitList", dummy);

			/*
			 * retrieving prescription list by visitID
			 */
			prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID());

			InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

			diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());
			InvestigationList = configurationUtil.getInvestigationList();

			diagnoseList = configurationUtil.getDiagnoseList();

			request.setAttribute("apptID", patientForm.getAptID());

			frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

			hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Added General Clinic Visit & Prescription Details",
					loginForm.getUserID());

			String[] formNameArray = loginForm.getOPDJSPName().split("&");

			System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[0].trim());

			// Setting add opd page name value in pageName variable
			setPageName(formNameArray[0].trim());

			return SUCCESS;

		} else {

			addActionError("Eexception occurred while adding visit details. Please check logs for more details.");

			String dummy = "success";

			request.setAttribute("lastEnteredIPDVisitList", "");

			/*
			 * retrieving patientList which contains visit details
			 */
			patientList = patientDAOInf.retrieveGenaralClinicPatientDetailsForNewIPDVisit(patientForm.getPatientID(),
					lastIPDVisitID, loginForm.getClinicID());

			request.setAttribute("apptID", patientForm.getAptID());

			diagnoseList = configurationUtil.getDiagnoseList();

			hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

			request.setAttribute("medicalCertiCheck", "no");

			request.setAttribute("referralLetterCheck", "no");

			billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
					loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());

			/* Retrieve labReport List */
			labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
					loginForm.getClinicID());

			complaintList = patientDAOInf.retrievecomplaintList(patientForm.getVisitID());

			String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
			request.setAttribute("paymentType", paymentType);

			/*
			 * retrieving prescription list by visitID
			 */
			/*
			 * retrieving prescription list by visitID
			 */
			prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID());

			InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

			diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());

			InvestigationList = configurationUtil.getInvestigationList();

			frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(),
					"While Adding General Clinic Visit & Prescription Exception occurred", loginForm.getUserID());

			/*
			 * Update appointment status to Consultation
			 */
			patientDAOInf.updateConsultationAppointmentStatus(patientForm.getPatientID(), patientForm.getAptID());
			/*
			 * Getting form name to be display based on logged in User
			 */
			String[] formNameArray = loginForm.getOPDJSPName().split("&");

			System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[0].trim());

			// Setting add opd page name value in pageName variable
			setPageName(formNameArray[0].trim());

			return ERROR;

		}

	}

	/**
	 * 
	 * @return
	 * @throws Exception
	 */
	public String editIPDGeneralClinicVisit() throws Exception {

		patientDAOInf = new PatientDAOImpl();

		serviceInf = new eDhanvantariServiceImpl();

		LoginDAOInf daoInf = new LoginDAOImpl();

		/*
		 * Getting user role from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");
		loginForm = (LoginForm) session.get("USER");

		RegistrationDAOinf registrationDAOinf = new RegistrationDAOImpl();
		PrescriptionManagementDAOInf managementDAOInf = new PrescriptionManagementDAOImpl();
		/*
		 * Setting clinicID from session into clinicID variable from PatientForm
		 */
		patientForm.setClinicID(loginForm.getClinicID());
		patientForm.setVisitTypeID(loginForm.getVisitTypeID());

		/*
		 * updating visit details into Visit table
		 */
		message = serviceInf.editIPDGenaralClinicVisitDetails(patientForm);

		if (message.equals("success")) {

			addActionMessage("Successfully updated Visit details.");

			/*
			 * retrieving patientList which contains visit details
			 */

			patientList = patientDAOInf.retrieveGenaralClinicPatientDetailsForIPDVisit(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID());

			boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

			if (visitCheck) {
				billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
			} else {
				billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
						loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
			}

			/* Retrieve labReport List */
			labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
					loginForm.getClinicID());

			String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
			request.setAttribute("paymentType", paymentType);

			String check1 = patientDAOInf.verifyReferralLetter(patientForm.getVisitID());
			System.out.println("check1 value in action:" + check1);
			request.setAttribute("referralLetterCheck", check1);

			String check = patientDAOInf.verifyMedicalCertificate(patientForm.getVisitID());
			System.out.println("check value in action:" + check);
			request.setAttribute("medicalCertiCheck", check);

			String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

			request.setAttribute("medicalCertiText", medicatCertificate);

			String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

			request.setAttribute("referralLetter", referralLetter);

			// String dummy = "";
			String dummy = "success";

			request.setAttribute("lastEnteredIPDVisitList", dummy);

			/*
			 * retrieving prescription list by visitID
			 */
			prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID());

			InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

			diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());
			InvestigationList = configurationUtil.getInvestigationList();

			diagnoseList = configurationUtil.getDiagnoseList();

			request.setAttribute("apptID", patientForm.getAptID());

			frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

			doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Updated General Clinic Visit & Prescription Details",
					loginForm.getUserID());

			String[] formNameArray = loginForm.getOPDJSPName().split("&");

			System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[0].trim());

			// Setting add opd page name value in pageName variable
			setPageName(formNameArray[1].trim());

			return SUCCESS;

		} else {

			addActionError("Eexception occurred while updating visit details. Please check logs for more details.");

			String dummy = "success";

			request.setAttribute("lastEnteredIPDVisitList", "");

			/*
			 * retrieving patientList which contains visit details
			 */
			patientList = patientDAOInf.retrieveGenaralClinicPatientDetailsForIPDVisit(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID());

			request.setAttribute("apptID", patientForm.getAptID());

			diagnoseList = configurationUtil.getDiagnoseList();

			request.setAttribute("medicalCertiCheck", "no");

			request.setAttribute("referralLetterCheck", "no");

			billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
					loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());

			/* Retrieve labReport List */
			labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
					loginForm.getClinicID());

			complaintList = patientDAOInf.retrievecomplaintList(patientForm.getVisitID());

			String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
			request.setAttribute("paymentType", paymentType);

			/*
			 * retrieving prescription list by visitID
			 */
			/*
			 * retrieving prescription list by visitID
			 */
			prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID());

			InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

			diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());

			InvestigationList = configurationUtil.getInvestigationList();

			frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(),
					"While Updating General Clinic Visit & Prescription Exception occurred", loginForm.getUserID());

			/*
			 * Getting form name to be display based on logged in User
			 */
			String[] formNameArray = loginForm.getOPDJSPName().split("&");

			System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[0].trim());

			// Setting add opd page name value in pageName variable
			setPageName(formNameArray[1].trim());

			return ERROR;

		}

	}

	/**
	 * 
	 * @return
	 * @throws Exception
	 */
	public String updateIPDGeneralClinicVisit() throws Exception {

		patientDAOInf = new PatientDAOImpl();

		serviceInf = new eDhanvantariServiceImpl();

		LoginDAOInf daoInf = new LoginDAOImpl();

		RegistrationDAOinf registrationDAOinf = new RegistrationDAOImpl();
		PrescriptionManagementDAOInf managementDAOInf = new PrescriptionManagementDAOImpl();

		String check1 = patientDAOInf.verifyReferralLetter(patientForm.getVisitID());
		System.out.println("check1 value in action:" + check1);
		request.setAttribute("referralLetterCheck", check1);

		String check = patientDAOInf.verifyMedicalCertificate(patientForm.getVisitID());
		System.out.println("check value in action:" + check);
		request.setAttribute("medicalCertiCheck", check);

		/*
		 * Getting user role from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");
		loginForm = (LoginForm) session.get("USER");

		/*
		 * Setting clinicID from session into clinicID variable from PatientForm
		 */
		patientForm.setClinicID(loginForm.getClinicID());
		patientForm.setVisitTypeID(loginForm.getVisitTypeID());

		/*
		 * updating visit details into Visit table
		 */
		message = serviceInf.editIPDGenaralClinicVisitDetails(patientForm);

		if (message.equals("success")) {

			addActionMessage("Successfully updated Visit details.");

			/*
			 * retrieving patientList which contains visit details
			 */

			patientList = patientDAOInf.retrieveGenaralClinicPatientDetailsForIPDVisit(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID());

			boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

			if (visitCheck) {
				billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
			} else {
				billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
						loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
			}

			/* Retrieve labReport List */
			labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
					loginForm.getClinicID());

			String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
			request.setAttribute("paymentType", paymentType);

			String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

			request.setAttribute("medicalCertiText", medicatCertificate);

			String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

			request.setAttribute("referralLetter", referralLetter);

			// String dummy = "";
			String dummy = "success";

			request.setAttribute("lastEnteredIPDVisitList", dummy);

			/*
			 * retrieving prescription list by visitID
			 */
			prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID());

			InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

			diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());
			InvestigationList = configurationUtil.getInvestigationList();

			diagnoseList = configurationUtil.getDiagnoseList();

			request.setAttribute("apptID", patientForm.getAptID());

			frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

			doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

			hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Updated General Clinic Visit & Prescription Details",
					loginForm.getUserID());

			String[] formNameArray = loginForm.getOPDJSPName().split("&");

			System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[0].trim());

			// Setting add opd page name value in pageName variable
			setPageName(formNameArray[0].trim());

			return SUCCESS;

		} else {

			addActionError("Eexception occurred while updating visit details. Please check logs for more details.");

			String dummy = "success";

			request.setAttribute("lastEnteredIPDVisitList", "");

			/*
			 * retrieving patientList which contains visit details
			 */
			patientList = patientDAOInf.retrieveGenaralClinicPatientDetailsForIPDVisit(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID());

			request.setAttribute("apptID", patientForm.getAptID());

			diagnoseList = configurationUtil.getDiagnoseList();

			billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
					loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());

			/* Retrieve labReport List */
			labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
					loginForm.getClinicID());

			String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

			request.setAttribute("medicalCertiText", medicatCertificate);

			String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

			request.setAttribute("referralLetter", referralLetter);

			historyList = patientDAOInf.retrieveMedicalHistoryList(patientForm.getPatientID());

			medicationList = patientDAOInf.retrieveCurrentMedicationList(patientForm.getPatientID());

			complaintList = patientDAOInf.retrievecomplaintList(patientForm.getVisitID());

			String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
			request.setAttribute("paymentType", paymentType);

			/*
			 * retrieving prescription list by visitID
			 */
			/*
			 * retrieving prescription list by visitID
			 */
			prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID());

			InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

			diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());

			InvestigationList = configurationUtil.getInvestigationList();

			frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(),
					"While Updating General Clinic Visit & Prescription Exception occurred", loginForm.getUserID());

			/*
			 * Getting form name to be display based on logged in User
			 */
			String[] formNameArray = loginForm.getOPDJSPName().split("&");

			System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[0].trim());

			// Setting add opd page name value in pageName variable
			setPageName(formNameArray[0].trim());

			return ERROR;

		}

	}

	/**
	 * 
	 * @return
	 * @throws Exception
	 */
	public String printIPDGeneralClinicVisit() throws Exception {

		patientDAOInf = new PatientDAOImpl();

		serviceInf = new eDhanvantariServiceImpl();

		LoginDAOInf daoInf = new LoginDAOImpl();

		RegistrationDAOinf registrationDAOinf = new RegistrationDAOImpl();
		PrescriptionManagementDAOInf managementDAOInf = new PrescriptionManagementDAOImpl();

		ConvertToPDFUtil convertToPDFUtil = new ConvertToPDFUtil();

		String accessKey = xmlUtil.getAccessKey();

		String secreteKey = xmlUtil.getSecreteKey();

		AWSS3Connect awss3Connect = new AWSS3Connect();

		// getting input file location from S3 bucket
		String s3reportFilePath = xmlUtil.getS3RDMLReportFilePath();

		// getting s3 bucket name
		String bucketName = util.getS3BucketName();

		// getting s3 bucket region
		String bucketRegion = xmlUtil.getS3BucketRegion();

		String s3LogoFilePath = xmlUtil.getS3RDMLFilePath();

		AWSCredentials credentials = new BasicAWSCredentials(accessKey, secreteKey);

		AmazonS3 s3 = AmazonS3ClientBuilder.standard().withCredentials(new AWSStaticCredentialsProvider(credentials))
				.withRegion(bucketRegion).build();

		ServletContext context = request.getServletContext();

		String realPath = context.getRealPath("/");

		String check1 = patientDAOInf.verifyReferralLetter(patientForm.getVisitID());
		System.out.println("check1 value in action:" + check1);
		request.setAttribute("referralLetterCheck", check1);

		String check = patientDAOInf.verifyMedicalCertificate(patientForm.getVisitID());
		System.out.println("check value in action:" + check);
		request.setAttribute("medicalCertiCheck", check);

		/*
		 * Getting user role from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");
		loginForm = (LoginForm) session.get("USER");

		/*
		 * Getting form name to be display based on logged in User
		 */
		String[] formNameArray = loginForm.getOPDJSPName().split("&");

		/*
		 * Setting clinicID from session into clinicID variable from PatientForm
		 */
		patientForm.setClinicID(loginForm.getClinicID());
		patientForm.setVisitTypeID(loginForm.getVisitTypeID());

		String username = patientDAOInf.retrieveUsernameBYuserID(loginForm.getUserID());

		/*
		 * updating visit details into Visit table
		 */
		message = serviceInf.editNewGenaralClinicVisitDetails(patientForm);

		if (message.equals("success")) {

			/*
			 * retrieving patientList which contains visit details
			 */

			patientList = patientDAOInf.retrieveGenaralClinicPatientDetailsForIPDVisit(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID());

			if (formNameArray[0].trim().equals("genaralClinicIPDNew.jsp")) {
				System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[0].trim());

				// Setting add opd page name value in pageName variable
				setPageName(formNameArray[0].trim());
			} else if (formNameArray[1].trim().equals("genaralClinicIPDEdit.jsp")) {
				System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[1].trim());

				// Setting add opd page name value in pageName variable
				setPageName(formNameArray[1].trim());
			}

			boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

			if (visitCheck) {
				billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
			} else {
				billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
						loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
			}

			/* Retrieve labReport List */
			labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
					loginForm.getClinicID());

			String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
			request.setAttribute("paymentType", paymentType);

			String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

			request.setAttribute("medicalCertiText", medicatCertificate);

			String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

			request.setAttribute("referralLetter", referralLetter);

			// String dummy = "";
			String dummy = "success";

			request.setAttribute("lastEnteredIPDVisitList", dummy);

			// String pdfOutFIleName = realPath + patientForm.getFirstName() +
			// patientForm.getLastName()
			String pdfOutFIleName = patientForm.getFirstName() + patientForm.getLastName() + patientForm.getPatientID()
					+ "_" + patientForm.getVisitID() + "_Visit.pdf";

			message = convertToPDFUtil.convertGenaralIPDClinicVisitPDF(patientForm.getPatientID(),
					patientForm.getVisitID(), realPath, pdfOutFIleName, loginForm.getClinicID(),
					loginForm.getPracticeID(), username, s3, s3LogoFilePath, bucketName);

			if (message.equalsIgnoreCase("success")) {

				addActionMessage("Visit pdf generated successfully");

				File inputFile = new File(realPath + "/" + pdfOutFIleName);

				// Storing file to S3 RDML INPUT FILE location
				message = awss3Connect.pushFile(inputFile, pdfOutFIleName, bucketName, bucketRegion, s3reportFilePath);

				S3ObjectInputStream s3ObjectInputStream = s3
						.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, pdfOutFIleName))
						.getObjectContent();

				patientForm.setFileInputStream(s3ObjectInputStream);

				patientForm.setFileName(pdfOutFIleName);

			} else {
				addActionError("Failed to print visit.Please check server logs for more details.");
			}
			/*
			 * retrieving prescription list by visitID
			 */
			prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID());

			InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

			diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());
			InvestigationList = configurationUtil.getInvestigationList();

			diagnoseList = configurationUtil.getDiagnoseList();

			request.setAttribute("apptID", patientForm.getAptID());

			frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

			doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

			hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Updated General Clinic Visit & Prescription Details",
					loginForm.getUserID());

			return SUCCESS;

		} else {

			addActionError("Eexception occurred while updating visit details. Please check logs for more details.");

			patientList = patientDAOInf.retrieveGenaralClinicPatientDetailsForIPDVisit(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID());

			if (formNameArray[0].trim().equals("genaralClinicIPDNew.jsp")) {

				System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[0].trim());

				// Setting add opd page name value in pageName variable
				setPageName(formNameArray[0].trim());
			} else if (formNameArray[1].trim().equals("genaralClinicIPDEdit.jsp")) {

				System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[1].trim());

				// Setting add opd page name value in pageName variable
				setPageName(formNameArray[1].trim());
			}

			String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

			request.setAttribute("medicalCertiText", medicatCertificate);

			String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

			request.setAttribute("referralLetter", referralLetter);

			labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
					loginForm.getClinicID());
			String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());

			request.setAttribute("paymentType", paymentType);

			billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
					loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());

			request.setAttribute("lastEnteredIPDVisitList", "");

			request.setAttribute("apptID", patientForm.getAptID());

			diagnoseList = configurationUtil.getDiagnoseList();

			/*
			 * retrieving prescription list by visitID
			 */
			/*
			 * retrieving prescription list by visitID
			 */
			prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID());

			InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

			diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());

			InvestigationList = configurationUtil.getInvestigationList();

			frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(),
					"While Updating General Clinic Visit & Prescription Exception occurred", loginForm.getUserID());

			return ERROR;
		}
	}

	/**
	 * 
	 * @return
	 * @throws Exception
	 */
	public String printIPDGeneralClinicEditVisit() throws Exception {

		patientDAOInf = new PatientDAOImpl();

		serviceInf = new eDhanvantariServiceImpl();

		LoginDAOInf daoInf = new LoginDAOImpl();

		ConvertToPDFUtil convertToPDFUtil = new ConvertToPDFUtil();

		String accessKey = xmlUtil.getAccessKey();

		String secreteKey = xmlUtil.getSecreteKey();

		AWSS3Connect awss3Connect = new AWSS3Connect();

		// getting input file location from S3 bucket
		String s3reportFilePath = xmlUtil.getS3RDMLReportFilePath();

		// getting s3 bucket name
		String bucketName = util.getS3BucketName();

		String s3LogoFilePath = xmlUtil.getS3RDMLFilePath();

		// getting s3 bucket region
		String bucketRegion = xmlUtil.getS3BucketRegion();

		AWSCredentials credentials = new BasicAWSCredentials(accessKey, secreteKey);

		AmazonS3 s3 = AmazonS3ClientBuilder.standard().withCredentials(new AWSStaticCredentialsProvider(credentials))
				.withRegion(bucketRegion).build();

		ServletContext context = request.getServletContext();

		String realPath = context.getRealPath("/");

		/*
		 * Getting user role from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");
		loginForm = (LoginForm) session.get("USER");

		RegistrationDAOinf registrationDAOinf = new RegistrationDAOImpl();
		PrescriptionManagementDAOInf managementDAOInf = new PrescriptionManagementDAOImpl();

		/*
		 * Getting form name to be display based on logged in User
		 */
		String[] formNameArray = loginForm.getOPDJSPName().split("&");

		String check1 = patientDAOInf.verifyReferralLetter(patientForm.getVisitID());
		System.out.println("check1 value in action:" + check1);
		request.setAttribute("referralLetterCheck", check1);

		String check = patientDAOInf.verifyMedicalCertificate(patientForm.getVisitID());
		System.out.println("check value in action:" + check);
		request.setAttribute("medicalCertiCheck", check);

		/*
		 * Setting clinicID from session into clinicID variable from PatientForm
		 */
		patientForm.setClinicID(loginForm.getClinicID());
		patientForm.setVisitTypeID(loginForm.getVisitTypeID());

		String username = patientDAOInf.retrieveUsernameBYuserID(loginForm.getUserID());

		/*
		 * updating visit details into Visit table
		 */
		message = serviceInf.editNewGenaralClinicVisitDetails(patientForm);

		if (message.equals("success")) {

			/*
			 * retrieving patientList which contains visit details
			 */

			patientList = patientDAOInf.retrieveGenaralClinicPatientDetailsForIPDVisit(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID());

			// String dummy = "";
			String dummy = "success";

			request.setAttribute("lastEnteredIPDVisitList", dummy);

			// String pdfOutFIleName = realPath + patientForm.getFirstName() +
			// patientForm.getLastName()
			String pdfOutFIleName = patientForm.getFirstName() + patientForm.getLastName() + patientForm.getPatientID()
					+ "_" + patientForm.getVisitID() + "_Visit.pdf";

			message = convertToPDFUtil.convertGenaralIPDClinicVisitPDF(patientForm.getPatientID(),
					patientForm.getVisitID(), realPath, pdfOutFIleName, loginForm.getClinicID(),
					loginForm.getPracticeID(), username, s3, s3LogoFilePath, bucketName);

			if (message.equalsIgnoreCase("success")) {

				addActionMessage("Visit pdf generated successfully");

				File inputFile = new File(realPath + "/" + pdfOutFIleName);

				// Storing file to S3 RDML INPUT FILE location
				message = awss3Connect.pushFile(inputFile, pdfOutFIleName, bucketName, bucketRegion, s3reportFilePath);

				S3ObjectInputStream s3ObjectInputStream = s3
						.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, pdfOutFIleName))
						.getObjectContent();

				patientForm.setFileInputStream(s3ObjectInputStream);

				patientForm.setFileName(pdfOutFIleName);

			} else {
				addActionError("Failed to print visit.Please check server logs for more details.");
			}

			boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

			if (visitCheck) {
				billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
			} else {
				billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
						loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
			}

			/* Retrieve labReport List */
			labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
					loginForm.getClinicID());

			String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
			request.setAttribute("paymentType", paymentType);

			String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

			request.setAttribute("medicalCertiText", medicatCertificate);

			String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

			request.setAttribute("referralLetter", referralLetter);

			/*
			 * retrieving prescription list by visitID
			 */
			prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID());

			InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

			diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());

			InvestigationList = configurationUtil.getInvestigationList();

			diagnoseList = configurationUtil.getDiagnoseList();

			request.setAttribute("apptID", patientForm.getAptID());

			frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

			doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

			hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Updated General Clinic Visit & Prescription Details",
					loginForm.getUserID());

			System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[1].trim());

			// Setting add opd page name value in pageName variable
			setPageName(formNameArray[1].trim());

			return SUCCESS;

		} else {

			addActionError("Eexception occurred while updating visit details. Please check logs for more details.");

			patientList = patientDAOInf.retrieveGenaralClinicPatientDetailsForIPDVisit(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID());

			boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

			if (visitCheck) {
				billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
			} else {
				billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
						loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
			}

			/* Retrieve labReport List */
			labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
					loginForm.getClinicID());

			complaintList = patientDAOInf.retrievecomplaintList(patientForm.getVisitID());

			historyList = patientDAOInf.retrieveMedicalHistoryList(patientForm.getPatientID());

			medicationList = patientDAOInf.retrieveCurrentMedicationList(patientForm.getPatientID());

			String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

			request.setAttribute("medicalCertiText", medicatCertificate);

			String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

			request.setAttribute("referralLetter", referralLetter);

			request.setAttribute("lastEnteredIPDVisitList", "");

			request.setAttribute("apptID", patientForm.getAptID());

			diagnoseList = configurationUtil.getDiagnoseList();

			/*
			 * retrieving prescription list by visitID
			 */
			/*
			 * retrieving prescription list by visitID
			 */
			prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID());

			InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

			diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());

			InvestigationList = configurationUtil.getInvestigationList();

			frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(),
					"While Updating General Clinic Visit & Prescription Exception occurred", loginForm.getUserID());

			System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[1].trim());

			// Setting add opd page name value in pageName variable
			setPageName(formNameArray[1].trim());

			return ERROR;
		}
	}

	public void verifyProductNetStock() throws Exception {

		patientDAOInf = new PatientDAOImpl();

		serviceInf = new eDhanvantariServiceImpl();

		JSONObject values = new JSONObject();

		JSONArray array = new JSONArray();
		values = new JSONObject();

		JSONObject object = new JSONObject();

		response.setCharacterEncoding("UTF-8");

		/*
		 * Getting userID from Session
		 */
		LoginForm userForm = (LoginForm) session.get("USER");

		try {

			double totalStock = patientDAOInf.retrieveTotalNetStockByProductName(patientForm.getProductName(),
					userForm.getClinicID());

			if (patientForm.getQuantity() > totalStock) {
				object.put("check", "1");
				object.put("netStock", totalStock);

				array.add(object);
				values.put("Release", array);
			} else {

				int val = patientForm.getQuantity();
				while (val > 0) {
					int stockID = patientDAOInf.retrieveProductStockID(patientForm.getProductName(),
							userForm.getClinicID());

					double netStock = patientDAOInf.retrieveProductNetStock(patientForm.getProductName(), stockID,
							userForm.getClinicID());

					if (netStock > val) {

						double updatedNetStock = netStock - (double) val;

						patientDAOInf.updateNetStock(updatedNetStock, stockID);

						val = 0;

					} else if (netStock == val || netStock < val) {

						patientDAOInf.updateNetStockAndStatus(0.0, stockID);
						double updatedNetStock = (double) val - netStock;

						val = (int) updatedNetStock;

					}

					object.put("check", "0");
					object.put("netStock", netStock);

					array.add(object);

					values.put("Release", array);
				}
			}
			PrintWriter out = response.getWriter();

			out.print(values);

		} catch (Exception exception) {

			StringWriter stringWriter = new StringWriter();

			exception.printStackTrace(new PrintWriter(stringWriter));

			// calling exception mail send method to send mail about the exception details
			// on info@kovidbioanalytics.com
			EmailUtil emailUtil = new EmailUtil();
			emailUtil.sendExceptionInfoEmail(stringWriter.toString(), "Verify Product Net Stock: Exception");

			exception.printStackTrace();

			object.put("ErrMsg", "Exception occured while retrieving product net stock from Stock table");
			array.add(object);

			values.put("Release", array);

			PrintWriter out = response.getWriter();

			out.print(values);
		}
	}

	/**
	 * 
	 * @throws Exception
	 */
	public void searchPatientNameList() throws Exception {

		response.setContentType("application/json");
		PatientDetailsList = configurationUtil.getPatientDetailsList(patientForm.getSearchName(),
				patientForm.getPracticeID(), patientForm.getClinicID());

		String searchList = new Gson().toJson(PatientDetailsList);

		System.out.println("List: " + PatientDetailsList.size() + "--" + searchList);
		System.out.println("..--" + PatientDetailsList.keySet());
		response.getWriter().write(searchList);

	}

	/**
	 * 
	 * @throws Exception
	 */
	public void deleteLabReport() throws Exception {

		patientDAOInf = new PatientDAOImpl();

		JSONObject values = new JSONObject();

		JSONArray array = new JSONArray();
		values = new JSONObject();

		JSONObject object = new JSONObject();

		response.setCharacterEncoding("UTF-8");

		try {

			values = patientDAOInf.deleteLabReport(patientForm.getReportsID());

			PrintWriter out = response.getWriter();

			out.print(values);

		} catch (Exception exception) {
			exception.printStackTrace();

			object.put("ErrMsg", "Exception occured while deleting Report record.");
			array.add(object);

			values.put("Release", array);

			PrintWriter out = response.getWriter();

			out.print(values);
		}
	}

	/**
	 * 
	 * @return
	 * @throws Exception
	 */
	public String addNewLabVisit() throws Exception {

		patientDAOInf = new PatientDAOImpl();

		serviceInf = new eDhanvantariServiceImpl();

		LoginDAOInf daoInf = new LoginDAOImpl();

		/*
		 * Getting user role from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");

		/*
		 * Setting clinicID from session into clinicID variable from PatientForm
		 */
		patientForm.setClinicID(loginForm.getClinicID());
		patientForm.setVisitTypeID(loginForm.getVisitTypeID());

		/*
		 * retrieving patient gender based on patientID
		 */
		String patientGender = patientDAOInf.retrievePatientGenderByPatientID(patientForm.getPatientID());

		/*
		 * inserting visit details into Visit table
		 */
		message = serviceInf.addNewLabVisit(patientForm);

		if (message.equals("success")) {

			addActionMessage("Lab visit added successfully.");

			/*
			 * retrieving patientList which contains visit details
			 */
			patientList = patientDAOInf.retrieveLabPatientDetails(patientForm.getPatientID(), patientForm.getVisitID(),
					loginForm.getClinicID(), patientForm.getAptID());

			String dummy = "success";

			request.setAttribute("lasteEnteredVisitList", dummy);

			mdDetailsList = configurationUtil.getMDDoctorList(loginForm.getPracticeID());

			labTestValueListNew = configurationUtil.getLabInvestigationsValueList(patientForm.getVisitID());

			request.setAttribute("labTestValueListNew", labTestValueListNew);

			labTestValueListNew1 = configurationUtil.getLabInvestigationsValueList1(patientForm.getVisitID());

			request.setAttribute("labTestValueListNew1", labTestValueListNew1);

			billList = patientDAOInf.retrieveBillDetail(patientForm.getVisitID(), loginForm.getVisitTypeID(),
					loginForm.getClinicID(), loginForm.getClinicSuffix());

			request.setAttribute("billCheck", "false");

			prescriptionList = patientDAOInf.retrieveTransactionDetailsByVisitID(patientForm.getVisitID());

			groupTestList = patientDAOInf.retrieveTransactionDetailsForGroupTestByVisitID(patientForm.getVisitID());

			String paymentType = patientDAOInf.retrievePaymentType(patientForm.getVisitID());

			request.setAttribute("paymentType", paymentType);

			/*
			 * Update appointment status to Consultation
			 */
			patientDAOInf.updateConsultationAppointmentStatus(patientForm.getPatientID(), patientForm.getAptID());

			diagnoseList = configurationUtil.getDiagnoseList();

			request.setAttribute("apptID", patientForm.getAptID());

			String labTest = patientDAOInf.retrieveLabTestByVisitID(patientForm.getVisitID());

			request.setAttribute("labTest", labTest);

			doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Add Lab Visit", loginForm.getUserID());

			/*
			 * Getting form name to be display based on logged in User
			 */
			String[] formNameArray = loginForm.getOPDJSPName().split("&");

			System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[0].trim());

			// Setting add opd page name value in pageName variable
			setPageName(formNameArray[0].trim());

			return SUCCESS;

		} else {

			addActionError("Eexception occurred while adding visit details. Please check logs for more details.");

			/*
			 * retrieving patientList which contains visit details
			 */
			patientList = patientDAOInf.retrieveLabPatientDetails(patientForm.getPatientID(), patientForm.getVisitID(),
					loginForm.getClinicID(), patientForm.getAptID());

			request.setAttribute("apptID", patientForm.getAptID());

			diagnoseList = configurationUtil.getDiagnoseList();

			mdDetailsList = configurationUtil.getMDDoctorList(loginForm.getPracticeID());

			labTestValueListNew = configurationUtil.getLabInvestigationsValueList(patientForm.getVisitID());

			request.setAttribute("labTestValueListNew", labTestValueListNew);

			billList = patientDAOInf.retrieveBillDetail(patientForm.getVisitID(), loginForm.getVisitTypeID(),
					loginForm.getClinicID(), loginForm.getClinicSuffix());

			request.setAttribute("billCheck", "false");

			prescriptionList = patientDAOInf.retrieveTransactionDetailsByVisitID(patientForm.getVisitID());

			groupTestList = patientDAOInf.retrieveTransactionDetailsForGroupTestByVisitID(patientForm.getVisitID());

			doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

			String labTest = patientDAOInf.retrieveLabTestByVisitID(patientForm.getVisitID());

			request.setAttribute("labTest", labTest);

			/* Update appointment status to Consultation */
			patientDAOInf.updateConsultationAppointmentStatus(patientForm.getPatientID(), patientForm.getAptID());

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Add Lab Visit Exception occurred", loginForm.getUserID());

			/*
			 * Getting form name to be display based on logged in User
			 */
			String[] formNameArray = loginForm.getOPDJSPName().split("&");

			System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[0].trim());

			// Setting add opd page name value in pageName variable
			setPageName(formNameArray[0].trim());

			return ERROR;
		}
	}

	/**
	 * 
	 * @return String
	 * @throws Exception
	 */
	public String addNewLabBill() throws Exception {
		serviceInf = new eDhanvantariServiceImpl();
		patientDAOInf = new PatientDAOImpl();

		LoginDAOInf daoInf = new LoginDAOImpl();

		SMSSender smsSender = new SMSSender();

		EmailUtil emailUtil = new EmailUtil();

		// RegistrationDAOinf registrationDAOinf = new RegistrationDAOImpl();

		ConvertToPDFUtil convertToPDFUtil = new ConvertToPDFUtil();

		HttpServletRequest request = ServletActionContext.getRequest();

		ServletContext context = request.getServletContext();

		ConfigXMLUtil configXMLUtil = new ConfigXMLUtil();

		String accessKey = xmlUtil.getAccessKey();

		String secreteKey = xmlUtil.getSecreteKey();

		AWSS3Connect awss3Connect = new AWSS3Connect();

		// getting input file location from S3 bucket
		String s3reportFilePath = xmlUtil.getS3RDMLReportFilePath();

		String s3LogoFilePath = xmlUtil.getS3RDMLFilePath();

		// getting s3 bucket name
		String bucketName = util.getS3BucketName();

		// getting s3 bucket region
		String bucketRegion = xmlUtil.getS3BucketRegion();

		AWSCredentials credentials = new BasicAWSCredentials(accessKey, secreteKey);

		AmazonS3 s3 = AmazonS3ClientBuilder.standard().withCredentials(new AWSStaticCredentialsProvider(credentials))
				.withRegion(bucketRegion).build();

		/*
		 * retrieving patient gender based on patientID
		 */
		String patientGender = patientDAOInf.retrievePatientGenderByPatientID(patientForm.getPatientID());

		request.setAttribute("gender", patientGender);

		/*
		 * Getting user role from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");

		patientForm.setVisitTypeID(loginForm.getVisitTypeID());
		patientForm.setClinicID(loginForm.getClinicID());
		patientForm.setUserID(loginForm.getUserID());

		message = serviceInf.addLabBill(patientForm);
		if (message.equalsIgnoreCase("success")) {

			String realPath = context.getRealPath("/");

			prescriptionList = patientDAOInf.retrieveTransactionListByVisitID(patientForm.getVisitID());

			String pdfOutFIleName = patientForm.getFirstName() + patientForm.getLastName() + patientForm.getPatientID()
					+ "_" + patientForm.getVisitID() + "_bill.pdf";

			String fullName = daoInf.retrieveUserFullNameByUserID(loginForm.getUserID());

			message = convertToPDFUtil.convertLabBillingPDF(patientForm.getPatientID(), patientForm.getVisitID(),
					realPath, pdfOutFIleName, loginForm.getClinicID(), fullName, s3, s3LogoFilePath, bucketName);

			if (message.equals("success")) {

				addActionMessage("New Bill added successfully.");

				File inputFile = new File(realPath + "/" + pdfOutFIleName);

				// Storing file to S3 RDML INPUT FILE location
				message = awss3Connect.pushFile(inputFile, pdfOutFIleName, bucketName, bucketRegion, s3reportFilePath);

				S3ObjectInputStream s3ObjectInputStream = s3
						.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, pdfOutFIleName))
						.getObjectContent();

				request.setAttribute("PDFOutFileName", pdfOutFIleName);

				patientForm.setFileInputStream(s3ObjectInputStream);
				patientForm.setFileName(pdfOutFIleName);

				String billingTabCheck = "enable";

				request.setAttribute("billingTabCheck", billingTabCheck);

				request.setAttribute("PDFOutFileName", pdfOutFIleName);

				/*
				 * Check whether appointment udpated flag is on or not, and depending upon that
				 * sending SMS and Email
				 */
				boolean SMSCheck = util.verifyCommunicationCheck("smsBill");

				if (SMSCheck) {

					/*
					 * Retrieving patient's mobile no, if mobile is not null, then sending patient a
					 * welcome message
					 */
					String mobileNo = patientDAOInf.retrievePatientMobileNoByID(patientForm.getPatientID());

					/*
					 * Sending patient a welcome as well as Appointment scheduled message on
					 * checking whether mobile no is available for that patient or not
					 */
					if (mobileNo == null || mobileNo == "") {
						System.out.println("Mobile no not found for patient.");
					} else {

						if (mobileNo.isEmpty()) {
							System.out.println("Mobile no not found for patient.");
						} else {

							/*
							 * Sending bill details SMS to patient
							 */
							smsSender.sendGeneralisedLabPrescriptionORBillSMS(patientForm.getVisitID(), mobileNo,
									loginForm.getPracticeID(), loginForm.getClinicID(), ActivityStatus.BILL);
						}
					}

				}

				/*
				 * Check whether appointment udpated flag is on or not, and depending upon that
				 * sending SMS and Email
				 */
				boolean EmailCheck = util.verifyCommunicationCheck("emailBill");

				if (EmailCheck) {

					/*
					 * Retrieving patient's email ID, if not null, then sending patient a welcome
					 * mail
					 */
					String emailID = patientDAOInf.retrievePatientEmailByID(patientForm.getPatientID());

					if (emailID == null || emailID == "") {
						System.out.println("EmailID no not found for patient.");
					} else {

						if (emailID.isEmpty()) {
							System.out.println("EmailID no not found for patient.");
						} else {

							String fileName = patientForm.getFirstName() + patientForm.getLastName()
									+ patientForm.getPatientID() + "_" + patientForm.getVisitID() + "_bill.pdf";
							/*
							 * Sending welcome mail to patient
							 */
							emailUtil.sendBillingMail(patientForm.getPatientID(), loginForm.getPracticeID(),
									loginForm.getClinicID(), patientForm.getVisitID(), fileName, emailID);
						}

					}

				}

				/*
				 * Update appointment status to Billing
				 */
				patientDAOInf.updateBillingAppointmentStatus(patientForm.getPatientID(), patientForm.getAptID());

				/*
				 * retrieving patientList which contains visit details
				 */
				patientList = patientDAOInf.retrieveLabPatientDetails(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID(), patientForm.getAptID());

				billList = patientDAOInf.retrieveBillDetail(patientForm.getVisitID(), loginForm.getVisitTypeID(),
						loginForm.getClinicID(), loginForm.getClinicSuffix());

				request.setAttribute("billCheck", "true");

				String paymentType = patientDAOInf.retrievePaymentType(patientForm.getVisitID());

				request.setAttribute("paymentType", paymentType);

				String dummy = "success";

				request.setAttribute("lasteEnteredVisitList", dummy);

				mdDetailsList = configurationUtil.getMDDoctorList(loginForm.getPracticeID());

				labTestValueListNew = configurationUtil.getLabInvestigationsValueList(patientForm.getVisitID());

				request.setAttribute("labTestValueListNew", labTestValueListNew);

				labTestValueListNew1 = configurationUtil.getLabInvestigationsValueList1(patientForm.getVisitID());

				request.setAttribute("labTestValueListNew1", labTestValueListNew1);

				diagnoseList = configurationUtil.getDiagnoseList();

				request.setAttribute("apptID", patientForm.getAptID());

				doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

				String labTest = patientDAOInf.retrieveLabTestByVisitID(patientForm.getVisitID());

				request.setAttribute("labTest", labTest);

				// Inserting values into Audit table
				daoInf.insertAudit(request.getRemoteAddr(), "Add Lab Billing", loginForm.getUserID());

				/*
				 * Getting form name to be display based on logged in User
				 */
				String[] formNameArray = loginForm.getOPDJSPName().split("&");

				System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[0].trim());

				// Setting add opd page name value in pageName variable
				setPageName(formNameArray[0].trim());

				return SUCCESS;

			} else {
				addActionError("Failed to create bill PDF. Please check server logs for more details.");

				String billingTabCheck = "enable";

				request.setAttribute("billingTabCheck", billingTabCheck);

				request.setAttribute("billCheck", "true");

				/*
				 * Update appointment status to Billing
				 */
				patientDAOInf.updateBillingAppointmentStatus(patientForm.getPatientID(), patientForm.getAptID());

				/*
				 * retrieving patientList which contains visit details
				 */
				patientList = patientDAOInf.retrieveLabPatientDetails(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID(), patientForm.getAptID());

				billList = patientDAOInf.retrieveBillDetail(patientForm.getVisitID(), loginForm.getVisitTypeID(),
						loginForm.getClinicID(), loginForm.getClinicSuffix());

				String paymentType = patientDAOInf.retrievePaymentType(patientForm.getVisitID());

				request.setAttribute("paymentType", paymentType);

				String dummy = "success";

				request.setAttribute("lasteEnteredVisitList", dummy);

				mdDetailsList = configurationUtil.getMDDoctorList(loginForm.getPracticeID());

				labTestValueListNew = configurationUtil.getLabInvestigationsValueList(patientForm.getVisitID());

				request.setAttribute("labTestValueListNew", labTestValueListNew);

				diagnoseList = configurationUtil.getDiagnoseList();

				request.setAttribute("apptID", patientForm.getAptID());

				String labTest = patientDAOInf.retrieveLabTestByVisitID(patientForm.getVisitID());

				request.setAttribute("labTest", labTest);

				doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

				// Inserting values into Audit table
				daoInf.insertAudit(request.getRemoteAddr(), "Add Lab Billing PDF Exception Occurred.",
						loginForm.getUserID());

				/*
				 * Getting form name to be display based on logged in User
				 */
				String[] formNameArray = loginForm.getOPDJSPName().split("&");

				System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[0].trim());

				// Setting add opd page name value in pageName variable
				setPageName(formNameArray[0].trim());

				return ERROR;
			}

		} else if (message.equals("noVisit")) {
			addActionError("No visit added.Please add visit first.");

			String billingTabCheck = "enable";

			request.setAttribute("billingTabCheck", billingTabCheck);

			/*
			 * Update appointment status to Billing
			 */
			patientDAOInf.updateBillingAppointmentStatus(patientForm.getPatientID(), patientForm.getAptID());

			/*
			 * retrieving patientList which contains visit details
			 */
			patientList = patientDAOInf.retrieveLabPatientDetails(patientForm.getPatientID(), patientForm.getVisitID(),
					loginForm.getClinicID(), patientForm.getAptID());

			String dummy = "success";

			request.setAttribute("lasteEnteredVisitList", dummy);

			billList = patientDAOInf.retrieveBillDetail(patientForm.getVisitID(), loginForm.getVisitTypeID(),
					loginForm.getClinicID(), loginForm.getClinicSuffix());

			// verify whether receipt added for the current visitID if yes then retrieve the
			// details from Transctions tables else retrive the details from the
			// LabInvestigation tables for the corresponding visitID based on isGroup check
			boolean billCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

			if (billCheck) {
				request.setAttribute("billCheck", "true");

				prescriptionList = patientDAOInf.retrieveTransactionListByVisitID(patientForm.getVisitID());
			} else {

				request.setAttribute("billCheck", "false");

				prescriptionList = patientDAOInf.retrieveTransactionDetailsByVisitID(patientForm.getVisitID());

				groupTestList = patientDAOInf.retrieveTransactionDetailsForGroupTestByVisitID(patientForm.getVisitID());
			}

			String paymentType = patientDAOInf.retrievePaymentType(patientForm.getVisitID());

			request.setAttribute("paymentType", paymentType);

			mdDetailsList = configurationUtil.getMDDoctorList(loginForm.getPracticeID());

			labTestValueListNew = configurationUtil.getLabInvestigationsValueList(patientForm.getVisitID());

			diagnoseList = configurationUtil.getDiagnoseList();

			request.setAttribute("apptID", patientForm.getAptID());

			String labTest = patientDAOInf.retrieveLabTestByVisitID(patientForm.getVisitID());

			request.setAttribute("labTest", labTest);

			doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Add Lab Billing Exception Occurred.", loginForm.getUserID());

			/*
			 * Getting form name to be display based on logged in User
			 */
			String[] formNameArray = loginForm.getOPDJSPName().split("&");

			System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[0].trim());

			// Setting add opd page name value in pageName variable
			setPageName(formNameArray[0].trim());

			return ERROR;
		} else {
			addActionError("Failed to add lab bill. Please check server logs for more details.");

			String billingTabCheck = "enable";

			request.setAttribute("billingTabCheck", billingTabCheck);

			/*
			 * Update appointment status to Billing
			 */
			patientDAOInf.updateBillingAppointmentStatus(patientForm.getPatientID(), patientForm.getAptID());

			/*
			 * retrieving patientList which contains visit details
			 */
			patientList = patientDAOInf.retrieveLabPatientDetails(patientForm.getPatientID(), patientForm.getVisitID(),
					loginForm.getClinicID(), patientForm.getAptID());

			billList = patientDAOInf.retrieveBillDetail(patientForm.getVisitID(), loginForm.getVisitTypeID(),
					loginForm.getClinicID(), loginForm.getClinicSuffix());

			// verify whether receipt added for the current visitID if yes then retrieve the
			// details from Transctions tables else retrive the details from the
			// LabInvestigation tables for the corresponding visitID based on isGroup check
			boolean billCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

			if (billCheck) {

				request.setAttribute("billCheck", "true");

				prescriptionList = patientDAOInf.retrieveTransactionListByVisitID(patientForm.getVisitID());
			} else {

				request.setAttribute("billCheck", "false");
				prescriptionList = patientDAOInf.retrieveTransactionDetailsByVisitID(patientForm.getVisitID());

				groupTestList = patientDAOInf.retrieveTransactionDetailsForGroupTestByVisitID(patientForm.getVisitID());
			}

			String paymentType = patientDAOInf.retrievePaymentType(patientForm.getVisitID());

			request.setAttribute("paymentType", paymentType);

			String labTest = patientDAOInf.retrieveLabTestByVisitID(patientForm.getVisitID());

			request.setAttribute("labTest", labTest);

			String dummy = "success";

			request.setAttribute("lasteEnteredVisitList", dummy);

			diagnoseList = configurationUtil.getDiagnoseList();

			doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Add Lab Billing Exception Occurred.", loginForm.getUserID());

			/*
			 * Getting form name to be display based on logged in User
			 */
			String[] formNameArray = loginForm.getOPDJSPName().split("&");

			System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[0].trim());

			// Setting add opd page name value in pageName variable
			setPageName(formNameArray[0].trim());

			return ERROR;
		}
	}

	/**
	 * 
	 * @return String
	 * @throws Exception
	 */
	public String editLabVisit() throws Exception {
		patientDAOInf = new PatientDAOImpl();

		serviceInf = new eDhanvantariServiceImpl();

		LoginDAOInf daoInf = new LoginDAOImpl();

		RegistrationDAOinf registrationDAOinf = new RegistrationDAOImpl();

		/*
		 * Getting user role from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");

		String paymentType = patientDAOInf.retrievePaymentType(patientForm.getVisitID());

		request.setAttribute("paymentType", paymentType);

		request.setAttribute("apptID", patientForm.getAptID());

		message = serviceInf.editLabVisit(patientForm);
		if (message.equalsIgnoreCase("success")) {
			addActionMessage("Successfully updated Visit details.");

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Edit Lab Visit", loginForm.getUserID());

			boolean resultCheck = patientDAOInf.verifyResultAddedForVisit(patientForm.getVisitID());

			request.setAttribute("resultCheck", resultCheck);

			/*
			 * Retrieving patient age based on patientID
			 */
			String patientAge = patientDAOInf.retrievePatientAgeByPatientID(patientForm.getPatientID());

			request.setAttribute("patientAge", patientAge);

			/*
			 * retrieving patient gender based on patientID
			 */
			String patientGender = patientDAOInf.retrievePatientGenderByPatientID(patientForm.getPatientID());

			request.setAttribute("gender", patientGender);

			hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

			patientList = patientDAOInf.retrieveLabPatientDetails(patientForm.getPatientID(), patientForm.getVisitID(),
					loginForm.getClinicID(), patientForm.getAptID());

			mdDetailsList = configurationUtil.getMDDoctorList(loginForm.getPracticeID());

			labTestValueListNew = configurationUtil.getLabInvestigationsValueList(patientForm.getVisitID());

			request.setAttribute("labTestValueListNew", labTestValueListNew);

			labTestValueListNew1 = configurationUtil.getLabInvestigationsValueList1(patientForm.getVisitID());

			request.setAttribute("labTestValueListNew1", labTestValueListNew1);

			billList = patientDAOInf.retrieveBillDetail(patientForm.getVisitID(), loginForm.getVisitTypeID(),
					loginForm.getClinicID(), loginForm.getClinicSuffix());

			// verify whether receipt added for the current visitID if yes then retrieve the
			// details from Transctions tables else retrive the details from the
			// LabInvestigation tables for the corresponding visitID based on isGroup check
			boolean billCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

			if (billCheck) {

				request.setAttribute("billCheck", "true");

				prescriptionList = patientDAOInf.retrieveTransactionListByVisitID(patientForm.getVisitID());
			} else {

				request.setAttribute("billCheck", "false");

				prescriptionList = patientDAOInf.retrieveTransactionDetailsByVisitID(patientForm.getVisitID());

				groupTestList = patientDAOInf.retrieveTransactionDetailsForGroupTestByVisitID(patientForm.getVisitID());
			}

			labTestListNew = patientDAOInf.retrieveExistingLabTestByVisitID(patientForm.getVisitID());

			request.setAttribute("labTestList", labTestListNew);

			doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

			/*
			 * Getting form name to be display based on logged in User
			 */
			String[] formNameArray = loginForm.getOPDJSPName().split("&");

			System.out.println("Edit OPD JSP Page name for logged in user is ::: " + formNameArray[1].trim());

			// Setting Edit opd page name value in pageName variable
			setPageName(formNameArray[1].trim());

			return SUCCESS;
		} else {
			addActionError("Failed to update lab visit details. Please check logs for more details.");

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Edit Lab Visit Exception occurred", loginForm.getUserID());

			boolean resultCheck = patientDAOInf.verifyResultAddedForVisit(patientForm.getVisitID());

			request.setAttribute("resultCheck", resultCheck);

			/*
			 * Retrieving patient age based on patientID
			 */
			String patientAge = patientDAOInf.retrievePatientAgeByPatientID(patientForm.getPatientID());

			request.setAttribute("patientAge", patientAge);

			/*
			 * retrieving patient gender based on patientID
			 */
			String patientGender = patientDAOInf.retrievePatientGenderByPatientID(patientForm.getPatientID());

			request.setAttribute("gender", patientGender);

			patientList = patientDAOInf.retrieveLabPatientDetails(patientForm.getPatientID(), patientForm.getVisitID(),
					loginForm.getClinicID(), patientForm.getAptID());

			mdDetailsList = configurationUtil.getMDDoctorList(loginForm.getPracticeID());

			labTestValueListNew = configurationUtil.getLabInvestigationsValueList(patientForm.getVisitID());

			request.setAttribute("labTestValueListNew", labTestValueListNew);

			labTestValueListNew1 = configurationUtil.getLabInvestigationsValueList1(patientForm.getVisitID());

			request.setAttribute("labTestValueListNew1", labTestValueListNew1);

			billList = patientDAOInf.retrieveBillDetail(patientForm.getVisitID(), loginForm.getVisitTypeID(),
					loginForm.getClinicID(), loginForm.getClinicSuffix());

			// verify whether receipt added for the current visitID if yes then retrieve the
			// details from Transctions tables else retrive the details from the
			// LabInvestigation tables for the corresponding visitID based on isGroup check
			boolean billCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

			if (billCheck) {

				request.setAttribute("billCheck", "true");

				prescriptionList = patientDAOInf.retrieveTransactionListByVisitID(patientForm.getVisitID());
			} else {

				request.setAttribute("billCheck", "false");

				prescriptionList = patientDAOInf.retrieveTransactionDetailsByVisitID(patientForm.getVisitID());

				groupTestList = patientDAOInf.retrieveTransactionDetailsForGroupTestByVisitID(patientForm.getVisitID());
			}

			labTestListNew = patientDAOInf.retrieveExistingLabTestByVisitID(patientForm.getVisitID());

			request.setAttribute("labTestList", labTestListNew);

			doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

			/*
			 * Getting form name to be display based on logged in User
			 */
			String[] formNameArray = loginForm.getOPDJSPName().split("&");

			System.out.println("Edit OPD JSP Page name for logged in user is ::: " + formNameArray[1].trim());

			// Setting Edit opd page name value in pageName variable
			setPageName(formNameArray[1].trim());

			return ERROR;
		}

	}

	public String editBDPVisit() throws Exception {
		patientDAOInf = new PatientDAOImpl();

		serviceInf = new eDhanvantariServiceImpl();

		LoginDAOInf daoInf = new LoginDAOImpl();

		RegistrationDAOinf registrationDAOinf = new RegistrationDAOImpl();

		genderMap.put("Male", "normalValues");
		genderMap.put("Female", "normalValuesWomen");
		genderMap.put("Child", "normalValuesChild");

		/*
		 * Getting user role from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");

		String paymentType = patientDAOInf.retrievePaymentType(patientForm.getVisitID());

		request.setAttribute("paymentType", paymentType);

		request.setAttribute("apptID", patientForm.getAptID());

		testTypeList = patientDAOInf.retrieveTestTypeForVisitByVisitID(patientForm.getVisitID());

		reportListByVisitID.put(2, "Lab Test Report");

		for (String testTypeValue : testTypeList) {
			String[] testTypeArray = testTypeValue.split("==");

			String testType = testTypeArray[1];
			int investigationID = Integer.parseInt(testTypeArray[0]);
			String test = testTypeArray[2];

			if (testType.equalsIgnoreCase("USG") || testType.equalsIgnoreCase("CTScan")
					|| testType.equalsIgnoreCase("XRay")) {
				reportListByVisitID.put(investigationID, test);
			}

		}

		/*
		 * retrieving patient gender based on patientID
		 */
		String patientGender = patientDAOInf.retrievePatientGenderByPatientID(patientForm.getPatientID());

		request.setAttribute("gender", patientGender);

		message = serviceInf.editBDPVisit(patientForm);
		if (message.equalsIgnoreCase("success")) {
			addActionMessage("Successfully updated Visit details.");

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Edit Lab Visit", loginForm.getUserID());

			boolean resultCheck = patientDAOInf.verifyResultAddedForVisit(patientForm.getVisitID());

			request.setAttribute("resultCheck", resultCheck);

			getGroupTestList = configurationUtil.getGroupTestList(loginForm.getPracticeID(),
					genderMap.get(patientGender));
			getSingleTestList = configurationUtil.getSingleTestList(loginForm.getPracticeID(),
					genderMap.get(patientGender));

			/*
			 * Retrieving patient age based on patientID
			 */
			String patientAge = patientDAOInf.retrievePatientAgeByPatientID(patientForm.getPatientID());

			request.setAttribute("patientAge", patientAge);

			testTypeList = patientDAOInf.retrieveTestTypeForVisitByVisitID(patientForm.getVisitID());

			request.setAttribute("testTypeList", testTypeList);

			reportList = configurationUtil.getRepostList(loginForm.getVisitTypeID());

			doctorList1 = configurationUtil.getDoctorList(loginForm.getPracticeID());

			referringDoctorList = configurationUtil.getReferringDoctorList1(loginForm.getPracticeID());
			refDocList = configurationUtil.getRefDocList(loginForm.getPracticeID());

			hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

			patientList = patientDAOInf.retrieveLabPatientDetails(patientForm.getPatientID(), patientForm.getVisitID(),
					loginForm.getClinicID(), patientForm.getAptID());

			mdDetailsList = configurationUtil.getMDDoctorList(loginForm.getPracticeID());

			labTestValueListNew = configurationUtil.getLabInvestigationsValueList(patientForm.getVisitID());

			request.setAttribute("labTestValueListNew", labTestValueListNew);

			labTestValueListNew1 = configurationUtil.getLabInvestigationsValueList1(patientForm.getVisitID());

			request.setAttribute("labTestValueListNew1", labTestValueListNew1);

			billList = patientDAOInf.retrieveBillDetail(patientForm.getVisitID(), loginForm.getVisitTypeID(),
					loginForm.getClinicID(), loginForm.getClinicSuffix());

			// verify whether receipt added for the current visitID if yes then retrieve the
			// details from Transctions tables else retrive the details from the
			// LabInvestigation tables for the corresponding visitID based on isGroup check
			boolean billCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

			if (billCheck) {

				request.setAttribute("billCheck", "true");

				prescriptionList = patientDAOInf.retrieveTransactionListByVisitID(patientForm.getVisitID());
			} else {

				request.setAttribute("billCheck", "false");

				prescriptionList = patientDAOInf.retrieveTransactionDetailsByVisitID(patientForm.getVisitID());

				groupTestList = patientDAOInf.retrieveTransactionDetailsForGroupTestByVisitID(patientForm.getVisitID());
			}

			labTestListNew = patientDAOInf.retrieveExistingLabTestByVisitID(patientForm.getVisitID());

			request.setAttribute("labTestList", labTestListNew);
			
			subGroups = patientDAOInf.manupulateSubGroupData(labTestListNew, loginForm);

			request.setAttribute("subGroups", subGroups);

			doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

			/*
			 * Getting form name to be display based on logged in User
			 */
			String[] formNameArray = loginForm.getOPDJSPName().split("&");

			System.out.println("Edit OPD JSP Page name for logged in user is ::: " + formNameArray[1].trim());

			// Setting Edit opd page name value in pageName variable
			setPageName(formNameArray[1].trim());

			return SUCCESS;
		} else {
			addActionError("Failed to update lab visit details. Please check logs for more details.");

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Edit Lab Visit Exception occurred", loginForm.getUserID());

			boolean resultCheck = patientDAOInf.verifyResultAddedForVisit(patientForm.getVisitID());

			request.setAttribute("resultCheck", resultCheck);

			/*
			 * Retrieving patient age based on patientID
			 */
			String patientAge = patientDAOInf.retrievePatientAgeByPatientID(patientForm.getPatientID());

			request.setAttribute("patientAge", patientAge);

			getGroupTestList = configurationUtil.getGroupTestList(loginForm.getPracticeID(),
					genderMap.get(patientGender));
			getSingleTestList = configurationUtil.getSingleTestList(loginForm.getPracticeID(),
					genderMap.get(patientGender));

			testTypeList = patientDAOInf.retrieveTestTypeForVisitByVisitID(patientForm.getVisitID());

			request.setAttribute("testTypeList", testTypeList);

			reportList = configurationUtil.getRepostList(loginForm.getVisitTypeID());

			doctorList1 = configurationUtil.getDoctorList(loginForm.getPracticeID());

			referringDoctorList = configurationUtil.getReferringDoctorList1(loginForm.getPracticeID());
			refDocList = configurationUtil.getRefDocList(loginForm.getPracticeID());

			patientList = patientDAOInf.retrieveLabPatientDetails(patientForm.getPatientID(), patientForm.getVisitID(),
					loginForm.getClinicID(), patientForm.getAptID());

			mdDetailsList = configurationUtil.getMDDoctorList(loginForm.getPracticeID());

			labTestValueListNew = configurationUtil.getLabInvestigationsValueList(patientForm.getVisitID());

			request.setAttribute("labTestValueListNew", labTestValueListNew);

			labTestValueListNew1 = configurationUtil.getLabInvestigationsValueList1(patientForm.getVisitID());

			request.setAttribute("labTestValueListNew1", labTestValueListNew1);

			billList = patientDAOInf.retrieveBillDetail(patientForm.getVisitID(), loginForm.getVisitTypeID(),
					loginForm.getClinicID(), loginForm.getClinicSuffix());

			// verify whether receipt added for the current visitID if yes then retrieve the
			// details from Transctions tables else retrive the details from the
			// LabInvestigation tables for the corresponding visitID based on isGroup check
			boolean billCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

			if (billCheck) {

				request.setAttribute("billCheck", "true");

				prescriptionList = patientDAOInf.retrieveTransactionListByVisitID(patientForm.getVisitID());
			} else {

				request.setAttribute("billCheck", "false");

				prescriptionList = patientDAOInf.retrieveTransactionDetailsByVisitID(patientForm.getVisitID());

				groupTestList = patientDAOInf.retrieveTransactionDetailsForGroupTestByVisitID(patientForm.getVisitID());
			}

			labTestListNew = patientDAOInf.retrieveExistingLabTestByVisitID(patientForm.getVisitID());

			request.setAttribute("labTestList", labTestListNew);
			
			subGroups = patientDAOInf.manupulateSubGroupData(labTestListNew, loginForm);

			request.setAttribute("subGroups", subGroups);

			doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

			/*
			 * Getting form name to be display based on logged in User
			 */
			String[] formNameArray = loginForm.getOPDJSPName().split("&");

			System.out.println("Edit OPD JSP Page name for logged in user is ::: " + formNameArray[1].trim());

			// Setting Edit opd page name value in pageName variable
			setPageName(formNameArray[1].trim());

			return ERROR;
		}

	}

	public String emailLabTestReport() throws Exception {
		/*
		 * Getting user role from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");
		patientDAOInf = new PatientDAOImpl();
		ConvertToPDFUtil convertToPDFUtil = new ConvertToPDFUtil();
		HttpServletRequest request = ServletActionContext.getRequest();
		ServletContext context = request.getServletContext();
		ConfigXMLUtil configXMLUtil = new ConfigXMLUtil();
		LoginDAOInf daoInf = new LoginDAOImpl();
		EmailUtil emailUtil = new EmailUtil();

		RegistrationDAOinf registrationDAOinf = new RegistrationDAOImpl();

		String accessKey = xmlUtil.getAccessKey();

		String secreteKey = xmlUtil.getSecreteKey();

		AWSS3Connect awss3Connect = new AWSS3Connect();

		// getting input file location from S3 bucket
		String s3reportFilePath = xmlUtil.getS3RDMLReportFilePath();

		String s3LogoFilePath = xmlUtil.getS3RDMLFilePath();

		// getting s3 bucket name
		String bucketName = util.getS3BucketName();

		// getting s3 bucket region
		String bucketRegion = xmlUtil.getS3BucketRegion();

		AWSCredentials credentials = new BasicAWSCredentials(accessKey, secreteKey);

		AmazonS3 s3 = AmazonS3ClientBuilder.standard().withCredentials(new AWSStaticCredentialsProvider(credentials))
				.withRegion(bucketRegion).build();

		String paymentType = patientDAOInf.retrievePaymentType(patientForm.getVisitID());
		request.setAttribute("paymentType", paymentType);
		request.setAttribute("apptID", patientForm.getAptID());
		/*
		 * Retrieving patientID from VisitID
		 */
		patientForm.setPatientID(patientDAOInf.retrievePatientIDByVisitID(patientForm.getVisitID()));
		/*
		 * Retrieving patient full name based on patient ID
		 */
		String patientName = patientDAOInf.retrievePatientFullName(patientForm.getPatientID());
		/*
		 * Retrieving patient's visit details
		 */
		patientList = patientDAOInf.retrievePatientVisitDetail(patientForm.getPatientID(), loginForm.getClinicID());
		patientName += "("
				+ patientDAOInf.retrieveClinicRegNoByClinicID(loginForm.getClinicID(), patientForm.getPatientID())
				+ ")";
		/*
		 * Setting patient name into request in order to display it on view existing
		 * list page
		 */
		request.setAttribute("patientName", patientName);
		String realPath = context.getRealPath("/");

		// String filePath = configXMLUtil.getReportFilePath();

		// String fullName = daoInf.retrieveUserFullNameByUserID(loginForm.getUserID());
		String patientNameArr[] = patientDAOInf.retrievePatientFNameLNameByID(patientForm.getPatientID()).split("=");
		String fName = patientNameArr[0];
		String lName = patientNameArr[1];

		String pdfOutFIleName = fName + lName + patientForm.getPatientID() + "_" + patientForm.getVisitID()
				+ "_lab_test_report.pdf";

		String fullName = daoInf.retrieveUserFullNameWithQualification(loginForm.getUserID());

		message = convertToPDFUtil.convertLabReportPDF(patientForm.getPatientID(), patientForm.getVisitID(), realPath,
				pdfOutFIleName, loginForm.getClinicID(), patientForm.getMdDoctorID(), loginForm.getPracticeID(),
				fullName, s3, s3LogoFilePath, bucketName);

		if (message.equalsIgnoreCase("success")) {

			File inputFile = new File(realPath + "/" + pdfOutFIleName);

			// Storing file to S3 RDML INPUT FILE location
			message = awss3Connect.pushFile(inputFile, pdfOutFIleName, bucketName, bucketRegion, s3reportFilePath);

			S3ObjectInputStream s3ObjectInputStream = s3
					.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, pdfOutFIleName))
					.getObjectContent();

			// addActionMessage("Lab report created successfully.");
			String toEmail = patientDAOInf.retrieveToEmailByPractiecID(loginForm.getPracticeID());
			String fromEmail = patientDAOInf.retrieveFromEmailByPractiecID(loginForm.getPracticeID());
			String fromEmailPass = patientDAOInf.retrieveFromEmailPassByPractiecID(loginForm.getPracticeID());
			String clinicName = patientDAOInf.retrieveClinicNameByID(loginForm.getClinicID());

			System.out.println("toemail::" + toEmail + " fromEmail::" + fromEmail + " fromEmailPass::" + fromEmailPass
					+ " clinicName::" + clinicName);

			/*
			 * Sending mail with lab test report
			 */
			message = emailUtil.sendReportMail(toEmail, fromEmail, fromEmailPass, clinicName, realPath, pdfOutFIleName,
					patientNameArr);

			if (message.equals("success")) {
				addActionMessage("Report email sent successfully.");

				boolean resultCheck = patientDAOInf.verifyResultAddedForVisit(patientForm.getVisitID());
				request.setAttribute("resultCheck", resultCheck);
				/*
				 * Retrieving patient age based on patientID
				 */
				String patientAge = patientDAOInf.retrievePatientAgeByPatientID(patientForm.getPatientID());
				request.setAttribute("patientAge", patientAge);
				/*
				 * retrieving patient gender based on patientID
				 */
				String patientGender = patientDAOInf.retrievePatientGenderByPatientID(patientForm.getPatientID());
				request.setAttribute("gender", patientGender);

				hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());

				patientList = patientDAOInf.retrieveLabPatientDetails(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID(), patientForm.getAptID());
				billList = patientDAOInf.retrieveBillDetail(patientForm.getVisitID(), loginForm.getVisitTypeID(),
						loginForm.getClinicID(), loginForm.getClinicSuffix());

				// verify whether receipt added for the current visitID if yes then retrieve the
				// details from Transctions tables else retrive the details from the
				// LabInvestigation tables for the corresponding visitID based on isGroup check
				boolean billCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());
				if (billCheck) {

					request.setAttribute("billCheck", "true");

					prescriptionList = patientDAOInf.retrieveTransactionListByVisitID(patientForm.getVisitID());
				} else {

					request.setAttribute("billCheck", "false");

					prescriptionList = patientDAOInf.retrieveTransactionDetailsByVisitID(patientForm.getVisitID());
					groupTestList = patientDAOInf
							.retrieveTransactionDetailsForGroupTestByVisitID(patientForm.getVisitID());
				}

				labTestListNew = patientDAOInf.retrieveExistingLabTestByVisitID(patientForm.getVisitID());
				request.setAttribute("labTestList", labTestListNew);

				String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());
				request.setAttribute("medicalCertiText", medicatCertificate);

				String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());
				request.setAttribute("referralLetter", referralLetter);

				doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());
				return SUCCESS;
			} else {
				addActionError("Failed to send Report email. Please check server logs for more details.");

				boolean resultCheck = patientDAOInf.verifyResultAddedForVisit(patientForm.getVisitID());
				request.setAttribute("resultCheck", resultCheck);
				/*
				 * Retrieving patient age based on patientID
				 */
				String patientAge = patientDAOInf.retrievePatientAgeByPatientID(patientForm.getPatientID());
				request.setAttribute("patientAge", patientAge);
				/*
				 * retrieving patient gender based on patientID
				 */
				String patientGender = patientDAOInf.retrievePatientGenderByPatientID(patientForm.getPatientID());
				request.setAttribute("gender", patientGender);
				patientList = patientDAOInf.retrieveLabPatientDetails(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID(), patientForm.getAptID());
				billList = patientDAOInf.retrieveBillDetail(patientForm.getVisitID(), loginForm.getVisitTypeID(),
						loginForm.getClinicID(), loginForm.getClinicSuffix());

				// verify whether receipt added for the current visitID if yes then retrieve the
				// details from Transctions tables else retrive the details from the
				// LabInvestigation tables for the corresponding visitID based on isGroup check
				boolean billCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());
				if (billCheck) {

					request.setAttribute("billCheck", "true");

					prescriptionList = patientDAOInf.retrieveTransactionListByVisitID(patientForm.getVisitID());
				} else {

					request.setAttribute("billCheck", "false");

					prescriptionList = patientDAOInf.retrieveTransactionDetailsByVisitID(patientForm.getVisitID());
					groupTestList = patientDAOInf
							.retrieveTransactionDetailsForGroupTestByVisitID(patientForm.getVisitID());
				}

				labTestListNew = patientDAOInf.retrieveExistingLabTestByVisitID(patientForm.getVisitID());
				request.setAttribute("labTestList", labTestListNew);

				String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());
				request.setAttribute("medicalCertiText", medicatCertificate);

				String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());
				request.setAttribute("referralLetter", referralLetter);

				doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());
				return ERROR;
			}

		} else {
			addActionError("Failed to create lab test report. Please check server logs for more details.");
			boolean resultCheck = patientDAOInf.verifyResultAddedForVisit(patientForm.getVisitID());
			request.setAttribute("resultCheck", resultCheck);
			/*
			 * Retrieving patient age based on patientID
			 */
			String patientAge = patientDAOInf.retrievePatientAgeByPatientID(patientForm.getPatientID());
			request.setAttribute("patientAge", patientAge);
			/*
			 * retrieving patient gender based on patientID
			 */
			String patientGender = patientDAOInf.retrievePatientGenderByPatientID(patientForm.getPatientID());
			request.setAttribute("gender", patientGender);

			patientList = patientDAOInf.retrieveLabPatientDetails(patientForm.getPatientID(), patientForm.getVisitID(),
					loginForm.getClinicID(), patientForm.getAptID());
			billList = patientDAOInf.retrieveBillDetail(patientForm.getVisitID(), loginForm.getVisitTypeID(),
					loginForm.getClinicID(), loginForm.getClinicSuffix());

			// verify whether receipt added for the current visitID if yes then retrieve the
			// details from Transctions tables else retrive the details from the
			// LabInvestigation tables for the corresponding visitID based on isGroup check
			boolean billCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());
			if (billCheck) {

				request.setAttribute("billCheck", "true");

				prescriptionList = patientDAOInf.retrieveTransactionListByVisitID(patientForm.getVisitID());
			} else {

				request.setAttribute("billCheck", "false");

				prescriptionList = patientDAOInf.retrieveTransactionDetailsByVisitID(patientForm.getVisitID());
				groupTestList = patientDAOInf.retrieveTransactionDetailsForGroupTestByVisitID(patientForm.getVisitID());
			}

			labTestListNew = patientDAOInf.retrieveExistingLabTestByVisitID(patientForm.getVisitID());
			request.setAttribute("labTestList", labTestListNew);

			String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());
			request.setAttribute("medicalCertiText", medicatCertificate);

			String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());
			request.setAttribute("referralLetter", referralLetter);

			doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());
			return ERROR;
		}
	}

	/**
	 * 
	 * @return
	 * @throws Exception
	 */
	public String downloadLabTestReport() throws Exception {
		/*
		 * Getting user role from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");

		patientDAOInf = new PatientDAOImpl();

		ConvertToPDFUtil convertToPDFUtil = new ConvertToPDFUtil();

		HttpServletRequest request = ServletActionContext.getRequest();

		ServletContext context = request.getServletContext();

		ConfigXMLUtil configXMLUtil = new ConfigXMLUtil();

		LoginDAOInf daoInf = new LoginDAOImpl();

		String accessKey = xmlUtil.getAccessKey();

		String secreteKey = xmlUtil.getSecreteKey();

		AWSS3Connect awss3Connect = new AWSS3Connect();

		// getting input file location from S3 bucket
		String s3reportFilePath = xmlUtil.getS3RDMLReportFilePath();

		String s3LogoFilePath = xmlUtil.getS3RDMLFilePath();

		// getting s3 bucket name
		String bucketName = util.getS3BucketName();

		// getting s3 bucket region
		String bucketRegion = xmlUtil.getS3BucketRegion();

		AWSCredentials credentials = new BasicAWSCredentials(accessKey, secreteKey);

		AmazonS3 s3 = AmazonS3ClientBuilder.standard().withCredentials(new AWSStaticCredentialsProvider(credentials))
				.withRegion(bucketRegion).build();

		/*
		 * Retrieving patientID from VisitID
		 */
		patientForm.setPatientID(patientDAOInf.retrievePatientIDByVisitID(patientForm.getVisitID()));

		/*
		 * Retrieving patient full name based on patient ID
		 */
		String patientName = patientDAOInf.retrievePatientFullName(patientForm.getPatientID());

		/*
		 * Retrieving patient's visit details
		 */
		patientList = patientDAOInf.retrievePatientVisitDetail(patientForm.getPatientID(), loginForm.getClinicID());

		patientName += "("
				+ patientDAOInf.retrieveClinicRegNoByClinicID(loginForm.getClinicID(), patientForm.getPatientID())
				+ ")";

		/*
		 * Setting patient name into request in order to display it on view existing
		 * list page
		 */
		request.setAttribute("patientName", patientName);

		String realPath = context.getRealPath("/");

		// String filePath = configXMLUtil.getReportFilePath();

		String patientNameArr[] = patientDAOInf.retrievePatientFNameLNameByID(patientForm.getPatientID()).split("=");

		String fName = patientNameArr[0];
		String lName = patientNameArr[1];

		String pdfOutFIleName = fName + lName + patientForm.getPatientID() + "_" + patientForm.getVisitID()
				+ "_lab_test_report.pdf";

		String fullName = daoInf.retrieveUserFullNameWithQualification(loginForm.getUserID());

		message = convertToPDFUtil.convertLabReportPDF(patientForm.getPatientID(), patientForm.getVisitID(), realPath,
				pdfOutFIleName, loginForm.getClinicID(), patientForm.getMdDoctorID(), loginForm.getPracticeID(),
				fullName, s3, s3LogoFilePath, bucketName);

		if (message.equalsIgnoreCase("success")) {

			addActionMessage("Lab report created successfully.");

			File inputFile = new File(realPath + "/" + pdfOutFIleName);

			// Storing file to S3 RDML INPUT FILE location
			message = awss3Connect.pushFile(inputFile, pdfOutFIleName, bucketName, bucketRegion, s3reportFilePath);

			S3ObjectInputStream s3ObjectInputStream = s3
					.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, pdfOutFIleName))
					.getObjectContent();

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Download Lab Test Report", loginForm.getUserID());

			patientForm.setFileInputStream(s3ObjectInputStream);
			patientForm.setFileName(pdfOutFIleName);

			/*
			 * File pdfFile = new File(pdfOutFIleName);
			 * 
			 * Setting input Stream variable of PatientForm in order to get file while
			 * downloading
			 * 
			 * patientForm.setFileInputStream(new FileInputStream(pdfFile));
			 * 
			 * // Setting fileName to be given to downloaded zip file // name
			 * patientForm.setFileName(pdfFile.getName());
			 */

			return SUCCESS;
		} else {
			addActionError("Failed to create lab test report. Please check server logs for more details.");

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Download Lab Test Report PDF Exception Occurred",
					loginForm.getUserID());

			return ERROR;
		}
	}

	/**
	 * 
	 * @return
	 * @throws Exception
	 */
	public String downloadBDPLabTestReport() throws Exception {
		/*
		 * Getting user role from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");

		patientDAOInf = new PatientDAOImpl();

		ConvertToPDFUtil convertToPDFUtil = new ConvertToPDFUtil();

		HttpServletRequest request = ServletActionContext.getRequest();

		ServletContext context = request.getServletContext();

		ConfigXMLUtil configXMLUtil = new ConfigXMLUtil();

		LoginDAOInf daoInf = new LoginDAOImpl();

		String accessKey = xmlUtil.getAccessKey();

		String secreteKey = xmlUtil.getSecreteKey();

		AWSS3Connect awss3Connect = new AWSS3Connect();

		// getting input file location from S3 bucket
		String s3reportFilePath = xmlUtil.getS3RDMLReportFilePath();

		String s3LogoFilePath = xmlUtil.getS3RDMLFilePath();

		// getting s3 bucket name
		String bucketName = util.getS3BucketName();

		// getting s3 bucket region
		String bucketRegion = xmlUtil.getS3BucketRegion();

		AWSCredentials credentials = new BasicAWSCredentials(accessKey, secreteKey);

		AmazonS3 s3 = AmazonS3ClientBuilder.standard().withCredentials(new AWSStaticCredentialsProvider(credentials))
				.withRegion(bucketRegion).build();

		testTypeList = patientDAOInf.retrieveTestTypeForVisitByVisitID(patientForm.getVisitID());

		request.setAttribute("testTypeList", testTypeList);

		reportList = configurationUtil.getRepostList(loginForm.getVisitTypeID());

		doctorList1 = configurationUtil.getDoctorList(loginForm.getPracticeID());

		referringDoctorList = configurationUtil.getReferringDoctorList1(loginForm.getPracticeID());
		refDocList = configurationUtil.getRefDocList(loginForm.getPracticeID());

		/*
		 * Retrieving patientID from VisitID
		 */
		patientForm.setPatientID(patientDAOInf.retrievePatientIDByVisitID(patientForm.getVisitID()));

		/*
		 * Retrieving patient full name based on patient ID
		 */
		String patientName = patientDAOInf.retrievePatientFullName(patientForm.getPatientID());

		/*
		 * Retrieving patient's visit details
		 */
		patientList = patientDAOInf.retrievePatientVisitDetail(patientForm.getPatientID(), loginForm.getClinicID());

		patientName += "("
				+ patientDAOInf.retrieveClinicRegNoByClinicID(loginForm.getClinicID(), patientForm.getPatientID())
				+ ")";

		/*
		 * Setting patient name into request in order to display it on view existing
		 * list page
		 */
		request.setAttribute("patientName", patientName);

		String realPath = context.getRealPath("/");

		testTypeList = patientDAOInf.retrieveTestTypeForVisitByVisitID(patientForm.getVisitID());

		request.setAttribute("testTypeList", testTypeList);

		// String filePath = configXMLUtil.getReportFilePath();

		String patientNameArr[] = patientDAOInf.retrievePatientFNameLNameByID(patientForm.getPatientID()).split("=");

		String fName = patientNameArr[0];
		String lName = patientNameArr[1];

		String zipFileName = fName + lName + patientForm.getPatientID() + "_" + patientForm.getVisitID()
				+ "_report.zip";

		String zipFilePath = realPath + zipFileName;

		File zipFile = new File(zipFilePath);

		// Declaring for zip file
		OutputStream outputStream = new FileOutputStream(zipFile);

		ZipOutputStream zos = new ZipOutputStream(new BufferedOutputStream(outputStream));

		// Check if pathology lab is added for the visit, if so then generate report and
		// add that into zip file
		boolean pathTestCheck = patientDAOInf.verifyPathologyTestAvailableForVisit(patientForm.getVisitID());

		if (reportTestID != 1) {

			String pdfOutFileName = fName + lName + patientForm.getPatientID() + "_" + patientForm.getVisitID();

			if (reportTestID == 2) {
				pdfOutFileName += "_lab_test_report.pdf";

				String fullName = daoInf.retrieveUserFullNameWithQualification(loginForm.getUserID());

				message = convertToPDFUtil.convertLabReportPDF(patientForm.getPatientID(), patientForm.getVisitID(),
						realPath, pdfOutFileName, loginForm.getClinicID(), patientForm.getMdDoctorID(),
						loginForm.getPracticeID(), fullName, s3, s3LogoFilePath, bucketName);
			} else {

				pdfOutFileName += "_" + reportTestID + ".pdf";

				System.out.println("PRESC FILE PATH IS::" + pdfOutFileName);

				String username = patientDAOInf.retrieveUsernameBYuserID(loginForm.getUserID());

				message = convertToPDFUtil.convertBDPTemplateReportPDF(patientForm.getPatientID(),
						patientForm.getVisitID(), reportTestID, realPath, pdfOutFileName, loginForm.getClinicID(),
						loginForm.getPracticeID(), username, s3, s3LogoFilePath, bucketName);
			}

			if (message.equalsIgnoreCase("success")) {
				File inputFile = new File(realPath + "/" + pdfOutFileName);

				message = awss3Connect.pushFile(inputFile, pdfOutFileName, bucketName, bucketRegion, s3reportFilePath);

				if (message.equalsIgnoreCase("success")) {

					S3ObjectInputStream s3ObjectInputStream = s3
							.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, pdfOutFileName))
							.getObjectContent();

					request.setAttribute("PDFOutFileName", pdfOutFileName);
					patientForm.setFileInputStream(s3ObjectInputStream);
					patientForm.setFileName(pdfOutFileName);

					return SUCCESS;
				} else {
					addActionError("Failed to upload report to S3. Please check server logs for more details.");
					daoInf.insertAudit(request.getRemoteAddr(), "Failed to upload report to S3", loginForm.getUserID());
					return ERROR;
				}
			} else {
				addActionError("Failed to create report. Please check server logs for more details.");
				daoInf.insertAudit(request.getRemoteAddr(), "Download Report PDF Exception Occurred",
						loginForm.getUserID());
				return ERROR;
			}
		}

		if (pathTestCheck) {

			String pdfOutFIleName = fName + lName + patientForm.getPatientID() + "_" + patientForm.getVisitID()
					+ "_lab_test_report.pdf";

			String fullName = daoInf.retrieveUserFullNameWithQualification(loginForm.getUserID());

			message = convertToPDFUtil.convertLabReportPDF(patientForm.getPatientID(), patientForm.getVisitID(),
					realPath, pdfOutFIleName, loginForm.getClinicID(), patientForm.getMdDoctorID(),
					loginForm.getPracticeID(), fullName, s3, s3LogoFilePath, bucketName);

			zos.putNextEntry(new ZipEntry(pdfOutFIleName));

			FileInputStream fis = new FileInputStream(new File(realPath + pdfOutFIleName));

			BufferedInputStream fif = new BufferedInputStream(fis);

			// Write the contents of the file
			int data = 0;
			while ((data = fif.read()) != -1) {
				zos.write(data);
			}
			fif.close();

			zos.closeEntry();

		}

		// Retrieving the template data and creating report for each of it
		for (String testTypeValue : testTypeList) {
			String[] testTypeArray = testTypeValue.split("==");

			String testType = testTypeArray[1];
			String testID = testTypeArray[0];
			int investigationID = Integer.parseInt(testTypeArray[0]);

			String pdfOutFIleName = fName + lName + patientForm.getPatientID() + "_" + patientForm.getVisitID() + "_"
					+ testType + "_" + testID + ".pdf";

			System.out.println("PRESC FILE PATH IS::" + pdfOutFIleName);

			String username = patientDAOInf.retrieveUsernameBYuserID(loginForm.getUserID());

			message = convertToPDFUtil.convertBDPTemplateReportPDF(patientForm.getPatientID(), patientForm.getVisitID(),
					investigationID, realPath, pdfOutFIleName, loginForm.getClinicID(), loginForm.getPracticeID(),
					username, s3, s3LogoFilePath, bucketName);

			zos.putNextEntry(new ZipEntry(pdfOutFIleName));

			FileInputStream fis = new FileInputStream(new File(realPath + pdfOutFIleName));

			BufferedInputStream fif = new BufferedInputStream(fis);

			// Write the contents of the file
			int data = 0;
			while ((data = fif.read()) != -1) {
				zos.write(data);
			}
			fif.close();

			zos.closeEntry();
		}

		zos.close();

		/*
		 * message =
		 * convertToPDFUtil.convertBDPackageReportPDF(patientForm.getPatientID(),
		 * patientForm.getVisitID(), realPath, pdfOutFIleName, loginForm.getClinicID(),
		 * patientForm.getMdDoctorID(), loginForm.getPracticeID(), fullName, s3,
		 * s3LogoFilePath, bucketName);
		 */

		if (message.equalsIgnoreCase("success")) {

			addActionMessage("Lab report created successfully.");

			File inputFile = new File(realPath + "/" + zipFileName);

			// Storing file to S3 RDML INPUT FILE location
			message = awss3Connect.pushFile(inputFile, zipFileName, bucketName, bucketRegion, s3reportFilePath);

			S3ObjectInputStream s3ObjectInputStream = s3
					.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, zipFileName))
					.getObjectContent();

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Download Lab Test Report", loginForm.getUserID());

			patientForm.setFileInputStream(s3ObjectInputStream);
			patientForm.setFileName(zipFileName);

			/*
			 * File pdfFile = new File(pdfOutFIleName);
			 * 
			 * Setting input Stream variable of PatientForm in order to get file while
			 * downloading
			 * 
			 * patientForm.setFileInputStream(new FileInputStream(pdfFile));
			 * 
			 * // Setting fileName to be given to downloaded zip file // name
			 * patientForm.setFileName(pdfFile.getName());
			 */

			return SUCCESS;
		} else {
			addActionError("Failed to create lab test report. Please check server logs for more details.");

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Download Lab Test Report PDF Exception Occurred",
					loginForm.getUserID());

			return ERROR;
		}
	}

	/**
	 * 
	 * @throws Exception
	 */
	public void retrieveLabTestByVisitID() throws Exception {
		patientDAOInf = new PatientDAOImpl();

		/*
		 * Getting user role from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");

		JSONObject values = new JSONObject();

		JSONArray array = new JSONArray();
		values = new JSONObject();

		JSONObject object = new JSONObject();
		try {

			// values = patientDAOInf.retrieveLabTestList(ActivityStatus.ACTIVE,
			// loginForm.getPracticeID());

			PrintWriter out = response.getWriter();

			out.print(values);

		} catch (Exception exception) {
			exception.printStackTrace();

			object.put("ExceptionMessage",
					"Exception occured while retrieving lab test from visitID for billing.Please check server logs for more details.");
			array.add(object);

			values.put("Release", array);

			PrintWriter out = response.getWriter();

			out.print(values);
		}
	}

	/**
	 * 
	 * @throws Exception
	 */
	public void retrieveLabBillDetails() throws Exception {

		JSONObject values = new JSONObject();

		JSONArray array = new JSONArray();
		values = new JSONObject();

		JSONObject object = new JSONObject();

		response.setCharacterEncoding("UTF-8");

		patientDAOInf = new PatientDAOImpl();

		serviceInf = new eDhanvantariServiceImpl();

		try {
			System.out.println("inn retrieveLabBillDetails");
			/*
			 * Getting user role from session
			 */
			LoginForm loginForm = (LoginForm) session.get("USER");

			values = serviceInf.retrieveLabBillDetails(patientForm.getVisitID(), 0, loginForm.getClinicID(),
					loginForm.getClinicSuffix(), patientForm.getVisitTypeID(), patientForm.getCareType());

			PrintWriter out = response.getWriter();

			out.print(values);

		} catch (Exception exception) {
			exception.printStackTrace();
			// System.out.println("Exception occured while deleting IPD complaint due to:::"
			// + exception.getMessage());

			object.put("check",
					"Exception occured while checking for the result added and dues pending or not. Please check server logs for more details.");
			array.add(object);

			values.put("Release", array);

			PrintWriter out = response.getWriter();

			out.print(values);
		}

	}

	/**
	 * 
	 * @throws Exception
	 */
	public void verifyBillDuePending() throws Exception {

		JSONObject values = new JSONObject();

		JSONArray array = new JSONArray();
		values = new JSONObject();

		JSONObject object = null;

		response.setCharacterEncoding("UTF-8");

		patientDAOInf = new PatientDAOImpl();

		try {

			boolean resultCheck = patientDAOInf.verifyResultAddedForVisit(patientForm.getVisitID());

			if (resultCheck) {

				object = new JSONObject();

				object.put("check", "NoResult");

				array.add(object);

				values.put("Release", array);

			} else {

				object = new JSONObject();

				object.put("check", "NoDues");

				array.add(object);

				values.put("Release", array);
			}

			PrintWriter out = response.getWriter();

			out.print(values);

		} catch (Exception exception) {
			exception.printStackTrace();

			object.put("check",
					"Exception occured while checking for the result added and dues pending or not. Please check server logs for more details.");
			array.add(object);

			values.put("Release", array);

			PrintWriter out = response.getWriter();

			out.print(values);
		}

	}

	/**
	 * 
	 * @return
	 * @throws Exception
	 */
	public String printLabBill() throws Exception {

		ConvertToPDFUtil convertToPDFUtil = new ConvertToPDFUtil();

		HttpServletRequest request = ServletActionContext.getRequest();

		ServletContext context = request.getServletContext();

		ConfigXMLUtil configXMLUtil = new ConfigXMLUtil();

		LoginDAOInf daoInf = new LoginDAOImpl();

		patientDAOInf = new PatientDAOImpl();

		/*
		 * Getting user role from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");

		String accessKey = xmlUtil.getAccessKey();

		String secreteKey = xmlUtil.getSecreteKey();

		AWSS3Connect awss3Connect = new AWSS3Connect();

		// getting input file location from S3 bucket
		String s3reportFilePath = xmlUtil.getS3RDMLReportFilePath();

		String s3LogoFilePath = xmlUtil.getS3RDMLFilePath();

		// getting s3 bucket name
		String bucketName = util.getS3BucketName();

		// getting s3 bucket region
		String bucketRegion = xmlUtil.getS3BucketRegion();

		AWSCredentials credentials = new BasicAWSCredentials(accessKey, secreteKey);

		AmazonS3 s3 = AmazonS3ClientBuilder.standard().withCredentials(new AWSStaticCredentialsProvider(credentials))
				.withRegion(bucketRegion).build();

		String realPath = context.getRealPath("/");

		// String filePath = configXMLUtil.getReportFilePath();

		String patientFNameLName = patientDAOInf.retrievePatientFirstLastNameByID(patientForm.getPatientID())
				.replaceAll(" ", "");

		String pdfOutFIleName = patientFNameLName + patientForm.getPatientID() + "_" + patientForm.getVisitID()
				+ "_bill.pdf";

		String fullName = daoInf.retrieveUserFullNameByUserID(loginForm.getUserID());

		message = convertToPDFUtil.convertLabBillingPDF(patientForm.getPatientID(), patientForm.getVisitID(), realPath,
				pdfOutFIleName, loginForm.getClinicID(), fullName, s3, s3LogoFilePath, bucketName);

		if (message.equals("success")) {

			File inputFile = new File(realPath + "/" + pdfOutFIleName);

			// Storing file to S3 RDML INPUT FILE location
			message = awss3Connect.pushFile(inputFile, pdfOutFIleName, bucketName, bucketRegion, s3reportFilePath);

			S3ObjectInputStream s3ObjectInputStream = s3
					.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, pdfOutFIleName))
					.getObjectContent();

			request.setAttribute("PDFOutFileName", pdfOutFIleName);

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Print Lab Bill", loginForm.getUserID());

			return SUCCESS;

		} else {

			addActionError("Failed to print bill. Please check server logs for more details");

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Print Lab Bill Exception Occurred", loginForm.getUserID());

			return ERROR;

		}

	}

	/**
	 * 
	 * @throws Exception
	 */
	public void retrieveGroupValues() throws Exception {

		JSONObject values = new JSONObject();

		JSONArray array = new JSONArray();
		values = new JSONObject();

		JSONObject object = new JSONObject();

		response.setCharacterEncoding("UTF-8");

		patientDAOInf = new PatientDAOImpl();

		try {

			/*
			 * Getting user role from session
			 */
			LoginForm loginForm = (LoginForm) session.get("USER");

			/*
			 * retrieving patient gender based on patientID
			 */
			String patientGender = patientDAOInf.retrievePatientGenderByPatientID(patientForm.getPatientID());

			genderMap.put("Male", "normalValues");
			genderMap.put("Female", "normalValuesWomen");
			genderMap.put("Child", "normalValuesChild");

			values = patientDAOInf.retrieveGroupValues(patientForm.getGroupName(), genderMap.get(patientGender),
					loginForm.getPracticeID());

			PrintWriter out = response.getWriter();

			out.print(values);

		} catch (Exception exception) {
			exception.printStackTrace();
			// System.out.println("Exception occured while deleting IPD complaint due to:::"
			// + exception.getMessage());

			object.put("check",
					"Exception occured while retrieving group values. Please check server logs for more details.");
			array.add(object);

			values.put("Release", array);

			PrintWriter out = response.getWriter();

			out.print(values);
		}

	}

	/**
	 * 
	 * @throws Exception
	 */
	public void retrieveLabDefaultValueList() throws Exception {

		JSONObject values = new JSONObject();

		JSONArray array = new JSONArray();
		values = new JSONObject();

		JSONObject object = new JSONObject();

		response.setCharacterEncoding("UTF-8");

		patientDAOInf = new PatientDAOImpl();

		try {

			System.out.println("inside LabDefaultValueList..............");

			/*
			 * Getting user role from session
			 */
			LoginForm loginForm = (LoginForm) session.get("USER");

			values = patientDAOInf.retrieveLabDefaultValueList(patientForm.getSearchTestName());

			PrintWriter out = response.getWriter();

			out.print(values);

		} catch (Exception exception) {
			exception.printStackTrace();
			// System.out.println("Exception occured while deleting IPD complaint due to:::"
			// + exception.getMessage());

			object.put("check",
					"Exception occured while retrieving group values. Please check server logs for more details.");
			array.add(object);

			values.put("Release", array);

			PrintWriter out = response.getWriter();

			out.print(values);
		}

	}

	/**
	 * 
	 * @return
	 * @throws Exception
	 */
	public String editDueLabBill() throws Exception {
		patientDAOInf = new PatientDAOImpl();
		patientList = null;
		serviceInf = new eDhanvantariServiceImpl();

		LoginDAOInf daoInf = new LoginDAOImpl();

		ConvertToPDFUtil convertToPDFUtil = new ConvertToPDFUtil();

		HttpServletRequest request = ServletActionContext.getRequest();

		ServletContext context = request.getServletContext();

		ConfigXMLUtil configXMLUtil = new ConfigXMLUtil();

		String accessKey = xmlUtil.getAccessKey();

		String secreteKey = xmlUtil.getSecreteKey();

		AWSS3Connect awss3Connect = new AWSS3Connect();

		// getting input file location from S3 bucket
		String s3reportFilePath = xmlUtil.getS3RDMLReportFilePath();

		String s3LogoFilePath = xmlUtil.getS3RDMLFilePath();

		// getting s3 bucket name
		String bucketName = util.getS3BucketName();

		// getting s3 bucket region
		String bucketRegion = xmlUtil.getS3BucketRegion();

		AWSCredentials credentials = new BasicAWSCredentials(accessKey, secreteKey);

		AmazonS3 s3 = AmazonS3ClientBuilder.standard().withCredentials(new AWSStaticCredentialsProvider(credentials))
				.withRegion(bucketRegion).build();

		/*
		 * Getting clinicID from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");

		/*
		 * Retrieving patient full name based on patient ID
		 */
		String patientName = patientDAOInf.retrievePatientFullName(patientForm.getPatientID());

		/*
		 * Retrieving patient's visit details
		 */
		patientList = patientDAOInf.retrievePatientVisitDetail(patientForm.getPatientID(), loginForm.getClinicID());

		patientName += "("
				+ patientDAOInf.retrieveClinicRegNoByClinicID(loginForm.getClinicID(), patientForm.getPatientID())
				+ ")";

		/*
		 * Setting patient name into request in order to display it on view existing
		 * list page
		 */
		request.setAttribute("patientName", patientName);

		// setting visitTypeID into session
		loginForm.setVisitTypeID(patientForm.getVisitTypeID());

		session.put("USER", loginForm);

		// patientForm.setVisitTypeID(loginForm.getVisitTypeID());
		patientForm.setClinicID(loginForm.getClinicID());
		patientForm.setUserID(loginForm.getUserID());

		message = serviceInf.addLabBill(patientForm);

		if (message.equals("success")) {

			String realPath = context.getRealPath("/");

			String pdfOutFIleName = patientForm.getFirstName() + patientForm.getLastName() + patientForm.getPatientID()
					+ "_" + patientForm.getVisitID() + "_bill.pdf";

			String fullName = daoInf.retrieveUserFullNameByUserID(loginForm.getUserID());

			message = convertToPDFUtil.convertLabBillingPDF(patientForm.getPatientID(), patientForm.getVisitID(),
					realPath, pdfOutFIleName, loginForm.getClinicID(), fullName, s3, s3LogoFilePath, bucketName);

			if (message.equals("success")) {
				addActionMessage("Lab bill updated successfully.");

				File inputFile = new File(realPath + "/" + pdfOutFIleName);

				// Storing file to S3 RDML INPUT FILE location
				message = awss3Connect.pushFile(inputFile, pdfOutFIleName, bucketName, bucketRegion, s3reportFilePath);

				S3ObjectInputStream s3ObjectInputStream = s3
						.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, pdfOutFIleName))
						.getObjectContent();

				request.setAttribute("PDFOutFileName", pdfOutFIleName);

				// Inserting values into Audit table
				daoInf.insertAudit(request.getRemoteAddr(), "Edit Lab Bill", loginForm.getUserID());

				return SUCCESS;
			} else {
				addActionError("Failed to create lab bill PDF. Please check server logs for more details.");

				// Inserting values into Audit table
				daoInf.insertAudit(request.getRemoteAddr(), "Edit Lab Bill PDF Exception Occurred",
						loginForm.getUserID());

				return ERROR;
			}

		} else {
			addActionError("Failed to update bill. Please check server logs for more details.");

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Edit Lab Bill Exception Occurred", loginForm.getUserID());

			return ERROR;
		}

	}

	/**
	 * 
	 * @return String
	 * @throws Exception
	 */
	public String editLabBill() throws Exception {
		serviceInf = new eDhanvantariServiceImpl();
		patientDAOInf = new PatientDAOImpl();

		LoginDAOInf daoInf = new LoginDAOImpl();

		SMSSender smsSender = new SMSSender();

		EmailUtil emailUtil = new EmailUtil();

		/*
		 * Getting user role from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");

		ConvertToPDFUtil convertToPDFUtil = new ConvertToPDFUtil();

		HttpServletRequest request = ServletActionContext.getRequest();

		ServletContext context = request.getServletContext();

		ConfigXMLUtil configXMLUtil = new ConfigXMLUtil();

		String accessKey = xmlUtil.getAccessKey();

		String secreteKey = xmlUtil.getSecreteKey();

		AWSS3Connect awss3Connect = new AWSS3Connect();

		// getting input file location from S3 bucket
		String s3reportFilePath = xmlUtil.getS3RDMLReportFilePath();

		String s3LogoFilePath = xmlUtil.getS3RDMLFilePath();

		// getting s3 bucket name
		String bucketName = util.getS3BucketName();

		// getting s3 bucket region
		String bucketRegion = xmlUtil.getS3BucketRegion();

		AWSCredentials credentials = new BasicAWSCredentials(accessKey, secreteKey);

		AmazonS3 s3 = AmazonS3ClientBuilder.standard().withCredentials(new AWSStaticCredentialsProvider(credentials))
				.withRegion(bucketRegion).build();

		String billingTabCheck = "enable";

		testTypeList = patientDAOInf.retrieveTestTypeForVisitByVisitID(patientForm.getVisitID());

		request.setAttribute("testTypeList", testTypeList);

		reportList = configurationUtil.getRepostList(loginForm.getVisitTypeID());

		doctorList1 = configurationUtil.getDoctorList(loginForm.getPracticeID());

		referringDoctorList = configurationUtil.getReferringDoctorList1(loginForm.getPracticeID());
		refDocList = configurationUtil.getRefDocList(loginForm.getPracticeID());

		request.setAttribute("billingTabCheck", billingTabCheck);

		request.setAttribute("apptID", patientForm.getAptID());

		boolean resultCheck = patientDAOInf.verifyResultAddedForVisit(patientForm.getVisitID());

		request.setAttribute("resultCheck", resultCheck);

		patientForm.setVisitTypeID(loginForm.getVisitTypeID());
		patientForm.setClinicID(loginForm.getClinicID());
		patientForm.setUserID(loginForm.getUserID());

		message = serviceInf.addLabBill(patientForm);

		if (message.equalsIgnoreCase("success")) {

			request.setAttribute("billCheck", "true");

			String paymentType = patientDAOInf.retrievePaymentType(patientForm.getVisitID());

			prescriptionList = patientDAOInf.retrieveTransactionListByVisitID(patientForm.getVisitID());

			request.setAttribute("paymentType", paymentType);

			String realPath = context.getRealPath("/");

			String pdfOutFIleName = patientForm.getFirstName() + patientForm.getLastName() + patientForm.getPatientID()
					+ "_" + patientForm.getVisitID() + "_bill.pdf";

			String fullName = daoInf.retrieveUserFullNameByUserID(loginForm.getUserID());

			message = convertToPDFUtil.convertLabBillingPDF(patientForm.getPatientID(), patientForm.getVisitID(),
					realPath, pdfOutFIleName, loginForm.getClinicID(), fullName, s3, s3LogoFilePath, bucketName);

			if (message.equalsIgnoreCase("success")) {

				addActionMessage("Successfully updated lab bill details.");

				// Inserting values into Audit table
				daoInf.insertAudit(request.getRemoteAddr(), "Edit Lab Bill", loginForm.getUserID());

				File inputFile = new File(realPath + "/" + pdfOutFIleName);

				// Storing file to S3 RDML INPUT FILE location
				message = awss3Connect.pushFile(inputFile, pdfOutFIleName, bucketName, bucketRegion, s3reportFilePath);

				S3ObjectInputStream s3ObjectInputStream = s3
						.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, pdfOutFIleName))
						.getObjectContent();

				request.setAttribute("PDFOutFileName", pdfOutFIleName);

				/*
				 * Check whether appointment udpated flag is on or not, and depending upon that
				 * sending SMS and Email
				 */
				boolean SMSCheck = util.verifyCommunicationCheck("smsBill");

				if (SMSCheck) {

					/*
					 * Retrieving patient's mobile no, if mobile is not null, then sending patient a
					 * welcome message
					 */
					String mobileNo = patientDAOInf.retrievePatientMobileNoByID(patientForm.getPatientID());

					/*
					 * Sending patient a welcome as well as Appointment scheduled message on
					 * checking whether mobile no is available for that patient or not
					 */
					if (mobileNo == null || mobileNo == "") {
						System.out.println("Mobile no not found for patient.");
					} else {

						if (mobileNo.isEmpty()) {
							System.out.println("Mobile no not found for patient.");
						} else {

							/*
							 * Sending bill details SMS to patient
							 */
							smsSender.sendGeneralisedLabPrescriptionORBillSMS(patientForm.getVisitID(), mobileNo,
									loginForm.getPracticeID(), loginForm.getClinicID(), ActivityStatus.BILL);

						}

					}

				}

				/*
				 * Check whether appointment udpated flag is on or not, and depending upon that
				 * sending SMS and Email
				 */
				boolean EmailCheck = util.verifyCommunicationCheck("emailBill");

				if (EmailCheck) {

					/*
					 * Retrieving patient's email ID, if not null, then sending patient a welcome
					 * mail
					 */
					String emailID = patientDAOInf.retrievePatientEmailByID(patientForm.getPatientID());

					if (emailID == null || emailID == "") {
						System.out.println("EmailID no not found for patient.");
					} else {

						if (emailID.isEmpty()) {
							System.out.println("EmailID no not found for patient.");
						} else {

							String fileName = patientForm.getFirstName() + patientForm.getLastName()
									+ patientForm.getPatientID() + "_" + patientForm.getVisitID() + "_bill.pdf";
							/*
							 * Sending welcome mail to patient
							 */
							emailUtil.sendBillingMail(patientForm.getPatientID(), loginForm.getPracticeID(),
									loginForm.getClinicID(), patientForm.getVisitID(), fileName, emailID);
						}

					}

				}

				/*
				 * Retrieving patient age based on patientID
				 */
				String patientAge = patientDAOInf.retrievePatientAgeByPatientID(patientForm.getPatientID());

				request.setAttribute("patientAge", patientAge);

				/*
				 * retrieving patient gender based on patientID
				 */
				String patientGender = patientDAOInf.retrievePatientGenderByPatientID(patientForm.getPatientID());

				request.setAttribute("gender", patientGender);

				patientList = patientDAOInf.retrieveLabPatientDetails(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID(), patientForm.getAptID());

				mdDetailsList = configurationUtil.getMDDoctorList(loginForm.getPracticeID());

				labTestValueListNew = configurationUtil.getLabInvestigationsValueList(patientForm.getVisitID());

				request.setAttribute("labTestValueListNew", labTestValueListNew);

				billList = patientDAOInf.retrieveBillDetail(patientForm.getVisitID(), loginForm.getVisitTypeID(),
						loginForm.getClinicID(), loginForm.getClinicSuffix());

				labTestListNew = patientDAOInf.retrieveExistingLabTestByVisitID(patientForm.getVisitID());

				labTestValueListNew1 = configurationUtil.getLabInvestigationsValueList1(patientForm.getVisitID());

				request.setAttribute("labTestValueListNew1", labTestValueListNew1);

				request.setAttribute("labTestList", labTestListNew);

				doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

				/*
				 * Getting form name to be display based on logged in User
				 */
				String[] formNameArray = loginForm.getOPDJSPName().split("&");

				System.out.println("Edit OPD JSP Page name for logged in user is ::: " + formNameArray[1].trim());

				// Setting Edit opd page name value in pageName variable
				setPageName(formNameArray[1].trim());
				return SUCCESS;

			} else {
				addActionError("Failed to create bill PDF. Please check logs for more details.");

				// Inserting values into Audit table
				daoInf.insertAudit(request.getRemoteAddr(), "Edit Lab Billing PDF Exception Occurred.",
						loginForm.getUserID());

				/*
				 * Retrieving patient age based on patientID
				 */
				String patientAge = patientDAOInf.retrievePatientAgeByPatientID(patientForm.getPatientID());

				request.setAttribute("patientAge", patientAge);

				/*
				 * retrieving patient gender based on patientID
				 */
				String patientGender = patientDAOInf.retrievePatientGenderByPatientID(patientForm.getPatientID());

				request.setAttribute("gender", patientGender);

				patientList = patientDAOInf.retrieveLabPatientDetails(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID(), patientForm.getAptID());

				mdDetailsList = configurationUtil.getMDDoctorList(loginForm.getPracticeID());

				labTestValueListNew = configurationUtil.getLabInvestigationsValueList(patientForm.getVisitID());

				request.setAttribute("labTestValueListNew", labTestValueListNew);

				billList = patientDAOInf.retrieveBillDetail(patientForm.getVisitID(), loginForm.getVisitTypeID(),
						loginForm.getClinicID(), loginForm.getClinicSuffix());

				labTestListNew = patientDAOInf.retrieveExistingLabTestByVisitID(patientForm.getVisitID());

				request.setAttribute("labTestValueListNew", labTestValueListNew);

				labTestValueListNew1 = configurationUtil.getLabInvestigationsValueList1(patientForm.getVisitID());

				request.setAttribute("labTestValueListNew1", labTestValueListNew1);

				request.setAttribute("labTestList", labTestListNew);

				doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

				/*
				 * Getting form name to be display based on logged in User
				 */
				String[] formNameArray = loginForm.getOPDJSPName().split("&");

				System.out.println("Edit OPD JSP Page name for logged in user is ::: " + formNameArray[1].trim());

				// Setting Edit opd page name value in pageName variable
				setPageName(formNameArray[1].trim());

				return ERROR;
			}

		} else {
			addActionError("Failed to update Billing details. Please check logs for more details.");

			// Inserting values into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Edit Lab Billing Exception Occurred.", loginForm.getUserID());

			String paymentType = patientDAOInf.retrievePaymentType(patientForm.getVisitID());

			request.setAttribute("paymentType", paymentType);

			/*
			 * Retrieving patient age based on patientID
			 */
			String patientAge = patientDAOInf.retrievePatientAgeByPatientID(patientForm.getPatientID());

			request.setAttribute("patientAge", patientAge);

			/*
			 * retrieving patient gender based on patientID
			 */
			String patientGender = patientDAOInf.retrievePatientGenderByPatientID(patientForm.getPatientID());

			request.setAttribute("gender", patientGender);

			patientList = patientDAOInf.retrieveLabPatientDetails(patientForm.getPatientID(), patientForm.getVisitID(),
					loginForm.getClinicID(), patientForm.getAptID());

			mdDetailsList = configurationUtil.getMDDoctorList(loginForm.getPracticeID());

			labTestValueListNew = configurationUtil.getLabInvestigationsValueList(patientForm.getVisitID());

			request.setAttribute("labTestValueListNew", labTestValueListNew);

			labTestValueListNew1 = configurationUtil.getLabInvestigationsValueList1(patientForm.getVisitID());

			request.setAttribute("labTestValueListNew1", labTestValueListNew1);

			billList = patientDAOInf.retrieveBillDetail(patientForm.getVisitID(), loginForm.getVisitTypeID(),
					loginForm.getClinicID(), loginForm.getClinicSuffix());

			// verify whether receipt added for the current visitID if yes then retrieve the
			// details from Transctions tables else retrive the details from the
			// LabInvestigation tables for the corresponding visitID based on isGroup check
			boolean billCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

			if (billCheck) {

				request.setAttribute("billCheck", "true");

				prescriptionList = patientDAOInf.retrieveTransactionListByVisitID(patientForm.getVisitID());
			} else {

				request.setAttribute("billCheck", "false");

				prescriptionList = patientDAOInf.retrieveTransactionDetailsByVisitID(patientForm.getVisitID());

				groupTestList = patientDAOInf.retrieveTransactionDetailsForGroupTestByVisitID(patientForm.getVisitID());
			}

			labTestListNew = patientDAOInf.retrieveExistingLabTestByVisitID(patientForm.getVisitID());
			request.setAttribute("labTestList", labTestListNew);

			doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

			/*
			 * Getting form name to be display based on logged in User
			 */
			String[] formNameArray = loginForm.getOPDJSPName().split("&");

			System.out.println("Edit OPD JSP Page name for logged in user is ::: " + formNameArray[1].trim());

			// Setting Edit opd page name value in pageName variable
			setPageName(formNameArray[1].trim());

			return ERROR;
		}
	}

	/**
	 * 
	 * @throws Exception
	 */
	public void removeLabInvestigationTest() throws Exception {
		patientDAOInf = new PatientDAOImpl();

		JSONObject values = new JSONObject();

		JSONArray array = new JSONArray();
		values = new JSONObject();

		JSONObject object = new JSONObject();

		/*
		 * Getting userID from Session
		 */
		LoginForm userForm = (LoginForm) session.get("USER");

		try {

			values = patientDAOInf.deleteLabInvestigationTest(patientForm.getLabTestID());

			PrintWriter out = response.getWriter();

			out.print(values);

		} catch (Exception exception) {
			exception.printStackTrace();
			System.out.println(
					"Exception occured while deleting LabInvestigation details due to:::" + exception.getMessage());

			object.put("ExceptionMessage",
					"Exception occured while deleting LabInvestigation details.Please check server logs for more details.");
			array.add(object);

			values.put("Release", array);

			PrintWriter out = response.getWriter();

			out.print(values);
		}
	}

	public String addBDPReportData() throws Exception {

		patientDAOInf = new PatientDAOImpl();

		serviceInf = new eDhanvantariServiceImpl();

		LoginDAOInf daoInf = new LoginDAOImpl();

		/*
		 * Getting user role from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");
		loginForm = (LoginForm) session.get("USER");

		patientForm.setClinicID(loginForm.getClinicID());
		patientForm.setVisitTypeID(loginForm.getVisitTypeID());

		if (patientForm.getAddButton().equals("print") || patientForm.getAddButton().equals("Print")) {
			System.out.println("inside add button = print");
			printBDPReport();
		} else {
			int lastOPDVisitID = 0;
			String status = "";

			if (patientForm.getVisitID() != 0) {
				message = serviceInf.UpdateBDPReportData(patientForm);
				status = "update";
			} else {
				message = serviceInf.addBDPReportData(patientForm);
				status = "add";
			}

			if (message.equals("success")) {

				addActionMessage("New visit added successfully.");

				lastOPDVisitID = patientDAOInf.retrieveLastOPDVisitID(patientForm.getPatientID(),
						loginForm.getClinicID());

				boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", lastOPDVisitID);

				if (visitCheck) {

					billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
				} else {
					billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
							loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
				}

				patientList = patientDAOInf.retrieveLabPatientDetails(patientForm.getPatientID(), lastOPDVisitID,
						loginForm.getClinicID(), patientForm.getAptID());

				doctorList1 = configurationUtil.getDoctorList(loginForm.getPracticeID());

				reportList = configurationUtil.getRepostList(patientForm.getVisitTypeID());

				String Template = patientDAOInf.retrieveTemplate(lastOPDVisitID);

				request.setAttribute("Template", Template);

				request.setAttribute("apptID", patientForm.getAptID());

				String[] formNameArray = loginForm.getOPDJSPName().split("&");

				System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[0].trim());

				// Setting add opd page name value in pageName variable
				setPageName(formNameArray[0].trim());

				return SUCCESS;

			} else {

				addActionError("Eexception occurred while adding visit details. Please check logs for more details.");

				patientList = patientDAOInf.retrieveLabPatientDetails(patientForm.getPatientID(), lastOPDVisitID,
						loginForm.getClinicID(), patientForm.getAptID());

				doctorList1 = configurationUtil.getDoctorList(loginForm.getPracticeID());

				reportList = configurationUtil.getRepostList(patientForm.getVisitTypeID());

				String Template = patientDAOInf.retrieveTemplate(lastOPDVisitID);

				request.setAttribute("Template", Template);

				request.setAttribute("apptID", patientForm.getAptID());

				String[] formNameArray = loginForm.getOPDJSPName().split("&");

				System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[0].trim());

				// Setting add opd page name value in pageName variable
				setPageName(formNameArray[0].trim());

				return ERROR;

			}
		}
		return SUCCESS;
	}

	public String addnewUSGReport() throws Exception {

		patientDAOInf = new PatientDAOImpl();

		serviceInf = new eDhanvantariServiceImpl();

		LoginDAOInf daoInf = new LoginDAOImpl();

		/*
		 * Getting user role from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");
		loginForm = (LoginForm) session.get("USER");

		patientForm.setClinicID(loginForm.getClinicID());
		patientForm.setVisitTypeID(loginForm.getVisitTypeID());

		int lastOPDVisitID = 0;

		/*
		 * inserting visit details into Visit table
		 */
		if (patientForm.getVisitID() != 0) {
			message = serviceInf.UpdateUSGBDPReportData(patientForm);
			addActionMessage("Visit Updated successfully.");

		} else {
			message = serviceInf.addUSGReportData(patientForm);
			addActionMessage("New visit added successfully.");
		}

		if (message.equals("success")) {

			lastOPDVisitID = patientDAOInf.retrieveLastOPDVisitIDByCareType(patientForm.getPatientID(),
					loginForm.getClinicID(), "USG");

			patientForm.setVisitID(lastOPDVisitID);

			boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", lastOPDVisitID);

			if (visitCheck) {

				billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
			} else {
				billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
						loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
			}

			patientList = patientDAOInf.retrieveLabPatientDetails(patientForm.getPatientID(), lastOPDVisitID,
					loginForm.getClinicID(), patientForm.getAptID());

			doctorList1 = configurationUtil.getDoctorList(loginForm.getPracticeID());

			referringDoctorList = configurationUtil.getReferringDoctorList1(loginForm.getPracticeID());

			reportList = configurationUtil.getRepostList(patientForm.getVisitTypeID());

			String Template = patientDAOInf.retrieveTemplate(lastOPDVisitID);
			System.out.println("sone age is action class " + patientForm.getSonAge());

			request.setAttribute("Template", Template);

			request.setAttribute("sonAge", patientForm.getSonAge());
			request.setAttribute("daughterAge", patientForm.getDaughterAge());

			request.setAttribute("apptID", patientForm.getAptID());

			String[] formNameArray = loginForm.getOPDJSPName().split("&");

			System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[0].trim());

			// Setting add opd page name value in pageName variable
			setPageName(formNameArray[0].trim());

			return SUCCESS;

		} else {

			addActionError("Eexception occurred while adding visit details. Please check logs for more details.");

			patientList = patientDAOInf.retrieveLabPatientDetails(patientForm.getPatientID(), lastOPDVisitID,
					loginForm.getClinicID(), patientForm.getAptID());

			doctorList1 = configurationUtil.getDoctorList(loginForm.getPracticeID());

			referringDoctorList = configurationUtil.getReferringDoctorList1(loginForm.getPracticeID());

			reportList = configurationUtil.getRepostList(patientForm.getVisitTypeID());

			String Template = patientDAOInf.retrieveTemplate(lastOPDVisitID);

			request.setAttribute("Template", Template);

			request.setAttribute("apptID", patientForm.getAptID());

			String[] formNameArray = loginForm.getOPDJSPName().split("&");

			System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[0].trim());

			// Setting add opd page name value in pageName variable
			setPageName(formNameArray[0].trim());

			return ERROR;

		}

	}

	public String editBDPReport() throws Exception {
		patientDAOInf = new PatientDAOImpl();

		serviceInf = new eDhanvantariServiceImpl();

		LoginDAOInf daoInf = new LoginDAOImpl();

		/*
		 * Getting user role from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");
		loginForm = (LoginForm) session.get("USER");

		patientForm.setClinicID(loginForm.getClinicID());
		patientForm.setVisitTypeID(loginForm.getVisitTypeID());

		if (patientForm.getAddButton().equals("print") || patientForm.getAddButton().equals("Print")) {
			System.out.println("inside add button = print");
			UpdateprintBDPReport();
		} else {
			int lastOPDVisitID = 0;

			/*
			 * inserting visit details into Visit table
			 */
			message = serviceInf.UpdateBDPReportData(patientForm);

			if (message.equals("success")) {

				addActionMessage("Visit updated successfully.");

				lastOPDVisitID = patientDAOInf.retrieveLastOPDVisitID(patientForm.getPatientID(),
						loginForm.getClinicID());

				boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", lastOPDVisitID);

				if (visitCheck) {

					billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
				} else {
					billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
							loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
				}

				patientList = patientDAOInf.retrieveLabPatientDetails(patientForm.getPatientID(), lastOPDVisitID,
						loginForm.getClinicID(), patientForm.getAptID());

				doctorList1 = configurationUtil.getDoctorList(loginForm.getPracticeID());

				reportList = configurationUtil.getRepostList(patientForm.getVisitTypeID());

				String Template = patientDAOInf.retrieveTemplate(lastOPDVisitID);

				request.setAttribute("Template", Template);

				request.setAttribute("apptID", patientForm.getAptID());

				String[] formNameArray = loginForm.getOPDJSPName().split("&");

				System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[0].trim());

				// Setting add opd page name value in pageName variable
				setPageName(formNameArray[0].trim());

				return SUCCESS;

			} else {

				addActionError("Eexception occurred while Updating visit details. Please check logs for more details.");

				patientList = patientDAOInf.retrieveLabPatientDetails(patientForm.getPatientID(), lastOPDVisitID,
						loginForm.getClinicID(), patientForm.getAptID());

				doctorList1 = configurationUtil.getDoctorList(loginForm.getPracticeID());

				reportList = configurationUtil.getRepostList(patientForm.getVisitTypeID());

				String Template = patientDAOInf.retrieveTemplate(lastOPDVisitID);

				request.setAttribute("Template", Template);

				request.setAttribute("apptID", patientForm.getAptID());

				String[] formNameArray = loginForm.getOPDJSPName().split("&");

				System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[0].trim());

				// Setting add opd page name value in pageName variable
				setPageName(formNameArray[0].trim());

				return ERROR;

			}
		}
		return SUCCESS;
	}

	public String UpdateprintBDPReport() throws Exception {
		patientDAOInf = new PatientDAOImpl();

		serviceInf = new eDhanvantariServiceImpl();

		SMSSender smsSender = new SMSSender();

		EmailUtil emailUtil = new EmailUtil();

		ConvertToPDFUtil convertToPDFUtil = new ConvertToPDFUtil();

		LoginDAOInf daoInf = new LoginDAOImpl();

		ClinicDAOInf daoInf1 = new ClinicDAOImpl();

		RegistrationDAOinf registrationDAOinf = new RegistrationDAOImpl();

		PrescriptionManagementDAOInf managementDAOInf = new PrescriptionManagementDAOImpl();

		String accessKey = xmlUtil.getAccessKey();

		String secreteKey = xmlUtil.getSecreteKey();

		AWSS3Connect awss3Connect = new AWSS3Connect();

		// getting input file location from S3 bucket
		String s3reportFilePath = xmlUtil.getS3RDMLReportFilePath();

		String s3LogoFilePath = xmlUtil.getS3RDMLFilePath();

		// getting s3 bucket name
		String bucketName = util.getS3BucketName();

		// getting s3 bucket region
		String bucketRegion = xmlUtil.getS3BucketRegion();

		// Set the presigned URL to expire after one hour.
		java.util.Date expiration = new java.util.Date();
		long expTimeMillis = expiration.getTime();
		expTimeMillis += 1000 * 60 * 60;
		expiration.setTime(expTimeMillis);

		AWSCredentials credentials = new BasicAWSCredentials(accessKey, secreteKey);

		AmazonS3 s3 = AmazonS3ClientBuilder.standard().withCredentials(new AWSStaticCredentialsProvider(credentials))
				.withRegion(bucketRegion).build();

		/*
		 * Getting user role from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");

		String username = patientDAOInf.retrieveUsernameBYuserID(loginForm.getUserID());

		/*
		 * Getting form name to be display based on logged in User
		 */

		patientForm.setClinicID(loginForm.getClinicID());

		int lastOPDVisitID = 0;

		/*
		 * inserting visit details into Visit table
		 */
		message = serviceInf.UpdateBDPReportData(patientForm);

		if (message.equals("success")) {

			addActionMessage("visit Updated successfully.");

			lastOPDVisitID = patientDAOInf.retrieveLastOPDVisitID(patientForm.getPatientID(), loginForm.getClinicID());

			boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", lastOPDVisitID);

			if (visitCheck) {

				billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
			} else {
				billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
						loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
			}

			patientList = patientDAOInf.retrieveLabPatientDetails(patientForm.getPatientID(), lastOPDVisitID,
					loginForm.getClinicID(), patientForm.getAptID());

			doctorList1 = configurationUtil.getDoctorList(loginForm.getPracticeID());

			reportList = configurationUtil.getRepostList(patientForm.getVisitTypeID());

			String Template = patientDAOInf.retrieveTemplate(lastOPDVisitID);

			request.setAttribute("Template", Template);

			HttpServletRequest request = ServletActionContext.getRequest();

			ServletContext context = request.getServletContext();

			String realPath = context.getRealPath("/");

			// String pdfOutFIleName = reportFilePath + patientForm.getFirstName() +
			// patientForm.getLastName()
			String pdfOutFIleName = patientForm.getFirstName() + patientForm.getLastName() + patientForm.getPatientID()
					+ "_" + patientForm.getVisitID() + "p.pdf";

			System.out.println("PRESC FILE PATH IS::" + pdfOutFIleName);

			message = convertToPDFUtil.convertBDPReportPDF(patientForm.getPatientID(), patientForm.getVisitID(),
					realPath, pdfOutFIleName, loginForm.getClinicID(), loginForm.getPracticeID(), username, s3,
					s3LogoFilePath, bucketName);

			if (message.equals("success")) {

				File inputFile = new File(realPath + "/" + pdfOutFIleName);

				// Storing file to S3 RDML INPUT FILE location
				message = awss3Connect.pushFile(inputFile, pdfOutFIleName, bucketName, bucketRegion, s3reportFilePath);

				S3ObjectInputStream s3ObjectInputStream = s3
						.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, pdfOutFIleName))
						.getObjectContent();

				request.setAttribute("PDFOutFileName", pdfOutFIleName);

				patientForm.setFileInputStream(s3ObjectInputStream);

				patientForm.setFileName(pdfOutFIleName);

				boolean EmailCheck = util.verifyCommunicationCheck("emailPresc");

				if (EmailCheck) {

					/*
					 * Retrieving patient's email ID, if not null, then sending patient a welcome
					 * mail
					 */
					String emailID = patientDAOInf.retrievePatientEmailByID(patientForm.getPatientID());

					if (emailID == null || emailID == "") {
						System.out.println("EmailID no not found for patient.");
					} else {

						if (emailID.isEmpty()) {
							System.out.println("EmailID no not found for patient.");
						} else {

							/*
							 * Sending prescription mail to patient
							 */
							emailUtil.sendPrescriptionMail(patientForm.getPatientID(), loginForm.getPracticeID(),
									loginForm.getClinicID(), patientForm.getVisitID(), realPath, pdfOutFIleName,
									emailID);
						}

					}

				}

				/*
				 * Check whether appointment udpated flag is on or not, and depending upon that
				 * sending SMS and Email
				 */
				boolean SMSCheck = util.verifyCommunicationCheck("smsPresc");

				if (SMSCheck) {

					/*
					 * Retrieving patient's mobile no, if mobile is not null, then sending patient a
					 * welcome message
					 */
					String mobileNo = patientDAOInf.retrievePatientMobileNoByID(patientForm.getPatientID());

					/*
					 * Sending patient a welcome as well as Appointment scheduled message on
					 * checking whether mobile no is available for that patient or not
					 */
					if (mobileNo == null || mobileNo == "") {
						System.out.println("Mobile no not found for patient.");
					} else {

						if (mobileNo.isEmpty()) {
							System.out.println("Mobile no not found for patient.");
						} else {

							/*
							 * Sending bill details SMS to patient
							 */
							smsSender.sendGeneralisedPrescriptionORBillSMS(patientForm.getVisitID(), mobileNo,
									loginForm.getPracticeID(), loginForm.getClinicID(), ActivityStatus.PRESCRIPTION,
									pdfOutFIleName);

						}

					}

				}

			}

			request.setAttribute("apptID", patientForm.getAptID());

			String[] formNameArray = loginForm.getOPDJSPName().split("&");

			System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[0].trim());

			// Setting add opd page name value in pageName variable
			setPageName(formNameArray[0].trim());

			return SUCCESS;

		} else {

			addActionError("Eexception occurred while adding visit details. Please check logs for more details.");

			patientList = patientDAOInf.retrieveLabPatientDetails(patientForm.getPatientID(), lastOPDVisitID,
					loginForm.getClinicID(), patientForm.getAptID());

			doctorList1 = configurationUtil.getDoctorList(loginForm.getPracticeID());

			reportList = configurationUtil.getRepostList(patientForm.getVisitTypeID());

			request.setAttribute("apptID", patientForm.getAptID());

			String[] formNameArray = loginForm.getOPDJSPName().split("&");

			System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[0].trim());

			// Setting add opd page name value in pageName variable
			setPageName(formNameArray[0].trim());

			return ERROR;

		}
	}

	public String printBDPReport() throws Exception {
		patientDAOInf = new PatientDAOImpl();

		serviceInf = new eDhanvantariServiceImpl();

		SMSSender smsSender = new SMSSender();

		EmailUtil emailUtil = new EmailUtil();

		ConvertToPDFUtil convertToPDFUtil = new ConvertToPDFUtil();

		LoginDAOInf daoInf = new LoginDAOImpl();

		ClinicDAOInf daoInf1 = new ClinicDAOImpl();

		RegistrationDAOinf registrationDAOinf = new RegistrationDAOImpl();

		PrescriptionManagementDAOInf managementDAOInf = new PrescriptionManagementDAOImpl();

		String accessKey = xmlUtil.getAccessKey();

		String secreteKey = xmlUtil.getSecreteKey();

		AWSS3Connect awss3Connect = new AWSS3Connect();

		// getting input file location from S3 bucket
		String s3reportFilePath = xmlUtil.getS3RDMLReportFilePath();

		String s3LogoFilePath = xmlUtil.getS3RDMLFilePath();

		// getting s3 bucket name
		String bucketName = util.getS3BucketName();

		// getting s3 bucket region
		String bucketRegion = xmlUtil.getS3BucketRegion();

		// Set the presigned URL to expire after one hour.
		java.util.Date expiration = new java.util.Date();
		long expTimeMillis = expiration.getTime();
		expTimeMillis += 1000 * 60 * 60;
		expiration.setTime(expTimeMillis);

		AWSCredentials credentials = new BasicAWSCredentials(accessKey, secreteKey);

		AmazonS3 s3 = AmazonS3ClientBuilder.standard().withCredentials(new AWSStaticCredentialsProvider(credentials))
				.withRegion(bucketRegion).build();

		/*
		 * Getting user role from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");

		String username = patientDAOInf.retrieveUsernameBYuserID(loginForm.getUserID());

		/*
		 * Getting form name to be display based on logged in User
		 */

		patientForm.setClinicID(loginForm.getClinicID());

		int lastOPDVisitID = 0;
		String status = "";
		if (patientForm.getVisitID() != 0) {
			message = serviceInf.UpdateBDPReportData(patientForm);
			status = "update";
		} else {
			message = serviceInf.addBDPReportData(patientForm);
			status = "add";
		}

		if (message.equals("success")) {
			if (status == "add") {
				addActionMessage("New visit added successfully.");
			} else {
				addActionMessage("Visit updated successfully.");
			}

			lastOPDVisitID = patientDAOInf.retrieveLastOPDVisitID(patientForm.getPatientID(), loginForm.getClinicID());

			boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", lastOPDVisitID);

			if (visitCheck) {

				billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
			} else {
				billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
						loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
			}

			patientList = patientDAOInf.retrieveLabPatientDetails(patientForm.getPatientID(), lastOPDVisitID,
					loginForm.getClinicID(), patientForm.getAptID());

			doctorList1 = configurationUtil.getDoctorList(loginForm.getPracticeID());

			reportList = configurationUtil.getRepostList(patientForm.getVisitTypeID());

			String Template = patientDAOInf.retrieveTemplate(lastOPDVisitID);

			request.setAttribute("Template", Template);

			HttpServletRequest request = ServletActionContext.getRequest();

			ServletContext context = request.getServletContext();

			String realPath = context.getRealPath("/");

			// String pdfOutFIleName = reportFilePath + patientForm.getFirstName() +
			// patientForm.getLastName()
			String pdfOutFIleName = patientForm.getFirstName() + patientForm.getLastName() + patientForm.getPatientID()
					+ "_" + patientForm.getVisitID() + "p.pdf";

			System.out.println("PRESC FILE PATH IS::" + pdfOutFIleName);

			message = convertToPDFUtil.convertBDPReportPDF(patientForm.getPatientID(), patientForm.getVisitID(),
					realPath, pdfOutFIleName, loginForm.getClinicID(), loginForm.getPracticeID(), username, s3,
					s3LogoFilePath, bucketName);

			if (message.equals("success")) {

				File inputFile = new File(realPath + "/" + pdfOutFIleName);

				// Storing file to S3 RDML INPUT FILE location
				message = awss3Connect.pushFile(inputFile, pdfOutFIleName, bucketName, bucketRegion, s3reportFilePath);

				S3ObjectInputStream s3ObjectInputStream = s3
						.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, pdfOutFIleName))
						.getObjectContent();

				request.setAttribute("PDFOutFileName", pdfOutFIleName);

				patientForm.setFileInputStream(s3ObjectInputStream);

				patientForm.setFileName(pdfOutFIleName);

				boolean EmailCheck = util.verifyCommunicationCheck("emailPresc");

				if (EmailCheck) {

					/*
					 * Retrieving patient's email ID, if not null, then sending patient a welcome
					 * mail
					 */
					String emailID = patientDAOInf.retrievePatientEmailByID(patientForm.getPatientID());

					if (emailID == null || emailID == "") {
						System.out.println("EmailID no not found for patient.");
					} else {

						if (emailID.isEmpty()) {
							System.out.println("EmailID no not found for patient.");
						} else {

							/*
							 * Sending prescription mail to patient
							 */
							emailUtil.sendPrescriptionMail(patientForm.getPatientID(), loginForm.getPracticeID(),
									loginForm.getClinicID(), patientForm.getVisitID(), realPath, pdfOutFIleName,
									emailID);
						}

					}

				}

				/*
				 * Check whether appointment udpated flag is on or not, and depending upon that
				 * sending SMS and Email
				 */
				boolean SMSCheck = util.verifyCommunicationCheck("smsPresc");

				if (SMSCheck) {

					/*
					 * Retrieving patient's mobile no, if mobile is not null, then sending patient a
					 * welcome message
					 */
					String mobileNo = patientDAOInf.retrievePatientMobileNoByID(patientForm.getPatientID());

					/*
					 * Sending patient a welcome as well as Appointment scheduled message on
					 * checking whether mobile no is available for that patient or not
					 */
					if (mobileNo == null || mobileNo == "") {
						System.out.println("Mobile no not found for patient.");
					} else {

						if (mobileNo.isEmpty()) {
							System.out.println("Mobile no not found for patient.");
						} else {

							/*
							 * Sending bill details SMS to patient
							 */
							smsSender.sendGeneralisedPrescriptionORBillSMS(patientForm.getVisitID(), mobileNo,
									loginForm.getPracticeID(), loginForm.getClinicID(), ActivityStatus.PRESCRIPTION,
									pdfOutFIleName);

						}

					}

				}

			}

			request.setAttribute("apptID", patientForm.getAptID());

			String[] formNameArray = loginForm.getOPDJSPName().split("&");

			System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[0].trim());

			// Setting add opd page name value in pageName variable
			setPageName(formNameArray[0].trim());

			return SUCCESS;

		} else {

			addActionError("Eexception occurred while adding visit details. Please check logs for more details.");

			patientList = patientDAOInf.retrieveLabPatientDetails(patientForm.getPatientID(), lastOPDVisitID,
					loginForm.getClinicID(), patientForm.getAptID());

			doctorList1 = configurationUtil.getDoctorList(loginForm.getPracticeID());

			reportList = configurationUtil.getRepostList(patientForm.getVisitTypeID());

			request.setAttribute("apptID", patientForm.getAptID());

			String[] formNameArray = loginForm.getOPDJSPName().split("&");

			System.out.println("Add OPD JSP Page name for logged in user is ::: " + formNameArray[0].trim());

			// Setting add opd page name value in pageName variable
			setPageName(formNameArray[0].trim());

			return ERROR;

		}
	}

	public void downloadBlankPrescription() throws Exception {
		patientDAOInf = new PatientDAOImpl();

		JSONObject values = new JSONObject();

		JSONArray array = new JSONArray();
		values = new JSONObject();

		JSONObject object = new JSONObject();

		response.setCharacterEncoding("UTF-8");

		try {

			patientDAOInf = new PatientDAOImpl();

			serviceInf = new eDhanvantariServiceImpl();

			SMSSender smsSender = new SMSSender();

			EmailUtil emailUtil = new EmailUtil();

			ConvertToPDFUtil convertToPDFUtil = new ConvertToPDFUtil();

			LoginDAOInf daoInf = new LoginDAOImpl();

			ClinicDAOInf daoInf1 = new ClinicDAOImpl();

			RegistrationDAOinf registrationDAOinf = new RegistrationDAOImpl();

			PrescriptionManagementDAOInf managementDAOInf = new PrescriptionManagementDAOImpl();

			String accessKey = xmlUtil.getAccessKey();

			String secreteKey = xmlUtil.getSecreteKey();

			AWSS3Connect awss3Connect = new AWSS3Connect();

			// getting input file location from S3 bucket
			String s3reportFilePath = xmlUtil.getS3RDMLReportFilePath();

			String s3LogoFilePath = xmlUtil.getS3RDMLFilePath();

			// getting s3 bucket name
			String bucketName = util.getS3BucketName();

			// getting s3 bucket region
			String bucketRegion = xmlUtil.getS3BucketRegion();

			// Set the presigned URL to expire after one hour.
			java.util.Date expiration = new java.util.Date();
			long expTimeMillis = expiration.getTime();
			expTimeMillis += 1000 * 60 * 60;
			expiration.setTime(expTimeMillis);

			AWSCredentials credentials = new BasicAWSCredentials(accessKey, secreteKey);

			AmazonS3 s3 = AmazonS3ClientBuilder.standard()
					.withCredentials(new AWSStaticCredentialsProvider(credentials)).withRegion(bucketRegion).build();

			/*
			 * Getting user role from session
			 */
			LoginForm loginForm = (LoginForm) session.get("USER");

			String prescTabCheck = "enable";

			request.setAttribute("prescTabCheck", prescTabCheck);

			HttpServletRequest request = ServletActionContext.getRequest();

			ServletContext context = request.getServletContext();

			String realPath = context.getRealPath("/");

			// String pdfOutFIleName = reportFilePath + patientForm.getFirstName() +
			// patientForm.getLastName()
			String pdfOutFIleName = "blankPrescription" + loginForm.getClinicID() + ".pdf";

			message = convertToPDFUtil.convertPrescriptionForPhysicianOPDPDF1(patientForm.getPatientID(),
					patientForm.getVisitID(), realPath, pdfOutFIleName, loginForm.getClinicID(),
					loginForm.getPracticeID(), s3, s3LogoFilePath, bucketName);

			File inputFile = new File(realPath + "/" + pdfOutFIleName);

			// Storing file to S3 RDML INPUT FILE location
			message = awss3Connect.pushFile(inputFile, pdfOutFIleName, bucketName, bucketRegion, s3reportFilePath);

			S3ObjectInputStream s3ObjectInputStream = s3
					.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, pdfOutFIleName))
					.getObjectContent();

			request.setAttribute("PDFOutFileName", pdfOutFIleName);

			patientList = patientDAOInf.retrieveDefaultPatientDetails(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID(), patientForm.getAptID(),
					loginForm.getVisitTypeID());

			boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

			if (visitCheck) {
				billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
			} else {
				billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
						loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
			}

			/* Retrieve labReport List */
			labReportList = patientDAOInf.retrievelabReportDetailsList(patientForm.getPatientID(),
					loginForm.getClinicID());

			String paymentType = managementDAOInf.retrievePaymentTypeByReceiptID(patientForm.getVisitID());
			request.setAttribute("paymentType", paymentType);

			String dummy = "success";

			request.setAttribute("lasteEnteredVisitList", "");

			request.setAttribute("lasteEnteredPrescList", dummy);

			request.setAttribute("lasteEnteredBillList", "");

			String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

			request.setAttribute("medicalCertiText", medicatCertificate);

			String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

			request.setAttribute("referralLetter", referralLetter);

			/*
			 * retrieving prescription list by visitID
			 */
			prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID());

			InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(patientForm.getVisitID());

			diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());
			/*
			 * retrieving symptomCheck list by visitID
			 */
			symptomList = patientDAOInf.retrievesymptomCheckList(patientForm.getVisitID());

			historyList = patientDAOInf.retrieveMedicalHistoryList(patientForm.getPatientID());

			medicationList = patientDAOInf.retrieveCurrentMedicationList(patientForm.getPatientID());

			complaintList = patientDAOInf.retrievecomplaintList(patientForm.getVisitID());

			diagnoseList = configurationUtil.getDiagnoseList();

			request.setAttribute("apptID", patientForm.getAptID());

			drugList = configurationUtil.getTradeNameList();

			orthoBillItemList = patientDAOInf.retrieveOrthoBillingItemList(patientForm.getVisitID());

			InvestigationList = configurationUtil.getInvestigationList();

			frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

			doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

			categoryList = configurationUtil.getCategoryList();

			hourList = registrationDAOinf.retrieveStartHourListByClinicStartEndHour(loginForm.getClinicID());
			System.out.println("fileName:::" + pdfOutFIleName);
			object.put("fileName", pdfOutFIleName);
			array.add(object);

			values.put("Release", array);

			PrintWriter out = response.getWriter();

			out.print(values);

		} catch (Exception exception) {
			exception.printStackTrace();

			object.put("ErrMsg", "Exception occured while deleting Report record.");
			array.add(object);

			values.put("Release", array);

			PrintWriter out = response.getWriter();

			out.print(values);
		}
	}

	public void getUpdatedRefDoc() throws Exception {
		JSONObject values = new JSONObject();

		JSONArray array = new JSONArray();
		values = new JSONObject();

		JSONObject object = new JSONObject();

		response.setCharacterEncoding("UTF-8");

		LoginForm userForm = (LoginForm) session.get("USER");

		try {

			System.out.println("Referring doctor list is here ::::");
			referringDoctorList = configurationUtil.getReferringDoctorList1(userForm.getPracticeID());

			PrintWriter out = response.getWriter();

			array.add(referringDoctorList);

			values.put("Release", array);

			out.print(values);

		} catch (Exception exception) {
			exception.printStackTrace();
			// System.out.println("Exception occured while deleting IPD complaint due to:::"
			// + exception.getMessage());

			object.put("MSG",
					"Exception occured while adding new referring doctor.  Please check server logs for more details.");
			array.add(object);

			values.put("Release", array);

			PrintWriter out = response.getWriter();

			out.print(values);
		}
	}

	public void getDetailsPCPNDT() throws Exception {
		SimpleDateFormat currentDateFormat = new SimpleDateFormat("dd/MM/yyyy");
		JSONObject values = new JSONObject();

		JSONArray array = new JSONArray();
		values = new JSONObject();

		JSONObject object = new JSONObject();

		response.setCharacterEncoding("UTF-8");

		LoginForm userForm = (LoginForm) session.get("USER");
		patientDAOInf = new PatientDAOImpl();
		String pcpNDTLocalPath = xmlUtil.getPcpNDTLocalPath();
		try {

			message = patientDAOInf.insertIsNormalValue(patientForm.getVisitID(), getTxtNormal());
			if (message.equalsIgnoreCase("success")) {
				System.out.print("Normal Bool value updated...");
			} else {
				System.out.print("error while updating bool value...");
			}
			values = patientDAOInf.retrivePatientDetailsByID(patientForm.getPatientID(), patientForm.getVisitID(),
					pcpNDTLocalPath);
			// Udpate PCPNDT Status

			PrintWriter out = response.getWriter();

			out.print(values);

		} catch (Exception exception) {
			exception.printStackTrace();
			// System.out.println("Exception occured while deleting IPD complaint due to:::"
			// + exception.getMessage());

			object.put("MSG", " Please check server logs for more details.");
			array.add(object);

			values.put("Release", array);

			PrintWriter out = response.getWriter();

			out.print(values);
		}

	}

	public void updatePCPNDTStatus() throws Exception {
		SimpleDateFormat currentDateFormat = new SimpleDateFormat("dd/MM/yyyy");
		JSONObject values = new JSONObject();

		JSONArray array = new JSONArray();
		values = new JSONObject();

		JSONObject object = new JSONObject();

		response.setCharacterEncoding("UTF-8");

		LoginForm userForm = (LoginForm) session.get("USER");
		patientDAOInf = new PatientDAOImpl();

		try {

			message = patientDAOInf.UpdatePCPNDTStatus(patientForm.getPatientID(), patientForm.getVisitID());

			object.put("MSG", "success");

			array.add(object);

			values.put("Release", array);

			PrintWriter out = response.getWriter();

			out.print(values);

		} catch (Exception exception) {
			exception.printStackTrace();
			// System.out.println("Exception occured while deleting IPD complaint due to:::"
			// + exception.getMessage());

			object.put("MSG", "Please check server logs for more details.");

			array.add(object);

			values.put("Release", array);

			PrintWriter out = response.getWriter();

			out.print(values);
		}

	}

	/**
	 * 
	 * @throws Exception
	 */
	public void retrieveRoomTypeForBooking() throws Exception {
		patientDAOInf = new PatientDAOImpl();

		JSONObject values = new JSONObject();

		JSONArray array = new JSONArray();
		values = new JSONObject();

		JSONObject object = new JSONObject();

		response.setCharacterEncoding("UTF-8");

		/*
		 * Getting userID from Session
		 */
		LoginForm userForm = (LoginForm) session.get("USER");

		try {

			values = patientDAOInf.retrieveRoomTypeForBooking(patientForm.getStartDate(), patientForm.getEndDate(),
					userForm.getClinicID(), userForm.getPracticeID());
			// Udpate PCPNDT Status

			PrintWriter out = response.getWriter();

			out.print(values);

		} catch (Exception exception) {
			exception.printStackTrace();

			object.put("ErrMsg", "Exception occured while room lst for booking");
			array.add(object);

			values.put("Release", array);

			PrintWriter out = response.getWriter();

			out.print(values);
		}
	}

	/**
	 * Search Patients for Pharmacist
	 * 
	 * @return String
	 * @throws Exception
	 */
	public String SearchPharmaPatients_bk() throws Exception {

		patientDAOInf = new PatientDAOImpl();

		LoginForm loginForm = (LoginForm) session.get("USER");
		System.out.println(loginForm.getClinicID());
//		System.out.println("*****");
		searchPatientList = patientDAOInf.fetchPharmaPatient(loginForm.getClinicID());

		if (searchPatientList.size() > 0) {

			request.setAttribute("patientListEnable", "patientSearchListEnable");

			return SUCCESS;

		} else {

			System.out.println("New error");
			addActionError(
					"No patient found for " + patientForm.getSearchCriteria() + " : " + patientForm.getSearchName());

			return ERROR;

		}
	}

	public String SearchPharmaPatients() throws Exception {

		patientDAOInf = new PatientDAOImpl();

		LoginForm loginForm = (LoginForm) session.get("USER");
		// PatientForm patientForm = (PatientForm) session.get("USER");

		searchPatientList = patientDAOInf.fetchPharmaPatient(loginForm.getClinicID(),
				patientForm.getPharmaSearchName());

		if (searchPatientList.size() > 0) {

			request.setAttribute("patientListEnable", "patientSearchListEnable");

			return SUCCESS;

		} else {

			System.out.println("New error");
			addActionError("No patient found.");

			return ERROR;

		}
	}

	/**
	 * 
	 * @return
	 * @throws Exception
	 */
	public String addNewIPDVisitWithoutPrint() throws Exception {

		System.out.println("addNewIPDVisitWithoutPrint");

		serviceInf = new eDhanvantariServiceImpl();
		patientDAOInf = new PatientDAOImpl();

		LoginDAOInf daoInf = new LoginDAOImpl();

		String accessKey = xmlUtil.getAccessKey();

		String secreteKey = xmlUtil.getSecreteKey();

		AWSS3Connect awss3Connect = new AWSS3Connect();

		// getting input file location from S3 bucket
		String s3reportFilePath = xmlUtil.getS3RDMLReportFilePath();

		// getting s3 bucket name
		String bucketName = util.getS3BucketName();

		// getting s3 bucket region
		String bucketRegion = xmlUtil.getS3BucketRegion();

		String s3LogoFilePath = xmlUtil.getS3RDMLFilePath();

		AWSCredentials credentials = new BasicAWSCredentials(accessKey, secreteKey);

		AmazonS3 s3 = AmazonS3ClientBuilder.standard().withCredentials(new AWSStaticCredentialsProvider(credentials))
				.withRegion(bucketRegion).build();

		request.setAttribute("apptID", patientForm.getAptID());

		/*
		 * Getting user role from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");

		ConvertToPDFUtil convertToPDFUtil = new ConvertToPDFUtil();

		HttpServletRequest request = ServletActionContext.getRequest();

		ServletContext context = request.getServletContext();

		String realPath = context.getRealPath("/");

		/*
		 * Setting clinicID from session into clinicID variable from PatientForm
		 */
		patientForm.setClinicID(loginForm.getClinicID());
		patientForm.setVisitTypeID(loginForm.getVisitTypeID());

		orthoBillItemList = patientDAOInf.retrieveOrthoBillingItemList(patientForm.getVisitID());

		/*
		 * retrieving prescription list by visitID
		 */
		int lastOPDVisitID = patientDAOInf.retrieveLastIPDVisitID(patientForm.getPatientID(), loginForm.getClinicID());

		prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(), lastOPDVisitID,
				loginForm.getClinicID());

		InvestigationTestsList = patientDAOInf.retrieveInvestigationTestsList(lastOPDVisitID);

		diagnosticList = patientDAOInf.retrieveDiagnosticList(patientForm.getVisitID());

		InvestigationList = configurationUtil.getInvestigationList();

		message = serviceInf.addNewIPDVisit(patientForm, realPath);
		if (message.equalsIgnoreCase("success")) {

			System.out.println("Real path is :: " + realPath);

			request.setAttribute("consentDocFile", "Yes");

			// String pdfOutFIleName = realPath + patientForm.getFirstName() +
			// patientForm.getLastName()
			String pdfOutFIleName = patientForm.getFirstName() + patientForm.getLastName() + patientForm.getPatientID()
					+ "_" + patientForm.getVisitID() + "ipd.pdf";

			message = convertToPDFUtil.convertIPDPDF(patientForm.getPatientID(), patientForm.getVisitID(),
					pdfOutFIleName, realPath, s3, s3LogoFilePath, bucketName, null);

			boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

			if (visitCheck) {
				billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
			} else {
				billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
						loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
			}

			if (message.equalsIgnoreCase("success")) {
				addActionMessage("Successfully inserted IPD visit.");

				/*
				 * File inputFile = new File(realPath + "/" + pdfOutFIleName);
				 * 
				 * // Storing file to S3 RDML INPUT FILE location message =
				 * awss3Connect.pushFile(inputFile, pdfOutFIleName, bucketName, bucketRegion,
				 * s3reportFilePath);
				 * 
				 * S3ObjectInputStream s3ObjectInputStream = s3 .getObject(new
				 * GetObjectRequest(bucketName + "/" + s3reportFilePath, pdfOutFIleName))
				 * .getObjectContent();
				 * 
				 * request.setAttribute("PDFOutFileName", pdfOutFIleName);
				 * 
				 * patientForm.setFileInputStream(s3ObjectInputStream);
				 * 
				 * patientForm.setFileName(pdfOutFIleName);
				 */

				String lastEneteredVisitList = "success";

				request.setAttribute("lastEneteredVisitList", lastEneteredVisitList);

				String dummy = "success";

				request.setAttribute("lasteEnteredVisitList", dummy);

				request.setAttribute("consentText", "success");

				String ipdVisitPage = "display";

				boolean hasConsent = patientDAOInf.verifyhasConsentValue(loginForm.getVisitTypeID());

				if (hasConsent) {

					String consentDocFileName = patientDAOInf.retrieveConsentDocFileName(loginForm.getVisitTypeID());

					request.setAttribute("consentDocFileName", consentDocFileName);
				}

				LabInvastigationList = patientDAOInf.reytrieveLabInvastigationLstByVisitID(patientForm.getVisitID());

				request.setAttribute("LabInvastigationList", LabInvastigationList);

				request.setAttribute("display", ipdVisitPage);

				patientList = patientDAOInf.retireveLastEneteredIPDVisit(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID());

				IPDComplaintsList = patientDAOInf.retrieveIPDComplaintsList(patientForm.getVisitID());

				IPDContinuationSheetList = patientDAOInf.retrieveIPDContinuationSheetList(patientForm.getVisitID());

				diagnoseList = configurationUtil.getDiagnoseList();

				String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

				request.setAttribute("medicalCertiText", medicatCertificate);

				String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

				request.setAttribute("referralLetter", referralLetter);

				doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

				// drugList = configurationUtil.getTradeNameList();

				frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

				// categoryList = configurationUtil.getCategoryList();

				if (loginForm.getPracticeID() == 60) {
					drugList = configurationUtil.getPECTradeNameList();
					categoryList = configurationUtil.getPECCategoryList();
				} else {
					drugList = configurationUtil.getTradeNameList();
					categoryList = configurationUtil.getCategoryList();

				}

				// Inserting into Audit table
				daoInf.insertAudit(request.getRemoteAddr(), "Add IPD Visit", loginForm.getUserID());

				/*
				 * Getting form name to be display based on logged in User
				 */
				String[] formNameArray = loginForm.getOPDJSPName().split("&");

				System.out.println("Add IPD JSP Page name for logged in user is ::: " + formNameArray[0].trim());

				// Setting add ipd page name value in pageName variable
				setPageName(formNameArray[0].trim());

				return SUCCESS;
			} else {
				addActionError("Failed to create PDF for IPD visit. Please check logs for more details.");

				String lastEneteredVisitList = "success";

				request.setAttribute("lastEneteredVisitList", lastEneteredVisitList);

				patientList = patientDAOInf.retireveLastEneteredIPDVisit(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID());
				String dummy = "success";

				request.setAttribute("lasteEnteredVisitList", dummy);

				String ipdVisitPage = "display";

				request.setAttribute("display", ipdVisitPage);

				request.setAttribute("consentText", "success");

				boolean hasConsent = patientDAOInf.verifyhasConsentValue(loginForm.getVisitTypeID());

				if (hasConsent) {

					String consentDocFileName = patientDAOInf.retrieveConsentDocFileName(loginForm.getVisitTypeID());

					request.setAttribute("consentDocFileName", consentDocFileName);

				}

				LabInvastigationList = patientDAOInf.reytrieveLabInvastigationLstByVisitID(patientForm.getVisitID());

				request.setAttribute("LabInvastigationList", LabInvastigationList);

				IPDComplaintsList = patientDAOInf.retrieveIPDComplaintsList(patientForm.getVisitID());

				diagnoseList = configurationUtil.getDiagnoseList();

				String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

				request.setAttribute("medicalCertiText", medicatCertificate);

				String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

				request.setAttribute("referralLetter", referralLetter);

				doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

				// drugList = configurationUtil.getTradeNameList();

				frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

				// categoryList = configurationUtil.getCategoryList();

				if (loginForm.getPracticeID() == 60) {
					drugList = configurationUtil.getPECTradeNameList();
					categoryList = configurationUtil.getPECCategoryList();
				} else {
					drugList = configurationUtil.getTradeNameList();
					categoryList = configurationUtil.getCategoryList();

				}

				// Inserting into Audit table
				daoInf.insertAudit(request.getRemoteAddr(), "Add IPD Visit Exception occurred", loginForm.getUserID());

				/*
				 * Getting form name to be display based on logged in User
				 */
				String[] formNameArray = loginForm.getOPDJSPName().split("&");

				System.out.println("Add IPD JSP Page name for logged in user is ::: " + formNameArray[0].trim());

				// Setting add ipd page name value in pageName variable
				setPageName(formNameArray[0].trim());

				return ERROR;
			}

		} else {
			addActionError("Failed to insert IPD visit. Please check logs for more details.");

			request.setAttribute("consentDocFile", "No");

			String lastEneteredVisitList = "success";

			request.setAttribute("lastEneteredVisitList", lastEneteredVisitList);

			patientList = patientDAOInf.retireveLastEneteredIPDVisit(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID());

			String dummy = "success";

			request.setAttribute("lasteEnteredVisitList", dummy);

			String ipdVisitPage = "display";

			request.setAttribute("display", ipdVisitPage);

			request.setAttribute("consentText", "success");

			boolean hasConsent = patientDAOInf.verifyhasConsentValue(loginForm.getVisitTypeID());

			if (hasConsent) {

				String consentDocFileName = patientDAOInf.retrieveConsentDocFileName(loginForm.getVisitTypeID());

				request.setAttribute("consentDocFileName", consentDocFileName);

			}

			boolean visitCheck = patientDAOInf.verifyVisitExists("Receipt", patientForm.getVisitID());

			if (visitCheck) {
				billList = patientDAOInf.retrieveVisitBillingByVisitID(patientForm.getVisitID());
			} else {
				billList = patientDAOInf.retrieveVisitBillingByVisitTypeID(loginForm.getVisitTypeID(),
						loginForm.getClinicID(), loginForm.getClinicSuffix(), patientForm.getPatientID());
			}

			LabInvastigationList = patientDAOInf.reytrieveLabInvastigationLstByVisitID(patientForm.getVisitID());

			request.setAttribute("LabInvastigationList", LabInvastigationList);

			IPDComplaintsList = patientDAOInf.retrieveIPDComplaintsList(patientForm.getVisitID());

			diagnoseList = configurationUtil.getDiagnoseList();

			String medicatCertificate = patientDAOInf.retrieveMedicalCertificate(patientForm.getVisitID());

			request.setAttribute("medicalCertiText", medicatCertificate);

			String referralLetter = patientDAOInf.retrieveReferralLetter(patientForm.getVisitID());

			request.setAttribute("referralLetter", referralLetter);

			doctorList = configurationUtil.getReferringDoctorList(loginForm.getPracticeID());

			drugList = configurationUtil.getTradeNameList();

			frequencyList = configurationUtil.getFrequencyList(loginForm.getPracticeID());

			categoryList = configurationUtil.getCategoryList();

			// Inserting into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Add IPD Visit Exception occurred", loginForm.getUserID());

			/*
			 * Getting form name to be display based on logged in User
			 */
			String[] formNameArray = loginForm.getOPDJSPName().split("&");

			System.out.println("Add IPD JSP Page name for logged in user is ::: " + formNameArray[0].trim());

			// Setting add ipd page name value in pageName variable
			setPageName(formNameArray[0].trim());

			return ERROR;
		}
	}

	/**
	 * 
	 * @return
	 * @throws Exception
	 */
	public String updateIPDVisitWithoutPrint() throws Exception {

		serviceInf = new eDhanvantariServiceImpl();
		patientDAOInf = new PatientDAOImpl();

		LoginDAOInf daoInf = new LoginDAOImpl();

		String accessKey = xmlUtil.getAccessKey();

		/*
		 * Getting user role from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");

		String secreteKey = xmlUtil.getSecreteKey();

		AWSS3Connect awss3Connect = new AWSS3Connect();

		// getting input file location from S3 bucket
		String s3reportFilePath = xmlUtil.getS3RDMLReportFilePath();

		// getting s3 bucket name
		String bucketName = util.getS3BucketName();

		// getting s3 bucket region
		String bucketRegion = xmlUtil.getS3BucketRegion();

		String s3LogoFilePath = xmlUtil.getS3RDMLFilePath();

		AWSCredentials credentials = new BasicAWSCredentials(accessKey, secreteKey);

		AmazonS3 s3 = AmazonS3ClientBuilder.standard().withCredentials(new AWSStaticCredentialsProvider(credentials))
				.withRegion(bucketRegion).build();

		orthoBillItemList = patientDAOInf.retrieveOrthoBillingItemList(patientForm.getVisitID());

		categoryList = configurationUtil.getCategoryList();

		prescriptionList = patientDAOInf.retrievePrescriptionList(patientForm.getPatientID(), patientForm.getVisitID(),
				loginForm.getClinicID());

		ConvertToPDFUtil convertToPDFUtil = new ConvertToPDFUtil();

		message = serviceInf.updateIPDVisit(patientForm);
		if (message.equalsIgnoreCase("success")) {

			// adding data to maintain visit edit history
			patientForm.setAction("Edit");
			patientForm.setVisitType("IPD");
			patientForm.setUserID(loginForm.getUserID());
			patientForm.setClinicID(loginForm.getClinicID());

			patientDAOInf.insertVisitEditHistoryDetails(patientForm);

			HttpServletRequest request = ServletActionContext.getRequest();

			ServletContext context = request.getServletContext();

			String realPath = context.getRealPath("/");
			System.out.println("Real path is :: " + realPath);

			request.setAttribute("consentDocFile", "Yes");

			// String pdfOutFIleName = realPath + patientForm.getFirstName() +
			// patientForm.getLastName()
			String pdfOutFIleName = patientForm.getFirstName() + patientForm.getLastName() + patientForm.getPatientID()
					+ "_" + patientForm.getVisitID() + "ipd.pdf";

			message = convertToPDFUtil.convertIPDPDF(patientForm.getPatientID(), patientForm.getVisitID(),
					pdfOutFIleName, realPath, s3, s3LogoFilePath, bucketName, null);

			if (message.equalsIgnoreCase("success")) {
				addActionMessage("Successfully updated IPD visit.");

				/*
				 * File inputFile = new File(realPath + "/" + pdfOutFIleName);
				 * 
				 * // Storing file to S3 RDML INPUT FILE location message =
				 * awss3Connect.pushFile(inputFile, pdfOutFIleName, bucketName, bucketRegion,
				 * s3reportFilePath);
				 * 
				 * S3ObjectInputStream s3ObjectInputStream = s3 .getObject(new
				 * GetObjectRequest(bucketName + "/" + s3reportFilePath, pdfOutFIleName))
				 * .getObjectContent();
				 * 
				 * request.setAttribute("PDFOutFileName", pdfOutFIleName);
				 * 
				 * patientForm.setFileInputStream(s3ObjectInputStream);
				 * 
				 * patientForm.setFileName(pdfOutFIleName);
				 */

				String lastEneteredVisitList = "success";

				request.setAttribute("lastEneteredVisitList", lastEneteredVisitList);

				String dummy = "success";

				request.setAttribute("lasteEnteredVisitList", dummy);

				String ipdVisitPage = "display";

				request.setAttribute("display", ipdVisitPage);

				String updateCheck = "update";

				request.setAttribute("updateCheck", updateCheck);

				request.setAttribute("consentText", "success");

				patientList = patientDAOInf.retireveLastEneteredIPDVisit(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID());

				boolean hasConsent = patientDAOInf.verifyhasConsentValue(loginForm.getVisitTypeID());

				if (hasConsent) {

					String consentDocFileName = patientDAOInf.retrieveConsentDocFileName(loginForm.getVisitTypeID());

					request.setAttribute("consentDocFileName", consentDocFileName);
				}

				LabInvastigationList = patientDAOInf.reytrieveLabInvastigationLstByVisitID(patientForm.getVisitID());

				request.setAttribute("LabInvastigationList", LabInvastigationList);

				IPDComplaintsList = patientDAOInf.retrieveIPDComplaintsList(patientForm.getVisitID());

				diagnoseList = configurationUtil.getDiagnoseList();

				// Inserting into Audit table
				daoInf.insertAudit(request.getRemoteAddr(), "Edit IPD Visit", loginForm.getUserID());

				/*
				 * Getting form name to be display based on logged in User
				 */
				String[] formNameArray = loginForm.getOPDJSPName().split("&");

				System.out.println("Edit IPD JSP Page name for logged in user is ::: " + formNameArray[1].trim());

				// Setting add ipd page name value in pageName variable
				setPageName(formNameArray[1].trim());

				return SUCCESS;
			} else {
				addActionError("Failed to create PDF for IPD visit. Please check logs for more details.");

				String lastEneteredVisitList = "success";

				request.setAttribute("lastEneteredVisitList", lastEneteredVisitList);

				patientList = patientDAOInf.retireveLastEneteredIPDVisit(patientForm.getPatientID(),
						patientForm.getVisitID(), loginForm.getClinicID());

				boolean hasConsent = patientDAOInf.verifyhasConsentValue(loginForm.getVisitTypeID());

				if (hasConsent) {

					String consentDocFileName = patientDAOInf.retrieveConsentDocFileName(loginForm.getVisitTypeID());

					request.setAttribute("consentDocFileName", consentDocFileName);
				}

				String dummy = "success";

				request.setAttribute("lasteEnteredVisitList", dummy);

				String ipdVisitPage = "display";

				request.setAttribute("display", ipdVisitPage);

				String updateCheck = "update";

				request.setAttribute("updateCheck", updateCheck);

				request.setAttribute("consentText", "success");

				LabInvastigationList = patientDAOInf.reytrieveLabInvastigationLstByVisitID(patientForm.getVisitID());

				request.setAttribute("LabInvastigationList", LabInvastigationList);

				IPDComplaintsList = patientDAOInf.retrieveIPDComplaintsList(patientForm.getVisitID());

				diagnoseList = configurationUtil.getDiagnoseList();

				// Inserting into Audit table
				daoInf.insertAudit(request.getRemoteAddr(), "Edit IPD Visit Exception occurred", loginForm.getUserID());

				/*
				 * Getting form name to be display based on logged in User
				 */
				String[] formNameArray = loginForm.getOPDJSPName().split("&");

				System.out.println("Edit IPD JSP Page name for logged in user is ::: " + formNameArray[1].trim());

				// Setting add ipd page name value in pageName variable
				setPageName(formNameArray[1].trim());

				return ERROR;
			}

		} else {
			addActionError("Failed to update IPD visit. Please check logs for more details.");

			String lastEneteredVisitList = "success";

			request.setAttribute("lastEneteredVisitList", lastEneteredVisitList);

			request.setAttribute("consentDocFile", "Yes");

			patientList = patientDAOInf.retireveLastEneteredIPDVisit(patientForm.getPatientID(),
					patientForm.getVisitID(), loginForm.getClinicID());

			boolean hasConsent = patientDAOInf.verifyhasConsentValue(loginForm.getVisitTypeID());

			if (hasConsent) {

				String consentDocFileName = patientDAOInf.retrieveConsentDocFileName(loginForm.getVisitTypeID());

				request.setAttribute("consentDocFileName", consentDocFileName);
			}

			String dummy = "success";

			request.setAttribute("lasteEnteredVisitList", dummy);

			String ipdVisitPage = "display";

			request.setAttribute("display", ipdVisitPage);

			request.setAttribute("consentText", "success");

			LabInvastigationList = patientDAOInf.reytrieveLabInvastigationLstByVisitID(patientForm.getVisitID());

			request.setAttribute("LabInvastigationList", LabInvastigationList);

			IPDComplaintsList = patientDAOInf.retrieveIPDComplaintsList(patientForm.getVisitID());

			diagnoseList = configurationUtil.getDiagnoseList();

			// Inserting into Audit table
			daoInf.insertAudit(request.getRemoteAddr(), "Edit IPD Visit Exception occurred", loginForm.getUserID());

			/*
			 * Getting form name to be display based on logged in User
			 */
			String[] formNameArray = loginForm.getOPDJSPName().split("&");

			System.out.println("Edit IPD JSP Page name for logged in user is ::: " + formNameArray[1].trim());

			// Setting add ipd page name value in pageName variable
			setPageName(formNameArray[1].trim());

			return ERROR;
		}

	}

	/**
	 * Fetch Prescription
	 * 
	 * @return void
	 * @throws Exception
	 */
	public void fetchPharmaBill() throws Exception {

		patientDAOInf = new PatientDAOImpl();

		LoginForm loginForm = (LoginForm) session.get("USER");

		System.out.println(loginForm.getClinicID());
		patientDAOInf = new PatientDAOImpl();

		JSONObject values = new JSONObject();

		JSONArray array = new JSONArray();
		values = new JSONObject();

		JSONObject object = new JSONObject();

		response.setCharacterEncoding("UTF-8");
		try {
			patientForm.setVisitID(Integer.parseInt(request.getParameter("visitID")));

			System.out.println("Visit ID is ::: " + patientForm.getVisitID());

			values = patientDAOInf.retreivePharmaBill(patientForm.getVisitID(), loginForm.getClinicID(),
					loginForm.getClinicSuffix());

			PrintWriter out = response.getWriter();

			out.print(values);

		} catch (Exception e) {
			e.printStackTrace();
			System.out.println("Exception occured while retrieving Pharmacy bill due to:::" + e.getMessage());

			object.put("ExceptionMessage", "Exception occured while retrieving Pharma bills ");
			array.add(object);

			values.put("Release", array);

			PrintWriter out = response.getWriter();

			out.print(values);
		}

	}

	/**
	 * 
	 * @return
	 * @throws Exception
	 */
	public String viewDashboardAppointment() throws Exception {
		patientDAOInf = new PatientDAOImpl();

		/*
		 * Getting user role from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");

		System.out.printf("patientForm.getCliniciaID(): %s", patientForm.getCliniciaID());
		System.out.printf("loginForm.getClinicID(): %s", loginForm.getClinicID());
		System.out.printf("getMonthCount(): %s", getMonthCount());

		int monthCount = getMonthCount();

		/*
		 * Retrieving appointment details
		 */
		appointmentList = patientDAOInf.retrieveAppointmentList(loginForm.getClinicID(), patientForm.getCliniciaID());

		appointmentWeekList = patientDAOInf.retrieveAppointmentWeekList(loginForm.getClinicID(),
				patientForm.getCliniciaID());

		appointmentMonthList = patientDAOInf.retrieveAppointmentMonthList(loginForm.getClinicID(),
				patientForm.getCliniciaID());

		System.out.println("Appointment list size :: " + appointmentList.size());

		/*
		 * Setting string in order to display the appointment table on dashboard
		 */
		String patientCheck = "Appointment";

		request.setAttribute("patientCheck", patientCheck);

		// request.setAttribute("appointmentList", appointmentList);

		// request.setAttribute("appointmentWeekList", appointmentWeekList);

		// request.setAttribute("appointmentMonthList", appointmentMonthList);

		if (appointmentList.size() == 0) {

			System.out.println("No Appointment found for today");

			String todayApptMsg = "No appointment available for today. Please add new appointment.";

			request.setAttribute("todayApptMsg", todayApptMsg);
		}

		if (appointmentWeekList.size() == 0) {

			System.out.println("No Appointment found for this week");

			String weekApptMsg = "No appointment available for this week. Please add new appointment.";

			request.setAttribute("weekApptMsg", weekApptMsg);
		}

		if (appointmentMonthList.size() == 0) {

			System.out.println("No Appointment found for this month");

			String monthApptMsg = "No appointment available for this month. Please add new appointment.";

			request.setAttribute("monthApptMsg", monthApptMsg);
		}

		return SUCCESS;
	}

	/**
	 * 
	 * @throws Exception
	 */
	public void searchPECTradeNameList() throws Exception {

		response.setContentType("application/json");

		drugList = configurationUtil.getPECTradeNameList(patientForm.getSearchPatientName());

		String searchList = new Gson().toJson(drugList);

		response.getWriter().write(searchList);
	}

	public void getAppointmentSlots() throws Exception {
		String apptDateStr = request.getParameter("apptDate");

		SimpleDateFormat inputFormat = new SimpleDateFormat("dd-MM-yyyy");
		SimpleDateFormat outputFormat = new SimpleDateFormat("yyyy-MM-dd");

		patientDAOInf = new PatientDAOImpl();
		LoginForm loginForm = (LoginForm) session.get("USER");
		ClinicForm clinicForm = new ClinicForm();

		JSONObject values = new JSONObject();

		JSONArray array = new JSONArray();

		values = new JSONObject();

		JSONObject object = new JSONObject();

		response.setCharacterEncoding("UTF-8");

		try {
			Date apptDate = inputFormat.parse(apptDateStr);
			String formattedApptDate = outputFormat.format(apptDate);

			clinicForm.setApptDate(formattedApptDate);

			/*
			 * System.out.println("*************" + formattedApptDate);
			 * System.out.println(clinicForm.getApptDate());
			 */
			values = patientDAOInf.retrieveNAAppointmentSlots(formattedApptDate, loginForm.getClinicID());

			PrintWriter out = response.getWriter();

			out.print(values);

		} catch (Exception exception) {
			exception.printStackTrace();

			object.put("ErrMsg", "Error occured while verifying patient details.");

			array.add(object);

			values.put("Release", array);

			PrintWriter out = response.getWriter();

			out.print(values);
		}
	}

	/**
	 * 
	 * @throws Exception
	 */
	public void retrieveVisitLastEditHistoryDetails() throws Exception {
		patientDAOInf = new PatientDAOImpl();

		JSONObject values = new JSONObject();

		JSONArray array = new JSONArray();
		values = new JSONObject();

		JSONObject object = new JSONObject();

		response.setCharacterEncoding("UTF-8");

		/*
		 * Getting userID from Session
		 */
		LoginForm userForm = (LoginForm) session.get("USER");

		try {

			object.put("historyData", patientDAOInf.retrieveVisitLastEdittedByDetails(patientForm.getVisitID(),
					patientForm.getCareType()));

			array.add(object);

			values.put("Release", array);

			PrintWriter out = response.getWriter();

			out.print(values);

		} catch (Exception exception) {
			exception.printStackTrace();

			object.put("historyData", "");
			array.add(object);

			values.put("Release", array);

			PrintWriter out = response.getWriter();

			out.print(values);
		}
	}

	/**
	 * 
	 * @throws Exception
	 */
	public void retrieveClinicianMedRegNo() throws Exception {
		patientDAOInf = new PatientDAOImpl();

		JSONObject values = new JSONObject();

		JSONArray array = new JSONArray();
		values = new JSONObject();

		JSONObject object = new JSONObject();

		response.setCharacterEncoding("UTF-8");

		LoginDAOInf daoInf = new LoginDAOImpl();

		try {

			object.put("clinicianRegNo", daoInf.retrieveUserMedRegistrationNumber(patientForm.getClinicianID()));

			array.add(object);

			values.put("Release", array);

			PrintWriter out = response.getWriter();

			out.print(values);

		} catch (Exception exception) {
			exception.printStackTrace();

			object.put("historyData", "");
			array.add(object);

			values.put("Release", array);

			PrintWriter out = response.getWriter();

			out.print(values);
		}
	}

	public String callRestAPI() throws Exception {

		return SUCCESS;
	}

	/**
	 * 
	 * @return
	 * @throws Exception
	 */
	public String updateCalendarFilter() throws Exception {
		patientDAOInf = new PatientDAOImpl();

		/*
		 * Getting user role from session
		 */
		LoginForm loginForm = (LoginForm) session.get("USER");

		/*
		 * Retrieving appointment details
		 */

		int monthCount = getMonthCount();

		appointmentList = patientDAOInf.retrieveAppointmentList(loginForm.getClinicID(), patientForm.getCliniciaID(),
				patientForm.getCareType());

		appointmentWeekList = patientDAOInf.retrieveAppointmentWeekList(loginForm.getClinicID(),
				patientForm.getCliniciaID(), patientForm.getCareType());

		if (monthCount != 0) {
			System.out.printf("getMonthCount(): %d%n", monthCount);

			appointmentMonthList = patientDAOInf.retrieveAppointmentListByCount(loginForm.getClinicID(),
					patientForm.getCliniciaID(), getMonthCount(), patientForm.getCareType());

		} else {
			appointmentMonthList = patientDAOInf.retrieveAppointmentMonthList(loginForm.getClinicID(),
					patientForm.getCliniciaID(), patientForm.getCareType());
		}

		System.out.println("Appointment list size :: " + appointmentList.size());

		request.setAttribute("filterClinicianID", String.valueOf(patientForm.getCliniciaID()));
		request.setAttribute("filterCareType", patientForm.getCareType());

		/*
		 * Setting string in order to display the appointment table on dashboard
		 */
		String patientCheck = "Appointment";

		request.setAttribute("patientCheck", patientCheck);

		// request.setAttribute("appointmentList", appointmentList);

		// request.setAttribute("appointmentWeekList", appointmentWeekList);

		// request.setAttribute("appointmentMonthList", appointmentMonthList);

		if (appointmentList.size() == 0) {

			System.out.println("No Appointment found for today");

			String todayApptMsg = "No appointment available for today. Please add new appointment.";

			request.setAttribute("todayApptMsg", todayApptMsg);
		}

		if (appointmentWeekList.size() == 0) {

			System.out.println("No Appointment found for this week");

			String weekApptMsg = "No appointment available for this week. Please add new appointment.";

			request.setAttribute("weekApptMsg", weekApptMsg);
		}

		if (appointmentMonthList.size() == 0) {

			System.out.println("No Appointment found for this month");

			String monthApptMsg = "No appointment available for this month. Please add new appointment.";

			request.setAttribute("monthApptMsg", monthApptMsg);
		}

		return SUCCESS;
	}

	/**
	 * 
	 * @throws Exception
	 */
	public void sendOTP() throws Exception {
		patientDAOInf = new PatientDAOImpl();

		JSONObject values = new JSONObject();

		JSONArray array = new JSONArray();
		values = new JSONObject();

		JSONObject object = new JSONObject();

		response.setCharacterEncoding("UTF-8");

		LoginForm loginForm = (LoginForm) session.get("USER");

		Random rand = new Random();

		String otp = String.format("%04d", rand.nextInt(10000));

		try {

			SMSSender sender = new SMSSender();

			// Check if mobile no is already verified for the current clinic, if not then
			// only send OTP else return relative message
			boolean otpStatus = patientDAOInf.verifyOTPVerified(patientForm.getMobile(), loginForm.getClinicID());

			if (otpStatus) {
				object.put("verifyCheck", "verified");
				object.put("otpStatus", "success");
			} else {
				object.put("verifyCheck", "not-verified");
				// Sending an OTP to mobile no
				message = sender.sendOTP(patientForm.getMobile(), loginForm.getPracticeID(), loginForm.getClinicID(),
						otp);

				if (message.equals("success")) {
					object.put("otpStatus", "success");

					patientDAOInf.insertOTPDetails(otp, patientForm.getMobile(), loginForm.getClinicID());

				} else {
					object.put("otpStatus", "failed");
				}
			}

			object.put("otp", otp);

			array.add(object);

			values.put("Release", array);

			PrintWriter out = response.getWriter();

			out.print(values);

		} catch (Exception exception) {
			exception.printStackTrace();

			object.put("historyData", "");
			array.add(object);

			values.put("Release", array);

			PrintWriter out = response.getWriter();

			out.print(values);
		}
	}

	/**
	 * 
	 * @throws Exception
	 */
	public void validateOTP() throws Exception {
		patientDAOInf = new PatientDAOImpl();

		JSONObject values = new JSONObject();

		JSONArray array = new JSONArray();
		values = new JSONObject();

		JSONObject object = new JSONObject();

		response.setCharacterEncoding("UTF-8");

		LoginForm loginForm = (LoginForm) session.get("USER");

		Random rand = new Random();

		String otp = String.format("%04d", rand.nextInt(10000));

		try {

			object.put("validateOTP", patientDAOInf.validateOTP(patientForm.getMobile(), loginForm.getClinicID()));

			array.add(object);

			values.put("Release", array);

			PrintWriter out = response.getWriter();

			out.print(values);

		} catch (Exception exception) {
			exception.printStackTrace();

			object.put("validateOTP", "error");

			array.add(object);

			values.put("Release", array);

			PrintWriter out = response.getWriter();

			out.print(values);
		}
	}

	public void printFormF() throws Exception {
		ConvertToPDFUtil convertToPDFUtil = new ConvertToPDFUtil();
		HttpServletRequest request = ServletActionContext.getRequest();

		ServletContext context = request.getServletContext();
		String realPath = context.getRealPath("/");

		String srcPdf = realPath + "PCPPDF/FormF_Fillable.pdf";

		String pdfOutFileName = patientForm.getPatientID() + "_" + patientForm.getVisitID() + "_formF.pdf";

		String message = convertToPDFUtil.convertUSGReport(srcPdf, patientForm.getPatientID(), patientForm.getVisitID(),
				realPath, pdfOutFileName);

		if (message.equalsIgnoreCase("success")) {
			HttpServletResponse response = ServletActionContext.getResponse();
			response.setContentType("application/pdf");
			response.setHeader("Content-Disposition", "attachment;filename=" + patientForm.getPatientID() + "_"
					+ patientForm.getVisitID() + "_formF.pdf");

			try (InputStream fileStream = Files.newInputStream(Paths.get(realPath + pdfOutFileName));
					OutputStream outStream = response.getOutputStream()) {

				byte[] buffer = new byte[1024];
				int bytesRead;
				while ((bytesRead = fileStream.read(buffer)) != -1) {
					outStream.write(buffer, 0, bytesRead);
				}
				outStream.flush();
			} catch (Exception e) {
				e.printStackTrace();
			}

			File pdfFile = new File(pdfOutFileName);
			if (pdfFile.exists()) {
				pdfFile.delete();
			}
		}
	}

	/**
	 * @return the diagnosticList
	 */
	public List<PatientForm> getDiagnosticList() {
		return diagnosticList;
	}

	/**
	 * @param diagnosticList the diagnosticList to set
	 */
	public void setDiagnosticList(List<PatientForm> diagnosticList) {
		this.diagnosticList = diagnosticList;
	}

	/**
	 * @return the orthoBillItemList
	 */
	public List<PatientForm> getOrthoBillItemList() {
		return orthoBillItemList;
	}

	/**
	 * @param orthoBillItemList the orthoBillItemList to set
	 */
	public void setOrthoBillItemList(List<PatientForm> orthoBillItemList) {
		this.orthoBillItemList = orthoBillItemList;
	}

	/**
	 * @return the orthoDiagnosisList
	 */
	public List<PatientForm> getOrthoDiagnosisList() {
		return orthoDiagnosisList;
	}

	/**
	 * @param orthoDiagnosisList the orthoDiagnosisList to set
	 */
	public void setOrthoDiagnosisList(List<PatientForm> orthoDiagnosisList) {
		this.orthoDiagnosisList = orthoDiagnosisList;
	}

	public List<PatientForm> getLabTestListNew() {
		return labTestListNew;
	}

	public void setLabTestListNew(List<PatientForm> labTestListNew) {
		this.labTestListNew = labTestListNew;
	}

	public HashMap<Integer, String> getPatientDetailsList() {
		return PatientDetailsList;
	}

	public void setPatientDetailsList(HashMap<Integer, String> patientDetailsList) {
		PatientDetailsList = patientDetailsList;
	}

	/**
	 * @return the otherInvstigationList
	 */
	public List<PatientForm> getOtherInvstigationList() {
		return otherInvstigationList;
	}

	/**
	 * @param otherInvstigationList the otherInvstigationList to set
	 */
	public void setOtherInvstigationList(List<PatientForm> otherInvstigationList) {
		this.otherInvstigationList = otherInvstigationList;
	}

	/**
	 * @return the vitalSignsList
	 */
	public List<PatientForm> getVitalSignsList() {
		return vitalSignsList;
	}

	/**
	 * @param vitalSignsList the vitalSignsList to set
	 */
	public void setVitalSignsList(List<PatientForm> vitalSignsList) {
		this.vitalSignsList = vitalSignsList;
	}

	/**
	 * @return the iPDTariffChargeList
	 */
	public List<PatientForm> getIPDTariffChargeList() {
		return IPDTariffChargeList;
	}

	/**
	 * @param iPDTariffChargeList the iPDTariffChargeList to set
	 */
	public void setIPDTariffChargeList(List<PatientForm> iPDTariffChargeList) {
		IPDTariffChargeList = iPDTariffChargeList;
	}

	/**
	 * @return the iPDConsultantChargeList
	 */
	public List<PatientForm> getIPDConsultantChargeList() {
		return IPDConsultantChargeList;
	}

	/**
	 * @param iPDConsultantChargeList the iPDConsultantChargeList to set
	 */
	public void setIPDConsultantChargeList(List<PatientForm> iPDConsultantChargeList) {
		IPDConsultantChargeList = iPDConsultantChargeList;
	}

	/**
	 * @return the oTChargeList
	 */
	public List<PatientForm> getOTChargeList() {
		return OTChargeList;
	}

	/**
	 * @param oTChargeList the oTChargeList to set
	 */
	public void setOTChargeList(List<PatientForm> oTChargeList) {
		OTChargeList = oTChargeList;
	}

	/**
	 * @return the iPDBillTariffChargeList
	 */
	public List<PatientForm> getIPDBillTariffChargeList() {
		return IPDBillTariffChargeList;
	}

	/**
	 * @param iPDBillTariffChargeList the iPDBillTariffChargeList to set
	 */
	public void setIPDBillTariffChargeList(List<PatientForm> iPDBillTariffChargeList) {
		IPDBillTariffChargeList = iPDBillTariffChargeList;
	}

	/**
	 * @return the iPDBillConsultantChargeList
	 */
	public List<PatientForm> getIPDBillConsultantChargeList() {
		return IPDBillConsultantChargeList;
	}

	/**
	 * @param iPDBillConsultantChargeList the iPDBillConsultantChargeList to set
	 */
	public void setIPDBillConsultantChargeList(List<PatientForm> iPDBillConsultantChargeList) {
		IPDBillConsultantChargeList = iPDBillConsultantChargeList;
	}

	/**
	 * @return the oTBillChargeList
	 */
	public List<PatientForm> getOTBillChargeList() {
		return OTBillChargeList;
	}

	/**
	 * @param oTBillChargeList the oTBillChargeList to set
	 */
	public void setOTBillChargeList(List<PatientForm> oTBillChargeList) {
		OTBillChargeList = oTBillChargeList;
	}

	/**
	 * @return the injectionPrescriptionList
	 */
	public List<PatientForm> getInjectionPrescriptionList() {
		return InjectionPrescriptionList;
	}

	/**
	 * @param injectionPrescriptionList the injectionPrescriptionList to set
	 */
	public void setInjectionPrescriptionList(List<PatientForm> injectionPrescriptionList) {
		InjectionPrescriptionList = injectionPrescriptionList;
	}

	/**
	 * @return the injectionList
	 */
	public HashMap<Integer, String> getInjectionList() {
		return InjectionList;
	}

	/**
	 * @param injectionList the injectionList to set
	 */
	public void setInjectionList(HashMap<Integer, String> injectionList) {
		InjectionList = injectionList;
	}

	/**
	 * @return the tabletPrescriptionList
	 */
	public List<PatientForm> getTabletPrescriptionList() {
		return TabletPrescriptionList;
	}

	/**
	 * @param tabletPrescriptionList the tabletPrescriptionList to set
	 */
	public void setTabletPrescriptionList(List<PatientForm> tabletPrescriptionList) {
		TabletPrescriptionList = tabletPrescriptionList;
	}

	/**
	 * @return the tabletList
	 */
	public HashMap<Integer, String> getTabletList() {
		return TabletList;
	}

	/**
	 * @param tabletList the tabletList to set
	 */
	public void setTabletList(HashMap<Integer, String> tabletList) {
		TabletList = tabletList;
	}

	/**
	 * @return the diagnosisList
	 */
	public HashMap<String, String> getDiagnosisList() {
		return DiagnosisList;
	}

	/**
	 * @param diagnosisList the diagnosisList to set
	 */
	public void setDiagnosisList(HashMap<String, String> diagnosisList) {
		DiagnosisList = diagnosisList;
	}

	/**
	 * @return the liquidPrescriptionList
	 */
	public List<PatientForm> getLiquidPrescriptionList() {
		return LiquidPrescriptionList;
	}

	/**
	 * @param liquidPrescriptionList the liquidPrescriptionList to set
	 */
	public void setLiquidPrescriptionList(List<PatientForm> liquidPrescriptionList) {
		LiquidPrescriptionList = liquidPrescriptionList;
	}

	/**
	 * @return the liquidList
	 */
	public HashMap<Integer, String> getLiquidList() {
		return LiquidList;
	}

	/**
	 * @param liquidList the liquidList to set
	 */
	public void setLiquidList(HashMap<Integer, String> liquidList) {
		LiquidList = liquidList;
	}

	/**
	 * @return the onEaminationList
	 */
	public List<PatientForm> getOnEaminationList() {
		return onEaminationList;
	}

	/**
	 * @param onEaminationList the onEaminationList to set
	 */
	public void setOnEaminationList(List<PatientForm> onEaminationList) {
		this.onEaminationList = onEaminationList;
	}

	/**
	 * @return the medicalHistory
	 */
	public List<PatientForm> getMedicalHistory() {
		return MedicalHistory;
	}

	/**
	 * @param medicalHistory the medicalHistory to set
	 */
	public void setMedicalHistory(List<PatientForm> medicalHistory) {
		MedicalHistory = medicalHistory;
	}

	/**
	 * @return the familyHistory
	 */
	public List<PatientForm> getFamilyHistory() {
		return FamilyHistory;
	}

	/**
	 * @param familyHistory the familyHistory to set
	 */
	public void setFamilyHistory(List<PatientForm> familyHistory) {
		FamilyHistory = familyHistory;
	}

	/**
	 * @return the personalHistory
	 */
	public List<PatientForm> getPersonalHistory() {
		return PersonalHistory;
	}

	/**
	 * @param personalHistory the personalHistory to set
	 */
	public void setPersonalHistory(List<PatientForm> personalHistory) {
		PersonalHistory = personalHistory;
	}

	/**
	 * @return the pVComplaints
	 */
	public HashMap<String, String> getPVComplaints() {
		return PVComplaints;
	}

	/**
	 * @param pVComplaints the pVComplaints to set
	 */
	public void setPVComplaints(HashMap<String, String> pVComplaints) {
		PVComplaints = pVComplaints;
	}

	/**
	 * @return the labTestList
	 */
	public List<PrescriptionManagementForm> getLabTestList() {
		return LabTestList;
	}

	/**
	 * @param labTestList the labTestList to set
	 */
	public void setLabTestList(List<PrescriptionManagementForm> labTestList) {
		LabTestList = labTestList;
	}

	/**
	 * @return the oPDChargesList
	 */
	public List<PrescriptionManagementForm> getOPDChargesList() {
		return OPDChargesList;
	}

	/**
	 * @param oPDChargesList the oPDChargesList to set
	 */
	public void setOPDChargesList(List<PrescriptionManagementForm> oPDChargesList) {
		OPDChargesList = oPDChargesList;
	}

	/**
	 * 
	 * @return
	 * @throws Exception
	 */
	public String addPatientAppointment() throws Exception {
		return SUCCESS;
	}

	/**
	 * @return the surveyCenterList
	 */
	public List<String> getSurveyCenterList() {
		return surveyCenterList;
	}

	/**
	 * @param surveyCenterList the surveyCenterList to set
	 */
	public void setSurveyCenterList(List<String> surveyCenterList) {
		this.surveyCenterList = surveyCenterList;
	}

	/**
	 * @return the clinicList
	 */
	public HashMap<Integer, String> getClinicList() {
		return clinicList;
	}

	/**
	 * @param clinicList the clinicList to set
	 */
	public void setClinicList(HashMap<Integer, String> clinicList) {
		this.clinicList = clinicList;
	}

	/**
	 * @return the categoryList
	 */
	public HashMap<Integer, String> getCategoryList() {
		return categoryList;
	}

	/**
	 * @param categoryList the categoryList to set
	 */
	public void setCategoryList(HashMap<Integer, String> categoryList) {
		this.categoryList = categoryList;
	}

	/**
	 * @return the resayuDiagnosisList
	 */
	public HashMap<String, String> getResayuDiagnosisList() {
		return resayuDiagnosisList;
	}

	/**
	 * @param resayuDiagnosisList the resayuDiagnosisList to set
	 */
	public void setResayuDiagnosisList(HashMap<String, String> resayuDiagnosisList) {
		this.resayuDiagnosisList = resayuDiagnosisList;
	}

	/**
	 * @return the searchPatientList
	 */
	public List<PatientForm> getSearchPatientList() {
		return searchPatientList;
	}

	/**
	 * @param searchPatientList the searchPatientList to set
	 */
	public void setSearchPatientList(List<PatientForm> searchPatientList) {
		this.searchPatientList = searchPatientList;
	}

	/**
	 * @return the pageName
	 */
	public String getPageName() {
		return pageName;
	}

	/**
	 * @return the appointmentList
	 */
	public List<PatientForm> getAppointmentList() {
		return appointmentList;
	}

	/**
	 * @param appointmentList the appointmentList to set
	 */
	public void setAppointmentList(List<PatientForm> appointmentList) {
		this.appointmentList = appointmentList;
	}

	/**
	 * @return the appointmentWeekList
	 */
	public List<PatientForm> getAppointmentWeekList() {
		return appointmentWeekList;
	}

	/**
	 * @param appointmentWeekList the appointmentWeekList to set
	 */
	public void setAppointmentWeekList(List<PatientForm> appointmentWeekList) {
		this.appointmentWeekList = appointmentWeekList;
	}

	/**
	 * @return the appointmentMonthList
	 */
	public List<PatientForm> getAppointmentMonthList() {
		return appointmentMonthList;
	}

	/**
	 * @param appointmentMonthList the appointmentMonthList to set
	 */
	public void setAppointmentMonthList(List<PatientForm> appointmentMonthList) {
		this.appointmentMonthList = appointmentMonthList;
	}

	/**
	 * @param pageName the pageName to set
	 */
	public void setPageName(String pageName) {
		this.pageName = pageName;
	}

	/**
	 * @return the oPDVisitList
	 */
	public List<PatientForm> getOPDVisitList() {
		return OPDVisitList;
	}

	/**
	 * @param oPDVisitList the oPDVisitList to set
	 */
	public void setOPDVisitList(List<PatientForm> oPDVisitList) {
		OPDVisitList = oPDVisitList;
	}

	/**
	 * @return the iPDContinuationSheetList
	 */
	public List<PatientForm> getIPDContinuationSheetList() {
		return IPDContinuationSheetList;
	}

	/**
	 * @param iPDContinuationSheetList the iPDContinuationSheetList to set
	 */
	public void setIPDContinuationSheetList(List<PatientForm> iPDContinuationSheetList) {
		IPDContinuationSheetList = iPDContinuationSheetList;
	}

	/**
	 * @return the iPDComplaintsList
	 */
	public List<PatientForm> getIPDComplaintsList() {
		return IPDComplaintsList;
	}

	/**
	 * @param iPDComplaintsList the iPDComplaintsList to set
	 */
	public void setIPDComplaintsList(List<PatientForm> iPDComplaintsList) {
		IPDComplaintsList = iPDComplaintsList;
	}

	/**
	 * @return the doctorList
	 */
	public HashMap<String, String> getDoctorList() {
		return doctorList;
	}

	/**
	 * @param doctorList the doctorList to set
	 */
	public void setDoctorList(HashMap<String, String> doctorList) {
		this.doctorList = doctorList;
	}

	/**
	 * @return the lastEneteredOpticianList
	 */
	public List<PatientForm> getLastEneteredOpticianList() {
		return lastEneteredOpticianList;
	}

	/**
	 * @param lastEneteredOpticianList the lastEneteredOpticianList to set
	 */
	public void setLastEneteredOpticianList(List<PatientForm> lastEneteredOpticianList) {
		this.lastEneteredOpticianList = lastEneteredOpticianList;
	}

	/**
	 * @return the lasteEnteredPrescList
	 */
	public List<PatientForm> getLasteEnteredPrescList() {
		return lasteEnteredPrescList;
	}

	/**
	 * @return the lasteEnteredBillList
	 */
	public List<PatientForm> getLasteEnteredBillList() {
		return lasteEnteredBillList;
	}

	/**
	 * @param lasteEnteredPrescList the lasteEnteredPrescList to set
	 */
	public void setLasteEnteredPrescList(List<PatientForm> lasteEnteredPrescList) {
		this.lasteEnteredPrescList = lasteEnteredPrescList;
	}

	/**
	 * @param lasteEnteredBillList the lasteEnteredBillList to set
	 */
	public void setLasteEnteredBillList(List<PatientForm> lasteEnteredBillList) {
		this.lasteEnteredBillList = lasteEnteredBillList;
	}

	/**
	 * @return the lasteEnteredVisitList
	 */
	public List<PatientForm> getLasteEnteredVisitList() {
		return lasteEnteredVisitList;
	}

	/**
	 * @param lasteEnteredVisitList the lasteEnteredVisitList to set
	 */
	public void setLasteEnteredVisitList(List<PatientForm> lasteEnteredVisitList) {
		this.lasteEnteredVisitList = lasteEnteredVisitList;
	}

	/**
	 * @return the billList
	 */
	public List<PatientForm> getBillList() {
		return billList;
	}

	/**
	 * @param billList the billList to set
	 */
	public void setBillList(List<PatientForm> billList) {
		this.billList = billList;
	}

	/**
	 * @return the chargeTypeList
	 */
	public HashMap<String, String> getChargeTypeList() {
		return chargeTypeList;
	}

	/**
	 * @param chargeTypeList the chargeTypeList to set
	 */
	public void setChargeTypeList(HashMap<String, String> chargeTypeList) {
		this.chargeTypeList = chargeTypeList;
	}

	/**
	 * @return the prescriptionList
	 */
	public List<PatientForm> getPrescriptionList() {
		return prescriptionList;
	}

	/**
	 * @param prescriptionList the prescriptionList to set
	 */
	public void setPrescriptionList(List<PatientForm> prescriptionList) {
		this.prescriptionList = prescriptionList;
	}

	/**
	 * @return the frequencyList
	 */
	public LinkedHashMap<String, String> getFrequencyList() {
		return frequencyList;
	}

	/**
	 * @param frequencyList the frequencyList to set
	 */
	public void setFrequencyList(LinkedHashMap<String, String> frequencyList) {
		this.frequencyList = frequencyList;
	}

	/**
	 * @return the drugList
	 */
	public HashMap<String, String> getDrugList() {
		return drugList;
	}

	/**
	 * @param drugList the drugList to set
	 */
	public void setDrugList(HashMap<String, String> drugList) {
		this.drugList = drugList;
	}

	/**
	 * @return the diagnoseList
	 */
	public HashMap<String, String> getDiagnoseList() {
		return diagnoseList;
	}

	/**
	 * @param diagnoseList the diagnoseList to set
	 */
	public void setDiagnoseList(HashMap<String, String> diagnoseList) {
		this.diagnoseList = diagnoseList;
	}

	/**
	 * @return the newPatientList
	 */
	public List<PatientForm> getNewPatientList() {
		return newPatientList;
	}

	/**
	 * @param newPatientList the newPatientList to set
	 */
	public void setNewPatientList(List<PatientForm> newPatientList) {
		this.newPatientList = newPatientList;
	}

	/**
	 * @return the patientList
	 */
	public List<PatientForm> getPatientList() {
		return patientList;
	}

	/**
	 * @param patientList the patientList to set
	 */
	public void setPatientList(List<PatientForm> patientList) {
		this.patientList = patientList;
	}

	/**
	 * @return the patientForm
	 */
	public PatientForm getPatientForm() {
		return patientForm;
	}

	/**
	 * @param patientForm the patientForm to set
	 */
	public void setPatientForm(PatientForm patientForm) {
		this.patientForm = patientForm;
	}

	public PatientForm getModel() {
		return patientForm;
	}

	public void setServletResponse(HttpServletResponse response) {
		this.response = response;

	}

	public void setServletRequest(HttpServletRequest request) {
		this.request = request;

	}

	public void setSession(Map<String, Object> session) {
		this.session = session;

	}

	/**
	 * @return the hourList
	 */
	public List<String> getHourList() {
		return hourList;
	}

	/**
	 * @param hourList the hourList to set
	 */
	public void setHourList(List<String> hourList) {
		this.hourList = hourList;
	}

	/**
	 * @return the symptomList
	 */
	public List<PatientForm> getSymptomList() {
		return symptomList;
	}

	/**
	 * @param symptomList the symptomList to set
	 */
	public void setSymptomList(List<PatientForm> symptomList) {
		this.symptomList = symptomList;
	}

	/**
	 * @return the labReportList
	 */
	public List<PatientForm> getLabReportList() {
		return labReportList;
	}

	/**
	 * @param labReportList the labReportList to set
	 */
	public void setLabReportList(List<PatientForm> labReportList) {
		this.labReportList = labReportList;
	}

	/**
	 * @return the labInvastigationList
	 */
	public List<PatientForm> getLabInvastigationList() {
		return LabInvastigationList;
	}

	/**
	 * @param labInvastigationList the labInvastigationList to set
	 */
	public void setLabInvastigationList(List<PatientForm> labInvastigationList) {
		LabInvastigationList = labInvastigationList;
	}

	/**
	 * @return the investigationList
	 */
	public HashMap<String, String> getInvestigationList() {
		return InvestigationList;
	}

	/**
	 * @param investigationList the investigationList to set
	 */
	public void setInvestigationList(HashMap<String, String> investigationList) {
		InvestigationList = investigationList;
	}

	/**
	 * @return the investigationTestsList
	 */
	public List<PatientForm> getInvestigationTestsList() {
		return InvestigationTestsList;
	}

	/**
	 * @param investigationTestsList the investigationTestsList to set
	 */
	public void setInvestigationTestsList(List<PatientForm> investigationTestsList) {
		InvestigationTestsList = investigationTestsList;
	}

	/**
	 * @return the signedUpUserList
	 */
	public List<PatientForm> getSignedUpUserList() {
		return signedUpUserList;
	}

	/**
	 * @param signedUpUserList the signedUpUserList to set
	 */
	public void setSignedUpUserList(List<PatientForm> signedUpUserList) {
		this.signedUpUserList = signedUpUserList;
	}

	/**
	 * @return the cRFList
	 */
	public List<PatientForm> getCRFList() {
		return CRFList;
	}

	/**
	 * @param cRFList the cRFList to set
	 */
	public void setCRFList(List<PatientForm> cRFList) {
		CRFList = cRFList;
	}

	/**
	 * @return the visitList
	 */
	public List<PatientForm> getVisitList() {
		return visitList;
	}

	/**
	 * @param visitList the visitList to set
	 */
	public void setVisitList(List<PatientForm> visitList) {
		this.visitList = visitList;
	}

	/**
	 * @return the patientVisitList
	 */
	public List<PatientForm> getPatientVisitList() {
		return patientVisitList;
	}

	/**
	 * @param patientVisitList the patientVisitList to set
	 */
	public void setPatientVisitList(List<PatientForm> patientVisitList) {
		this.patientVisitList = patientVisitList;
	}

	public HashMap<String, String> getSMSTemplateTitleList() {
		return SMSTemplateTitleList;
	}

	public void setSMSTemplateTitleList(HashMap<String, String> sMSTemplateTitleList) {
		SMSTemplateTitleList = sMSTemplateTitleList;
	}

	public List<PatientForm> getGroupTestList() {
		return groupTestList;
	}

	public void setGroupTestList(List<PatientForm> groupTestList) {
		this.groupTestList = groupTestList;
	}

	public HashMap<Integer, String> getMdDetailsList() {
		return mdDetailsList;
	}

	public void setMdDetailsList(HashMap<Integer, String> mdDetailsList) {
		this.mdDetailsList = mdDetailsList;
	}

	public HashMap<String, String> getLabTestValueList() {
		return labTestValueList;
	}

	public void setLabTestValueList(HashMap<String, String> labTestValueList) {
		this.labTestValueList = labTestValueList;
	}

	public HashMap<String, String> getLabTestValueListNew() {
		return labTestValueListNew;
	}

	public void setLabTestValueListNew(HashMap<String, String> labTestValueListNew) {
		this.labTestValueListNew = labTestValueListNew;
	}

	public HashMap<String, HashMap<String, String>> getGroupLabTestMap() {
		return groupLabTestMap;
	}

	public void setGroupLabTestMap(HashMap<String, HashMap<String, String>> groupLabTestMap) {
		this.groupLabTestMap = groupLabTestMap;
	}

	public HashMap<String, String> getGenderMap() {
		return genderMap;
	}

	public void setGenderMap(HashMap<String, String> genderMap) {
		this.genderMap = genderMap;
	}

	public HashMap<Integer, String> getDoctorList1() {
		return doctorList1;
	}

	public void setDoctorList1(HashMap<Integer, String> doctorList1) {
		this.doctorList1 = doctorList1;
	}

	public HashMap<Integer, String> getReportList() {
		return reportList;
	}

	public void setReportList(HashMap<Integer, String> reportList) {
		this.reportList = reportList;
	}

	/**
	 * @return the labTestValueListNew1
	 */
	public HashMap<String, String> getLabTestValueListNew1() {
		return labTestValueListNew1;
	}

	/**
	 * @param labTestValueListNew1 the labTestValueListNew1 to set
	 */
	public void setLabTestValueListNew1(HashMap<String, String> labTestValueListNew1) {
		this.labTestValueListNew1 = labTestValueListNew1;
	}

	/**
	 * @return the referringDoctorList
	 */
	public HashMap<Integer, String> getReferringDoctorList() {
		return referringDoctorList;
	}

	/**
	 * @param referringDoctorList the referringDoctorList to set
	 */
	public void setReferringDoctorList(HashMap<Integer, String> referringDoctorList) {
		this.referringDoctorList = referringDoctorList;
	}

	/**
	 * @return the getGroupTestList
	 */
	public HashMap<String, String> getGetGroupTestList() {
		return getGroupTestList;
	}

	/**
	 * @param getGroupTestList the getGroupTestList to set
	 */
	public void setGetGroupTestList(HashMap<String, String> getGroupTestList) {
		this.getGroupTestList = getGroupTestList;
	}

	/**
	 * @return the getSingleTestList
	 */
	public HashMap<String, String> getGetSingleTestList() {
		return getSingleTestList;
	}

	/**
	 * @param getSingleTestList the getSingleTestList to set
	 */
	public void setGetSingleTestList(HashMap<String, String> getSingleTestList) {
		this.getSingleTestList = getSingleTestList;
	}

	/**
	 * @return the iPDChargesList
	 */
	public HashMap<Integer, String> getIPDChargesList() {
		return IPDChargesList;
	}

	/**
	 * @param iPDChargesList the iPDChargesList to set
	 */
	public void setIPDChargesList(HashMap<Integer, String> iPDChargesList) {
		IPDChargesList = iPDChargesList;
	}

	/**
	 * @return the refDocList
	 */
	public HashMap<String, String> getRefDocList() {
		return refDocList;
	}

	/**
	 * @param refDocList the refDocList to set
	 */
	public void setRefDocList(HashMap<String, String> refDocList) {
		this.refDocList = refDocList;
	}

	/**
	 * @return the testTypeList
	 */
	public List<String> getTestTypeList() {
		return testTypeList;
	}

	/**
	 * @param testTypeList the testTypeList to set
	 */
	public void setTestTypeList(List<String> testTypeList) {
		this.testTypeList = testTypeList;
	}

	/**
	 * @return the diagnosticList1
	 */
	public HashMap<String, String> getDiagnosticList1() {
		return DiagnosticList1;
	}

	/**
	 * @param diagnosticList1 the diagnosticList1 to set
	 */
	public void setDiagnosticList1(HashMap<String, String> diagnosticList1) {
		DiagnosticList1 = diagnosticList1;
	}

	/**
	 * @return the procedureList
	 */
	public HashMap<String, String> getProcedureList() {
		return ProcedureList;
	}

	/**
	 * @param procedureList the procedureList to set
	 */
	public void setProcedureList(HashMap<String, String> procedureList) {
		ProcedureList = procedureList;
	}

	/**
	 * @return the proceduresList
	 */
	public List<PatientForm> getProceduresList() {
		return proceduresList;
	}

	/**
	 * @param proceduresList the proceduresList to set
	 */
	public void setProceduresList(List<PatientForm> proceduresList) {
		this.proceduresList = proceduresList;
	}

	/**
	 * @return the monthCount
	 */
	public int getMonthCount() {
		return monthCount;
	}

	/**
	 * @param monthCount the monthCount to set
	 */
	public void setMonthCount(int monthCount) {
		this.monthCount = monthCount;
	}

	/**
	 * @return the reportListByVisitID
	 */
	public HashMap<Integer, String> getReportListByVisitID() {
		return reportListByVisitID;
	}

	/**
	 * @param reportListByVisitID the reportListByVisitID to set
	 */
	public void setReportListByVisitID(HashMap<Integer, String> reportListByVisitID) {
		this.reportListByVisitID = reportListByVisitID;
	}

	/**
	 * @return the reportTestID
	 */
	public int getReportTestID() {
		return reportTestID;
	}

	/**
	 * @param reportTestID the reportTestID to set
	 */
	public void setReportTestID(int reportTestID) {
		this.reportTestID = reportTestID;
	}

	/**
	 * @return the txtNormal
	 */
	public String getTxtNormal() {
		return txtNormal;
	}

	/**
	 * @param txtNormal the txtNormal to set
	 */
	public void setTxtNormal(String txtNormal) {
		this.txtNormal = txtNormal;
	}
	
	/**
	 * @return the subGroups
	 */
	public TreeMap<String, TreeMap<String, TreeMap<Integer, PatientForm>>> getSubGroups() {
		return subGroups;
	}

	/**
	 * @param subGroups the subGroups to set
	 */
	public void setSubGroups(TreeMap<String, TreeMap<String, TreeMap<Integer, PatientForm>>> subGroups) {
		this.subGroups = subGroups;
	}
	
}
