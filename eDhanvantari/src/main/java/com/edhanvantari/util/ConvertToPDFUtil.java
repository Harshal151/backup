package com.edhanvantari.util;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Set;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.swing.text.StyledEditorKit.BoldAction;

import org.apache.commons.io.FileUtils;
import org.apache.commons.lang3.Range;
import org.apache.commons.lang3.StringUtils;
import org.apache.struts2.ServletActionContext;
import org.json.simple.JSONObject;

import com.amazonaws.HttpMethod;
import com.amazonaws.services.s3.AmazonS3;
import com.amazonaws.services.s3.model.GeneratePresignedUrlRequest;
import com.amazonaws.services.s3.model.GetObjectRequest;
import com.amazonaws.services.s3.model.S3Object;
import com.amazonaws.services.s3.model.S3ObjectInputStream;
import com.amazonaws.util.IOUtils;
import com.edhanvantari.daoImpl.LoginDAOImpl;
import com.edhanvantari.daoImpl.PatientDAOImpl;
import com.edhanvantari.daoImpl.PrescriptionManagementDAOImpl;
import com.edhanvantari.daoImpl.RegistrationDAOImpl;
import com.edhanvantari.daoInf.LoginDAOInf;
import com.edhanvantari.daoInf.PatientDAOInf;
import com.edhanvantari.daoInf.PrescriptionManagementDAOInf;
import com.edhanvantari.daoInf.RegistrationDAOinf;
import com.edhanvantari.form.LoginForm;
import com.edhanvantari.form.PatientForm;
import com.edhanvantari.form.PrescriptionManagementForm;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import com.itextpdf.commons.utils.Base64.OutputStream;
import com.itextpdf.html2pdf.HtmlConverter;
import com.itextpdf.layout.element.Cell;
import com.itextpdf.layout.element.IBlockElement;
import com.itextpdf.layout.element.IElement;
import com.itextpdf.layout.element.Table;
import com.itextpdf.text.BadElementException;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Chunk;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.FontFactory;
import com.itextpdf.text.Image;
import com.itextpdf.text.PageSize;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Rectangle;
import com.itextpdf.text.html.simpleparser.HTMLWorker;
import com.itextpdf.text.pdf.AcroFields;
import com.itextpdf.text.pdf.BaseFont;
import com.itextpdf.text.pdf.ColumnText;
import com.itextpdf.text.pdf.PdfContentByte;
import com.itextpdf.text.pdf.PdfGState;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfPageEventHelper;
import com.itextpdf.text.pdf.PdfReader;
import com.itextpdf.text.pdf.PdfStamper;
import com.itextpdf.text.pdf.PdfWriter;
import com.itextpdf.tool.xml.ElementList;
import com.itextpdf.tool.xml.XMLWorkerHelper;

import freemarker.template.utility.StringUtil;

import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.StringReader;
import java.net.MalformedURLException;
import java.net.URL;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;

public class ConvertToPDFUtil extends DAOConnection {

	/*
	 * Defining Footer event handler class
	 */
	static class FooterTable extends PdfPageEventHelper {
		protected PdfPTable footer;

		public FooterTable(PdfPTable footer) {
			this.footer = footer;
		}

		public void onEndPage(PdfWriter writer, Document document) {
			footer.writeSelectedRows(0, -1, 36, 64, writer.getDirectContent());
		}
	}

	static class FooterTable1 extends PdfPageEventHelper {
		protected PdfPTable footer;

		public FooterTable1(PdfPTable footer) {
			this.footer = footer;
		}

		public void onEndPage(PdfWriter writer, Document document) {
			footer.writeSelectedRows(0, -1, 170, 110, writer.getDirectContent());
		}
	}

	static class FooterTable3 extends PdfPageEventHelper {
		protected PdfPTable footer;

		public FooterTable3(PdfPTable footer) {
			this.footer = footer;
		}

		public void onEndPage(PdfWriter writer, Document document) {
			footer.writeSelectedRows(0, -1, 40, 190, writer.getDirectContent());
		}
	}

	static class FooterTable2 extends PdfPageEventHelper {
		protected PdfPTable footer;

		public FooterTable2(PdfPTable footer) {
			this.footer = footer;
		}

		public void onEndPage(PdfWriter writer, Document document) {
			footer.writeSelectedRows(0, -1, 100, 150, writer.getDirectContent());
		}
	}

	static class MyEvent extends PdfPageEventHelper {
		Image image;

		ConfigurationUtil configXMLUtil = new ConfigurationUtil();

		HttpServletRequest request = ServletActionContext.getRequest();

		ServletContext context = request.getServletContext();

		String realPath = context.getRealPath("/");

		String A5ImagePath = configXMLUtil.getLetterHeadImage();

		public void OnOpenDocument(PdfWriter writer, Document document) throws Exception {
			image = Image.getInstance(realPath + "images/" + A5ImagePath);
			image.scaleToFit(PageSize.A4.getWidth(), PageSize.A4.getHeight());
			image.setAbsolutePosition(0, 0);
		}

		public void OnEndPage(PdfWriter writer, Document document) throws Exception {
			// writer.addDirectImageSimple(image);
			writer.getDirectContentUnder().addImage(image);
		}
	}

	Connection connection = null;
	PreparedStatement preparedStatement = null;
	ResultSet resultSet = null;
	PreparedStatement preparedStatement1 = null;
	ResultSet resultSet1 = null;
	PreparedStatement preparedStatement2 = null;
	ResultSet resultSet2 = null;
	PreparedStatement preparedStatement3 = null;
	ResultSet resultSet3 = null;
	PreparedStatement preparedStatement4 = null;
	ResultSet resultSet4 = null;
	PreparedStatement preparedStatement5 = null;
	ResultSet resultSet5 = null;
	PreparedStatement preparedStatement6 = null;
	ResultSet resultSet6 = null;
	PreparedStatement preparedStatement7 = null;
	ResultSet resultSet7 = null;
	PreparedStatement preparedStatement8 = null;
	ResultSet resultSet8 = null;

	PreparedStatement preparedStatement_investigation = null;
	ResultSet resultSet_investigation = null;

	PatientDAOInf daoInf = new PatientDAOImpl();

	// New added

	/**
	 * 
	 * @param patientID
	 * @param investigationID
	 * @param realPath
	 * @param pdfOutFIleName
	 * @param clinicID
	 * @param practiceID
	 * @param username
	 * @param s3
	 * @param s3reportFilePath
	 * @param bucketName
	 * @return
	 */
	public String convertBDPTemplateReportPDF(int patientID, int visitID, int investigationID, String realPath,
			String pdfOutFIleName, int clinicID, int practiceID, String username, AmazonS3 s3, String s3reportFilePath,
			String bucketName) {
		// TODO Auto-generated method stub
		int i = 1;

		String visitDate = null;
		String status = "error";
		String regNo = "";
		String nextVisitDate = "";
		int nextVisitDays = 0;
		String investigation = "";
		String diagnosis = "";
		String advice = "";
		String docName = null;
		String signature = null;
		Image signImg = null;

		String marathiFontDir = realPath + "fonts/FreeSans.ttf";

		PatientDAOInf patientDAOInf = new PatientDAOImpl();

		List<PatientForm> patientList = patientDAOInf.retrieveLabPatientDetails(patientID, visitID, clinicID, 0);

		ConfigurationUtil configXMLUtil = new ConfigurationUtil();

		try {
			connection = getConnection();

			String patientName = "";
			String age = "";
			String gender = "";
			String emailID = "";
			String mobile = "";
			String collectionDate = "";
			String collectionTime = "";
			String sampleID = "";
			String referredBy = "";
			String comment = "";

			for (PatientForm form : patientList) {
				patientName = form.getFirstName() + " " + form.getMiddleName() + " " + form.getLastName();
				age = form.getAge();
				gender = form.getGender();
				mobile = form.getMobile();
				emailID = form.getEmailID();
				regNo = form.getRegistrationNo();
				collectionDate = form.getFirstVisitDate();
				collectionTime = form.getVisitFromTime();
				sampleID = form.getSampleID();
				referredBy = form.getReferredBy();
				comment = form.getMedicalNotes();
			}

			ConfigXMLUtil xmlUtil = new ConfigXMLUtil();
			RegistrationDAOinf registrationDAOinf = new RegistrationDAOImpl();

			// Retrieving USER Details by PracticeID
			HashMap<String, String> MDMap = registrationDAOinf.retrieveUserDetails(practiceID, username);

			// File SignatureFile = new File(logoFilePath + File.separator +
			// MDMap.get("Signature"));
			signature = MDMap.get("Signature");

			docName = MDMap.get("FirstName") + " " + MDMap.get("LastName");

			if (signature == "" || signature == null) {
				signImg = null;
			} else if (signature.isEmpty()) {
				signImg = null;
			} else {

				S3ObjectInputStream s3ObjectInputStream = s3
						.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, signature))
						.getObjectContent();

				IOUtils.copy(s3ObjectInputStream, new FileOutputStream(new File(realPath + "images/" + signature)));

				signImg = Image.getInstance(realPath + "images/" + signature);
			}

			/*
			 * Getting image path from XML
			 */
			String A5ImagePath = configXMLUtil.getLetterHeadImage();

			System.out.println("A5IM.." + A5ImagePath);

			/*
			 * Getting page size from XMl
			 */
			/* String pageSize = configXMLUtil.getPageSize(); */

			/*
			 * Setting path to store PDF file
			 */
			File file1 = new File(realPath + "/" + pdfOutFIleName);

			System.out.println("PRESC FILE NAME IN CONVERT::" + file1);
			/*
			 * Creating Document for PDF
			 */
			Document document = new Document();

			/*
			 * Checking whether pageSize tag in XMl contains A5 or A4, according to that
			 * setting PDF page size
			 */
			/*
			 * if (pageSize.equals("A5")) { document = new Document(PageSize.A5); } else if
			 * (pageSize.equals("A4")) { document = new Document(PageSize.A4); }
			 */

			document = new Document(PageSize.A4);

			// PdfWriter writer = PdfWriter.getInstance(document, new
			// FileOutputStream(file1));

//			System.out.println("PRESC WRITER NAME IN CONVERT::"+writer);
//
//			Font Font1 = new Font(Font.FontFamily.TIMES_ROMAN, 10, Font.NORMAL);
			Font Font3 = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.NORMAL);
//			Font Font2 = new Font(Font.FontFamily.TIMES_ROMAN, 8, Font.NORMAL);
//			Font Font4 = new Font(Font.FontFamily.TIMES_ROMAN, 5, Font.BOLD);
			Font Font5 = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.BOLD);
//			Font Font6 = new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.BOLD);
//			Font Font7 = new Font(Font.FontFamily.TIMES_ROMAN, 14, Font.BOLD);
			Font mainContent = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.NORMAL);
//			Font mainContent1 = new Font(Font.FontFamily.TIMES_ROMAN, 15, Font.NORMAL);
//			mainContent1.setColor(BaseColor.GRAY);
//
//			Chunk bullet = new Chunk("\u2022", Font4);
//
//			/*
//			 * Defining marathi font
//			 */
//			Font marathiFont = FontFactory.getFont(marathiFontDir, BaseFont.IDENTITY_H, BaseFont.EMBEDDED);
//			marathiFont.setSize(10);
//
//			document.open();
//
//			document.setMargins(36, 36, 55, 36);
//
//			/*
//			 * Adding image
//			 */
//			PdfContentByte canvas = writer.getDirectContentUnder();
//
//			/*
//			 * Checking whether pageSize is A4 or A5, according to that background image is
//			 * being set
//			 */
//			
//			Image image;
//			System.out.println("pageSize :: "+pageSize);
//			if (pageSize.equals("A5")) {
//				if (A5ImagePath == null || A5ImagePath == "") {
//
//					image = null;
//
//				} else {
//
//					if (A5ImagePath.isEmpty()) {
//						image = null;
//					} else {
//
//						S3ObjectInputStream s3ObjectInputStream = s3.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, A5ImagePath)).getObjectContent();
//						
//						IOUtils.copy(s3ObjectInputStream, new FileOutputStream(new File(realPath + "images/"+A5ImagePath)));
//						
//						image = Image.getInstance(realPath + "images/"+A5ImagePath);
//						image.scaleToFit(PageSize.A5.getWidth(), PageSize.A5.getHeight());	
//						image.setAbsolutePosition(0, 0);
//
//						canvas.saveState();
//						PdfGState state = new PdfGState();
//						canvas.setGState(state);
//						canvas.addImage(image);
//						canvas.restoreState();
//					}
//
//				}
//			} else if (pageSize.equals("A4")) {
//				System.out.println("..........A5ImagePath: "+A5ImagePath);
//				if (A5ImagePath == null || A5ImagePath == "NULL") {
//
//					image = null;
//
//				} else {
//
//					if (A5ImagePath.isEmpty()) {
//						image = null;
//					} else {
//
//						S3ObjectInputStream s3ObjectInputStream = s3.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, A5ImagePath)).getObjectContent();
//						
//						IOUtils.copy(s3ObjectInputStream, new FileOutputStream(new File(realPath + "images/"+A5ImagePath)));
//						
//						image = Image.getInstance(realPath + "images/"+A5ImagePath);
//						image.setAbsolutePosition(0, 0);
//
//						canvas.saveState();
//						PdfGState state = new PdfGState();
//						canvas.setGState(state);
//						canvas.addImage(image);
//						canvas.restoreState();
//					}
//
//				}
//			}
//			Image prescrImg = Image.getInstance(realPath + "/images/Rx_icon.png");
//			System.out.println("PAtient ID is SSS::" + patientID);

			document.addCreator("eDhanvantari");
			document.addTitle("BDP Template");
			document.open();

			int clinicianID = 0;
			HashMap<String, String> clinicianMap = new HashMap<String, String>();

			String fetchDetailQuery2 = QueryMaker.RETRIEVE_CLINICIAN_ID_BY_INVEST_ID;

			preparedStatement3 = connection.prepareStatement(fetchDetailQuery2);

			preparedStatement3.setInt(1, investigationID);
			resultSet3 = preparedStatement3.executeQuery();

			while (resultSet3.next()) {
				clinicianID = resultSet3.getInt("clinicianID");
			}

			resultSet3.close();
			preparedStatement3.close();

			if (clinicianID != 0) {
				String fetchDetailQuery3 = QueryMaker.RETRIEVE_CLINICIAN_DETAILS_BY_ID;

				preparedStatement4 = connection.prepareStatement(fetchDetailQuery3);

				preparedStatement4.setInt(1, clinicianID);

				resultSet4 = preparedStatement4.executeQuery();

				while (resultSet4.next()) {
					clinicianMap.put("clinicianName",
							resultSet4.getString("firstName") + " " + resultSet4.getString("lastName"));
					clinicianMap.put("qualification", resultSet4.getString("qualification"));
					clinicianMap.put("clinicianRegNo", resultSet4.getString("clinicianRegNo"));
				}
				resultSet4.close();
				preparedStatement4.close();
			}

			String fetchDetailQuery1 = QueryMaker.RETRIEVE_VISIT_TEMPLATE_DATA_BY_INVEST_ID;

			preparedStatement1 = connection.prepareStatement(fetchDetailQuery1);
			preparedStatement1.setInt(1, investigationID);
			resultSet1 = preparedStatement1.executeQuery();

			FileOutputStream file = new FileOutputStream(new File(realPath + "/" + pdfOutFIleName));
			if (!resultSet1.isBeforeFirst()) {
				// ResultSet is empty
				System.out.println("No data found.");
				PdfWriter.getInstance(document, file);
				document.open();
				HTMLWorker htmlWorker = new HTMLWorker(document);
				htmlWorker.parse(new StringReader("No template is being selected"));
				document.close();
				file.close();

				resultSet1.close();
				preparedStatement1.close();
				connection.close();

				System.out.println("Successfully written and generated PDF Report");

				status = "success";
			} else {

				PdfWriter writer = PdfWriter.getInstance(document, file);
				document.open();
				while (resultSet1.next()) {
					// System.out.println(resultSet1.getString("visitNote"));

					int templateID = resultSet1.getInt("templateID");
					String templateName = null;

					String str = resultSet1.getString("templateData");

					String fetchTemplateName = QueryMaker.RETRIEVE_VISIT_TEMPLATE_NAME_BY_ID;

					preparedStatement2 = connection.prepareStatement(fetchTemplateName);
					preparedStatement2.setInt(1, templateID);

					resultSet2 = preparedStatement2.executeQuery();

					while (resultSet2.next()) {
						templateName = resultSet2.getString("TempName");
					}

					resultSet2.close();
					preparedStatement2.close();

					str = str.replace("line-height: 1.2;", "");
					// HtmlConverter.convertToPdf(str, new FileOutputStream(file1));

					PdfPTable table = new PdfPTable(4);

					table.setFooterRows(1);
					table.setWidthPercentage(100);
					Rectangle rect = new Rectangle(270, 700);
					table.setWidthPercentage(new float[] { 60, 85, 60, 85 }, rect);

					PdfPCell cell = new PdfPCell(new Paragraph("", Font3));
					cell.setPaddingTop(100);
					cell.setHorizontalAlignment(Element.ALIGN_CENTER);
					cell.setUseBorderPadding(true);
					cell.setColspan(4);
					cell.setBorder(Rectangle.NO_BORDER);
					cell.setBorderWidthBottom(1f);
					cell.setBorderColorBottom(BaseColor.DARK_GRAY);
					cell.setBorder(Rectangle.NO_BORDER);
					cell.setBorderColor(BaseColor.WHITE);

					/*
					 * For patient name
					 */
					PdfPCell cell6 = new PdfPCell(new Paragraph("Patient Name", Font5));
					cell6.setBorderWidth(0.01f);
					cell6.setPaddingBottom(5);
					cell6.setBorderWidthLeft(0.2f);
					cell6.setBorderColor(BaseColor.WHITE);

					PdfPCell cell7 = new PdfPCell(new Paragraph(patientName, mainContent));
					cell7.setBorderWidth(0.2f);
					cell7.setPaddingBottom(5);
					cell7.setBorderColor(BaseColor.WHITE);

					/*
					 * For Medical Reg. No.
					 */
					PdfPCell cell10 = new PdfPCell(new Paragraph("Medical Reg. No.", Font5));
					cell10.setBorderWidth(0.01f);
					cell10.setPaddingBottom(5);
					cell10.setBorderWidthLeft(0.2f);
					cell10.setBorderColor(BaseColor.WHITE);

					PdfPCell cell11 = new PdfPCell(new Paragraph(regNo, mainContent));
					cell11.setBorderWidth(0.2f);
					cell11.setPaddingBottom(5);
					cell11.setBorderColor(BaseColor.WHITE);

					/*
					 * For Age and Gender
					 */
					PdfPCell cell12 = new PdfPCell(new Paragraph("Age/Gender", Font5));
					cell12.setBorderWidth(0.01f);
					cell12.setPaddingBottom(5);
					cell12.setBorderWidthLeft(0.2f);
					cell12.setBorderColor(BaseColor.WHITE);

					PdfPCell cell13 = new PdfPCell(new Paragraph(age + "/" + gender, mainContent));
					cell13.setBorderWidth(0.2f);
					cell13.setPaddingBottom(5);
					cell13.setBorderColor(BaseColor.WHITE);

					/*
					 * For Mobile
					 */
					PdfPCell cell14 = new PdfPCell(new Paragraph("Mobile No.", Font5));
					cell14.setBorderWidth(0.01f);
					cell14.setPaddingBottom(5);
					cell14.setBorderWidthLeft(0.2f);
					cell14.setBorderColor(BaseColor.WHITE);

					PdfPCell cell15 = new PdfPCell(new Paragraph(mobile, mainContent));
					cell15.setBorderWidth(0.2f);
					cell15.setPaddingBottom(5);
					cell15.setBorderColor(BaseColor.WHITE);

					/*
					 * For collection date
					 */
					PdfPCell cell18 = new PdfPCell(new Paragraph("Collection Date", Font5));
					cell18.setBorderWidth(0.01f);
					cell18.setPaddingBottom(5);
					cell18.setBorderWidthLeft(0.2f);
					cell18.setBorderColor(BaseColor.WHITE);

					PdfPCell cell19 = new PdfPCell(new Paragraph(collectionDate, mainContent));
					cell19.setBorderWidth(0.2f);
					cell19.setPaddingBottom(5);
					cell19.setBorderColor(BaseColor.WHITE);

					/*
					 * For Collection time
					 */
					PdfPCell cell20 = new PdfPCell(new Paragraph("Collection Time", Font5));
					cell20.setBorderWidth(0.01f);
					cell20.setPaddingBottom(5);
					cell20.setBorderWidthLeft(0.2f);
					cell20.setBorderColor(BaseColor.WHITE);

					PdfPCell cell21 = new PdfPCell(new Paragraph(collectionTime, mainContent));
					cell21.setBorderWidth(0.2f);
					cell21.setPaddingBottom(5);
					cell21.setBorderColor(BaseColor.WHITE);

					/*
					 * For Sample ID
					 */
					PdfPCell cell22 = new PdfPCell(new Paragraph("Sample ID", Font5));
					cell22.setBorderWidth(0.01f);
					cell22.setPaddingBottom(15);
					cell22.setBorderWidthLeft(0.2f);
					cell22.setBorderColor(BaseColor.WHITE);

					PdfPCell cell23 = new PdfPCell(new Paragraph(sampleID, mainContent));
					cell23.setBorderWidth(0.2f);
					cell23.setPaddingBottom(15);
					cell23.setBorderColor(BaseColor.WHITE);

					/*
					 * For Referred by
					 */
					PdfPCell cell221 = new PdfPCell(new Paragraph("Referred By", Font5));
					cell221.setBorderWidth(0.01f);
					cell221.setPaddingBottom(15);
					cell221.setBorderWidthLeft(0.2f);
					cell221.setBorder(Rectangle.NO_BORDER);
					cell221.setBorderColor(BaseColor.WHITE);

					PdfPCell cell231 = new PdfPCell(new Paragraph(referredBy, mainContent));
					cell231.setBorderWidth(0.2f);
					cell231.setPaddingBottom(15);
					cell231.setBorder(Rectangle.NO_BORDER);
					cell231.setBorderColor(BaseColor.WHITE);

					PdfPCell cell232 = new PdfPCell(new Paragraph("", mainContent));
					cell232.setBorderWidth(0.2f);
					cell232.setColspan(4);
					cell232.setBorderColorTop(BaseColor.BLACK);
					cell232.setBorderColorBottom(BaseColor.WHITE);
					cell232.setBorderColorLeft(BaseColor.WHITE);
					cell232.setBorderColorRight(BaseColor.WHITE);
					cell232.setBorderWidthLeft(0);
					cell232.setBorderWidthRight(0);

					/*
					 * PdfPCell cell233 = new PdfPCell(new Paragraph(templateName, Font5));
					 * cell233.setBorderWidth(0.2f); cell233.setColspan(4);
					 * cell233.setPaddingBottom(15); cell233.setBorder(Rectangle.NO_BORDER);
					 * cell233.setBorderColor(BaseColor.WHITE);
					 * cell233.setHorizontalAlignment(Element.ALIGN_CENTER);
					 */

					/*
					 * adding all cell to the table to create tabular structure
					 */

					table.addCell(cell);
					table.addCell(cell6);
					table.addCell(cell7);
					table.addCell(cell10);
					table.addCell(cell11);
					table.addCell(cell12);
					table.addCell(cell13);
					table.addCell(cell14);
					table.addCell(cell15);
					table.addCell(cell18);
					table.addCell(cell19);
					table.addCell(cell20);
					table.addCell(cell21);
					table.addCell(cell22);
					table.addCell(cell23);
					table.addCell(cell221);
					table.addCell(cell231);
					table.addCell(cell232);
					/* table.addCell(cell233); */

					document.add(table);

					HTMLWorker htmlWorker = new HTMLWorker(document);
					htmlWorker.parse(new StringReader(str));

					PdfPTable table4 = new PdfPTable(1);
					table4.setTotalWidth(200);
					table4.setLockedWidth(true);
					table4.setHorizontalAlignment(Element.ALIGN_RIGHT);

					if (clinicianID != 0 && clinicianID != -1) {
						// Add clinician's information to the table
						PdfPCell cell84 = new PdfPCell(new Paragraph(clinicianMap.get("clinicianName") + " ("
								+ clinicianMap.get("clinicianRegNo") + ") " + "\n" + clinicianMap.get("qualification"),
								Font5));
						cell84.setBorderWidth(0.01f);
						cell84.setPaddingBottom(2);
						cell84.setPaddingTop(2);
						cell84.setPaddingRight(30);
						cell84.setHorizontalAlignment(Element.ALIGN_RIGHT);
						cell84.setBorderColor(BaseColor.WHITE);

						table4.addCell(cell84);
					} else {
						// Add an empty cell if clinicianID is 0 or -1
						PdfPCell cell84 = new PdfPCell(new Paragraph("", Font5));
						cell84.setBorderWidth(0.01f);
						cell84.setPaddingBottom(2);
						cell84.setPaddingTop(2);
						cell84.setPaddingRight(30);
						cell84.setHorizontalAlignment(Element.ALIGN_RIGHT);
						cell84.setBorderColor(BaseColor.WHITE);

						table4.addCell(cell84);
					}

					PdfContentByte cb = writer.getDirectContent();
					float x = document.right() - 200;
					float y = document.bottom() + 30;

					table4.writeSelectedRows(0, -1, x, y, cb);

				}
				document.close();
				file.close();
			}

			resultSet1.close();
			preparedStatement1.close();
			connection.close();

			System.out.println("Successfully written and generated PDF Report");

			status = "success";

		} catch (Exception exception) {
			exception.printStackTrace();
			status = "error";
		}

		return status;
	}

	// New added end

	/**
	 * 
	 * @param visitID
	 * @param patientID
	 * @param realPath
	 * @param pdfFIleName
	 * @return
	 */
	public String convertOPDPDF(int visitID, int patientID, int clinicID, String realPath, String pdfFIleName,
			String visitType, AmazonS3 s3, String s3reportFilePath, String bucketName, List<String> checkedFields) {

		String visitDate = null;
		String diagnosis = null;
		String comment = null;

		String status = null;

		String nextDayVisitText = "ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚ÂµÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¸ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¨ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚ÂªÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¹ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¸ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â®ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¸ ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¹ÃƒÆ’Ã¢â‚¬Â¦ÃƒÂ¢Ã¢â€šÂ¬Ã…â€œÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¨ ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â­ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¸ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â£ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡";
		String nextDayVisit = null;

		/*
		 * Declaring variable which stores the location for FreeSans.ttf file to print
		 * marathi text on pdf
		 */
		String marathiFontDir = realPath + "fonts/FreeSans.ttf";

		String startDilationTime = null;

		String endDilationTime = null;

		String duration = null;

		ConfigurationUtil configXMLUtil = new ConfigurationUtil();

		try {
			connection = getConnection();

			String fetchDetailQuery5 = QueryMaker.RETRIEVE_VISIT_DEATILS_BY_ID1;
			preparedStatement4 = connection.prepareStatement(fetchDetailQuery5);
			preparedStatement4.setInt(1, visitID);
			resultSet4 = preparedStatement4.executeQuery();

			while (resultSet4.next()) {
				startDilationTime = resultSet4.getString("dilationStartTime");
				endDilationTime = resultSet4.getString("dilationEndTime");
				duration = resultSet4.getString("dilationDuration");
			}

			/*
			 * Generate the queries to fetch details
			 */
			String fetchDetailQuery1 = QueryMaker.OPD_PDF_RETRIEVE_PATIENT;

			preparedStatement1 = connection.prepareStatement(fetchDetailQuery1);
			preparedStatement1.setInt(1, patientID);
			resultSet1 = preparedStatement1.executeQuery();

			/*
			 * Generating query 2
			 */
			String fetchDetailQuery2 = QueryMaker.OPD_PDF_RETRIEVE_VISIT;

			preparedStatement2 = connection.prepareStatement(fetchDetailQuery2);
			preparedStatement2.setInt(1, visitID);
			resultSet2 = preparedStatement2.executeQuery();

			// To fetch visit details from Visit Table
			while (resultSet2.next()) {

				SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");

				SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");

				if (resultSet2.getString("visitDate") == null || resultSet2.getString("visitDate") == ""
						|| resultSet2.getString("visitDate").isEmpty()) {
					visitDate = "";
				} else {
					visitDate = dateFormat.format(resultSet2.getDate("visitDate"));
				}

				diagnosis = resultSet2.getString("diagnosis");
				comment = resultSet2.getString("visitNote");
				nextDayVisit = resultSet2.getInt("nextVisitDays") + " " + nextDayVisitText;
				System.out.println("Marathi text ::: " + nextDayVisit);
			}

			/*
			 * Generating query 3
			 */
			String fetchDetailQuery3 = QueryMaker.OPD_PDF_RETRIEVE_OPD_VISIT;

			preparedStatement3 = connection.prepareStatement(fetchDetailQuery3);
			preparedStatement3.setInt(1, visitID);
			resultSet3 = preparedStatement3.executeQuery();

			/*
			 * Generate the queries to fetch details
			 */
			String fetchDetailQuery4 = QueryMaker.OPD_PDF_RETRIEVE_PRESCRIPTION;

			preparedStatement = connection.prepareStatement(fetchDetailQuery4);
			preparedStatement.setInt(1, visitID);
			preparedStatement.setString(2, ActivityStatus.ACTIVE);
			resultSet = preparedStatement.executeQuery();

			/*
			 * Image path for posterior segment images
			 */
			String posteriorODImage = realPath + File.separator + "images" + File.separator + "posterio_segment.png";

			String posteriorOSImage = realPath + File.separator + "images" + File.separator + "posterio_segment_1.png";

			/*
			 * Getting image path from XML
			 */
			String A5ImagePath = configXMLUtil.getLetterHeadImage();

			/*
			 * Getting page size from XMl
			 */
			// String pageSize = configXMLUtil.getPageSize();
			String pageSize = configXMLUtil.getPageSize();

			System.out.println("pageSize In visit:: :" + pageSize);

			/*
			 * Setting path to store PDF file
			 */
			File file = new File(realPath + "/" + pdfFIleName);
			/*
			 * Creating Document for PDF
			 */
			Document document = null;

			/*
			 * Checking whether pageSize tag in XMl contains A5 or A4, according to that
			 * setting PDF page size
			 */
			if (pageSize.equals("A5")) {
				document = new Document(PageSize.A5);
			} else if (pageSize.equals("A4")) {
				document = new Document(PageSize.A4);
			}

			PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(file));

			Font Font1 = new Font(Font.FontFamily.TIMES_ROMAN, 10, Font.NORMAL);
			Font Font3 = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.NORMAL);
			Font Font2 = new Font(Font.FontFamily.TIMES_ROMAN, 8, Font.NORMAL);
			Font Font4 = new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.BOLD);
			Font Font5 = new Font(Font.FontFamily.TIMES_ROMAN, 10, Font.BOLD);
			Font mainContent = new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.NORMAL);
			Font mainContent1 = new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.NORMAL);
			mainContent1.setColor(BaseColor.GRAY);
			/*
			 * Defining marathi font
			 */
			Font marathiFont = FontFactory.getFont(marathiFontDir, BaseFont.IDENTITY_H, BaseFont.EMBEDDED);

			document.open();

			/*
			 * Adding image
			 */
			PdfContentByte canvas = writer.getDirectContentUnder();

			Image image;

			if (pageSize.equals("A5")) {
				if (A5ImagePath == null || A5ImagePath == "") {

					image = null;

				} else {

					if (A5ImagePath.isEmpty()) {
						image = null;
					} else {

						S3ObjectInputStream s3ObjectInputStream = s3
								.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, A5ImagePath))
								.getObjectContent();

						IOUtils.copy(s3ObjectInputStream,
								new FileOutputStream(new File(realPath + "images/" + A5ImagePath)));

						image = Image.getInstance(realPath + "images/" + A5ImagePath);

						image.scaleToFit(PageSize.A5.getWidth(), PageSize.A5.getHeight());
						image.setAbsolutePosition(0, 0);

						canvas.saveState();
						PdfGState state = new PdfGState();
						canvas.setGState(state);
						canvas.addImage(image);
						canvas.restoreState();
					}

				}
			} else if (pageSize.equals("A4")) {
				if (A5ImagePath == null || A5ImagePath == "") {

					image = null;

				} else {

					if (A5ImagePath.isEmpty()) {
						image = null;
					} else {

						S3ObjectInputStream s3ObjectInputStream = s3
								.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, A5ImagePath))
								.getObjectContent();

						IOUtils.copy(s3ObjectInputStream,
								new FileOutputStream(new File(realPath + "images/" + A5ImagePath)));

						image = Image.getInstance(realPath + "images/" + A5ImagePath);

						image.scaleToFit(PageSize.A4.getWidth(), PageSize.A4.getHeight());
						image.setAbsolutePosition(0, 0);

						canvas.saveState();
						PdfGState state = new PdfGState();
						canvas.setGState(state);
						canvas.addImage(image);
						canvas.restoreState();
					}

				}
			}

			Image image1 = Image.getInstance(posteriorODImage);

			Image image2 = Image.getInstance(posteriorOSImage);

			/*
			 * Setting header
			 */
			document.addCreator("eDhanvantari");
			document.addTitle("OPD Visit");

			/*
			 * For displaying patient personal details
			 */
			while (resultSet1.next() && resultSet3.next()) {
				PdfPTable table = new PdfPTable(4);

				table.setFooterRows(1);
				table.setWidthPercentage(100);
				Rectangle rect = new Rectangle(270, 700);
				table.setWidthPercentage(new float[] { 75, 75, 75, 75 }, rect);

				PdfPCell cell = new PdfPCell(new Paragraph("Patient Details", Font5));
				cell.setPaddingTop(20);
				cell.setPaddingBottom(5);
				cell.setHorizontalAlignment(Element.ALIGN_CENTER);
				cell.setUseBorderPadding(true);
				cell.setColspan(4);
				cell.setBorderWidthBottom(1f);
				// cell.setBorderColorBottom(BaseColor.DARK_GRAY);
				cell.setBorderColor(BaseColor.WHITE);

				table.addCell(cell);

				/*
				 * For Patient Name
				 */
				PdfPCell cell2 = new PdfPCell(new Paragraph("Patient Name", mainContent));
				cell2.setBorderWidth(0.01f);
				cell2.setPaddingBottom(5);
				cell2.setBorderWidthLeft(0.2f);
				cell2.setBorderColor(BaseColor.LIGHT_GRAY);

				String fullName = resultSet1.getString("firstName") + " " + resultSet1.getString("middleName") + " "
						+ resultSet1.getString("lastName") + " (" + resultSet1.getInt("id") + ")";

				table.addCell(cell2);

				PdfPCell cell3 = new PdfPCell(new Paragraph(fullName, mainContent));
				cell3.setBorderWidth(0.2f);
				cell3.setPaddingBottom(5);
				cell3.setBorderColor(BaseColor.LIGHT_GRAY);

				table.addCell(cell3);

				/*
				 * For Date
				 */

				PdfPCell cell4 = new PdfPCell(new Paragraph("Date", mainContent));
				cell4.setBorderWidth(0.01f);
				cell4.setPaddingBottom(5);
				cell4.setBorderWidthLeft(0.2f);
				cell4.setBorderColor(BaseColor.LIGHT_GRAY);

				table.addCell(cell4);

				PdfPCell cell5 = new PdfPCell(new Paragraph(visitDate, mainContent));
				cell5.setBorderWidth(0.2f);
				cell5.setPaddingBottom(5);
				cell5.setBorderColor(BaseColor.LIGHT_GRAY);

				table.addCell(cell5);

				/*
				 * For Age
				 */
				PdfPCell cell6 = new PdfPCell(new Paragraph("Age", mainContent));
				cell6.setBorderWidth(0.01f);
				cell6.setPaddingBottom(5);
				cell6.setBorderWidthLeft(0.2f);
				cell6.setBorderColor(BaseColor.LIGHT_GRAY);

				table.addCell(cell6);

				PdfPCell cell7 = new PdfPCell(new Paragraph(resultSet1.getString("age"), mainContent));
				cell7.setBorderWidth(0.2f);
				cell7.setPaddingBottom(5);
				cell7.setBorderColor(BaseColor.LIGHT_GRAY);

				table.addCell(cell7);

				/*
				 * For Diagnosis
				 */
				PdfPCell cell8 = new PdfPCell(new Paragraph("Gender", mainContent));
				cell8.setBorderWidth(0.01f);
				cell8.setPaddingBottom(5);
				cell8.setBorderWidthLeft(0.2f);
				cell8.setBorderColor(BaseColor.LIGHT_GRAY);

				table.addCell(cell8);

				PdfPCell cell9 = new PdfPCell(new Paragraph(resultSet1.getString("gender"), mainContent));
				cell9.setBorderWidth(0.2f);
				cell9.setPaddingBottom(2);
				cell9.setBorderColor(BaseColor.LIGHT_GRAY);

				table.addCell(cell9);

				/*
				 * For Diagnosis
				 */
				PdfPCell cell10 = new PdfPCell(new Paragraph("Diagnosis", mainContent));
				cell10.setBorderWidth(0.01f);
				cell10.setPaddingBottom(5);
				cell10.setBorderWidthLeft(0.2f);
				cell10.setBorderColor(BaseColor.LIGHT_GRAY);

				table.addCell(cell10);

				PdfPCell cell11 = new PdfPCell(new Paragraph(diagnosis, mainContent));
				cell11.setBorderWidth(0.2f);
				cell11.setPaddingBottom(2);
				cell11.setBorderColor(BaseColor.LIGHT_GRAY);

				table.addCell(cell11);

				/*
				 * For Visit Type
				 */
				PdfPCell cell12 = new PdfPCell(new Paragraph("Visit Type", mainContent));
				cell12.setBorderWidth(0.01f);
				cell12.setPaddingBottom(5);
				cell12.setBorderWidthLeft(0.2f);
				cell12.setBorderColor(BaseColor.LIGHT_GRAY);
				cell12.setBorderWidthLeft(0.0f);
				cell12.setBorderWidthTop(0.0f);
				cell12.setBorderColorBottom(BaseColor.LIGHT_GRAY);

				table.addCell(cell12);

				PdfPCell cell13 = new PdfPCell(new Paragraph(visitType, mainContent));
				cell13.setBorderWidth(0.2f);
				cell13.setPaddingBottom(2);
				cell13.setBorderColor(BaseColor.LIGHT_GRAY);
				cell13.setBorderWidthLeft(0.0f);
				cell13.setBorderWidthTop(0.0f);
				cell13.setBorderColorBottom(BaseColor.LIGHT_GRAY);

				table.addCell(cell13);

				/* For complaining Of */

				if (checkedFields != null && checkedFields.contains("complainingOf") || checkedFields == null) {

					PdfPCell cell16 = new PdfPCell(new Paragraph("Complaining Of", mainContent));
					cell16.setBorderWidth(0.01f);
					cell16.setColspan(1);
					cell16.setRowspan(4);
					cell16.setPaddingBottom(5);
					cell16.setBorderWidthLeft(0.2f);
					cell16.setBorderColor(BaseColor.LIGHT_GRAY);
					cell16.setBorderWidthLeft(0.2f);
					cell16.setBorderWidthTop(0.0f);
					cell16.setBorderColorBottom(BaseColor.LIGHT_GRAY);

					// Center the text vertically within the cell
					cell16.setVerticalAlignment(Element.ALIGN_MIDDLE);

					table.addCell(cell16);

					PdfPCell cell17 = new PdfPCell(new Paragraph("Left Eye History", mainContent));
					cell17.setBorderWidth(0.01f);
					cell17.setColspan(1);
					cell17.setPaddingBottom(5);
					cell17.setBorderWidthLeft(0.2f);
					cell17.setBorderColor(BaseColor.LIGHT_GRAY);
					cell17.setBorderWidthLeft(0.2f);
					cell17.setBorderWidthTop(0.0f);
					cell17.setBorderColorBottom(BaseColor.LIGHT_GRAY);

					table.addCell(cell17);

					PdfPCell cell18 = new PdfPCell(new Paragraph(resultSet3.getString("leftEyeHistory"), mainContent));
					cell18.setBorderWidth(0.01f);
					cell18.setColspan(2);
					cell18.setPaddingBottom(5);
					cell18.setBorderWidthLeft(0.2f);
					cell18.setBorderColor(BaseColor.LIGHT_GRAY);
					cell18.setBorderWidthLeft(0.2f);
					cell18.setBorderWidthTop(0.0f);
					cell18.setBorderColorBottom(BaseColor.LIGHT_GRAY);

					table.addCell(cell18);

					PdfPCell cell19 = new PdfPCell(new Paragraph("Left Eye Duration", mainContent));
					cell19.setBorderWidth(0.01f);
					cell19.setColspan(1);
					cell19.setPaddingBottom(5);
					cell19.setBorderWidthLeft(0.2f);
					cell19.setBorderColor(BaseColor.LIGHT_GRAY);
					cell19.setBorderWidthLeft(0.2f);
					cell19.setBorderWidthTop(0.0f);
					cell19.setBorderColorBottom(BaseColor.LIGHT_GRAY);

					table.addCell(cell19);

					PdfPCell cell20 = new PdfPCell(new Paragraph(resultSet3.getString("leftEyeDuration"), mainContent));
					cell20.setBorderWidth(0.01f);
					cell20.setColspan(2);
					cell20.setPaddingBottom(5);
					cell20.setBorderWidthLeft(0.2f);
					cell20.setBorderColor(BaseColor.LIGHT_GRAY);
					cell20.setBorderWidthLeft(0.2f);
					cell20.setBorderWidthTop(0.0f);
					cell20.setBorderColorBottom(BaseColor.LIGHT_GRAY);

					table.addCell(cell20);

					PdfPCell cell21 = new PdfPCell(new Paragraph("Right Eye History", mainContent));
					cell21.setBorderWidth(0.01f);
					cell21.setColspan(1);
					cell21.setPaddingBottom(5);
					cell21.setBorderWidthLeft(0.2f);
					cell21.setBorderColor(BaseColor.LIGHT_GRAY);
					cell21.setBorderWidthLeft(0.2f);
					cell21.setBorderWidthTop(0.0f);
					cell21.setBorderColorBottom(BaseColor.LIGHT_GRAY);

					table.addCell(cell21);

					PdfPCell cell22 = new PdfPCell(new Paragraph(resultSet3.getString("rightEyeHistory"), mainContent));
					cell22.setBorderWidth(0.01f);
					cell22.setColspan(2);
					cell22.setPaddingBottom(5);
					cell22.setBorderWidthLeft(0.2f);
					cell22.setBorderColor(BaseColor.LIGHT_GRAY);
					cell22.setBorderWidthLeft(0.2f);
					cell22.setBorderWidthTop(0.0f);
					cell22.setBorderColorBottom(BaseColor.LIGHT_GRAY);

					table.addCell(cell22);

					PdfPCell cell23 = new PdfPCell(new Paragraph("Right Eye Duration", mainContent));
					cell23.setBorderWidth(0.01f);
					cell23.setColspan(1);
					cell23.setPaddingBottom(5);
					cell23.setBorderWidthLeft(0.2f);
					cell23.setBorderColor(BaseColor.LIGHT_GRAY);
					cell23.setBorderWidthLeft(0.2f);
					cell23.setBorderWidthTop(0.0f);
					cell23.setBorderColorBottom(BaseColor.LIGHT_GRAY);

					table.addCell(cell23);

					PdfPCell cell24 = new PdfPCell(
							new Paragraph(resultSet3.getString("rightEyeDuration"), mainContent));
					cell24.setBorderWidth(0.01f);
					cell24.setColspan(2);
					cell24.setPaddingBottom(5);
					cell24.setBorderWidthLeft(0.2f);
					cell24.setBorderColor(BaseColor.LIGHT_GRAY);
					cell24.setBorderWidthLeft(0.2f);
					cell24.setBorderWidthTop(0.0f);
					cell24.setBorderColorBottom(BaseColor.LIGHT_GRAY);

					table.addCell(cell24);

				}

				if (checkedFields != null && checkedFields.contains("dilationTime") || checkedFields == null) {

					PdfPCell cell25 = new PdfPCell(new Paragraph("Start Date & Time", mainContent));
					cell25.setBorderWidth(0.01f);
					cell25.setPaddingBottom(5);
					cell25.setBorderWidthLeft(0.2f);
					cell25.setBorderColor(BaseColor.LIGHT_GRAY);
					cell25.setBorderWidthLeft(0.2f);
					cell25.setBorderWidthTop(0.0f);
					cell25.setBorderColorBottom(BaseColor.LIGHT_GRAY);

					table.addCell(cell25);

					PdfPCell cell25a = new PdfPCell(new Paragraph(startDilationTime, mainContent));
					cell25a.setBorderWidth(0.01f);
					cell25a.setPaddingBottom(5);
					cell25a.setBorderWidthLeft(0.2f);
					cell25a.setBorderColor(BaseColor.LIGHT_GRAY);
					cell25a.setBorderWidthLeft(0.2f);
					cell25a.setBorderWidthTop(0.0f);
					cell25a.setBorderColorBottom(BaseColor.LIGHT_GRAY);

					table.addCell(cell25a);

					PdfPCell cell26 = new PdfPCell(new Paragraph("End Date & Time", mainContent));
					cell26.setBorderWidth(0.01f);
					cell26.setPaddingBottom(5);
					cell26.setBorderWidthLeft(0.2f);
					cell26.setBorderColor(BaseColor.LIGHT_GRAY);
					cell26.setBorderWidthLeft(0.2f);
					cell26.setBorderWidthTop(0.0f);
					cell26.setBorderColorBottom(BaseColor.LIGHT_GRAY);

					table.addCell(cell26);

					PdfPCell cell26a = new PdfPCell(new Paragraph(endDilationTime, mainContent));
					cell26a.setBorderWidth(0.01f);
					cell26a.setPaddingBottom(5);
					cell26a.setBorderWidthLeft(0.2f);
					cell26a.setBorderColor(BaseColor.LIGHT_GRAY);
					cell26a.setBorderWidthLeft(0.2f);
					cell26a.setBorderWidthTop(0.0f);
					cell26a.setBorderColorBottom(BaseColor.LIGHT_GRAY);

					table.addCell(cell26a);

					PdfPCell cell27 = new PdfPCell(new Paragraph("Duration", mainContent));
					cell27.setBorderWidth(0.01f);
					cell27.setPaddingBottom(5);
					cell27.setBorderWidthLeft(0.2f);
					cell27.setBorderColor(BaseColor.LIGHT_GRAY);
					cell27.setBorderWidthLeft(0.2f);
					cell27.setBorderWidthTop(0.0f);
					cell27.setBorderColorBottom(BaseColor.LIGHT_GRAY);

					table.addCell(cell27);

					PdfPCell cell27a = new PdfPCell(new Paragraph(duration, mainContent));
					cell27a.setBorderWidth(0.01f);
					cell27a.setPaddingBottom(5);
					cell27a.setColspan(3);
					cell27a.setBorderWidthLeft(0.2f);
					cell27a.setBorderColor(BaseColor.LIGHT_GRAY);
					cell27a.setBorderWidthLeft(0.2f);
					cell27a.setBorderWidthTop(0.0f);
					cell27a.setBorderColorBottom(BaseColor.LIGHT_GRAY);

					table.addCell(cell27a);

				}

				/*
				 * For Comment
				 */
				if (checkedFields != null && checkedFields.contains("medicalNote") || checkedFields == null) {
					PdfPCell cell14 = new PdfPCell(new Paragraph("Medical Notes", mainContent));
					cell14.setBorderWidth(0.01f);
					cell14.setPaddingBottom(5);
					cell14.setBorderWidthLeft(0.2f);
					cell14.setBorderColor(BaseColor.LIGHT_GRAY);
					cell14.setBorderWidthLeft(0.2f);
					cell14.setBorderWidthTop(0.0f);
					cell14.setBorderColorBottom(BaseColor.LIGHT_GRAY);

					table.addCell(cell14);

					PdfPCell cell15 = new PdfPCell(new Paragraph(StringUtils.capitalize(comment), mainContent));
					cell15.setBorderWidth(0.5f);
					cell15.setColspan(3);
					cell15.setPaddingBottom(2);
					cell15.setBorderColor(BaseColor.LIGHT_GRAY);
					cell15.setBorderWidthLeft(0.0f);
					cell15.setBorderWidthTop(0.0f);
					cell15.setBorderWidthBottom(0.1f);

					table.addCell(cell15);
				}
				document.add(table);
				resultSet3 = preparedStatement3.executeQuery();
			}
			/*
			 * for OPD Opthalmology Form
			 */
			PdfPTable table2 = new PdfPTable(3);
			table2.setWidthPercentage(100);
			Rectangle rect = new Rectangle(270, 700);
			table2.setWidthPercentage(new float[] { 100, 100, 100 }, rect);

			/*
			 * Creating Table header
			 */
			// For blank space
			PdfPCell cell = new PdfPCell(new Paragraph(" ", Font2));
			cell.setColspan(3);
			cell.setBorderWidthRight(0f);
			cell.setBorderWidthLeft(0f);
			cell.setBorderWidthTop(0f);
			cell.setBorderWidthBottom(0f);
			cell.setBorderColorTop(BaseColor.LIGHT_GRAY);

			// for Title
			PdfPCell cell0 = new PdfPCell(new Paragraph("OPD Opthalmology Form", Font5));
			cell0.setPaddingTop(10);
			cell0.setPaddingBottom(10);
			cell0.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell0.setUseBorderPadding(true);
			cell0.setColspan(3);
			cell0.setBorderWidthRight(0.1f);
			cell0.setBorderWidthLeft(0.1f);
			cell0.setBorderWidthTop(0.1f);
			cell0.setBorderWidthBottom(1f);
			// cell0.setBorderColorBottom(BaseColor.DARK_GRAY);
			cell0.setBorderColor(BaseColor.WHITE);

			// Gene
			PdfPCell cell1 = new PdfPCell(new Paragraph("On Examination", Font4));

			cell1.setBorderWidth(0.01f);
			cell1.setPaddingBottom(5);
			cell1.setPaddingTop(5);
			cell1.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell1.setBorderColor(BaseColor.BLACK);
			cell1.setBorderColorBottom(BaseColor.BLACK);
			cell1.setBorderWidthBottom(1f);

			// OD RE
			PdfPCell cell2 = new PdfPCell(new Paragraph("OD (RE)", Font4));

			cell2.setBorderWidth(0.01f);
			cell2.setPaddingBottom(5);
			cell2.setPaddingTop(5);
			cell2.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell2.setBorderWidthLeft(0.0f);
			cell2.setBorderColorBottom(BaseColor.BLACK);
			cell2.setBorderWidthBottom(0.5f);
			cell2.setBorderColor(BaseColor.BLACK);
			cell2.setBorderColorBottom(BaseColor.BLACK);
			cell2.setBorderWidthBottom(1f);

			// Os LE
			PdfPCell cell3 = new PdfPCell(new Paragraph("OS (LE)", Font4));

			cell3.setBorderWidth(0.01f);
			cell3.setPaddingBottom(5);
			cell3.setPaddingTop(5);
			cell3.setHorizontalAlignment(Element.ALIGN_CENTER);
			// cell3.setBorderColorBottom(BaseColor.WHITE);
			cell3.setBorderWidthLeft(0.0f);
			cell3.setBorderColorBottom(BaseColor.BLACK);
			cell3.setBorderWidthBottom(0.5f);
			cell3.setBorderColor(BaseColor.BLACK);
			cell3.setBorderColorBottom(BaseColor.BLACK);
			cell3.setBorderWidthBottom(1f);

			table2.addCell(cell);
			table2.addCell(cell0);
			table2.addCell(cell1);
			table2.addCell(cell2);
			table2.addCell(cell3);

			document.add(table2);

			while (resultSet3.next()) {
				PdfPTable table1 = new PdfPTable(3);
				table1.setWidthPercentage(100);
				Rectangle rect1 = new Rectangle(270, 700);
				table1.setWidthPercentage(new float[] { 100, 100, 100 }, rect1);

				if (checkedFields != null && checkedFields.contains("eyeLid") || checkedFields == null) {

					PdfPTable tableON = new PdfPTable(2);
					tableON.setWidthPercentage(100);
					tableON.setWidths(new int[] { 1, 2 });
					/*
					 * for Gene
					 */

					PdfPCell cell20 = new PdfPCell(new Paragraph("Eye Lid", Font4));
					cell20.setBorderWidth(0.01f);
					cell20.setPaddingBottom(5);
					cell20.setPaddingTop(5);
					cell20.setRowspan(2);
					cell20.setBorderWidthBottom(0.0f);
					cell20.setBorderWidthRight(0.0f);
					cell20.setBorderWidthLeft(0.0f);
					cell20.setBorderWidthTop(0.0f);
					cell20.setBorderColor(BaseColor.BLACK);
					cell20.setBorderColorTop(BaseColor.BLACK);
					cell20.setBorderColorBottom(BaseColor.BLACK);
					cell20.setBorderWidthBottom(1f);

					PdfPCell cell23 = new PdfPCell(new Paragraph("Upper", mainContent));
					cell23.setBorderWidth(0.01f);
					cell23.setPaddingBottom(2);
					cell23.setBorderWidthTop(0.0f);
					cell23.setBorderWidthBottom(0.0f);
					cell23.setBorderWidthRight(0.0f);
					cell23.setBorderColorRight(BaseColor.WHITE);
					cell23.setHorizontalAlignment(Element.ALIGN_RIGHT);
					cell23.setBorderColor(BaseColor.BLACK);
					cell23.setBorderColorBottom(BaseColor.BLACK);

					PdfPCell cell26 = new PdfPCell(new Paragraph("Lower", mainContent));
					cell26.setBorderWidth(0.01f);
					cell26.setPaddingBottom(2);
					cell26.setBorderWidthBottom(0.0f);
					cell26.setBorderWidthRight(0.0f);
					cell26.setBorderColorRight(BaseColor.WHITE);
					cell26.setHorizontalAlignment(Element.ALIGN_RIGHT);
					cell26.setBorderColor(BaseColor.BLACK);
					cell26.setBorderColorBottom(BaseColor.BLACK);
					cell26.setBorderWidthBottom(1f);

					tableON.addCell(cell20);
					tableON.addCell(cell23);
					tableON.addCell(cell26);

					PdfPCell cell60 = new PdfPCell(tableON);
					cell60.setBorderWidth(0.01f);
					cell60.setBorderColor(BaseColor.BLACK);

					table1.addCell(cell60);
				}

				PdfPTable tableOD1 = new PdfPTable(1);
				tableOD1.setWidthPercentage(100);
				tableOD1.setWidths(new int[] { 1 });

				if (checkedFields != null && checkedFields.contains("eyeLid") || checkedFields == null) {
					/* for Variant Impact */

					if (!(resultSet3.getString("eyelidUpperOD").isEmpty())) {
						PdfPCell cell24 = new PdfPCell(
								new Paragraph(resultSet3.getString("eyelidUpperOD"), mainContent));
						cell24.setBorderWidth(0.01f);
						cell24.setPaddingBottom(2);
						cell24.setBorderWidthLeft(0.0f);
						cell24.setBorderWidthTop(0.0f);
						cell24.setBorderWidthRight(0.0f);
						cell24.setBorderColorLeft(BaseColor.WHITE);
						cell24.setBorderColorRight(BaseColor.WHITE);
						cell24.setHorizontalAlignment(Element.ALIGN_CENTER);
						cell24.setBorderColor(BaseColor.BLACK);

						tableOD1.addCell(cell24);
					} else {

						PdfPCell cell24 = new PdfPCell(new Paragraph(" ", mainContent));
						cell24.setBorderWidth(0.01f);
						cell24.setPaddingBottom(2);
						cell24.setBorderWidthLeft(0.0f);
						cell24.setBorderWidthTop(0.0f);
						cell24.setBorderWidthRight(0.0f);
						cell24.setBorderColorLeft(BaseColor.WHITE);
						cell24.setBorderColorRight(BaseColor.WHITE);
						cell24.setHorizontalAlignment(Element.ALIGN_CENTER);
						cell24.setBorderColor(BaseColor.BLACK);

						tableOD1.addCell(cell24);
					}

					if (!(resultSet3.getString("eyelidLowerOD").isEmpty())) {
						/*
						 * for ClinVar URL
						 *//*
							 * for ClinVar URL
							 */
						PdfPCell cell27 = new PdfPCell(
								new Paragraph(resultSet3.getString("eyelidLowerOD"), mainContent));
						cell27.setBorderWidth(0.01f);
						cell27.setPaddingBottom(2);
						cell27.setBorderWidthBottom(0.0f);
						cell27.setBorderWidthLeft(0.0f);
						cell27.setBorderWidthTop(0.0f);
						cell27.setBorderWidthRight(0.0f);
						cell27.setBorderColorLeft(BaseColor.WHITE);
						cell27.setBorderColorBottom(BaseColor.WHITE);
						cell27.setBorderColorRight(BaseColor.WHITE);
						cell27.setHorizontalAlignment(Element.ALIGN_CENTER);
						cell27.setBorderColor(BaseColor.BLACK);
						cell27.setBorderColorBottom(BaseColor.BLACK);
						cell27.setBorderWidthBottom(1f);

						tableOD1.addCell(cell27);
					} else {
						PdfPCell cell27 = new PdfPCell(new Paragraph(" ", mainContent));
						cell27.setBorderWidth(0.01f);
						cell27.setPaddingBottom(2);
						cell27.setBorderWidthBottom(0.0f);
						cell27.setBorderWidthLeft(0.0f);
						cell27.setBorderWidthTop(0.0f);
						cell27.setBorderWidthRight(0.0f);
						cell27.setBorderColorLeft(BaseColor.WHITE);
						cell27.setBorderColorBottom(BaseColor.WHITE);
						cell27.setBorderColorRight(BaseColor.WHITE);
						cell27.setHorizontalAlignment(Element.ALIGN_CENTER);
						cell27.setBorderColor(BaseColor.BLACK);
						cell27.setBorderColorBottom(BaseColor.BLACK);
						cell27.setBorderWidthBottom(1f);

						tableOD1.addCell(cell27);
					}

					PdfPCell cell61 = new PdfPCell(tableOD1);
					cell61.setBorderWidth(0.01f);
					table1.addCell(cell61);
				}

				PdfPTable tableOS1 = new PdfPTable(1);
				tableOS1.setWidthPercentage(100);
				tableOS1.setWidths(new int[] { 1 });

				if (checkedFields != null && checkedFields.contains("eyeLid") || checkedFields == null) {
					/* for Clinical Significance */

					if (!(resultSet3.getString("eyelidUpperOS").isEmpty())) {
						PdfPCell cell25 = new PdfPCell(
								new Paragraph(resultSet3.getString("eyelidUpperOS"), mainContent));
						cell25.setBorderWidth(0.01f);
						cell25.setPaddingBottom(2);
						cell25.setBorderWidthLeft(0.0f);
						cell25.setBorderWidthRight(0.0f);
						cell25.setBorderWidthBottom(0.0f);
						cell25.setBorderWidthTop(0.0f);
						cell25.setHorizontalAlignment(Element.ALIGN_CENTER);
						cell25.setBorderColor(BaseColor.BLACK);

						tableOS1.addCell(cell25);
					} else {

						PdfPCell cell25 = new PdfPCell(new Paragraph(" ", mainContent));
						cell25.setBorderWidth(0.01f);
						cell25.setPaddingBottom(2);
						cell25.setBorderWidthLeft(0.0f);
						cell25.setBorderWidthRight(0.0f);
						cell25.setBorderWidthBottom(0.0f);
						cell25.setBorderWidthTop(0.0f);
						cell25.setHorizontalAlignment(Element.ALIGN_CENTER);
						cell25.setBorderColor(BaseColor.BLACK);

						tableOS1.addCell(cell25);
					}

					if (!(resultSet3.getString("eyelidLowerOS").isEmpty())) {
						PdfPCell cell28 = new PdfPCell(
								new Paragraph(resultSet3.getString("eyelidLowerOS"), mainContent));
						cell28.setBorderWidth(0.01f);
						cell28.setPaddingBottom(2);
						cell28.setHorizontalAlignment(Element.ALIGN_CENTER);
						cell28.setBorderWidthBottom(0.0f);
						cell28.setBorderWidthLeft(0.0f);
						cell28.setBorderWidthRight(0.0f);
						cell28.setBorderColorBottom(BaseColor.WHITE);
						cell28.setBorderColor(BaseColor.BLACK);
						cell28.setBorderColorBottom(BaseColor.BLACK);
						cell28.setBorderWidthBottom(1f);

						tableOS1.addCell(cell28);
					} else {
						/*
						 * for RSIDs
						 */
						PdfPCell cell28 = new PdfPCell(new Paragraph(" ", mainContent));
						cell28.setBorderWidth(0.01f);
						cell28.setPaddingBottom(2);
						cell28.setHorizontalAlignment(Element.ALIGN_CENTER);
						cell28.setBorderWidthBottom(0.0f);
						cell28.setBorderWidthLeft(0.0f);
						cell28.setBorderWidthRight(0.0f);
						cell28.setBorderColorBottom(BaseColor.WHITE);
						cell28.setBorderColor(BaseColor.BLACK);
						cell28.setBorderColorBottom(BaseColor.BLACK);
						cell28.setBorderWidthBottom(1f);

						tableOS1.addCell(cell28);
					}

					PdfPCell cell62 = new PdfPCell(tableOS1);
					cell62.setBorderWidth(0.01f);
					table1.addCell(cell62);

				}

				if (checkedFields != null && checkedFields.contains("vision") || checkedFields == null) {

					PdfPTable tableON = new PdfPTable(2);
					tableON.setWidthPercentage(100);
					tableON.setWidths(new int[] { 1, 2 });
					/*
					 * for Gene
					 */
					PdfPCell cell29 = new PdfPCell(new Paragraph("Vision", Font4));
					cell29.setBorderWidth(0.01f);
					cell29.setPaddingBottom(3);
					cell29.setPaddingTop(20);
					cell29.setBorderWidthTop(0.0f);
					cell29.setBorderWidthRight(0.0f);
					cell29.setRowspan(4);
					cell29.setHorizontalAlignment(Element.ALIGN_LEFT);
					cell29.setBorderColor(BaseColor.BLACK);
					cell29.setBorderColorTop(BaseColor.BLACK);
					cell29.setBorderColorBottom(BaseColor.BLACK);
					cell29.setBorderWidthBottom(1f);

					tableON.addCell(cell29);

					PdfPCell cell32 = new PdfPCell(new Paragraph(" ", mainContent));
					cell32.setBorderWidth(0.01f);
					cell32.setPaddingBottom(2);
					cell32.setHorizontalAlignment(Element.ALIGN_RIGHT);
					cell32.setBorderColor(BaseColor.BLACK);

					tableON.addCell(cell32);

					PdfPCell cell33 = new PdfPCell(new Paragraph("Visual Acuity", mainContent));
					cell33.setBorderWidth(0.01f);
					cell33.setPaddingBottom(2);
					cell33.setHorizontalAlignment(Element.ALIGN_RIGHT);
					cell33.setBorderColor(BaseColor.BLACK);

					tableON.addCell(cell33);

					/*
					 * for Associated Disease
					 */
					PdfPCell cell35 = new PdfPCell(new Paragraph("Pinhole Vision", mainContent));
					cell35.setBorderWidth(0.01f);
					cell35.setPaddingBottom(2);
					cell35.setHorizontalAlignment(Element.ALIGN_RIGHT);
					cell35.setBorderColor(BaseColor.BLACK);

					tableON.addCell(cell35);

					/* for Associated Disease */
					PdfPCell cell38 = new PdfPCell(new Paragraph("BCVA", mainContent));
					// cell38.setBorderWidth(0.01f); cell38.setPaddingBottom(2);
					cell38.setHorizontalAlignment(Element.ALIGN_RIGHT);
					cell38.setBorderColor(BaseColor.BLACK);
					cell38.setBorderColorBottom(BaseColor.BLACK);
					cell38.setBorderWidthBottom(1f);

					tableON.addCell(cell38);

					PdfPCell cell60 = new PdfPCell(tableON);
					cell60.setBorderWidth(0.01f);
					cell60.setBorderColor(BaseColor.BLACK);

					table1.addCell(cell60);
				}

				if (checkedFields != null && checkedFields.contains("vision") || checkedFields == null) {

					PdfPTable tableOD = new PdfPTable(2);
					tableOD.setWidthPercentage(100);
					tableOD.setWidths(new int[] { 2, 2 });

					PdfPCell distCellText = new PdfPCell(new Paragraph("Dist", Font4));
					distCellText.setBorderWidthBottom(0.1f);
					distCellText.setBorderWidthTop(0.0f);
					distCellText.setBorderWidthLeft(0.0f);
					distCellText.setBorderColorTop(BaseColor.WHITE);
					distCellText.setHorizontalAlignment(Element.ALIGN_CENTER);
					distCellText.setBorderColor(BaseColor.BLACK);
					distCellText.setBorderColorBottom(BaseColor.BLACK);
					distCellText.setBorderWidthBottom(1f);

					tableOD.addCell(distCellText);

					PdfPCell nearCelltext = new PdfPCell(new Paragraph("Near", Font4));
					nearCelltext.setBorderWidthBottom(0.1f);
					nearCelltext.setBorderWidthTop(0.0f);
					nearCelltext.setBorderWidthLeft(0.0f);
					nearCelltext.setBorderWidthRight(0.0f);
					nearCelltext.setHorizontalAlignment(Element.ALIGN_CENTER);
					nearCelltext.setBorderColor(BaseColor.BLACK);
					nearCelltext.setBorderColorBottom(BaseColor.BLACK);
					nearCelltext.setBorderWidthBottom(1f);

					tableOD.addCell(nearCelltext);

					PdfPCell distCellText1 = new PdfPCell(
							new Paragraph(resultSet3.getString("visualAcuityDistOD"), mainContent));
					distCellText1.setHorizontalAlignment(Element.ALIGN_CENTER);
					distCellText1.setPaddingBottom(2);
					distCellText1.setBorderColor(BaseColor.BLACK);

					tableOD.addCell(distCellText1);

					PdfPCell nearCelltext1 = new PdfPCell(
							new Paragraph(resultSet3.getString("visualAcuityNearOD"), mainContent));
					nearCelltext1.setHorizontalAlignment(Element.ALIGN_CENTER);
					nearCelltext1.setPaddingBottom(2);
					nearCelltext1.setBorderColor(BaseColor.BLACK);

					tableOD.addCell(nearCelltext1);

					PdfPCell distCellText2 = new PdfPCell(
							new Paragraph(resultSet3.getString("pinholeVisionDistOD"), mainContent));
					distCellText2.setHorizontalAlignment(Element.ALIGN_CENTER);
					distCellText2.setPaddingBottom(2);
					distCellText2.setBorderColor(BaseColor.BLACK);

					tableOD.addCell(distCellText2);

					PdfPCell nearCelltext2 = new PdfPCell(
							new Paragraph(resultSet3.getString("pinholeVisionNearOD"), mainContent));
					nearCelltext2.setHorizontalAlignment(Element.ALIGN_CENTER);
					nearCelltext2.setPaddingBottom(2);
					nearCelltext2.setBorderColor(BaseColor.BLACK);

					tableOD.addCell(nearCelltext2);

					PdfPCell distCellText3 = new PdfPCell(
							new Paragraph(resultSet3.getString("bcvaDistOD"), mainContent));
					distCellText3.setHorizontalAlignment(Element.ALIGN_CENTER);
					distCellText3.setPaddingBottom(2);
					distCellText3.setBorderColor(BaseColor.BLACK);
					distCellText3.setBorderColorBottom(BaseColor.BLACK);
					distCellText3.setBorderWidthBottom(1f);

					tableOD.addCell(distCellText3);

					PdfPCell nearCelltext3 = new PdfPCell(
							new Paragraph(resultSet3.getString("bcvaNearOD"), mainContent));
					nearCelltext3.setHorizontalAlignment(Element.ALIGN_CENTER);
					nearCelltext3.setPaddingBottom(2);
					nearCelltext3.setBorderColor(BaseColor.BLACK);
					nearCelltext3.setBorderColorBottom(BaseColor.BLACK);
					nearCelltext3.setBorderWidthBottom(1f);

					tableOD.addCell(nearCelltext3);

					PdfPCell cell60 = new PdfPCell(tableOD);
					cell60.setBorderWidth(0.01f);
					cell60.setBorderColor(BaseColor.BLACK);

					table1.addCell(cell60);
				}

				if (checkedFields != null && checkedFields.contains("vision") || checkedFields == null) {

					PdfPTable tableOS = new PdfPTable(2);
					tableOS.setWidthPercentage(100);
					tableOS.setWidths(new int[] { 2, 2 });

					PdfPCell distCellTextOS = new PdfPCell(new Paragraph("Dist", Font4));
					distCellTextOS.setHorizontalAlignment(Element.ALIGN_CENTER);
					distCellTextOS.setBorderWidthTop(0.0f);
					distCellTextOS.setBorderWidthRight(0.0f);
					distCellTextOS.setBorderWidthLeft(0.0f);
					distCellTextOS.setBorderColor(BaseColor.BLACK);
					distCellTextOS.setBorderColorBottom(BaseColor.BLACK);
					distCellTextOS.setBorderWidthBottom(1f);

					tableOS.addCell(distCellTextOS);

					PdfPCell nearCelltextOS = new PdfPCell(new Paragraph("Near", Font4));
					nearCelltextOS.setHorizontalAlignment(Element.ALIGN_CENTER);
					nearCelltextOS.setBorderWidthTop(0.0f);
					nearCelltextOS.setBorderWidthRight(0.0f);
					nearCelltextOS.setBorderColor(BaseColor.BLACK);
					nearCelltextOS.setBorderColorBottom(BaseColor.BLACK);
					nearCelltextOS.setBorderWidthBottom(1f);

					tableOS.addCell(nearCelltextOS);

					PdfPCell distCellTextOS1 = new PdfPCell(
							new Paragraph(resultSet3.getString("visualAcuityDistOS"), mainContent));
					distCellTextOS1.setHorizontalAlignment(Element.ALIGN_CENTER);
					distCellTextOS1.setBorderColor(BaseColor.BLACK);

					tableOS.addCell(distCellTextOS1);

					PdfPCell nearCelltextOS1 = new PdfPCell(
							new Paragraph(resultSet3.getString("visualAcuityNearOS"), mainContent));
					nearCelltextOS1.setHorizontalAlignment(Element.ALIGN_CENTER);
					nearCelltextOS1.setBorderColor(BaseColor.BLACK);

					tableOS.addCell(nearCelltextOS1);

					PdfPCell distCellTextOS2 = new PdfPCell(
							new Paragraph(resultSet3.getString("pinholeVisionDistOS"), mainContent));
					distCellTextOS2.setHorizontalAlignment(Element.ALIGN_CENTER);
					distCellTextOS2.setBorderColor(BaseColor.BLACK);

					tableOS.addCell(distCellTextOS2);

					PdfPCell nearCelltextOS2 = new PdfPCell(
							new Paragraph(resultSet3.getString("pinholeVisionNearOS"), mainContent));
					nearCelltextOS2.setHorizontalAlignment(Element.ALIGN_CENTER);
					nearCelltextOS2.setBorderColor(BaseColor.BLACK);

					tableOS.addCell(nearCelltextOS2);

					PdfPCell distCellTextOS3 = new PdfPCell(
							new Paragraph(resultSet3.getString("bcvaDistOS"), mainContent));
					distCellTextOS3.setHorizontalAlignment(Element.ALIGN_CENTER);
					distCellTextOS3.setBorderColor(BaseColor.BLACK);
					distCellTextOS3.setBorderColorBottom(BaseColor.BLACK);
					distCellTextOS3.setBorderWidthBottom(1f);

					tableOS.addCell(distCellTextOS3);

					PdfPCell nearCelltextOS3 = new PdfPCell(
							new Paragraph(resultSet3.getString("bcvaNearOS"), mainContent));
					nearCelltextOS3.setHorizontalAlignment(Element.ALIGN_CENTER);
					nearCelltextOS3.setBorderColor(BaseColor.BLACK);
					nearCelltextOS3.setBorderColorBottom(BaseColor.BLACK);
					nearCelltextOS3.setBorderWidthBottom(1f);

					tableOS.addCell(nearCelltextOS3);

					PdfPCell cell60 = new PdfPCell(tableOS);
					cell60.setBorderWidth(0.01f);
					cell60.setBorderColor(BaseColor.BLACK);

					table1.addCell(cell60);
				}

				if (checkedFields != null && checkedFields.contains("anteriorSegment") || checkedFields == null) {

					PdfPTable tableON = new PdfPTable(2);
					tableON.setWidthPercentage(100);
					tableON.setWidths(new int[] { 1, 2 });
					/*
					 * for Gene
					 */
					PdfPCell cell20 = new PdfPCell(new Paragraph("Anterior Segment", Font4));
					cell20.setBorderWidth(0.01f);
					cell20.setPaddingBottom(2);
					cell20.setPaddingTop(20);
					cell20.setRowspan(6);
					// cell20.setBorderWidthBottom(0.0f);
					cell20.setBorderColor(BaseColor.BLACK);
					cell20.setBorderColorBottom(BaseColor.BLACK);
					cell20.setBorderWidthBottom(1f);

					PdfPCell cell44 = new PdfPCell(new Paragraph("Conjuctiva", mainContent));
					cell44.setBorderWidth(0.01f);
					cell44.setPaddingBottom(2);
					cell44.setHorizontalAlignment(Element.ALIGN_RIGHT);
					cell44.setBorderColor(BaseColor.BLACK);

					PdfPCell cell45 = new PdfPCell(new Paragraph("Sclera", mainContent));
					cell45.setBorderWidth(0.01f);
					cell45.setPaddingBottom(2);
					cell45.setHorizontalAlignment(Element.ALIGN_RIGHT);
					cell45.setBorderColor(BaseColor.BLACK);

					PdfPCell cell47 = new PdfPCell(new Paragraph("Cornea", mainContent));
					cell47.setBorderWidth(0.01f);
					cell47.setPaddingBottom(2);
					cell47.setHorizontalAlignment(Element.ALIGN_RIGHT);
					cell47.setBorderColor(BaseColor.BLACK);

					PdfPCell cellPupil14 = new PdfPCell(new Paragraph("Pupil", mainContent));
					cellPupil14.setBorderWidth(0.01f);
					cellPupil14.setPaddingBottom(2);
					cellPupil14.setHorizontalAlignment(Element.ALIGN_RIGHT);
					cellPupil14.setBorderColor(BaseColor.BLACK);

					PdfPCell cell50 = new PdfPCell(new Paragraph("AC", mainContent));
					cell50.setBorderWidth(0.01f);
					cell50.setPaddingBottom(2);
					cell50.setHorizontalAlignment(Element.ALIGN_RIGHT);
					cell50.setBorderColor(BaseColor.BLACK);

					PdfPCell cell53 = new PdfPCell(new Paragraph("Iris", mainContent));
					cell53.setBorderWidth(0.01f);
					cell53.setPaddingBottom(2);
					cell53.setHorizontalAlignment(Element.ALIGN_RIGHT);
					cell53.setBorderColor(BaseColor.BLACK);

					PdfPCell cell56 = new PdfPCell(new Paragraph("Lens", mainContent));
					cell56.setBorderWidth(0.01f);
					cell56.setPaddingBottom(2);
					cell56.setHorizontalAlignment(Element.ALIGN_RIGHT);
					cell56.setBorderColor(BaseColor.BLACK);
					cell56.setBorderColorBottom(BaseColor.BLACK);
					cell56.setBorderWidthBottom(1f);

					tableON.addCell(cell20);
					tableON.addCell(cell44);
					tableON.addCell(cell45);
					tableON.addCell(cell47);
					tableON.addCell(cellPupil14);
					tableON.addCell(cell50);
					tableON.addCell(cell53);
					tableON.addCell(cell56);

					PdfPCell cell60 = new PdfPCell(tableON);
					// cell60.setBorderWidth(0.01f);
					cell60.setBorderColor(BaseColor.BLACK);

					table1.addCell(cell60);

				}

				PdfPTable tableOD2 = new PdfPTable(1);
				tableOD2.setWidthPercentage(100);
				tableOD2.setWidths(new int[] { 1 });

				if (checkedFields != null && checkedFields.contains("anteriorSegment") || checkedFields == null) {

					if (!(resultSet3.getString("conjunctivaOD").isEmpty())) {
						/*
						 * for ClinVar URL
						 */
						PdfPCell cell45 = new PdfPCell(
								new Paragraph(resultSet3.getString("conjunctivaOD"), mainContent));
						cell45.setBorderWidth(0.01f);
						cell45.setPaddingBottom(2);
						cell45.setBorderColor(BaseColor.BLACK);

						tableOD2.addCell(cell45);
					} else {
						PdfPCell cell45 = new PdfPCell(new Paragraph(" ", mainContent));
						cell45.setBorderWidth(0.01f);
						cell45.setPaddingBottom(2);
						cell45.setBorderColor(BaseColor.BLACK);

						tableOD2.addCell(cell45);
					}

					if (!(resultSet3.getString("scleraOD").isEmpty())) {
						PdfPCell cell46 = new PdfPCell(new Paragraph(resultSet3.getString("scleraOD"), mainContent));
						cell46.setBorderWidth(0.01f);
						cell46.setPaddingBottom(2);
						cell46.setBorderColor(BaseColor.BLACK);

						tableOD2.addCell(cell46);
					} else {
						PdfPCell cell46 = new PdfPCell(new Paragraph(" ", mainContent));
						cell46.setBorderWidth(0.01f);
						cell46.setPaddingBottom(2);
						cell46.setBorderColor(BaseColor.BLACK);

						tableOD2.addCell(cell46);
					}

					if (!(resultSet3.getString("corneaOD").isEmpty())) {
						/*
						 * for ClinVar URL
						 */
						PdfPCell cell48 = new PdfPCell(new Paragraph(resultSet3.getString("corneaOD"), mainContent));
						cell48.setBorderWidth(0.01f);
						cell48.setPaddingBottom(2);
						cell48.setBorderColor(BaseColor.BLACK);

						tableOD2.addCell(cell48);
					} else {
						/*
						 * for ClinVar URL
						 */
						PdfPCell cell48 = new PdfPCell(new Paragraph(" ", mainContent));
						cell48.setBorderWidth(0.01f);
						cell48.setPaddingBottom(2);
						cell48.setBorderColor(BaseColor.BLACK);

						tableOD2.addCell(cell48);
					}

					if (!(resultSet3.getString("pupilOD").isEmpty())) {
						/*
						 * for ClinVar URL
						 */
						PdfPCell cellPupilOD2 = new PdfPCell(
								new Paragraph(resultSet3.getString("pupilOD"), mainContent));
						cellPupilOD2.setBorderWidth(0.01f);
						cellPupilOD2.setPaddingBottom(2);
						cellPupilOD2.setBorderColor(BaseColor.BLACK);

						tableOD2.addCell(cellPupilOD2);
					} else {
						/*
						 * for ClinVar URL
						 */
						PdfPCell cellPupilOD2 = new PdfPCell(new Paragraph(" ", mainContent));
						cellPupilOD2.setBorderWidth(0.01f);
						cellPupilOD2.setPaddingBottom(2);
						cellPupilOD2.setBorderColor(BaseColor.BLACK);

						tableOD2.addCell(cellPupilOD2);
					}

					if (!(resultSet3.getString("anteriorChamberOD").isEmpty())) {
						/*
						 * for ClinVar URL
						 */
						PdfPCell cell51 = new PdfPCell(
								new Paragraph(resultSet3.getString("anteriorChamberOD"), mainContent));
						cell51.setBorderWidth(0.01f);
						cell51.setPaddingBottom(2);
						cell51.setBorderColor(BaseColor.BLACK);

						tableOD2.addCell(cell51);
					} else {
						/*
						 * for ClinVar URL
						 */
						PdfPCell cell51 = new PdfPCell(new Paragraph(" ", mainContent));
						cell51.setBorderWidth(0.01f);
						cell51.setPaddingBottom(2);
						cell51.setBorderColor(BaseColor.BLACK);

						tableOD2.addCell(cell51);
					}

					if (!(resultSet3.getString("irisOD").isEmpty())) {
						/*
						 * for ClinVar URL
						 */
						PdfPCell cell54 = new PdfPCell(new Paragraph(resultSet3.getString("irisOD"), mainContent));
						cell54.setBorderWidth(0.01f);
						cell54.setPaddingBottom(2);
						cell54.setBorderColor(BaseColor.BLACK);

						tableOD2.addCell(cell54);
					} else {

						/*
						 * for ClinVar URL
						 */
						PdfPCell cell54 = new PdfPCell(new Paragraph(" ", mainContent));
						cell54.setBorderWidth(0.01f);
						cell54.setPaddingBottom(2);
						cell54.setBorderColor(BaseColor.BLACK);

						tableOD2.addCell(cell54);
					}

					if (!(resultSet3.getString("lensOD").isEmpty())) {
						/*
						 * for ClinVar URL
						 */
						PdfPCell cell57 = new PdfPCell(new Paragraph(resultSet3.getString("lensOD"), mainContent));
						cell57.setBorderWidth(0.01f);
						cell57.setPaddingBottom(2);
						cell57.setBorderWidthBottom(0.0f);
						cell57.setBorderColor(BaseColor.BLACK);
						cell57.setBorderColorBottom(BaseColor.BLACK);
						cell57.setBorderWidthBottom(1f);

						tableOD2.addCell(cell57);
					} else {
						/*
						 * for ClinVar URL
						 */
						PdfPCell cell57 = new PdfPCell(new Paragraph(" ", mainContent));
						cell57.setBorderWidth(0.01f);
						cell57.setPaddingBottom(2);
						cell57.setBorderWidthBottom(0.0f);
						cell57.setBorderColor(BaseColor.BLACK);
						cell57.setBorderColorBottom(BaseColor.BLACK);
						cell57.setBorderWidthBottom(1f);

						tableOD2.addCell(cell57);
					}

					PdfPCell cell61 = new PdfPCell(tableOD2);
					cell61.setBorderWidth(0.01f);
					table1.addCell(cell61);
				}

				PdfPTable tableOS2 = new PdfPTable(1);
				tableOS2.setWidthPercentage(100);
				tableOS2.setWidths(new int[] { 1 });

				if (checkedFields != null && checkedFields.contains("anteriorSegment") || checkedFields == null) {

					if (!(resultSet3.getString("conjunctivaOS").isEmpty())) {
						/*
						 * for RSIDs
						 */
						PdfPCell cell46 = new PdfPCell(
								new Paragraph(resultSet3.getString("conjunctivaOS"), mainContent));
						cell46.setBorderWidth(0.01f);
						cell46.setPaddingBottom(2);
						cell46.setBorderColor(BaseColor.BLACK);

						tableOS2.addCell(cell46);
					} else {
						/*
						 * for RSIDs
						 */
						PdfPCell cell46 = new PdfPCell(new Paragraph(" ", mainContent));
						cell46.setBorderWidth(0.01f);
						cell46.setPaddingBottom(2);
						cell46.setBorderColor(BaseColor.BLACK);

						tableOS2.addCell(cell46);
					}

					if (!(resultSet3.getString("scleraOS").isEmpty())) {
						PdfPCell cell47 = new PdfPCell(new Paragraph(resultSet3.getString("scleraOS"), mainContent));
						cell47.setBorderWidth(0.01f);
						cell47.setPaddingBottom(2);
						cell47.setBorderColor(BaseColor.BLACK);

						tableOS2.addCell(cell47);
					} else {

						PdfPCell cell47 = new PdfPCell(new Paragraph(" ", mainContent));
						cell47.setBorderWidth(0.01f);
						cell47.setPaddingBottom(2);
						cell47.setBorderColor(BaseColor.BLACK);

						tableOS2.addCell(cell47);
					}

					if (!(resultSet3.getString("corneaOS").isEmpty())) {
						/*
						 * for RSIDs
						 */
						PdfPCell cell49 = new PdfPCell(new Paragraph(resultSet3.getString("corneaOS"), mainContent));
						cell49.setBorderWidth(0.01f);
						cell49.setPaddingBottom(2);
						cell49.setBorderColor(BaseColor.BLACK);

						tableOS2.addCell(cell49);
					} else {
						/*
						 * for RSIDs
						 */
						PdfPCell cell49 = new PdfPCell(new Paragraph(" ", mainContent));
						cell49.setBorderWidth(0.01f);
						cell49.setPaddingBottom(2);
						cell49.setBorderColor(BaseColor.BLACK);

						tableOS2.addCell(cell49);
					}

					if (!(resultSet3.getString("pupilOS").isEmpty())) {
						/*
						 * for RSIDs
						 */
						PdfPCell cellPupil9 = new PdfPCell(new Paragraph(resultSet3.getString("pupilOS"), mainContent));
						cellPupil9.setBorderWidth(0.01f);
						cellPupil9.setPaddingBottom(2);
						cellPupil9.setBorderColor(BaseColor.BLACK);

						tableOS2.addCell(cellPupil9);
					} else {
						/*
						 * for RSIDs
						 */
						PdfPCell cellPupil9 = new PdfPCell(new Paragraph(" ", mainContent));
						cellPupil9.setBorderWidth(0.01f);
						cellPupil9.setPaddingBottom(2);
						cellPupil9.setBorderColor(BaseColor.BLACK);

						tableOS2.addCell(cellPupil9);
					}

					if (!(resultSet3.getString("anteriorChamberOS").isEmpty())) {
						/*
						 * for RSIDs
						 */
						PdfPCell cell52 = new PdfPCell(
								new Paragraph(resultSet3.getString("anteriorChamberOS"), mainContent));
						cell52.setBorderWidth(0.01f);
						cell52.setPaddingBottom(2);
						cell52.setBorderColor(BaseColor.BLACK);

						tableOS2.addCell(cell52);
					} else {
						/*
						 * for RSIDs
						 */
						PdfPCell cell52 = new PdfPCell(new Paragraph(" ", mainContent));
						cell52.setBorderWidth(0.01f);
						cell52.setPaddingBottom(2);
						cell52.setBorderColor(BaseColor.BLACK);

						tableOS2.addCell(cell52);
					}

					if (!(resultSet3.getString("irisOS").isEmpty())) {
						/*
						 * for RSIDs
						 */
						PdfPCell cell55 = new PdfPCell(new Paragraph(resultSet3.getString("irisOS"), mainContent));
						cell55.setBorderWidth(0.01f);
						cell55.setPaddingBottom(2);
						cell55.setBorderColor(BaseColor.BLACK);

						tableOS2.addCell(cell55);
					} else {
						/*
						 * for RSIDs
						 */
						PdfPCell cell55 = new PdfPCell(new Paragraph(" ", mainContent));
						cell55.setBorderWidth(0.01f);
						cell55.setPaddingBottom(2);
						cell55.setBorderColor(BaseColor.BLACK);

						tableOS2.addCell(cell55);
					}

					if (!(resultSet3.getString("lensOS").isEmpty())) {
						/*
						 * for RSIDs
						 */
						PdfPCell cell58 = new PdfPCell(new Paragraph(resultSet3.getString("lensOS"), mainContent));
						cell58.setBorderWidth(0.01f);
						cell58.setPaddingBottom(2);
						cell58.setBorderWidthBottom(0.0f);
						cell58.setBorderColor(BaseColor.BLACK);
						cell58.setBorderColorBottom(BaseColor.BLACK);
						cell58.setBorderWidthBottom(1f);

						tableOS2.addCell(cell58);
					} else {
						/*
						 * for RSIDs
						 */
						PdfPCell cell58 = new PdfPCell(new Paragraph(" ", mainContent));
						cell58.setBorderWidth(0.01f);
						cell58.setPaddingBottom(2);
						cell58.setBorderWidthBottom(0.0f);
						cell58.setBorderColor(BaseColor.BLACK);
						cell58.setBorderColorBottom(BaseColor.BLACK);
						cell58.setBorderWidthBottom(1f);

						tableOS2.addCell(cell58);
					}

					PdfPCell cell62 = new PdfPCell(tableOS2);
					cell62.setBorderWidth(0.01f);
					table1.addCell(cell62);

				}

				if (checkedFields != null && checkedFields.contains("posteriorSegment") || checkedFields == null) {

					PdfPTable tableON3 = new PdfPTable(2);
					tableON3.setWidthPercentage(100);
					tableON3.setWidths(new int[] { 1, 2 });

					/*
					 * for Associated Disease
					 */
					PdfPCell cell59 = new PdfPCell(new Paragraph("Posterior Segment", Font4));
					cell59.setBorderWidth(0.01f);
					cell59.setPaddingBottom(5);
					cell59.setPaddingTop(20);
					cell59.setRowspan(3);
					cell59.setBorderWidthTop(0.0f);
					cell59.setBorderColorTop(BaseColor.BLACK);
					cell59.setBorderWidthBottom(0.0f);
					// cell59.setBorderColorBottom(BaseColor.BLACK);
					// cell59.setBorderWidthBottom(1f);

					PdfPCell cell23 = new PdfPCell(new Paragraph("Disc", mainContent));
					cell23.setBorderWidth(0.01f);
					cell23.setPaddingBottom(2);
					cell23.setBorderWidthTop(0.0f);
					cell23.setHorizontalAlignment(Element.ALIGN_RIGHT);
					cell23.setBorderColorTop(BaseColor.BLACK);
					cell23.setBorderColor(BaseColor.BLACK);

					PdfPCell cell26 = new PdfPCell(new Paragraph("Vessel", mainContent));
					cell26.setBorderWidth(0.01f);
					cell26.setPaddingBottom(2);
					cell26.setHorizontalAlignment(Element.ALIGN_RIGHT);
					cell26.setBorderColor(BaseColor.BLACK);

					PdfPCell cell27 = new PdfPCell(new Paragraph("Macula", mainContent));
					cell27.setBorderWidth(0.01f);
					cell27.setPaddingBottom(2);
					cell27.setHorizontalAlignment(Element.ALIGN_RIGHT);
					cell27.setBorderColor(BaseColor.BLACK);

					tableON3.addCell(cell59);
					tableON3.addCell(cell23);
					tableON3.addCell(cell26);
					tableON3.addCell(cell27);

					PdfPCell cell60 = new PdfPCell(tableON3);
					cell60.setBorderWidth(0.01f);
					cell60.setBorderWidthBottom(0.0f);
					cell60.setBorderColorBottom(BaseColor.WHITE);
					// cell60.setBorderColorTop(BaseColor.BLACK);
//					/cell60.setBorderColor(BaseColor.WHITE);

					table1.addCell(cell60);
				}

				if (checkedFields != null && checkedFields.contains("posteriorSegment") || checkedFields == null) {

					/* To add image with text next to it, we need to use PdfPTable */

					PdfPTable tableOD4 = new PdfPTable(2);
					tableOD4.setWidthPercentage(100);
					tableOD4.setWidths(new int[] { 1, 2 });

					/*
					 * Adding image and text in new table and then adding that table into Posterior
					 * Segment cell in order to get both image and text for OD
					 */

					PdfPCell imageCellOD = new PdfPCell(image1, true);
					imageCellOD.setRowspan(3);
					imageCellOD.setBorderColor(BaseColor.BLACK);

					tableOD4.addCell(imageCellOD);

					if (!(resultSet3.getString("discOD").isEmpty())) {
						PdfPCell cell46 = new PdfPCell(new Paragraph(resultSet3.getString("discOD"), mainContent));
						cell46.setBorderWidth(0.01f);
						cell46.setPaddingBottom(2);
						cell46.setBorderWidthTop(0.0f);
						cell46.setBorderColorTop(BaseColor.WHITE);
						cell46.setBorderColor(BaseColor.BLACK);

						tableOD4.addCell(cell46);
					} else {
						PdfPCell cell46 = new PdfPCell(new Paragraph(" ", mainContent));
						cell46.setBorderWidth(0.01f);
						cell46.setPaddingBottom(2);
						cell46.setBorderWidthTop(0.0f);
						cell46.setBorderColorTop(BaseColor.WHITE);
						cell46.setBorderColor(BaseColor.BLACK);

						tableOD4.addCell(cell46);
					}

					if (!(resultSet3.getString("vesselOD").isEmpty())) {
						PdfPCell cell47 = new PdfPCell(new Paragraph(resultSet3.getString("vesselOD"), mainContent));
						cell47.setBorderWidth(0.01f);
						cell47.setPaddingBottom(2);
						cell47.setBorderColor(BaseColor.BLACK);

						tableOD4.addCell(cell47);
					} else {
						PdfPCell cell47 = new PdfPCell(new Paragraph(" ", mainContent));
						cell47.setBorderWidth(0.01f);
						cell47.setPaddingBottom(2);
						cell47.setBorderColor(BaseColor.BLACK);

						tableOD4.addCell(cell47);
					}

					if (!(resultSet3.getString("maculaOD").isEmpty())) {
						PdfPCell cell48 = new PdfPCell(new Paragraph(resultSet3.getString("maculaOD"), mainContent));
						cell48.setBorderWidth(0.01f);
						cell48.setPaddingBottom(2);
						cell48.setBorderColor(BaseColor.BLACK);

						tableOD4.addCell(cell48);
					} else {
						PdfPCell cell48 = new PdfPCell(new Paragraph(" ", mainContent));
						cell48.setBorderWidth(0.01f);
						cell48.setPaddingBottom(2);
						cell48.setBorderColor(BaseColor.BLACK);

						tableOD4.addCell(cell48);
					}

					PdfPCell cell60 = new PdfPCell(tableOD4);
					cell60.setBorderWidth(0.01f);

					table1.addCell(cell60);
				}

				if (checkedFields != null && checkedFields.contains("posteriorSegment") || checkedFields == null) {

					/* To add image with text next to it, we need to use PdfPTable */

					PdfPTable tableOS5 = new PdfPTable(2);
					tableOS5.setWidthPercentage(100);
					tableOS5.setWidths(new int[] { 1, 2 });

					/*
					 * Adding image and text in new table and then adding that table into Posterior
					 * Segment cell in order to get both image and text for OD
					 */

					PdfPCell imageCellOS = new PdfPCell(image2, true);
					imageCellOS.setRowspan(3);
					imageCellOS.setBorderColor(BaseColor.BLACK);

					tableOS5.addCell(imageCellOS);

					if (!(resultSet3.getString("discOS").isEmpty())) {
						PdfPCell cell46 = new PdfPCell(new Paragraph(resultSet3.getString("discOS"), mainContent));
						cell46.setBorderWidth(0.01f);
						cell46.setPaddingBottom(2);
						cell46.setBorderWidthTop(0.0f);
						cell46.setBorderColor(BaseColor.BLACK);

						tableOS5.addCell(cell46);
					} else {
						PdfPCell cell46 = new PdfPCell(new Paragraph(" ", mainContent));
						cell46.setBorderWidth(0.01f);
						cell46.setPaddingBottom(2);
						cell46.setBorderWidthTop(0.0f);
						cell46.setBorderColor(BaseColor.BLACK);

						tableOS5.addCell(cell46);
					}

					if (!(resultSet3.getString("vesselOS").isEmpty())) {
						PdfPCell cell47 = new PdfPCell(new Paragraph(resultSet3.getString("vesselOS"), mainContent));
						cell47.setBorderWidth(0.01f);
						cell47.setPaddingBottom(2);
						cell47.setBorderColor(BaseColor.BLACK);

						tableOS5.addCell(cell47);
					} else {

						PdfPCell cell47 = new PdfPCell(new Paragraph(" ", mainContent));
						cell47.setBorderWidth(0.01f);
						cell47.setPaddingBottom(2);
						cell47.setBorderColor(BaseColor.BLACK);

						tableOS5.addCell(cell47);
					}

					if (!(resultSet3.getString("maculaOS").isEmpty())) {
						PdfPCell cell48 = new PdfPCell(new Paragraph(resultSet3.getString("maculaOS"), mainContent));
						cell48.setBorderWidth(0.01f);
						cell48.setPaddingBottom(2);
						cell48.setBorderColor(BaseColor.BLACK);

						tableOS5.addCell(cell48);
					} else {
						PdfPCell cell48 = new PdfPCell(new Paragraph(" ", mainContent));
						cell48.setBorderWidth(0.01f);
						cell48.setPaddingBottom(2);
						cell48.setBorderColor(BaseColor.BLACK);

						tableOS5.addCell(cell48);
					}

					PdfPCell cell60 = new PdfPCell(tableOS5);
					cell60.setBorderWidth(0.01f);

					table1.addCell(cell60);
				}

				if (checkedFields != null && checkedFields.contains("posteriorSegment") || checkedFields == null) {
					PdfPTable tableON4 = new PdfPTable(2);
					tableON4.setWidthPercentage(100);
					tableON4.setWidths(new int[] { 1, 2 });

					PdfPCell cell59 = new PdfPCell(new Paragraph(" ", Font4));
					cell59.setBorderWidth(0.01f);
					cell59.setPaddingBottom(2);
					cell59.setBorderColor(BaseColor.BLACK);
					cell59.setBorderWidthTop(0.0f);
					cell59.setBorderColorTop(BaseColor.WHITE);
					cell59.setBorderColorBottom(BaseColor.BLACK);
					cell59.setBorderWidthBottom(1f);

					PdfPCell cell28 = new PdfPCell(new Paragraph("Posterior Comment", mainContent));
					cell28.setBorderWidth(0.01f);
					cell28.setPaddingBottom(2);
					cell28.setHorizontalAlignment(Element.ALIGN_RIGHT);
					cell28.setBorderColor(BaseColor.BLACK);
					cell28.setBorderColorBottom(BaseColor.BLACK);
					cell28.setBorderWidthBottom(1f);

					tableON4.addCell(cell59);
					tableON4.addCell(cell28);

					PdfPCell cell60 = new PdfPCell(tableON4);
					cell60.setBorderWidth(0.01f);
					cell60.setRowspan(1);
					cell60.setBorderColor(BaseColor.WHITE);

					table1.addCell(cell60);
				}

				if (checkedFields != null && checkedFields.contains("posteriorSegment") || checkedFields == null) {
					PdfPTable tableOD5 = new PdfPTable(1);
					tableOD5.setWidthPercentage(100);
					tableOD5.setWidths(new int[] { 1 });

					if (!(resultSet3.getString("posteriorComment").isEmpty())) {
						PdfPCell cell17 = new PdfPCell(
								new Paragraph(resultSet3.getString("posteriorComment"), mainContent));
						cell17.setBorderWidth(0.01f);
						cell17.setColspan(2);
						cell17.setPaddingBottom(2);
						cell17.setBorderColor(BaseColor.BLACK);
						cell17.setBorderWidthLeft(0.0f);
						cell17.setBorderWidthTop(0.0f);
						cell17.setBorderColorBottom(BaseColor.BLACK);
						cell17.setBorderWidthBottom(1f);

						tableOD5.addCell(cell17);
					} else {
						PdfPCell cell17 = new PdfPCell(new Paragraph(" ", mainContent));
						cell17.setBorderWidth(0.01f);
						cell17.setColspan(2);
						cell17.setPaddingBottom(2);
						cell17.setBorderColor(BaseColor.BLACK);
						cell17.setBorderWidthLeft(0.0f);
						cell17.setBorderWidthTop(0.0f);
						cell17.setBorderColorBottom(BaseColor.BLACK);
						cell17.setBorderWidthBottom(1f);

						tableOD5.addCell(cell17);
					}

					PdfPCell cell60 = new PdfPCell(tableOD5);
					cell60.setBorderWidth(0.01f);
					cell60.setColspan(2);

					table1.addCell(cell60);
				}

				if (checkedFields != null && checkedFields.contains("iopSac&Bio") || checkedFields == null) {
					/*
					 * for Associated Disease
					 */
					PdfPCell cell62 = new PdfPCell(new Paragraph("I.O.P", Font4));
					cell62.setBorderWidth(0.01f);
					cell62.setPaddingBottom(2);
					cell62.setPaddingTop(5);
					cell62.setHorizontalAlignment(Element.ALIGN_RIGHT);
					cell62.setBorderColor(BaseColor.BLACK);

					table1.addCell(cell62);

					if (!(resultSet3.getString("iopOD").isEmpty())) {
						/*
						 * for ClinVar URL
						 */
						PdfPCell cell63 = new PdfPCell(new Paragraph(resultSet3.getString("iopOD"), mainContent));
						cell63.setBorderWidth(0.01f);
						cell63.setPaddingBottom(2);
						cell63.setPaddingTop(5);
						cell63.setBorderColor(BaseColor.BLACK);

						table1.addCell(cell63);
					} else {
						/*
						 * for ClinVar URL
						 */
						PdfPCell cell63 = new PdfPCell(new Paragraph(" ", mainContent));
						cell63.setBorderWidth(0.01f);
						cell63.setPaddingBottom(2);
						cell63.setPaddingTop(5);
						cell63.setBorderColor(BaseColor.BLACK);

						table1.addCell(cell63);
					}

					if (!(resultSet3.getString("iopOS").isEmpty())) {
						/*
						 * for RSIDs
						 */
						PdfPCell cell64 = new PdfPCell(new Paragraph(resultSet3.getString("iopOS"), mainContent));
						cell64.setBorderWidth(0.01f);
						cell64.setPaddingBottom(2);
						cell64.setPaddingTop(5);
						cell64.setBorderColor(BaseColor.BLACK);

						table1.addCell(cell64);
					} else {
						/*
						 * for RSIDs
						 */
						PdfPCell cell64 = new PdfPCell(new Paragraph(" ", mainContent));
						cell64.setBorderWidth(0.01f);
						cell64.setPaddingBottom(2);
						cell64.setPaddingTop(5);
						cell64.setBorderColor(BaseColor.BLACK);

						table1.addCell(cell64);
					}

					PdfPCell cell22 = new PdfPCell(new Paragraph("", mainContent));
					cell22.setBorderWidth(0.01f);
					cell22.setPaddingBottom(2);
					cell22.setBorderColor(BaseColor.BLACK);

				}

				if (checkedFields != null && checkedFields.contains("iopSac&Bio") || checkedFields == null) {
					/*
					 * for Associated Disease
					 */
					PdfPCell cell65 = new PdfPCell(new Paragraph("Sac", Font4));
					cell65.setBorderWidth(0.01f);
					cell65.setPaddingBottom(2);
					cell65.setPaddingTop(5);
					// cell65.setBorderWidthBottom(0.0f);
					cell65.setHorizontalAlignment(Element.ALIGN_RIGHT);
					cell65.setBorderColor(BaseColor.BLACK);
					cell65.setBorderColorBottom(BaseColor.LIGHT_GRAY);
					cell65.setBorderColorBottom(BaseColor.BLACK);
					cell65.setBorderWidthBottom(1f);

					table1.addCell(cell65);

					if (!(resultSet3.getString("sacOD").isEmpty())) {
						/*
						 * for ClinVar URL
						 */
						PdfPCell cell66 = new PdfPCell(new Paragraph(resultSet3.getString("sacOD"), mainContent));
						cell66.setBorderWidth(0.01f);
						cell66.setPaddingBottom(2);
						cell66.setPaddingTop(5);
						// cell66.setBorderWidthBottom(0.0f);
						cell66.setBorderColor(BaseColor.BLACK);
						// cell66.setBorderColorBottom(BaseColor.WHITE);
						cell66.setBorderColorBottom(BaseColor.BLACK);
						cell66.setBorderWidthBottom(1f);

						table1.addCell(cell66);
					} else {
						/*
						 * for ClinVar URL
						 */
						PdfPCell cell66 = new PdfPCell(new Paragraph(" ", mainContent));
						cell66.setBorderWidth(0.01f);
						cell66.setPaddingBottom(2);
						cell66.setPaddingTop(5);
						// cell66.setBorderWidthBottom(0.0f);
						cell66.setBorderColor(BaseColor.BLACK);
						// cell66.setBorderColorBottom(BaseColor.WHITE);
						cell66.setBorderColorBottom(BaseColor.BLACK);
						cell66.setBorderWidthBottom(1f);

						table1.addCell(cell66);
					}

					if (!(resultSet3.getString("sacOS").isEmpty())) {
						/*
						 * for RSIDs
						 */
						PdfPCell cell67 = new PdfPCell(new Paragraph(resultSet3.getString("sacOS"), mainContent));
						cell67.setBorderWidth(0.01f);
						cell67.setPaddingBottom(2);
						cell67.setPaddingTop(5);
						// cell67.setBorderWidthBottom(0.0f);
						cell67.setBorderColor(BaseColor.BLACK);
						// cell67.setBorderColorBottom(BaseColor.WHITE);
						cell67.setBorderColorBottom(BaseColor.BLACK);
						cell67.setBorderWidthBottom(1f);

						table1.addCell(cell67);
					} else {
						/*
						 * for RSIDs
						 */
						PdfPCell cell67 = new PdfPCell(new Paragraph(" ", mainContent));
						cell67.setBorderWidth(0.01f);
						cell67.setPaddingBottom(2);
						cell67.setPaddingTop(5);
						// cell67.setBorderWidthBottom(0.0f);
						cell67.setBorderColor(BaseColor.BLACK);
						// cell67.setBorderColorBottom(BaseColor.WHITE);
						cell67.setBorderColorBottom(BaseColor.BLACK);
						cell67.setBorderWidthBottom(1f);

						table1.addCell(cell67);
					}

				}

				if (checkedFields != null && checkedFields.contains("iopSac&Bio") || checkedFields == null) {

					PdfPTable tableON4 = new PdfPTable(2);
					tableON4.setWidthPercentage(100);
					tableON4.setWidths(new int[] { 1, 2 });

					/*
					 * for Associated Disease
					 */
					PdfPCell cell68 = new PdfPCell(new Paragraph("Biometry", Font4));
					cell68.setBorderWidth(0.01f);
					cell68.setPaddingBottom(2);
					cell68.setPaddingTop(5);
					cell68.setRowspan(3);
					cell68.setBorderWidthTop(0f);
					cell68.setBorderWidthBottom(0f);
					cell68.setBorderColor(BaseColor.BLACK);
					cell68.setBorderColorBottom(BaseColor.BLACK);
					cell68.setBorderWidthBottom(1f);

					/*
					 * for ClinVar URL
					 */
					PdfPCell cell69 = new PdfPCell(new Paragraph("K1", mainContent));
					cell69.setBorderWidth(0.01f);
					cell69.setPaddingBottom(2);
					cell69.setBorderWidthTop(0.0f);
					cell69.setHorizontalAlignment(Element.ALIGN_RIGHT);
					cell69.setBorderColor(BaseColor.BLACK);

					/*
					 * for RSIDs
					 */
					PdfPCell cell70 = new PdfPCell(new Paragraph("K2", mainContent));
					cell70.setBorderWidth(0.01f);
					cell70.setPaddingBottom(2);
					cell70.setBorderWidthBottom(0.0f);
					cell70.setHorizontalAlignment(Element.ALIGN_RIGHT);
					cell70.setBorderColor(BaseColor.BLACK);
					cell70.setBorderColorBottom(BaseColor.BLACK);
					cell70.setBorderWidthBottom(1f);

					tableON4.addCell(cell68);
					tableON4.addCell(cell69);
					tableON4.addCell(cell70);

					PdfPCell cell60 = new PdfPCell(tableON4);
					cell60.setBorderWidth(0.01f);
					table1.addCell(cell60);
				}

				if (checkedFields != null && checkedFields.contains("iopSac&Bio") || checkedFields == null) {

					PdfPTable tableOD6 = new PdfPTable(1);
					tableOD6.setWidthPercentage(100);
					tableOD6.setWidths(new int[] { 1 });

					if (!(resultSet3.getString("biometryK1OD").isEmpty())) {
						/*
						 * for ClinVar URL
						 */
						PdfPCell cell72 = new PdfPCell(
								new Paragraph(resultSet3.getString("biometryK1OD"), mainContent));
						cell72.setBorderWidth(0.01f);
						cell72.setPaddingBottom(2);
						cell72.setBorderWidthTop(0.0f);
						cell72.setBorderColor(BaseColor.BLACK);

						tableOD6.addCell(cell72);
					} else {
						/*
						 * for ClinVar URL
						 */
						PdfPCell cell72 = new PdfPCell(new Paragraph(" ", mainContent));
						cell72.setBorderWidth(0.01f);
						cell72.setPaddingBottom(2);
						cell72.setBorderWidthTop(0.0f);
						cell72.setBorderColor(BaseColor.BLACK);

						tableOD6.addCell(cell72);
					}

					if (!(resultSet3.getString("biometryK2OD").isEmpty())) {
						PdfPCell cell74 = new PdfPCell(
								new Paragraph(resultSet3.getString("biometryK2OD"), mainContent));
						cell74.setBorderWidth(0.01f);
						cell74.setPaddingBottom(2);
						cell74.setBorderWidthBottom(0.0f);
						cell74.setBorderColor(BaseColor.BLACK);
						cell74.setBorderColorBottom(BaseColor.BLACK);
						cell74.setBorderWidthBottom(1f);

						tableOD6.addCell(cell74);
					} else {
						PdfPCell cell74 = new PdfPCell(new Paragraph(" ", mainContent));
						cell74.setBorderWidth(0.01f);
						cell74.setPaddingBottom(2);
						cell74.setBorderWidthBottom(0.0f);
						cell74.setBorderColor(BaseColor.BLACK);
						cell74.setBorderColorBottom(BaseColor.BLACK);
						cell74.setBorderWidthBottom(1f);

						tableOD6.addCell(cell74);
					}

					PdfPCell cell60 = new PdfPCell(tableOD6);
					cell60.setBorderWidth(0.01f);
					table1.addCell(cell60);
				}

				if (checkedFields != null && checkedFields.contains("iopSac&Bio") || checkedFields == null) {

					PdfPTable tableOS6 = new PdfPTable(1);
					tableOS6.setWidthPercentage(100);
					tableOS6.setWidths(new int[] { 1 });

					if (!(resultSet3.getString("biometryK1OS").isEmpty())) {
						/*
						 * for RSIDs
						 */
						PdfPCell cell73 = new PdfPCell(
								new Paragraph(resultSet3.getString("biometryK1OS"), mainContent));
						cell73.setBorderWidth(0.01f);
						cell73.setPaddingBottom(2);
						cell73.setBorderWidthTop(0.0f);
						cell73.setBorderColor(BaseColor.BLACK);

						tableOS6.addCell(cell73);
					} else {
						/*
						 * for RSIDs
						 */
						PdfPCell cell73 = new PdfPCell(new Paragraph(" ", mainContent));
						cell73.setBorderWidth(0.01f);
						cell73.setPaddingBottom(2);
						cell73.setBorderWidthTop(0.0f);
						cell73.setBorderColor(BaseColor.BLACK);

						tableOS6.addCell(cell73);
					}

					if (!(resultSet3.getString("biometryK2OS").isEmpty())) {
						/*
						 * for RSIDs
						 */
						PdfPCell cell76 = new PdfPCell(
								new Paragraph(resultSet3.getString("biometryK2OS"), mainContent));
						cell76.setBorderWidth(0.01f);
						cell76.setPaddingBottom(2);
						cell76.setBorderWidthBottom(0.0f);
						cell76.setBorderColor(BaseColor.BLACK);
						cell76.setBorderColorBottom(BaseColor.BLACK);
						cell76.setBorderWidthBottom(1f);

						tableOS6.addCell(cell76);
					} else {
						/*
						 * for RSIDs
						 */
						PdfPCell cell76 = new PdfPCell(new Paragraph(" ", mainContent));
						cell76.setBorderWidth(0.01f);
						cell76.setPaddingBottom(2);
						cell76.setBorderWidthBottom(0.0f);
						cell76.setBorderColor(BaseColor.BLACK);
						cell76.setBorderColorBottom(BaseColor.BLACK);
						cell76.setBorderWidthBottom(1f);

						tableOS6.addCell(cell76);
					}

					PdfPCell cell60 = new PdfPCell(tableOS6);
					cell60.setBorderWidth(0.01f);
					table1.addCell(cell60);
				}

				if (checkedFields != null && checkedFields.contains("iopSac&Bio") || checkedFields == null) {
					/*
					 * for Associated Disease
					 */
					PdfPCell cell77 = new PdfPCell(new Paragraph("Axial Length", Font4));
					cell77.setBorderWidth(0.01f);
					cell77.setPaddingBottom(2);
					cell77.setBorderWidthBottom(0.01f);
					cell77.setHorizontalAlignment(Element.ALIGN_RIGHT);
					cell77.setBorderColor(BaseColor.BLACK);

					table1.addCell(cell77);

					if (!(resultSet3.getString("biometryAxialLengthOD").isEmpty())) {
						/*
						 * for ClinVar URL
						 */
						PdfPCell cell78 = new PdfPCell(
								new Paragraph(resultSet3.getString("biometryAxialLengthOD"), mainContent));
						cell78.setBorderWidth(0.01f);
						cell78.setPaddingBottom(2);
						cell78.setBorderWidthBottom(0.01f);
						cell78.setBorderColor(BaseColor.BLACK);

						table1.addCell(cell78);
					} else {
						/*
						 * for ClinVar URL
						 */
						PdfPCell cell78 = new PdfPCell(new Paragraph(" ", mainContent));
						cell78.setBorderWidth(0.01f);
						cell78.setPaddingBottom(2);
						cell78.setBorderWidthBottom(0.01f);
						cell78.setBorderColor(BaseColor.BLACK);

						table1.addCell(cell78);
					}

					if (!(resultSet3.getString("biometryAxialLengthOS").isEmpty())) {
						/*
						 * for RSIDs
						 */
						PdfPCell cell79 = new PdfPCell(
								new Paragraph(resultSet3.getString("biometryAxialLengthOS"), mainContent));
						cell79.setBorderWidth(0.01f);
						cell79.setPaddingBottom(2);
						cell79.setBorderWidthBottom(0.01f);
						cell79.setBorderColor(BaseColor.BLACK);

						table1.addCell(cell79);
					} else {
						/*
						 * for RSIDs
						 */
						PdfPCell cell79 = new PdfPCell(new Paragraph(" ", mainContent));
						cell79.setBorderWidth(0.01f);
						cell79.setPaddingBottom(2);
						cell79.setBorderWidthBottom(0.01f);
						cell79.setBorderColor(BaseColor.BLACK);

						table1.addCell(cell79);
					}

				}

				if (checkedFields != null && checkedFields.contains("iopSac&Bio") || checkedFields == null) {
					/*
					 * for Associated Disease
					 */
					PdfPCell cell80 = new PdfPCell(new Paragraph("IOL", Font4));
					cell80.setBorderWidth(0.01f);
					cell80.setPaddingBottom(2);
					cell80.setBorderWidthTop(0.0f);
					cell80.setHorizontalAlignment(Element.ALIGN_RIGHT);
					cell80.setBorderColor(BaseColor.BLACK);
					cell80.setBorderColorBottom(BaseColor.BLACK);
					cell80.setBorderWidthBottom(1f);

					table1.addCell(cell80);

					if (!(resultSet3.getString("biometryIOLOD").isEmpty())) {
						/*
						 * for ClinVar URL
						 */
						PdfPCell cell81 = new PdfPCell(
								new Paragraph(resultSet3.getString("biometryIOLOD"), mainContent));
						cell81.setBorderWidth(0.01f);
						cell81.setPaddingBottom(2);
						cell81.setBorderWidthTop(0.0f);
						cell81.setBorderColor(BaseColor.BLACK);
						cell81.setBorderColorBottom(BaseColor.BLACK);
						cell81.setBorderWidthBottom(1f);

						table1.addCell(cell81);
					} else {
						/*
						 * for ClinVar URL
						 */
						PdfPCell cell81 = new PdfPCell(new Paragraph(" ", mainContent));
						cell81.setBorderWidth(0.01f);
						cell81.setPaddingBottom(2);
						cell81.setBorderWidthTop(0.0f);
						cell81.setBorderColor(BaseColor.BLACK);
						cell81.setBorderColorBottom(BaseColor.BLACK);
						cell81.setBorderWidthBottom(1f);

						table1.addCell(cell81);
					}

					if (!(resultSet3.getString("biometryIOLOS").isEmpty())) {
						/*
						 * for RSID
						 */
						PdfPCell cell82 = new PdfPCell(
								new Paragraph(resultSet3.getString("biometryIOLOS"), mainContent));
						cell82.setBorderWidth(0.01f);
						cell82.setPaddingBottom(2);
						cell82.setBorderWidthTop(0.0f);
						cell82.setBorderColor(BaseColor.BLACK);
						cell82.setBorderColorBottom(BaseColor.BLACK);
						cell82.setBorderWidthBottom(1f);

						table1.addCell(cell82);
					} else {
						/*
						 * for RSID
						 */
						PdfPCell cell82 = new PdfPCell(new Paragraph(" ", mainContent));
						cell82.setBorderWidth(0.01f);
						cell82.setPaddingBottom(2);
						cell82.setBorderWidthTop(0.0f);
						cell82.setBorderColor(BaseColor.BLACK);
						cell82.setBorderColorBottom(BaseColor.BLACK);
						cell82.setBorderWidthBottom(1f);

						table1.addCell(cell82);
					}
				}

				// if (!(resultSet3.getString("biometryComment")).isEmpty()) {

				if (checkedFields != null && checkedFields.contains("additionalComments") || checkedFields == null) {

					PdfPCell cell16 = new PdfPCell(new Paragraph("Additional Comments", Font4));
					cell16.setBorderWidth(0.01f);
					cell16.setPaddingBottom(5);
					cell16.setBorderWidthLeft(0.2f);
					cell16.setBorderColor(BaseColor.BLACK);
					cell16.setHorizontalAlignment(Element.ALIGN_RIGHT);
					cell16.setBorderColorBottom(BaseColor.BLACK);

					table1.addCell(cell16);

					PdfPCell cell17 = new PdfPCell(new Paragraph(resultSet3.getString("biometryComment"), mainContent));
					cell17.setBorderWidth(0.01f);
					cell17.setColspan(2);
					cell17.setPaddingBottom(2);
					cell17.setBorderColor(BaseColor.BLACK);
					cell17.setBorderWidthLeft(0.0f);
					cell16.setBorderColorTop(BaseColor.BLACK);
					cell16.setBorderWidthTop(1f);

					table1.addCell(cell17);
				}
				// }

				document.add(table1);
			}

			/*
			 * For signature in footer
			 */
			PdfPTable table = new PdfPTable(1);
			table.setTotalWidth(350);

			PdfPCell cell1111 = new PdfPCell(new Paragraph("Signature", mainContent1));
			// cell1111.setBackgroundColor(BaseColor.BLACK);
			cell1111.setHorizontalAlignment(Element.ALIGN_RIGHT);
			cell1111.setPaddingTop(20);
			cell1111.setBorderColor(BaseColor.WHITE);
			table.addCell(cell1111);

			FooterTable event = new FooterTable(table);
			writer.setPageEvent(event);

			document.close();

			System.out.println("Successfully written and generated PDF Report");

			status = "success";

			/*
			 * Closing resultSet, preparedStatement, connection objects
			 */
			resultSet3.close();
			preparedStatement3.close();

			resultSet2.close();
			preparedStatement2.close();

			resultSet1.close();
			preparedStatement1.close();

			connection.close();

		} catch (

		Exception exception) {
			exception.printStackTrace();
			status = "error";
		}
		return status;
	}

	/**
	 * 
	 * @param patientID
	 * @param visitID
	 * @param opticianID
	 * @param realPath
	 * @param pdfFIleName
	 * @return
	 */
	public String convertOpticianPDF(int patientID, int visitID, int opticianID, int lastVisitID, String userType,
			String realPath, String pdfFIleName, AmazonS3 s3, String s3reportFilePath, String bucketName) {

		String visitDate = null;
		String tint = null;
		String glass = null;
		String material = null;
		String clinic = null;
		String frame = null;
		double frameCharge = 0D;
		double glassCharge = 0D;
		double total = 0D;
		double discount = 0D;
		double netPay = 0D;
		double advance = 0D;
		double balance = 0D;
		double balancePaid = 0D;
		String balancePaidDate = null;

		String status = null;

		ConfigurationUtil configXMLUtil = new ConfigurationUtil();

		try {
			connection = getConnection();

			/*
			 * Generate the queries to fetch details
			 */
			String fetchDetailQuery1 = QueryMaker.OPD_PDF_RETRIEVE_PATIENT;

			preparedStatement1 = connection.prepareStatement(fetchDetailQuery1);
			preparedStatement1.setInt(1, patientID);
			resultSet1 = preparedStatement1.executeQuery();

			/*
			 * To fetch visitDate from Visit Table
			 */
			String fetchDetailQuery5 = QueryMaker.OPD_PDF_RETRIEVE_VISIT;

			preparedStatement4 = connection.prepareStatement(fetchDetailQuery5);
			preparedStatement4.setInt(1, visitID);

			resultSet4 = preparedStatement4.executeQuery();

			// To fetch visit details from Visit Table
			while (resultSet4.next()) {
				visitDate = resultSet4.getString("visitDate");
				/*
				 * diagnosis = resultSet2.getString("diagnosis"); comment =
				 * resultSet2.getString("visitNote"); visitType =
				 * resultSet2.getString("visitType");
				 */
			}

			resultSet4.close();
			preparedStatement4.close();

			/*
			 * Generating query 2
			 */
			String fetchDetailQuery2 = QueryMaker.OPTICIAN_PDF_RETRIEVE_OLD_OPTICIAN;

			preparedStatement2 = connection.prepareStatement(fetchDetailQuery2);
			preparedStatement2.setInt(1, opticianID);

			resultSet2 = preparedStatement2.executeQuery();

			preparedStatement4 = connection.prepareStatement(fetchDetailQuery2);
			preparedStatement4.setInt(1, opticianID);

			resultSet4 = preparedStatement4.executeQuery();

			ResultSetMetaData oldglassesMetaData = resultSet2.getMetaData();

			// getting total no of columns
			int oldGlassesCount = oldglassesMetaData.getColumnCount();

			/*
			 * Generating query for CycloplegicRefraction
			 */
			String CycloplegicRefractionQuery = QueryMaker.RETRIEVE_CYCLOPLEGIC_REFRACTION_DETAILS_BY_VISIT_ID;

			preparedStatement5 = connection.prepareStatement(CycloplegicRefractionQuery);
			preparedStatement5.setInt(1, visitID);

			resultSet5 = preparedStatement5.executeQuery();

			preparedStatement6 = connection.prepareStatement(CycloplegicRefractionQuery);
			preparedStatement6.setInt(1, visitID);

			resultSet6 = preparedStatement6.executeQuery();

			preparedStatement7 = connection.prepareStatement(CycloplegicRefractionQuery);
			preparedStatement7.setInt(1, visitID);

			resultSet7 = preparedStatement7.executeQuery();

			String cycloplegicRefraction = "";

			while (resultSet7.next()) {
				cycloplegicRefraction = resultSet7.getString("cycloplegicRefractionData");
			}

			/*
			 * Generate the query 3
			 */
			String fetchDetailQuery3 = QueryMaker.OPTICIAN_PDF_RETRIEVE_NEW_OPTICIAN;

			preparedStatement3 = connection.prepareStatement(fetchDetailQuery3);
			preparedStatement3.setInt(1, opticianID);
			resultSet3 = preparedStatement3.executeQuery();

			/*
			 * Generate the query 4
			 */
			String fetchDetailQuery4 = QueryMaker.OPTICIAN_PDF_RETRIEVE_EYEWEAR;
			preparedStatement = connection.prepareStatement(fetchDetailQuery4);
			preparedStatement.setInt(1, opticianID);
			resultSet = preparedStatement.executeQuery();

			while (resultSet.next()) {
				tint = resultSet.getString("tint");
				glass = resultSet.getString("glass");
				material = resultSet.getString("material");
				clinic = resultSet.getString("clinic");
				frame = resultSet.getString("frame");
				balancePaidDate = resultSet.getString("balPaidDate");
				frameCharge = resultSet.getDouble("frameCharges");
				glassCharge = resultSet.getDouble("glassCharges");
				discount = resultSet.getDouble("discount");
				advance = resultSet.getDouble("advance");
				netPay = resultSet.getDouble("netPayment");
				balance = resultSet.getDouble("balance");
				balancePaid = resultSet.getDouble("balPaid");
				total = frameCharge + glassCharge;
			}

			/*
			 * Getting image path from XML
			 */
			String A5ImagePath = configXMLUtil.getLetterHeadImage();

			/*
			 * Getting page size from XMl
			 */
			String pageSize = configXMLUtil.getPageSize();

			/*
			 * Setting path to store PDF file
			 */
			File file = new File(realPath + "/" + pdfFIleName);
			/*
			 * Creating Document for PDF
			 */
			Document document = null;

			/*
			 * Checking whether pageSize tag in XMl contains A5 or A4, according to that
			 * setting PDF page size
			 */
			if (pageSize.equals("A5")) {
				document = new Document(PageSize.A5);
			} else if (pageSize.equals("A4")) {
				document = new Document(PageSize.A4);
			}

			PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(file));

			Font Font1 = new Font(Font.FontFamily.TIMES_ROMAN, 10, Font.NORMAL);
			Font Font3 = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.NORMAL);
			Font Font2 = new Font(Font.FontFamily.TIMES_ROMAN, 8, Font.NORMAL);
			Font Font4 = new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.BOLD);
			Font Font5 = new Font(Font.FontFamily.TIMES_ROMAN, 10, Font.BOLD);
			Font mainContent = new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.NORMAL);
			Font mainContent1 = new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.NORMAL);
			mainContent1.setColor(BaseColor.GRAY);

			document.open();

			/*
			 * Adding image
			 */
			PdfContentByte canvas = writer.getDirectContentUnder();

			Image image;

			if (pageSize.equals("A5")) {
				if (A5ImagePath == null || A5ImagePath == "") {

					image = null;

				} else {

					if (A5ImagePath.isEmpty()) {
						image = null;
					} else {

						S3ObjectInputStream s3ObjectInputStream = s3
								.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, A5ImagePath))
								.getObjectContent();

						IOUtils.copy(s3ObjectInputStream,
								new FileOutputStream(new File(realPath + "images/" + A5ImagePath)));

						image = Image.getInstance(realPath + "images/" + A5ImagePath);

						image.scaleToFit(PageSize.A5.getWidth(), PageSize.A5.getHeight());
						image.setAbsolutePosition(0, 0);

						canvas.saveState();
						PdfGState state = new PdfGState();
						canvas.setGState(state);
						canvas.addImage(image);
						canvas.restoreState();
					}

				}
			} else if (pageSize.equals("A4")) {
				if (A5ImagePath == null || A5ImagePath == "") {

					image = null;

				} else {

					if (A5ImagePath.isEmpty()) {
						image = null;
					} else {

						S3ObjectInputStream s3ObjectInputStream = s3
								.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, A5ImagePath))
								.getObjectContent();

						IOUtils.copy(s3ObjectInputStream,
								new FileOutputStream(new File(realPath + "images/" + A5ImagePath)));

						image = Image.getInstance(realPath + "images/" + A5ImagePath);

						image.scaleToFit(PageSize.A4.getWidth(), PageSize.A4.getHeight());
						image.setAbsolutePosition(0, 0);

						canvas.saveState();
						PdfGState state = new PdfGState();
						canvas.setGState(state);
						canvas.addImage(image);
						canvas.restoreState();
					}

				}
			}

			/*
			 * Setting header
			 */
			document.addCreator("eDhanvantari");
			document.addTitle("OPD Optician");

			/*
			 * For displaying patient personal details
			 */
			while (resultSet1.next()) {
				PdfPTable table = new PdfPTable(4);

				table.setFooterRows(1);
				table.setWidthPercentage(100);
				Rectangle rect = new Rectangle(270, 700);
				table.setWidthPercentage(new float[] { 75, 75, 75, 75 }, rect);

				PdfPCell cell = new PdfPCell(new Paragraph("Patient Details", Font5));
				cell.setPaddingTop(120);
				cell.setPaddingBottom(10);
				cell.setHorizontalAlignment(Element.ALIGN_CENTER);
				cell.setUseBorderPadding(true);
				cell.setColspan(4);
				cell.setBorderWidthBottom(1f);
				cell.setBorderColorBottom(BaseColor.DARK_GRAY);
				cell.setBorderColor(BaseColor.WHITE);

				/*
				 * For Patient Name
				 */
				PdfPCell cell2 = new PdfPCell(new Paragraph("Patient Name", mainContent));
				cell2.setBorderWidth(0.01f);
				cell2.setPaddingBottom(5);
				cell2.setBorderWidthLeft(0.2f);
				cell2.setBorderColor(BaseColor.WHITE);

				String fullName = resultSet1.getString("firstName") + " " + resultSet1.getString("middleName") + " "
						+ resultSet1.getString("lastName") + " (" + resultSet1.getInt("id") + ")";

				PdfPCell cell3 = new PdfPCell(new Paragraph(fullName, mainContent));
				cell3.setBorderWidth(0.2f);
				cell3.setPaddingBottom(5);
				cell3.setBorderColor(BaseColor.WHITE);

				/*
				 * For Date
				 */

				PdfPCell cell4 = new PdfPCell(new Paragraph("Date", mainContent));
				cell4.setBorderWidth(0.01f);
				cell4.setPaddingBottom(5);
				cell4.setBorderWidthLeft(0.2f);
				cell4.setBorderColor(BaseColor.WHITE);

				PdfPCell cell5 = new PdfPCell(new Paragraph(visitDate, mainContent));
				cell5.setBorderWidth(0.2f);
				cell5.setPaddingBottom(5);
				cell5.setBorderColor(BaseColor.WHITE);

				/*
				 * For Age
				 */
				PdfPCell cell6 = new PdfPCell(new Paragraph("Mobile", mainContent));
				cell6.setBorderWidth(0.01f);
				cell6.setPaddingBottom(5);
				cell6.setBorderWidthLeft(0.2f);
				cell6.setBorderColor(BaseColor.WHITE);

				PdfPCell cell7 = new PdfPCell(new Paragraph(resultSet1.getString("mobile"), mainContent));
				cell7.setBorderWidth(0.2f);
				cell7.setPaddingBottom(5);
				cell7.setBorderColor(BaseColor.WHITE);

				/*
				 * For Age
				 */
				PdfPCell cell8 = new PdfPCell(new Paragraph("", mainContent));
				cell8.setBorderWidth(0.01f);
				cell8.setPaddingBottom(5);
				cell8.setBorderWidthLeft(0.2f);
				cell8.setBorderColor(BaseColor.WHITE);

				PdfPCell cell9 = new PdfPCell(new Paragraph("", mainContent));
				cell9.setBorderWidth(0.2f);
				cell9.setPaddingBottom(5);
				cell9.setBorderColor(BaseColor.WHITE);

				/*
				 * adding all cell to the table to create tabular structure
				 */

				table.addCell(cell);
				// table.addCell(cell1);
				table.addCell(cell2);
				table.addCell(cell3);
				table.addCell(cell4);
				table.addCell(cell5);
				table.addCell(cell6);
				table.addCell(cell7);
				table.addCell(cell8);
				table.addCell(cell9);

				document.add(table);
			}

			if (resultSet2.last()) {

				/*
				 * for optician old frame
				 */
				PdfPTable table2 = new PdfPTable(9);
				table2.setWidthPercentage(100);
				Rectangle rect = new Rectangle(270, 700);
				table2.setWidthPercentage(new float[] { 30, 30, 30, 30, 30, 30, 30, 30, 30 }, rect);

				/*
				 * Creating Table header
				 */

				// For blank space
				PdfPCell cell = new PdfPCell(new Paragraph(
						"                                                                                               "
								+ "                                                                                                                            "
								+ "                                                                                                                              ",
						Font2));
				cell.setColspan(9);
				cell.setBorderWidthRight(0f);
				cell.setBorderWidthLeft(0f);
				cell.setBorderWidthTop(0f);
				cell.setBorderWidthBottom(0f);
				cell.setBorderColorTop(BaseColor.WHITE);

				// for Title
				PdfPCell cell0 = new PdfPCell(new Paragraph("Old Glasses", Font5));
				cell0.setPaddingTop(15);
				cell0.setPaddingBottom(10);
				cell0.setHorizontalAlignment(Element.ALIGN_LEFT);
				cell0.setUseBorderPadding(true);
				cell0.setColspan(9);
				cell0.setBorderWidthRight(0.1f);
				cell0.setBorderWidthLeft(0.1f);
				cell0.setBorderWidthTop(0.1f);
				cell0.setBorderWidthBottom(1f);
				cell0.setBorderColor(BaseColor.WHITE);

				// Gene
				PdfPCell cell1 = new PdfPCell(new Paragraph("", mainContent));

				cell1.setBorderWidth(0.01f);
				cell1.setPaddingBottom(5);
				cell1.setPaddingTop(5);
				cell1.setBorderColor(BaseColor.LIGHT_GRAY);

				// OD RE
				PdfPCell cell2 = new PdfPCell(new Paragraph("RE", mainContent));

				cell2.setBorderWidth(0.01f);
				cell2.setHorizontalAlignment(Element.ALIGN_CENTER);
				cell2.setUseBorderPadding(true);
				cell2.setColspan(4);
				cell2.setPaddingBottom(5);
				cell2.setPaddingTop(5);
				cell2.setBorderColor(BaseColor.LIGHT_GRAY);

				PdfPCell cell3 = new PdfPCell(new Paragraph("LE", mainContent));

				cell3.setBorderWidth(0.01f);
				cell3.setHorizontalAlignment(Element.ALIGN_CENTER);
				cell3.setUseBorderPadding(true);
				cell3.setColspan(4);
				cell3.setPaddingBottom(5);
				cell3.setPaddingTop(5);
				cell3.setBorderColor(BaseColor.LIGHT_GRAY);

				PdfPCell cell4 = new PdfPCell(new Paragraph("", mainContent));

				cell4.setBorderWidth(0.01f);
				cell4.setPaddingBottom(5);
				cell4.setPaddingTop(5);
				cell4.setBorderColor(BaseColor.LIGHT_GRAY);

				PdfPCell cell5 = new PdfPCell(new Paragraph("SPH", mainContent));

				cell5.setBorderWidth(0.01f);
				cell5.setPaddingBottom(5);
				cell5.setPaddingTop(5);
				cell5.setBorderColor(BaseColor.LIGHT_GRAY);

				PdfPCell cell6 = new PdfPCell(new Paragraph("CYL", mainContent));

				cell6.setBorderWidth(0.01f);
				cell6.setPaddingBottom(5);
				cell6.setPaddingTop(5);
				cell6.setBorderColor(BaseColor.LIGHT_GRAY);

				PdfPCell cell7 = new PdfPCell(new Paragraph("Axis", mainContent));

				cell7.setBorderWidth(0.01f);
				cell7.setPaddingBottom(5);
				cell7.setPaddingTop(5);
				cell7.setBorderColor(BaseColor.LIGHT_GRAY);

				PdfPCell cell8 = new PdfPCell(new Paragraph("Vn", mainContent));

				cell8.setBorderWidth(0.01f);
				cell8.setPaddingBottom(5);
				cell8.setPaddingTop(5);
				cell8.setBorderColor(BaseColor.LIGHT_GRAY);

				PdfPCell cell9 = new PdfPCell(new Paragraph("SPH", mainContent));

				cell9.setBorderWidth(0.01f);
				cell9.setPaddingBottom(5);
				cell9.setPaddingTop(5);
				cell9.setBorderColor(BaseColor.LIGHT_GRAY);

				PdfPCell cell10 = new PdfPCell(new Paragraph("CYL", mainContent));

				cell10.setBorderWidth(0.01f);
				cell10.setPaddingBottom(5);
				cell10.setPaddingTop(5);
				cell10.setBorderColor(BaseColor.LIGHT_GRAY);

				PdfPCell cell11 = new PdfPCell(new Paragraph("Axis", mainContent));

				cell11.setBorderWidth(0.01f);
				cell11.setPaddingBottom(5);
				cell11.setPaddingTop(5);
				cell11.setBorderColor(BaseColor.LIGHT_GRAY);

				PdfPCell cell12 = new PdfPCell(new Paragraph("Vn", mainContent));

				cell12.setBorderWidth(0.01f);
				cell12.setPaddingBottom(5);
				cell12.setPaddingTop(5);
				cell12.setBorderColor(BaseColor.LIGHT_GRAY);

				table2.addCell(cell);
				table2.addCell(cell0);
				table2.addCell(cell1);
				table2.addCell(cell2);
				table2.addCell(cell3);
				table2.addCell(cell4);
				table2.addCell(cell5);
				table2.addCell(cell6);
				table2.addCell(cell7);
				table2.addCell(cell8);
				table2.addCell(cell9);
				table2.addCell(cell10);
				table2.addCell(cell11);
				table2.addCell(cell12);

				while (resultSet4.next()) {

					/*
					 * for Gene
					 */
					PdfPCell cell20 = new PdfPCell(new Paragraph("Dist", mainContent));
					cell20.setBorderWidth(0.2f);
					cell20.setPaddingBottom(2);
					cell20.setPaddingTop(5);
					cell20.setBorderColor(BaseColor.LIGHT_GRAY);

					/*
					 * for Variant Impact
					 */
					PdfPCell cell21 = new PdfPCell(new Paragraph(resultSet4.getString("sphDistOD"), mainContent));
					cell21.setBorderWidth(0.2f);
					cell21.setPaddingBottom(2);
					cell21.setBorderColor(BaseColor.LIGHT_GRAY);

					/*
					 * for Variant Impact
					 */
					PdfPCell cell22 = new PdfPCell(new Paragraph(resultSet4.getString("cylDistOD"), mainContent));
					cell22.setBorderWidth(0.2f);
					cell22.setPaddingBottom(2);
					cell22.setBorderColor(BaseColor.LIGHT_GRAY);

					table2.addCell(cell20);
					table2.addCell(cell21);
					table2.addCell(cell22);

					PdfPCell cell23 = new PdfPCell(new Paragraph(resultSet4.getString("axisDistOD"), mainContent));
					cell23.setBorderWidth(0.2f);
					cell23.setPaddingBottom(2);
					cell23.setBorderColor(BaseColor.LIGHT_GRAY);

					table2.addCell(cell23);

					/*
					 * for Variant Impact
					 */
					PdfPCell cell24 = new PdfPCell(new Paragraph(resultSet4.getString("vnDistOD"), mainContent));
					cell24.setBorderWidth(0.2f);
					cell24.setPaddingBottom(2);
					cell24.setBorderColor(BaseColor.LIGHT_GRAY);

					/*
					 * for Variant Impact
					 */
					PdfPCell cell25 = new PdfPCell(new Paragraph(resultSet4.getString("sphDistOS"), mainContent));
					cell25.setBorderWidth(0.2f);
					cell25.setPaddingBottom(2);
					cell25.setBorderColor(BaseColor.LIGHT_GRAY);

					/*
					 * for Variant Impact
					 */
					PdfPCell cell26 = new PdfPCell(new Paragraph(resultSet4.getString("cylDistOS"), mainContent));
					cell26.setBorderWidth(0.2f);
					cell26.setPaddingBottom(2);
					cell26.setBorderColor(BaseColor.LIGHT_GRAY);

					table2.addCell(cell24);
					table2.addCell(cell25);
					table2.addCell(cell26);

					PdfPCell cell27 = new PdfPCell(new Paragraph(resultSet4.getString("axisDistOS"), mainContent));
					cell27.setBorderWidth(0.2f);
					cell27.setPaddingBottom(2);
					cell27.setBorderColor(BaseColor.LIGHT_GRAY);

					table2.addCell(cell27);

					/*
					 * for Variant Impact
					 */
					PdfPCell cell28 = new PdfPCell(new Paragraph(resultSet4.getString("vnDistOS"), mainContent));
					cell28.setBorderWidth(0.2f);
					cell28.setPaddingBottom(2);
					cell28.setBorderColor(BaseColor.LIGHT_GRAY);

					/*
					 * for Gene
					 */
					PdfPCell cell29 = new PdfPCell(new Paragraph("Near", mainContent));
					cell29.setBorderWidth(0.2f);
					cell29.setPaddingBottom(2);
					cell29.setPaddingTop(5);
					cell29.setBorderColor(BaseColor.LIGHT_GRAY);

					table2.addCell(cell28);
					table2.addCell(cell29);

					if (resultSet4.getString("sphDistOD").equals("--")
							&& resultSet4.getString("sphNearOD").equals("--")) {
						String NearDist = "--";

						PdfPCell cell30 = new PdfPCell(new Paragraph("" + NearDist, mainContent));
						cell30.setBorderWidth(0.2f);
						cell30.setPaddingBottom(2);
						cell30.setBorderColor(BaseColor.LIGHT_GRAY);

						table2.addCell(cell30);
					} else if (!resultSet4.getString("sphDistOD").equals("--")
							&& !resultSet4.getString("sphNearOD").equals("--")) {

						double NearDist = 0;
						NearDist = (Double.parseDouble(resultSet4.getString("sphDistOD"))
								+ Double.parseDouble(resultSet4.getString("sphNearOD")));

						PdfPCell cell30 = new PdfPCell(new Paragraph("" + NearDist, mainContent));
						cell30.setBorderWidth(0.2f);
						cell30.setPaddingBottom(2);
						cell30.setBorderColor(BaseColor.LIGHT_GRAY);
						table2.addCell(cell30);

					} else {

						PdfPCell cell30 = new PdfPCell(new Paragraph(resultSet4.getString("sphNearOD"), mainContent));
						cell30.setBorderWidth(0.2f);
						cell30.setPaddingBottom(2);
						cell30.setBorderColor(BaseColor.LIGHT_GRAY);
						table2.addCell(cell30);
					}

					/*
					 * for Variant Impact
					 */
					PdfPCell cell31 = new PdfPCell(new Paragraph(resultSet4.getString("cylNearOD"), mainContent));
					cell31.setBorderWidth(0.2f);
					cell31.setPaddingBottom(2);
					cell31.setBorderColor(BaseColor.LIGHT_GRAY);

					table2.addCell(cell31);

					PdfPCell cell32 = new PdfPCell(new Paragraph(resultSet4.getString("axisNearOD"), mainContent));
					cell32.setBorderWidth(0.2f);
					cell32.setPaddingBottom(2);
					cell32.setBorderColor(BaseColor.LIGHT_GRAY);

					table2.addCell(cell32);

					/*
					 * for Variant Impact
					 */
					PdfPCell cell33 = new PdfPCell(new Paragraph(resultSet4.getString("vnNearOD"), mainContent));
					cell33.setBorderWidth(0.2f);
					cell33.setPaddingBottom(2);
					cell33.setBorderColor(BaseColor.LIGHT_GRAY);

					table2.addCell(cell33);

					if (resultSet4.getString("sphDistOS").equals("--")
							&& resultSet4.getString("sphNearOS").equals("--")) {
						String NearDistVal = "--";

						PdfPCell cell34 = new PdfPCell(new Paragraph("" + NearDistVal, mainContent));
						cell34.setBorderWidth(0.2f);
						cell34.setPaddingBottom(2);
						cell34.setBorderColor(BaseColor.LIGHT_GRAY);

						table2.addCell(cell34);
					} else if (!resultSet4.getString("sphDistOS").equals("--")
							&& !resultSet4.getString("sphNearOS").equals("--")) {
						double NearDistVal = 0;

						NearDistVal = (Double.parseDouble(resultSet4.getString("sphDistOS"))
								+ Double.parseDouble(resultSet4.getString("sphNearOS")));

						PdfPCell cell34 = new PdfPCell(new Paragraph("" + NearDistVal, mainContent));
						cell34.setBorderWidth(0.2f);
						cell34.setPaddingBottom(2);
						cell34.setBorderColor(BaseColor.LIGHT_GRAY);

						table2.addCell(cell34);

					} else {

						PdfPCell cell34 = new PdfPCell(new Paragraph(resultSet4.getString("sphNearOS"), mainContent));
						cell34.setBorderWidth(0.2f);
						cell34.setPaddingBottom(2);
						cell34.setBorderColor(BaseColor.LIGHT_GRAY);

						table2.addCell(cell34);
					}
					/*
					 * for Variant Impact
					 */
					PdfPCell cell35 = new PdfPCell(new Paragraph(resultSet4.getString("cylNearOS"), mainContent));
					cell35.setBorderWidth(0.2f);
					cell35.setPaddingBottom(2);
					cell35.setBorderColor(BaseColor.LIGHT_GRAY);

					table2.addCell(cell35);

					PdfPCell cell36 = new PdfPCell(new Paragraph(resultSet4.getString("axisNearOS"), mainContent));
					cell36.setBorderWidth(0.2f);
					cell36.setPaddingBottom(2);
					cell36.setBorderColor(BaseColor.LIGHT_GRAY);

					table2.addCell(cell36);

					/*
					 * for Variant Impact
					 */
					PdfPCell cell37 = new PdfPCell(new Paragraph(resultSet4.getString("vnNearOS"), mainContent));
					cell37.setBorderWidth(0.2f);
					cell37.setPaddingBottom(2);
					cell37.setBorderColor(BaseColor.LIGHT_GRAY);

					table2.addCell(cell37);

				}

				document.add(table2);

			}

			/*
			 * For CycloplegicRefraction
			 */
			if (resultSet5.last()) {

				/*
				 * for CycloplegicRefraction
				 */
				PdfPTable table2 = new PdfPTable(9);
				table2.setWidthPercentage(100);
				Rectangle rect = new Rectangle(270, 700);
				table2.setWidthPercentage(new float[] { 30, 30, 30, 30, 30, 30, 30, 30, 30 }, rect);

				/*
				 * Creating Table header
				 */

				// For blank space
				PdfPCell cell = new PdfPCell(new Paragraph(
						"                                                                                               "
								+ "                                                                                                                            "
								+ "                                                                                                                              ",
						Font2));
				cell.setColspan(9);
				cell.setBorderWidthRight(0f);
				cell.setBorderWidthLeft(0f);
				cell.setBorderWidthTop(0f);
				cell.setBorderWidthBottom(0f);
				cell.setBorderColorTop(BaseColor.WHITE);

				// for Title
				PdfPCell cell0 = new PdfPCell(new Paragraph("Cycloplegic Refraction", Font5));
				cell0.setPaddingTop(15);
				cell0.setPaddingBottom(10);
				cell0.setHorizontalAlignment(Element.ALIGN_LEFT);
				cell0.setUseBorderPadding(true);
				cell0.setColspan(3);
				cell0.setBorderWidthRight(0.1f);
				cell0.setBorderWidthLeft(0.1f);
				cell0.setBorderWidthTop(0.1f);
				cell0.setBorderWidthBottom(1f);
				cell0.setBorderColor(BaseColor.WHITE);

				PdfPCell cell01 = new PdfPCell(new Paragraph(cycloplegicRefraction, mainContent));
				cell01.setPaddingTop(17);
				cell01.setPaddingBottom(10);
				cell01.setHorizontalAlignment(Element.ALIGN_LEFT);
				cell01.setUseBorderPadding(true);
				cell01.setColspan(6);
				cell01.setBorderWidthRight(0.1f);
				cell01.setBorderWidthLeft(0.1f);
				cell01.setBorderWidthTop(0.1f);
				cell01.setBorderWidthBottom(1f);
				cell01.setBorderColor(BaseColor.WHITE);

				// Gene
				PdfPCell cell1 = new PdfPCell(new Paragraph("", mainContent));

				cell1.setBorderWidth(0.01f);
				cell1.setPaddingBottom(5);
				cell1.setPaddingTop(5);
				cell1.setBorderColor(BaseColor.LIGHT_GRAY);

				// OD RE
				PdfPCell cell2 = new PdfPCell(new Paragraph("RE", mainContent));

				cell2.setBorderWidth(0.01f);
				cell2.setHorizontalAlignment(Element.ALIGN_CENTER);
				cell2.setUseBorderPadding(true);
				cell2.setColspan(4);
				cell2.setPaddingBottom(5);
				cell2.setPaddingTop(5);
				cell2.setBorderColor(BaseColor.LIGHT_GRAY);

				PdfPCell cell3 = new PdfPCell(new Paragraph("LE", mainContent));

				cell3.setBorderWidth(0.01f);
				cell3.setHorizontalAlignment(Element.ALIGN_CENTER);
				cell3.setUseBorderPadding(true);
				cell3.setColspan(4);
				cell3.setPaddingBottom(5);
				cell3.setPaddingTop(5);
				cell3.setBorderColor(BaseColor.LIGHT_GRAY);

				PdfPCell cell4 = new PdfPCell(new Paragraph("", mainContent));

				cell4.setBorderWidth(0.01f);
				cell4.setPaddingBottom(5);
				cell4.setPaddingTop(5);
				cell4.setBorderColor(BaseColor.LIGHT_GRAY);

				PdfPCell cell5 = new PdfPCell(new Paragraph("SPH", mainContent));

				cell5.setBorderWidth(0.01f);
				cell5.setPaddingBottom(5);
				cell5.setPaddingTop(5);
				cell5.setBorderColor(BaseColor.LIGHT_GRAY);

				PdfPCell cell6 = new PdfPCell(new Paragraph("CYL", mainContent));

				cell6.setBorderWidth(0.01f);
				cell6.setPaddingBottom(5);
				cell6.setPaddingTop(5);
				cell6.setBorderColor(BaseColor.LIGHT_GRAY);

				PdfPCell cell7 = new PdfPCell(new Paragraph("Axis", mainContent));

				cell7.setBorderWidth(0.01f);
				cell7.setPaddingBottom(5);
				cell7.setPaddingTop(5);
				cell7.setBorderColor(BaseColor.LIGHT_GRAY);

				PdfPCell cell8 = new PdfPCell(new Paragraph("Vn", mainContent));

				cell8.setBorderWidth(0.01f);
				cell8.setPaddingBottom(5);
				cell8.setPaddingTop(5);
				cell8.setBorderColor(BaseColor.LIGHT_GRAY);

				PdfPCell cell9 = new PdfPCell(new Paragraph("SPH", mainContent));

				cell9.setBorderWidth(0.01f);
				cell9.setPaddingBottom(5);
				cell9.setPaddingTop(5);
				cell9.setBorderColor(BaseColor.LIGHT_GRAY);

				PdfPCell cell10 = new PdfPCell(new Paragraph("CYL", mainContent));

				cell10.setBorderWidth(0.01f);
				cell10.setPaddingBottom(5);
				cell10.setPaddingTop(5);
				cell10.setBorderColor(BaseColor.LIGHT_GRAY);

				PdfPCell cell11 = new PdfPCell(new Paragraph("Axis", mainContent));

				cell11.setBorderWidth(0.01f);
				cell11.setPaddingBottom(5);
				cell11.setPaddingTop(5);
				cell11.setBorderColor(BaseColor.LIGHT_GRAY);

				PdfPCell cell12 = new PdfPCell(new Paragraph("Vn", mainContent));

				cell12.setBorderWidth(0.01f);
				cell12.setPaddingBottom(5);
				cell12.setPaddingTop(5);
				cell12.setBorderColor(BaseColor.LIGHT_GRAY);

				table2.addCell(cell);
				table2.addCell(cell0);
				table2.addCell(cell01);
				table2.addCell(cell1);
				table2.addCell(cell2);
				table2.addCell(cell3);
				table2.addCell(cell4);
				table2.addCell(cell5);
				table2.addCell(cell6);
				table2.addCell(cell7);
				table2.addCell(cell8);
				table2.addCell(cell9);
				table2.addCell(cell10);
				table2.addCell(cell11);
				table2.addCell(cell12);

				// Image tickImage = Image.getInstance(realPath + "/images/tick_check.png");

				while (resultSet6.next()) {
					/*
					 * for Gene
					 */
					PdfPCell cell20 = new PdfPCell(new Paragraph("Dist", mainContent));
					cell20.setBorderWidth(0.2f);
					cell20.setPaddingBottom(2);
					cell20.setPaddingTop(5);
					cell20.setBorderColor(BaseColor.LIGHT_GRAY);

					/*
					 * for Variant Impact
					 */
					PdfPCell cell21 = new PdfPCell(new Paragraph(resultSet6.getString("distCTCOD"), mainContent));
					cell21.setBorderWidth(0.2f);
					cell21.setPaddingBottom(2);
					cell21.setBorderColor(BaseColor.LIGHT_GRAY);

					/*
					 * for Variant Impact
					 */
					PdfPCell cell22 = new PdfPCell(new Paragraph(resultSet6.getString("distHTCOD"), mainContent));
					cell22.setBorderWidth(0.2f);
					cell22.setPaddingBottom(2);
					cell22.setBorderColor(BaseColor.LIGHT_GRAY);

					table2.addCell(cell20);
					table2.addCell(cell21);
					table2.addCell(cell22);

					PdfPCell cell23 = new PdfPCell(new Paragraph(resultSet6.getString("distAtropineOD"), mainContent));
					cell23.setBorderWidth(0.2f);
					cell23.setPaddingBottom(2);
					cell23.setBorderColor(BaseColor.LIGHT_GRAY);

					table2.addCell(cell23);

					/*
					 * for Variant Impact
					 */
					PdfPCell cell24 = new PdfPCell(new Paragraph(resultSet6.getString("distTPlusOD"), mainContent));
					cell24.setBorderWidth(0.2f);
					cell24.setPaddingBottom(2);
					cell24.setBorderColor(BaseColor.LIGHT_GRAY);

					/*
					 * for Variant Impact
					 */
					PdfPCell cell25 = new PdfPCell(new Paragraph(resultSet6.getString("distCTCOS"), mainContent));
					cell25.setBorderWidth(0.2f);
					cell25.setPaddingBottom(2);
					cell25.setBorderColor(BaseColor.LIGHT_GRAY);

					/*
					 * for Variant Impact
					 */
					PdfPCell cell26 = new PdfPCell(new Paragraph(resultSet6.getString("distHTCOS"), mainContent));
					cell26.setBorderWidth(0.2f);
					cell26.setPaddingBottom(2);
					cell26.setBorderColor(BaseColor.LIGHT_GRAY);

					table2.addCell(cell24);
					table2.addCell(cell25);
					table2.addCell(cell26);

					PdfPCell cell27 = new PdfPCell(new Paragraph(resultSet6.getString("distAtropineOS"), mainContent));
					cell27.setBorderWidth(0.2f);
					cell27.setPaddingBottom(2);
					cell27.setBorderColor(BaseColor.LIGHT_GRAY);

					table2.addCell(cell27);

					/*
					 * for Variant Impact
					 */
					PdfPCell cell28 = new PdfPCell(new Paragraph(resultSet6.getString("distTPlusOS"), mainContent));
					cell28.setBorderWidth(0.2f);
					cell28.setPaddingBottom(2);
					cell28.setBorderColor(BaseColor.LIGHT_GRAY);

					/*
					 * for Gene
					 */
					PdfPCell cell29 = new PdfPCell(new Paragraph("Near", mainContent));
					cell29.setBorderWidth(0.2f);
					cell29.setPaddingBottom(2);
					cell29.setPaddingTop(5);
					cell29.setBorderColor(BaseColor.LIGHT_GRAY);

					table2.addCell(cell28);
					table2.addCell(cell29);

					if (resultSet6.getString("distCTCOD").equals("--")
							&& resultSet6.getString("nearCTCOD").equals("--")) {
						String NearDist = "--";

						PdfPCell cell30 = new PdfPCell(new Paragraph("" + NearDist, mainContent));
						cell30.setBorderWidth(0.2f);
						cell30.setPaddingBottom(2);
						cell30.setBorderColor(BaseColor.LIGHT_GRAY);

						table2.addCell(cell30);
					} else if (!resultSet6.getString("distCTCOD").equals("--")
							&& !resultSet6.getString("nearCTCOD").equals("--")) {

						double NearDist = 0;
						NearDist = (Double.parseDouble(resultSet6.getString("distCTCOD"))
								+ Double.parseDouble(resultSet6.getString("nearCTCOD")));

						PdfPCell cell30 = new PdfPCell(new Paragraph("" + NearDist, mainContent));
						cell30.setBorderWidth(0.2f);
						cell30.setPaddingBottom(2);
						cell30.setBorderColor(BaseColor.LIGHT_GRAY);
						table2.addCell(cell30);

					} else {

						PdfPCell cell30 = new PdfPCell(new Paragraph(resultSet6.getString("nearCTCOD"), mainContent));
						cell30.setBorderWidth(0.2f);
						cell30.setPaddingBottom(2);
						cell30.setBorderColor(BaseColor.LIGHT_GRAY);
						table2.addCell(cell30);
					}

					/*
					 * for Variant Impact
					 */
					PdfPCell cell31 = new PdfPCell(new Paragraph(resultSet6.getString("nearHTCOD"), mainContent));
					cell31.setBorderWidth(0.2f);
					cell31.setPaddingBottom(2);
					cell31.setBorderColor(BaseColor.LIGHT_GRAY);

					table2.addCell(cell31);

					PdfPCell cell32 = new PdfPCell(new Paragraph(resultSet6.getString("nearAtropineOD"), mainContent));
					cell32.setBorderWidth(0.2f);
					cell32.setPaddingBottom(2);
					cell32.setBorderColor(BaseColor.LIGHT_GRAY);

					table2.addCell(cell32);

					/*
					 * for Variant Impact
					 */
					PdfPCell cell33 = new PdfPCell(new Paragraph(resultSet6.getString("nearTPlusOD"), mainContent));
					cell33.setBorderWidth(0.2f);
					cell33.setPaddingBottom(2);
					cell33.setBorderColor(BaseColor.LIGHT_GRAY);

					table2.addCell(cell33);

					if (resultSet6.getString("distCTCOS").equals("--")
							&& resultSet6.getString("nearCTCOS").equals("--")) {
						String NearDistVal = "--";

						PdfPCell cell34 = new PdfPCell(new Paragraph("" + NearDistVal, mainContent));
						cell34.setBorderWidth(0.2f);
						cell34.setPaddingBottom(2);
						cell34.setBorderColor(BaseColor.LIGHT_GRAY);

						table2.addCell(cell34);
					} else if (!resultSet6.getString("distCTCOS").equals("--")
							&& !resultSet6.getString("nearCTCOS").equals("--")) {
						double NearDistVal = 0;

						NearDistVal = (Double.parseDouble(resultSet6.getString("distCTCOS"))
								+ Double.parseDouble(resultSet6.getString("nearCTCOS")));

						PdfPCell cell34 = new PdfPCell(new Paragraph("" + NearDistVal, mainContent));
						cell34.setBorderWidth(0.2f);
						cell34.setPaddingBottom(2);
						cell34.setBorderColor(BaseColor.LIGHT_GRAY);

						table2.addCell(cell34);

					} else {

						PdfPCell cell34 = new PdfPCell(new Paragraph(resultSet6.getString("nearCTCOS"), mainContent));
						cell34.setBorderWidth(0.2f);
						cell34.setPaddingBottom(2);
						cell34.setBorderColor(BaseColor.LIGHT_GRAY);

						table2.addCell(cell34);
					}
					/*
					 * for Variant Impact
					 */
					PdfPCell cell35 = new PdfPCell(new Paragraph(resultSet6.getString("nearHTCOS"), mainContent));
					cell35.setBorderWidth(0.2f);
					cell35.setPaddingBottom(2);
					cell35.setBorderColor(BaseColor.LIGHT_GRAY);

					table2.addCell(cell35);

					PdfPCell cell36 = new PdfPCell(new Paragraph(resultSet6.getString("nearAtropineOS"), mainContent));
					cell36.setBorderWidth(0.2f);
					cell36.setPaddingBottom(2);
					cell36.setBorderColor(BaseColor.LIGHT_GRAY);

					table2.addCell(cell36);

					/*
					 * for Variant Impact
					 */
					PdfPCell cell37 = new PdfPCell(new Paragraph(resultSet6.getString("nearTPlusOS"), mainContent));
					cell37.setBorderWidth(0.2f);
					cell37.setPaddingBottom(2);
					cell37.setBorderColor(BaseColor.LIGHT_GRAY);

					table2.addCell(cell37);

				}

				document.add(table2);

			}
			/*
			 * CycloplegicRefraction End
			 */

			/*
			 * for Optician New Frame
			 */
			PdfPTable table3 = new PdfPTable(9);
			table3.setWidthPercentage(100);
			Rectangle rect2 = new Rectangle(270, 700);
			table3.setWidthPercentage(new float[] { 30, 30, 30, 30, 30, 30, 30, 30, 30 }, rect2);

			/*
			 * Creating Table header
			 */

			// For blank space
			PdfPCell cell13 = new PdfPCell(new Paragraph(
					"                                                                                               "
							+ "                                                                                                                            "
							+ "                                                                                                                              ",
					Font2));
			cell13.setColspan(9);
			cell13.setBorderWidthRight(0f);
			cell13.setBorderWidthLeft(0f);
			cell13.setBorderWidthTop(0f);
			cell13.setBorderWidthBottom(0f);
			cell13.setBorderColorTop(BaseColor.WHITE);

			// for Title
			PdfPCell cell14 = new PdfPCell(new Paragraph("New Glasses", Font5));
			cell14.setPaddingTop(15);
			cell14.setPaddingBottom(10);
			cell14.setHorizontalAlignment(Element.ALIGN_LEFT);
			cell14.setUseBorderPadding(true);
			cell14.setColspan(9);
			cell14.setBorderWidthRight(0.1f);
			cell14.setBorderWidthLeft(0.1f);
			cell14.setBorderWidthTop(0.1f);
			cell14.setBorderWidthBottom(1f);
			cell14.setBorderColor(BaseColor.WHITE);

			// Gene
			PdfPCell cell15 = new PdfPCell(new Paragraph("", mainContent));

			cell15.setBorderWidth(0.01f);
			cell15.setPaddingBottom(5);
			cell15.setPaddingTop(5);
			cell15.setBorderColor(BaseColor.LIGHT_GRAY);

			// OD RE
			PdfPCell cell16 = new PdfPCell(new Paragraph("RE", mainContent));

			cell16.setBorderWidth(0.01f);
			cell16.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell16.setUseBorderPadding(true);
			cell16.setColspan(4);
			cell16.setPaddingBottom(5);
			cell16.setPaddingTop(5);
			cell16.setBorderColor(BaseColor.LIGHT_GRAY);

			PdfPCell cell17 = new PdfPCell(new Paragraph("LE", mainContent));

			cell17.setBorderWidth(0.01f);
			cell17.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell17.setUseBorderPadding(true);
			cell17.setColspan(4);
			cell17.setPaddingBottom(5);
			cell17.setPaddingTop(5);
			cell17.setBorderColor(BaseColor.LIGHT_GRAY);

			PdfPCell cell18 = new PdfPCell(new Paragraph("", mainContent));

			cell18.setBorderWidth(0.01f);
			cell18.setPaddingBottom(5);
			cell18.setPaddingTop(5);
			cell18.setBorderColor(BaseColor.LIGHT_GRAY);

			PdfPCell cell19 = new PdfPCell(new Paragraph("SPH", mainContent));

			cell19.setBorderWidth(0.01f);
			cell19.setPaddingBottom(5);
			cell19.setPaddingTop(5);
			cell19.setBorderColor(BaseColor.LIGHT_GRAY);

			PdfPCell cell40 = new PdfPCell(new Paragraph("CYL", mainContent));

			cell40.setBorderWidth(0.01f);
			cell40.setPaddingBottom(5);
			cell40.setPaddingTop(5);
			cell40.setBorderColor(BaseColor.LIGHT_GRAY);

			PdfPCell cell41 = new PdfPCell(new Paragraph("Axis", mainContent));

			cell41.setBorderWidth(0.01f);
			cell41.setPaddingBottom(5);
			cell41.setPaddingTop(5);
			cell41.setBorderColor(BaseColor.LIGHT_GRAY);

			PdfPCell cell42 = new PdfPCell(new Paragraph("Vn", mainContent));

			cell42.setBorderWidth(0.01f);
			cell42.setPaddingBottom(5);
			cell42.setPaddingTop(5);
			cell42.setBorderColor(BaseColor.LIGHT_GRAY);

			PdfPCell cell43 = new PdfPCell(new Paragraph("SPH", mainContent));

			cell43.setBorderWidth(0.01f);
			cell43.setPaddingBottom(5);
			cell43.setPaddingTop(5);
			cell43.setBorderColor(BaseColor.LIGHT_GRAY);

			PdfPCell cell44 = new PdfPCell(new Paragraph("CYL", mainContent));

			cell44.setBorderWidth(0.01f);
			cell44.setPaddingBottom(5);
			cell44.setPaddingTop(5);
			cell44.setBorderColor(BaseColor.LIGHT_GRAY);

			PdfPCell cell45 = new PdfPCell(new Paragraph("Axis", mainContent));

			cell45.setBorderWidth(0.01f);
			cell45.setPaddingBottom(5);
			cell45.setPaddingTop(5);
			cell45.setBorderColor(BaseColor.LIGHT_GRAY);

			PdfPCell cell46 = new PdfPCell(new Paragraph("Vn", mainContent));

			cell46.setBorderWidth(0.01f);
			cell46.setPaddingBottom(5);
			cell46.setPaddingTop(5);
			cell46.setBorderColor(BaseColor.LIGHT_GRAY);

			table3.addCell(cell13);
			table3.addCell(cell14);
			table3.addCell(cell15);
			table3.addCell(cell16);
			table3.addCell(cell17);
			table3.addCell(cell18);
			table3.addCell(cell19);
			table3.addCell(cell40);
			table3.addCell(cell41);
			table3.addCell(cell42);
			table3.addCell(cell43);
			table3.addCell(cell44);
			table3.addCell(cell45);
			table3.addCell(cell46);

			String comments = "";

			String spectacleComments = "";

			while (resultSet3.next()) {

				/*
				 * for Gene
				 */
				PdfPCell cell20 = new PdfPCell(new Paragraph("Dist", mainContent));
				cell20.setBorderWidth(0.2f);
				cell20.setPaddingBottom(2);
				cell20.setPaddingTop(5);
				cell20.setBorderColor(BaseColor.LIGHT_GRAY);

				/*
				 * for Variant Impact
				 */
				PdfPCell cell21 = new PdfPCell(new Paragraph(resultSet3.getString("sphDistOD"), mainContent));
				cell21.setBorderWidth(0.2f);
				cell21.setPaddingBottom(2);
				cell21.setBorderColor(BaseColor.LIGHT_GRAY);

				/*
				 * for Variant Impact
				 */
				PdfPCell cell22 = new PdfPCell(new Paragraph(resultSet3.getString("cylDistOD"), mainContent));
				cell22.setBorderWidth(0.2f);
				cell22.setPaddingBottom(2);
				cell22.setBorderColor(BaseColor.LIGHT_GRAY);

				table3.addCell(cell20);
				table3.addCell(cell21);
				table3.addCell(cell22);

				/*
				 * for Variant Impact
				 */

				PdfPCell cell23 = new PdfPCell(new Paragraph(resultSet3.getString("axisDistOD"), mainContent));
				cell23.setBorderWidth(0.2f);
				cell23.setPaddingBottom(2);
				cell23.setBorderColor(BaseColor.LIGHT_GRAY);

				table3.addCell(cell23);

				/*
				 * for Variant Impact
				 */
				PdfPCell cell24 = new PdfPCell(new Paragraph(resultSet3.getString("vnDistOD"), mainContent));
				cell24.setBorderWidth(0.2f);
				cell24.setPaddingBottom(2);
				cell24.setBorderColor(BaseColor.LIGHT_GRAY);

				/*
				 * for Variant Impact
				 */
				PdfPCell cell25 = new PdfPCell(new Paragraph(resultSet3.getString("sphDistOS"), mainContent));
				cell25.setBorderWidth(0.2f);
				cell25.setPaddingBottom(2);
				cell25.setBorderColor(BaseColor.LIGHT_GRAY);

				/*
				 * for Variant Impact
				 */
				PdfPCell cell26 = new PdfPCell(new Paragraph(resultSet3.getString("cylDistOS"), mainContent));
				cell26.setBorderWidth(0.2f);
				cell26.setPaddingBottom(2);
				cell26.setBorderColor(BaseColor.LIGHT_GRAY);

				table3.addCell(cell24);
				table3.addCell(cell25);
				table3.addCell(cell26);

				PdfPCell cell27 = new PdfPCell(new Paragraph(resultSet3.getString("axisDistOS"), mainContent));
				cell27.setBorderWidth(0.2f);
				cell27.setPaddingBottom(2);
				cell27.setBorderColor(BaseColor.LIGHT_GRAY);

				table3.addCell(cell27);

				/*
				 * for Variant Impact
				 */
				PdfPCell cell28 = new PdfPCell(new Paragraph(resultSet3.getString("vnDistOS"), mainContent));
				cell28.setBorderWidth(0.2f);
				cell28.setPaddingBottom(2);
				cell28.setBorderColor(BaseColor.LIGHT_GRAY);

				/*
				 * for Gene
				 */
				PdfPCell cell29 = new PdfPCell(new Paragraph("Near", mainContent));
				cell29.setBorderWidth(0.2f);
				cell29.setPaddingBottom(2);
				cell29.setPaddingTop(5);
				cell29.setBorderColor(BaseColor.LIGHT_GRAY);

				table3.addCell(cell28);
				table3.addCell(cell29);

				if (resultSet3.getString("sphDistOD").equals("--") && resultSet3.getString("sphNearOD").equals("--")) {
					String NearDistVal1 = "--";

					PdfPCell cell30 = new PdfPCell(new Paragraph("" + NearDistVal1, mainContent));
					cell30.setBorderWidth(0.2f);
					cell30.setPaddingBottom(2);
					cell30.setBorderColor(BaseColor.LIGHT_GRAY);

					table3.addCell(cell30);
				} else if (!resultSet3.getString("sphDistOD").equals("--")
						&& !resultSet3.getString("sphNearOD").equals("--")) {

					double NearDistVal1 = 0;

					NearDistVal1 = (Double.parseDouble(resultSet3.getString("sphDistOD"))
							+ Double.parseDouble(resultSet3.getString("sphNearOD")));

					PdfPCell cell30 = new PdfPCell(new Paragraph("" + NearDistVal1, mainContent));
					cell30.setBorderWidth(0.2f);
					cell30.setPaddingBottom(2);
					cell30.setBorderColor(BaseColor.LIGHT_GRAY);

					table3.addCell(cell30);
				} else {

					PdfPCell cell30 = new PdfPCell(new Paragraph(resultSet3.getString("sphNearOD"), mainContent));
					cell30.setBorderWidth(0.2f);
					cell30.setPaddingBottom(2);
					cell30.setBorderColor(BaseColor.LIGHT_GRAY);

					table3.addCell(cell30);
				}

				/*
				 * for Variant Impact
				 */
				PdfPCell cell31 = new PdfPCell(new Paragraph(resultSet3.getString("cylNearOD"), mainContent));
				cell31.setBorderWidth(0.2f);
				cell31.setPaddingBottom(2);
				cell31.setBorderColor(BaseColor.LIGHT_GRAY);

				table3.addCell(cell31);

				PdfPCell cell32 = new PdfPCell(new Paragraph(resultSet3.getString("axisNearOD"), mainContent));
				cell32.setBorderWidth(0.2f);
				cell32.setPaddingBottom(2);
				cell32.setBorderColor(BaseColor.LIGHT_GRAY);

				table3.addCell(cell32);

				/*
				 * for Variant Impact
				 */
				PdfPCell cell33 = new PdfPCell(new Paragraph(resultSet3.getString("vnNearOD"), mainContent));
				cell33.setBorderWidth(0.2f);
				cell33.setPaddingBottom(2);
				cell33.setBorderColor(BaseColor.LIGHT_GRAY);

				table3.addCell(cell33);

				if (resultSet3.getString("sphDistOS").equals("--") && resultSet3.getString("sphNearOS").equals("--")) {
					String NearDist1 = "--";

					PdfPCell cell34 = new PdfPCell(new Paragraph("" + NearDist1, mainContent));
					cell34.setBorderWidth(0.2f);
					cell34.setPaddingBottom(2);
					cell34.setBorderColor(BaseColor.LIGHT_GRAY);

					table3.addCell(cell34);
				} else if (!resultSet3.getString("sphDistOS").equals("--")
						&& !resultSet3.getString("sphNearOS").equals("--")) {

					double NearDist1 = 0;

					NearDist1 = (Double.parseDouble(resultSet3.getString("sphDistOS"))
							+ Double.parseDouble(resultSet3.getString("sphNearOS")));

					/*
					 * for Variant Impact
					 */
					PdfPCell cell34 = new PdfPCell(new Paragraph("" + NearDist1, mainContent));
					cell34.setBorderWidth(0.2f);
					cell34.setPaddingBottom(2);
					cell34.setBorderColor(BaseColor.LIGHT_GRAY);

					table3.addCell(cell34);
				} else {

					PdfPCell cell34 = new PdfPCell(new Paragraph(resultSet3.getString("sphNearOS"), mainContent));
					cell34.setBorderWidth(0.2f);
					cell34.setPaddingBottom(2);
					cell34.setBorderColor(BaseColor.LIGHT_GRAY);

					table3.addCell(cell34);
				}

				/*
				 * for Variant Impact
				 */
				PdfPCell cell35 = new PdfPCell(new Paragraph(resultSet3.getString("cylNearOS"), mainContent));
				cell35.setBorderWidth(0.2f);
				cell35.setPaddingBottom(2);
				cell35.setBorderColor(BaseColor.LIGHT_GRAY);

				table3.addCell(cell35);

				PdfPCell cell36 = new PdfPCell(new Paragraph(resultSet3.getString("axisNearOS"), mainContent));
				cell36.setBorderWidth(0.2f);
				cell36.setPaddingBottom(2);
				cell36.setBorderColor(BaseColor.LIGHT_GRAY);

				table3.addCell(cell36);

				/*
				 * for Variant Impact
				 */
				PdfPCell cell37 = new PdfPCell(new Paragraph(resultSet3.getString("vnNearOS"), mainContent));
				cell37.setBorderWidth(0.2f);
				cell37.setPaddingBottom(2);
				cell37.setBorderColor(BaseColor.LIGHT_GRAY);

				table3.addCell(cell37);

				comments = resultSet3.getString("comments");

				if (comments == null) {
					comments = "";
				}

				spectacleComments = resultSet3.getString("spectacleComments");

				if (spectacleComments == null) {
					spectacleComments = "";
				}

			}

			if (!spectacleComments.isEmpty()) {

				// For Spectacle Comments
				PdfPCell cellSpectacleComment = new PdfPCell(
						new Paragraph("Spectacle Comments: " + spectacleComments, Font5));
				cellSpectacleComment.setPaddingTop(10f);
				cellSpectacleComment.setPaddingBottom(10);
				cellSpectacleComment.setHorizontalAlignment(Element.ALIGN_LEFT);
				cellSpectacleComment.setUseBorderPadding(true);
				cellSpectacleComment.setColspan(9);
				cellSpectacleComment.setBorderWidthRight(0.1f);
				cellSpectacleComment.setBorderWidthLeft(0.1f);
				cellSpectacleComment.setBorderWidthTop(0.1f);
				cellSpectacleComment.setBorderWidthBottom(1f);
				cellSpectacleComment.setBorderColor(BaseColor.WHITE);

				table3.addCell(cellSpectacleComment);

			}

			if (!comments.isEmpty()) {

				// For Comments
				PdfPCell cellComment = new PdfPCell(new Paragraph("Comments: " + comments, Font5));
				cellComment.setPaddingBottom(10);
				cellComment.setHorizontalAlignment(Element.ALIGN_LEFT);
				cellComment.setUseBorderPadding(true);
				cellComment.setColspan(9);
				cellComment.setBorderWidthRight(0.1f);
				cellComment.setBorderWidthLeft(0.1f);
				cellComment.setBorderWidthTop(0.1f);
				cellComment.setBorderWidthBottom(1f);
				cellComment.setBorderColor(BaseColor.WHITE);

				table3.addCell(cellComment);

			}

			document.add(table3);

			if (userType.equals("optician")) {
				document.newPage();

				/*
				 * For Frame Details
				 */
				PdfPTable table4 = new PdfPTable(5);
				table4.setWidthPercentage(100);
				Rectangle rect3 = new Rectangle(270, 700);
				table4.setWidthPercentage(new float[] { 54, 54, 54, 54, 54 }, rect3);

				// for Title
				PdfPCell cell31 = new PdfPCell(new Paragraph("Frame Details", Font5));
				cell31.setPaddingTop(5);
				cell31.setPaddingBottom(10);
				cell31.setHorizontalAlignment(Element.ALIGN_LEFT);
				cell31.setUseBorderPadding(true);
				cell31.setColspan(5);
				cell31.setBorderWidthRight(0.1f);
				cell31.setBorderWidthLeft(0.1f);
				cell31.setBorderWidthTop(0.1f);
				cell31.setBorderWidthBottom(1f);
				cell31.setBorderColor(BaseColor.WHITE);

				// Gene
				PdfPCell cell32 = new PdfPCell(new Paragraph("Tint", mainContent));

				cell32.setBorderWidth(0.01f);
				cell32.setHorizontalAlignment(Element.ALIGN_CENTER);
				cell32.setPaddingBottom(5);
				cell32.setPaddingTop(5);
				cell32.setBorderColor(BaseColor.LIGHT_GRAY);

				// OD RE
				PdfPCell cell33 = new PdfPCell(new Paragraph("Glass", mainContent));

				cell33.setBorderWidth(0.01f);
				cell33.setHorizontalAlignment(Element.ALIGN_CENTER);
				cell33.setPaddingBottom(5);
				cell33.setPaddingTop(5);
				cell33.setBorderColor(BaseColor.LIGHT_GRAY);

				PdfPCell cell34 = new PdfPCell(new Paragraph("Material", mainContent));

				cell34.setBorderWidth(0.01f);
				cell34.setHorizontalAlignment(Element.ALIGN_CENTER);
				cell34.setPaddingBottom(5);
				cell34.setPaddingTop(5);
				cell34.setBorderColor(BaseColor.LIGHT_GRAY);

				PdfPCell cell35 = new PdfPCell(new Paragraph("Clinic", mainContent));

				cell35.setBorderWidth(0.01f);
				cell35.setHorizontalAlignment(Element.ALIGN_CENTER);
				cell35.setPaddingBottom(5);
				cell35.setPaddingTop(5);
				cell35.setBorderColor(BaseColor.LIGHT_GRAY);

				PdfPCell cell36 = new PdfPCell(new Paragraph("Frame", mainContent));

				cell36.setBorderWidth(0.01f);
				cell36.setHorizontalAlignment(Element.ALIGN_CENTER);
				cell36.setPaddingBottom(5);
				cell36.setPaddingTop(5);
				cell36.setBorderColor(BaseColor.LIGHT_GRAY);

				// Gene
				PdfPCell cell37 = new PdfPCell(new Paragraph(tint, mainContent));

				cell37.setBorderWidth(0.01f);
				cell37.setHorizontalAlignment(Element.ALIGN_CENTER);
				cell37.setPaddingBottom(5);
				cell37.setPaddingTop(5);
				cell37.setBorderColor(BaseColor.LIGHT_GRAY);

				// OD RE
				PdfPCell cell38 = new PdfPCell(new Paragraph(glass, mainContent));

				cell38.setBorderWidth(0.01f);
				cell38.setHorizontalAlignment(Element.ALIGN_CENTER);
				cell38.setPaddingBottom(5);
				cell38.setPaddingTop(5);
				cell38.setBorderColor(BaseColor.LIGHT_GRAY);

				PdfPCell cell39 = new PdfPCell(new Paragraph(material, mainContent));

				cell39.setBorderWidth(0.01f);
				cell39.setHorizontalAlignment(Element.ALIGN_CENTER);
				cell39.setPaddingBottom(5);
				cell39.setPaddingTop(5);
				cell39.setBorderColor(BaseColor.LIGHT_GRAY);

				PdfPCell cell50 = new PdfPCell(new Paragraph(clinic, mainContent));

				cell50.setBorderWidth(0.01f);
				cell50.setHorizontalAlignment(Element.ALIGN_CENTER);
				cell50.setPaddingBottom(5);
				cell50.setPaddingTop(5);
				cell50.setBorderColor(BaseColor.LIGHT_GRAY);

				PdfPCell cell51 = new PdfPCell(new Paragraph(frame, mainContent));

				cell51.setBorderWidth(0.01f);
				cell51.setHorizontalAlignment(Element.ALIGN_CENTER);
				cell51.setPaddingBottom(5);
				cell51.setPaddingTop(5);
				cell51.setBorderColor(BaseColor.LIGHT_GRAY);

				table4.addCell(cell31);
				table4.addCell(cell32);
				table4.addCell(cell33);
				table4.addCell(cell34);
				table4.addCell(cell35);
				table4.addCell(cell36);
				table4.addCell(cell37);
				table4.addCell(cell38);
				table4.addCell(cell39);
				table4.addCell(cell50);
				table4.addCell(cell51);

				document.add(table4);

				/*
				 * For Frame charges Details
				 */
				PdfPTable table5 = new PdfPTable(4);
				table5.setWidthPercentage(100);
				Rectangle rect4 = new Rectangle(270, 700);
				table5.setWidthPercentage(new float[] { 75, 75, 75, 75 }, rect4);

				// For blank space
				PdfPCell cell60 = new PdfPCell(new Paragraph(
						"                                                                                               "
								+ "                                                                                                                            "
								+ "                                                                                                                              ",
						Font2));
				cell60.setColspan(4);
				cell60.setBorderWidthRight(0f);
				cell60.setBorderWidthLeft(0f);
				cell60.setBorderWidthTop(0f);
				cell60.setBorderWidthBottom(0f);
				cell60.setBorderColorTop(BaseColor.WHITE);

				// for Title
				PdfPCell cell61 = new PdfPCell(new Paragraph("Frame Charges", Font5));
				cell61.setPaddingTop(5);
				cell61.setPaddingBottom(10);
				cell61.setHorizontalAlignment(Element.ALIGN_LEFT);
				cell61.setUseBorderPadding(true);
				cell61.setColspan(4);
				cell61.setBorderWidthRight(0.1f);
				cell61.setBorderWidthLeft(0.1f);
				cell61.setBorderWidthTop(0.1f);
				cell61.setBorderWidthBottom(1f);
				cell61.setBorderColor(BaseColor.WHITE);

				PdfPCell cell62 = new PdfPCell(new Paragraph("Frame", mainContent));

				cell62.setBorderWidth(0.01f);
				cell62.setPaddingBottom(5);
				cell62.setPaddingTop(5);
				cell62.setBorderColor(BaseColor.LIGHT_GRAY);

				// OD RE
				PdfPCell cell63 = new PdfPCell(new Paragraph(String.valueOf(frameCharge), mainContent));

				cell63.setBorderWidth(0.01f);
				cell63.setPaddingBottom(5);
				cell63.setPaddingTop(5);
				cell63.setBorderColor(BaseColor.LIGHT_GRAY);

				PdfPCell cell64 = new PdfPCell(new Paragraph("", mainContent));

				cell64.setBorderWidth(0.01f);
				cell64.setPaddingBottom(5);
				cell64.setPaddingTop(5);
				cell64.setColspan(2);
				cell64.setBorderColorBottom(BaseColor.WHITE);
				cell64.setBorderColor(BaseColor.LIGHT_GRAY);

				PdfPCell cell65 = new PdfPCell(new Paragraph("Glass", mainContent));

				cell65.setBorderWidth(0.01f);
				cell65.setPaddingBottom(5);
				cell65.setPaddingTop(5);
				cell65.setBorderColor(BaseColor.LIGHT_GRAY);

				// OD RE
				PdfPCell cell66 = new PdfPCell(new Paragraph(String.valueOf(glassCharge), mainContent));

				cell66.setBorderWidth(0.01f);
				cell66.setPaddingBottom(5);
				cell66.setPaddingTop(5);
				cell66.setBorderColor(BaseColor.LIGHT_GRAY);

				PdfPCell cell67 = new PdfPCell(new Paragraph("", mainContent));

				cell67.setBorderWidth(0.01f);
				cell67.setPaddingBottom(5);
				cell67.setPaddingTop(5);
				cell67.setColspan(2);
				cell67.setBorderColorTop(BaseColor.WHITE);
				cell67.setBorderColor(BaseColor.LIGHT_GRAY);

				PdfPCell cell68 = new PdfPCell(new Paragraph("Total", mainContent));

				cell68.setBorderWidth(0.01f);
				cell68.setPaddingBottom(5);
				cell68.setPaddingTop(5);
				cell68.setBorderColor(BaseColor.LIGHT_GRAY);

				// OD RE
				PdfPCell cell69 = new PdfPCell(new Paragraph(String.valueOf(total), mainContent));

				cell69.setBorderWidth(0.01f);
				cell69.setPaddingBottom(5);
				cell69.setPaddingTop(5);
				cell69.setBorderColor(BaseColor.LIGHT_GRAY);

				PdfPCell cell70 = new PdfPCell(new Paragraph("Discount", mainContent));

				cell70.setBorderWidth(0.01f);
				cell70.setPaddingBottom(5);
				cell70.setPaddingTop(5);
				cell70.setBorderColor(BaseColor.LIGHT_GRAY);

				PdfPCell cell71 = new PdfPCell(new Paragraph(String.valueOf(discount), mainContent));

				cell71.setBorderWidth(0.01f);
				cell71.setPaddingBottom(5);
				cell71.setPaddingTop(5);
				cell71.setBorderColor(BaseColor.LIGHT_GRAY);

				PdfPCell cell72 = new PdfPCell(new Paragraph("Ney Payment", mainContent));

				cell72.setBorderWidth(0.01f);
				cell72.setPaddingBottom(5);
				cell72.setPaddingTop(5);
				cell72.setBorderColor(BaseColor.LIGHT_GRAY);

				// OD RE
				PdfPCell cell73 = new PdfPCell(new Paragraph(String.valueOf(netPay), mainContent));

				cell73.setBorderWidth(0.01f);
				cell73.setPaddingBottom(5);
				cell73.setPaddingTop(5);
				cell73.setBorderColor(BaseColor.LIGHT_GRAY);

				PdfPCell cell74 = new PdfPCell(new Paragraph("", mainContent));

				cell74.setBorderWidth(0.01f);
				cell74.setPaddingBottom(5);
				cell74.setPaddingTop(5);
				cell74.setColspan(2);
				cell74.setBorderColor(BaseColor.LIGHT_GRAY);

				PdfPCell cell75 = new PdfPCell(new Paragraph("Advance", mainContent));

				cell75.setBorderWidth(0.01f);
				cell75.setPaddingBottom(5);
				cell75.setPaddingTop(5);
				cell75.setBorderColor(BaseColor.LIGHT_GRAY);

				// OD RE
				PdfPCell cell76 = new PdfPCell(new Paragraph(String.valueOf(advance), mainContent));

				cell76.setBorderWidth(0.01f);
				cell76.setPaddingBottom(5);
				cell76.setPaddingTop(5);
				cell76.setBorderColor(BaseColor.LIGHT_GRAY);

				PdfPCell cell77 = new PdfPCell(new Paragraph("Balance", mainContent));

				cell77.setBorderWidth(0.01f);
				cell77.setPaddingBottom(5);
				cell77.setPaddingTop(5);
				cell77.setBorderColor(BaseColor.LIGHT_GRAY);

				PdfPCell cell78 = new PdfPCell(new Paragraph(String.valueOf(balance), mainContent));

				cell78.setBorderWidth(0.01f);
				cell78.setPaddingBottom(5);
				cell78.setPaddingTop(5);
				cell78.setBorderColor(BaseColor.LIGHT_GRAY);

				PdfPCell cell79 = new PdfPCell(new Paragraph("Balance Paid", mainContent));

				cell79.setBorderWidth(0.01f);
				cell79.setPaddingBottom(5);
				cell79.setPaddingTop(5);
				cell79.setBorderColor(BaseColor.LIGHT_GRAY);

				// OD RE
				PdfPCell cell80 = new PdfPCell(new Paragraph(String.valueOf(balancePaid), mainContent));

				cell80.setBorderWidth(0.01f);
				cell80.setPaddingBottom(5);
				cell80.setPaddingTop(5);
				cell80.setBorderColor(BaseColor.LIGHT_GRAY);

				PdfPCell cell81 = new PdfPCell(new Paragraph("Balance Paid Date", mainContent));

				cell81.setBorderWidth(0.01f);
				cell81.setPaddingBottom(5);
				cell81.setPaddingTop(5);
				cell81.setBorderColor(BaseColor.LIGHT_GRAY);

				PdfPCell cell82 = new PdfPCell(new Paragraph(balancePaidDate, mainContent));

				cell82.setBorderWidth(0.01f);
				cell82.setPaddingBottom(5);
				cell82.setPaddingTop(5);
				cell82.setBorderColor(BaseColor.LIGHT_GRAY);

				table5.addCell(cell60);
				table5.addCell(cell61);
				table5.addCell(cell62);
				table5.addCell(cell63);
				table5.addCell(cell64);
				table5.addCell(cell65);
				table5.addCell(cell66);
				table5.addCell(cell67);
				table5.addCell(cell68);
				table5.addCell(cell69);
				table5.addCell(cell70);
				table5.addCell(cell71);
				table5.addCell(cell72);
				table5.addCell(cell73);
				table5.addCell(cell74);
				table5.addCell(cell75);
				table5.addCell(cell76);
				table5.addCell(cell77);
				table5.addCell(cell78);
				table5.addCell(cell79);
				table5.addCell(cell80);
				table5.addCell(cell81);
				table5.addCell(cell82);

				document.add(table5);
			}

			document.close();

			System.out.println("Successfully written and generated Optician PDF Report");

			status = "success";

			/*
			 * Closing resultSet, preparedStatement, connection objects
			 */
			resultSet3.close();
			preparedStatement3.close();

			resultSet7.close();
			preparedStatement7.close();

			resultSet6.close();
			preparedStatement6.close();

			resultSet5.close();
			preparedStatement5.close();

			preparedStatement4.close();

			resultSet4.close();
			resultSet2.close();
			preparedStatement2.close();

			resultSet1.close();
			preparedStatement1.close();

			connection.close();

		} catch (Exception exception) {
			exception.printStackTrace();
			status = "error";
		}
		return status;

	}

	/**
	 * 
	 * @param medicalCertificateText
	 * @param visitID
	 * @return
	 */
	public String convertMedicalCertificatePDF(String medicalCertificateText, String pdfFileName, String realPath,
			AmazonS3 s3, String s3reportFilePath, String bucketName) {

		String status = null;

		ConfigurationUtil configXMLUtil = new ConfigurationUtil();

		try {
			connection = getConnection();

			/*
			 * Getting image path from XML
			 */
			String A5ImagePath = configXMLUtil.getLetterHeadImage();

			/*
			 * Getting page size from XMl
			 */
			String pageSize = configXMLUtil.getPageSize();

			/*
			 * Setting path to store PDF file
			 */
			File file = new File(realPath + "/" + pdfFileName);
			/*
			 * Creating Document for PDF
			 */
			Document document = null;

			/*
			 * Checking whether pageSize tag in XMl contains A5 or A4, according to that
			 * setting PDF page size
			 */
			if (pageSize.equals("A5")) {
				document = new Document(PageSize.A5);
			} else if (pageSize.equals("A4")) {
				document = new Document(PageSize.A4);
			}

			PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(file));

			Font Font1 = new Font(Font.FontFamily.TIMES_ROMAN, 10, Font.NORMAL);
			Font Font3 = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.NORMAL);
			Font Font2 = new Font(Font.FontFamily.TIMES_ROMAN, 8, Font.NORMAL);
			Font Font4 = new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.BOLD);
			Font Font5 = new Font(Font.FontFamily.TIMES_ROMAN, 10, Font.BOLD);
			Font mainContent = new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.NORMAL);
			Font mainContent1 = new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.NORMAL);
			mainContent1.setColor(BaseColor.GRAY);

			document.open();

			/*
			 * Adding image
			 */
			PdfContentByte canvas = writer.getDirectContentUnder();

			Image image;

			if (pageSize.equals("A5")) {
				if (A5ImagePath == null || A5ImagePath == "") {

					image = null;

				} else {

					if (A5ImagePath.isEmpty()) {
						image = null;
					} else {

						S3ObjectInputStream s3ObjectInputStream = s3
								.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, A5ImagePath))
								.getObjectContent();

						IOUtils.copy(s3ObjectInputStream,
								new FileOutputStream(new File(realPath + "images/" + A5ImagePath)));

						image = Image.getInstance(realPath + "images/" + A5ImagePath);

						image.scaleToFit(PageSize.A5.getWidth(), PageSize.A5.getHeight());
						image.setAbsolutePosition(0, 0);

						canvas.saveState();
						PdfGState state = new PdfGState();
						canvas.setGState(state);
						canvas.addImage(image);
						canvas.restoreState();
					}

				}
			} else if (pageSize.equals("A4")) {
				if (A5ImagePath == null || A5ImagePath == "") {

					image = null;

				} else {

					if (A5ImagePath.isEmpty()) {
						image = null;
					} else {

						S3ObjectInputStream s3ObjectInputStream = s3
								.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, A5ImagePath))
								.getObjectContent();

						IOUtils.copy(s3ObjectInputStream,
								new FileOutputStream(new File(realPath + "images/" + A5ImagePath)));

						image = Image.getInstance(realPath + "images/" + A5ImagePath);

						image.scaleToFit(PageSize.A4.getWidth(), PageSize.A4.getHeight());
						image.setAbsolutePosition(0, 0);

						canvas.saveState();
						PdfGState state = new PdfGState();
						canvas.setGState(state);
						canvas.addImage(image);
						canvas.restoreState();
					}

				}
			}

			/*
			 * Setting header
			 */
			document.addCreator("eDhanvantari");
			document.addTitle("OPD Medical Certificate");

			PdfPTable table = new PdfPTable(2);

			table.setFooterRows(1);
			table.setWidthPercentage(100);
			Rectangle rect = new Rectangle(270, 700);
			table.setWidthPercentage(new float[] { 135, 135 }, rect);

			PdfPCell cell = new PdfPCell(new Paragraph("Medical Certificate", Font5));
			cell.setPaddingTop(120);
			cell.setPaddingBottom(20f);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell.setUseBorderPadding(true);
			cell.setColspan(2);
			cell.setBorderWidthBottom(1f);
			cell.setBorderColor(BaseColor.WHITE);

			PdfPCell cell4 = new PdfPCell(new Paragraph(
					"                                                                                               "
							+ "                                                                                                                            "
							+ "                                                                                                                              ",
					Font2));
			cell4.setColspan(2);
			cell4.setBorderWidthRight(0f);
			cell4.setBorderWidthLeft(0f);
			cell4.setBorderWidthTop(0f);
			cell4.setBorderWidthBottom(0f);
			cell4.setBorderColorTop(BaseColor.WHITE);

			PdfPCell cell6 = new PdfPCell(new Paragraph(
					"                                                                                               "
							+ "                                                                                                                            "
							+ "                                                                                                                              ",
					Font2));
			cell6.setColspan(2);
			cell6.setBorderWidthRight(0f);
			cell6.setBorderWidthLeft(0f);
			cell6.setBorderWidthTop(0f);
			cell6.setBorderWidthBottom(0f);
			cell6.setBorderColorTop(BaseColor.WHITE);

			table.addCell(cell);
			table.addCell(cell4);
			table.addCell(cell6);

			document.add(table);

			/*
			 * Table for medical cetificate content
			 */
			PdfPTable table1 = new PdfPTable(1);

			table1.setFooterRows(1);
			table1.setWidthPercentage(100);
			Rectangle rect1 = new Rectangle(270, 700);
			table1.setWidthPercentage(new float[] { 270 }, rect1);

			PdfPCell cell5 = new PdfPCell(new Paragraph(medicalCertificateText, mainContent));
			cell5.setPaddingTop(10);
			cell5.setPaddingBottom(10);
			cell5.setPaddingRight(10);
			cell5.setPaddingLeft(10);
			cell5.setUseBorderPadding(true);
			cell5.setColspan(1);
			cell5.setBorderWidthRight(0f);
			cell5.setBorderWidthLeft(0f);
			cell5.setBorderWidthTop(0f);
			cell5.setBorderWidthBottom(0f);
			cell5.setBorderColor(BaseColor.GRAY);

			table1.addCell(cell5);

			document.add(table1);

			document.close();

			System.out.println("Successfully created pdf for medical certificate");

			status = "success";

		} catch (Exception exception) {
			exception.printStackTrace();
			status = "error";
		}
		return status;

	}

	/**
	 * 
	 * @param pdfFileName
	 * @param referealLetterText
	 * @param realPath
	 * @return
	 */
	public String convertReferralLetterPDF(String referealLetterText, String drName, String pdfFileName,
			String realPath, AmazonS3 s3, String s3reportFilePath, String bucketName) {

		String status = null;

		ConfigurationUtil configXMLUtil = new ConfigurationUtil();

		try {
			connection = getConnection();

			/*
			 * Getting image path from XML
			 */
			String A5ImagePath = configXMLUtil.getLetterHeadImage();

			/*
			 * Getting page size from XMl
			 */
			String pageSize = configXMLUtil.getPageSize();

			/*
			 * Setting path to store PDF file
			 */
			File file = new File(realPath + "/" + pdfFileName);
			/*
			 * Creating Document for PDF
			 */
			Document document = null;

			/*
			 * Checking whether pageSize tag in XMl contains A5 or A4, according to that
			 * setting PDF page size
			 */
			if (pageSize.equals("A5")) {
				document = new Document(PageSize.A5);
			} else if (pageSize.equals("A4")) {
				document = new Document(PageSize.A4);
			}

			PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(file));

			Font Font1 = new Font(Font.FontFamily.TIMES_ROMAN, 10, Font.NORMAL);
			Font Font3 = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.NORMAL);
			Font Font2 = new Font(Font.FontFamily.TIMES_ROMAN, 8, Font.NORMAL);
			Font Font4 = new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.BOLD);
			Font Font5 = new Font(Font.FontFamily.TIMES_ROMAN, 10, Font.BOLD);
			Font mainContent = new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.NORMAL);
			Font mainContent1 = new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.NORMAL);
			mainContent1.setColor(BaseColor.GRAY);

			document.open();

			/*
			 * Adding image
			 */
			PdfContentByte canvas = writer.getDirectContentUnder();

			Image image;

			if (pageSize.equals("A5")) {
				if (A5ImagePath == null || A5ImagePath == "") {

					image = null;

				} else {

					if (A5ImagePath.isEmpty()) {
						image = null;
					} else {

						S3ObjectInputStream s3ObjectInputStream = s3
								.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, A5ImagePath))
								.getObjectContent();

						IOUtils.copy(s3ObjectInputStream,
								new FileOutputStream(new File(realPath + "images/" + A5ImagePath)));

						image = Image.getInstance(realPath + "images/" + A5ImagePath);

						image.scaleToFit(PageSize.A5.getWidth(), PageSize.A5.getHeight());
						image.setAbsolutePosition(0, 0);

						canvas.saveState();
						PdfGState state = new PdfGState();
						canvas.setGState(state);
						canvas.addImage(image);
						canvas.restoreState();
					}

				}
			} else if (pageSize.equals("A4")) {
				if (A5ImagePath == null || A5ImagePath == "") {

					image = null;

				} else {

					if (A5ImagePath.isEmpty()) {
						image = null;
					} else {

						S3ObjectInputStream s3ObjectInputStream = s3
								.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, A5ImagePath))
								.getObjectContent();

						IOUtils.copy(s3ObjectInputStream,
								new FileOutputStream(new File(realPath + "images/" + A5ImagePath)));

						image = Image.getInstance(realPath + "images/" + A5ImagePath);

						image.scaleToFit(PageSize.A4.getWidth(), PageSize.A4.getHeight());
						image.setAbsolutePosition(0, 0);

						canvas.saveState();
						PdfGState state = new PdfGState();
						canvas.setGState(state);
						canvas.addImage(image);
						canvas.restoreState();
					}

				}
			}

			/*
			 * Setting header
			 */
			document.addCreator("eDhanvantari");
			document.addTitle("OPD Referral Letter");

			PdfPTable table = new PdfPTable(2);

			table.setFooterRows(1);
			table.setWidthPercentage(100);
			Rectangle rect = new Rectangle(270, 700);
			table.setWidthPercentage(new float[] { 135, 135 }, rect);

			PdfPCell cell = new PdfPCell(new Paragraph("Referral Letter", Font5));
			cell.setPaddingTop(120);
			cell.setPaddingBottom(20f);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell.setUseBorderPadding(true);
			cell.setColspan(2);
			cell.setBorderWidthBottom(1f);
			cell.setBorderColor(BaseColor.WHITE);

			PdfPCell cell4 = new PdfPCell(new Paragraph(
					"                                                                                               "
							+ "                                                                                                                            "
							+ "                                                                                                                              ",
					Font2));
			cell4.setColspan(2);
			cell4.setBorderWidthRight(0f);
			cell4.setBorderWidthLeft(0f);
			cell4.setBorderWidthTop(0f);
			cell4.setBorderWidthBottom(0f);
			cell4.setBorderColorTop(BaseColor.WHITE);

			PdfPCell cell6 = new PdfPCell(new Paragraph(
					"                                                                                               "
							+ "                                                                                                                            "
							+ "                                                                                                                              ",
					Font2));
			cell6.setColspan(2);
			cell6.setBorderWidthRight(0f);
			cell6.setBorderWidthLeft(0f);
			cell6.setBorderWidthTop(0f);
			cell6.setBorderWidthBottom(0f);
			cell6.setBorderColorTop(BaseColor.WHITE);

			table.addCell(cell);
			table.addCell(cell4);
			table.addCell(cell6);

			document.add(table);

			/*
			 * Table for medical cetificate content
			 */
			PdfPTable table1 = new PdfPTable(1);

			table1.setFooterRows(1);
			table1.setWidthPercentage(100);
			Rectangle rect1 = new Rectangle(270, 700);
			table1.setWidthPercentage(new float[] { 270 }, rect1);

			referealLetterText = referealLetterText.replace("@doctName", "");

			PdfPCell cell5 = new PdfPCell(new Paragraph(referealLetterText, mainContent));
			cell5.setPaddingTop(10);
			cell5.setPaddingBottom(10);
			cell5.setPaddingRight(10);
			cell5.setPaddingLeft(10);
			cell5.setUseBorderPadding(true);
			cell5.setColspan(1);
			cell5.setBorderWidthRight(0f);
			cell5.setBorderWidthLeft(0f);
			cell5.setBorderWidthTop(0f);
			cell5.setBorderWidthBottom(0f);

			cell5.setBorderColor(BaseColor.WHITE);

			table1.addCell(cell5);

			PdfPCell cell51 = new PdfPCell(new Paragraph("Yours Sincerely, ", mainContent));
			cell51.setPaddingTop(10);
			cell51.setColspan(1);
			cell51.setHorizontalAlignment(Element.ALIGN_RIGHT);
			cell51.setBorderWidthRight(0f);
			cell51.setBorderWidthLeft(0f);
			cell51.setBorderWidthTop(0f);
			cell51.setBorderWidthBottom(0f);
			cell51.setBorderColor(BaseColor.WHITE);

			table1.addCell(cell51);

			PdfPCell cell52 = new PdfPCell(new Paragraph(drName, mainContent));
			cell52.setPaddingTop(10);
			cell52.setColspan(1);
			cell52.setHorizontalAlignment(Element.ALIGN_RIGHT);
			cell52.setBorderWidthRight(0f);
			cell52.setBorderWidthLeft(0f);
			cell52.setBorderWidthTop(0f);
			cell52.setBorderWidthBottom(0f);
			cell52.setBorderColor(BaseColor.WHITE);

			table1.addCell(cell52);

			document.add(table1);

			document.close();

			System.out.println("Successfully created pdf for referral Letter");

			status = "success";

		} catch (Exception exception) {
			exception.printStackTrace();
			status = "error";
		}
		return status;

	}

	/**
	 * 
	 * @param patientID
	 * @param visitID
	 * @param pdfOutFile
	 * @param realPath
	 * @return
	 */
	public String convertIPDPDF(int patientID, int visitID, String pdfOutFile, String realPath, AmazonS3 s3,
			String s3reportFilePath, String bucketName, List<String> checkedFields) {
		int count = 1;

		PatientDAOInf patientDAOInf = new PatientDAOImpl();

		String visitDate = null;
		String diagnosis = null;

		String historyOf = null;
		String allergicTo = null;

		String patientName = null;
		String age = null;
		String gender = null;

		String status = null;

		int OEPulse = 0;
		int OEBPSys = 0;
		int OEBPDia = 0;
		String OERS = null;
		String OECVS = null;
		String investHB = null;
		String investWBC = null;
		String investBT = null;
		double investCT = 0D;
		double investF = 0D;
		double investPP = 0D;
		String investUrine = null;

		String OTNotes = null;

		List<PatientForm> LabInvastigationList = patientDAOInf.reytrieveLabInvastigationLstByVisitID(visitID);

		/*
		 * Declaring variable which stores the location for FreeSans.ttf file to print
		 * marathi text on pdf
		 */
		String marathiFontDir = realPath + "fonts/FreeSans.ttf";

		ConfigurationUtil configXMLUtil = new ConfigurationUtil();

		try {
			connection = getConnection();

			/*
			 * Generate the queries to fetch details
			 */
			String fetchDetailQuery1 = QueryMaker.OPD_PDF_RETRIEVE_PATIENT;

			preparedStatement1 = connection.prepareStatement(fetchDetailQuery1);
			preparedStatement1.setInt(1, patientID);
			resultSet1 = preparedStatement1.executeQuery();

			/*
			 * Generating query 2
			 */
			String fetchDetailQuery2 = QueryMaker.OPD_PDF_RETRIEVE_VISIT;

			preparedStatement2 = connection.prepareStatement(fetchDetailQuery2);
			preparedStatement2.setInt(1, visitID);
			resultSet2 = preparedStatement2.executeQuery();

			// To fetch visit details from Visit Table
			while (resultSet2.next()) {
				visitDate = resultSet2.getString("formattedVisitDate");
				diagnosis = resultSet2.getString("diagnosis");
			}

			/*
			 * Generating query 3
			 */
			String fetchDetailQuery3 = QueryMaker.RETRIEVE_OPHTHALMALOGY_IPD;

			preparedStatement3 = connection.prepareStatement(fetchDetailQuery3);
			preparedStatement3.setInt(1, visitID);
			resultSet3 = preparedStatement3.executeQuery();

			while (resultSet3.next()) {
				historyOf = resultSet3.getString("historyOf");
				allergicTo = resultSet3.getString("allergicTo");
			}

			preparedStatement8 = connection.prepareStatement(fetchDetailQuery3);
			preparedStatement8.setInt(1, visitID);
			resultSet8 = preparedStatement8.executeQuery();

			/*
			 * Generate the queries to fetch details
			 */
			String fetchDetailQuery4 = QueryMaker.RETRIEVE_IPD_COMPLAINTS;

			preparedStatement = connection.prepareStatement(fetchDetailQuery4);
			preparedStatement.setInt(1, visitID);
			resultSet = preparedStatement.executeQuery();

			/*
			 * 
			 */
			String fetchDetailQuery5 = QueryMaker.RETRIEVE_INVESTOGATION;

			preparedStatement4 = connection.prepareStatement(fetchDetailQuery5);
			preparedStatement4.setInt(1, visitID);
			resultSet4 = preparedStatement4.executeQuery();

			while (resultSet4.next()) {

				investHB = resultSet4.getString("panel");
				investWBC = resultSet4.getString("test");
				investBT = resultSet4.getString("qualitativeValue");
				investCT = resultSet4.getDouble("quantitativeValue");

				/*
				 * investF = resultSet4.getDouble("quantitativeValue"); investPP =
				 * resultSet4.getDouble("bloodSugarLevelPP"); investUrine =
				 * resultSet4.getString("urineRoutineAndMicroscopy");
				 */
			}

			/*
			 * 
			 */
			String fetchDetailQuery6 = QueryMaker.RETRIEVE_OT_NOTES;

			preparedStatement5 = connection.prepareStatement(fetchDetailQuery6);
			preparedStatement5.setInt(1, visitID);
			resultSet5 = preparedStatement5.executeQuery();

			while (resultSet5.next()) {
				OTNotes = resultSet5.getString("notes");
			}

			/*
			 * 
			 */
			String fetchDetailQuery7 = QueryMaker.RETRIEVE_IPD_CONTINUATION_SHEET;

			preparedStatement6 = connection.prepareStatement(fetchDetailQuery7);
			preparedStatement6.setInt(1, visitID);
			resultSet6 = preparedStatement6.executeQuery();

			/*
			 * 
			 */
			String fetchDetailQuery8 = QueryMaker.RETRIEVE_VITAL_SIGNS;

			preparedStatement7 = connection.prepareStatement(fetchDetailQuery8);
			preparedStatement7.setInt(1, visitID);
			resultSet7 = preparedStatement7.executeQuery();

			while (resultSet7.next()) {
				OEPulse = resultSet7.getInt("pulse");
				OEBPSys = resultSet7.getInt("systolicBP");
				OEBPDia = resultSet7.getInt("diastolicBP");
				OERS = resultSet7.getString("respiratorySystem");
				OECVS = resultSet7.getString("cardioVascularSystem");
			}

			/*
			 * Image path for posterior segment images
			 */
			String posteriorODImage = realPath + File.separator + "images" + File.separator + "posterio_segment.png";

			String posteriorOSImage = realPath + File.separator + "images" + File.separator + "posterio_segment_1.png";

			/*
			 * Getting image path from XML
			 */
			String A5ImagePath = configXMLUtil.getLetterHeadImage();

			/*
			 * Getting page size from XMl
			 */
			String pageSize = configXMLUtil.getPageSize();

			/*
			 * Setting path to store PDF file
			 */
			File file = new File(realPath + "/" + pdfOutFile);
			/*
			 * Creating Document for PDF
			 */
			Document document = null;

			/*
			 * Checking whether pageSize tag in XMl contains A5 or A4, according to that
			 * setting PDF page size
			 */
			if (pageSize.equals("A5")) {
				document = new Document(PageSize.A5);
			} else if (pageSize.equals("A4")) {
				document = new Document(PageSize.A4);
			}

			PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(file));

			Font Font1 = new Font(Font.FontFamily.TIMES_ROMAN, 10, Font.NORMAL);
			Font Font3 = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.NORMAL);
			Font Font2 = new Font(Font.FontFamily.TIMES_ROMAN, 8, Font.NORMAL);
			Font Font4 = new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.BOLD);
			Font Font5 = new Font(Font.FontFamily.TIMES_ROMAN, 10, Font.BOLD);
			Font mainContent = new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.NORMAL);
			Font mainContent1 = new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.NORMAL);
			mainContent1.setColor(BaseColor.GRAY);
			/*
			 * Defining marathi font
			 */
			Font marathiFont = FontFactory.getFont(marathiFontDir, BaseFont.IDENTITY_H, BaseFont.EMBEDDED);

			document.open();

			/*
			 * Adding image
			 */
			PdfContentByte canvas = writer.getDirectContentUnder();

			Image image;

			if (pageSize.equals("A5")) {
				if (A5ImagePath == null || A5ImagePath == "") {

					image = null;

				} else {

					if (A5ImagePath.isEmpty()) {
						image = null;
					} else {

						S3ObjectInputStream s3ObjectInputStream = s3
								.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, A5ImagePath))
								.getObjectContent();

						IOUtils.copy(s3ObjectInputStream,
								new FileOutputStream(new File(realPath + "images/" + A5ImagePath)));

						image = Image.getInstance(realPath + "images/" + A5ImagePath);

						image.scaleToFit(PageSize.A5.getWidth(), PageSize.A5.getHeight());

						image.setAbsolutePosition(0, 0);

						canvas.saveState();
						PdfGState state = new PdfGState();
						canvas.setGState(state);
						canvas.addImage(image);
						canvas.restoreState();
					}

				}
			} else if (pageSize.equals("A4")) {
				if (A5ImagePath == null || A5ImagePath == "") {

					image = null;

				} else {

					if (A5ImagePath.isEmpty()) {
						image = null;
					} else {

						S3ObjectInputStream s3ObjectInputStream = s3
								.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, A5ImagePath))
								.getObjectContent();

						IOUtils.copy(s3ObjectInputStream,
								new FileOutputStream(new File(realPath + "images/" + A5ImagePath)));

						image = Image.getInstance(realPath + "images/" + A5ImagePath);

						image.scaleToFit(PageSize.A4.getWidth(), PageSize.A4.getHeight());

						image.setAbsolutePosition(0, 0);

						canvas.saveState();
						PdfGState state = new PdfGState();
						canvas.setGState(state);
						canvas.addImage(image);
						canvas.restoreState();
					}

				}
			}

			Image image1 = Image.getInstance(posteriorODImage);

			Image image2 = Image.getInstance(posteriorOSImage);

			/*
			 * Setting header
			 */
			document.addCreator("eDhanvantari");
			document.addTitle("IPD Visit");

			/*
			 * For displaying patient personal details
			 */
			while (resultSet1.next()) {
				PdfPTable table = new PdfPTable(2);

				table.setFooterRows(1);
				table.setWidthPercentage(100);
				Rectangle rect = new Rectangle(270, 700);
				table.setWidthPercentage(new float[] { 100, 170 }, rect);

				PdfPCell cell = new PdfPCell(new Paragraph("Patient Details", Font5));
				cell.setPaddingTop(120);
				cell.setPaddingBottom(10);
				cell.setHorizontalAlignment(Element.ALIGN_CENTER);
				cell.setUseBorderPadding(true);
				cell.setColspan(4);
				cell.setBorderWidthBottom(1f);
				cell.setBorderColor(BaseColor.WHITE);

				/*
				 * For Patient Name
				 */
				PdfPCell cell2 = new PdfPCell(new Paragraph("Patient Name", mainContent));
				cell2.setBorderWidth(0.01f);
				cell2.setPaddingBottom(5);
				cell2.setBorderWidthLeft(0.2f);
				cell2.setBorderColor(BaseColor.LIGHT_GRAY);

				String fullName = resultSet1.getString("firstName") + " " + resultSet1.getString("lastName");

				patientName = fullName;

				PdfPCell cell3 = new PdfPCell(new Paragraph(fullName, mainContent));
				cell3.setBorderWidth(0.2f);
				cell3.setPaddingBottom(5);
				cell3.setBorderColor(BaseColor.LIGHT_GRAY);

				/*
				 * For Date
				 */

				PdfPCell cell4 = new PdfPCell(new Paragraph("Age / Gender", mainContent));
				cell4.setBorderWidth(0.01f);
				cell4.setPaddingBottom(5);
				cell4.setBorderWidthLeft(0.2f);
				cell4.setBorderColor(BaseColor.LIGHT_GRAY);

				String ageGender = resultSet1.getString("age") + " / " + resultSet1.getString("gender");

				age = resultSet1.getString("age");
				gender = resultSet1.getString("gender");

				PdfPCell cell5 = new PdfPCell(new Paragraph(ageGender, mainContent));
				cell5.setBorderWidth(0.2f);
				cell5.setPaddingBottom(5);
				cell5.setBorderColor(BaseColor.LIGHT_GRAY);

				/*
				 * For Age
				 */
				PdfPCell cell6 = new PdfPCell(new Paragraph("Address", mainContent));
				cell6.setBorderWidth(0.01f);
				cell6.setPaddingBottom(5);
				cell6.setBorderWidthLeft(0.2f);
				cell6.setBorderColor(BaseColor.LIGHT_GRAY);

				PdfPCell cell7 = new PdfPCell(new Paragraph(resultSet1.getString("address"), mainContent));
				cell7.setBorderWidth(0.2f);
				cell7.setPaddingBottom(5);
				cell7.setBorderColor(BaseColor.LIGHT_GRAY);

				/*
				 * For Diagnosis
				 */
				PdfPCell cell8 = new PdfPCell(new Paragraph("DOA/Surgery", mainContent));
				cell8.setBorderWidth(0.01f);
				cell8.setPaddingBottom(5);
				cell8.setBorderWidthLeft(0.2f);
				cell8.setBorderColor(BaseColor.LIGHT_GRAY);

				PdfPCell cell9 = new PdfPCell(new Paragraph(visitDate, mainContent));
				cell9.setBorderWidth(0.2f);
				cell9.setPaddingBottom(2);
				cell9.setBorderColor(BaseColor.LIGHT_GRAY);

				/*
				 * For Diagnosis
				 */
				PdfPCell cell10 = new PdfPCell(new Paragraph("Diagnosis", mainContent));
				cell10.setBorderWidth(0.01f);
				cell10.setPaddingBottom(5);
				cell10.setBorderWidthLeft(0.2f);
				cell10.setBorderColor(BaseColor.LIGHT_GRAY);

				PdfPCell cell11 = new PdfPCell(new Paragraph(diagnosis, mainContent));
				cell11.setBorderWidth(0.2f);
				cell11.setPaddingBottom(2);
				cell11.setBorderColor(BaseColor.LIGHT_GRAY);

				/*
				 * adding all cell to the table to create tabular structure
				 */

				table.addCell(cell);
				table.addCell(cell2);
				table.addCell(cell3);
				table.addCell(cell4);
				table.addCell(cell5);
				table.addCell(cell6);
				table.addCell(cell7);
				table.addCell(cell8);
				table.addCell(cell9);
				table.addCell(cell10);
				table.addCell(cell11);

				document.add(table);
			}

			/*
			 * For Complaint details.
			 */

			PdfPTable table31 = new PdfPTable(3);
			table31.setWidthPercentage(100);
			Rectangle rect21 = new Rectangle(270, 700);
			table31.setWidthPercentage(new float[] { 90, 90, 90 }, rect21);

			// For blank space
			PdfPCell cell301 = new PdfPCell(new Paragraph(
					"                                                                                               "
							+ "                                                                                                                            "
							+ "                                                                                                                              ",
					Font2));
			cell301.setColspan(3);
			cell301.setBorderWidthRight(0f);
			cell301.setBorderWidthLeft(0f);
			cell301.setBorderWidthTop(0f);
			cell301.setBorderWidthBottom(0f);
			cell301.setBorderColorTop(BaseColor.WHITE);

			if (checkedFields != null && checkedFields.contains("complaintsOf") || checkedFields == null) {
				// for Title
				PdfPCell cell311 = new PdfPCell(new Paragraph("Complaints of:", Font5));
				cell311.setPaddingTop(5);
				cell311.setPaddingBottom(10);
				cell311.setHorizontalAlignment(Element.ALIGN_LEFT);
				cell311.setUseBorderPadding(true);
				cell311.setColspan(3);
				cell311.setBorderWidthRight(0.1f);
				cell311.setBorderWidthLeft(0.1f);
				cell311.setBorderWidthTop(0.1f);
				cell311.setBorderWidthBottom(1f);
				cell311.setBorderColor(BaseColor.WHITE);

				// Gene
				PdfPCell cell321 = new PdfPCell(new Paragraph("C/O", mainContent));

				cell321.setBorderWidth(0.01f);
				cell321.setPaddingBottom(5);
				cell321.setBorderColor(BaseColor.LIGHT_GRAY);

				// Nucleotide Change
				PdfPCell cell331 = new PdfPCell(new Paragraph("OD (Rt)", mainContent));

				cell331.setBorderWidth(0.01f);
				cell331.setPaddingBottom(5);
				cell331.setBorderColor(BaseColor.LIGHT_GRAY);

				// Amino Acid Change
				PdfPCell cell341 = new PdfPCell(new Paragraph("OS (Lt)", mainContent));

				cell341.setBorderWidth(0.01f);
				cell341.setPaddingBottom(5);
				cell341.setBorderColor(BaseColor.LIGHT_GRAY);

				table31.addCell(cell301);
				table31.addCell(cell311);
				table31.addCell(cell321);
				table31.addCell(cell331);
				table31.addCell(cell341);

				while (resultSet.next()) {

					/*
					 * for Gene
					 */
					PdfPCell cell20 = new PdfPCell(new Paragraph("" + count + "", mainContent));
					cell20.setBorderWidth(0.2f);
					cell20.setPaddingBottom(2);
					cell20.setBorderColor(BaseColor.LIGHT_GRAY);

					/*
					 * for Nucleotide Change
					 */
					PdfPCell cell21 = new PdfPCell(new Paragraph(resultSet.getString("complaintOD"), mainContent));
					cell21.setBorderWidth(0.2f);
					cell21.setPaddingBottom(2);
					cell21.setBorderColor(BaseColor.LIGHT_GRAY);

					/*
					 * for Amino Acid Change
					 */
					PdfPCell cell22 = new PdfPCell(new Paragraph(resultSet.getString("complaintOS"), mainContent));
					cell22.setBorderWidth(0.2f);
					cell22.setPaddingBottom(2);
					cell22.setBorderColor(BaseColor.LIGHT_GRAY);

					table31.addCell(cell20);
					table31.addCell(cell21);
					table31.addCell(cell22);

					count++;
				}
			}

			if (checkedFields != null && checkedFields.contains("h/o") || checkedFields == null) {
				PdfPCell cell111 = new PdfPCell(new Paragraph("H/O:", Font4));
				cell111.setBorderWidth(0.01f);
				cell111.setPaddingBottom(5);
				cell111.setPaddingTop(10);
				cell111.setBorderColor(BaseColor.WHITE);

				table31.addCell(cell111);

				PdfPCell cell110 = new PdfPCell(new Paragraph(historyOf, mainContent));
				cell110.setBorderWidth(0.01f);
				cell110.setPaddingBottom(5);
				cell110.setColspan(2);
				cell110.setPaddingTop(5);
				cell110.setBorderColor(BaseColor.WHITE);

				table31.addCell(cell110);
			}

			if (checkedFields != null && checkedFields.contains("allergicTo") || checkedFields == null) {
				PdfPCell cell112 = new PdfPCell(new Paragraph("Allergic To:", Font4));
				cell112.setBorderWidth(0.01f);
				cell112.setPaddingBottom(5);
				cell112.setPaddingTop(5);
				cell112.setBorderColor(BaseColor.WHITE);

				PdfPCell cell113 = new PdfPCell(new Paragraph(allergicTo, mainContent));
				cell113.setBorderWidth(0.01f);
				cell113.setPaddingBottom(10);
				cell113.setColspan(2);
				cell113.setPaddingTop(5);
				cell113.setBorderColor(BaseColor.WHITE);

				table31.addCell(cell112);
				table31.addCell(cell113);

			}

			document.add(table31);

			document.newPage();

			/*
			 * for IPD Opthalmology Form
			 */
			PdfPTable table2 = new PdfPTable(3);
			table2.setWidthPercentage(100);
			Rectangle rect = new Rectangle(270, 700);
			table2.setWidthPercentage(new float[] { 90, 90, 90 }, rect);

			/*
			 * Creating Table header
			 */

			// for Title
			PdfPCell cell0 = new PdfPCell(new Paragraph("IPD Opthalmology Form", Font5));
			cell0.setPaddingTop(15);
			cell0.setPaddingBottom(10);
			cell0.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell0.setUseBorderPadding(true);
			cell0.setColspan(3);
			cell0.setBorderWidthRight(0.1f);
			cell0.setBorderWidthLeft(0.1f);
			cell0.setBorderWidthTop(0.1f);
			cell0.setBorderWidthBottom(1f);
			cell0.setBorderColor(BaseColor.WHITE);

			// Gene
			PdfPCell cell1 = new PdfPCell(new Paragraph("ON EXAM", Font4));

			cell1.setBorderWidth(0.01f);
			cell1.setPaddingBottom(5);
			cell1.setPaddingTop(5);
			cell1.setBorderColor(BaseColor.WHITE);

			// OD RE
			PdfPCell cell2 = new PdfPCell(new Paragraph("OD (RE)", Font4));

			cell2.setBorderWidth(0.01f);
			cell2.setPaddingBottom(5);
			cell2.setPaddingTop(5);
			cell2.setBorderColor(BaseColor.WHITE);

			// Os LE
			PdfPCell cell3 = new PdfPCell(new Paragraph("OS (LE)", Font4));

			cell3.setBorderWidth(0.01f);
			cell3.setPaddingBottom(5);
			cell3.setPaddingTop(5);
			cell3.setBorderColor(BaseColor.WHITE);

			PdfPCell cell4 = new PdfPCell(new Paragraph(
					"                                                                                               "
							+ "                                                                                                                            "
							+ "                                                                                                                              ",
					Font2));
			cell4.setColspan(3);
			cell4.setBorderWidthRight(0f);
			cell4.setBorderWidthLeft(0f);
			cell4.setBorderWidthTop(0f);
			cell4.setBorderWidthBottom(1f);
			cell4.setBorderColorBottom(BaseColor.LIGHT_GRAY);

			table2.addCell(cell0);
			table2.addCell(cell1);
			table2.addCell(cell2);
			table2.addCell(cell3);
			table2.addCell(cell4);

			document.add(table2);

			while (resultSet8.next()) {
				PdfPTable table1 = new PdfPTable(3);

				table1.setWidthPercentage(100);
				Rectangle rect1 = new Rectangle(270, 700);
				table1.setWidthPercentage(new float[] { 90, 90, 90 }, rect1);

				if (checkedFields != null && checkedFields.contains("eyeLid") || checkedFields == null) {
					/*
					 * for Gene
					 */
					PdfPCell cell20 = new PdfPCell(new Paragraph("Eye Lid", Font4));
					cell20.setBorderWidth(0.2f);
					cell20.setPaddingBottom(2);
					cell20.setPaddingTop(5);
					cell20.setBorderColor(BaseColor.WHITE);

					/*
					 * for Nucleotide Change
					 */
					PdfPCell cell21 = new PdfPCell(new Paragraph("", mainContent));
					cell21.setBorderWidth(0.2f);
					cell21.setPaddingBottom(2);
					cell21.setBorderColor(BaseColor.WHITE);

					/*
					 * for Amino Acid Change
					 */
					PdfPCell cell22 = new PdfPCell(new Paragraph("", mainContent));
					cell22.setBorderWidth(0.2f);
					cell22.setPaddingBottom(2);
					cell22.setBorderColor(BaseColor.WHITE);

					PdfPCell cell5 = new PdfPCell(new Paragraph("" + "" + "\n", Font2));
					cell5.setColspan(3);
					cell5.setBorderWidthRight(0f);
					cell5.setBorderWidthLeft(0f);
					cell5.setBorderWidthTop(0f);
					cell5.setBorderWidthBottom(1f);
					cell5.setBorderColorBottom(BaseColor.LIGHT_GRAY);

					table1.addCell(cell20);
					table1.addCell(cell21);
					table1.addCell(cell22);
					table1.addCell(cell5);
				}

				if (checkedFields != null && checkedFields.contains("eyeLid") || checkedFields == null) {

					/*
					 * for Variant Type
					 */
					PdfPCell cell23 = new PdfPCell(new Paragraph("Upper", mainContent));
					cell23.setBorderWidth(0.2f);
					cell23.setPaddingBottom(2);
					cell23.setBorderColor(BaseColor.WHITE);

					/*
					 * for Variant Impact
					 */
					PdfPCell cell24 = new PdfPCell(new Paragraph(resultSet8.getString("eyelidUpperOD"), mainContent));
					cell24.setBorderWidth(0.2f);
					cell24.setPaddingBottom(2);
					cell24.setBorderColor(BaseColor.WHITE);

					/*
					 * for Clinical Significance
					 */
					PdfPCell cell25 = new PdfPCell(new Paragraph(resultSet8.getString("eyelidUpperOS"), mainContent));
					cell25.setBorderWidth(0.2f);
					cell25.setPaddingBottom(2);
					cell25.setBorderColor(BaseColor.WHITE);

					table1.addCell(cell23);
					table1.addCell(cell24);
					table1.addCell(cell25);
				}

				if (checkedFields != null && checkedFields.contains("eyeLid") || checkedFields == null) {
					/*
					 * for Associated Disease
					 */
					PdfPCell cell26 = new PdfPCell(new Paragraph("Lower", mainContent));
					cell26.setBorderWidth(0.2f);
					cell26.setPaddingBottom(2);
					cell26.setBorderColor(BaseColor.WHITE);

					/*
					 * for ClinVar URL
					 */
					PdfPCell cell27 = new PdfPCell(new Paragraph(resultSet8.getString("eyelidLowerOD"), mainContent));
					cell27.setBorderWidth(0.2f);
					cell27.setPaddingBottom(2);
					cell27.setBorderColor(BaseColor.WHITE);

					/*
					 * for RSIDs
					 */
					PdfPCell cell28 = new PdfPCell(new Paragraph(resultSet8.getString("eyelidLowerOS"), mainContent));
					cell28.setBorderWidth(0.2f);
					cell28.setPaddingBottom(2);
					cell28.setBorderColor(BaseColor.WHITE);

					table1.addCell(cell26);
					table1.addCell(cell27);
					table1.addCell(cell28);

				}

				if (checkedFields != null && checkedFields.contains("vision") || checkedFields == null) {
					/*
					 * for Gene
					 */
					PdfPCell cell29 = new PdfPCell(new Paragraph("Vision", Font4));
					cell29.setBorderWidth(0.2f);
					cell29.setPaddingBottom(2);
					cell29.setPaddingTop(5);
					cell29.setBorderColor(BaseColor.WHITE);

					/*
					 * for Nucleotide Change
					 */
					PdfPCell cell30 = new PdfPCell(new Paragraph("", mainContent));
					cell30.setBorderWidth(0.2f);
					cell30.setPaddingBottom(2);
					cell30.setBorderColor(BaseColor.WHITE);

					/*
					 * for Amino Acid Change
					 */
					PdfPCell cell31 = new PdfPCell(new Paragraph("", mainContent));
					cell31.setBorderWidth(0.2f);
					cell31.setPaddingBottom(2);
					cell31.setBorderColor(BaseColor.WHITE);

					PdfPTable tableOD = new PdfPTable(2);
					PdfPTable tableOS = new PdfPTable(2);

					tableOD.setWidthPercentage(100);
					tableOD.setWidths(new int[] { 1, 2 });

					PdfPCell distCellText = new PdfPCell(new Paragraph("Dist", Font4));
					distCellText.setBorderColor(BaseColor.WHITE);
					PdfPCell nearCelltext = new PdfPCell(new Paragraph("Near", Font4));
					nearCelltext.setBorderColor(BaseColor.WHITE);

					tableOD.addCell(distCellText);
					tableOD.addCell(nearCelltext);

					tableOS.setWidthPercentage(100);
					tableOS.setWidths(new int[] { 1, 2 });

					PdfPCell distCellTextOS = new PdfPCell(new Paragraph("Dist", Font4));
					distCellTextOS.setBorderColor(BaseColor.WHITE);
					PdfPCell nearCelltextOS = new PdfPCell(new Paragraph("Near", Font4));
					nearCelltextOS.setBorderColor(BaseColor.WHITE);

					tableOS.addCell(distCellTextOS);
					tableOS.addCell(nearCelltextOS);

					PdfPCell cell290 = new PdfPCell(new Paragraph("", Font4));
					cell290.setBorderWidth(0.2f);
					cell290.setPaddingBottom(2);
					cell290.setPaddingTop(5);
					cell290.setBorderColor(BaseColor.WHITE);

					/*
					 * for Nucleotide Change
					 */
					PdfPCell cell300 = new PdfPCell(tableOD);
					cell300.setBorderWidth(0.2f);
					cell300.setPaddingBottom(2);
					cell300.setBorderColor(BaseColor.WHITE);

					/*
					 * for Amino Acid Change
					 */
					PdfPCell cell310 = new PdfPCell(tableOS);
					cell310.setBorderWidth(0.2f);
					cell310.setPaddingBottom(2);
					cell310.setBorderColor(BaseColor.WHITE);

					PdfPCell cell5 = new PdfPCell(new Paragraph("" + "" + "\n", Font2));
					cell5.setColspan(3);
					cell5.setBorderWidthRight(0f);
					cell5.setBorderWidthLeft(0f);
					cell5.setBorderWidthTop(0f);
					cell5.setBorderWidthBottom(1f);
					cell5.setBorderColorBottom(BaseColor.LIGHT_GRAY);

					table1.addCell(cell29);
					table1.addCell(cell30);
					table1.addCell(cell31);
					table1.addCell(cell5);
					table1.addCell(cell290);
					table1.addCell(cell300);
					table1.addCell(cell310);

				}

				if (checkedFields != null && checkedFields.contains("vision") || checkedFields == null) {

					/*
					 * for Associated Disease
					 */
					PdfPCell cell32 = new PdfPCell(new Paragraph("Visual Acuity", mainContent));
					cell32.setBorderWidth(0.2f);
					cell32.setPaddingBottom(2);
					cell32.setBorderColor(BaseColor.WHITE);

					PdfPTable tableOD = new PdfPTable(2);
					PdfPTable tableOS = new PdfPTable(2);

					tableOD.setWidthPercentage(100);
					tableOD.setWidths(new int[] { 1, 2 });

					PdfPCell distCellText = new PdfPCell(
							new Paragraph(resultSet8.getString("visualAcuityDistOD"), mainContent));
					distCellText.setBorderColor(BaseColor.WHITE);
					PdfPCell nearCelltext = new PdfPCell(
							new Paragraph(resultSet8.getString("visualAcuityNearOD"), mainContent));
					nearCelltext.setBorderColor(BaseColor.WHITE);

					tableOD.addCell(distCellText);
					tableOD.addCell(nearCelltext);

					tableOS.setWidthPercentage(100);
					tableOS.setWidths(new int[] { 1, 2 });

					PdfPCell distCellTextOS = new PdfPCell(
							new Paragraph(resultSet8.getString("visualAcuityDistOS"), mainContent));
					distCellTextOS.setBorderColor(BaseColor.WHITE);
					PdfPCell nearCelltextOS = new PdfPCell(
							new Paragraph(resultSet8.getString("visualAcuityNearOS"), mainContent));
					nearCelltextOS.setBorderColor(BaseColor.WHITE);

					tableOS.addCell(distCellTextOS);
					tableOS.addCell(nearCelltextOS);

					/*
					 * for ClinVar URL
					 */
					PdfPCell cell33 = new PdfPCell(tableOD);
					cell33.setBorderWidth(0.2f);
					cell33.setPaddingBottom(2);
					cell33.setBorderColor(BaseColor.WHITE);

					/*
					 * for RSIDs
					 */
					PdfPCell cell34 = new PdfPCell(tableOS);
					cell34.setBorderWidth(0.2f);
					cell34.setPaddingBottom(2);
					cell34.setBorderColor(BaseColor.WHITE);

					table1.addCell(cell32);
					table1.addCell(cell33);
					table1.addCell(cell34);
				}

				if (checkedFields != null && checkedFields.contains("vision") || checkedFields == null) {
					/*
					 * for Associated Disease
					 */
					PdfPCell cell35 = new PdfPCell(new Paragraph("Pinhole Vision", mainContent));
					cell35.setBorderWidth(0.2f);
					cell35.setPaddingBottom(2);
					cell35.setBorderColor(BaseColor.WHITE);

					PdfPTable tableOD = new PdfPTable(2);
					PdfPTable tableOS = new PdfPTable(2);

					tableOD.setWidthPercentage(100);
					tableOD.setWidths(new int[] { 1, 2 });

					PdfPCell distCellText = new PdfPCell(
							new Paragraph(resultSet8.getString("pinholeVisionDistOD"), mainContent));
					distCellText.setBorderColor(BaseColor.WHITE);
					PdfPCell nearCelltext = new PdfPCell(
							new Paragraph(resultSet8.getString("pinholeVisionNearOD"), mainContent));
					nearCelltext.setBorderColor(BaseColor.WHITE);

					tableOD.addCell(distCellText);
					tableOD.addCell(nearCelltext);

					tableOS.setWidthPercentage(100);
					tableOS.setWidths(new int[] { 1, 2 });

					PdfPCell distCellTextOS = new PdfPCell(
							new Paragraph(resultSet8.getString("pinholeVisionDistOS"), mainContent));
					distCellTextOS.setBorderColor(BaseColor.WHITE);
					PdfPCell nearCelltextOS = new PdfPCell(
							new Paragraph(resultSet8.getString("pinholeVisionNearOS"), mainContent));
					nearCelltextOS.setBorderColor(BaseColor.WHITE);

					tableOS.addCell(distCellTextOS);
					tableOS.addCell(nearCelltextOS);

					/*
					 * for ClinVar URL
					 */
					PdfPCell cell36 = new PdfPCell(tableOD);
					cell36.setBorderWidth(0.2f);
					cell36.setPaddingBottom(2);
					cell36.setBorderColor(BaseColor.WHITE);

					/*
					 * for RSIDs
					 */
					PdfPCell cell37 = new PdfPCell(tableOS);
					cell37.setBorderWidth(0.2f);
					cell37.setPaddingBottom(2);
					cell37.setBorderColor(BaseColor.WHITE);

					table1.addCell(cell35);
					table1.addCell(cell36);
					table1.addCell(cell37);
				}

				if (checkedFields != null && checkedFields.contains("vision") || checkedFields == null) {
					/*
					 * for Associated Disease
					 */
					PdfPCell cell38 = new PdfPCell(new Paragraph("BCVA", mainContent));
					cell38.setBorderWidth(0.2f);
					cell38.setPaddingBottom(2);
					cell38.setBorderColor(BaseColor.WHITE);

					PdfPTable tableOD = new PdfPTable(2);
					PdfPTable tableOS = new PdfPTable(2);

					tableOD.setWidthPercentage(100);
					tableOD.setWidths(new int[] { 1, 2 });

					PdfPCell distCellText = new PdfPCell(
							new Paragraph(resultSet8.getString("bcvaDistOD"), mainContent));
					distCellText.setBorderColor(BaseColor.WHITE);
					PdfPCell nearCelltext = new PdfPCell(
							new Paragraph(resultSet8.getString("bcvaNearOD"), mainContent));
					nearCelltext.setBorderColor(BaseColor.WHITE);

					tableOD.addCell(distCellText);
					tableOD.addCell(nearCelltext);

					tableOS.setWidthPercentage(100);
					tableOS.setWidths(new int[] { 1, 2 });

					PdfPCell distCellTextOS = new PdfPCell(
							new Paragraph(resultSet8.getString("bcvaDistOS"), mainContent));
					distCellTextOS.setBorderColor(BaseColor.WHITE);
					PdfPCell nearCelltextOS = new PdfPCell(
							new Paragraph(resultSet8.getString("bcvaNearOS"), mainContent));
					nearCelltextOS.setBorderColor(BaseColor.WHITE);

					tableOS.addCell(distCellTextOS);
					tableOS.addCell(nearCelltextOS);

					/*
					 * for ClinVar URL
					 */
					PdfPCell cell39 = new PdfPCell(tableOD);
					cell39.setBorderWidth(0.2f);
					cell39.setPaddingBottom(2);
					cell39.setBorderColor(BaseColor.WHITE);

					/*
					 * for RSIDs
					 */
					PdfPCell cell40 = new PdfPCell(tableOS);
					cell40.setBorderWidth(0.2f);
					cell40.setPaddingBottom(2);
					cell40.setBorderColor(BaseColor.WHITE);

					table1.addCell(cell38);
					table1.addCell(cell39);
					table1.addCell(cell40);
				}

				if (checkedFields != null && checkedFields.contains("anteriorSegment") || checkedFields == null) {
					/*
					 * for Gene
					 */
					PdfPCell cell41 = new PdfPCell(new Paragraph("Anterior Segment", Font4));
					cell41.setBorderWidth(0.2f);
					cell41.setPaddingBottom(2);
					cell41.setBorderColor(BaseColor.WHITE);

					/*
					 * for Nucleotide Change
					 */
					PdfPCell cell42 = new PdfPCell(new Paragraph("", mainContent));
					cell42.setBorderWidth(0.2f);
					cell42.setPaddingBottom(2);
					cell42.setBorderColor(BaseColor.WHITE);

					/*
					 * for Amino Acid Change
					 */
					PdfPCell cell43 = new PdfPCell(new Paragraph("", mainContent));
					cell43.setBorderWidth(0.2f);
					cell43.setPaddingBottom(2);
					cell43.setBorderColor(BaseColor.WHITE);

					PdfPCell cell5 = new PdfPCell(new Paragraph("" + "" + "\n", Font2));
					cell5.setColspan(3);
					cell5.setBorderWidthRight(0f);
					cell5.setBorderWidthLeft(0f);
					cell5.setBorderWidthTop(0f);
					cell5.setBorderWidthBottom(1f);
					cell5.setBorderColorBottom(BaseColor.LIGHT_GRAY);

					table1.addCell(cell41);
					table1.addCell(cell42);
					table1.addCell(cell43);
					table1.addCell(cell5);
				}

				if (checkedFields != null && checkedFields.contains("anteriorSegment") || checkedFields == null) {
					/*
					 * for Associated Disease
					 */
					PdfPCell cell44 = new PdfPCell(new Paragraph("Conjuctiva", mainContent));
					cell44.setBorderWidth(0.2f);
					cell44.setPaddingBottom(2);
					cell44.setBorderColor(BaseColor.WHITE);

					/*
					 * for ClinVar URL
					 */
					PdfPCell cell45 = new PdfPCell(new Paragraph(resultSet8.getString("conjunctivaOD"), mainContent));
					cell45.setBorderWidth(0.2f);
					cell45.setPaddingBottom(2);
					cell45.setBorderColor(BaseColor.WHITE);

					/*
					 * for RSIDs
					 */
					PdfPCell cell46 = new PdfPCell(new Paragraph(resultSet8.getString("conjunctivaOS"), mainContent));
					cell46.setBorderWidth(0.2f);
					cell46.setPaddingBottom(2);
					cell46.setBorderColor(BaseColor.WHITE);

					table1.addCell(cell44);
					table1.addCell(cell45);
					table1.addCell(cell46);
				}

				if (checkedFields != null && checkedFields.contains("anteriorSegment") || checkedFields == null) {
					/*
					 * for Associated Disease
					 */
					PdfPCell cell47 = new PdfPCell(new Paragraph("Cornea", mainContent));
					cell47.setBorderWidth(0.2f);
					cell47.setPaddingBottom(2);
					cell47.setBorderColor(BaseColor.WHITE);

					/*
					 * for ClinVar URL
					 */
					PdfPCell cell48 = new PdfPCell(new Paragraph(resultSet8.getString("corneaOD"), mainContent));
					cell48.setBorderWidth(0.2f);
					cell48.setPaddingBottom(2);
					cell48.setBorderColor(BaseColor.WHITE);

					/*
					 * for RSIDs
					 */
					PdfPCell cell49 = new PdfPCell(new Paragraph(resultSet8.getString("corneaOD"), mainContent));
					cell49.setBorderWidth(0.2f);
					cell49.setPaddingBottom(2);
					cell49.setBorderColor(BaseColor.WHITE);

					table1.addCell(cell47);
					table1.addCell(cell48);
					table1.addCell(cell49);
				}

				if (checkedFields != null && checkedFields.contains("anteriorSegment") || checkedFields == null) {
					/*
					 * for Associated Disease
					 */
					PdfPCell cellPupil4 = new PdfPCell(new Paragraph("Pupil", mainContent));
					cellPupil4.setBorderWidth(0.2f);
					cellPupil4.setPaddingBottom(2);
					cellPupil4.setBorderColor(BaseColor.WHITE);

					/*
					 * for ClinVar URL
					 */
					PdfPCell cellPupil5 = new PdfPCell(new Paragraph(resultSet8.getString("pupilOD"), mainContent));
					cellPupil5.setBorderWidth(0.2f);
					cellPupil5.setPaddingBottom(2);
					cellPupil5.setBorderColor(BaseColor.WHITE);

					/*
					 * for RSIDs
					 */
					PdfPCell cellPupil6 = new PdfPCell(new Paragraph(resultSet8.getString("pupilOS"), mainContent));
					cellPupil6.setBorderWidth(0.2f);
					cellPupil6.setPaddingBottom(2);
					cellPupil6.setBorderColor(BaseColor.WHITE);

					table1.addCell(cellPupil4);
					table1.addCell(cellPupil5);
					table1.addCell(cellPupil6);
				}

				if (checkedFields != null && checkedFields.contains("anteriorSegment") || checkedFields == null) {
					/*
					 * for Associated Disease
					 */
					PdfPCell cell50 = new PdfPCell(new Paragraph("AC", mainContent));
					cell50.setBorderWidth(0.2f);
					cell50.setPaddingBottom(2);
					cell50.setBorderColor(BaseColor.WHITE);

					/*
					 * for ClinVar URL
					 */
					PdfPCell cell51 = new PdfPCell(
							new Paragraph(resultSet8.getString("anteriorChamberOD"), mainContent));
					cell51.setBorderWidth(0.2f);
					cell51.setPaddingBottom(2);
					cell51.setBorderColor(BaseColor.WHITE);

					/*
					 * for RSIDs
					 */
					PdfPCell cell52 = new PdfPCell(
							new Paragraph(resultSet8.getString("anteriorChamberOS"), mainContent));
					cell52.setBorderWidth(0.2f);
					cell52.setPaddingBottom(2);
					cell52.setBorderColor(BaseColor.WHITE);

					table1.addCell(cell50);
					table1.addCell(cell51);
					table1.addCell(cell52);

				}

				if (checkedFields != null && checkedFields.contains("anteriorSegment") || checkedFields == null) {
					/*
					 * for Associated Disease
					 */
					PdfPCell cell53 = new PdfPCell(new Paragraph("Iris", mainContent));
					cell53.setBorderWidth(0.2f);
					cell53.setPaddingBottom(2);
					cell53.setBorderColor(BaseColor.WHITE);

					/*
					 * for ClinVar URL
					 */
					PdfPCell cell54 = new PdfPCell(new Paragraph(resultSet8.getString("irisOD"), mainContent));
					cell54.setBorderWidth(0.2f);
					cell54.setPaddingBottom(2);
					cell54.setBorderColor(BaseColor.WHITE);

					/*
					 * for RSIDs
					 */
					PdfPCell cell55 = new PdfPCell(new Paragraph(resultSet8.getString("irisOS"), mainContent));
					cell55.setBorderWidth(0.2f);
					cell55.setPaddingBottom(2);
					cell55.setBorderColor(BaseColor.WHITE);

					table1.addCell(cell53);
					table1.addCell(cell54);
					table1.addCell(cell55);
				}

				if (checkedFields != null && checkedFields.contains("anteriorSegment") || checkedFields == null) {

					/*
					 * for Associated Disease
					 */
					PdfPCell cell56 = new PdfPCell(new Paragraph("Lens", mainContent));
					cell56.setBorderWidth(0.2f);
					cell56.setPaddingBottom(2);
					cell56.setBorderColor(BaseColor.WHITE);

					/*
					 * for ClinVar URL
					 */
					PdfPCell cell57 = new PdfPCell(new Paragraph(resultSet8.getString("lensOD"), mainContent));
					cell57.setBorderWidth(0.2f);
					cell57.setPaddingBottom(2);
					cell57.setBorderColor(BaseColor.WHITE);

					/*
					 * for RSIDs
					 */
					PdfPCell cell58 = new PdfPCell(new Paragraph(resultSet8.getString("lensOS"), mainContent));
					cell58.setBorderWidth(0.2f);
					cell58.setPaddingBottom(2);
					cell58.setBorderColor(BaseColor.WHITE);

					table1.addCell(cell56);
					table1.addCell(cell57);
					table1.addCell(cell58);
				}

				if (checkedFields != null && checkedFields.contains("posteriorSegment") || checkedFields == null) {

					/*
					 * To add image with text next to it, we need to use PdfPTable
					 */
					PdfPTable tableOD = new PdfPTable(2);
					PdfPTable tableOS = new PdfPTable(2);

					/*
					 * for Associated Disease
					 */
					PdfPCell cell59 = new PdfPCell(new Paragraph("Posterior Segment", Font4));
					cell59.setBorderWidth(0.2f);
					cell59.setPaddingBottom(2);
					cell59.setPaddingTop(5);
					cell59.setBorderColor(BaseColor.WHITE);

					/*
					 * for ClinVar URL
					 */
					String posteriorSegmentOD = "Disc: " + resultSet8.getString("discOD") + "\n" + "Vessel:  "
							+ resultSet8.getString("vesselOD") + "\n" + "Macula: " + resultSet8.getString("maculaOD");

					/*
					 * Adding image and text in new table and then adding that table into Posterior
					 * Segment cell in order to get both image and text for OD
					 */
					tableOD.setWidthPercentage(100);
					tableOD.setWidths(new int[] { 1, 2 });

					PdfPCell imageCellOD = new PdfPCell(image1, true);
					imageCellOD.setBorderColor(BaseColor.WHITE);

					PdfPCell textCellOD = new PdfPCell(new Paragraph(posteriorSegmentOD, mainContent));
					textCellOD.setBorderColor(BaseColor.WHITE);

					tableOD.addCell(imageCellOD);
					tableOD.addCell(textCellOD);

					/*
					 * Phrase phrase = new Phrase(new Chunk(image1, 0, 0)); phrase.add(new
					 * Chunk(posteriorSegmentOD, mainContent));
					 */

					PdfPCell cell60 = new PdfPCell(tableOD);
					cell60.setBorderWidth(0.2f);
					cell60.setPaddingBottom(2);
					cell60.setPaddingTop(5);
					cell60.setBorderColor(BaseColor.WHITE);

					String posteriorSegmentOS = "Disc: " + resultSet8.getString("discOS") + "\n" + "Vessel: "
							+ resultSet8.getString("vesselOS") + "\n" + "Macula: " + resultSet8.getString("maculaOS");

					/*
					 * Adding image and text in new table and then adding that table into Posterior
					 * Segment cell in order to get both image and text for OS
					 */
					tableOS.setWidthPercentage(100);
					tableOS.setWidths(new int[] { 1, 2 });

					PdfPCell imageCellOS = new PdfPCell(image2, true);
					imageCellOS.setBorderColor(BaseColor.WHITE);

					PdfPCell textCellOS = new PdfPCell(new Paragraph(posteriorSegmentOS, mainContent));
					textCellOS.setBorderColor(BaseColor.WHITE);

					tableOS.addCell(imageCellOS);
					tableOS.addCell(textCellOS);

					/*
					 * for RSIDs
					 */

					PdfPCell cell61 = new PdfPCell(tableOS);
					cell61.setBorderWidth(0.2f);
					cell61.setPaddingBottom(2);
					cell60.setPaddingTop(5);
					cell61.setBorderColor(BaseColor.WHITE);

					PdfPCell cell31 = new PdfPCell(new Paragraph("", mainContent));
					cell31.setBorderWidth(0.2f);
					cell31.setPaddingBottom(2);
					cell31.setBorderColor(BaseColor.WHITE);

					PdfPCell cell22 = new PdfPCell(new Paragraph("", mainContent));
					cell22.setBorderWidth(0.2f);
					cell22.setPaddingBottom(2);
					cell22.setBorderColor(BaseColor.WHITE);

					PdfPCell cell5 = new PdfPCell(new Paragraph("" + "" + "\n", Font2));
					cell5.setColspan(3);
					cell5.setBorderWidthRight(0f);
					cell5.setBorderWidthLeft(0f);
					cell5.setBorderWidthTop(0f);
					cell5.setBorderWidthBottom(1f);
					cell5.setBorderColorBottom(BaseColor.LIGHT_GRAY);

					table1.addCell(cell59);
					table1.addCell(cell60);
					table1.addCell(cell61);
					table1.addCell(cell5);
				}

				if (checkedFields != null && checkedFields.contains("iopSac&Bio") || checkedFields == null) {
					/*
					 * for Associated Disease
					 */
					PdfPCell cell62 = new PdfPCell(new Paragraph("I.O.P", Font4));
					cell62.setBorderWidth(0.2f);
					cell62.setPaddingBottom(2);
					cell62.setPaddingTop(5);
					cell62.setBorderColor(BaseColor.WHITE);

					/*
					 * for ClinVar URL
					 */
					PdfPCell cell63 = new PdfPCell(new Paragraph(resultSet8.getString("iopOD"), mainContent));
					cell63.setBorderWidth(0.2f);
					cell63.setPaddingBottom(2);
					cell63.setPaddingTop(5);
					cell63.setBorderColor(BaseColor.WHITE);

					/*
					 * for RSIDs
					 */
					PdfPCell cell64 = new PdfPCell(new Paragraph(resultSet8.getString("iopOS"), mainContent));
					cell64.setBorderWidth(0.2f);
					cell64.setPaddingBottom(2);
					cell64.setPaddingTop(5);
					cell64.setBorderColor(BaseColor.WHITE);

					PdfPCell cell22 = new PdfPCell(new Paragraph("", mainContent));
					cell22.setBorderWidth(0.2f);
					cell22.setPaddingBottom(2);
					cell22.setBorderColor(BaseColor.WHITE);

					PdfPCell cell5 = new PdfPCell(new Paragraph("" + "" + "\n", Font2));
					cell5.setColspan(3);
					cell5.setBorderWidthRight(0f);
					cell5.setBorderWidthLeft(0f);
					cell5.setBorderWidthTop(0f);
					cell5.setBorderWidthBottom(1f);
					cell5.setBorderColorBottom(BaseColor.LIGHT_GRAY);

					table1.addCell(cell62);
					table1.addCell(cell63);
					table1.addCell(cell64);
					table1.addCell(cell5);
				}

				if (checkedFields != null && checkedFields.contains("iopSac&Bio") || checkedFields == null) {
					/*
					 * for Associated Disease
					 */
					PdfPCell cell65 = new PdfPCell(new Paragraph("Sac", Font4));
					cell65.setBorderWidth(0.2f);
					cell65.setPaddingBottom(2);
					cell65.setPaddingTop(5);
					cell65.setBorderColor(BaseColor.WHITE);

					/*
					 * for ClinVar URL
					 */
					PdfPCell cell66 = new PdfPCell(new Paragraph(resultSet8.getString("sacOD"), mainContent));
					cell66.setBorderWidth(0.2f);
					cell66.setPaddingBottom(2);
					cell66.setPaddingTop(5);
					cell66.setBorderColor(BaseColor.WHITE);

					/*
					 * for RSIDs
					 */
					PdfPCell cell67 = new PdfPCell(new Paragraph(resultSet8.getString("sacOS"), mainContent));
					cell67.setBorderWidth(0.2f);
					cell67.setPaddingBottom(2);
					cell67.setPaddingTop(5);
					cell67.setBorderColor(BaseColor.WHITE);

					table1.addCell(cell65);
					table1.addCell(cell66);
					table1.addCell(cell67);
				}

				if (checkedFields != null && checkedFields.contains("iopSac&Bio") || checkedFields == null) {
					/*
					 * for Associated Disease
					 */
					PdfPCell cell68 = new PdfPCell(new Paragraph("Biometry", Font4));
					cell68.setBorderWidth(0.2f);
					cell68.setPaddingBottom(2);
					cell68.setPaddingTop(5);
					cell68.setBorderColor(BaseColor.WHITE);

					/*
					 * for ClinVar URL
					 */
					PdfPCell cell69 = new PdfPCell(new Paragraph("", mainContent));
					cell69.setBorderWidth(0.2f);
					cell69.setPaddingBottom(2);
					cell69.setBorderColor(BaseColor.WHITE);

					/*
					 * for RSIDs
					 */
					PdfPCell cell70 = new PdfPCell(new Paragraph("", mainContent));
					cell70.setBorderWidth(0.2f);
					cell70.setPaddingBottom(2);
					cell70.setBorderColor(BaseColor.WHITE);

					PdfPCell cell22 = new PdfPCell(new Paragraph("", mainContent));
					cell22.setBorderWidth(0.2f);
					cell22.setPaddingBottom(2);
					cell22.setBorderColor(BaseColor.WHITE);

					PdfPCell cell5 = new PdfPCell(new Paragraph("" + "" + "\n", Font2));
					cell5.setColspan(3);
					cell5.setBorderWidthRight(0f);
					cell5.setBorderWidthLeft(0f);
					cell5.setBorderWidthTop(0f);
					cell5.setBorderWidthBottom(1f);
					cell5.setBorderColorBottom(BaseColor.LIGHT_GRAY);

					table1.addCell(cell68);
					table1.addCell(cell69);
					table1.addCell(cell70);
					table1.addCell(cell5);
				}

				if (checkedFields != null && checkedFields.contains("iopSac&Bio") || checkedFields == null) {
					/*
					 * for Associated Disease
					 */
					PdfPCell cell71 = new PdfPCell(new Paragraph("K1", mainContent));
					cell71.setBorderWidth(0.2f);
					cell71.setPaddingBottom(2);
					cell71.setBorderColor(BaseColor.WHITE);

					/*
					 * for ClinVar URL
					 */
					PdfPCell cell72 = new PdfPCell(new Paragraph(resultSet8.getString("biometryK1OD"), mainContent));
					cell72.setBorderWidth(0.2f);
					cell72.setPaddingBottom(2);
					cell72.setBorderColor(BaseColor.WHITE);

					/*
					 * for RSIDs
					 */
					PdfPCell cell73 = new PdfPCell(new Paragraph(resultSet8.getString("biometryK1OS"), mainContent));
					cell73.setBorderWidth(0.2f);
					cell73.setPaddingBottom(2);
					cell73.setBorderColor(BaseColor.WHITE);

					table1.addCell(cell71);
					table1.addCell(cell72);
					table1.addCell(cell73);
				}

				if (checkedFields != null && checkedFields.contains("iopSac&Bio") || checkedFields == null) {
					/*
					 * for Associated Disease
					 */
					PdfPCell cell74 = new PdfPCell(new Paragraph("K2", mainContent));
					cell74.setBorderWidth(0.2f);
					cell74.setPaddingBottom(2);
					cell74.setBorderColor(BaseColor.WHITE);

					/*
					 * for ClinVar URL
					 */
					PdfPCell cell75 = new PdfPCell(new Paragraph(resultSet8.getString("biometryK2OD"), mainContent));
					cell75.setBorderWidth(0.2f);
					cell75.setPaddingBottom(2);
					cell75.setBorderColor(BaseColor.WHITE);

					/*
					 * for RSIDs
					 */
					PdfPCell cell76 = new PdfPCell(new Paragraph(resultSet8.getString("biometryK2OS"), mainContent));
					cell76.setBorderWidth(0.2f);
					cell76.setPaddingBottom(2);
					cell76.setBorderColor(BaseColor.WHITE);

					table1.addCell(cell74);
					table1.addCell(cell75);
					table1.addCell(cell76);
				}

				if (checkedFields != null && checkedFields.contains("iopSac&Bio") || checkedFields == null) {
					/*
					 * for Associated Disease
					 */
					PdfPCell cell77 = new PdfPCell(new Paragraph("Axial Length", mainContent));
					cell77.setBorderWidth(0.2f);
					cell77.setPaddingBottom(2);
					cell77.setBorderColor(BaseColor.WHITE);

					/*
					 * for ClinVar URL
					 */
					PdfPCell cell78 = new PdfPCell(
							new Paragraph(resultSet8.getString("biometryAxialLengthOD"), mainContent));
					cell78.setBorderWidth(0.2f);
					cell78.setPaddingBottom(2);
					cell78.setBorderColor(BaseColor.WHITE);

					/*
					 * for RSIDs
					 */
					PdfPCell cell79 = new PdfPCell(
							new Paragraph(resultSet8.getString("biometryAxialLengthOS"), mainContent));
					cell79.setBorderWidth(0.2f);
					cell79.setPaddingBottom(2);
					cell79.setBorderColor(BaseColor.WHITE);

					table1.addCell(cell77);
					table1.addCell(cell78);
					table1.addCell(cell79);
				}

				if (checkedFields != null && checkedFields.contains("iopSac&Bio") || checkedFields == null) {
					/*
					 * for Associated Disease
					 */
					PdfPCell cell80 = new PdfPCell(new Paragraph("IOL", mainContent));
					cell80.setBorderWidth(0.2f);
					cell80.setPaddingBottom(2);
					cell80.setBorderColor(BaseColor.WHITE);

					/*
					 * for ClinVar URL
					 */
					PdfPCell cell81 = new PdfPCell(new Paragraph(resultSet8.getString("biometryIOLOD"), mainContent));
					cell81.setBorderWidth(0.2f);
					cell81.setPaddingBottom(2);
					cell81.setBorderColor(BaseColor.WHITE);

					/*
					 * for RSIDs
					 */
					PdfPCell cell82 = new PdfPCell(new Paragraph(resultSet8.getString("biometryIOLOS"), mainContent));
					cell82.setBorderWidth(0.2f);
					cell82.setPaddingBottom(2);
					cell82.setBorderColor(BaseColor.WHITE);

					table1.addCell(cell80);
					table1.addCell(cell81);
					table1.addCell(cell82);
				}

				document.add(table1);
			}

			document.newPage();

			/*
			 * 
			 */
			PdfPTable table4 = new PdfPTable(2);
			table4.setWidthPercentage(100);
			Rectangle rect2 = new Rectangle(270, 700);
			table4.setWidthPercentage(new float[] { 135, 135 }, rect2);

			PdfPCell cell333 = new PdfPCell(new Paragraph(
					"                                                                                               "
							+ "                                                                                                                            "
							+ "                                                                                                                              ",
					Font2));
			cell333.setColspan(2);
			cell333.setBorderWidthRight(0f);
			cell333.setBorderWidthLeft(0f);
			cell333.setBorderWidthTop(0f);
			cell333.setBorderWidthBottom(0f);
			cell333.setPaddingTop(10);
			cell333.setBorderColorTop(BaseColor.WHITE);

			PdfPCell cell = new PdfPCell(new Paragraph("LAB & INVESTIGATIONS", Font5));
			cell.setPaddingTop(120);
			cell.setPaddingBottom(10);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell.setUseBorderPadding(true);
			cell.setColspan(2);
			cell.setBorderWidthBottom(1f);
			cell.setBorderColor(BaseColor.WHITE);

			PdfPTable tableOE = new PdfPTable(2);

			PdfPTable tableInvestigation = new PdfPTable(2);

			/*
			 * Adding table for OE
			 */
			tableOE.setWidthPercentage(100);
			tableOE.setWidths(new int[] { 1, 2 });

			PdfPCell imageCellLable = new PdfPCell(new Paragraph("OE", mainContent));
			imageCellLable.setHorizontalAlignment(Element.ALIGN_CENTER);
			imageCellLable.setColspan(2);
			imageCellLable.setBorderColorRight(BaseColor.LIGHT_GRAY);
			imageCellLable.setBorderColor(BaseColor.LIGHT_GRAY);

			PdfPCell textCellLable1 = new PdfPCell(new Paragraph("Pulse: ", mainContent));
			textCellLable1.setBorderColor(BaseColor.LIGHT_GRAY);

			PdfPCell textCellValue = new PdfPCell(new Paragraph("" + OEPulse + "", mainContent));
			textCellValue.setBorderColor(BaseColor.LIGHT_GRAY);

			PdfPCell textCellLable2 = new PdfPCell(new Paragraph("BP: ", mainContent));
			textCellLable2.setBorderColor(BaseColor.LIGHT_GRAY);

			PdfPCell textCellValue1 = new PdfPCell(new Paragraph("" + OEBPSys + "\t" + OEBPDia + "", mainContent));
			textCellValue1.setBorderColor(BaseColor.LIGHT_GRAY);

			PdfPCell textCellLable3 = new PdfPCell(new Paragraph("RS: ", mainContent));
			textCellLable3.setBorderColor(BaseColor.LIGHT_GRAY);

			PdfPCell textCellValue2 = new PdfPCell(new Paragraph("" + OERS + "", mainContent));
			textCellValue2.setBorderColor(BaseColor.LIGHT_GRAY);

			PdfPCell textCellLable4 = new PdfPCell(new Paragraph("CVS: ", mainContent));
			textCellLable4.setBorderColor(BaseColor.LIGHT_GRAY);

			PdfPCell textCellValue3 = new PdfPCell(new Paragraph("" + OECVS + "", mainContent));
			textCellValue3.setBorderColor(BaseColor.LIGHT_GRAY);

			tableOE.addCell(imageCellLable);
			tableOE.addCell(textCellLable1);
			tableOE.addCell(textCellValue);
			tableOE.addCell(textCellLable2);
			tableOE.addCell(textCellValue1);
			tableOE.addCell(textCellLable3);
			tableOE.addCell(textCellValue2);
			tableOE.addCell(textCellLable4);
			tableOE.addCell(textCellValue3);

			/*
			 * Adding table for Investigation
			 */
			tableInvestigation.setWidthPercentage(100);
			tableInvestigation.setWidths(new int[] { 1, 2 });

			PdfPCell imageCellLable5 = new PdfPCell(new Paragraph("Investigation", mainContent));
			imageCellLable5.setHorizontalAlignment(Element.ALIGN_CENTER);
			imageCellLable5.setColspan(2);
			imageCellLable5.setBorderColor(BaseColor.LIGHT_GRAY);

			tableInvestigation.addCell(imageCellLable5);

			for (PatientForm form1 : LabInvastigationList) {

				PdfPCell textCellLable6 = new PdfPCell(new Paragraph(form1.getOtherTest() + ": ", mainContent));
				textCellLable6.setBorderColor(BaseColor.LIGHT_GRAY);

				PdfPCell textCellValue4 = new PdfPCell(new Paragraph("" + form1.getOtherTestValue() + "", mainContent));
				textCellValue4.setBorderColor(BaseColor.LIGHT_GRAY);

				tableInvestigation.addCell(textCellLable6);
				tableInvestigation.addCell(textCellValue4);

			}

			/*
			 * PdfPCell textCellLable6 = new PdfPCell(new Paragraph("HB%: ", mainContent));
			 * textCellLable6.setBorderColor(BaseColor.LIGHT_GRAY);
			 * 
			 * PdfPCell textCellValue4 = new PdfPCell(new Paragraph("" + investHB + "",
			 * mainContent)); textCellValue4.setBorderColor(BaseColor.LIGHT_GRAY);
			 * 
			 * PdfPCell textCellLable7 = new PdfPCell(new Paragraph("WBC: ", mainContent));
			 * textCellLable7.setBorderColor(BaseColor.LIGHT_GRAY);
			 * 
			 * PdfPCell textCellValue5 = new PdfPCell(new Paragraph("" + investWBC + "",
			 * mainContent)); textCellValue5.setBorderColor(BaseColor.LIGHT_GRAY);
			 * 
			 * PdfPCell textCellLable8 = new PdfPCell(new Paragraph("BT: ", mainContent));
			 * textCellLable8.setBorderColor(BaseColor.LIGHT_GRAY);
			 * 
			 * PdfPCell textCellValue6 = new PdfPCell(new Paragraph("" + investBT + "",
			 * mainContent)); textCellValue6.setBorderColor(BaseColor.LIGHT_GRAY);
			 * 
			 * PdfPCell textCellLable9 = new PdfPCell(new Paragraph("CT: ", mainContent));
			 * textCellLable9.setBorderColor(BaseColor.LIGHT_GRAY);
			 * 
			 * PdfPCell textCellValue7 = new PdfPCell(new Paragraph("" + investCT + "",
			 * mainContent)); textCellValue7.setBorderColor(BaseColor.LIGHT_GRAY);
			 * 
			 * PdfPCell textCellLable111 = new PdfPCell(new Paragraph("BSL: ",
			 * mainContent)); textCellLable111.setColspan(2);
			 * textCellLable111.setBorderColor(BaseColor.LIGHT_GRAY);
			 * 
			 * PdfPCell textCellLable10 = new PdfPCell(new Paragraph("F: ", mainContent));
			 * textCellLable10.setBorderColor(BaseColor.LIGHT_GRAY);
			 * 
			 * PdfPCell textCellValue8 = new PdfPCell(new Paragraph("" + investF + "",
			 * mainContent)); textCellValue8.setBorderColor(BaseColor.LIGHT_GRAY);
			 * 
			 * PdfPCell textCellLable11 = new PdfPCell(new Paragraph("PP: ", mainContent));
			 * textCellLable11.setBorderColor(BaseColor.LIGHT_GRAY);
			 * 
			 * PdfPCell textCellValue9 = new PdfPCell(new Paragraph("" + investPP + "",
			 * mainContent)); textCellValue9.setBorderColor(BaseColor.LIGHT_GRAY);
			 * 
			 * PdfPCell textCellLable12 = new PdfPCell(new Paragraph("Urine (R&M): ",
			 * mainContent)); textCellLable12.setBorderColor(BaseColor.LIGHT_GRAY);
			 * 
			 * PdfPCell textCellValue10 = new PdfPCell(new Paragraph(investUrine,
			 * mainContent)); textCellValue10.setBorderColor(BaseColor.LIGHT_GRAY);
			 * 
			 * tableInvestigation.addCell(imageCellLable5);
			 * tableInvestigation.addCell(textCellLable6);
			 * tableInvestigation.addCell(textCellValue4);
			 * tableInvestigation.addCell(textCellLable7);
			 * tableInvestigation.addCell(textCellValue5);
			 * tableInvestigation.addCell(textCellLable8);
			 * tableInvestigation.addCell(textCellValue6);
			 * tableInvestigation.addCell(textCellLable9);
			 * tableInvestigation.addCell(textCellValue7);
			 * tableInvestigation.addCell(textCellLable111);
			 * tableInvestigation.addCell(textCellLable10);
			 * tableInvestigation.addCell(textCellValue8);
			 * tableInvestigation.addCell(textCellLable11);
			 * tableInvestigation.addCell(textCellValue9);
			 * tableInvestigation.addCell(textCellLable12);
			 * tableInvestigation.addCell(textCellValue10);
			 */

			PdfPCell cell444 = new PdfPCell(tableOE);

			cell444.setBorderWidth(0.01f);
			cell444.setPaddingBottom(5);
			cell444.setPaddingTop(10);
			cell444.setBorderColor(BaseColor.WHITE);

			PdfPCell cell555 = new PdfPCell(tableInvestigation);

			cell555.setBorderWidth(0.01f);
			cell555.setPaddingBottom(5);
			cell555.setPaddingTop(10);
			cell555.setBorderColor(BaseColor.WHITE);

			table4.addCell(cell333);
			table4.addCell(cell);
			table4.addCell(cell444);
			table4.addCell(cell555);

			document.add(table4);

			document.newPage();

			/*
			 * for OPD Continuation Sheet
			 */
			PdfPTable table21 = new PdfPTable(3);
			table21.setWidthPercentage(100);
			Rectangle rect12 = new Rectangle(270, 700);
			table21.setWidthPercentage(new float[] { 90, 90, 90 }, rect12);

			/*
			 * Creating Table header
			 */

			// For blank space
			PdfPCell cell211 = new PdfPCell(new Paragraph(
					"                                                                                               "
							+ "                                                                                                                            "
							+ "                                                                                                                              ",
					Font2));
			cell211.setColspan(3);
			cell211.setBorderWidthRight(0f);
			cell211.setBorderWidthLeft(0f);
			cell211.setBorderWidthTop(0f);
			cell211.setBorderWidthBottom(0f);
			cell211.setBorderColorTop(BaseColor.WHITE);

			if (checkedFields != null && checkedFields.contains("continuationSheet") || checkedFields == null) {
				// for Title
				PdfPCell cell222 = new PdfPCell(new Paragraph("CONTINUATION SHEET", Font5));
				cell222.setPaddingTop(15);
				cell222.setPaddingBottom(10);
				cell222.setHorizontalAlignment(Element.ALIGN_CENTER);
				cell222.setUseBorderPadding(true);
				cell222.setColspan(3);
				cell222.setBorderWidthRight(0.1f);
				cell222.setBorderWidthLeft(0.1f);
				cell222.setBorderWidthTop(0.1f);
				cell222.setBorderWidthBottom(1f);
				cell222.setBorderColor(BaseColor.WHITE);

				PdfPCell cell3331 = new PdfPCell(new Paragraph("Patient Name: " + patientName, mainContent));

				cell3331.setBorderWidth(0.01f);
				cell3331.setPaddingBottom(15);
				cell3331.setBorderColor(BaseColor.WHITE);

				// Nucleotide Change
				PdfPCell cell344 = new PdfPCell(new Paragraph("Age: " + age, mainContent));

				cell344.setBorderWidth(0.01f);
				cell344.setPaddingBottom(15);
				cell344.setBorderColor(BaseColor.WHITE);

				// Amino Acid Change
				PdfPCell cell355 = new PdfPCell(new Paragraph("Gender: " + gender, mainContent));

				cell355.setBorderWidth(0.01f);
				cell355.setPaddingBottom(15);
				cell355.setBorderColor(BaseColor.WHITE);

				PdfPCell cell233 = new PdfPCell(new Paragraph("Date", mainContent));

				cell233.setBorderWidth(0.01f);
				cell233.setPaddingBottom(5);
				cell233.setHorizontalAlignment(Element.ALIGN_CENTER);
				cell233.setBorderColor(BaseColor.LIGHT_GRAY);

				// Nucleotide Change
				PdfPCell cell244 = new PdfPCell(new Paragraph("Description", mainContent));

				cell244.setBorderWidth(0.01f);
				cell244.setPaddingBottom(5);
				cell244.setHorizontalAlignment(Element.ALIGN_CENTER);
				cell244.setBorderColor(BaseColor.LIGHT_GRAY);

				// Amino Acid Change
				PdfPCell cell255 = new PdfPCell(new Paragraph("Treatment", mainContent));

				cell255.setBorderWidth(0.01f);
				cell255.setPaddingBottom(5);
				cell255.setHorizontalAlignment(Element.ALIGN_CENTER);
				cell255.setBorderColor(BaseColor.LIGHT_GRAY);

				table21.addCell(cell211);
				table21.addCell(cell222);
				table21.addCell(cell3331);
				table21.addCell(cell344);
				table21.addCell(cell355);
				table21.addCell(cell233);
				table21.addCell(cell244);
				table21.addCell(cell255);

				while (resultSet6.next()) {

					/*
					 * for Gene
					 */
					String formattedContDate = resultSet6.getString("formattedContDate");
					if (formattedContDate != null && !formattedContDate.isEmpty()) {
						PdfPCell cell20 = new PdfPCell(
								new Paragraph(resultSet6.getString("formattedContDate"), mainContent));
						cell20.setBorderWidth(0.2f);
						cell20.setPaddingBottom(5);
						cell20.setBorderColor(BaseColor.LIGHT_GRAY);
						table21.addCell(cell20);
					} else {
						PdfPCell cell20 = new PdfPCell(new Paragraph(
								"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
								mainContent));
						cell20.setBorderWidth(0.2f);
						cell20.setPaddingBottom(5);
						cell20.setBorderColor(BaseColor.LIGHT_GRAY);
						table21.addCell(cell20);
					}

					/*
					 * for Nucleotide Change
					 */
					String description = resultSet6.getString("description");
					if (description != null && !description.isEmpty()) {
						PdfPCell cell21 = new PdfPCell(new Paragraph(resultSet6.getString("description"), mainContent));
						cell21.setBorderWidth(0.2f);
						cell21.setPaddingBottom(5);
						cell21.setBorderColor(BaseColor.LIGHT_GRAY);
						table21.addCell(cell21);
					} else {
						PdfPCell cell21 = new PdfPCell(new Paragraph(
								"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
								mainContent));
						cell21.setBorderWidth(0.2f);
						cell21.setPaddingBottom(5);
						cell21.setBorderColor(BaseColor.LIGHT_GRAY);
						table21.addCell(cell21);
					}

					/*
					 * for Amino Acid Change
					 */
					String treatment = resultSet6.getString("treatment");
					if (treatment != null && !treatment.isEmpty()) {
						PdfPCell cell22 = new PdfPCell(new Paragraph(resultSet6.getString("treatment"), mainContent));
						cell22.setBorderWidth(0.2f);
						cell22.setPaddingBottom(5);
						cell22.setBorderColor(BaseColor.LIGHT_GRAY);
						table21.addCell(cell22);
					} else {
						PdfPCell cell22 = new PdfPCell(new Paragraph(
								"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
								mainContent));
						cell22.setBorderWidth(0.2f);
						cell22.setPaddingBottom(5);
						cell22.setBorderColor(BaseColor.LIGHT_GRAY);
						table21.addCell(cell22);
					}
				}

			}
			document.add(table21);

			document.newPage();

			/*
			 * for OPD OT Notes
			 */
			PdfPTable table7 = new PdfPTable(1);
			table7.setWidthPercentage(100);
			Rectangle rect7 = new Rectangle(270, 700);
			table7.setWidthPercentage(new float[] { 270 }, rect7);

			/*
			 * Creating Table header
			 */

			// For blank space
			PdfPCell cell277 = new PdfPCell(new Paragraph(
					"                                                                                               "
							+ "                                                                                                                            "
							+ "                                                                                                                              ",
					Font2));
			cell277.setColspan(1);
			cell277.setBorderWidthRight(0f);
			cell277.setBorderWidthLeft(0f);
			cell277.setBorderWidthTop(0f);
			cell277.setBorderWidthBottom(0f);
			cell277.setBorderColorTop(BaseColor.WHITE);

			if (checkedFields != null && checkedFields.contains("otNotes") || checkedFields == null) {
				// for Title
				PdfPCell cell288 = new PdfPCell(new Paragraph("OT NOTES", Font5));
				cell288.setPaddingTop(15);
				cell288.setPaddingBottom(10);
				cell288.setHorizontalAlignment(Element.ALIGN_CENTER);
				cell288.setUseBorderPadding(true);
				cell288.setColspan(1);
				cell288.setBorderWidthRight(0.1f);
				cell288.setBorderWidthLeft(0.1f);
				cell288.setBorderWidthTop(0.1f);
				cell288.setBorderWidthBottom(1f);
				cell288.setBorderColor(BaseColor.WHITE);

				table7.addCell(cell277);
				table7.addCell(cell288);

				if (OTNotes != null && !OTNotes.isEmpty()) {
					PdfPCell cell299 = new PdfPCell(new Paragraph(OTNotes, mainContent));

					cell299.setBorderWidth(0.01f);
					cell299.setPaddingBottom(5);
					cell299.setBorderColor(BaseColor.LIGHT_GRAY);
					table7.addCell(cell299);
				} else {
					PdfPCell cell299 = new PdfPCell(new Paragraph(OTNotes, mainContent));

					cell299.setBorderWidth(0.01f);
					cell299.setPaddingBottom(5);
					cell299.setBorderColor(BaseColor.LIGHT_GRAY);
					table7.addCell(cell299);
				}
			}
			document.add(table7);

			/*
			 * For signature in footer
			 */
			PdfPTable table = new PdfPTable(1);
			table.setTotalWidth(350);

			PdfPCell cell1111 = new PdfPCell(new Paragraph("Signature", mainContent1));
			cell1111.setBackgroundColor(BaseColor.WHITE);
			cell1111.setHorizontalAlignment(Element.ALIGN_RIGHT);
			cell1111.setBorderColor(BaseColor.WHITE);
			table.addCell(cell1111);

			FooterTable event = new FooterTable(table);
			writer.setPageEvent(event);

			document.close();

			System.out.println("Successfully written and generated IPD PDF Report");

			status = "success";

			/*
			 * Closing resultSet, preparedStatement, connection objects
			 */
			resultSet3.close();
			preparedStatement3.close();

			resultSet2.close();
			preparedStatement2.close();

			resultSet1.close();
			preparedStatement1.close();

			connection.close();

		} catch (Exception exception) {
			exception.printStackTrace();
			status = "error";
		}
		return status;
	}

	/**
	 * 
	 * @param patientID
	 * @param consentText1
	 * @param consentText2
	 * @param consentText3
	 * @param pdfFileName
	 * @param realPath
	 * @return
	 */
	public String convertConsentPDF(int patientID, String consentText1, String consentText2, String consentText3,
			String pdfFileName, String realPath, String diagnosis, AmazonS3 s3, String s3reportFilePath,
			String bucketName) {
		String status = null;

		try {

			connection = getConnection();

			String fetchDetailQuery1 = QueryMaker.OPD_PDF_RETRIEVE_PATIENT;

			preparedStatement1 = connection.prepareStatement(fetchDetailQuery1);
			preparedStatement1.setInt(1, patientID);
			resultSet1 = preparedStatement1.executeQuery();

			/*
			 * Declaring variable which stores the location for FreeSans.ttf file to print
			 * marathi text on pdf
			 */
			String marathiFontDir = realPath + "fonts/FreeSans.ttf";

			ConfigurationUtil configXMLUtil = new ConfigurationUtil();

			/*
			 * Getting image path from XML
			 */
			String A5ImagePath = configXMLUtil.getLetterHeadImage();

			/*
			 * Getting page size from XMl
			 */
			String pageSize = configXMLUtil.getPageSize();

			/*
			 * Setting path to store PDF file
			 */
			File file = new File(realPath + "/" + pdfFileName);
			/*
			 * Creating Document for PDF
			 */
			Document document = null;

			/*
			 * Checking whether pageSize tag in XMl contains A5 or A4, according to that
			 * setting PDF page size
			 */
			if (pageSize.equals("A5")) {
				document = new Document(PageSize.A5);
			} else if (pageSize.equals("A4")) {
				document = new Document(PageSize.A4);
			}

			PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(file));

			Font Font1 = new Font(Font.FontFamily.TIMES_ROMAN, 10, Font.NORMAL);
			Font Font3 = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.NORMAL);
			Font Font2 = new Font(Font.FontFamily.TIMES_ROMAN, 8, Font.NORMAL);
			Font Font4 = new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.BOLD);
			Font Font5 = new Font(Font.FontFamily.TIMES_ROMAN, 10, Font.BOLD);
			Font mainContent = new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.NORMAL);
			Font mainContent1 = new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.NORMAL);
			mainContent1.setColor(BaseColor.GRAY);
			/*
			 * Defining marathi font
			 */
			Font marathiFont = FontFactory.getFont(marathiFontDir, BaseFont.IDENTITY_H, BaseFont.EMBEDDED);

			Font marathiFontHeader = FontFactory.getFont(marathiFontDir, BaseFont.IDENTITY_H, BaseFont.EMBEDDED);

			Font marathiFontBold = FontFactory.getFont(marathiFontDir, BaseFont.IDENTITY_H, BaseFont.EMBEDDED);

			marathiFontHeader.setStyle(marathiFontHeader.BOLD + marathiFontHeader.UNDERLINE);
			marathiFontHeader.setSize(13f);

			marathiFontBold.setStyle(marathiFontBold.BOLD);

			document.open();

			/*
			 * Adding image
			 */
			PdfContentByte canvas = writer.getDirectContentUnder();

			Image image;

			if (pageSize.equals("A5")) {
				if (A5ImagePath == null || A5ImagePath == "") {

					image = null;

				} else {

					if (A5ImagePath.isEmpty()) {
						image = null;
					} else {

						S3ObjectInputStream s3ObjectInputStream = s3
								.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, A5ImagePath))
								.getObjectContent();

						IOUtils.copy(s3ObjectInputStream,
								new FileOutputStream(new File(realPath + "images/" + A5ImagePath)));

						image = Image.getInstance(realPath + "images/" + A5ImagePath);

						image.scaleToFit(PageSize.A5.getWidth(), PageSize.A5.getHeight());
						image.setAbsolutePosition(0, 0);

						canvas.saveState();
						PdfGState state = new PdfGState();
						canvas.setGState(state);
						canvas.addImage(image);
						canvas.restoreState();
					}

				}
			} else if (pageSize.equals("A4")) {
				if (A5ImagePath == null || A5ImagePath == "") {

					image = null;

				} else {

					if (A5ImagePath.isEmpty()) {
						image = null;
					} else {

						S3ObjectInputStream s3ObjectInputStream = s3
								.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, A5ImagePath))
								.getObjectContent();

						IOUtils.copy(s3ObjectInputStream,
								new FileOutputStream(new File(realPath + "images/" + A5ImagePath)));

						image = Image.getInstance(realPath + "images/" + A5ImagePath);

						image.scaleToFit(PageSize.A4.getWidth(), PageSize.A4.getHeight());
						image.setAbsolutePosition(0, 0);

						canvas.saveState();
						PdfGState state = new PdfGState();
						canvas.setGState(state);
						canvas.addImage(image);
						canvas.restoreState();
					}

				}
			}

			/*
			 * Setting header
			 */
			document.addCreator("eDhanvantari");
			document.addTitle("IPD consent");

			while (resultSet1.next()) {

				PdfPTable table = new PdfPTable(1);

				table.setFooterRows(1);
				table.setWidthPercentage(100);
				Rectangle rect = new Rectangle(270, 700);
				table.setWidthPercentage(new float[] { 270 }, rect);

				PdfPCell cell = new PdfPCell(new Paragraph(
						"ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¸ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â®ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚ÂªÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â° ",
						marathiFontHeader));
				cell.setPaddingTop(120);
				cell.setPaddingBottom(10);
				cell.setHorizontalAlignment(Element.ALIGN_CENTER);
				cell.setUseBorderPadding(true);
				cell.setColspan(1);
				cell.setBorderWidthBottom(1f);
				cell.setBorderColor(BaseColor.WHITE);

				PdfPCell cell22 = new PdfPCell(new Paragraph(
						"ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚ÂªÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¶ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¸ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â®ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¹ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬:",
						marathiFont));
				cell22.setBorderWidth(0.01f);
				cell22.setPaddingBottom(5);
				cell22.setBorderWidthLeft(0.2f);
				cell22.setBorderColor(BaseColor.WHITE);

				String fullName = resultSet1.getString("firstName") + " " + resultSet1.getString("lastName");

				/*
				 * For Patient Name
				 */
				PdfPCell cell2 = new PdfPCell(new Paragraph(
						"ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¨ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Âµ: "
								+ fullName,
						marathiFont));
				cell2.setBorderWidth(0.01f);
				cell2.setPaddingBottom(5);
				cell2.setBorderWidthLeft(0.2f);
				cell2.setBorderColor(BaseColor.LIGHT_GRAY);

				PdfPCell cell3 = new PdfPCell(new Paragraph(
						"ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â²ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¯Ã‚Â¿Ã‚Â½: ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚ÂªÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â°ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â· / ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¸ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â°ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬:  "
								+ resultSet1.getString("gender")
								+ "\t ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚ÂµÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¯:  "
								+ resultSet1.getString("age")
								+ "  ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚ÂµÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â°ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â·ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡",
						marathiFont));
				cell3.setBorderWidth(0.2f);
				cell3.setPaddingBottom(5);
				cell3.setBorderColor(BaseColor.LIGHT_GRAY);

				/*
				 * For Date
				 */

				PdfPCell cell4 = new PdfPCell(new Paragraph(
						"ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚ÂªÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾:  "
								+ resultSet1.getString("address"),
						marathiFont));
				cell4.setBorderWidth(0.01f);
				cell4.setPaddingBottom(5);
				cell4.setBorderWidthLeft(0.2f);
				cell4.setBorderColor(BaseColor.LIGHT_GRAY);

				PdfPCell cell5 = new PdfPCell(new Paragraph(
						"ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â«ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¹ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¨:  "
								+ resultSet1.getString("mobile"),
						marathiFont));
				cell5.setBorderWidth(0.2f);
				cell5.setPaddingBottom(5);
				cell5.setBorderColor(BaseColor.LIGHT_GRAY);

				/*
				 * For Age
				 */
				PdfPCell cell6 = new PdfPCell(new Paragraph(
						"I.P.D ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â°ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â®ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢:  ",
						marathiFont));
				cell6.setBorderWidth(0.01f);
				cell6.setPaddingBottom(5);
				cell6.setBorderWidthLeft(0.2f);
				cell6.setBorderColor(BaseColor.LIGHT_GRAY);

				PdfPCell cell9 = new PdfPCell(new Paragraph(
						"ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â°ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¹ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¯Ã‚Â¿Ã‚Â½ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¨ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¨:  "
								+ diagnosis,
						marathiFont));
				cell9.setBorderWidth(0.2f);
				cell9.setPaddingBottom(2);
				cell9.setBorderColor(BaseColor.LIGHT_GRAY);

				/*
				 * For Diagnosis
				 */
				PdfPCell cell10 = new PdfPCell(new Paragraph(
						"ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¶ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¸ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â°ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â°ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¨ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Âµ:  ",
						marathiFont));
				cell10.setBorderWidth(0.01f);
				cell10.setPaddingBottom(5);
				cell10.setBorderWidthLeft(0.2f);
				cell10.setBorderColor(BaseColor.LIGHT_GRAY);

				PdfPCell cell11 = new PdfPCell(new Paragraph(" \n ", marathiFont));
				cell11.setBorderWidth(0.01f);
				cell11.setPaddingBottom(5);
				cell11.setColspan(1);
				cell11.setBorderWidthLeft(0.2f);
				cell11.setBorderColor(BaseColor.WHITE);

				/*
				 * adding all cell to the table to create tabular structure
				 */

				table.addCell(cell);
				table.addCell(cell22);
				table.addCell(cell2);
				table.addCell(cell3);
				table.addCell(cell4);
				table.addCell(cell5);
				table.addCell(cell6);
				table.addCell(cell9);
				table.addCell(cell10);
				table.addCell(cell11);

				document.add(table);
			}

			PdfPTable table31 = new PdfPTable(1);
			table31.setWidthPercentage(100);
			Rectangle rect21 = new Rectangle(270, 700);
			table31.setWidthPercentage(new float[] { 270 }, rect21);

			PdfPCell cell22 = new PdfPCell(new Paragraph(consentText1, marathiFont));
			cell22.setBorderWidth(0.01f);
			cell22.setPaddingBottom(5);
			cell22.setBorderWidthLeft(0.2f);
			cell22.setBorderColor(BaseColor.WHITE);

			PdfPCell cell2 = new PdfPCell(new Paragraph(
					"ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚ÂµÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â°ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â² ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¸ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â°ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Âµ ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â®ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã¢â‚¬Å“ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â° ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â®ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚ÂµÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â²ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¹ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ / ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â®ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â²ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚ÂµÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¨ ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã¢â‚¬Å“ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚ÂµÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â£ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â²ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¹ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡./  ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â®ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â²ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¹ ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¸ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â®ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã¢â‚¬Å“ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â²ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¹ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Âµ ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¸ ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â®ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚ÂªÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â°ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â£ ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â®ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¨ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¹ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡.",
					marathiFontBold));
			cell2.setBorderWidth(0.01f);
			cell2.setPaddingBottom(5);
			cell2.setBorderWidthLeft(0.2f);
			cell2.setBorderColor(BaseColor.WHITE);

			PdfPCell cell3 = new PdfPCell(new Paragraph("\n", marathiFont));
			cell3.setBorderWidth(0.01f);
			cell3.setPaddingBottom(5);
			cell3.setColspan(1);
			cell3.setBorderWidthLeft(0.2f);
			cell3.setBorderColor(BaseColor.WHITE);

			table31.addCell(cell22);
			table31.addCell(cell2);
			table31.addCell(cell3);

			document.add(table31);

			PdfPTable table3 = new PdfPTable(3);
			table3.setWidthPercentage(100);
			Rectangle rect2 = new Rectangle(270, 700);
			table3.setWidthPercentage(new float[] { 90, 90, 90 }, rect2);

			PdfPCell cell4 = new PdfPCell(new Paragraph(
					"ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¸ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â·ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â° ",
					marathiFontBold));
			cell4.setBorderWidth(0.01f);
			cell4.setPaddingBottom(5);
			cell4.setBorderWidthLeft(0.2f);
			cell4.setBorderColor(BaseColor.LIGHT_GRAY);

			PdfPCell cell5 = new PdfPCell(new Paragraph(
					"ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¸ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â·ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â° ",
					marathiFontBold));
			cell5.setBorderWidth(0.01f);
			cell5.setPaddingBottom(5);
			cell5.setBorderWidthLeft(0.2f);
			cell5.setBorderColor(BaseColor.LIGHT_GRAY);

			PdfPCell cell6 = new PdfPCell(new Paragraph(
					"ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â°ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¯Ã‚Â¿Ã‚Â½ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â£/ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚ÂªÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¶ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¸ ",
					marathiFontBold));
			cell6.setBorderWidth(0.01f);
			cell6.setPaddingBottom(5);
			cell6.setBorderWidthLeft(0.2f);
			cell6.setBorderColor(BaseColor.LIGHT_GRAY);

			PdfPCell cell7 = new PdfPCell(new Paragraph(
					"ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¸ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¹ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬: \t\t",
					marathiFont));
			cell7.setBorderWidth(0.01f);
			cell7.setPaddingBottom(5);
			cell7.setBorderWidthLeft(0.2f);
			cell7.setBorderColor(BaseColor.LIGHT_GRAY);

			PdfPCell cell8 = new PdfPCell(new Paragraph(
					"ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¸ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¹ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬: \t\t",
					marathiFont));
			cell8.setBorderWidth(0.01f);
			cell8.setPaddingBottom(5);
			cell8.setBorderWidthLeft(0.2f);
			cell8.setBorderColor(BaseColor.LIGHT_GRAY);

			PdfPCell cell9 = new PdfPCell(new Paragraph(
					"ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¸ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¹ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ / ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚ÂµÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¹ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¯Ã‚Â¿Ã‚Â½ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ ",
					marathiFont));
			cell9.setBorderWidth(0.01f);
			cell9.setPaddingBottom(5);
			cell9.setBorderWidthLeft(0.2f);
			cell9.setBorderColor(BaseColor.LIGHT_GRAY);

			PdfPCell cell10 = new PdfPCell(new Paragraph(
					"ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¨ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Âµ:\t\t",
					marathiFont));
			cell10.setBorderWidth(0.01f);
			cell10.setPaddingBottom(5);
			cell10.setBorderWidthLeft(0.2f);
			cell10.setBorderColor(BaseColor.LIGHT_GRAY);

			PdfPCell cell11 = new PdfPCell(new Paragraph(
					"ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¨ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Âµ: \t\t",
					marathiFont));
			cell11.setBorderWidth(0.01f);
			cell11.setPaddingBottom(5);
			cell11.setBorderWidthLeft(0.2f);
			cell11.setBorderColor(BaseColor.LIGHT_GRAY);

			PdfPCell cell12 = new PdfPCell(new Paragraph(" ", marathiFont));
			cell12.setBorderWidth(0.01f);
			cell12.setPaddingBottom(5);
			cell12.setBorderWidthLeft(0.2f);
			cell12.setBorderColorTop(BaseColor.WHITE);
			cell12.setBorderColorBottom(BaseColor.WHITE);
			cell12.setBorderColor(BaseColor.LIGHT_GRAY);

			PdfPCell cell13 = new PdfPCell(new Paragraph(
					"ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚ÂªÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾:\t\t",
					marathiFont));
			cell13.setBorderWidth(0.01f);
			cell13.setPaddingBottom(5);
			cell13.setBorderWidthLeft(0.2f);
			cell13.setBorderColor(BaseColor.LIGHT_GRAY);

			PdfPCell cell14 = new PdfPCell(new Paragraph(
					"ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚ÂªÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾: \t\t",
					marathiFont));
			cell14.setBorderWidth(0.01f);
			cell14.setPaddingBottom(5);
			cell14.setBorderWidthLeft(0.2f);
			cell14.setBorderColor(BaseColor.LIGHT_GRAY);

			PdfPCell cell15 = new PdfPCell(new Paragraph(" ", marathiFont));
			cell15.setBorderWidth(0.01f);
			cell15.setPaddingBottom(5);
			cell15.setBorderWidthLeft(0.2f);
			cell15.setBorderColorTop(BaseColor.WHITE);
			cell15.setBorderColorBottom(BaseColor.WHITE);
			cell15.setBorderColor(BaseColor.LIGHT_GRAY);

			PdfPCell cell16 = new PdfPCell(new Paragraph(
					"ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¨ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡:\t\t",
					marathiFont));
			cell16.setBorderWidth(0.01f);
			cell16.setPaddingBottom(5);
			cell16.setBorderWidthLeft(0.2f);
			cell16.setBorderColor(BaseColor.LIGHT_GRAY);

			PdfPCell cell17 = new PdfPCell(new Paragraph(
					"ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¨ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡: \t\t",
					marathiFont));
			cell17.setBorderWidth(0.01f);
			cell17.setPaddingBottom(5);
			cell17.setBorderWidthLeft(0.2f);
			cell17.setBorderColor(BaseColor.LIGHT_GRAY);

			PdfPCell cell18 = new PdfPCell(new Paragraph(" ", marathiFont));
			cell18.setBorderWidth(0.01f);
			cell18.setPaddingBottom(5);
			cell18.setBorderWidthLeft(0.2f);
			cell18.setBorderColorTop(BaseColor.WHITE);
			cell18.setBorderColor(BaseColor.LIGHT_GRAY);

			PdfPCell cell19 = new PdfPCell(new Paragraph(
					"ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â«ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¹ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¨:\t\t",
					marathiFont));
			cell19.setBorderWidth(0.01f);
			cell19.setPaddingBottom(5);
			cell19.setBorderWidthLeft(0.2f);
			cell19.setBorderColor(BaseColor.LIGHT_GRAY);

			PdfPCell cell20 = new PdfPCell(new Paragraph(
					"ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â«ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¹ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¨:\t\t",
					marathiFont));
			cell20.setBorderWidth(0.01f);
			cell20.setPaddingBottom(5);
			cell20.setBorderWidthLeft(0.2f);
			cell20.setBorderColor(BaseColor.LIGHT_GRAY);

			PdfPCell cell21 = new PdfPCell(new Paragraph(
					"ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿.:       /      /          ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚ÂµÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â³:\t",
					marathiFont));
			cell21.setBorderWidth(0.01f);
			cell21.setPaddingBottom(5);
			cell21.setBorderWidthLeft(0.2f);
			cell21.setBorderColor(BaseColor.LIGHT_GRAY);

			PdfPCell cell25 = new PdfPCell(new Paragraph(
					"ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚ÂµÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¯:           ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚ÂµÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â°ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â·ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡    ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾.      /      / \t",
					marathiFont));
			cell25.setBorderWidth(0.01f);
			cell25.setPaddingBottom(5);
			cell25.setBorderWidthLeft(0.2f);
			cell25.setBorderColor(BaseColor.LIGHT_GRAY);

			PdfPCell cell23 = new PdfPCell(new Paragraph(
					"ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚ÂµÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¯:           ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚ÂµÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â°ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â·ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡    ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾.      /      / \t",
					marathiFont));
			cell23.setBorderWidth(0.01f);
			cell23.setPaddingBottom(5);
			cell23.setBorderWidthLeft(0.2f);
			cell23.setBorderColor(BaseColor.LIGHT_GRAY);

			PdfPCell cell24 = new PdfPCell(new Paragraph(
					"ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â«ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¹ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¨ ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¨ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡.:\t\t",
					marathiFont));
			cell24.setBorderWidth(0.01f);
			cell24.setPaddingBottom(5);
			cell24.setBorderWidthLeft(0.2f);
			cell24.setBorderColor(BaseColor.LIGHT_GRAY);

			PdfPCell cell26 = new PdfPCell(new Paragraph("\n", marathiFont));
			cell26.setBorderWidth(0.01f);
			cell26.setPaddingBottom(5);
			cell26.setColspan(1);
			cell26.setBorderWidthLeft(0.2f);
			cell26.setBorderColor(BaseColor.WHITE);

			table3.addCell(cell4);
			table3.addCell(cell5);
			table3.addCell(cell6);
			table3.addCell(cell7);
			table3.addCell(cell8);
			table3.addCell(cell9);
			table3.addCell(cell10);
			table3.addCell(cell11);
			table3.addCell(cell12);
			table3.addCell(cell13);
			table3.addCell(cell14);
			table3.addCell(cell15);
			table3.addCell(cell16);
			table3.addCell(cell17);
			table3.addCell(cell18);
			table3.addCell(cell19);
			table3.addCell(cell20);
			table3.addCell(cell21);
			table3.addCell(cell25);
			table3.addCell(cell23);
			table3.addCell(cell24);
			table3.addCell(cell26);

			document.add(table3);

			PdfPTable table = new PdfPTable(1);

			table.setFooterRows(1);
			table.setWidthPercentage(100);
			Rectangle rect = new Rectangle(270, 700);
			table.setWidthPercentage(new float[] { 270 }, rect);

			PdfPCell cell = new PdfPCell(new Paragraph(
					"Guarded Visual Prognosis / ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â·ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¸ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¸ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â§ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â°ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â£ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¸ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¶ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ ",
					marathiFontHeader));
			cell.setPaddingTop(120);
			cell.setPaddingBottom(10);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell.setUseBorderPadding(true);
			cell.setColspan(1);
			cell.setBorderWidthBottom(1f);
			cell.setBorderColor(BaseColor.WHITE);

			PdfPCell cell27 = new PdfPCell(new Paragraph(consentText2, marathiFont));
			cell27.setBorderWidth(0.01f);
			cell27.setPaddingBottom(5);
			cell27.setBorderWidthLeft(0.2f);
			cell27.setBorderColor(BaseColor.WHITE);

			PdfPCell cell28 = new PdfPCell(new Paragraph("\n", marathiFont));
			cell28.setBorderWidth(0.01f);
			cell28.setPaddingBottom(5);
			cell28.setColspan(1);
			cell28.setBorderWidthLeft(0.2f);
			cell28.setBorderColor(BaseColor.WHITE);

			table.addCell(cell);
			table.addCell(cell27);
			table.addCell(cell28);

			document.add(table);

			PdfPTable table4 = new PdfPTable(3);
			table4.setWidthPercentage(100);
			Rectangle rect3 = new Rectangle(270, 700);
			table4.setWidthPercentage(new float[] { 90, 90, 90 }, rect3);

			PdfPCell cell29 = new PdfPCell(new Paragraph(
					"ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¸ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â·ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â° ",
					marathiFontBold));
			cell29.setBorderWidth(0.01f);
			cell29.setPaddingBottom(5);
			cell29.setBorderWidthLeft(0.2f);
			cell29.setBorderColor(BaseColor.LIGHT_GRAY);

			PdfPCell cell30 = new PdfPCell(new Paragraph(
					"ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¸ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â·ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â° ",
					marathiFontBold));
			cell30.setBorderWidth(0.01f);
			cell30.setPaddingBottom(5);
			cell30.setBorderWidthLeft(0.2f);
			cell30.setBorderColor(BaseColor.LIGHT_GRAY);

			PdfPCell cell31 = new PdfPCell(new Paragraph(
					"ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â°ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¯Ã‚Â¿Ã‚Â½ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â£/ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚ÂªÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¶ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¸ ",
					marathiFontBold));
			cell31.setBorderWidth(0.01f);
			cell31.setPaddingBottom(5);
			cell31.setBorderWidthLeft(0.2f);
			cell31.setBorderColor(BaseColor.LIGHT_GRAY);

			PdfPCell cell32 = new PdfPCell(new Paragraph(
					"ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¸ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¹ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬: \t\t",
					marathiFont));
			cell32.setBorderWidth(0.01f);
			cell32.setPaddingBottom(5);
			cell32.setBorderWidthLeft(0.2f);
			cell32.setBorderColor(BaseColor.LIGHT_GRAY);

			PdfPCell cell33 = new PdfPCell(new Paragraph(
					"ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¸ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¹ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬: \t\t",
					marathiFont));
			cell33.setBorderWidth(0.01f);
			cell33.setPaddingBottom(5);
			cell33.setBorderWidthLeft(0.2f);
			cell33.setBorderColor(BaseColor.LIGHT_GRAY);

			PdfPCell cell34 = new PdfPCell(new Paragraph(
					"ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¸ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¹ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ / ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚ÂµÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¹ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¯Ã‚Â¿Ã‚Â½ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ ",
					marathiFont));
			cell34.setBorderWidth(0.01f);
			cell34.setPaddingBottom(5);
			cell34.setBorderWidthLeft(0.2f);
			cell34.setBorderColor(BaseColor.LIGHT_GRAY);

			PdfPCell cell35 = new PdfPCell(new Paragraph(
					"ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¨ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Âµ:\t\t",
					marathiFont));
			cell35.setBorderWidth(0.01f);
			cell35.setPaddingBottom(5);
			cell35.setBorderWidthLeft(0.2f);
			cell35.setBorderColor(BaseColor.LIGHT_GRAY);

			PdfPCell cell36 = new PdfPCell(new Paragraph(
					"ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¨ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Âµ: \t\t",
					marathiFont));
			cell36.setBorderWidth(0.01f);
			cell36.setPaddingBottom(5);
			cell36.setBorderWidthLeft(0.2f);
			cell36.setBorderColor(BaseColor.LIGHT_GRAY);

			PdfPCell cell37 = new PdfPCell(new Paragraph(" ", marathiFont));
			cell37.setBorderWidth(0.01f);
			cell37.setPaddingBottom(5);
			cell37.setBorderWidthLeft(0.2f);
			cell37.setBorderColorTop(BaseColor.WHITE);
			cell37.setBorderColorBottom(BaseColor.WHITE);
			cell37.setBorderColor(BaseColor.LIGHT_GRAY);

			PdfPCell cell38 = new PdfPCell(new Paragraph(
					"ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚ÂªÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾:\t\t",
					marathiFont));
			cell38.setBorderWidth(0.01f);
			cell38.setPaddingBottom(5);
			cell38.setBorderWidthLeft(0.2f);
			cell38.setBorderColor(BaseColor.LIGHT_GRAY);

			PdfPCell cell39 = new PdfPCell(new Paragraph(
					"ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚ÂªÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾: \t\t",
					marathiFont));
			cell39.setBorderWidth(0.01f);
			cell39.setPaddingBottom(5);
			cell39.setBorderWidthLeft(0.2f);
			cell39.setBorderColor(BaseColor.LIGHT_GRAY);

			PdfPCell cell40 = new PdfPCell(new Paragraph(" ", marathiFont));
			cell40.setBorderWidth(0.01f);
			cell40.setPaddingBottom(5);
			cell40.setBorderWidthLeft(0.2f);
			cell40.setBorderColorTop(BaseColor.WHITE);
			cell40.setBorderColorBottom(BaseColor.WHITE);
			cell40.setBorderColor(BaseColor.LIGHT_GRAY);

			PdfPCell cell41 = new PdfPCell(new Paragraph(
					"ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¨ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡:\t\t",
					marathiFont));
			cell41.setBorderWidth(0.01f);
			cell41.setPaddingBottom(5);
			cell41.setBorderWidthLeft(0.2f);
			cell41.setBorderColor(BaseColor.LIGHT_GRAY);

			PdfPCell cell42 = new PdfPCell(new Paragraph(
					"ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¨ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡: \t\t",
					marathiFont));
			cell42.setBorderWidth(0.01f);
			cell42.setPaddingBottom(5);
			cell42.setBorderWidthLeft(0.2f);
			cell42.setBorderColor(BaseColor.LIGHT_GRAY);

			PdfPCell cell43 = new PdfPCell(new Paragraph(" ", marathiFont));
			cell43.setBorderWidth(0.01f);
			cell43.setPaddingBottom(5);
			cell43.setBorderWidthLeft(0.2f);
			cell43.setBorderColorTop(BaseColor.WHITE);
			cell43.setBorderColor(BaseColor.LIGHT_GRAY);

			PdfPCell cell44 = new PdfPCell(new Paragraph(
					"ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â«ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¹ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¨:\t\t",
					marathiFont));
			cell44.setBorderWidth(0.01f);
			cell44.setPaddingBottom(5);
			cell44.setBorderWidthLeft(0.2f);
			cell44.setBorderColor(BaseColor.LIGHT_GRAY);

			PdfPCell cell45 = new PdfPCell(new Paragraph(
					"ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â«ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¹ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¨:\t\t",
					marathiFont));
			cell45.setBorderWidth(0.01f);
			cell45.setPaddingBottom(5);
			cell45.setBorderWidthLeft(0.2f);
			cell45.setBorderColor(BaseColor.LIGHT_GRAY);

			PdfPCell cell46 = new PdfPCell(new Paragraph(
					"ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿.:       /      /          ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚ÂµÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â³:\t",
					marathiFont));
			cell46.setBorderWidth(0.01f);
			cell46.setPaddingBottom(5);
			cell46.setBorderWidthLeft(0.2f);
			cell46.setBorderColor(BaseColor.LIGHT_GRAY);

			PdfPCell cell47 = new PdfPCell(new Paragraph(
					"ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚ÂµÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¯:           ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚ÂµÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â°ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â·ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡    ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾.      /      / \t",
					marathiFont));
			cell47.setBorderWidth(0.01f);
			cell47.setPaddingBottom(5);
			cell47.setBorderWidthLeft(0.2f);
			cell47.setBorderColor(BaseColor.LIGHT_GRAY);

			PdfPCell cell48 = new PdfPCell(new Paragraph(
					"ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚ÂµÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¯:           ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚ÂµÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â°ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â·ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡    ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾.      /      / \t",
					marathiFont));
			cell48.setBorderWidth(0.01f);
			cell48.setPaddingBottom(5);
			cell48.setBorderWidthLeft(0.2f);
			cell48.setBorderColor(BaseColor.LIGHT_GRAY);

			PdfPCell cell49 = new PdfPCell(new Paragraph(
					"ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â«ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¹ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¨ ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¨ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡.:\t\t",
					marathiFont));
			cell49.setBorderWidth(0.01f);
			cell49.setPaddingBottom(5);
			cell49.setBorderWidthLeft(0.2f);
			cell49.setBorderColor(BaseColor.LIGHT_GRAY);

			PdfPCell cell50 = new PdfPCell(new Paragraph("\n", marathiFont));
			cell50.setBorderWidth(0.01f);
			cell50.setPaddingBottom(5);
			cell50.setColspan(1);
			cell50.setBorderWidthLeft(0.2f);
			cell50.setBorderColor(BaseColor.WHITE);

			table4.addCell(cell29);
			table4.addCell(cell30);
			table4.addCell(cell31);
			table4.addCell(cell32);
			table4.addCell(cell33);
			table4.addCell(cell34);
			table4.addCell(cell35);
			table4.addCell(cell36);
			table4.addCell(cell37);
			table4.addCell(cell38);
			table4.addCell(cell39);
			table4.addCell(cell40);
			table4.addCell(cell41);
			table4.addCell(cell42);
			table4.addCell(cell43);
			table4.addCell(cell44);
			table4.addCell(cell45);
			table4.addCell(cell46);
			table4.addCell(cell47);
			table4.addCell(cell48);
			table4.addCell(cell49);
			table4.addCell(cell50);

			document.add(table4);

			PdfPTable table1 = new PdfPTable(1);

			table1.setWidthPercentage(100);
			Rectangle rect1 = new Rectangle(270, 700);
			table1.setWidthPercentage(new float[] { 270 }, rect1);

			PdfPCell cell51 = new PdfPCell(new Paragraph(
					"High Risk Consent / ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚ÂµÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¶ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â· ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¸ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â®ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚ÂªÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â°",
					marathiFontHeader));
			cell51.setPaddingTop(120);
			cell51.setPaddingBottom(10);
			cell51.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell51.setUseBorderPadding(true);
			cell51.setColspan(1);
			cell51.setBorderWidthBottom(1f);
			cell51.setBorderColor(BaseColor.WHITE);

			PdfPCell cell52 = new PdfPCell(new Paragraph(consentText3, marathiFont));
			cell52.setBorderWidth(0.01f);
			cell52.setPaddingBottom(5);
			cell52.setBorderWidthLeft(0.2f);
			cell52.setBorderColor(BaseColor.WHITE);

			PdfPCell cell54 = new PdfPCell(new Paragraph(
					"ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚ÂµÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â°ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â² ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¸ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â°ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Âµ ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â®ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã¢â‚¬Å“ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â° ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â®ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚ÂµÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â²ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¹ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ / ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â®ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â²ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚ÂµÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¨ ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã¢â‚¬Å“ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚ÂµÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â£ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â²ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¹ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡./  ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â®ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â²ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¹ ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¸ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â®ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã¢â‚¬Å“ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â²ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¹ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Âµ ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¸ ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â®ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚ÂªÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â°ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â£ ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â®ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¨ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¹ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡.",
					marathiFontBold));
			cell54.setBorderWidth(0.01f);
			cell54.setPaddingBottom(5);
			cell54.setBorderWidthLeft(0.2f);
			cell54.setBorderColor(BaseColor.WHITE);

			PdfPCell cell53 = new PdfPCell(new Paragraph("\n", marathiFont));
			cell53.setBorderWidth(0.01f);
			cell53.setPaddingBottom(5);
			cell53.setColspan(1);
			cell53.setBorderWidthLeft(0.2f);
			cell53.setBorderColor(BaseColor.WHITE);

			table1.addCell(cell51);
			table1.addCell(cell52);
			table1.addCell(cell54);
			table1.addCell(cell53);

			document.add(table1);

			PdfPTable table2 = new PdfPTable(3);
			table2.setWidthPercentage(100);
			Rectangle rect4 = new Rectangle(270, 700);
			table2.setWidthPercentage(new float[] { 90, 90, 90 }, rect4);

			PdfPCell cell55 = new PdfPCell(new Paragraph(
					"ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¸ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â·ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â° ",
					marathiFontBold));
			cell55.setBorderWidth(0.01f);
			cell55.setPaddingBottom(5);
			cell55.setBorderWidthLeft(0.2f);
			cell55.setBorderColor(BaseColor.LIGHT_GRAY);

			PdfPCell cell56 = new PdfPCell(new Paragraph(
					"ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¸ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â·ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â° ",
					marathiFontBold));
			cell56.setBorderWidth(0.01f);
			cell56.setPaddingBottom(5);
			cell56.setBorderWidthLeft(0.2f);
			cell56.setBorderColor(BaseColor.LIGHT_GRAY);

			PdfPCell cell57 = new PdfPCell(new Paragraph(
					"ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â°ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¯Ã‚Â¿Ã‚Â½ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â£/ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚ÂªÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¶ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¸ ",
					marathiFontBold));
			cell57.setBorderWidth(0.01f);
			cell57.setPaddingBottom(5);
			cell57.setBorderWidthLeft(0.2f);
			cell57.setBorderColor(BaseColor.LIGHT_GRAY);

			PdfPCell cell58 = new PdfPCell(new Paragraph(
					"ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¸ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¹ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬: \t\t",
					marathiFont));
			cell58.setBorderWidth(0.01f);
			cell58.setPaddingBottom(5);
			cell58.setBorderWidthLeft(0.2f);
			cell58.setBorderColor(BaseColor.LIGHT_GRAY);

			PdfPCell cell59 = new PdfPCell(new Paragraph(
					"ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¸ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¹ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬: \t\t",
					marathiFont));
			cell59.setBorderWidth(0.01f);
			cell59.setPaddingBottom(5);
			cell59.setBorderWidthLeft(0.2f);
			cell59.setBorderColor(BaseColor.LIGHT_GRAY);

			PdfPCell cell60 = new PdfPCell(new Paragraph(
					"ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¸ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¹ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ / ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚ÂµÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¹ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¯Ã‚Â¿Ã‚Â½ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ ",
					marathiFont));
			cell60.setBorderWidth(0.01f);
			cell60.setPaddingBottom(5);
			cell60.setBorderWidthLeft(0.2f);
			cell60.setBorderColor(BaseColor.LIGHT_GRAY);

			PdfPCell cell61 = new PdfPCell(new Paragraph(
					"ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¨ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Âµ:\t\t",
					marathiFont));
			cell61.setBorderWidth(0.01f);
			cell61.setPaddingBottom(5);
			cell61.setBorderWidthLeft(0.2f);
			cell61.setBorderColor(BaseColor.LIGHT_GRAY);

			PdfPCell cell62 = new PdfPCell(new Paragraph(
					"ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¨ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Âµ: \t\t",
					marathiFont));
			cell62.setBorderWidth(0.01f);
			cell62.setPaddingBottom(5);
			cell62.setBorderWidthLeft(0.2f);
			cell62.setBorderColor(BaseColor.LIGHT_GRAY);

			PdfPCell cell63 = new PdfPCell(new Paragraph(" ", marathiFont));
			cell63.setBorderWidth(0.01f);
			cell63.setPaddingBottom(5);
			cell63.setBorderWidthLeft(0.2f);
			cell63.setBorderColorTop(BaseColor.WHITE);
			cell63.setBorderColorBottom(BaseColor.WHITE);
			cell63.setBorderColor(BaseColor.LIGHT_GRAY);

			PdfPCell cell64 = new PdfPCell(new Paragraph(
					"ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚ÂªÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾:\t\t",
					marathiFont));
			cell64.setBorderWidth(0.01f);
			cell64.setPaddingBottom(5);
			cell64.setBorderWidthLeft(0.2f);
			cell64.setBorderColor(BaseColor.LIGHT_GRAY);

			PdfPCell cell65 = new PdfPCell(new Paragraph(
					"ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚ÂªÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾: \t\t",
					marathiFont));
			cell65.setBorderWidth(0.01f);
			cell65.setPaddingBottom(5);
			cell65.setBorderWidthLeft(0.2f);
			cell65.setBorderColor(BaseColor.LIGHT_GRAY);

			PdfPCell cell66 = new PdfPCell(new Paragraph(" ", marathiFont));
			cell66.setBorderWidth(0.01f);
			cell40.setPaddingBottom(5);
			cell66.setBorderWidthLeft(0.2f);
			cell66.setBorderColorTop(BaseColor.WHITE);
			cell66.setBorderColorBottom(BaseColor.WHITE);
			cell66.setBorderColor(BaseColor.LIGHT_GRAY);

			PdfPCell cell67 = new PdfPCell(new Paragraph(
					"ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¨ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡:\t\t",
					marathiFont));
			cell67.setBorderWidth(0.01f);
			cell67.setPaddingBottom(5);
			cell67.setBorderWidthLeft(0.2f);
			cell67.setBorderColor(BaseColor.LIGHT_GRAY);

			PdfPCell cell68 = new PdfPCell(new Paragraph(
					"ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¨ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡: \t\t",
					marathiFont));
			cell68.setBorderWidth(0.01f);
			cell68.setPaddingBottom(5);
			cell68.setBorderWidthLeft(0.2f);
			cell68.setBorderColor(BaseColor.LIGHT_GRAY);

			PdfPCell cell69 = new PdfPCell(new Paragraph(" ", marathiFont));
			cell69.setBorderWidth(0.01f);
			cell69.setPaddingBottom(5);
			cell69.setBorderWidthLeft(0.2f);
			cell69.setBorderColorTop(BaseColor.WHITE);
			cell69.setBorderColor(BaseColor.LIGHT_GRAY);

			PdfPCell cell70 = new PdfPCell(new Paragraph(
					"ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â«ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¹ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¨:\t\t",
					marathiFont));
			cell70.setBorderWidth(0.01f);
			cell70.setPaddingBottom(5);
			cell70.setBorderWidthLeft(0.2f);
			cell70.setBorderColor(BaseColor.LIGHT_GRAY);

			PdfPCell cell71 = new PdfPCell(new Paragraph(
					"ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â«ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¹ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¨:\t\t",
					marathiFont));
			cell71.setBorderWidth(0.01f);
			cell71.setPaddingBottom(5);
			cell71.setBorderWidthLeft(0.2f);
			cell71.setBorderColor(BaseColor.LIGHT_GRAY);

			PdfPCell cell72 = new PdfPCell(new Paragraph(
					"ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿.:       /      /          ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚ÂµÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â³:\t",
					marathiFont));
			cell72.setBorderWidth(0.01f);
			cell72.setPaddingBottom(5);
			cell72.setBorderWidthLeft(0.2f);
			cell72.setBorderColor(BaseColor.LIGHT_GRAY);

			PdfPCell cell73 = new PdfPCell(new Paragraph(
					"ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚ÂµÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¯:           ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚ÂµÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â°ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â·ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡    ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾.      /      / \t",
					marathiFont));
			cell73.setBorderWidth(0.01f);
			cell73.setPaddingBottom(5);
			cell73.setBorderWidthLeft(0.2f);
			cell73.setBorderColor(BaseColor.LIGHT_GRAY);

			PdfPCell cell74 = new PdfPCell(new Paragraph(
					"ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚ÂµÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¯:           ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚ÂµÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â°ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â·ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡    ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾.      /      / \t",
					marathiFont));
			cell74.setBorderWidth(0.01f);
			cell74.setPaddingBottom(5);
			cell74.setBorderWidthLeft(0.2f);
			cell74.setBorderColor(BaseColor.LIGHT_GRAY);

			PdfPCell cell75 = new PdfPCell(new Paragraph(
					"ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â«ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¹ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¨ ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¨ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡.:\t\t",
					marathiFont));
			cell75.setBorderWidth(0.01f);
			cell75.setPaddingBottom(5);
			cell75.setBorderWidthLeft(0.2f);
			cell75.setBorderColor(BaseColor.LIGHT_GRAY);

			PdfPCell cell76 = new PdfPCell(new Paragraph("\n", marathiFont));
			cell76.setBorderWidth(0.01f);
			cell76.setPaddingBottom(5);
			cell76.setColspan(1);
			cell76.setBorderWidthLeft(0.2f);
			cell76.setBorderColor(BaseColor.WHITE);

			table2.addCell(cell55);
			table2.addCell(cell56);
			table2.addCell(cell57);
			table2.addCell(cell58);
			table2.addCell(cell59);
			table2.addCell(cell60);
			table2.addCell(cell61);
			table2.addCell(cell62);
			table2.addCell(cell63);
			table2.addCell(cell64);
			table2.addCell(cell65);
			table2.addCell(cell66);
			table2.addCell(cell67);
			table2.addCell(cell68);
			table2.addCell(cell69);
			table2.addCell(cell70);
			table2.addCell(cell71);
			table2.addCell(cell72);
			table2.addCell(cell73);
			table2.addCell(cell74);
			table2.addCell(cell75);
			table2.addCell(cell76);

			document.add(table2);

			document.close();

			status = "success";

			System.out.println("Successfully created Consent pdf ");

		} catch (Exception exception) {
			exception.printStackTrace();
			status = "error";
		}
		return status;
	}

	/**
	 * 
	 * @param patientID
	 * @param visitID
	 * @param realPath
	 * @param pdfFilePath
	 * @return
	 */
	public String convertGenPhyVisitPDF(int patientID, int visitID, String realPath, String pdfFilePath,
			String visitType, int practiceID, String username, AmazonS3 s3, String s3reportFilePath,
			String bucketName) {

		int count = 1;

		String visitDate = null;
		String diagnosis = null;
		String comment = null;
		String visitTimeFrom = null;
		String visitTimeTo = null;
		String smoking = null;
		String smokingDesc = null;
		String alcohol = null;
		String alcoholDesc = null;
		String tobacco = null;
		String tobaccoDesc = null;
		String veg = null;
		String vegDesc = null;
		String nonveg = null;
		String nonvegDesc = null;
		String foodChoice = null;
		String foodChoiceDetails = null;
		String docName = null;
		String signature = null;
		Image signImg = null;
		Image LHimg = null;
		String status = null;
		String onExamination = null;

		/*
		 * Declaring variable which stores the location for FreeSans.ttf file to print
		 * marathi text on pdf
		 */
		String marathiFontDir = realPath + "fonts/FreeSans.ttf";

		ConfigurationUtil configXMLUtil = new ConfigurationUtil();

		try {
			connection = getConnection();

			/*
			 * Generate the queries to fetch details
			 */
			String fetchDetailQuery1 = QueryMaker.OPD_PDF_RETRIEVE_PATIENT;

			preparedStatement1 = connection.prepareStatement(fetchDetailQuery1);
			preparedStatement1.setInt(1, patientID);
			resultSet1 = preparedStatement1.executeQuery();

			/*
			 * Generating query 2
			 */
			String fetchDetailQuery2 = QueryMaker.OPD_PDF_RETRIEVE_VISIT;

			preparedStatement2 = connection.prepareStatement(fetchDetailQuery2);
			preparedStatement2.setInt(1, visitID);
			resultSet2 = preparedStatement2.executeQuery();

			// To fetch visit details from Visit Table
			while (resultSet2.next()) {
				SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");

				SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");

				if (resultSet2.getString("visitDate") == null || resultSet2.getString("visitDate") == ""
						|| resultSet2.getString("visitDate").isEmpty()) {
					visitDate = "";
				} else {
					visitDate = dateFormat.format(resultSet2.getDate("visitDate"));
				}

				diagnosis = resultSet2.getString("diagnosis");
				visitTimeFrom = resultSet2.getString("visitTimeFrom");
				visitTimeTo = resultSet2.getString("visitTimeTo");
				if (resultSet2.getString("onExamination") == null || resultSet2.getString("onExamination") == "") {
					onExamination = null;
				} else if (resultSet2.getString("onExamination").isEmpty()) {
					onExamination = null;
				} else {
					onExamination = resultSet2.getString("onExamination");
				}
			}

			// boolean orthoCheck = false;

			// Check if the diagnosis is of type JSON
			if (new JSONValidator().isValid(diagnosis)) {

				// orthoCheck = true;

				org.json.JSONArray diagnosisJSONArray = new org.json.JSONArray(diagnosis);

				diagnosis = "";

				for (int i_counter = 0; i_counter < diagnosisJSONArray.length(); i_counter++) {

					org.json.JSONObject diagnosisJSONObject = diagnosisJSONArray.getJSONObject(i_counter);

					diagnosis = diagnosis + ", " + diagnosisJSONObject.getString("diagnosis");

				}

				if (diagnosis.startsWith(",")) {
					diagnosis = diagnosis.substring(1);
				}
			}

			/*
			 * Generate the queries to fetch details
			 */
			String fetchDetailQuery3 = QueryMaker.OPD_PDF_RETRIEVE_PRESENT_COMPLAINTS;

			preparedStatement3 = connection.prepareStatement(fetchDetailQuery3);
			preparedStatement3.setInt(1, visitID);
			resultSet3 = preparedStatement3.executeQuery();

			/*
			 * Generate the queries to fetch details
			 */
			String fetchDetailQuery4 = QueryMaker.OPD_PDF_RETRIEVE_MEDICAL_HISTORY;

			preparedStatement4 = connection.prepareStatement(fetchDetailQuery4);
			preparedStatement4.setInt(1, patientID);
			resultSet4 = preparedStatement4.executeQuery();

			/*
			 * Generate the queries to fetch details
			 */
			String fetchDetailQuery5 = QueryMaker.OPD_PDF_RETRIEVE_PERSONAL_HISTORY;

			preparedStatement5 = connection.prepareStatement(fetchDetailQuery5);
			preparedStatement5.setInt(1, patientID);
			resultSet5 = preparedStatement5.executeQuery();
			while (resultSet5.next()) {
				smoking = resultSet5.getString("smoking");
				smokingDesc = resultSet5.getString("smokingDetails");
				alcohol = resultSet5.getString("alcohol");
				alcoholDesc = resultSet5.getString("alcoholDetails");
				tobacco = resultSet5.getString("tobacco");
				tobaccoDesc = resultSet5.getString("tobaccoDetails");
				foodChoice = resultSet5.getString("foodChoice");
				foodChoiceDetails = resultSet5.getString("foodChoiceDetails");

			}

			/*
			 * Generate the queries to fetch details
			 */
			String fetchDetailQuery6 = QueryMaker.OPD_PDF_RETRIEVE_PRESCRIPTION_HISTORY;

			preparedStatement6 = connection.prepareStatement(fetchDetailQuery6);
			preparedStatement6.setInt(1, patientID);
			resultSet6 = preparedStatement6.executeQuery();

			/*
			 * Generate the queries to fetch details
			 */
			String fetchDetailQuery7 = QueryMaker.OPD_PDF_RETRIEVE_VITAL_SIGNS;

			preparedStatement7 = connection.prepareStatement(fetchDetailQuery7);
			preparedStatement7.setInt(1, visitID);
			resultSet7 = preparedStatement7.executeQuery();

			RegistrationDAOinf registrationDAOinf = new RegistrationDAOImpl();

			// Retrieving USER Details by PracticeID
			HashMap<String, String> MDMap = registrationDAOinf.retrieveUserDetails(practiceID, username);

			// File SignatureFile = new File(logoFilePath + File.separator +
			// MDMap.get("Signature"));
			signature = MDMap.get("Signature");
			docName = MDMap.get("FirstName") + " " + MDMap.get("LastName");

			System.out.println("doc name ::" + docName);
			System.out.println("sign img ::" + signature);

			if (signature == "" || signature == null) {
				signImg = null;
			} else if (signature.isEmpty()) {
				signImg = null;
			} else {

				S3ObjectInputStream s3ObjectInputStream = s3
						.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, signature))
						.getObjectContent();

				IOUtils.copy(s3ObjectInputStream, new FileOutputStream(new File(realPath + "images/" + signature)));

				signImg = Image.getInstance(realPath + "images/" + signature);
			}

			/*
			 * Getting image path from XML
			 */
			String A5ImagePath = configXMLUtil.getLetterHeadImage();

			/*
			 * Getting page size from XMl
			 */

			String pageSize = configXMLUtil.getPageSize();
			pageSize = "A4";
			/*
			 * Setting path to store PDF file
			 */
			File file = new File(realPath + "/" + pdfFilePath);

			/*
			 * Creating Document for PDF
			 */
			Document document = null;

			/*
			 * Checking whether pageSize tag in XMl contains A5 or A4, according to that
			 * setting PDF page size
			 */
			if (pageSize.equals("A5")) {
				document = new Document(PageSize.A5);
			} else if (pageSize.equals("A4")) {
				document = new Document(PageSize.A4);
			}

			PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(file));

			Font Font1 = new Font(Font.FontFamily.TIMES_ROMAN, 10, Font.NORMAL);
			Font Font3 = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.NORMAL);
			Font Font2 = new Font(Font.FontFamily.TIMES_ROMAN, 8, Font.NORMAL);
			Font Font4 = new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.BOLD);
			Font Font5 = new Font(Font.FontFamily.TIMES_ROMAN, 10, Font.BOLD);
			Font Font6 = new Font(Font.FontFamily.TIMES_ROMAN, 11, Font.BOLD);
			Font Font7 = new Font(Font.FontFamily.TIMES_ROMAN, 14, Font.BOLD);
			Font Font8 = new Font(Font.FontFamily.TIMES_ROMAN, 16, Font.BOLD);
			Font mainContent = new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.NORMAL);
			Font mainContent1 = new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.NORMAL);
			mainContent1.setColor(BaseColor.GRAY);
			/*
			 * Defining marathi font
			 */
			Font marathiFont = FontFactory.getFont(marathiFontDir, BaseFont.IDENTITY_H, BaseFont.EMBEDDED);

			document.open();

			document.setMargins(36, 36, 55, 36);
			/*
			 * Adding image
			 */
			PdfContentByte canvas = writer.getDirectContentUnder();

			/*
			 * Checking whether pageSize is A4 or A5, according to that background image is
			 * being set
			 */

			Image image;

			if (pageSize.equals("A5")) {
				if (A5ImagePath == null || A5ImagePath == "") {
					image = null;

				} else {

					if (A5ImagePath.isEmpty()) {
						image = null;
					} else {
						// A5ImagePath = logoFilePath + A5ImagePath;
						System.out.println("A5img--::" + A5ImagePath);

						S3ObjectInputStream s3ObjectInputStream = s3
								.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, A5ImagePath))
								.getObjectContent();

						IOUtils.copy(s3ObjectInputStream,
								new FileOutputStream(new File(realPath + "images/" + A5ImagePath)));

						image = Image.getInstance(realPath + "images/" + A5ImagePath);
						image.scaleToFit(PageSize.A5.getWidth(), PageSize.A5.getHeight());
						image.setAbsolutePosition(0, 0);

						canvas.saveState();
						PdfGState state = new PdfGState();
						canvas.setGState(state);
						canvas.addImage(image);
						canvas.restoreState();
					}

				}
			} else if (pageSize.equals("A4")) {
				System.out.println("A4img::" + A5ImagePath);
				if (A5ImagePath == null || A5ImagePath == "") {

					image = null;

				} else {

					if (A5ImagePath.isEmpty()) {

						image = null;
					} else {

						S3ObjectInputStream s3ObjectInputStream = s3
								.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, A5ImagePath))
								.getObjectContent();

						IOUtils.copy(s3ObjectInputStream,
								new FileOutputStream(new File(realPath + "images/" + A5ImagePath)));

						image = Image.getInstance(realPath + "images/" + A5ImagePath);

						image.scaleToFit(PageSize.A4.getWidth(), PageSize.A4.getHeight());
						image.setAbsolutePosition(0, 0);

						canvas.saveState();
						PdfGState state = new PdfGState();
						canvas.setGState(state);
						canvas.addImage(image);
						canvas.restoreState();
					}

				}
			}

			/*
			 * Setting header
			 */
			document.addCreator("eDhanvantari");
			document.addTitle("General Physician OPD Visit");

			/*
			 * For displaying patient personal details
			 */
			while (resultSet1.next()) {
				PdfPTable table = new PdfPTable(6);

				table.setFooterRows(1);
				table.setWidthPercentage(100);
				Rectangle rect = new Rectangle(270, 700);
				table.setWidthPercentage(new float[] { 43, 61, 36, 36, 43, 41 }, rect);

				PdfPCell cell0 = new PdfPCell(new Paragraph("", Font7));
				cell0.setPaddingTop(120);
				cell0.setPaddingBottom(10);
				cell0.setHorizontalAlignment(Element.ALIGN_CENTER);
				cell0.setUseBorderPadding(true);
				cell0.setColspan(6);
				cell0.setBorderWidthBottom(1f);
				// cell0.setBorderColorBottom(BaseColor.DARK_GRAY);
				cell0.setBorder(Rectangle.NO_BORDER);

				PdfPCell cell = new PdfPCell(new Paragraph("PATIENT DETAILS", Font6));
				// cell.setPaddingTop(60);
				cell.setPaddingBottom(7);
				cell.setHorizontalAlignment(Element.ALIGN_CENTER);
				cell.setUseBorderPadding(true);
				cell.setColspan(6);
				cell.setBorderWidthBottom(1f);
				cell.setBorderColorBottom(BaseColor.DARK_GRAY);
				cell.setBorderColor(BaseColor.WHITE);

				/*
				 * For Patient Name
				 */
				PdfPCell cell2 = new PdfPCell(new Paragraph("Patient Name ", mainContent));
				cell2.setBorderWidth(0.01f);
				cell2.setPaddingBottom(5);
				cell2.setBorderWidthLeft(0.2f);
				cell2.setBorderColor(BaseColor.BLACK);

				String fullName = resultSet1.getString("firstName") + " " + resultSet1.getString("middleName") + " "
						+ resultSet1.getString("lastName") + " (" + resultSet1.getInt("id") + ")";

				PdfPCell cell3 = new PdfPCell(new Paragraph(fullName, mainContent));
				cell3.setBorderWidth(0.2f);
				cell3.setPaddingBottom(5);
				cell3.setBorderColor(BaseColor.BLACK);

				/*
				 * For Age
				 */
				PdfPCell cell16 = new PdfPCell(new Paragraph("Age ", mainContent));
				// cell16.setBorderWidth(0.01f);
				cell16.setPaddingBottom(5);
				cell16.setBorderWidthLeft(0.2f);
				// cell16.setBorderWidthBottom(1f);
				cell16.setBorderColor(BaseColor.BLACK);

				PdfPCell cell17 = new PdfPCell(new Paragraph(resultSet1.getString("age"), mainContent));
				cell17.setBorderWidth(0.2f);
				cell17.setPaddingBottom(5);
				// cell17.setBorderWidthBottom(1f);
				cell17.setBorderColor(BaseColor.BLACK);

				/*
				 * For Mobile no.
				 */
				PdfPCell cell22 = new PdfPCell(new Paragraph("Mobile No. ", mainContent));
				cell22.setBorderWidth(0.01f);
				cell22.setPaddingBottom(5);
				cell22.setBorderWidthLeft(0.2f);
				// cell22.setBorderWidthBottom(1f);
				cell22.setBorderColor(BaseColor.BLACK);

				PdfPCell cell23 = new PdfPCell(new Paragraph(resultSet1.getString("mobile"), mainContent));
				cell23.setBorderWidth(0.01f);
				cell23.setPaddingBottom(5);
				// cell23.setBorderWidthBottom(1f);
				cell23.setBorderColor(BaseColor.BLACK);

				/*
				 * For Diagnosis
				 */
				PdfPCell cell18 = new PdfPCell(new Paragraph("Diagnosis ", mainContent));
				cell18.setBorderWidth(0.01f);
				cell18.setPaddingBottom(5);
				cell18.setBorderWidthLeft(0.2f);
				// cell18.setBorderWidthBottom(1f);
				cell18.setBorderColor(BaseColor.BLACK);

				PdfPCell cell19 = new PdfPCell(new Paragraph(diagnosis, mainContent));
				cell19.setBorderWidth(0.01f);
				cell19.setPaddingBottom(5);
				// cell19.setBorderWidthBottom(1f);
				cell19.setBorderColor(BaseColor.BLACK);

				/*
				 * For Gender
				 */
				PdfPCell cell10 = new PdfPCell(new Paragraph("Gender ", mainContent));
				// cell10.setBorderWidth(0.01f);
				cell10.setPaddingBottom(5);
				cell10.setBorderWidthLeft(0.2f);
				// cell10.setBorderWidthBottom(1f);
				cell10.setBorderColor(BaseColor.BLACK);

				PdfPCell cell11 = new PdfPCell(new Paragraph(resultSet1.getString("gender"), mainContent));
				cell11.setBorderWidth(0.2f);
				cell11.setPaddingBottom(5);
				// cell11.setBorderWidthBottom(1f);
				cell11.setBorderColor(BaseColor.BLACK);

				/*
				 * For Blood Gr
				 */
				PdfPCell cell20 = new PdfPCell(new Paragraph("Blood Group ", mainContent));
				cell20.setBorderWidth(0.01f);
				cell20.setPaddingBottom(5);
				cell20.setBorderWidthLeft(0.2f);
				// cell20.setBorderWidthBottom(1f);
				cell20.setBorderColor(BaseColor.BLACK);

				PdfPCell cell21 = new PdfPCell(new Paragraph(resultSet1.getString("bloodGroup"), mainContent));
				cell21.setBorderWidth(0.01f);
				cell21.setPaddingBottom(5);
				// cell21.setBorderWidthBottom(1f);
				cell21.setBorderColor(BaseColor.BLACK);

				/*
				 * For Date
				 */

				PdfPCell cell4 = new PdfPCell(new Paragraph("Visit Date ", mainContent));
				cell4.setBorderWidth(0.01f);
				cell4.setPaddingBottom(5);
				cell4.setBorderWidthLeft(0.2f);
				cell4.setBorderColor(BaseColor.BLACK);

				PdfPCell cell5 = new PdfPCell(new Paragraph(visitDate, mainContent));
				cell5.setBorderWidth(0.2f);
				cell5.setPaddingBottom(5);
				// cell5.setBorderColor(BaseColor.WHITE);

				/*
				 * For Visit Type
				 */
				PdfPCell cell12 = new PdfPCell(new Paragraph("Visit Type ", mainContent));
				cell12.setBorderWidth(0.01f);
				cell12.setPaddingBottom(5);
				cell12.setBorderWidthLeft(0.2f);
				cell12.setBorderColor(BaseColor.BLACK);
				// cell12.setBorderWidthLeft(0.0f);
				// cell12.setBorderWidthTop(0.0f);
				// cell12.setBorderColorBottom(BaseColor.WHITE);

				PdfPCell cell13 = new PdfPCell(new Paragraph(visitType, mainContent));
				cell13.setBorderWidth(0.2f);
				cell13.setPaddingBottom(5);
				cell13.setColspan(3);
				cell13.setBorderColor(BaseColor.BLACK);

				/*
				 * adding all cell to the table to create tabular structure
				 */

				table.addCell(cell0);
				table.addCell(cell);
				table.addCell(cell2);
				table.addCell(cell3);
				table.addCell(cell16);
				table.addCell(cell17);
				table.addCell(cell22);
				table.addCell(cell23);
				table.addCell(cell18);
				table.addCell(cell19);
				table.addCell(cell10);
				table.addCell(cell11);
				table.addCell(cell20);
				table.addCell(cell21);
				table.addCell(cell4);
				table.addCell(cell5);
				table.addCell(cell12);
				table.addCell(cell13);

				document.add(table);
			}

			PdfPTable table01 = new PdfPTable(1);
			table01.setFooterRows(1);
			table01.setWidthPercentage(100);
			Rectangle rect01 = new Rectangle(270, 700);
			table01.setWidthPercentage(new float[] { 260 }, rect01);

			PdfPCell cell = new PdfPCell(new Paragraph("VISIT DETAILS", Font6));
			cell.setPaddingTop(8);
			cell.setPaddingBottom(2);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell.setUseBorderPadding(true);
			cell.setBorderWidthBottom(1f);
			// cell.setBorderColorBottom(BaseColor.DARK_GRAY);
			cell.setBorderColor(BaseColor.WHITE);
			table01.addCell(cell);
			document.add(table01);

			int cnt = 1;
			while (resultSet3.next()) {
				if (cnt == 1) {
					PdfPTable table1 = new PdfPTable(3);
					table1.setFooterRows(1);
					table1.setWidthPercentage(100);
					Rectangle rect1 = new Rectangle(270, 700);
					table1.setWidthPercentage(new float[] { 80, 60, 120 }, rect1);

					PdfPCell cell2 = new PdfPCell(new Paragraph("Present Complaints :", Font5));
					cell2.setBorderWidth(0.01f);
					cell2.setPaddingBottom(8);
					cell2.setColspan(3);
					cell2.setHorizontalAlignment(Element.ALIGN_LEFT);
					cell2.setBorderWidthLeft(0.2f);
					cell2.setBorderColor(BaseColor.WHITE);

					PdfPCell cell3 = new PdfPCell(new Paragraph("Symptom", Font4));
					cell3.setBorderWidth(0.01f);
					cell3.setPaddingBottom(5);
					cell3.setBorderWidthLeft(0.2f);
					cell3.setHorizontalAlignment(Element.ALIGN_CENTER);
					cell3.setBorderColor(BaseColor.BLACK);
					cell3.setBorderColorBottom(BaseColor.BLACK);

					String symptomDuration = "Days";

					/*
					 * if (orthoCheck) { symptomDuration = "Months"; }
					 */

					PdfPCell cell4 = new PdfPCell(new Paragraph("Duration (" + symptomDuration + ")", Font4));
					cell4.setBorderWidth(0.01f);
					cell4.setPaddingBottom(5);
					cell4.setBorderWidthLeft(0.2f);
					cell4.setHorizontalAlignment(Element.ALIGN_CENTER);
					cell4.setBorderColor(BaseColor.BLACK);
					cell4.setBorderColorBottom(BaseColor.BLACK);

					/*
					 * PdfPCell cell5 = new PdfPCell(new Paragraph("Other", Font4));
					 * cell5.setBorderWidth(0.01f); cell5.setPaddingBottom(5);
					 * cell5.setBorderWidthLeft(0.2f);
					 * cell5.setHorizontalAlignment(Element.ALIGN_CENTER);
					 * cell5.setBorderColor(BaseColor.BLACK);
					 */

					PdfPCell cell6 = new PdfPCell(new Paragraph("Comments", Font4));
					cell6.setBorderWidth(0.01f);
					cell6.setPaddingBottom(5);
					cell6.setBorderWidthLeft(0.2f);
					cell6.setHorizontalAlignment(Element.ALIGN_CENTER);
					cell6.setBorderColor(BaseColor.BLACK);
					cell6.setBorderColorBottom(BaseColor.BLACK);

					table1.addCell(cell2);
					table1.addCell(cell3);
					table1.addCell(cell4);
					// table1.addCell(cell5);
					table1.addCell(cell6);
					document.add(table1);
				}
				PdfPTable table1 = new PdfPTable(3);
				table1.setFooterRows(1);
				table1.setWidthPercentage(100);
				Rectangle rect1 = new Rectangle(270, 700);
				table1.setWidthPercentage(new float[] { 80, 60, 120 }, rect1);

				PdfPCell cell7 = new PdfPCell(new Paragraph(resultSet3.getString("complaints"), mainContent));
				cell7.setBorderWidth(0.01f);
				cell7.setPaddingBottom(5);
				cell7.setBorderWidthLeft(0.2f);
				cell7.setBorderWidthBottom(0.2f);
				cell7.setHorizontalAlignment(Element.ALIGN_CENTER);
				cell7.setBorderColor(BaseColor.BLACK);

				PdfPCell cell8 = new PdfPCell(new Paragraph(resultSet3.getString("duration"), mainContent));
				cell8.setBorderWidth(0.01f);
				cell8.setPaddingBottom(5);
				cell8.setBorderWidthLeft(0.2f);
				cell8.setBorderWidthBottom(0.2f);
				cell8.setHorizontalAlignment(Element.ALIGN_CENTER);
				cell8.setBorderColor(BaseColor.BLACK);

				/*
				 * PdfPCell cell9 = new PdfPCell(new Paragraph(resultSet3.getString("other"),
				 * mainContent)); cell9.setBorderWidth(0.01f); cell9.setPaddingBottom(5);
				 * cell9.setBorderWidthLeft(0.2f); cell9.setBorderWidthBottom(0.2f);
				 * cell9.setHorizontalAlignment(Element.ALIGN_CENTER);
				 * cell9.setBorderColor(BaseColor.BLACK);
				 */

				PdfPCell cell10 = new PdfPCell(new Paragraph(resultSet3.getString("comments"), mainContent));
				cell10.setBorderWidth(0.01f);
				cell10.setPaddingBottom(5);
				cell10.setBorderWidthLeft(0.2f);
				cell10.setBorderWidthBottom(0.2f);
				cell10.setHorizontalAlignment(Element.ALIGN_CENTER);
				cell10.setBorderColor(BaseColor.BLACK);

				cnt++;

				table1.addCell(cell7);
				table1.addCell(cell8);
				// table1.addCell(cell9);
				table1.addCell(cell10);

				document.add(table1);
			}

			int cnt2 = 1;
			while (resultSet4.next()) {
				if (cnt2 == 1) {
					PdfPTable table2 = new PdfPTable(3);
					table2.setFooterRows(1);
					table2.setWidthPercentage(100);
					Rectangle rect2 = new Rectangle(270, 700);
					table2.setWidthPercentage(new float[] { 80, 90, 90 }, rect2);

					/*
					 * PdfPCell cell120 = new PdfPCell(new Paragraph("", Font4));
					 * cell120.setBorderWidth(0.01f); cell120.setPaddingBottom(5);
					 * cell120.setColspan(3); cell120.setBorderWidthLeft(0.2f);
					 * cell120.setHorizontalAlignment(Element.ALIGN_CENTER);
					 * cell120.setBorderColor(BaseColor.WHITE);
					 * cell120.setBorderColorTop(BaseColor.BLACK);
					 */

					PdfPCell cell11 = new PdfPCell(new Paragraph("Medical History :", Font5));
					cell11.setBorderWidth(0.01f);
					cell11.setPaddingBottom(8);
					cell11.setPaddingTop(8);
					cell11.setColspan(3);
					cell11.setHorizontalAlignment(Element.ALIGN_LEFT);
					cell11.setBorderWidthLeft(0.2f);
					cell11.setBorderColor(BaseColor.WHITE);
					// cell11.setBorderColorTop(BaseColor.BLACK);

					PdfPCell cell12 = new PdfPCell(new Paragraph("Diagnosis", Font4));
					cell12.setBorderWidth(0.01f);
					cell12.setPaddingBottom(5);
					cell12.setBorderWidthLeft(0.2f);
					cell12.setHorizontalAlignment(Element.ALIGN_CENTER);
					cell12.setBorderColor(BaseColor.BLACK);

					PdfPCell cell13 = new PdfPCell(new Paragraph("Description", Font4));
					cell13.setBorderWidth(0.01f);
					cell13.setPaddingBottom(5);
					cell13.setColspan(2);
					cell13.setBorderWidthLeft(0.2f);
					cell13.setHorizontalAlignment(Element.ALIGN_CENTER);
					cell13.setBorderColor(BaseColor.BLACK);

					/*
					 * PdfPCell cell14 = new PdfPCell(new Paragraph("Comments", Font4));
					 * cell14.setBorderWidth(0.01f); cell14.setPaddingBottom(5);
					 * cell14.setBorderWidthLeft(0.2f);
					 * cell14.setHorizontalAlignment(Element.ALIGN_CENTER);
					 * cell14.setBorderColor(BaseColor.BLACK);
					 */
					// table2.addCell(cell120);
					table2.addCell(cell11);
					table2.addCell(cell12);
					table2.addCell(cell13);
					// table2.addCell(cell14);
					document.add(table2);
				}

				PdfPTable table2 = new PdfPTable(3);
				table2.setFooterRows(1);
				table2.setWidthPercentage(100);
				Rectangle rect2 = new Rectangle(270, 700);
				table2.setWidthPercentage(new float[] { 80, 90, 90 }, rect2);

				PdfPCell cell15 = new PdfPCell(new Paragraph(resultSet4.getString("diagnosis"), mainContent));
				cell15.setBorderWidth(0.01f);
				cell15.setPaddingBottom(5);
				cell15.setBorderWidthLeft(0.2f);
				cell15.setBorderWidthBottom(0.2f);
				cell15.setHorizontalAlignment(Element.ALIGN_CENTER);
				cell15.setBorderColor(BaseColor.BLACK);

				PdfPCell cell16 = new PdfPCell(new Paragraph(resultSet4.getString("description"), mainContent));
				cell16.setBorderWidth(0.01f);
				cell16.setPaddingBottom(5);
				cell16.setColspan(2);
				cell16.setBorderWidthLeft(0.2f);
				cell16.setBorderWidthBottom(0.2f);
				cell16.setHorizontalAlignment(Element.ALIGN_CENTER);
				cell16.setBorderColor(BaseColor.BLACK);

				/*
				 * PdfPCell cell17 = new PdfPCell(new
				 * Paragraph(resultSet4.getString("comments"), mainContent));
				 * cell17.setBorderWidth(0.01f); cell17.setPaddingBottom(5);
				 * cell17.setBorderWidthLeft(0.2f); cell17.setBorderWidthBottom(0.2f);
				 * cell17.setHorizontalAlignment(Element.ALIGN_CENTER);
				 * cell17.setBorderColor(BaseColor.BLACK);
				 */

				table2.addCell(cell15);
				table2.addCell(cell16);
				// table2.addCell(cell17);

				document.add(table2);
				cnt2++;
			}

			if (onExamination != null) {

				PdfPTable table1 = new PdfPTable(1);
				table1.setFooterRows(1);
				table1.setWidthPercentage(100);
				Rectangle rect1 = new Rectangle(270, 700);
				table1.setWidthPercentage(new float[] { 270 }, rect1);

				// On Examination
				PdfPCell cell2 = new PdfPCell(new Paragraph("On Examination :", Font5));
				cell2.setBorderWidth(0.01f);
				cell2.setPaddingBottom(8);
				cell2.setPaddingLeft(12);
				cell2.setHorizontalAlignment(Element.ALIGN_LEFT);
				cell2.setBorderWidthLeft(0.2f);
				cell2.setBorderColor(BaseColor.WHITE);

				PdfPCell cell3 = new PdfPCell(new Paragraph(onExamination, mainContent));
				cell3.setBorderWidth(0.01f);
				cell3.setPaddingBottom(8);
				cell3.setPaddingLeft(20);
				cell3.setHorizontalAlignment(Element.ALIGN_LEFT);
				cell3.setBorderWidthLeft(0.2f);
				cell3.setBorderColor(BaseColor.WHITE);

				table1.addCell(cell2);
				table1.addCell(cell3);

				document.add(table1);
			}

			// while (resultSet5.next()) {
			PdfPTable table5 = new PdfPTable(4);
			table5.setFooterRows(1);
			table5.setWidthPercentage(100);
			Rectangle rect5 = new Rectangle(270, 700);
			table5.setWidthPercentage(new float[] { 50, 30, 40, 140 }, rect5);

			/*
			 * PdfPCell cell120 = new PdfPCell(new Paragraph("", Font4));
			 * cell120.setBorderWidth(0.01f); cell120.setPaddingBottom(5);
			 * cell120.setColspan(4); cell120.setBorderWidthLeft(0.2f);
			 * cell120.setHorizontalAlignment(Element.ALIGN_CENTER);
			 * cell120.setBorderColor(BaseColor.WHITE);
			 * cell120.setBorderColorTop(BaseColor.BLACK);
			 */

			PdfPCell cell34 = new PdfPCell(new Paragraph("Personal History :", Font5));
			cell34.setBorderWidth(0.01f);
			cell34.setPaddingBottom(8);
			cell34.setPaddingTop(8);
			cell34.setColspan(4);
			cell34.setHorizontalAlignment(Element.ALIGN_LEFT);
			cell34.setBorderWidthLeft(0.2f);
			cell34.setBorderColor(BaseColor.WHITE);
			// cell34.setBorderColorTop(BaseColor.BLACK);

			PdfPCell cell35 = new PdfPCell(new Paragraph("Smoking :", Font4));
			cell35.setBorderWidth(0.01f);
			cell35.setPaddingBottom(5);
			cell35.setBorderWidthLeft(0.2f);
			cell35.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell35.setBorderColor(BaseColor.WHITE);

			PdfPCell cell36 = new PdfPCell(new Paragraph(smoking, mainContent));
			cell36.setBorderWidth(0.01f);
			cell36.setPaddingBottom(5);
			cell36.setBorderWidthLeft(0.2f);
			cell36.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell36.setBorderColor(BaseColor.WHITE);

			PdfPCell cell37 = new PdfPCell(new Paragraph("Comments :", Font4));
			cell37.setBorderWidth(0.01f);
			cell37.setPaddingBottom(5);
			cell37.setBorderWidthLeft(0.2f);
			cell37.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell37.setBorderColor(BaseColor.WHITE);

			PdfPCell cell38 = new PdfPCell(new Paragraph(smokingDesc, mainContent));
			cell38.setBorderWidth(0.01f);
			cell38.setPaddingBottom(5);
			cell38.setBorderWidthLeft(0.2f);
			// cell38.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell38.setBorderColor(BaseColor.WHITE);

			PdfPCell cell39 = new PdfPCell(new Paragraph("Alcohol :", Font4));
			cell39.setBorderWidth(0.01f);
			cell39.setPaddingBottom(5);
			cell39.setBorderWidthLeft(0.2f);
			cell39.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell39.setBorderColor(BaseColor.WHITE);

			PdfPCell cell40 = new PdfPCell(new Paragraph(alcohol, mainContent));
			cell40.setBorderWidth(0.01f);
			cell40.setPaddingBottom(5);
			cell40.setBorderWidthLeft(0.2f);
			cell40.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell40.setBorderColor(BaseColor.WHITE);

			PdfPCell cell41 = new PdfPCell(new Paragraph("Comments :", Font4));
			cell41.setBorderWidth(0.01f);
			cell41.setPaddingBottom(5);
			cell41.setBorderWidthLeft(0.2f);
			cell41.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell41.setBorderColor(BaseColor.WHITE);

			PdfPCell cell42 = new PdfPCell(new Paragraph(alcoholDesc, mainContent));
			cell42.setBorderWidth(0.01f);
			cell42.setPaddingBottom(5);
			cell42.setBorderWidthLeft(0.2f);
			// cell42.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell42.setBorderColor(BaseColor.WHITE);

			PdfPCell cell43 = new PdfPCell(new Paragraph("Tobacco :", Font4));
			cell43.setBorderWidth(0.01f);
			cell43.setPaddingBottom(5);
			cell43.setBorderWidthLeft(0.2f);
			cell43.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell43.setBorderColor(BaseColor.WHITE);

			PdfPCell cell44 = new PdfPCell(new Paragraph(tobacco, mainContent));
			cell44.setBorderWidth(0.01f);
			cell44.setPaddingBottom(5);
			cell44.setBorderWidthLeft(0.2f);
			cell44.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell44.setBorderColor(BaseColor.WHITE);

			PdfPCell cell45 = new PdfPCell(new Paragraph("Comments :", Font4));
			cell45.setBorderWidth(0.01f);
			cell45.setPaddingBottom(5);
			cell45.setBorderWidthLeft(0.2f);
			cell45.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell45.setBorderColor(BaseColor.WHITE);

			PdfPCell cell46 = new PdfPCell(new Paragraph(tobaccoDesc, mainContent));
			cell46.setBorderWidth(0.01f);
			cell46.setPaddingBottom(5);
			cell46.setBorderWidthLeft(0.2f);
			// cell46.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell46.setBorderColor(BaseColor.WHITE);

			PdfPCell cell47 = new PdfPCell(new Paragraph("Food Choice :", Font4));
			cell47.setBorderWidth(0.01f);
			cell47.setPaddingBottom(5);
			cell47.setBorderWidthLeft(0.2f);
			cell47.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell47.setBorderColor(BaseColor.WHITE);

			PdfPCell cell48 = new PdfPCell(new Paragraph(foodChoice, mainContent));
			cell48.setBorderWidth(0.01f);
			cell48.setPaddingBottom(5);
			cell48.setBorderWidthLeft(0.2f);
			cell48.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell48.setBorderColor(BaseColor.WHITE);

			PdfPCell cell49 = new PdfPCell(new Paragraph("Comments :", Font4));
			cell49.setBorderWidth(0.01f);
			cell49.setPaddingBottom(5);
			cell49.setBorderWidthLeft(0.2f);
			cell49.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell49.setBorderColor(BaseColor.WHITE);

			PdfPCell cell50 = new PdfPCell(new Paragraph(foodChoiceDetails, mainContent));
			cell50.setBorderWidth(0.01f);
			cell50.setPaddingBottom(5);
			cell50.setBorderWidthLeft(0.2f);
			// cell50.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell50.setBorderColor(BaseColor.WHITE);

			// table5.addCell(cell120);
			table5.addCell(cell34);
			table5.addCell(cell35);
			table5.addCell(cell36);
			table5.addCell(cell37);
			table5.addCell(cell38);
			table5.addCell(cell39);
			table5.addCell(cell40);
			table5.addCell(cell41);
			table5.addCell(cell42);
			table5.addCell(cell43);
			table5.addCell(cell44);
			table5.addCell(cell45);
			table5.addCell(cell46);
			table5.addCell(cell47);
			table5.addCell(cell48);
			table5.addCell(cell49);
			table5.addCell(cell50);

			document.add(table5);
			// }

			int cnt1 = 1;
			while (resultSet6.next()) {
				if (cnt1 == 1) {
					PdfPTable table3 = new PdfPTable(3);
					table3.setFooterRows(1);
					table3.setWidthPercentage(100);
					Rectangle rect3 = new Rectangle(270, 700);
					table3.setWidthPercentage(new float[] { 80, 60, 120 }, rect3);

					PdfPCell cell18 = new PdfPCell(new Paragraph("Current Medication :", Font5));
					cell18.setBorderWidth(0.01f);
					cell18.setPaddingBottom(8);
					cell18.setPaddingTop(8);
					cell18.setColspan(3);
					cell18.setHorizontalAlignment(Element.ALIGN_LEFT);
					cell18.setBorderWidthLeft(0.2f);
					cell18.setBorderColor(BaseColor.WHITE);
					// cell18.setBorderColorTop(BaseColor.BLACK);

					PdfPCell cell19 = new PdfPCell(new Paragraph("Drug Name", Font4));
					cell19.setBorderWidth(0.01f);
					cell19.setPaddingBottom(5);
					cell19.setBorderWidthLeft(0.2f);
					cell19.setHorizontalAlignment(Element.ALIGN_CENTER);
					cell19.setBorderColor(BaseColor.BLACK);

					PdfPCell cell20 = new PdfPCell(new Paragraph("Duration (Days)", Font4));
					cell20.setBorderWidth(0.01f);
					cell20.setPaddingBottom(5);
					cell20.setBorderWidthLeft(0.2f);
					cell20.setHorizontalAlignment(Element.ALIGN_CENTER);
					cell20.setBorderColor(BaseColor.BLACK);

					PdfPCell cell21 = new PdfPCell(new Paragraph("Comments", Font4));
					cell21.setBorderWidth(0.01f);
					cell21.setPaddingBottom(5);
					cell21.setBorderWidthLeft(0.2f);
					cell21.setHorizontalAlignment(Element.ALIGN_CENTER);
					cell21.setBorderColor(BaseColor.BLACK);

					table3.addCell(cell18);
					table3.addCell(cell19);
					table3.addCell(cell20);
					table3.addCell(cell21);
					document.add(table3);
				}
				PdfPTable table3 = new PdfPTable(3);
				table3.setFooterRows(1);
				table3.setWidthPercentage(100);
				Rectangle rect3 = new Rectangle(270, 700);
				table3.setWidthPercentage(new float[] { 80, 60, 120 }, rect3);

				PdfPCell cell22 = new PdfPCell(new Paragraph(resultSet6.getString("drugName"), mainContent));
				cell22.setBorderWidth(0.01f);
				cell22.setPaddingBottom(5);
				cell22.setBorderWidthLeft(0.2f);
				cell22.setBorderWidthBottom(0.2f);
				cell22.setHorizontalAlignment(Element.ALIGN_CENTER);
				cell22.setBorderColor(BaseColor.BLACK);

				PdfPCell cell23 = new PdfPCell(new Paragraph(resultSet6.getString("duration"), mainContent));
				cell23.setBorderWidth(0.01f);
				cell23.setPaddingBottom(5);
				cell23.setBorderWidthLeft(0.2f);
				cell23.setBorderWidthBottom(0.2f);
				cell23.setHorizontalAlignment(Element.ALIGN_CENTER);
				cell23.setBorderColor(BaseColor.BLACK);

				PdfPCell cell24 = new PdfPCell(new Paragraph(resultSet6.getString("comments"), mainContent));
				cell24.setBorderWidth(0.01f);
				cell24.setPaddingBottom(5);
				cell24.setBorderWidthLeft(0.2f);
				cell24.setBorderWidthBottom(0.2f);
				cell24.setHorizontalAlignment(Element.ALIGN_CENTER);
				cell24.setBorderColor(BaseColor.BLACK);

				table3.addCell(cell22);
				table3.addCell(cell23);
				table3.addCell(cell24);

				document.add(table3);

				cnt1++;
			}

			while (resultSet7.next()) {
				PdfPTable table4 = new PdfPTable(8);
				table4.setFooterRows(1);
				table4.setWidthPercentage(100);
				Rectangle rect4 = new Rectangle(270, 700);
				table4.setWidthPercentage(new float[] { 25, 25, 40, 37, 43, 37, 25, 28 }, rect4);

				/*
				 * PdfPCell cell1201 = new PdfPCell(new Paragraph("", Font4));
				 * cell1201.setBorderWidth(0.01f); cell1201.setPaddingBottom(5);
				 * cell1201.setColspan(8); cell1201.setBorderWidthLeft(0.2f);
				 * cell1201.setHorizontalAlignment(Element.ALIGN_CENTER);
				 * cell1201.setBorderColor(BaseColor.WHITE);
				 * cell1201.setBorderColorTop(BaseColor.BLACK);
				 */

				PdfPCell cell25 = new PdfPCell(new Paragraph("Vital Signs :", Font5));
				cell25.setBorderWidth(0.01f);
				cell25.setPaddingBottom(8);
				cell25.setPaddingTop(8);
				cell25.setColspan(8);
				cell25.setHorizontalAlignment(Element.ALIGN_LEFT);
				cell25.setBorderWidthLeft(0.2f);
				cell25.setBorderColor(BaseColor.WHITE);
				// cell25.setBorderColorTop(BaseColor.BLACK);

				PdfPCell cell26 = new PdfPCell(new Paragraph("Weight", Font4));
				cell26.setBorderWidth(0.01f);
				cell26.setPaddingBottom(10);
				cell26.setBorderWidthLeft(0.2f);
				cell26.setHorizontalAlignment(Element.ALIGN_CENTER);
				cell26.setBorderColor(BaseColor.BLACK);

				PdfPCell cell27 = new PdfPCell(new Paragraph(resultSet7.getString("weight"), mainContent));
				cell27.setBorderWidth(0.01f);
				cell27.setPaddingBottom(10);
				cell27.setBorderWidthLeft(0.2f);
				cell27.setHorizontalAlignment(Element.ALIGN_CENTER);
				cell27.setBorderColor(BaseColor.BLACK);

				PdfPCell cell28 = new PdfPCell(new Paragraph("Systolic-BP", Font4));
				cell28.setBorderWidth(0.01f);
				cell28.setPaddingBottom(10);
				cell28.setBorderWidthLeft(0.2f);
				cell28.setHorizontalAlignment(Element.ALIGN_CENTER);
				cell28.setBorderColor(BaseColor.BLACK);

				PdfPCell cell29 = new PdfPCell(new Paragraph(resultSet7.getString("systolicBP"), mainContent));
				cell29.setBorderWidth(0.01f);
				cell29.setPaddingBottom(10);
				cell29.setBorderWidthLeft(0.2f);
				cell29.setHorizontalAlignment(Element.ALIGN_CENTER);
				cell29.setBorderColor(BaseColor.BLACK);

				PdfPCell cell30 = new PdfPCell(new Paragraph("Diastolic-BP", Font4));
				cell30.setBorderWidth(0.01f);
				cell30.setPaddingBottom(10);
				cell30.setBorderWidthLeft(0.2f);
				cell30.setHorizontalAlignment(Element.ALIGN_CENTER);
				cell30.setBorderColor(BaseColor.BLACK);

				PdfPCell cell31 = new PdfPCell(new Paragraph(resultSet7.getString("diastolicBP"), mainContent));
				cell31.setBorderWidth(0.01f);
				cell31.setPaddingBottom(10);
				cell31.setBorderWidthLeft(0.2f);
				cell31.setHorizontalAlignment(Element.ALIGN_CENTER);
				cell31.setBorderColor(BaseColor.BLACK);

				PdfPCell cell32 = new PdfPCell(new Paragraph("Pulse", Font4));
				cell32.setBorderWidth(0.01f);
				cell32.setPaddingBottom(10);
				cell32.setBorderWidthLeft(0.2f);
				cell32.setHorizontalAlignment(Element.ALIGN_CENTER);
				cell32.setBorderColor(BaseColor.BLACK);

				PdfPCell cell33 = new PdfPCell(new Paragraph(resultSet7.getString("pulse"), mainContent));
				cell33.setBorderWidth(0.01f);
				cell33.setPaddingBottom(10);
				cell33.setBorderWidthLeft(0.2f);
				cell33.setHorizontalAlignment(Element.ALIGN_CENTER);
				cell33.setBorderColor(BaseColor.BLACK);

				// table4.addCell(cell1201);
				table4.addCell(cell25);
				table4.addCell(cell26);
				table4.addCell(cell27);
				table4.addCell(cell28);
				table4.addCell(cell29);
				table4.addCell(cell30);
				table4.addCell(cell31);
				table4.addCell(cell32);
				table4.addCell(cell33);

				document.add(table4);
			}
			/*
			 * For signature in footer
			 */

			/*
			 * PdfPTable table = new PdfPTable(1); table.setWidthPercentage(100);
			 * table.setTotalWidth(350);
			 * 
			 * PdfPCell cell1111 = new PdfPCell(new Paragraph("Signature", mainContent1));
			 * cell1111.setBackgroundColor(BaseColor.WHITE);
			 * cell1111.setHorizontalAlignment(Element.ALIGN_RIGHT);
			 * cell1111.setPaddingTop(50); cell1111.setPaddingBottom(30);
			 * cell1111.setBorderColor(BaseColor.WHITE); table.addCell(cell1111);
			 * 
			 * FooterTable event = new FooterTable(table); writer.setPageEvent(event);
			 */

			/*
			 * For signature in footer
			 * 
			 * 
			 * PdfPTable tableFooter = new PdfPTable(1); tableFooter.setTotalWidth(510);
			 * tableFooter.setWidthPercentage(100);
			 * 
			 * // Table for Prescription image
			 * 
			 * PdfPTable imageTable1 = new PdfPTable(2); imageTable1.setWidthPercentage(80);
			 * imageTable1.setWidths(new int[] { 1, 2 });
			 * 
			 * PdfPCell imageCell11 = new PdfPCell(signImg, true);
			 * imageCell11.setBorderColor(BaseColor.WHITE);
			 * 
			 * PdfPCell imageCell21 = new PdfPCell(new Paragraph("", mainContent));
			 * imageCell21.setBorderColor(BaseColor.WHITE);
			 * 
			 * imageTable1.addCell(imageCell11); imageTable1.addCell(imageCell21);
			 * 
			 * PdfPCell cellFooter = new PdfPCell(imageTable1);
			 * cellFooter.setBorderWidth(0.0f); cellFooter.setPaddingBottom(5);
			 * cellFooter.setPaddingLeft(300); cellFooter.setBorderColor(BaseColor.WHITE);
			 * 
			 * PdfPCell cellFooter1 = new PdfPCell(new Paragraph(docName, Font5));
			 * cellFooter1.setBorderWidth(0.0f); cellFooter1.setPaddingBottom(5);
			 * cellFooter1.setPaddingLeft(300); cellFooter1.setBorderColor(BaseColor.WHITE);
			 * 
			 * 
			 * tableFooter.addCell(cellFooter); tableFooter.addCell(cellFooter1);
			 * 
			 * FooterTable1 event = new FooterTable1(tableFooter);
			 * writer.setPageEvent(event);
			 */

			document.close();

			System.out.println("Successfully written and generated General physicial OPD Visit PDF Report");

			status = "success";

			connection.close();

		} catch (Exception exception) {
			exception.printStackTrace();
			status = "error";
		}
		return status;

	}

	/**
	 * 
	 * @param patientID
	 * @param visitID
	 * @param realPath
	 * @param pdfFileName
	 * @param clinicID
	 * @return
	 */
	public String convertPrescriptionPDF(int patientID, int visitID, String realPath, String pdfOutFIleName,
			int clinicID, int practiceID, String username, AmazonS3 s3, String s3reportFilePath, String bucketName) {

		int i = 1;

		String visitDate = null;
		String status = "error";
		String regNo = "";
		String nextVisitDate = "";
		int nextVisitDays = 0;
		String investigation = "";
		String diagnosis = "";
		String advice = "";
		String docName = null;
		String signature = null;
		Image signImg = null;

		/*
		 * Declaring variable which stores the location for FreeSans.ttf file to print
		 * marathi text on pdf
		 */
		String marathiFontDir = realPath + "fonts/FreeSans.ttf";

		ConfigurationUtil configXMLUtil = new ConfigurationUtil();

		try {
			connection = getConnection();

			/*
			 * Generate the queries to fetch details
			 */
			String fetchDetailQuery1 = QueryMaker.OPD_PDF_RETRIEVE_PATIENT;

			preparedStatement1 = connection.prepareStatement(fetchDetailQuery1);
			preparedStatement1.setInt(1, patientID);
			resultSet1 = preparedStatement1.executeQuery();

			/*
			 * Generate the queries to fetch details
			 */
			String fetchInvestigationDetailQuery = QueryMaker.RETREIVE_Investigations_Comma_SEPARATED_Test_LIST;

			preparedStatement3 = connection.prepareStatement(fetchInvestigationDetailQuery);

			preparedStatement3.setString(1, ActivityStatus.ACTIVE);
			preparedStatement3.setInt(2, visitID);

			resultSet3 = preparedStatement3.executeQuery();

			/*
			 * Generate the queries to fetch details
			 */
			String fetchDetailQuery4 = QueryMaker.OPD_PDF_RETRIEVE_PRESCRIPTIONPDF;

			preparedStatement = connection.prepareStatement(fetchDetailQuery4);

			preparedStatement.setInt(1, visitID);
			preparedStatement.setString(2, ActivityStatus.ACTIVE);

			resultSet = preparedStatement.executeQuery();

			/*
			 * Retrieve patient registration no based on patientID and clinicID from
			 * ClinicRegistration table
			 */
			String fetchClinicRegNoQuery = QueryMaker.RETRIEVE_CLINIC_REG_NO_BY_CLINIC_ID;

			preparedStatement2 = connection.prepareStatement(fetchClinicRegNoQuery);

			preparedStatement2.setInt(1, clinicID);
			preparedStatement2.setInt(2, patientID);

			resultSet2 = preparedStatement2.executeQuery();

			while (resultSet2.next()) {
				regNo = resultSet2.getString("regNumber");
			}

			/*
			 * Retrieve NextVisitDate based on visitID from Visit table
			 */
			String fetchNextVisitDateQuery = QueryMaker.OPD_PDF_RETRIEVE_VISIT;

			preparedStatement2 = connection.prepareStatement(fetchNextVisitDateQuery);

			preparedStatement2.setInt(1, visitID);

			resultSet2 = preparedStatement2.executeQuery();

			while (resultSet2.next()) {
				SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");

				SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");

				if (resultSet2.getString("visitDate") == null || resultSet2.getString("visitDate") == ""
						|| resultSet2.getString("visitDate").isEmpty()) {
					visitDate = "";
				} else {
					visitDate = dateFormat.format(resultSet2.getDate("visitDate"));
				}
				nextVisitDate = resultSet2.getString("nextVisitDate");
				nextVisitDays = resultSet2.getInt("nextVisitDays");
				diagnosis = resultSet2.getString("diagnosis");
				advice = resultSet2.getString("advice") == null ? "" : resultSet2.getString("advice");
			}

			RegistrationDAOinf registrationDAOinf = new RegistrationDAOImpl();

			// Retrieving USER Details by PracticeID
			HashMap<String, String> MDMap = registrationDAOinf.retrieveUserDetails(practiceID, username);

			// File SignatureFile = new File(logoFilePath + File.separator +
			// MDMap.get("Signature"));
			signature = MDMap.get("Signature");
			docName = MDMap.get("FirstName") + " " + MDMap.get("LastName");

			System.out.println("doc name ::" + docName);

			if (signature == "" || signature == null) {
				signImg = null;
			} else if (signature.isEmpty()) {
				signImg = null;
			} else {

				S3ObjectInputStream s3ObjectInputStream = s3
						.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, signature))
						.getObjectContent();

				IOUtils.copy(s3ObjectInputStream, new FileOutputStream(new File(realPath + "images/" + signature)));

				signImg = Image.getInstance(realPath + "images/" + signature);
			}

			/*
			 * Getting image path from XML
			 */
			String A5ImagePath = configXMLUtil.getLetterHeadImage();

			System.out.println("A5IM.." + A5ImagePath);

			/*
			 * Getting page size from XMl
			 */
			String pageSize = configXMLUtil.getPageSize();
			System.out.println("pageSize is :::: " + pageSize);

			/*
			 * Setting path to store PDF file
			 */
			File file = new File(realPath + "/" + pdfOutFIleName);

			System.out.println("PRESC FILE NAME IN CONVERT::" + file);
			/*
			 * Creating Document for PDF
			 */
			Document document = null;

			/*
			 * Checking whether pageSize tag in XMl contains A5 or A4, according to that
			 * setting PDF page size
			 */
			if (pageSize.equals("A5")) {
				document = new Document(PageSize.A5);
			} else if (pageSize.equals("A4")) {
				document = new Document(PageSize.A4);
			}

			PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(file));

			System.out.println("PRESC WRITER NAME IN CONVERT::" + writer);

			Font Font1 = new Font(Font.FontFamily.TIMES_ROMAN, 10, Font.NORMAL);
			Font Font3 = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.NORMAL);
			Font Font2 = new Font(Font.FontFamily.TIMES_ROMAN, 8, Font.NORMAL);
			Font Font4 = new Font(Font.FontFamily.TIMES_ROMAN, 5, Font.BOLD);
			Font Font5 = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.BOLD);
			Font Font6 = new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.BOLD);
			Font Font7 = new Font(Font.FontFamily.TIMES_ROMAN, 14, Font.BOLD);
			Font mainContent = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.NORMAL);
			Font mainContent1 = new Font(Font.FontFamily.TIMES_ROMAN, 15, Font.NORMAL);
			mainContent1.setColor(BaseColor.GRAY);

			Chunk bullet = new Chunk("\u2022", Font4);

			/*
			 * Defining marathi font
			 */
			Font marathiFont = FontFactory.getFont(marathiFontDir, BaseFont.IDENTITY_H, BaseFont.EMBEDDED);
			marathiFont.setSize(10);

			document.open();

			document.setMargins(36, 36, 55, 36);

			/*
			 * Adding image
			 */
			PdfContentByte canvas = writer.getDirectContentUnder();

			/*
			 * Checking whether pageSize is A4 or A5, according to that background image is
			 * being set
			 */

			Image image;

			if (pageSize.equals("A5")) {
				if (A5ImagePath == null || A5ImagePath == "") {

					image = null;

				} else {

					if (A5ImagePath.isEmpty()) {
						image = null;
					} else {

						S3ObjectInputStream s3ObjectInputStream = s3
								.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, A5ImagePath))
								.getObjectContent();

						IOUtils.copy(s3ObjectInputStream,
								new FileOutputStream(new File(realPath + "images/" + A5ImagePath)));

						image = Image.getInstance(realPath + "images/" + A5ImagePath);

						image.scaleToFit(PageSize.A5.getWidth(), PageSize.A5.getHeight());
						image.setAbsolutePosition(0, 0);

						canvas.saveState();
						PdfGState state = new PdfGState();
						canvas.setGState(state);
						canvas.addImage(image);
						canvas.restoreState();
					}

				}
			} else if (pageSize.equals("A4")) {
				if (A5ImagePath == null || A5ImagePath == "") {

					image = null;

				} else {

					if (A5ImagePath.isEmpty()) {
						image = null;
					} else {

						S3ObjectInputStream s3ObjectInputStream = s3
								.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, A5ImagePath))
								.getObjectContent();

						IOUtils.copy(s3ObjectInputStream,
								new FileOutputStream(new File(realPath + "images/" + A5ImagePath)));

						image = Image.getInstance(realPath + "images/" + A5ImagePath);

						image.scaleToFit(PageSize.A4.getWidth(), PageSize.A4.getHeight());
						image.setAbsolutePosition(0, 0);

						canvas.saveState();
						PdfGState state = new PdfGState();
						canvas.setGState(state);
						canvas.addImage(image);
						canvas.restoreState();
					}

				}
			}
			Image prescrImg = Image.getInstance(realPath + "/images/Rx_icon.png");
			System.out.println("presc rx img is::" + prescrImg);

			/*
			 * Setting header
			 */
			document.addCreator("eDhanvantari");
			document.addTitle("General Physician Prescription");

			/*
			 * For displaying patient personal details
			 */
			while (resultSet1.next()) {
				PdfPTable table = new PdfPTable(3);

				table.setFooterRows(1);
				table.setWidthPercentage(100);
				Rectangle rect = new Rectangle(270, 700);
				table.setWidthPercentage(new float[] { 120, 75, 75 }, rect);

				PdfPCell cell0 = new PdfPCell(new Paragraph("", Font7));
				cell0.setPaddingTop(90);
				cell0.setPaddingBottom(10);
				cell0.setHorizontalAlignment(Element.ALIGN_CENTER);
				cell0.setUseBorderPadding(true);
				cell0.setColspan(3);
				cell0.setBorderWidthBottom(1f);
				// cell0.setBorderColorBottom(BaseColor.DARK_GRAY);
				cell0.setBorderColor(BaseColor.WHITE);

				/* For Patient Name */

				PdfPCell cell3 = new PdfPCell(new Paragraph("Reg.No : " + regNo, Font5));
				// cell3.setPaddingTop(100);
				cell3.setBorderWidth(0.2f);
				cell3.setColspan(2);
				cell3.setPaddingBottom(5);
				cell3.setBorderColor(BaseColor.WHITE);

				PdfPCell cell311 = new PdfPCell(new Paragraph("Date : " + visitDate, Font5));
				// cell311.setPaddingTop(100);
				cell311.setBorderWidth(0.2f);
				cell311.setPaddingBottom(5);
				cell311.setBorderColor(BaseColor.WHITE);

				String fullName = "";

				fullName = StringUtils.capitalize(resultSet1.getString("firstName")) + " "
						+ StringUtils.capitalize(resultSet1.getString("lastName"));

				PdfPCell cell2 = new PdfPCell(new Paragraph("Name : " + fullName, Font5));
				cell2.setBorderWidth(0.01f);
				cell2.setPaddingBottom(5);
				cell2.setBorderWidthLeft(0.2f);
				cell2.setBorderColor(BaseColor.WHITE);

				PdfPCell cell2002 = new PdfPCell(new Paragraph("" + resultSet1.getString("age") + " Years", Font5));
				cell2002.setBorderWidth(0.01f);
				cell2002.setPaddingBottom(5);
				cell2002.setBorderWidthLeft(0.2f);
				cell2002.setBorderColor(BaseColor.WHITE);

				PdfPCell cell2003 = new PdfPCell(
						new Paragraph("" + StringUtils.capitalize(resultSet1.getString("gender")), Font5));
				cell2003.setBorderWidth(0.01f);
				cell2003.setPaddingBottom(5);
				cell2003.setBorderWidthLeft(0.2f);
				cell2003.setBorderColor(BaseColor.WHITE);

				table.addCell(cell0);
				table.addCell(cell3);
				table.addCell(cell311);
				table.addCell(cell2);
				table.addCell(cell2002);
				table.addCell(cell2003);

				document.add(table);
			}

			PdfPTable table4 = new PdfPTable(4);

			table4.setWidthPercentage(100);
			Rectangle rect7 = new Rectangle(270, 700);
			table4.setWidthPercentage(new float[] { 50, 80, 35, 105 }, rect7);

			PdfPCell cell2004 = new PdfPCell(new Paragraph("Diagnosis: ", Font5));
			cell2004.setBorderWidth(0.01f);
			cell2004.setPaddingBottom(5);
			cell2004.setBorderWidthLeft(0.2f);
			cell2004.setBorderColor(BaseColor.WHITE);

			PdfPCell cell20040 = new PdfPCell(new Paragraph(StringUtils.capitalize(diagnosis), mainContent));
			cell20040.setBorderWidth(0.01f);
			cell20040.setPaddingBottom(5);
			cell20040.setBorderWidthLeft(0.2f);
			cell20040.setBorderColor(BaseColor.WHITE);

			table4.addCell(cell2004);
			table4.addCell(cell20040);

			if (advice == "" || advice == null) {
				PdfPCell cell2005 = new PdfPCell(new Paragraph(""));
				cell2005.setBorderWidth(0.01f);
				cell2005.setPaddingBottom(5);
				cell2005.setColspan(2);
				cell2005.setBorderWidthLeft(0.2f);
				cell2005.setBorderColor(BaseColor.WHITE);

				table4.addCell(cell2005);
			} else if (advice.isEmpty()) {
				PdfPCell cell2005 = new PdfPCell(new Paragraph(""));
				cell2005.setBorderWidth(0.01f);
				cell2005.setPaddingBottom(5);
				cell2005.setColspan(2);
				cell2005.setBorderWidthLeft(0.2f);
				cell2005.setBorderColor(BaseColor.WHITE);

				table4.addCell(cell2005);
			} else {

				PdfPCell cell2005 = new PdfPCell(new Paragraph("Advice: ", Font5));
				cell2005.setBorderWidth(0.01f);
				cell2005.setPaddingBottom(5);
				cell2005.setBorderWidthLeft(0.2f);
				cell2005.setBorderColor(BaseColor.WHITE);

				PdfPCell cell2006 = new PdfPCell(new Paragraph(StringUtils.capitalize(advice), marathiFont));
				cell2006.setBorderWidth(0.01f);
				cell2006.setPaddingBottom(5);
				cell2006.setHorizontalAlignment(Element.ALIGN_LEFT);
				cell2006.setBorderWidthLeft(0.2f);
				cell2006.setBorderColor(BaseColor.WHITE);

				table4.addCell(cell2005);
				table4.addCell(cell2006);
			}

			document.add(table4);

			while (resultSet3.next()) {

				investigation = resultSet3.getString("investigation");

				if (investigation == "" || investigation == null) {
					continue;
				} else if (investigation.isEmpty()) {
					continue;
				} else {

					PdfPTable table2 = new PdfPTable(2);

					table2.setWidthPercentage(100);
					Rectangle rect5 = new Rectangle(270, 700);
					table2.setWidthPercentage(new float[] { 105, 165 }, rect5);

					PdfPCell cell002 = new PdfPCell(new Paragraph("Investigation/Procedure: ", Font5));
					cell002.setBorderWidth(0.01f);
					cell002.setPaddingBottom(5);
					cell002.setColspan(1);
					cell002.setBorderWidthLeft(0.2f);
					cell002.setBorderColor(BaseColor.WHITE);

					/*
					 * for investigation details
					 */
					PdfPCell cell2001 = new PdfPCell(new Paragraph(investigation, mainContent));
					cell2001.setBorderWidth(0.2f);
					cell2001.setColspan(2);
					cell2001.setPaddingBottom(1);
					cell2001.setHorizontalAlignment(Element.ALIGN_LEFT);
					cell2001.setBorderColor(BaseColor.WHITE);

					table2.addCell(cell002);
					table2.addCell(cell2001);

					document.add(table2);

				}

			}

			/*
			 * For prescription
			 */
			PdfPTable table3 = new PdfPTable(3);
			table3.setWidthPercentage(100);
			Rectangle rect2 = new Rectangle(270, 700);
			table3.setWidthPercentage(new float[] { 30, 180, 60 }, rect2);

			// For blank space
			PdfPCell cell30 = new PdfPCell(new Paragraph(
					"                                                                                               "
							+ "                                                                                                                            "
							+ "                                                                                                                              ",
					Font2));
			cell30.setColspan(3);
			cell30.setBorderWidthRight(0f);
			cell30.setBorderWidthLeft(0f);
			cell30.setBorderWidthTop(0f);
			cell30.setBorderWidthBottom(0f);
			cell30.setBorderColorTop(BaseColor.WHITE);

			PdfPCell cell3011 = new PdfPCell(new Paragraph(
					"                                                                                               "
							+ "                                                                                                                            "
							+ "                                                                                                                              ",
					Font2));
			cell3011.setColspan(3);
			cell3011.setBorderWidthRight(0f);
			cell3011.setBorderWidthLeft(0f);
			cell3011.setBorderWidthTop(0f);
			cell3011.setBorderWidthBottom(0f);
			cell3011.setBorderColorTop(BaseColor.WHITE);

			/*
			 * Table for Prescription image
			 */
			PdfPTable imageTable = new PdfPTable(2);
			imageTable.setWidthPercentage(80);
			imageTable.setWidths(new int[] { 1, 2 });

			PdfPCell imageCell1 = new PdfPCell(prescrImg, true);
			imageCell1.setBorderColor(BaseColor.WHITE);

			PdfPCell imageCell2 = new PdfPCell(new Paragraph("", mainContent));
			imageCell2.setBorderColor(BaseColor.WHITE);

			imageTable.addCell(imageCell1);
			imageTable.addCell(imageCell2);

			// Gene
			PdfPCell cell3002 = new PdfPCell(imageTable);
			cell3002.setBorderWidth(0.0f);
			cell3002.setPaddingBottom(10);
			cell3002.setBorderColor(BaseColor.WHITE);

			PdfPCell cell320 = new PdfPCell(new Paragraph("", mainContent));
			cell320.setBorderWidth(0.01f);
			cell320.setPaddingBottom(5);
			cell320.setBorderColor(BaseColor.WHITE);

			// Amino Acid Change
			PdfPCell cell34 = new PdfPCell(new Paragraph("Qty", Font5));
			cell34.setBorderWidth(0.01f);
			cell34.setPaddingBottom(5);
			cell34.setHorizontalAlignment(Element.ALIGN_RIGHT);
			cell34.setBorderColor(BaseColor.WHITE);

			table3.addCell(cell30);
			table3.addCell(cell3011);
			table3.addCell(cell3002);
			table3.addCell(cell320);
			table3.addCell(cell34);

			document.add(table3);

			while (resultSet.next()) {

				PdfPTable table1 = new PdfPTable(3);

				table1.setWidthPercentage(100);
				Rectangle rect1 = new Rectangle(270, 700);
				table1.setWidthPercentage(new float[] { 110, 40, 120 }, rect1);

				String finalTradeName = resultSet.getString("tradeName").toUpperCase();

				System.out.println("TRADENAME:: " + finalTradeName);
				if (resultSet.getString("category") == null || resultSet.getString("category") == "") {
					finalTradeName = finalTradeName;
				} else if (resultSet.getString("category").isEmpty()) {
					finalTradeName = finalTradeName;
				} else {
					finalTradeName = finalTradeName + "\t\t\t\t" + resultSet.getString("category");
				}

				if (resultSet.getString("drugName") == null || resultSet.getString("drugName") == "") {
					finalTradeName = finalTradeName;
				} else if (resultSet.getString("drugName").isEmpty()) {
					finalTradeName = finalTradeName;
				} else {
					finalTradeName += "\n(" + resultSet.getString("drugName") + ")";
				}
				// String category = StringUtils.capitalize(resultSet.getString("category"));
				/*
				 * for Nucleotide Change
				 */

				PdfPCell cell21 = new PdfPCell(new Paragraph(finalTradeName, marathiFont));
				cell21.setBorderWidth(0.2f);
				cell21.setPaddingBottom(1);
				cell21.setPaddingTop(3);
				cell21.setColspan(2);
				cell21.setBorderColor(BaseColor.WHITE);

				System.out.println("QUANTIRTY:: " + resultSet.getDouble("quantity"));
				/*
				 * for Amino Acid Change
				 */
				PdfPCell cell22 = new PdfPCell(new Paragraph("" + resultSet.getDouble("quantity"), mainContent));
				cell22.setBorderWidth(0.2f);
				cell22.setPaddingBottom(1);
				cell22.setPaddingTop(3);
				cell22.setHorizontalAlignment(Element.ALIGN_RIGHT);
				cell22.setBorderColor(BaseColor.WHITE);

				table1.addCell(cell21);
				table1.addCell(cell22);

				String frequency = resultSet.getString("frequency");
				String freq = frequency.replace(',', '\n');
				System.out.println("FREQ:: " + freq);

				String noOfDays = resultSet.getString("numberOfDays");
				String noOfDays1 = noOfDays.replace(",", " days\n");
				System.out.println("NODaDAY:: " + noOfDays);

				// String[] frequency = frequencyDetails.split(",");
				// int countFrequency = 0;

				// for (int j = 0; j < frequency.length; j++) {

				PdfPTable table2 = new PdfPTable(3);

				table2.setWidthPercentage(100);
				Rectangle rect3 = new Rectangle(270, 700);
				table2.setWidthPercentage(new float[] { 90, 40, 140 }, rect1);

				/*
				 * PdfPTable tableNew = new PdfPTable(2);
				 * 
				 * tableNew.setWidthPercentage(100); tableNew.setWidths(new int[] { 100, 50 });
				 */

				// String[] frequencyVal = frequency[j].split("\\$");

				PdfPCell cell24 = new PdfPCell(new Paragraph(freq, marathiFont));
				cell24.setBorderWidth(0.2f);
				cell24.setPaddingBottom(10);
				cell24.setBorderColor(BaseColor.WHITE);

				PdfPCell cell241 = new PdfPCell(new Paragraph(noOfDays1 + " days", mainContent));
				cell241.setBorderWidth(0.2f);
				cell241.setPaddingBottom(10);
				cell241.setBorderColor(BaseColor.WHITE);

				PdfPCell cell25 = new PdfPCell(
						new Paragraph(StringUtils.capitalize(resultSet.getString("comment").trim()), marathiFont));
				cell25.setBorderWidth(0.2f);
				cell25.setPaddingBottom(9);
				cell25.setBorderColor(BaseColor.WHITE);

				/*
				 * PdfPCell cell25 = new PdfPCell(new Paragraph(""));
				 * cell25.setBorderWidth(0.2f); cell25.setPaddingBottom(10);
				 * cell25.setColspan(1); cell25.setHorizontalAlignment(Element.ALIGN_RIGHT);
				 * cell25.setBorderColor(BaseColor.WHITE);
				 */

				table2.addCell(cell24);
				table2.addCell(cell241);
				table2.addCell(cell25);

				/*
				 * PdfPCell cell242 = new PdfPCell(tableNew); cell242.setBorderWidth(0.2f);
				 * cell242.setPaddingBottom(1); cell242.setColspan(2);
				 * cell242.setBorderColor(BaseColor.WHITE);
				 * 
				 * table1.addCell(cell242);
				 */

				/*
				 * for Clinical Significance
				 */
				/*
				 * if (countFrequency == 0) { PdfPCell cell25 = new PdfPCell(new Paragraph(
				 * StringUtils.capitalize(resultSet.getString("comment").trim()), marathiFont));
				 * cell25.setBorderWidth(0.2f); cell25.setPaddingBottom(1);
				 * cell25.setColspan(1); cell25.setHorizontalAlignment(Element.ALIGN_RIGHT);
				 * cell25.setBorderColor(BaseColor.WHITE);
				 * 
				 * table1.addCell(cell25); } else { PdfPCell cell25 = new PdfPCell(new
				 * Paragraph("")); cell25.setBorderWidth(0.2f); cell25.setPaddingBottom(1);
				 * cell25.setColspan(1); cell25.setHorizontalAlignment(Element.ALIGN_RIGHT);
				 * cell25.setBorderColor(BaseColor.WHITE);
				 * 
				 * table1.addCell(cell25); }
				 */

				// countFrequency++;
				// }

				document.add(table1);
				document.add(table2);
			}

			/*
			 * For signature in footer
			 */
			PdfPTable tableNew = new PdfPTable(1);

			tableNew.setWidthPercentage(100);
			Rectangle rect6 = new Rectangle(270, 700);
			tableNew.setWidthPercentage(new float[] { 270 }, rect6);

			PdfPCell cell1112 = new PdfPCell(
					new Paragraph("Follow-up after  " + nextVisitDays + "  days.", marathiFont));
			cell1112.setBackgroundColor(BaseColor.WHITE);
			cell1112.setPaddingTop(30);
			cell1112.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell1112.setBorderColor(BaseColor.WHITE);

			tableNew.addCell(cell1112);

			document.add(tableNew);

			/*
			 * For signature in footer
			 * 
			 * PdfPTable tableFooter = new PdfPTable(1); tableFooter.setTotalWidth(510);
			 * tableFooter.setWidthPercentage(100);
			 * 
			 * PdfPCell cellFooter = new PdfPCell(new Paragraph(""));
			 * cellFooter.setBackgroundColor(BaseColor.WHITE);
			 * cellFooter.setBorderColor(BaseColor.WHITE); cellFooter.setPaddingBottom(100);
			 * 
			 * tableFooter.addCell(cellFooter);
			 * 
			 * FooterTable1 event = new FooterTable1(tableFooter);
			 * writer.setPageEvent(event);
			 */

			/*
			 * For signature in footer
			 */

			PdfPTable tableFooter = new PdfPTable(1);
			tableFooter.setTotalWidth(510);
			tableFooter.setWidthPercentage(100);

			// Table for Prescription image

			PdfPTable imageTable1 = new PdfPTable(2);
			imageTable1.setWidthPercentage(80);
			imageTable1.setWidths(new int[] { 1, 2 });

			PdfPCell imageCell11 = new PdfPCell(signImg, true);
			imageCell11.setBorderColor(BaseColor.WHITE);

			PdfPCell imageCell21 = new PdfPCell(new Paragraph("", mainContent));
			imageCell21.setBorderColor(BaseColor.WHITE);

			imageTable1.addCell(imageCell11);
			imageTable1.addCell(imageCell21);

			PdfPCell cellFooter = new PdfPCell(imageTable1);
			cellFooter.setBorderWidth(0.01f);
			cellFooter.setPaddingBottom(15);
			cellFooter.setPaddingLeft(100);
			cellFooter.setBorderColor(BaseColor.WHITE);

//			PdfPCell cellFooter1 = new PdfPCell(new Paragraph(docName, Font5));
//			cellFooter1.setBorderWidth(0.01f);
//			cellFooter1.setPaddingBottom(15);
//			cellFooter1.setPaddingLeft(100);
//			cellFooter1.setBorderColor(BaseColor.WHITE);

			tableFooter.addCell(cellFooter);
//			tableFooter.addCell(cellFooter1);

			// document.add(tableFooter);

			FooterTable1 event = new FooterTable1(tableFooter);
			writer.setPageEvent(event);

			document.close();

			System.out.println("Successfully written and generated General physicial Prescription PDF Report");

			status = "success";

			connection.close();

		} catch (Exception exception) {
			exception.printStackTrace();
			status = "error";
		}
		return status;

	}

	/**
	 * 
	 * @param patientID
	 * @param visitID
	 * @param realPath
	 * @param pdfFileName
	 * @param clinicID
	 * @return convertLabBillingPDF
	 */
	public String convertBillingPDF(int patientID, int visitID, String realPath, String pdfFileName, int clinicID,
			int practiceID, String username, AmazonS3 s3, String s3reportFilePath, String bucketName) {

		int count = 1;

		String status = null;

		String billDate = null;

		double totalBill = 0D;
		String diagnosis = null;
		String docName = null;

		/*
		 * To covert date from database into DD-MM-YYYY
		 */
		SimpleDateFormat databaseDate = new SimpleDateFormat("yyyy-MM-dd");

		SimpleDateFormat dateToBeDisplayed = new SimpleDateFormat("dd-MM-yyyy HH:mm");

		Date date = new Date();

		String receiptNo = "";
		String receiptDate = "";
		String billingType = "";
		double amount = 0D;
		int visitTypeID = 0;
		String visitTypeName = "";
		String signature = null;
		Image signImg = null;
		String regNo = "";
		double consultationCharges = 0D;
		double totalAmt = 0D;
		double tax = 0D;
		double netAmt = 0D;
		double advAmt = 0D;
		double balanceAmt = 0D;
		String paymentType = "";
		String refReceiptNo = "";
		String ClinicianName = "";
		double totalDiscount = 0D;
		String patientName = "";
		/*
		 * Declaring variable which stores the location for FreeSans.ttf file to print
		 * marathi text on pdf
		 */
		String marathiFontDir = realPath + "fonts/FreeSans.ttf";

		ConfigurationUtil configXMLUtil = new ConfigurationUtil();

		try {
			connection = getConnection();

			/*
			 * Generate the queries to fetch details
			 */
			String fetchDetailQuery1 = QueryMaker.OPD_PDF_RETRIEVE_PATIENT;

			preparedStatement1 = connection.prepareStatement(fetchDetailQuery1);
			preparedStatement1.setInt(1, patientID);
			resultSet1 = preparedStatement1.executeQuery();

			String fetchDetailQuery2 = QueryMaker.OPD_PDF_RETRIEVE_VISIT;

			preparedStatement3 = connection.prepareStatement(fetchDetailQuery2);
			preparedStatement3.setInt(1, visitID);
			resultSet3 = preparedStatement3.executeQuery();

			// To fetch visit details from Visit Table
			while (resultSet3.next()) {
				diagnosis = resultSet3.getString("diagnosis");
				visitTypeID = resultSet3.getInt("visitTypeID");
			}

			String fetchDetailQuery3 = QueryMaker.OPD_PDF_RETRIEVE_VISIT_TYPE_NAME;
			preparedStatement4 = connection.prepareStatement(fetchDetailQuery3);
			preparedStatement4.setInt(1, visitTypeID);
			resultSet4 = preparedStatement4.executeQuery();
			while (resultSet4.next()) {
				visitTypeName = resultSet4.getString("name");
			}

			/*
			 * Generate the queries to fetch details
			 */
			String fetchDetailQuery4 = QueryMaker.RETREIVE_BILL_LIST;

			preparedStatement2 = connection.prepareStatement(fetchDetailQuery4);
			preparedStatement2.setInt(1, visitID);
			// preparedStatement2.setString(1, ActivityStatus.ACTIVE);
			resultSet2 = preparedStatement2.executeQuery();

			while (resultSet2.next()) {

				receiptNo = resultSet2.getString("receiptNo");
				receiptDate = dateToBeDisplayed.format(resultSet2.getTimestamp("receiptDate"));
				billingType = resultSet2.getString("billingType");
				amount = resultSet2.getDouble("netAmount");
				totalBill = resultSet2.getDouble("totalAmount");
				consultationCharges = resultSet2.getDouble("consultationCharges");
				tax = resultSet2.getDouble("totalDiscount");
				advAmt = resultSet2.getDouble("advPayment");
				balanceAmt = resultSet2.getDouble("balPayment");
				totalDiscount = resultSet2.getDouble("totalDiscount");
				paymentType = resultSet2.getString("paymentType");
				refReceiptNo = resultSet2.getString("referenceReceiptNo");
				ClinicianName = resultSet2.getString("clinicianName");

			}

			/*
			 * Retrieve patient registration no based on patientID and clinicID from
			 * ClinicRegistration table
			 */
			String fetchClinicRegNoQuery = QueryMaker.RETRIEVE_CLINIC_REG_NO_BY_CLINIC_ID;

			preparedStatement = connection.prepareStatement(fetchClinicRegNoQuery);

			preparedStatement.setInt(1, clinicID);
			preparedStatement.setInt(2, patientID);

			resultSet2 = preparedStatement.executeQuery();

			while (resultSet2.next()) {
				regNo = resultSet2.getString("regNumber");
			}

			RegistrationDAOinf registrationDAOinf = new RegistrationDAOImpl();

			// Retrieving USER Details by PracticeID
			HashMap<String, String> MDMap = registrationDAOinf.retrieveUserDetails(practiceID, username);

			// File SignatureFile = new File(logoFilePath + File.separator +
			// MDMap.get("Signature"));
			signature = MDMap.get("Signature");
			docName = MDMap.get("FirstName") + " " + MDMap.get("LastName");

			System.out.println("doc name ::" + docName);

			if (signature == "" || signature == null) {
				signImg = null;
			} else if (signature.isEmpty()) {
				signImg = null;
			} else {

				S3ObjectInputStream s3ObjectInputStream = s3
						.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, signature))
						.getObjectContent();

				IOUtils.copy(s3ObjectInputStream, new FileOutputStream(new File(realPath + "images/" + signature)));

				signImg = Image.getInstance(realPath + "images/" + signature);
			}

			/*
			 * Getting image path from XML
			 */
			String A5ImagePath = configXMLUtil.getLetterHeadImage();

			/*
			 * Getting page size from XMl
			 */
			String pageSize = configXMLUtil.getPageSize();

			/*
			 * Setting path to store PDF file
			 */
			File file = new File(realPath + "/" + pdfFileName);
			/*
			 * Creating Document for PDF
			 */
			Document document = null;

			/*
			 * Checking whether pageSize tag in XMl contains A5 or A4, according to that
			 * setting PDF page size
			 */
			if (pageSize.equals("A5")) {
				document = new Document(PageSize.A5);
			} else if (pageSize.equals("A4")) {
				document = new Document(PageSize.A4);
			}

			PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(file));

			Font Font1 = new Font(Font.FontFamily.TIMES_ROMAN, 10, Font.NORMAL);
			Font Font3 = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.NORMAL);
			Font Font2 = new Font(Font.FontFamily.TIMES_ROMAN, 8, Font.NORMAL);
			Font Font4 = new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.BOLD);
			Font Font5 = new Font(Font.FontFamily.TIMES_ROMAN, 10, Font.BOLD);
			Font Font7 = new Font(Font.FontFamily.TIMES_ROMAN, 14, Font.BOLD);
			Font mainContent = new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.NORMAL);
			Font mainContent1 = new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.NORMAL);
			mainContent1.setColor(BaseColor.GRAY);
			/*
			 * Defining marathi font
			 */
			Font marathiFont = FontFactory.getFont(marathiFontDir, BaseFont.IDENTITY_H, BaseFont.EMBEDDED);

			document.open();

			/*
			 * Adding image
			 */
			PdfContentByte canvas = writer.getDirectContentUnder();

			/*
			 * Checking whether pageSize is A4 or A5, according to that background image is
			 * being set
			 */

			Image image;

			if (pageSize.equals("A5")) {
				if (A5ImagePath == null || A5ImagePath == "") {
					image = null;

				} else {

					if (A5ImagePath.isEmpty()) {
						image = null;
					} else {
						System.out.println("A5img--::" + A5ImagePath);

						S3ObjectInputStream s3ObjectInputStream = s3
								.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, A5ImagePath))
								.getObjectContent();

						IOUtils.copy(s3ObjectInputStream,
								new FileOutputStream(new File(realPath + "images/" + A5ImagePath)));

						image = Image.getInstance(realPath + "images/" + A5ImagePath);

						image.scaleToFit(PageSize.A5.getWidth(), PageSize.A5.getHeight());
						image.setAbsolutePosition(0, 0);

						canvas.saveState();
						PdfGState state = new PdfGState();
						canvas.setGState(state);
						canvas.addImage(image);
						canvas.restoreState();
					}

				}
			} else if (pageSize.equals("A4")) {
				System.out.println("A4img::" + A5ImagePath);
				if (A5ImagePath == null || A5ImagePath == "") {

					image = null;

				} else {

					if (A5ImagePath.isEmpty()) {

						image = null;
					} else {

						S3ObjectInputStream s3ObjectInputStream = s3
								.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, A5ImagePath))
								.getObjectContent();

						IOUtils.copy(s3ObjectInputStream,
								new FileOutputStream(new File(realPath + "images/" + A5ImagePath)));

						image = Image.getInstance(realPath + "images/" + A5ImagePath);

						image.scaleToFit(PageSize.A4.getWidth(), PageSize.A4.getHeight());
						image.setAbsolutePosition(0, 0);

						canvas.saveState();
						PdfGState state = new PdfGState();
						canvas.setGState(state);
						canvas.addImage(image);
						canvas.restoreState();
					}

				}
			}

			/*
			 * Setting header
			 */
			document.addCreator("eDhanvantari");
			document.addTitle("Consultation Billing");

			/*
			 * For displaying patient personal details
			 */
			while (resultSet1.next()) {

				if (resultSet1.getString("middleName") == null || resultSet1.getString("middleName") == ""
						|| resultSet1.getString("middleName").isEmpty()) {
					patientName = resultSet1.getString("firstName") + " " + resultSet1.getString("lastName");
				} else {
					patientName = resultSet1.getString("firstName") + " " + resultSet1.getString("middleName") + " "
							+ resultSet1.getString("lastName");
				}
			}

			/*
			 * document.addCreator("eDhanvantariLab"); document.addTitle("Lab Test Bill");
			 */

			PdfPTable table = new PdfPTable(2);

			table.setFooterRows(1);
			table.setWidthPercentage(100);
			Rectangle rect = new Rectangle(270, 700);
			table.setWidthPercentage(new float[] { 70, 200 }, rect);

			PdfPCell cell = new PdfPCell(new Paragraph("Bill Receipt", Font5));
			cell.setPaddingTop(70);
			cell.setPaddingBottom(5);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell.setUseBorderPadding(true);
			cell.setColspan(2);
			cell.setBorder(Rectangle.NO_BORDER);
			cell.setBorderWidthBottom(1f);
			cell.setBorderColorBottom(BaseColor.DARK_GRAY);
			cell.setBorderColor(BaseColor.WHITE);

			/*
			 * For Patient Name
			 */
			PdfPCell cell2 = new PdfPCell(new Paragraph("Patient Name", mainContent));
			cell2.setBorderWidth(0.01f);
			cell2.setPaddingBottom(5);
			cell2.setBorderWidthLeft(0.2f);
			cell2.setBorderColor(BaseColor.WHITE);

			PdfPCell cell3 = new PdfPCell(new Paragraph(patientName + "(" + regNo + ")", mainContent));
			cell3.setBorderWidth(0.2f);
			cell3.setPaddingBottom(5);
			cell3.setBorderColor(BaseColor.WHITE);

			/*
			 * adding all cell to the table to create tabular structure
			 */

			table.addCell(cell);
			// table.addCell(cell1);
			table.addCell(cell2);
			table.addCell(cell3);

			document.add(table);

			/*
			 * For Billing header
			 */
			PdfPTable table0 = new PdfPTable(3);
			table0.setWidthPercentage(100);
			Rectangle rect0 = new Rectangle(270, 700);
			table0.setWidthPercentage(new float[] { 100, 50, 120 }, rect0);

			// For blank space
			PdfPCell cell10 = new PdfPCell(new Paragraph("", Font2));
			cell10.setColspan(3);
			cell10.setPadding(0);
			cell10.setPaddingBottom(2);
			cell10.setBorderColor(BaseColor.WHITE);

			// For Receipt Date and time
			PdfPCell cell4 = new PdfPCell(new Paragraph("Receipt Date and Time: " + receiptDate, mainContent));
			cell4.setPaddingBottom(2);
			cell4.setColspan(2);
			cell4.setBorderWidthRight(0f);
			cell4.setBorderWidthLeft(0f);
			cell4.setBorderWidthTop(0f);
			cell4.setBorderWidthBottom(0f);
			cell4.setBorderColor(BaseColor.WHITE);

			// For receipt no.
			PdfPCell cell5 = new PdfPCell(new Paragraph("Receipt No.: " + receiptNo, mainContent));
			cell5.setBorderWidth(0.01f);
			cell5.setPaddingBottom(2);
			cell5.setHorizontalAlignment(Element.ALIGN_RIGHT);
			cell5.setBorderColor(BaseColor.WHITE);

			table0.addCell(cell10);
			table0.addCell(cell4);
			table0.addCell(cell5);
			// table0.addCell(cell6);

			document.add(table0);

			/*
			 * For prescription
			 */
			PdfPTable table3 = new PdfPTable(3);
			table3.setWidthPercentage(100);
			Rectangle rect2 = new Rectangle(270, 700);
			table3.setWidthPercentage(new float[] { 40, 120, 100 }, rect2);

			/*
			 * Creating Table header
			 */

			// For blank space
			PdfPCell cell30 = new PdfPCell(new Paragraph(
					"                                                                                               "
							+ "                                                                                                                            "
							+ "                                                                                                                              ",
					Font2));
			cell30.setColspan(3);
			cell30.setBorderWidthRight(0f);
			cell30.setBorderWidthLeft(0f);
			cell30.setBorderWidthTop(0f);
			cell30.setBorderWidthBottom(0f);
			cell30.setBorderColorTop(BaseColor.WHITE);

			// for Title
			PdfPCell cell31 = new PdfPCell(new Paragraph("Billing Details", Font5));
			cell31.setPaddingTop(20);
			cell31.setPaddingBottom(10);
			cell31.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell31.setUseBorderPadding(true);
			cell31.setColspan(3);
			cell31.setBorderWidthRight(0.1f);
			cell31.setBorderWidthLeft(0.1f);
			cell31.setBorderWidthTop(0.1f);
			cell31.setBorderWidthBottom(1f);
			cell31.setBorderColorBottom(BaseColor.DARK_GRAY);
			cell31.setBorderColor(BaseColor.WHITE);

			// for Title
			/*
			 * PdfPCell cell311 = new PdfPCell(new Paragraph("Billing Date:\t" +
			 * receiptDate, Font5)); cell311.setPaddingTop(5); cell311.setPaddingBottom(10);
			 * cell311.setHorizontalAlignment(Element.ALIGN_CENTER);
			 * cell311.setUseBorderPadding(true); cell311.setColspan(5);
			 * cell311.setBorderWidthRight(0.1f); cell311.setBorderWidthLeft(0.1f);
			 * cell311.setBorderWidthTop(0.1f); cell311.setBorderWidthBottom(1f);
			 * cell311.setBorderColorBottom(BaseColor.DARK_GRAY);
			 * cell311.setBorderColor(BaseColor.WHITE);
			 */
			// Gene
			PdfPCell cell32 = new PdfPCell(new Paragraph("Sr.No.", Font4));
			cell32.setBorderWidth(0.01f);
			cell32.setPaddingBottom(5);
			cell32.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell32.setBorderColor(BaseColor.BLACK);

			// Nucleotide Change
			PdfPCell cell33 = new PdfPCell(new Paragraph("Description", Font4));
			cell33.setBorderWidth(0.01f);
			cell33.setPaddingBottom(5);
			cell33.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell33.setBorderColor(BaseColor.BLACK);

			// Amino Acid Change
			/*
			 * PdfPCell cell34 = new PdfPCell(new Paragraph("Rate", mainContent));
			 * 
			 * cell34.setBorderWidth(0.01f); cell34.setPaddingBottom(5);
			 * cell34.setBorderColor(BaseColor.WHITE);
			 * 
			 * // Variant Type PdfPCell cell35 = new PdfPCell(new Paragraph("Charge",
			 * mainContent));
			 * 
			 * cell35.setBorderWidth(0.01f); cell35.setPaddingBottom(5);
			 * cell35.setBorderColor(BaseColor.WHITE);
			 */

			// Variant Impact
			PdfPCell cell36 = new PdfPCell(new Paragraph("Amount", Font4));
			cell36.setBorderWidth(0.01f);
			cell36.setPaddingBottom(5);
			cell36.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell36.setBorderColor(BaseColor.BLACK);

			table3.addCell(cell30);
			// table3.addCell(cell311);
			table3.addCell(cell31);
			table3.addCell(cell32);
			table3.addCell(cell33);
			// table3.addCell(cell34);
			// table3.addCell(cell35);
			table3.addCell(cell36);

			document.add(table3);

			/*
			 * Table for billing
			 */

			PdfPTable table1 = new PdfPTable(3);
			table1.setWidthPercentage(100);
			Rectangle rect1 = new Rectangle(270, 700);
			table1.setWidthPercentage(new float[] { 40, 120, 100 }, rect1);

			// while (resultSet.next()) {

			/*
			 * for Gene
			 */
			PdfPCell cell20 = new PdfPCell(new Paragraph("" + count + "", mainContent));
			cell20.setBorderWidth(0.2f);
			cell20.setPaddingBottom(2);
			cell20.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell20.setBorderColor(BaseColor.BLACK);

			/*
			 * for Nucleotide Change
			 */
			PdfPCell cell21 = new PdfPCell(new Paragraph(visitTypeName + " - " + diagnosis, mainContent));
			cell21.setBorderWidth(0.2f);
			cell21.setPaddingBottom(2);
			cell21.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell21.setBorderColor(BaseColor.BLACK);

			/*
			 * for Amino Acid Change
			 */
			/*
			 * PdfPCell cell22 = new PdfPCell(new
			 * Paragraph(String.valueOf(resultSet.getDouble("rate")), mainContent));
			 * cell22.setBorderWidth(0.2f); cell22.setPaddingBottom(2);
			 * cell22.setBorderColor(BaseColor.WHITE);
			 * 
			 * 
			 * for Variant Type
			 * 
			 * PdfPCell cell23 = new PdfPCell( new
			 * Paragraph(String.valueOf(resultSet.getDouble("charge")), mainContent));
			 * cell23.setBorderWidth(0.2f); cell23.setPaddingBottom(2);
			 * cell23.setBorderColor(BaseColor.WHITE);
			 */

			/*
			 * for Variant Impact
			 */
			PdfPCell cell24 = new PdfPCell(new Paragraph(String.valueOf(totalBill), mainContent));
			cell24.setBorderWidth(0.2f);
			cell24.setPaddingBottom(2);
			cell24.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell24.setBorderColor(BaseColor.BLACK);

			table1.addCell(cell20);
			table1.addCell(cell21);
			// table1.addCell(cell22);
			// table1.addCell(cell23);
			table1.addCell(cell24);

			count++;

			/*
			 * For total bill
			 */
			/*
			 * PdfPCell cell23 = new PdfPCell(new Paragraph("Total Bill", mainContent));
			 * cell23.setBorderWidth(0.2f); cell23.setPaddingBottom(2);
			 * cell23.setColspan(4); cell23.setHorizontalAlignment(Element.ALIGN_RIGHT);
			 * cell23.setBorderColor(BaseColor.WHITE);
			 * 
			 * PdfPCell cell24 = new PdfPCell(new Paragraph(String.valueOf(totalBill),
			 * mainContent)); cell24.setBorderWidth(0.2f); cell24.setPaddingBottom(2);
			 * cell24.setBorderColor(BaseColor.WHITE);
			 * 
			 * PdfPCell cell25 = new PdfPCell(new Paragraph("\n", mainContent));
			 * cell25.setBorderWidth(0.2f); cell25.setPaddingBottom(2);
			 * cell25.setColspan(5); cell25.setBorderColor(BaseColor.WHITE);
			 * 
			 * table1.addCell(cell23); table1.addCell(cell24); table1.addCell(cell25);
			 */
			document.add(table1);

			PdfPTable table2 = new PdfPTable(3);
			table2.setWidthPercentage(100);
			Rectangle rect02 = new Rectangle(270, 700);
			table2.setWidthPercentage(new float[] { 40, 120, 100 }, rect02);

			PdfPCell cell25 = new PdfPCell(new Paragraph("Total Amount", Font1));
			cell25.setBorderWidth(0.2f);
			cell25.setPaddingBottom(3);
			cell25.setColspan(2);
			cell25.setHorizontalAlignment(Element.ALIGN_RIGHT);
			cell25.setBorderColor(BaseColor.GRAY);

			// For total amount
			PdfPCell cell26 = new PdfPCell(new Paragraph("" + totalBill, Font1));
			cell26.setBorderWidth(0.2f);
			cell26.setPaddingBottom(3);
			cell26.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell26.setBorderColor(BaseColor.GRAY);

			// For Advance Payment
			PdfPCell cell29 = new PdfPCell(new Paragraph("Total Discount", Font1));
			cell29.setBorderWidth(0.2f);
			cell29.setPaddingBottom(3);
			cell29.setColspan(2);
			cell29.setHorizontalAlignment(Element.ALIGN_RIGHT);
			cell29.setBorderColor(BaseColor.GRAY);

			// For Advance Payment
			PdfPCell cell34 = new PdfPCell(new Paragraph("" + totalDiscount, Font1));
			cell34.setBorderWidth(0.2f);
			cell34.setPaddingBottom(3);
			cell34.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell34.setBorderColor(BaseColor.GRAY);

			// For NET Payment
			PdfPCell cell41 = new PdfPCell(new Paragraph("Net Amount", Font1));
			cell41.setBorderWidth(0.2f);
			cell41.setPaddingBottom(3);
			cell41.setColspan(2);
			cell41.setHorizontalAlignment(Element.ALIGN_RIGHT);
			cell41.setBorderColor(BaseColor.GRAY);
			cell41.setBorderWidthBottom(1f);

			// For NET Payment
			PdfPCell cell42 = new PdfPCell(new Paragraph("" + amount, Font1));
			cell42.setBorderWidth(0.2f);
			cell42.setPaddingBottom(3);
			cell42.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell42.setBorderColor(BaseColor.GRAY);
			cell42.setBorderWidthBottom(1f);

			table2.addCell(cell25);
			table2.addCell(cell26);
			// table2.addCell(cell251);
			// table2.addCell(cell261);
			// table2.addCell(cell27);
			// table2.addCell(cell28);
			table2.addCell(cell29);
			table2.addCell(cell34);
			table2.addCell(cell41);
			table2.addCell(cell42);

			if (balanceAmt != netAmt) {
				// For Advance AMT Payment
				PdfPCell cell43 = new PdfPCell(new Paragraph("Advance Payment", Font1));
				cell43.setBorderWidth(0.2f);
				cell43.setPaddingBottom(3);
				cell43.setColspan(2);
				cell43.setHorizontalAlignment(Element.ALIGN_RIGHT);
				cell43.setBorderColor(BaseColor.GRAY);
				cell43.setBorderWidthBottom(1f);

				// For Advance Amt Payment
				PdfPCell cell44 = new PdfPCell(new Paragraph("" + advAmt, Font1));
				cell44.setBorderWidth(0.2f);
				cell44.setPaddingBottom(3);
				cell44.setHorizontalAlignment(Element.ALIGN_CENTER);
				cell44.setBorderColor(BaseColor.GRAY);
				cell44.setBorderWidthBottom(1f);

				// For balance AMT Payment
				PdfPCell cell45 = new PdfPCell(new Paragraph("Balance Payment", Font1));
				cell45.setBorderWidth(0.2f);
				cell45.setPaddingBottom(3);
				cell45.setColspan(2);
				cell45.setHorizontalAlignment(Element.ALIGN_RIGHT);
				cell45.setBorderColor(BaseColor.GRAY);
				cell45.setBorderWidthBottom(1f);

				// For balance Amt Payment
				PdfPCell cell46 = new PdfPCell(new Paragraph("" + balanceAmt, Font1));
				cell46.setBorderWidth(0.2f);
				cell46.setPaddingBottom(3);
				cell46.setHorizontalAlignment(Element.ALIGN_CENTER);
				cell46.setBorderColor(BaseColor.GRAY);
				cell46.setBorderWidthBottom(1f);

				table2.addCell(cell43);
				table2.addCell(cell44);
				table2.addCell(cell45);
				table2.addCell(cell46);

			}

			document.add(table2);
			PdfPTable table4 = new PdfPTable(4);
			table4.setWidthPercentage(100);
			Rectangle rect3 = new Rectangle(270, 700);
			table4.setWidthPercentage(new float[] { 65, 70, 65, 70 }, rect3);

			/*
			 * Checking what the payment type is, printing details
			 */
			if (paymentType.contains("Cash")) {

				PdfPCell cell571 = new PdfPCell(new Paragraph("", mainContent));
				cell571.setBorderWidth(0.01f);
				cell571.setPaddingBottom(2);
				cell571.setPaddingTop(2);
				cell571.setColspan(4);
				cell571.setBorderColor(BaseColor.WHITE);

				/*
				 * For Payment Type
				 */
				PdfPCell cell57 = new PdfPCell(new Paragraph("Payment Type: ", mainContent));
				cell57.setBorderWidth(0.01f);
				cell57.setPaddingBottom(2);
				cell57.setPaddingTop(2);
				cell57.setBorderColor(BaseColor.WHITE);

				PdfPCell cell58 = new PdfPCell(new Paragraph(paymentType, mainContent));
				cell58.setBorderWidth(0.01f);
				cell58.setPaddingBottom(2);
				cell58.setPaddingTop(2);
				cell58.setColspan(3);
				cell58.setBorderColor(BaseColor.WHITE);

				PdfPCell cell61 = new PdfPCell(new Paragraph("", mainContent));
				cell61.setBorderWidth(0.01f);
				cell61.setColspan(4);
				cell61.setBorderWidthBottom(0.5f);
				cell61.setBorderColorBottom(BaseColor.GRAY);
				cell61.setBorderColor(BaseColor.WHITE);

				/*
				 * For Cash details
				 */
				// For cash paid
				/*
				 * PdfPCell cell62 = new PdfPCell(new Paragraph("Cash Paid", mainContent));
				 * cell62.setBorderWidth(0.01f); cell62.setPaddingBottom(2);
				 * cell62.setPaddingTop(2); cell62.setBorderColor(BaseColor.WHITE);
				 * 
				 * PdfPCell cell63 = new PdfPCell(new Paragraph("" + cashPaid, mainContent));
				 * cell63.setBorderWidth(0.01f); cell63.setPaddingBottom(2);
				 * cell63.setPaddingTop(2); cell63.setBorderColor(BaseColor.WHITE);
				 */

				// For Cash to return
				/*
				 * PdfPCell cell64 = new PdfPCell(new Paragraph("Cash To Return", mainContent));
				 * cell64.setBorderWidth(0.01f); cell64.setPaddingBottom(2);
				 * cell64.setPaddingTop(2); cell64.setBorderColor(BaseColor.WHITE);
				 * 
				 * PdfPCell cell65 = new PdfPCell(new Paragraph("" + cashToReturn,
				 * mainContent)); cell65.setBorderWidth(0.01f); cell65.setPaddingBottom(2);
				 * cell65.setPaddingTop(2); cell65.setBorderColor(BaseColor.WHITE);
				 */

				table4.addCell(cell571);
				table4.addCell(cell57);
				table4.addCell(cell58);
				table4.addCell(cell61);
				/*
				 * table4.addCell(cell62); table4.addCell(cell63); table4.addCell(cell64);
				 * table4.addCell(cell65);
				 */

			}
			if (paymentType.contains("Cheque")) {

				PdfPCell cell571 = new PdfPCell(new Paragraph("", mainContent));
				cell571.setBorderWidth(0.01f);
				cell571.setPaddingBottom(2);
				cell571.setPaddingTop(2);
				cell571.setColspan(4);
				cell571.setBorderColor(BaseColor.WHITE);

				/*
				 * For Payment Type
				 */
				PdfPCell cell57 = new PdfPCell(new Paragraph("Payment Type: ", mainContent));
				cell57.setBorderWidth(0.01f);
				cell57.setPaddingBottom(2);
				cell57.setPaddingTop(2);
				cell57.setBorderColor(BaseColor.WHITE);

				PdfPCell cell58 = new PdfPCell(new Paragraph(paymentType, mainContent));
				cell58.setBorderWidth(0.01f);
				cell58.setPaddingBottom(2);
				cell58.setPaddingTop(2);
				cell58.setColspan(3);
				cell58.setBorderColor(BaseColor.WHITE);

				PdfPCell cell61 = new PdfPCell(new Paragraph("", mainContent));
				cell61.setBorderWidth(0.01f);
				cell61.setColspan(4);
				cell61.setBorderWidthBottom(0.5f);
				cell61.setBorderColorBottom(BaseColor.GRAY);
				cell61.setBorderColor(BaseColor.WHITE);

				/*
				 * For cheque details
				 */
				// For cheque Issued By
				/*
				 * PdfPCell cell62 = new PdfPCell(new Paragraph("Cheque Issued By",
				 * mainContent)); cell62.setBorderWidth(0.01f); cell62.setPaddingBottom(2);
				 * cell62.setPaddingTop(2); cell62.setBorderColor(BaseColor.WHITE);
				 * 
				 * PdfPCell cell63 = new PdfPCell(new Paragraph(cheqIssuedBy, mainContent));
				 * cell63.setBorderWidth(0.01f); cell63.setPaddingBottom(2);
				 * cell63.setPaddingTop(2); cell63.setBorderColor(BaseColor.WHITE);
				 */

				// For cheque No
				/*
				 * PdfPCell cell64 = new PdfPCell(new Paragraph("Cheque No.", mainContent));
				 * cell64.setBorderWidth(0.01f); cell64.setPaddingBottom(2);
				 * cell64.setPaddingTop(2); cell64.setBorderColor(BaseColor.WHITE);
				 * 
				 * PdfPCell cell65 = new PdfPCell(new Paragraph(cheqNo, mainContent));
				 * cell65.setBorderWidth(0.01f); cell65.setPaddingBottom(2);
				 * cell65.setPaddingTop(2); cell65.setBorderColor(BaseColor.WHITE);
				 */

				// For cheque Bank Name
				/*
				 * PdfPCell cell66 = new PdfPCell(new Paragraph("Bank Name", mainContent));
				 * cell66.setBorderWidth(0.01f); cell66.setPaddingBottom(2);
				 * cell66.setPaddingTop(2); cell66.setBorderColor(BaseColor.WHITE);
				 * 
				 * PdfPCell cell67 = new PdfPCell(new Paragraph(bankName, mainContent));
				 * cell67.setBorderWidth(0.01f); cell67.setPaddingBottom(2);
				 * cell67.setPaddingTop(2); cell67.setBorderColor(BaseColor.WHITE);
				 */

				// For cheque Bank Branch
				/*
				 * PdfPCell cell68 = new PdfPCell(new Paragraph("Branch", mainContent));
				 * cell68.setBorderWidth(0.01f); cell68.setPaddingBottom(2);
				 * cell68.setPaddingTop(2); cell68.setBorderColor(BaseColor.WHITE);
				 * 
				 * PdfPCell cell69 = new PdfPCell(new Paragraph(bankBranch, mainContent));
				 * cell69.setBorderWidth(0.01f); cell69.setPaddingBottom(2);
				 * cell69.setPaddingTop(2); cell69.setBorderColor(BaseColor.WHITE);
				 */

				// For cheque Date
				/*
				 * PdfPCell cell70 = new PdfPCell(new Paragraph("Date", mainContent));
				 * cell70.setBorderWidth(0.01f); cell70.setPaddingBottom(2);
				 * cell70.setPaddingTop(2); cell70.setBorderColor(BaseColor.WHITE);
				 * 
				 * PdfPCell cell71 = new PdfPCell(new Paragraph(cheqDate, mainContent));
				 * cell71.setBorderWidth(0.01f); cell71.setPaddingBottom(2);
				 * cell71.setPaddingTop(2); cell71.setBorderColor(BaseColor.WHITE);
				 */

				// For cheque amount
				/*
				 * PdfPCell cell72 = new PdfPCell(new Paragraph("Amount", mainContent));
				 * cell72.setBorderWidth(0.01f); cell72.setPaddingBottom(2);
				 * cell72.setPaddingTop(2); cell72.setBorderColor(BaseColor.WHITE);
				 * 
				 * PdfPCell cell73 = new PdfPCell(new Paragraph("" + cheqAmt, mainContent));
				 * cell73.setBorderWidth(0.01f); cell73.setPaddingBottom(2);
				 * cell73.setPaddingTop(2); cell73.setBorderColor(BaseColor.WHITE);
				 * 
				 * PdfPCell cell74 = new PdfPCell(new Paragraph("", mainContent));
				 * cell74.setBorderWidth(0.01f); cell74.setColspan(4);
				 * cell74.setBorderWidthBottom(0.5f);
				 * cell74.setBorderColorBottom(BaseColor.GRAY);
				 * cell74.setBorderColor(BaseColor.WHITE);
				 */

				// For ref receipt No.
				/*
				 * PdfPCell cell75 = new PdfPCell(new Paragraph("Ref. Receipt No.",
				 * mainContent)); cell75.setBorderWidth(0.01f); cell75.setPaddingBottom(2);
				 * cell75.setPaddingTop(2); cell75.setColspan(3);
				 * cell75.setHorizontalAlignment(Element.ALIGN_RIGHT);
				 * cell75.setBorderColor(BaseColor.WHITE);
				 */

				// For ref receipt No.
				/*
				 * PdfPCell cell76 = new PdfPCell(new Paragraph(refReceiptNo, mainContent));
				 * cell76.setBorderWidth(0.01f); cell76.setPaddingBottom(2);
				 * cell76.setPaddingTop(2); cell76.setBorderColor(BaseColor.WHITE);
				 */

				table4.addCell(cell571);
				table4.addCell(cell57);
				table4.addCell(cell58);
				table4.addCell(cell61);
				/*
				 * table4.addCell(cell62); table4.addCell(cell63); table4.addCell(cell64);
				 * table4.addCell(cell65); table4.addCell(cell66); table4.addCell(cell67);
				 * table4.addCell(cell68); table4.addCell(cell69); table4.addCell(cell70);
				 * table4.addCell(cell71); table4.addCell(cell72); table4.addCell(cell73);
				 * table4.addCell(cell74);
				 */
				// table4.addCell(cell75);
				// table4.addCell(cell76);

			}
			if (paymentType.contains("Credit/Debit Card")) {

				PdfPCell cell571 = new PdfPCell(new Paragraph("", mainContent));
				cell571.setBorderWidth(0.01f);
				cell571.setPaddingBottom(2);
				cell571.setPaddingTop(2);
				cell571.setColspan(4);
				cell571.setBorderColor(BaseColor.WHITE);

				/*
				 * For Payment Type
				 */
				PdfPCell cell57 = new PdfPCell(new Paragraph("Payment Type: ", mainContent));
				cell57.setBorderWidth(0.01f);
				cell57.setPaddingBottom(2);
				cell57.setPaddingTop(2);
				cell57.setBorderColor(BaseColor.WHITE);

				PdfPCell cell58 = new PdfPCell(new Paragraph(paymentType, mainContent));
				cell58.setBorderWidth(0.01f);
				cell58.setPaddingBottom(2);
				cell58.setPaddingTop(2);
				cell58.setColspan(3);
				cell58.setBorderColor(BaseColor.WHITE);

				PdfPCell cell61 = new PdfPCell(new Paragraph("", mainContent));
				cell61.setBorderWidth(0.01f);
				cell61.setColspan(4);
				cell61.setBorderWidthBottom(0.5f);
				cell61.setBorderColorBottom(BaseColor.GRAY);
				cell61.setBorderColor(BaseColor.WHITE);

				/*
				 * For Credit/Debit card details
				 */
				// For card no
				/*
				 * PdfPCell cell62 = new PdfPCell(new Paragraph("Card No.", mainContent));
				 * cell62.setBorderWidth(0.01f); cell62.setPaddingBottom(2);
				 * cell62.setPaddingTop(2); cell62.setBorderColor(BaseColor.WHITE);
				 * 
				 * PdfPCell cell63 = new PdfPCell(new Paragraph("" + cardNo, mainContent));
				 * cell63.setBorderWidth(0.01f); cell63.setPaddingBottom(2);
				 * cell63.setPaddingTop(2); cell63.setBorderColor(BaseColor.WHITE);
				 */

				// For mobile no
				/*
				 * PdfPCell cell64 = new PdfPCell(new Paragraph("Mobile No.", mainContent));
				 * cell64.setBorderWidth(0.01f); cell64.setPaddingBottom(2);
				 * cell64.setPaddingTop(2); cell64.setBorderColor(BaseColor.WHITE);
				 * 
				 * PdfPCell cell65 = new PdfPCell(new Paragraph("" + mobileNo, mainContent));
				 * cell65.setBorderWidth(0.01f); cell65.setPaddingBottom(2);
				 * cell65.setPaddingTop(2); cell65.setBorderColor(BaseColor.WHITE);
				 */

				// For ref receipt No.

				/*
				 * PdfPCell cell75 = new PdfPCell(new Paragraph("Card Amount", mainContent));
				 * cell75.setBorderWidth(0.01f); cell75.setPaddingBottom(2);
				 * cell75.setPaddingTop(2); cell75.setBorderColor(BaseColor.WHITE);
				 * 
				 * // For ref receipt No.
				 * 
				 * PdfPCell cell76 = new PdfPCell(new Paragraph("" + cardAmt, mainContent));
				 * cell76.setBorderWidth(0.01f); cell76.setPaddingBottom(2);
				 * cell76.setPaddingTop(2); cell76.setBorderColor(BaseColor.WHITE);
				 */

				table4.addCell(cell571);
				table4.addCell(cell57);
				table4.addCell(cell58);
				table4.addCell(cell61);
				/*
				 * table4.addCell(cell62); table4.addCell(cell63); table4.addCell(cell75);
				 * table4.addCell(cell76); table4.addCell(cell64); table4.addCell(cell65);
				 */

			}

			if (paymentType.contains("Other")) {

				PdfPCell cell571 = new PdfPCell(new Paragraph("", mainContent));
				cell571.setBorderWidth(0.01f);
				cell571.setPaddingBottom(2);
				cell571.setPaddingTop(2);
				cell571.setColspan(4);
				cell571.setBorderColor(BaseColor.WHITE);

				/*
				 * For Payment Type
				 */
				PdfPCell cell57 = new PdfPCell(new Paragraph("Payment Type: ", mainContent));
				cell57.setBorderWidth(0.01f);
				cell57.setPaddingBottom(2);
				cell57.setPaddingTop(2);
				cell57.setBorderColor(BaseColor.WHITE);

				PdfPCell cell58 = new PdfPCell(new Paragraph(paymentType, mainContent));
				cell58.setBorderWidth(0.01f);
				cell58.setPaddingBottom(2);
				cell58.setPaddingTop(2);
				cell58.setColspan(3);
				cell58.setBorderColor(BaseColor.WHITE);

				PdfPCell cell61 = new PdfPCell(new Paragraph("", mainContent));
				cell61.setBorderWidth(0.01f);
				cell61.setColspan(4);
				cell61.setBorderWidthBottom(0.5f);
				cell61.setBorderColorBottom(BaseColor.GRAY);
				cell61.setBorderColor(BaseColor.WHITE);

				/*
				 * For Credit Note details
				 */
				// For credit note balance
				/*
				 * PdfPCell cell62 = new PdfPCell(new Paragraph("Other Type", mainContent));
				 * cell62.setBorderWidth(0.01f); cell62.setPaddingBottom(2);
				 * cell62.setPaddingTop(2); cell62.setBorderColor(BaseColor.WHITE);
				 * 
				 * PdfPCell cell63 = new PdfPCell(new Paragraph("" + otherType, mainContent));
				 * cell63.setBorderWidth(0.01f); cell63.setPaddingBottom(2);
				 * cell63.setPaddingTop(2); //cell63.setColspan(3);
				 * cell63.setBorderColor(BaseColor.WHITE);
				 */

				// For ref receipt No.

				/*
				 * PdfPCell cell75 = new PdfPCell(new Paragraph("Other Amount", mainContent));
				 * cell75.setBorderWidth(0.01f); cell75.setPaddingBottom(2);
				 * cell75.setPaddingTop(2); cell75.setBorderColor(BaseColor.WHITE);
				 * 
				 * // For ref receipt No.
				 * 
				 * PdfPCell cell76 = new PdfPCell(new Paragraph("" + otherAmt, mainContent));
				 * cell76.setBorderWidth(0.01f); cell76.setPaddingBottom(2);
				 * cell76.setPaddingTop(2); cell76.setBorderColor(BaseColor.WHITE);
				 */

				table4.addCell(cell571);
				table4.addCell(cell57);
				table4.addCell(cell58);
				table4.addCell(cell61);
				/*
				 * table4.addCell(cell62); table4.addCell(cell63); table4.addCell(cell75);
				 * table4.addCell(cell76);
				 */

			}
			PdfPCell cell81 = new PdfPCell(new Paragraph("Receipt Given By", mainContent));
			cell81.setBorderWidth(0.01f);
			cell81.setPaddingBottom(2);
			cell81.setPaddingTop(25);
			cell81.setBorderColor(BaseColor.WHITE);

			PdfPCell cell82 = new PdfPCell(new Paragraph(ClinicianName, mainContent));
			cell82.setBorderWidth(0.01f);
			cell82.setPaddingBottom(2);
			cell82.setPaddingTop(25);
			cell82.setBorderColor(BaseColor.WHITE);

			/*
			 * For Receivers Signature
			 */
			PdfPCell cell83 = new PdfPCell(new Paragraph("Receivers Signature", mainContent));
			cell83.setBorderWidth(0.01f);
			cell83.setPaddingBottom(2);
			cell83.setPaddingTop(25);
			cell83.setColspan(2);
			cell83.setPaddingRight(20);
			cell83.setHorizontalAlignment(Element.ALIGN_RIGHT);
			cell83.setBorderColor(BaseColor.WHITE);

			table4.addCell(cell81);
			table4.addCell(cell82);
			table4.addCell(cell83);

			document.add(table4);

			document.close();

			System.out.println("Successfully written and generated General physicial Billing PDF Report");

			status = "success";

			connection.close();

		} catch (Exception exception) {
			exception.printStackTrace();
			status = "error";
		}
		return status;

	}

	/**
	 * 
	 * @param patientID
	 * @param visitID
	 * @param marathiText
	 * @param realPath
	 * @param pdfFileName
	 * @return
	 */
	public String convertOPDPrescriptionPDF(int patientID, int visitID, String realPath, String pdfFileName,
			AmazonS3 s3, String s3reportFilePath, String bucketName) {

		int count = 1;

		String status = null;

		String nextDayVisitText = "ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚ÂµÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¸ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¨ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚ÂªÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¹ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¸ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â®ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¸ ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¹ÃƒÆ’Ã¢â‚¬Â¦ÃƒÂ¢Ã¢â€šÂ¬Ã…â€œÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¨ ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â­ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¸ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â£ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡";
		String nextDayVisit = null;

		/*
		 * Declaring variable which stores the location for FreeSans.ttf file to print
		 * marathi text on pdf
		 */
		String marathiFontDir = realPath + "fonts/FreeSans.ttf";

		ConfigurationUtil configXMLUtil = new ConfigurationUtil();

		try {
			connection = getConnection();

			/*
			 * Generate the queries to fetch details
			 */
			String fetchDetailQuery1 = QueryMaker.OPD_PDF_RETRIEVE_PATIENT;

			preparedStatement1 = connection.prepareStatement(fetchDetailQuery1);
			preparedStatement1.setInt(1, patientID);
			resultSet1 = preparedStatement1.executeQuery();

			/*
			 * Generate the queries to fetch details
			 */
			String fetchDetailQuery4 = QueryMaker.OPD_PDF_RETRIEVE_PRESCRIPTION;

			preparedStatement = connection.prepareStatement(fetchDetailQuery4);
			preparedStatement.setInt(1, visitID);
			preparedStatement.setString(2, ActivityStatus.ACTIVE);
			resultSet = preparedStatement.executeQuery();

			/*
			 * Generating query 2
			 */
			String fetchDetailQuery2 = QueryMaker.OPD_PDF_RETRIEVE_VISIT;

			preparedStatement2 = connection.prepareStatement(fetchDetailQuery2);
			preparedStatement2.setInt(1, visitID);
			resultSet2 = preparedStatement2.executeQuery();

			// To fetch visit details from Visit Table
			while (resultSet2.next()) {
				nextDayVisit = resultSet2.getInt("nextVisitDays") + " " + nextDayVisitText;
				System.out.println("Marathi text ::: " + nextDayVisit);
			}

			/*
			 * Getting image path from XML
			 */
			String A5ImagePath = configXMLUtil.getLetterHeadImage();

			/*
			 * Getting page size from XMl
			 */
			String pageSize = configXMLUtil.getPageSize();

			/*
			 * Setting path to store PDF file
			 */
			File file = new File(realPath + "/" + pdfFileName);
			/*
			 * Creating Document for PDF
			 */
			Document document = null;

			/*
			 * Checking whether pageSize tag in XMl contains A5 or A4, according to that
			 * setting PDF page size
			 */
			if (pageSize.equals("A5")) {
				document = new Document(PageSize.A5);
			} else if (pageSize.equals("A4")) {
				document = new Document(PageSize.A4);
			}

			PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(file));

			Font Font1 = new Font(Font.FontFamily.TIMES_ROMAN, 10, Font.NORMAL);
			Font Font3 = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.NORMAL);
			Font Font2 = new Font(Font.FontFamily.TIMES_ROMAN, 8, Font.NORMAL);
			Font Font4 = new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.BOLD);
			Font Font5 = new Font(Font.FontFamily.TIMES_ROMAN, 10, Font.BOLD);
			Font mainContent = new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.NORMAL);
			Font mainContent1 = new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.NORMAL);
			mainContent1.setColor(BaseColor.GRAY);
			/*
			 * Defining marathi font
			 */
			// Font marathiFont = FontFactory.getFont(marathiFontDir, BaseFont.IDENTITY_H,
			// BaseFont.EMBEDDED);
			Font marathiFont = FontFactory.getFont(marathiFontDir, BaseFont.IDENTITY_H, BaseFont.EMBEDDED);
			marathiFont.setSize(10);

			document.open();

			/*
			 * Adding image
			 */
			PdfContentByte canvas = writer.getDirectContentUnder();

			Image image;

			if (pageSize.equals("A5")) {
				if (A5ImagePath == null || A5ImagePath == "") {

					image = null;

				} else {

					if (A5ImagePath.isEmpty()) {
						image = null;
					} else {

						S3ObjectInputStream s3ObjectInputStream = s3
								.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, A5ImagePath))
								.getObjectContent();

						IOUtils.copy(s3ObjectInputStream,
								new FileOutputStream(new File(realPath + "images/" + A5ImagePath)));

						image = Image.getInstance(realPath + "images/" + A5ImagePath);

						image.scaleToFit(PageSize.A5.getWidth(), PageSize.A5.getHeight());
						image.setAbsolutePosition(0, 0);

						canvas.saveState();
						PdfGState state = new PdfGState();
						canvas.setGState(state);
						canvas.addImage(image);
						canvas.restoreState();
					}

				}
			} else if (pageSize.equals("A4")) {
				if (A5ImagePath == null || A5ImagePath == "") {

					image = null;

				} else {

					if (A5ImagePath.isEmpty()) {
						image = null;
					} else {

						S3ObjectInputStream s3ObjectInputStream = s3
								.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, A5ImagePath))
								.getObjectContent();

						IOUtils.copy(s3ObjectInputStream,
								new FileOutputStream(new File(realPath + "images/" + A5ImagePath)));

						image = Image.getInstance(realPath + "images/" + A5ImagePath);

						image.scaleToFit(PageSize.A4.getWidth(), PageSize.A4.getHeight());
						image.setAbsolutePosition(0, 0);

						canvas.saveState();
						PdfGState state = new PdfGState();
						canvas.setGState(state);
						canvas.addImage(image);
						canvas.restoreState();
					}

				}
			}

			Image prescrImg = Image.getInstance(realPath + "/images/Rx_icon.png");

			prescrImg.scaleAbsolute(0f, 0f);

			/*
			 * Setting header
			 */
			document.addCreator("eDhanvantari");
			document.addTitle("Ophthalmologist Prescription");

			/*
			 * For displaying patient personal details
			 */
			while (resultSet1.next()) {
				PdfPTable table = new PdfPTable(2);

				table.setFooterRows(1);
				table.setWidthPercentage(100);
				Rectangle rect = new Rectangle(270, 700);
				table.setWidthPercentage(new float[] { 70, 200 }, rect);

				PdfPCell cell = new PdfPCell(new Paragraph("Prescription", Font5));
				cell.setPaddingTop(120);
				cell.setPaddingBottom(10);
				cell.setHorizontalAlignment(Element.ALIGN_CENTER);
				cell.setUseBorderPadding(true);
				cell.setColspan(2);
				cell.setBorderWidthBottom(1f);
				cell.setBorderColorBottom(BaseColor.DARK_GRAY);
				cell.setBorderColor(BaseColor.WHITE);

				/*
				 * For Patient Name
				 */
				PdfPCell cell2 = new PdfPCell(new Paragraph("Patient Name", mainContent));
				cell2.setBorderWidth(0.01f);
				cell2.setPaddingBottom(5);
				cell2.setBorderWidthLeft(0.2f);
				cell2.setBorderColor(BaseColor.WHITE);

				String fullName = resultSet1.getString("firstName") + " " + resultSet1.getString("middleName") + " "
						+ resultSet1.getString("lastName") + " (" + resultSet1.getInt("id") + ")";

				PdfPCell cell3 = new PdfPCell(new Paragraph(fullName, mainContent));
				cell3.setBorderWidth(0.2f);
				cell3.setPaddingBottom(5);
				cell3.setBorderColor(BaseColor.WHITE);

				/*
				 * adding all cell to the table to create tabular structure
				 */

				table.addCell(cell);
				// table.addCell(cell1);
				table.addCell(cell2);
				table.addCell(cell3);

				document.add(table);
			}

			/*
			 * For prescription
			 */
			PdfPTable table3 = new PdfPTable(5);
			table3.setWidthPercentage(100);
			Rectangle rect2 = new Rectangle(270, 700);
			table3.setWidthPercentage(new float[] { 30, 60, 60, 60, 60 }, rect2);

			// For blank space
			PdfPCell cell30 = new PdfPCell(new Paragraph(
					"                                                                                               "
							+ "                                                                                                                            "
							+ "                                                                                                                              ",
					Font2));
			cell30.setColspan(5);
			cell30.setBorderWidthRight(0f);
			cell30.setBorderWidthLeft(0f);
			cell30.setBorderWidthTop(0f);
			cell30.setBorderWidthBottom(0f);
			cell30.setBorderColorTop(BaseColor.WHITE);

			PdfPCell cell3011 = new PdfPCell(new Paragraph(
					"                                                                                               "
							+ "                                                                                                                            "
							+ "                                                                                                                              ",
					Font2));
			cell3011.setColspan(5);
			cell3011.setBorderWidthRight(0f);
			cell3011.setBorderWidthLeft(0f);
			cell3011.setBorderWidthTop(0f);
			cell3011.setBorderWidthBottom(0f);
			cell3011.setBorderColorTop(BaseColor.WHITE);

			/*
			 * Table for Prescription image
			 */
			PdfPTable imageTable = new PdfPTable(2);
			imageTable.setWidthPercentage(100);
			imageTable.setWidths(new int[] { 1, 2 });

			PdfPCell imageCell1 = new PdfPCell(prescrImg, true);
			imageCell1.setBorderColor(BaseColor.WHITE);

			PdfPCell imageCell2 = new PdfPCell(new Paragraph("", mainContent));
			imageCell2.setBorderColor(BaseColor.WHITE);

			imageTable.addCell(imageCell1);
			imageTable.addCell(imageCell2);

			// Gene
			PdfPCell cell3002 = new PdfPCell(imageTable);

			cell3002.setBorderWidth(0.0f);
			cell3002.setPaddingBottom(10);
			cell3002.setBorderColor(BaseColor.WHITE);

			PdfPCell cell320 = new PdfPCell(new Paragraph("", mainContent));

			cell320.setBorderWidth(0.01f);
			cell320.setPaddingBottom(5);
			cell320.setColspan(4);
			cell320.setBorderColor(BaseColor.WHITE);

			// Gene
			PdfPCell cell32 = new PdfPCell(new Paragraph("Sr.No.", mainContent));

			cell32.setBorderWidth(0.01f);
			cell32.setPaddingBottom(5);
			cell32.setBorderColor(BaseColor.WHITE);

			// Nucleotide Change
			PdfPCell cell33 = new PdfPCell(new Paragraph("Drug Name", mainContent));

			cell33.setBorderWidth(0.01f);
			cell33.setPaddingBottom(5);
			cell33.setColspan(3);
			cell33.setBorderColor(BaseColor.WHITE);

			// Amino Acid Change
			PdfPCell cell34 = new PdfPCell(new Paragraph("# Pills", mainContent));

			cell34.setBorderWidth(0.01f);
			cell34.setPaddingBottom(5);
			cell34.setBorderColor(BaseColor.WHITE);

			table3.addCell(cell30);
			table3.addCell(cell3011);
			table3.addCell(cell3002);
			table3.addCell(cell320);
			table3.addCell(cell32);
			table3.addCell(cell33);
			table3.addCell(cell34);

			document.add(table3);

			while (resultSet.next()) {
				PdfPTable table1 = new PdfPTable(5);

				table1.setWidthPercentage(100);
				Rectangle rect1 = new Rectangle(270, 700);
				table1.setWidthPercentage(new float[] { 30, 60, 60, 60, 60 }, rect1);

				/*
				 * for Gene
				 */
				PdfPCell cell20 = new PdfPCell(new Paragraph("" + count + "", mainContent));
				cell20.setBorderWidth(0.2f);
				cell20.setPaddingBottom(2);
				cell20.setBorderColor(BaseColor.WHITE);

				String finalTradeName = resultSet.getString("tradeName") + " (" + resultSet.getString("dose") + ")";

				/*
				 * for Nucleotide Change
				 */
				PdfPCell cell21 = new PdfPCell(new Paragraph(finalTradeName, mainContent));
				cell21.setBorderWidth(0.2f);
				cell21.setPaddingBottom(2);
				cell21.setColspan(3);
				cell21.setBorderColor(BaseColor.WHITE);

				/*
				 * for Amino Acid Change
				 */
				PdfPCell cell22 = new PdfPCell(
						new Paragraph(String.valueOf(resultSet.getInt("pillCount")), mainContent));
				cell22.setBorderWidth(0.2f);
				cell22.setPaddingBottom(2);
				cell22.setBorderColor(BaseColor.WHITE);

				/*
				 * for Variant Type
				 */
				PdfPCell cell23 = new PdfPCell(new Paragraph("", mainContent));
				cell23.setBorderWidth(0.2f);
				cell23.setPaddingBottom(2);
				cell23.setBorderColor(BaseColor.WHITE);

				/*
				 * for Variant Impact
				 */
				PdfPCell cell24 = new PdfPCell(
						new Paragraph(String.valueOf(resultSet.getString("frequency")), mainContent));
				cell24.setBorderWidth(0.2f);
				cell24.setPaddingBottom(2);
				cell24.setColspan(2);
				cell24.setBorderColor(BaseColor.WHITE);

				/*
				 * for Clinical Significance
				 */
				PdfPCell cell25 = new PdfPCell(new Paragraph(resultSet.getString("comment"), mainContent));
				cell25.setBorderWidth(0.2f);
				cell25.setPaddingBottom(2);
				cell25.setColspan(2);
				cell25.setBorderColor(BaseColor.WHITE);

				table1.addCell(cell20);
				table1.addCell(cell21);
				table1.addCell(cell22);
				table1.addCell(cell23);
				table1.addCell(cell24);
				table1.addCell(cell25);
				table1.addCell(cell3011);

				document.add(table1);

				count++;
			}

			/*
			 * For Next day visit text
			 */
			PdfPTable table5 = new PdfPTable(1);
			table5.setWidthPercentage(100);
			Rectangle rect4 = new Rectangle(270, 700);
			table5.setWidthPercentage(new float[] { 300 }, rect4);

			/*
			 * Creating Table header
			 */

			// For blank space
			PdfPCell cell301 = new PdfPCell(new Paragraph(
					"                                                                                               "
							+ "                                                                                                                            "
							+ "                                                                                                                              ",
					Font2));
			cell301.setColspan(1);
			cell301.setBorderWidthRight(0f);
			cell301.setBorderWidthLeft(0f);
			cell301.setBorderWidthTop(0f);
			cell301.setBorderWidthBottom(0f);
			cell301.setBorderColorTop(BaseColor.WHITE);

			// for Title
			PdfPCell cell311 = new PdfPCell(new Paragraph(nextDayVisit, marathiFont));
			cell311.setPaddingTop(5);
			cell311.setPaddingBottom(10);
			cell311.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell311.setUseBorderPadding(true);
			cell311.setColspan(1);
			cell311.setBorderWidthRight(0.1f);
			cell311.setBorderWidthLeft(0.1f);
			cell311.setBorderWidthTop(0.1f);
			cell311.setBorderWidthBottom(0.1f);
			cell311.setBorderColor(BaseColor.WHITE);

			table5.addCell(cell301);
			table5.addCell(cell311);

			document.add(table5);

			/*
			 * For signature in footer
			 */
			PdfPTable table = new PdfPTable(1);
			table.setTotalWidth(350);

			PdfPCell cell1111 = new PdfPCell(new Paragraph("Signature", mainContent1));
			cell1111.setBackgroundColor(BaseColor.WHITE);
			cell1111.setHorizontalAlignment(Element.ALIGN_RIGHT);
			cell1111.setBorderColor(BaseColor.WHITE);
			table.addCell(cell1111);

			FooterTable event = new FooterTable(table);
			writer.setPageEvent(event);

			document.close();

			System.out.println("Successfully written and generated General physicial Prescription PDF Report");

			status = "success";

			connection.close();

		} catch (Exception exception) {
			exception.printStackTrace();
			status = "error";
		}
		return status;

	}

	/**
	 * 
	 * @param patientID
	 * @param visitID
	 * @param pdfOutFile
	 * @param realPath
	 * @return
	 */
	public String printBlankIPDPDF(int patientID, int visitID, String pdfOutFile, String realPath, AmazonS3 s3,
			String s3reportFilePath, String bucketName) {

		String visitDate = null;
		String diagnosis = null;

		String patientName = null;
		String age = null;
		String gender = null;

		String status = null;

		/*
		 * Declaring variable which stores the location for FreeSans.ttf file to print
		 * marathi text on pdf
		 */
		String marathiFontDir = realPath + "fonts/FreeSans.ttf";

		ConfigurationUtil configXMLUtil = new ConfigurationUtil();

		try {
			connection = getConnection();

			/*
			 * Generate the queries to fetch details
			 */
			String fetchDetailQuery1 = QueryMaker.OPD_PDF_RETRIEVE_PATIENT;

			preparedStatement1 = connection.prepareStatement(fetchDetailQuery1);
			preparedStatement1.setInt(1, patientID);
			resultSet1 = preparedStatement1.executeQuery();

			/*
			 * Generating query 2
			 */
			String fetchDetailQuery2 = QueryMaker.OPD_PDF_RETRIEVE_VISIT;

			preparedStatement2 = connection.prepareStatement(fetchDetailQuery2);
			preparedStatement2.setInt(1, visitID);
			resultSet2 = preparedStatement2.executeQuery();

			// To fetch visit details from Visit Table
			while (resultSet2.next()) {
				visitDate = resultSet2.getString("visitDate");
				diagnosis = resultSet2.getString("diagnosis");
			}

			/*
			 * Image path for posterior segment images
			 */
			String posteriorODImage = realPath + File.separator + "images" + File.separator + "posterio_segment.png";

			String posteriorOSImage = realPath + File.separator + "images" + File.separator + "posterio_segment_1.png";

			/*
			 * Getting image path from XML
			 */
			String A5ImagePath = configXMLUtil.getLetterHeadImage();

			/*
			 * Getting page size from XMl
			 */
			String pageSize = configXMLUtil.getPageSize();

			/*
			 * Setting path to store PDF file
			 */
			File file = new File(realPath + "/" + pdfOutFile);
			/*
			 * Creating Document for PDF
			 */
			Document document = null;

			/*
			 * Checking whether pageSize tag in XMl contains A5 or A4, according to that
			 * setting PDF page size
			 */
			if (pageSize.equals("A5")) {
				document = new Document(PageSize.A5);
			} else if (pageSize.equals("A4")) {
				document = new Document(PageSize.A4);
			}

			PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(file));

			Font Font1 = new Font(Font.FontFamily.TIMES_ROMAN, 10, Font.NORMAL);
			Font Font3 = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.NORMAL);
			Font Font2 = new Font(Font.FontFamily.TIMES_ROMAN, 8, Font.NORMAL);
			Font Font4 = new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.BOLD);
			Font Font5 = new Font(Font.FontFamily.TIMES_ROMAN, 10, Font.BOLD);
			Font mainContent = new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.NORMAL);
			Font mainContent1 = new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.NORMAL);
			mainContent1.setColor(BaseColor.GRAY);
			/*
			 * Defining marathi font
			 */
			Font marathiFont = FontFactory.getFont(marathiFontDir, BaseFont.IDENTITY_H, BaseFont.EMBEDDED);

			document.open();

			/*
			 * Adding image
			 */
			PdfContentByte canvas = writer.getDirectContentUnder();

			Image image;

			if (pageSize.equals("A5")) {
				if (A5ImagePath == null || A5ImagePath == "") {

					image = null;

				} else {

					if (A5ImagePath.isEmpty()) {
						image = null;
					} else {

						S3ObjectInputStream s3ObjectInputStream = s3
								.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, A5ImagePath))
								.getObjectContent();

						IOUtils.copy(s3ObjectInputStream,
								new FileOutputStream(new File(realPath + "images/" + A5ImagePath)));

						image = Image.getInstance(realPath + "images/" + A5ImagePath);

						image.scaleToFit(PageSize.A5.getWidth(), PageSize.A5.getHeight());

						image.setAbsolutePosition(0, 0);

						canvas.saveState();
						PdfGState state = new PdfGState();
						canvas.setGState(state);
						canvas.addImage(image);
						canvas.restoreState();
					}

				}
			} else if (pageSize.equals("A4")) {
				if (A5ImagePath == null || A5ImagePath == "") {

					image = null;

				} else {

					if (A5ImagePath.isEmpty()) {
						image = null;
					} else {

						S3ObjectInputStream s3ObjectInputStream = s3
								.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, A5ImagePath))
								.getObjectContent();

						IOUtils.copy(s3ObjectInputStream,
								new FileOutputStream(new File(realPath + "images/" + A5ImagePath)));

						image = Image.getInstance(realPath + "images/" + A5ImagePath);

						image.scaleToFit(PageSize.A4.getWidth(), PageSize.A4.getHeight());

						image.setAbsolutePosition(0, 0);

						canvas.saveState();
						PdfGState state = new PdfGState();
						canvas.setGState(state);
						canvas.addImage(image);
						canvas.restoreState();
					}

				}
			}
			Image image1 = Image.getInstance(posteriorODImage);

			Image image2 = Image.getInstance(posteriorOSImage);

			/*
			 * Setting header
			 */
			document.addCreator("eDhanvantari");
			document.addTitle("IPD Visit");

			/*
			 * For displaying patient personal details
			 */
			while (resultSet1.next()) {
				PdfPTable table = new PdfPTable(2);

				table.setFooterRows(1);
				table.setWidthPercentage(100);
				Rectangle rect = new Rectangle(270, 700);
				table.setWidthPercentage(new float[] { 100, 170 }, rect);

				PdfPCell cell = new PdfPCell(new Paragraph("Patient Details", Font5));
				cell.setPaddingTop(120);
				cell.setPaddingBottom(10);
				cell.setHorizontalAlignment(Element.ALIGN_CENTER);
				cell.setUseBorderPadding(true);
				cell.setColspan(4);
				cell.setBorderWidthBottom(1f);
				cell.setBorderColor(BaseColor.WHITE);

				/*
				 * For Patient Name
				 */
				PdfPCell cell2 = new PdfPCell(new Paragraph("Patient Name", mainContent));
				cell2.setBorderWidth(0.01f);
				cell2.setPaddingBottom(5);
				cell2.setBorderWidthLeft(0.2f);
				cell2.setBorderColor(BaseColor.LIGHT_GRAY);

				String fullName = resultSet1.getString("firstName") + " " + resultSet1.getString("lastName");

				patientName = fullName;

				PdfPCell cell3 = new PdfPCell(new Paragraph(fullName, mainContent));
				cell3.setBorderWidth(0.2f);
				cell3.setPaddingBottom(5);
				cell3.setBorderColor(BaseColor.LIGHT_GRAY);

				/*
				 * For Date
				 */

				PdfPCell cell4 = new PdfPCell(new Paragraph("Age / Gender", mainContent));
				cell4.setBorderWidth(0.01f);
				cell4.setPaddingBottom(5);
				cell4.setBorderWidthLeft(0.2f);
				cell4.setBorderColor(BaseColor.LIGHT_GRAY);

				String ageGender = resultSet1.getString("age") + " / " + resultSet1.getString("gender");

				age = resultSet1.getString("age");
				gender = resultSet1.getString("gender");

				PdfPCell cell5 = new PdfPCell(new Paragraph(ageGender, mainContent));
				cell5.setBorderWidth(0.2f);
				cell5.setPaddingBottom(5);
				cell5.setBorderColor(BaseColor.LIGHT_GRAY);

				/*
				 * For Age
				 */
				PdfPCell cell6 = new PdfPCell(new Paragraph("Address", mainContent));
				cell6.setBorderWidth(0.01f);
				cell6.setPaddingBottom(5);
				cell6.setBorderWidthLeft(0.2f);
				cell6.setBorderColor(BaseColor.LIGHT_GRAY);

				PdfPCell cell7 = new PdfPCell(new Paragraph(resultSet1.getString("address"), mainContent));
				cell7.setBorderWidth(0.2f);
				cell7.setPaddingBottom(5);
				cell7.setBorderColor(BaseColor.LIGHT_GRAY);

				/*
				 * For Diagnosis
				 */
				PdfPCell cell8 = new PdfPCell(new Paragraph("DOA/Surgery", mainContent));
				cell8.setBorderWidth(0.01f);
				cell8.setPaddingBottom(5);
				cell8.setBorderWidthLeft(0.2f);
				cell8.setBorderColor(BaseColor.LIGHT_GRAY);

				PdfPCell cell9 = new PdfPCell(new Paragraph(visitDate, mainContent));
				cell9.setBorderWidth(0.2f);
				cell9.setPaddingBottom(2);
				cell9.setBorderColor(BaseColor.LIGHT_GRAY);

				/*
				 * For Diagnosis
				 */
				PdfPCell cell10 = new PdfPCell(new Paragraph("Diagnosis", mainContent));
				cell10.setBorderWidth(0.01f);
				cell10.setPaddingBottom(5);
				cell10.setBorderWidthLeft(0.2f);
				cell10.setBorderColor(BaseColor.LIGHT_GRAY);

				PdfPCell cell11 = new PdfPCell(new Paragraph(diagnosis, mainContent));
				cell11.setBorderWidth(0.2f);
				cell11.setPaddingBottom(2);
				cell11.setBorderColor(BaseColor.LIGHT_GRAY);

				/*
				 * adding all cell to the table to create tabular structure
				 */

				table.addCell(cell);
				table.addCell(cell2);
				table.addCell(cell3);
				table.addCell(cell4);
				table.addCell(cell5);
				table.addCell(cell6);
				table.addCell(cell7);
				table.addCell(cell8);
				table.addCell(cell9);
				table.addCell(cell10);
				table.addCell(cell11);

				document.add(table);
			}

			/*
			 * For Complaint details.
			 */

			PdfPTable table31 = new PdfPTable(3);
			table31.setWidthPercentage(100);
			Rectangle rect21 = new Rectangle(270, 700);
			table31.setWidthPercentage(new float[] { 90, 90, 90 }, rect21);

			// For blank space
			PdfPCell cell301 = new PdfPCell(new Paragraph(
					"                                                                                               "
							+ "                                                                                                                            "
							+ "                                                                                                                              ",
					Font2));
			cell301.setColspan(3);
			cell301.setBorderWidthRight(0f);
			cell301.setBorderWidthLeft(0f);
			cell301.setBorderWidthTop(0f);
			cell301.setBorderWidthBottom(0f);
			cell301.setBorderColorTop(BaseColor.WHITE);

			// for Title
			PdfPCell cell311 = new PdfPCell(new Paragraph("Complaints of:", Font5));
			cell311.setPaddingTop(5);
			cell311.setPaddingBottom(10);
			cell311.setHorizontalAlignment(Element.ALIGN_LEFT);
			cell311.setUseBorderPadding(true);
			cell311.setColspan(3);
			cell311.setBorderWidthRight(0.1f);
			cell311.setBorderWidthLeft(0.1f);
			cell311.setBorderWidthTop(0.1f);
			cell311.setBorderWidthBottom(1f);
			cell311.setBorderColor(BaseColor.WHITE);

			// Gene
			PdfPCell cell321 = new PdfPCell(new Paragraph("C/O", mainContent));

			cell321.setBorderWidth(0.01f);
			cell321.setPaddingBottom(5);
			cell321.setBorderColor(BaseColor.LIGHT_GRAY);

			// Nucleotide Change
			PdfPCell cell331 = new PdfPCell(new Paragraph("OD (Rt)", mainContent));

			cell331.setBorderWidth(0.01f);
			cell331.setPaddingBottom(5);
			cell331.setBorderColor(BaseColor.LIGHT_GRAY);

			// Amino Acid Change
			PdfPCell cell341 = new PdfPCell(new Paragraph("OS (Lt)", mainContent));

			cell341.setBorderWidth(0.01f);
			cell341.setPaddingBottom(5);
			cell341.setBorderColor(BaseColor.LIGHT_GRAY);

			// For blank space
			PdfPCell cell342 = new PdfPCell(new Paragraph("\n\n\n\n\n\n\n\n\n\n", Font2));
			cell342.setColspan(3);
			cell342.setBorderWidthRight(0f);
			cell342.setBorderWidthLeft(0f);
			cell342.setBorderWidthTop(0f);
			cell342.setBorderWidthBottom(0f);
			cell342.setBorderColorTop(BaseColor.WHITE);

			PdfPCell cell111 = new PdfPCell(new Paragraph("H/O:", Font4));
			cell111.setBorderWidth(0.01f);
			cell111.setPaddingBottom(5);
			cell111.setPaddingTop(5);
			cell111.setBorderColor(BaseColor.WHITE);

			PdfPCell cell110 = new PdfPCell(new Paragraph("\n\n\n\n", mainContent));
			cell110.setBorderWidth(0.01f);
			cell110.setPaddingBottom(5);
			cell110.setColspan(2);
			cell110.setPaddingTop(5);
			cell110.setBorderColor(BaseColor.WHITE);

			PdfPCell cell112 = new PdfPCell(new Paragraph("Allergic To:", Font4));
			cell112.setBorderWidth(0.01f);
			cell112.setPaddingBottom(5);
			cell112.setPaddingTop(5);
			cell112.setBorderColor(BaseColor.WHITE);

			PdfPCell cell113 = new PdfPCell(new Paragraph("\n\n", mainContent));
			cell113.setBorderWidth(0.01f);
			cell113.setPaddingBottom(10);
			cell113.setColspan(2);
			cell113.setPaddingTop(5);
			cell113.setBorderColor(BaseColor.WHITE);

			table31.addCell(cell301);
			table31.addCell(cell311);
			table31.addCell(cell321);
			table31.addCell(cell331);
			table31.addCell(cell341);
			table31.addCell(cell342);
			table31.addCell(cell111);
			table31.addCell(cell110);
			table31.addCell(cell112);
			table31.addCell(cell113);

			document.add(table31);

			document.newPage();

			/*
			 * for IPD Opthalmology Form
			 */
			PdfPTable table2 = new PdfPTable(3);
			table2.setWidthPercentage(100);
			Rectangle rect = new Rectangle(270, 700);
			table2.setWidthPercentage(new float[] { 90, 90, 90 }, rect);

			/*
			 * Creating Table header
			 */

			// for Title
			PdfPCell cell0 = new PdfPCell(new Paragraph("IPD Opthalmology Form", Font5));
			cell0.setPaddingTop(15);
			cell0.setPaddingBottom(10);
			cell0.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell0.setUseBorderPadding(true);
			cell0.setColspan(3);
			cell0.setBorderWidthRight(0.1f);
			cell0.setBorderWidthLeft(0.1f);
			cell0.setBorderWidthTop(0.1f);
			cell0.setBorderWidthBottom(1f);
			cell0.setBorderColor(BaseColor.WHITE);

			// Gene
			PdfPCell cell1 = new PdfPCell(new Paragraph("ON EXAM", Font4));

			cell1.setBorderWidth(0.01f);
			cell1.setPaddingBottom(5);
			cell1.setPaddingTop(5);
			cell1.setBorderColor(BaseColor.WHITE);

			// OD RE
			PdfPCell cell2 = new PdfPCell(new Paragraph("OD (RE)", Font4));

			cell2.setBorderWidth(0.01f);
			cell2.setPaddingBottom(5);
			cell2.setPaddingTop(5);
			cell2.setBorderColor(BaseColor.WHITE);

			// Os LE
			PdfPCell cell3 = new PdfPCell(new Paragraph("OS (LE)", Font4));

			cell3.setBorderWidth(0.01f);
			cell3.setPaddingBottom(5);
			cell3.setPaddingTop(5);
			cell3.setBorderColor(BaseColor.WHITE);

			PdfPCell cell4 = new PdfPCell(new Paragraph(
					"                                                                                               "
							+ "                                                                                                                            "
							+ "                                                                                                                              ",
					Font2));
			cell4.setColspan(3);
			cell4.setBorderWidthRight(0f);
			cell4.setBorderWidthLeft(0f);
			cell4.setBorderWidthTop(0f);
			cell4.setBorderWidthBottom(1f);
			cell4.setBorderColorBottom(BaseColor.LIGHT_GRAY);

			table2.addCell(cell0);
			table2.addCell(cell1);
			table2.addCell(cell2);
			table2.addCell(cell3);
			table2.addCell(cell4);

			document.add(table2);

			PdfPTable table1 = new PdfPTable(3);

			table1.setWidthPercentage(100);
			Rectangle rect1 = new Rectangle(270, 700);
			table1.setWidthPercentage(new float[] { 90, 90, 90 }, rect1);

			PdfPCell cell20 = new PdfPCell(new Paragraph("Eye Lid", Font4));
			cell20.setBorderWidth(0.2f);
			cell20.setPaddingBottom(2);
			cell20.setPaddingTop(5);
			cell20.setBorderColor(BaseColor.WHITE);

			/*
			 * for Nucleotide Change
			 */
			PdfPCell cell21 = new PdfPCell(new Paragraph("", mainContent));
			cell21.setBorderWidth(0.2f);
			cell21.setPaddingBottom(2);
			cell21.setBorderColor(BaseColor.WHITE);

			/*
			 * for Amino Acid Change
			 */
			PdfPCell cell22 = new PdfPCell(new Paragraph("", mainContent));
			cell22.setBorderWidth(0.2f);
			cell22.setPaddingBottom(2);
			cell22.setBorderColor(BaseColor.WHITE);

			PdfPCell cell5 = new PdfPCell(new Paragraph("" + "" + "\n", Font2));
			cell5.setColspan(3);
			cell5.setBorderWidthRight(0f);
			cell5.setBorderWidthLeft(0f);
			cell5.setBorderWidthTop(0f);
			cell5.setBorderWidthBottom(1f);
			cell5.setBorderColorBottom(BaseColor.LIGHT_GRAY);

			table1.addCell(cell20);
			table1.addCell(cell21);
			table1.addCell(cell22);
			table1.addCell(cell5);

			PdfPCell cell23 = new PdfPCell(new Paragraph("Upper", mainContent));
			cell23.setBorderWidth(0.2f);
			cell23.setPaddingBottom(2);
			cell23.setBorderColor(BaseColor.WHITE);

			/*
			 * for Variant Impact
			 */
			PdfPCell cell24 = new PdfPCell(new Paragraph("", mainContent));
			cell24.setBorderWidth(0.2f);
			cell24.setPaddingBottom(2);
			cell24.setBorderColor(BaseColor.WHITE);

			/*
			 * for Clinical Significance
			 */
			PdfPCell cell25 = new PdfPCell(new Paragraph("", mainContent));
			cell25.setBorderWidth(0.2f);
			cell25.setPaddingBottom(2);
			cell25.setBorderColor(BaseColor.WHITE);

			table1.addCell(cell23);
			table1.addCell(cell24);
			table1.addCell(cell25);

			PdfPCell cell26 = new PdfPCell(new Paragraph("Lower", mainContent));
			cell26.setBorderWidth(0.2f);
			cell26.setPaddingBottom(2);
			cell26.setBorderColor(BaseColor.WHITE);

			/*
			 * for ClinVar URL
			 */
			PdfPCell cell27 = new PdfPCell(new Paragraph("", mainContent));
			cell27.setBorderWidth(0.2f);
			cell27.setPaddingBottom(2);
			cell27.setBorderColor(BaseColor.WHITE);

			/*
			 * for RSIDs
			 */
			PdfPCell cell28 = new PdfPCell(new Paragraph("", mainContent));
			cell28.setBorderWidth(0.2f);
			cell28.setPaddingBottom(2);
			cell28.setBorderColor(BaseColor.WHITE);

			table1.addCell(cell26);
			table1.addCell(cell27);
			table1.addCell(cell28);

			PdfPCell cell29 = new PdfPCell(new Paragraph("Vision", Font4));
			cell29.setBorderWidth(0.2f);
			cell29.setPaddingBottom(2);
			cell29.setPaddingTop(5);
			cell29.setBorderColor(BaseColor.WHITE);

			/*
			 * for Nucleotide Change
			 */
			PdfPCell cell30 = new PdfPCell(new Paragraph("", mainContent));
			cell30.setBorderWidth(0.2f);
			cell30.setPaddingBottom(2);
			cell30.setBorderColor(BaseColor.WHITE);

			/*
			 * for Amino Acid Change
			 */
			PdfPCell cell31 = new PdfPCell(new Paragraph("", mainContent));
			cell31.setBorderWidth(0.2f);
			cell31.setPaddingBottom(2);
			cell31.setBorderColor(BaseColor.WHITE);

			PdfPTable tableOD = new PdfPTable(2);
			PdfPTable tableOS = new PdfPTable(2);

			tableOD.setWidthPercentage(100);
			tableOD.setWidths(new int[] { 1, 2 });

			PdfPCell distCellText = new PdfPCell(new Paragraph("Dist", Font4));
			distCellText.setBorderColor(BaseColor.WHITE);
			PdfPCell nearCelltext = new PdfPCell(new Paragraph("Near", Font4));
			nearCelltext.setBorderColor(BaseColor.WHITE);

			tableOD.addCell(distCellText);
			tableOD.addCell(nearCelltext);

			tableOS.setWidthPercentage(100);
			tableOS.setWidths(new int[] { 1, 2 });

			PdfPCell distCellTextOS = new PdfPCell(new Paragraph("Dist", Font4));
			distCellTextOS.setBorderColor(BaseColor.WHITE);
			PdfPCell nearCelltextOS = new PdfPCell(new Paragraph("Near", Font4));
			nearCelltextOS.setBorderColor(BaseColor.WHITE);

			tableOS.addCell(distCellTextOS);
			tableOS.addCell(nearCelltextOS);

			PdfPCell cell290 = new PdfPCell(new Paragraph("", Font4));
			cell290.setBorderWidth(0.2f);
			cell290.setPaddingBottom(2);
			cell290.setPaddingTop(5);
			cell290.setBorderColor(BaseColor.WHITE);

			/*
			 * for Nucleotide Change
			 */
			PdfPCell cell300 = new PdfPCell(tableOD);
			cell300.setBorderWidth(0.2f);
			cell300.setPaddingBottom(2);
			cell300.setBorderColor(BaseColor.WHITE);

			/*
			 * for Amino Acid Change
			 */
			PdfPCell cell310 = new PdfPCell(tableOS);
			cell310.setBorderWidth(0.2f);
			cell310.setPaddingBottom(2);
			cell310.setBorderColor(BaseColor.WHITE);

			PdfPCell cell555 = new PdfPCell(new Paragraph("" + "" + "\n", Font2));
			cell555.setColspan(3);
			cell555.setBorderWidthRight(0f);
			cell555.setBorderWidthLeft(0f);
			cell555.setBorderWidthTop(0f);
			cell555.setBorderWidthBottom(1f);
			cell555.setBorderColorBottom(BaseColor.LIGHT_GRAY);

			table1.addCell(cell29);
			table1.addCell(cell30);
			table1.addCell(cell31);
			table1.addCell(cell555);
			table1.addCell(cell290);
			table1.addCell(cell300);
			table1.addCell(cell310);

			PdfPCell cell32 = new PdfPCell(new Paragraph("Visual Acuity", mainContent));
			cell32.setBorderWidth(0.2f);
			cell32.setPaddingBottom(2);
			cell32.setBorderColor(BaseColor.WHITE);

			/*
			 * for ClinVar URL
			 */
			PdfPCell cell33 = new PdfPCell(new Paragraph("", mainContent));
			cell33.setBorderWidth(0.2f);
			cell33.setPaddingBottom(2);
			cell33.setBorderColor(BaseColor.WHITE);

			/*
			 * for RSIDs
			 */
			PdfPCell cell34 = new PdfPCell(new Paragraph("", mainContent));
			cell34.setBorderWidth(0.2f);
			cell34.setPaddingBottom(2);
			cell34.setBorderColor(BaseColor.WHITE);

			table1.addCell(cell32);
			table1.addCell(cell33);
			table1.addCell(cell34);

			PdfPCell cell35 = new PdfPCell(new Paragraph("Pinhole Vision", mainContent));
			cell35.setBorderWidth(0.2f);
			cell35.setPaddingBottom(2);
			cell35.setBorderColor(BaseColor.WHITE);

			/*
			 * for ClinVar URL
			 */
			PdfPCell cell36 = new PdfPCell(new Paragraph("", mainContent));
			cell36.setBorderWidth(0.2f);
			cell36.setPaddingBottom(2);
			cell36.setBorderColor(BaseColor.WHITE);

			/*
			 * for RSIDs
			 */
			PdfPCell cell37 = new PdfPCell(new Paragraph("", mainContent));
			cell37.setBorderWidth(0.2f);
			cell37.setPaddingBottom(2);
			cell37.setBorderColor(BaseColor.WHITE);

			table1.addCell(cell35);
			table1.addCell(cell36);
			table1.addCell(cell37);

			PdfPCell cell38 = new PdfPCell(new Paragraph("BCVA", mainContent));
			cell38.setBorderWidth(0.2f);
			cell38.setPaddingBottom(2);
			cell38.setBorderColor(BaseColor.WHITE);

			/*
			 * for ClinVar URL
			 */
			PdfPCell cell39 = new PdfPCell(new Paragraph("", mainContent));
			cell39.setBorderWidth(0.2f);
			cell39.setPaddingBottom(2);
			cell39.setBorderColor(BaseColor.WHITE);

			/*
			 * for RSIDs
			 */
			PdfPCell cell40 = new PdfPCell(new Paragraph("", mainContent));
			cell40.setBorderWidth(0.2f);
			cell40.setPaddingBottom(2);
			cell40.setBorderColor(BaseColor.WHITE);

			table1.addCell(cell38);
			table1.addCell(cell39);
			table1.addCell(cell40);

			PdfPCell cell41 = new PdfPCell(new Paragraph("Anterior Segment", Font4));
			cell41.setBorderWidth(0.2f);
			cell41.setPaddingBottom(2);
			cell41.setBorderColor(BaseColor.WHITE);

			/*
			 * for Nucleotide Change
			 */
			PdfPCell cell42 = new PdfPCell(new Paragraph("", mainContent));
			cell42.setBorderWidth(0.2f);
			cell42.setPaddingBottom(2);
			cell42.setBorderColor(BaseColor.WHITE);

			/*
			 * for Amino Acid Change
			 */
			PdfPCell cell43 = new PdfPCell(new Paragraph("", mainContent));
			cell43.setBorderWidth(0.2f);
			cell43.setPaddingBottom(2);
			cell43.setBorderColor(BaseColor.WHITE);

			PdfPCell cell501 = new PdfPCell(new Paragraph("" + "" + "\n", Font2));
			cell501.setColspan(3);
			cell501.setBorderWidthRight(0f);
			cell501.setBorderWidthLeft(0f);
			cell501.setBorderWidthTop(0f);
			cell501.setBorderWidthBottom(1f);
			cell501.setBorderColorBottom(BaseColor.LIGHT_GRAY);

			table1.addCell(cell41);
			table1.addCell(cell42);
			table1.addCell(cell43);
			table1.addCell(cell501);

			PdfPCell cell44 = new PdfPCell(new Paragraph("Conjuctiva", mainContent));
			cell44.setBorderWidth(0.2f);
			cell44.setPaddingBottom(2);
			cell44.setBorderColor(BaseColor.WHITE);

			/*
			 * for ClinVar URL
			 */
			PdfPCell cell45 = new PdfPCell(new Paragraph("", mainContent));
			cell45.setBorderWidth(0.2f);
			cell45.setPaddingBottom(2);
			cell45.setBorderColor(BaseColor.WHITE);

			/*
			 * for RSIDs
			 */
			PdfPCell cell46 = new PdfPCell(new Paragraph("", mainContent));
			cell46.setBorderWidth(0.2f);
			cell46.setPaddingBottom(2);
			cell46.setBorderColor(BaseColor.WHITE);

			table1.addCell(cell44);
			table1.addCell(cell45);
			table1.addCell(cell46);

			PdfPCell cell47 = new PdfPCell(new Paragraph("Cornea", mainContent));
			cell47.setBorderWidth(0.2f);
			cell47.setPaddingBottom(2);
			cell47.setBorderColor(BaseColor.WHITE);

			/*
			 * for ClinVar URL
			 */
			PdfPCell cell48 = new PdfPCell(new Paragraph("", mainContent));
			cell48.setBorderWidth(0.2f);
			cell48.setPaddingBottom(2);
			cell48.setBorderColor(BaseColor.WHITE);

			/*
			 * for RSIDs
			 */
			PdfPCell cell49 = new PdfPCell(new Paragraph("", mainContent));
			cell49.setBorderWidth(0.2f);
			cell49.setPaddingBottom(2);
			cell49.setBorderColor(BaseColor.WHITE);

			table1.addCell(cell47);
			table1.addCell(cell48);
			table1.addCell(cell49);

			PdfPCell cellPupil14 = new PdfPCell(new Paragraph("Pupil", mainContent));
			cellPupil14.setBorderWidth(0.2f);
			cellPupil14.setPaddingBottom(2);
			cellPupil14.setBorderColor(BaseColor.WHITE);

			/*
			 * for ClinVar URL
			 */
			PdfPCell cellPupil11 = new PdfPCell(new Paragraph("", mainContent));
			cellPupil11.setBorderWidth(0.2f);
			cellPupil11.setPaddingBottom(2);
			cellPupil11.setBorderColor(BaseColor.WHITE);

			/*
			 * for RSIDs
			 */
			PdfPCell cellPupil12 = new PdfPCell(new Paragraph("", mainContent));
			cellPupil12.setBorderWidth(0.2f);
			cellPupil12.setPaddingBottom(2);
			cellPupil12.setBorderColor(BaseColor.WHITE);

			table1.addCell(cellPupil14);
			table1.addCell(cellPupil11);
			table1.addCell(cellPupil12);

			PdfPCell cell50 = new PdfPCell(new Paragraph("AC", mainContent));
			cell50.setBorderWidth(0.2f);
			cell50.setPaddingBottom(2);
			cell50.setBorderColor(BaseColor.WHITE);

			/*
			 * for ClinVar URL
			 */
			PdfPCell cell51 = new PdfPCell(new Paragraph("", mainContent));
			cell51.setBorderWidth(0.2f);
			cell51.setPaddingBottom(2);
			cell51.setBorderColor(BaseColor.WHITE);

			/*
			 * for RSIDs
			 */
			PdfPCell cell52 = new PdfPCell(new Paragraph("", mainContent));
			cell52.setBorderWidth(0.2f);
			cell52.setPaddingBottom(2);
			cell52.setBorderColor(BaseColor.WHITE);

			table1.addCell(cell50);
			table1.addCell(cell51);
			table1.addCell(cell52);

			PdfPCell cell53 = new PdfPCell(new Paragraph("Iris", mainContent));
			cell53.setBorderWidth(0.2f);
			cell53.setPaddingBottom(2);
			cell53.setBorderColor(BaseColor.WHITE);

			/*
			 * for ClinVar URL
			 */
			PdfPCell cell54 = new PdfPCell(new Paragraph("", mainContent));
			cell54.setBorderWidth(0.2f);
			cell54.setPaddingBottom(2);
			cell54.setBorderColor(BaseColor.WHITE);

			/*
			 * for RSIDs
			 */
			PdfPCell cell55 = new PdfPCell(new Paragraph("", mainContent));
			cell55.setBorderWidth(0.2f);
			cell55.setPaddingBottom(2);
			cell55.setBorderColor(BaseColor.WHITE);

			table1.addCell(cell53);
			table1.addCell(cell54);
			table1.addCell(cell55);

			PdfPCell cell56 = new PdfPCell(new Paragraph("Lens", mainContent));
			cell56.setBorderWidth(0.2f);
			cell56.setPaddingBottom(2);
			cell56.setBorderColor(BaseColor.WHITE);

			/*
			 * for ClinVar URL
			 */
			PdfPCell cell57 = new PdfPCell(new Paragraph("", mainContent));
			cell57.setBorderWidth(0.2f);
			cell57.setPaddingBottom(2);
			cell57.setBorderColor(BaseColor.WHITE);

			/*
			 * for RSIDs
			 */
			PdfPCell cell58 = new PdfPCell(new Paragraph("", mainContent));
			cell58.setBorderWidth(0.2f);
			cell58.setPaddingBottom(2);
			cell58.setBorderColor(BaseColor.WHITE);

			table1.addCell(cell56);
			table1.addCell(cell57);
			table1.addCell(cell58);

			PdfPTable tableOD1 = new PdfPTable(2);
			PdfPTable tableOS1 = new PdfPTable(2);

			/*
			 * for Associated Disease
			 */
			PdfPCell cell59 = new PdfPCell(new Paragraph("Posterior Segment", Font4));
			cell59.setBorderWidth(0.2f);
			cell59.setPaddingBottom(2);
			cell59.setPaddingTop(5);
			cell59.setBorderColor(BaseColor.WHITE);

			/*
			 * for ClinVar URL
			 */
			String posteriorSegmentOD = "Disc: " + "\n" + "Vessel: " + "\n" + "Macula: ";

			/*
			 * Adding image and text in new table and then adding that table into Posterior
			 * Segment cell in order to get both image and text for OD
			 */
			tableOD1.setWidthPercentage(100);
			tableOD1.setWidths(new int[] { 1, 2 });

			PdfPCell imageCellOD = new PdfPCell(image1, true);
			imageCellOD.setBorderColor(BaseColor.WHITE);

			PdfPCell textCellOD = new PdfPCell(new Paragraph(posteriorSegmentOD, mainContent));
			textCellOD.setBorderColor(BaseColor.WHITE);

			tableOD1.addCell(imageCellOD);
			tableOD1.addCell(textCellOD);

			/*
			 * Phrase phrase = new Phrase(new Chunk(image1, 0, 0)); phrase.add(new
			 * Chunk(posteriorSegmentOD, mainContent));
			 */

			PdfPCell cell60 = new PdfPCell(tableOD1);
			cell60.setBorderWidth(0.2f);
			cell60.setPaddingBottom(2);
			cell60.setPaddingTop(5);
			cell60.setBorderColor(BaseColor.WHITE);

			String posteriorSegmentOS = "Disc: " + "\n" + "Vessel: " + "\n" + "Macula: ";

			/*
			 * Adding image and text in new table and then adding that table into Posterior
			 * Segment cell in order to get both image and text for OS
			 */
			tableOS1.setWidthPercentage(100);
			tableOS1.setWidths(new int[] { 1, 2 });

			PdfPCell imageCellOS = new PdfPCell(image2, true);
			imageCellOS.setBorderColor(BaseColor.WHITE);

			PdfPCell textCellOS = new PdfPCell(new Paragraph(posteriorSegmentOS, mainContent));
			textCellOS.setBorderColor(BaseColor.WHITE);

			tableOS1.addCell(imageCellOS);
			tableOS1.addCell(textCellOS);

			/*
			 * for RSIDs
			 */

			PdfPCell cell61 = new PdfPCell(tableOS1);
			cell61.setBorderWidth(0.2f);
			cell61.setPaddingBottom(2);
			cell60.setPaddingTop(5);
			cell61.setBorderColor(BaseColor.WHITE);

			PdfPCell cell511 = new PdfPCell(new Paragraph("" + "" + "\n", Font2));
			cell511.setColspan(3);
			cell511.setBorderWidthRight(0f);
			cell511.setBorderWidthLeft(0f);
			cell511.setBorderWidthTop(0f);
			cell511.setBorderWidthBottom(1f);
			cell511.setBorderColorBottom(BaseColor.LIGHT_GRAY);

			table1.addCell(cell59);
			table1.addCell(cell60);
			table1.addCell(cell61);
			table1.addCell(cell511);

			PdfPCell cell62 = new PdfPCell(new Paragraph("I.O.P", Font4));
			cell62.setBorderWidth(0.2f);
			cell62.setPaddingBottom(2);
			cell62.setPaddingTop(5);
			cell62.setBorderColor(BaseColor.WHITE);

			/*
			 * for ClinVar URL
			 */
			PdfPCell cell63 = new PdfPCell(new Paragraph("", mainContent));
			cell63.setBorderWidth(0.2f);
			cell63.setPaddingBottom(2);
			cell63.setPaddingTop(5);
			cell63.setBorderColor(BaseColor.WHITE);

			/*
			 * for RSIDs
			 */
			PdfPCell cell64 = new PdfPCell(new Paragraph("", mainContent));
			cell64.setBorderWidth(0.2f);
			cell64.setPaddingBottom(2);
			cell64.setPaddingTop(5);
			cell64.setBorderColor(BaseColor.WHITE);

			PdfPCell cell522 = new PdfPCell(new Paragraph("" + "" + "\n", Font2));
			cell522.setColspan(3);
			cell522.setBorderWidthRight(0f);
			cell522.setBorderWidthLeft(0f);
			cell522.setBorderWidthTop(0f);
			cell522.setBorderWidthBottom(1f);
			cell522.setBorderColorBottom(BaseColor.LIGHT_GRAY);

			table1.addCell(cell62);
			table1.addCell(cell63);
			table1.addCell(cell64);
			table1.addCell(cell522);

			PdfPCell cell65 = new PdfPCell(new Paragraph("Sac", Font4));
			cell65.setBorderWidth(0.2f);
			cell65.setPaddingBottom(2);
			cell65.setPaddingTop(5);
			cell65.setBorderColor(BaseColor.WHITE);

			/*
			 * for ClinVar URL
			 */
			PdfPCell cell66 = new PdfPCell(new Paragraph("", mainContent));
			cell66.setBorderWidth(0.2f);
			cell66.setPaddingBottom(2);
			cell66.setPaddingTop(5);
			cell66.setBorderColor(BaseColor.WHITE);

			/*
			 * for RSIDs
			 */
			PdfPCell cell67 = new PdfPCell(new Paragraph("", mainContent));
			cell67.setBorderWidth(0.2f);
			cell67.setPaddingBottom(2);
			cell67.setPaddingTop(5);
			cell67.setBorderColor(BaseColor.WHITE);

			table1.addCell(cell65);
			table1.addCell(cell66);
			table1.addCell(cell67);

			PdfPCell cell68 = new PdfPCell(new Paragraph("Biometry", Font4));
			cell68.setBorderWidth(0.2f);
			cell68.setPaddingBottom(2);
			cell68.setPaddingTop(5);
			cell68.setBorderColor(BaseColor.WHITE);

			/*
			 * for ClinVar URL
			 */
			PdfPCell cell69 = new PdfPCell(new Paragraph("", mainContent));
			cell69.setBorderWidth(0.2f);
			cell69.setPaddingBottom(2);
			cell69.setBorderColor(BaseColor.WHITE);

			/*
			 * for RSIDs
			 */
			PdfPCell cell70 = new PdfPCell(new Paragraph("", mainContent));
			cell70.setBorderWidth(0.2f);
			cell70.setPaddingBottom(2);
			cell70.setBorderColor(BaseColor.WHITE);

			PdfPCell cell533 = new PdfPCell(new Paragraph("" + "" + "\n", Font2));
			cell533.setColspan(3);
			cell533.setBorderWidthRight(0f);
			cell533.setBorderWidthLeft(0f);
			cell533.setBorderWidthTop(0f);
			cell533.setBorderWidthBottom(1f);
			cell533.setBorderColorBottom(BaseColor.LIGHT_GRAY);

			table1.addCell(cell68);
			table1.addCell(cell69);
			table1.addCell(cell70);
			table1.addCell(cell533);

			PdfPCell cell71 = new PdfPCell(new Paragraph("K1", mainContent));
			cell71.setBorderWidth(0.2f);
			cell71.setPaddingBottom(2);
			cell71.setBorderColor(BaseColor.WHITE);

			/*
			 * for ClinVar URL
			 */
			PdfPCell cell72 = new PdfPCell(new Paragraph("", mainContent));
			cell72.setBorderWidth(0.2f);
			cell72.setPaddingBottom(2);
			cell72.setBorderColor(BaseColor.WHITE);

			/*
			 * for RSIDs
			 */
			PdfPCell cell73 = new PdfPCell(new Paragraph("", mainContent));
			cell73.setBorderWidth(0.2f);
			cell73.setPaddingBottom(2);
			cell73.setBorderColor(BaseColor.WHITE);

			table1.addCell(cell71);
			table1.addCell(cell72);
			table1.addCell(cell73);

			PdfPCell cell74 = new PdfPCell(new Paragraph("K2", mainContent));
			cell74.setBorderWidth(0.2f);
			cell74.setPaddingBottom(2);
			cell74.setBorderColor(BaseColor.WHITE);

			/*
			 * for ClinVar URL
			 */
			PdfPCell cell75 = new PdfPCell(new Paragraph("", mainContent));
			cell75.setBorderWidth(0.2f);
			cell75.setPaddingBottom(2);
			cell75.setBorderColor(BaseColor.WHITE);

			/*
			 * for RSIDs
			 */
			PdfPCell cell76 = new PdfPCell(new Paragraph("", mainContent));
			cell76.setBorderWidth(0.2f);
			cell76.setPaddingBottom(2);
			cell76.setBorderColor(BaseColor.WHITE);

			table1.addCell(cell74);
			table1.addCell(cell75);
			table1.addCell(cell76);

			PdfPCell cell77 = new PdfPCell(new Paragraph("Axial Length", mainContent));
			cell77.setBorderWidth(0.2f);
			cell77.setPaddingBottom(2);
			cell77.setBorderColor(BaseColor.WHITE);

			/*
			 * for ClinVar URL
			 */
			PdfPCell cell78 = new PdfPCell(new Paragraph("", mainContent));
			cell78.setBorderWidth(0.2f);
			cell78.setPaddingBottom(2);
			cell78.setBorderColor(BaseColor.WHITE);

			/*
			 * for RSIDs
			 */
			PdfPCell cell79 = new PdfPCell(new Paragraph("", mainContent));
			cell79.setBorderWidth(0.2f);
			cell79.setPaddingBottom(2);
			cell79.setBorderColor(BaseColor.WHITE);

			table1.addCell(cell77);
			table1.addCell(cell78);
			table1.addCell(cell79);

			PdfPCell cell80 = new PdfPCell(new Paragraph("IOL", mainContent));
			cell80.setBorderWidth(0.2f);
			cell80.setPaddingBottom(2);
			cell80.setBorderColor(BaseColor.WHITE);

			/*
			 * for ClinVar URL
			 */
			PdfPCell cell81 = new PdfPCell(new Paragraph("", mainContent));
			cell81.setBorderWidth(0.2f);
			cell81.setPaddingBottom(2);
			cell81.setBorderColor(BaseColor.WHITE);

			/*
			 * for RSIDs
			 */
			PdfPCell cell82 = new PdfPCell(new Paragraph("", mainContent));
			cell82.setBorderWidth(0.2f);
			cell82.setPaddingBottom(2);
			cell82.setBorderColor(BaseColor.WHITE);

			table1.addCell(cell80);
			table1.addCell(cell81);
			table1.addCell(cell82);

			document.add(table1);

			document.newPage();

			/*
			 * 
			 */
			PdfPTable table4 = new PdfPTable(2);
			table4.setWidthPercentage(100);
			Rectangle rect2 = new Rectangle(270, 700);
			table4.setWidthPercentage(new float[] { 135, 135 }, rect2);

			PdfPCell cell = new PdfPCell(new Paragraph("LAB & INVESTIGATIONS", Font5));
			cell.setPaddingTop(120);
			cell.setPaddingBottom(10);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell.setUseBorderPadding(true);
			cell.setColspan(2);
			cell.setBorderWidthBottom(1f);
			cell.setBorderColor(BaseColor.WHITE);

			PdfPTable tableOE = new PdfPTable(2);

			PdfPTable tableInvestigation = new PdfPTable(2);

			/*
			 * Adding table for OE
			 */
			tableOE.setWidthPercentage(100);
			tableOE.setWidths(new int[] { 1, 2 });

			PdfPCell imageCellLable = new PdfPCell(new Paragraph("OE", mainContent));
			imageCellLable.setHorizontalAlignment(Element.ALIGN_CENTER);
			imageCellLable.setColspan(2);
			imageCellLable.setBorderColorRight(BaseColor.LIGHT_GRAY);
			imageCellLable.setBorderColor(BaseColor.LIGHT_GRAY);

			PdfPCell textCellLable1 = new PdfPCell(new Paragraph("Pulse: ", mainContent));
			textCellLable1.setBorderColor(BaseColor.LIGHT_GRAY);

			PdfPCell textCellValue = new PdfPCell(new Paragraph("", mainContent));
			textCellValue.setBorderColor(BaseColor.LIGHT_GRAY);

			PdfPCell textCellLable2 = new PdfPCell(new Paragraph("BP: ", mainContent));
			textCellLable2.setBorderColor(BaseColor.LIGHT_GRAY);

			PdfPCell textCellValue1 = new PdfPCell(new Paragraph("", mainContent));
			textCellValue1.setBorderColor(BaseColor.LIGHT_GRAY);

			PdfPCell textCellLable3 = new PdfPCell(new Paragraph("RS: ", mainContent));
			textCellLable3.setBorderColor(BaseColor.LIGHT_GRAY);

			PdfPCell textCellValue2 = new PdfPCell(new Paragraph("", mainContent));
			textCellValue2.setBorderColor(BaseColor.LIGHT_GRAY);

			PdfPCell textCellLable4 = new PdfPCell(new Paragraph("CVS: ", mainContent));
			textCellLable4.setBorderColor(BaseColor.LIGHT_GRAY);

			PdfPCell textCellValue3 = new PdfPCell(new Paragraph("", mainContent));
			textCellValue3.setBorderColor(BaseColor.LIGHT_GRAY);

			tableOE.addCell(imageCellLable);
			tableOE.addCell(textCellLable1);
			tableOE.addCell(textCellValue);
			tableOE.addCell(textCellLable2);
			tableOE.addCell(textCellValue1);
			tableOE.addCell(textCellLable3);
			tableOE.addCell(textCellValue2);
			tableOE.addCell(textCellLable4);
			tableOE.addCell(textCellValue3);

			/*
			 * Adding table for Investigation
			 */
			tableInvestigation.setWidthPercentage(100);
			tableInvestigation.setWidths(new int[] { 1, 2 });

			PdfPCell imageCellLable5 = new PdfPCell(new Paragraph("Investigation", mainContent));
			imageCellLable5.setHorizontalAlignment(Element.ALIGN_CENTER);
			imageCellLable5.setColspan(2);
			imageCellLable5.setBorderColor(BaseColor.LIGHT_GRAY);

			PdfPCell textCellLable6 = new PdfPCell(new Paragraph("HB%: ", mainContent));
			textCellLable6.setBorderColor(BaseColor.LIGHT_GRAY);

			PdfPCell textCellValue4 = new PdfPCell(new Paragraph("", mainContent));
			textCellValue4.setBorderColor(BaseColor.LIGHT_GRAY);

			PdfPCell textCellLable7 = new PdfPCell(new Paragraph("WBC: ", mainContent));
			textCellLable7.setBorderColor(BaseColor.LIGHT_GRAY);

			PdfPCell textCellValue5 = new PdfPCell(new Paragraph("", mainContent));
			textCellValue5.setBorderColor(BaseColor.LIGHT_GRAY);

			PdfPCell textCellLable8 = new PdfPCell(new Paragraph("BT: ", mainContent));
			textCellLable8.setBorderColor(BaseColor.LIGHT_GRAY);

			PdfPCell textCellValue6 = new PdfPCell(new Paragraph("", mainContent));
			textCellValue6.setBorderColor(BaseColor.LIGHT_GRAY);

			PdfPCell textCellLable9 = new PdfPCell(new Paragraph("CT: ", mainContent));
			textCellLable9.setBorderColor(BaseColor.LIGHT_GRAY);

			PdfPCell textCellValue7 = new PdfPCell(new Paragraph("", mainContent));
			textCellValue7.setBorderColor(BaseColor.LIGHT_GRAY);

			PdfPCell textCellLable111 = new PdfPCell(new Paragraph("BSL: ", mainContent));
			textCellLable111.setColspan(2);
			textCellLable111.setBorderColor(BaseColor.LIGHT_GRAY);

			PdfPCell textCellLable10 = new PdfPCell(new Paragraph("F: ", mainContent));
			textCellLable10.setBorderColor(BaseColor.LIGHT_GRAY);

			PdfPCell textCellValue8 = new PdfPCell(new Paragraph("", mainContent));
			textCellValue8.setBorderColor(BaseColor.LIGHT_GRAY);

			PdfPCell textCellLable11 = new PdfPCell(new Paragraph("PP: ", mainContent));
			textCellLable11.setBorderColor(BaseColor.LIGHT_GRAY);

			PdfPCell textCellValue9 = new PdfPCell(new Paragraph("", mainContent));
			textCellValue9.setBorderColor(BaseColor.LIGHT_GRAY);

			PdfPCell textCellLable12 = new PdfPCell(new Paragraph("Urine (R&M): ", mainContent));
			textCellLable12.setBorderColor(BaseColor.LIGHT_GRAY);

			PdfPCell textCellValue10 = new PdfPCell(new Paragraph("", mainContent));
			textCellValue10.setBorderColor(BaseColor.LIGHT_GRAY);

			tableInvestigation.addCell(imageCellLable5);
			tableInvestigation.addCell(textCellLable6);
			tableInvestigation.addCell(textCellValue4);
			tableInvestigation.addCell(textCellLable7);
			tableInvestigation.addCell(textCellValue5);
			tableInvestigation.addCell(textCellLable8);
			tableInvestigation.addCell(textCellValue6);
			tableInvestigation.addCell(textCellLable9);
			tableInvestigation.addCell(textCellValue7);
			tableInvestigation.addCell(textCellLable111);
			tableInvestigation.addCell(textCellLable10);
			tableInvestigation.addCell(textCellValue8);
			tableInvestigation.addCell(textCellLable11);
			tableInvestigation.addCell(textCellValue9);
			tableInvestigation.addCell(textCellLable12);
			tableInvestigation.addCell(textCellValue10);

			PdfPCell cell444 = new PdfPCell(tableOE);

			cell444.setBorderWidth(0.01f);
			cell444.setPaddingBottom(5);
			cell444.setPaddingTop(10);
			cell444.setBorderColor(BaseColor.WHITE);

			PdfPCell cell5555 = new PdfPCell(tableInvestigation);

			cell5555.setBorderWidth(0.01f);
			cell5555.setPaddingBottom(5);
			cell5555.setPaddingTop(10);
			cell5555.setBorderColor(BaseColor.WHITE);

			table4.addCell(cell);
			table4.addCell(cell444);
			table4.addCell(cell5555);

			document.add(table4);

			document.newPage();

			/*
			 * for OPD Continuation Sheet
			 */
			PdfPTable table21 = new PdfPTable(3);
			table21.setWidthPercentage(100);
			Rectangle rect12 = new Rectangle(270, 700);
			table21.setWidthPercentage(new float[] { 90, 90, 90 }, rect12);

			/*
			 * Creating Table header
			 */

			// for Title
			PdfPCell cell222 = new PdfPCell(new Paragraph("CONTINUATION SHEET", Font5));
			cell222.setPaddingTop(15);
			cell222.setPaddingBottom(10);
			cell222.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell222.setUseBorderPadding(true);
			cell222.setColspan(3);
			cell222.setBorderWidthRight(0.1f);
			cell222.setBorderWidthLeft(0.1f);
			cell222.setBorderWidthTop(0.1f);
			cell222.setBorderWidthBottom(1f);
			cell222.setBorderColor(BaseColor.WHITE);

			PdfPCell cell3331 = new PdfPCell(new Paragraph("PatientName: " + patientName, mainContent));

			cell3331.setBorderWidth(0.01f);
			cell3331.setPaddingBottom(15);
			cell3331.setBorderColor(BaseColor.WHITE);

			// Nucleotide Change
			PdfPCell cell344 = new PdfPCell(new Paragraph("Age: " + age, mainContent));

			cell344.setBorderWidth(0.01f);
			cell344.setPaddingBottom(15);
			cell344.setBorderColor(BaseColor.WHITE);

			// Amino Acid Change
			PdfPCell cell355 = new PdfPCell(new Paragraph("Gender: " + gender, mainContent));

			cell355.setBorderWidth(0.01f);
			cell355.setPaddingBottom(15);
			cell355.setBorderColor(BaseColor.WHITE);

			PdfPCell cell233 = new PdfPCell(new Paragraph("Date", mainContent));

			cell233.setBorderWidth(0.01f);
			cell233.setPaddingBottom(5);
			cell233.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell233.setBorderColor(BaseColor.LIGHT_GRAY);

			// Nucleotide Change
			PdfPCell cell244 = new PdfPCell(new Paragraph("Description", mainContent));

			cell244.setBorderWidth(0.01f);
			cell244.setPaddingBottom(5);
			cell244.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell244.setBorderColor(BaseColor.LIGHT_GRAY);

			// Amino Acid Change
			PdfPCell cell255 = new PdfPCell(new Paragraph("Treatment", mainContent));

			cell255.setBorderWidth(0.01f);
			cell255.setPaddingBottom(5);
			cell255.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell255.setBorderColor(BaseColor.LIGHT_GRAY);

			PdfPCell cell2011 = new PdfPCell(new Paragraph(
					"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
					mainContent));
			cell2011.setBorderWidth(0.2f);
			cell2011.setPaddingBottom(5);
			cell2011.setBorderColor(BaseColor.LIGHT_GRAY);

			/*
			 * for Nucleotide Change
			 */
			PdfPCell cell2111 = new PdfPCell(new Paragraph(
					"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
					mainContent));
			cell2111.setBorderWidth(0.2f);
			cell2111.setPaddingBottom(5);
			cell2111.setBorderColor(BaseColor.LIGHT_GRAY);

			/*
			 * for Amino Acid Change
			 */
			PdfPCell cell2211 = new PdfPCell(
					new Paragraph("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", mainContent));
			cell2211.setBorderWidth(0.2f);
			cell2211.setPaddingBottom(5);
			cell2211.setBorderColor(BaseColor.LIGHT_GRAY);

			// For blank space
			PdfPCell cell2771 = new PdfPCell(new Paragraph("\n", Font2));
			cell2771.setColspan(3);
			cell2771.setBorderWidthRight(0f);
			cell2771.setBorderWidthLeft(0f);
			cell2771.setBorderWidthTop(0f);
			cell2771.setBorderWidthBottom(0f);
			cell2771.setBorderColorTop(BaseColor.WHITE);

			table21.addCell(cell222);
			table21.addCell(cell3331);
			table21.addCell(cell344);
			table21.addCell(cell355);
			table21.addCell(cell233);
			table21.addCell(cell244);
			table21.addCell(cell255);
			table21.addCell(cell2011);
			table21.addCell(cell2111);
			table21.addCell(cell2211);
			table21.addCell(cell2771);

			document.add(table21);

			document.newPage();

			/*
			 * for OPD Continuation Sheet
			 */
			PdfPTable table7 = new PdfPTable(1);
			table7.setWidthPercentage(100);
			Rectangle rect7 = new Rectangle(270, 700);
			table7.setWidthPercentage(new float[] { 270 }, rect7);

			/*
			 * Creating Table header
			 */
			// for Title
			PdfPCell cell288 = new PdfPCell(new Paragraph("OT NOTES", Font5));
			cell288.setPaddingTop(15);
			cell288.setPaddingBottom(10);
			cell288.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell288.setUseBorderPadding(true);
			cell288.setColspan(1);
			cell288.setBorderWidthRight(0.1f);
			cell288.setBorderWidthLeft(0.1f);
			cell288.setBorderWidthTop(0.1f);
			cell288.setBorderWidthBottom(1f);
			cell288.setBorderColor(BaseColor.WHITE);

			PdfPCell cell299 = new PdfPCell(new Paragraph(
					"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", mainContent));

			cell299.setBorderWidth(0.01f);
			cell299.setPaddingBottom(5);
			cell299.setBorderColor(BaseColor.LIGHT_GRAY);

			table7.addCell(cell288);
			table7.addCell(cell299);

			document.add(table7);

			/*
			 * For signature in footer
			 */
			PdfPTable table = new PdfPTable(1);
			table.setTotalWidth(350);

			PdfPCell cell1111 = new PdfPCell(new Paragraph("Signature", mainContent1));
			cell1111.setBackgroundColor(BaseColor.WHITE);
			cell1111.setHorizontalAlignment(Element.ALIGN_RIGHT);
			cell1111.setBorderColor(BaseColor.WHITE);
			table.addCell(cell1111);

			FooterTable event = new FooterTable(table);
			writer.setPageEvent(event);

			document.close();

			System.out.println("Successfully written and generated IPD PDF Report");

			status = "success";

			/*
			 * Closing resultSet, preparedStatement, connection objects
			 */

			resultSet2.close();
			preparedStatement2.close();

			resultSet1.close();
			preparedStatement1.close();

			connection.close();

		} catch (Exception exception) {
			exception.printStackTrace();
			status = "error";
		}
		return status;

	}

	/**
	 * 
	 * @param visitID
	 * @param patientID
	 * @param realPath
	 * @param pdfOutFileName
	 * @return
	 */
	public String printPDFBillingReport(int patientID, int visitID, String realPath, String pdfOutFileName) {

		int count = 1;

		String status = null;

		String billDate = null;

		double totalBill = 0D;

		/*
		 * To covert date from database into DD-MM-YYYY
		 */
		SimpleDateFormat databaseDate = new SimpleDateFormat("yyyy-MM-dd");

		SimpleDateFormat dateToBeDisplayed = new SimpleDateFormat("dd-MM-yyyy");

		Date date = new Date();

		/*
		 * Declaring variable which stores the location for FreeSans.ttf file to print
		 * marathi text on pdf
		 */
		String marathiFontDir = realPath + "fonts/FreeSans.ttf";

		ConfigurationUtil configXMLUtil = new ConfigurationUtil();

		try {
			connection = getConnection();

			/*
			 * Generate the queries to fetch details
			 */
			String fetchDetailQuery1 = QueryMaker.OPD_PDF_RETRIEVE_PATIENT;

			preparedStatement1 = connection.prepareStatement(fetchDetailQuery1);
			preparedStatement1.setInt(1, patientID);
			resultSet1 = preparedStatement1.executeQuery();

			/*
			 * Generate the queries to fetch details
			 */
			String fetchDetailQuery4 = QueryMaker.RETREIVE_BILL_LIST;

			preparedStatement2 = connection.prepareStatement(fetchDetailQuery4);
			preparedStatement2.setInt(2, visitID);
			preparedStatement2.setString(1, ActivityStatus.ACTIVE);
			resultSet2 = preparedStatement2.executeQuery();

			while (resultSet2.next()) {
				String dateFromDB = resultSet2.getString("billDate");

				date = databaseDate.parse(dateFromDB);

				billDate = dateToBeDisplayed.format(date);
			}

			/*
			 * To fetch billDate
			 */
			preparedStatement = connection.prepareStatement(fetchDetailQuery4);
			preparedStatement.setInt(2, visitID);
			preparedStatement.setString(1, ActivityStatus.ACTIVE);
			resultSet = preparedStatement.executeQuery();

			/*
			 * Total final bill
			 */

			String retrieveTotalBillQuery = QueryMaker.RETRIEVE_TOTAL_BILL;

			/*
			 * Retrieving total service charge
			 */
			preparedStatement3 = connection.prepareStatement(retrieveTotalBillQuery);

			preparedStatement3.setInt(1, visitID);
			preparedStatement3.setString(2, ActivityStatus.ACTIVE);

			resultSet3 = preparedStatement3.executeQuery();

			while (resultSet3.next()) {
				totalBill = resultSet3.getDouble("SUM");
				System.out.println("TOtal bill is :: " + totalBill);
			}

			/*
			 * Getting page size from XMl
			 */
			String pageSize = configXMLUtil.getPageSize();

			/*
			 * Setting path to store PDF file
			 */
			File file = new File(realPath + "/" + pdfOutFileName);
			/*
			 * Creating Document for PDF
			 */
			Document document = null;

			/*
			 * Checking whether pageSize tag in XMl contains A5 or A4, according to that
			 * setting PDF page size
			 */
			if (pageSize.equals("A5")) {
				document = new Document(PageSize.A5);
			} else if (pageSize.equals("A4")) {
				document = new Document(PageSize.A4);
			}

			PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(file));

			Font Font1 = new Font(Font.FontFamily.TIMES_ROMAN, 10, Font.NORMAL);
			Font Font3 = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.NORMAL);
			Font Font2 = new Font(Font.FontFamily.TIMES_ROMAN, 8, Font.NORMAL);
			Font Font4 = new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.BOLD);
			Font Font5 = new Font(Font.FontFamily.TIMES_ROMAN, 10, Font.BOLD);
			Font mainContent = new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.NORMAL);
			Font mainContent1 = new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.NORMAL);
			mainContent1.setColor(BaseColor.GRAY);
			/*
			 * Defining marathi font
			 */
			Font marathiFont = FontFactory.getFont(marathiFontDir, BaseFont.IDENTITY_H, BaseFont.EMBEDDED);

			document.open();

			/*
			 * Setting header
			 */
			document.addCreator("eDhanvantari");
			document.addTitle("Medical Billing Report");

			/*
			 * For displaying patient personal details
			 */
			while (resultSet1.next()) {
				PdfPTable table = new PdfPTable(2);

				table.setFooterRows(1);
				table.setWidthPercentage(100);
				Rectangle rect = new Rectangle(270, 700);
				table.setWidthPercentage(new float[] { 70, 200 }, rect);

				PdfPCell cell = new PdfPCell(new Paragraph("Billing Report", Font5));
				cell.setPaddingBottom(10);
				cell.setHorizontalAlignment(Element.ALIGN_CENTER);
				cell.setUseBorderPadding(true);
				cell.setColspan(2);
				cell.setBorderWidthBottom(1f);
				cell.setBorderColorBottom(BaseColor.DARK_GRAY);
				cell.setBorderColor(BaseColor.WHITE);

				/*
				 * For Patient Name
				 */
				PdfPCell cell2 = new PdfPCell(new Paragraph("Patient Name", mainContent));
				cell2.setBorderWidth(0.01f);
				cell2.setPaddingBottom(5);
				cell2.setBorderWidthLeft(0.2f);
				cell2.setBorderColor(BaseColor.WHITE);

				String fullName = resultSet1.getString("firstName") + " " + resultSet1.getString("middleName") + " "
						+ resultSet1.getString("lastName") + " (" + resultSet1.getInt("id") + ")";

				PdfPCell cell3 = new PdfPCell(new Paragraph(fullName, mainContent));
				cell3.setBorderWidth(0.2f);
				cell3.setPaddingBottom(5);
				cell3.setBorderColor(BaseColor.WHITE);

				PdfPCell cell16 = new PdfPCell(new Paragraph("\n", mainContent));
				cell16.setBorderWidth(0.2f);
				cell16.setColspan(2);
				cell16.setPaddingBottom(2);
				cell16.setBorderColor(BaseColor.WHITE);
				cell16.setBorderWidthLeft(0.0f);
				cell16.setBorderWidthTop(0.0f);
				cell16.setBorderWidthBottom(1f);
				cell16.setBorderColorBottom(BaseColor.WHITE);

				/*
				 * adding all cell to the table to create tabular structure
				 */

				table.addCell(cell);
				// table.addCell(cell1);
				table.addCell(cell2);
				table.addCell(cell3);
				table.addCell(cell16);

				document.add(table);
			}

			/*
			 * For Billing
			 */
			PdfPTable table3 = new PdfPTable(6);
			table3.setWidthPercentage(100);
			Rectangle rect2 = new Rectangle(270, 700);
			table3.setWidthPercentage(new float[] { 25, 50, 50, 50, 50, 50 }, rect2);

			/*
			 * Creating Table header
			 */

			// For blank space
			PdfPCell cell30 = new PdfPCell(new Paragraph(
					"                                                                                               "
							+ "                                                                                                                            "
							+ "                                                                                                                              ",
					Font2));
			cell30.setColspan(6);
			cell30.setBorderWidthRight(0f);
			cell30.setBorderWidthLeft(0f);
			cell30.setBorderWidthTop(0f);
			cell30.setBorderWidthBottom(0f);
			cell30.setBorderColorTop(BaseColor.WHITE);

			// for Title
			PdfPCell cell31 = new PdfPCell(new Paragraph("Billing Details", Font5));
			cell31.setPaddingTop(6);
			cell31.setPaddingBottom(10);
			cell31.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell31.setUseBorderPadding(true);
			cell31.setColspan(5);
			cell31.setBorderWidthRight(0.1f);
			cell31.setBorderWidthLeft(0.1f);
			cell31.setBorderWidthTop(0.1f);
			cell31.setBorderWidthBottom(1f);
			cell31.setBorderColorBottom(BaseColor.DARK_GRAY);
			cell31.setBorderColor(BaseColor.WHITE);

			// Gene
			PdfPCell cell32 = new PdfPCell(new Paragraph("Sr.No.", mainContent));

			cell32.setBorderWidth(0.01f);
			cell32.setPaddingBottom(5);
			cell32.setBorderColor(BaseColor.WHITE);

			PdfPCell cell311 = new PdfPCell(new Paragraph("Billing Date", mainContent));

			cell311.setBorderWidth(0.01f);
			cell311.setPaddingBottom(5);
			cell311.setBorderColor(BaseColor.WHITE);

			// Nucleotide Change
			PdfPCell cell33 = new PdfPCell(new Paragraph("Description", mainContent));

			cell33.setBorderWidth(0.01f);
			cell33.setPaddingBottom(5);
			cell33.setBorderColor(BaseColor.WHITE);

			// Amino Acid Change
			PdfPCell cell34 = new PdfPCell(new Paragraph("Rate", mainContent));

			cell34.setBorderWidth(0.01f);
			cell34.setPaddingBottom(5);
			cell34.setBorderColor(BaseColor.WHITE);

			// Variant Type
			PdfPCell cell35 = new PdfPCell(new Paragraph("Charge", mainContent));

			cell35.setBorderWidth(0.01f);
			cell35.setPaddingBottom(5);
			cell35.setBorderColor(BaseColor.WHITE);

			// Variant Impact
			PdfPCell cell36 = new PdfPCell(new Paragraph("totalBill", mainContent));

			cell36.setBorderWidth(0.01f);
			cell36.setPaddingBottom(5);
			cell36.setBorderColor(BaseColor.WHITE);

			table3.addCell(cell30);
			table3.addCell(cell31);
			table3.addCell(cell311);
			table3.addCell(cell32);
			table3.addCell(cell33);
			table3.addCell(cell34);
			table3.addCell(cell35);
			table3.addCell(cell36);

			document.add(table3);

			/*
			 * Table for billing
			 */

			PdfPTable table1 = new PdfPTable(6);

			table1.setWidthPercentage(100);
			Rectangle rect1 = new Rectangle(270, 700);
			table1.setWidthPercentage(new float[] { 25, 50, 50, 50, 50, 50 }, rect1);

			while (resultSet.next()) {

				/*
				 * for Gene
				 */
				PdfPCell cell20 = new PdfPCell(new Paragraph("" + count + "", mainContent));
				cell20.setBorderWidth(0.2f);
				cell20.setPaddingBottom(2);
				cell20.setBorderColor(BaseColor.WHITE);

				PdfPCell cell201 = new PdfPCell(new Paragraph(resultSet.getString("billDate"), mainContent));
				cell201.setBorderWidth(0.2f);
				cell201.setPaddingBottom(2);
				cell201.setBorderColor(BaseColor.WHITE);

				/*
				 * for Nucleotide Change
				 */
				PdfPCell cell21 = new PdfPCell(new Paragraph(resultSet.getString("chargeType"), mainContent));
				cell21.setBorderWidth(0.2f);
				cell21.setPaddingBottom(2);
				cell21.setBorderColor(BaseColor.WHITE);

				/*
				 * for Amino Acid Change
				 */
				PdfPCell cell22 = new PdfPCell(new Paragraph(String.valueOf(resultSet.getDouble("rate")), mainContent));
				cell22.setBorderWidth(0.2f);
				cell22.setPaddingBottom(2);
				cell22.setBorderColor(BaseColor.WHITE);

				/*
				 * for Variant Type
				 */
				PdfPCell cell23 = new PdfPCell(
						new Paragraph(String.valueOf(resultSet.getDouble("charge")), mainContent));
				cell23.setBorderWidth(0.2f);
				cell23.setPaddingBottom(2);
				cell23.setBorderColor(BaseColor.WHITE);

				/*
				 * for Variant Impact
				 */
				PdfPCell cell24 = new PdfPCell(
						new Paragraph(String.valueOf(resultSet.getDouble("totalBill")), mainContent));
				cell24.setBorderWidth(0.2f);
				cell24.setPaddingBottom(2);
				cell24.setBorderColor(BaseColor.WHITE);

				table1.addCell(cell20);
				table1.addCell(cell201);
				table1.addCell(cell21);
				table1.addCell(cell22);
				table1.addCell(cell23);
				table1.addCell(cell24);

				count++;
			}

			/*
			 * For total bill
			 */
			PdfPCell cell23 = new PdfPCell(new Paragraph("Total Bill", mainContent));
			cell23.setBorderWidth(0.2f);
			cell23.setPaddingBottom(2);
			cell23.setColspan(5);
			cell23.setHorizontalAlignment(Element.ALIGN_RIGHT);
			cell23.setBorderColor(BaseColor.WHITE);

			PdfPCell cell24 = new PdfPCell(new Paragraph(String.valueOf(totalBill), mainContent));
			cell24.setBorderWidth(0.2f);
			cell24.setPaddingBottom(2);
			cell24.setBorderColor(BaseColor.WHITE);

			table1.addCell(cell23);
			table1.addCell(cell24);

			document.add(table1);

			/*
			 * For signature in footer
			 */
			PdfPTable table = new PdfPTable(1);
			table.setTotalWidth(350);

			PdfPCell cell1111 = new PdfPCell(new Paragraph("Signature", mainContent1));
			cell1111.setBackgroundColor(BaseColor.WHITE);
			cell1111.setHorizontalAlignment(Element.ALIGN_RIGHT);
			cell1111.setBorderColor(BaseColor.WHITE);
			table.addCell(cell1111);

			FooterTable event = new FooterTable(table);
			writer.setPageEvent(event);

			document.close();

			System.out.println("Successfully written and generated PDF Billing Report");

			status = "success";

			connection.close();

		} catch (Exception exception) {
			exception.printStackTrace();
			status = "error";
		}
		return status;

	}

	/**
	 * 
	 * @param patientID
	 * @param visitID
	 * @param realPath
	 * @param pdfFileName
	 * @return
	 */
	public String printMedicalNotePDFReport(int patientID, int visitID, String realPath, String pdfFileName) {

		int count = 1;

		String visitDate = null;
		String diagnosis = null;
		String visitType = null;
		String comment = null;
		String visitTimeFrom = null;
		String visitTimeTo = null;

		String status = null;

		String nextDayVisitText = "ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚ÂµÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¸ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¨ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚ÂªÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¹ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¸ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â®ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¸ ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¹ÃƒÆ’Ã¢â‚¬Â¦ÃƒÂ¢Ã¢â€šÂ¬Ã…â€œÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¨ ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â­ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¸ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â£ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡";
		String nextDayVisit = null;

		/*
		 * Declaring variable which stores the location for FreeSans.ttf file to print
		 * marathi text on pdf
		 */
		String marathiFontDir = realPath + "fonts/FreeSans.ttf";

		ConfigurationUtil configXMLUtil = new ConfigurationUtil();

		try {
			connection = getConnection();

			/*
			 * Generate the queries to fetch details
			 */
			String fetchDetailQuery1 = QueryMaker.OPD_PDF_RETRIEVE_PATIENT;

			preparedStatement1 = connection.prepareStatement(fetchDetailQuery1);
			preparedStatement1.setInt(1, patientID);
			resultSet1 = preparedStatement1.executeQuery();

			/*
			 * Generating query 2
			 */
			String fetchDetailQuery2 = QueryMaker.OPD_PDF_RETRIEVE_VISIT;

			preparedStatement2 = connection.prepareStatement(fetchDetailQuery2);
			preparedStatement2.setInt(1, visitID);
			resultSet2 = preparedStatement2.executeQuery();

			// To fetch visit details from Visit Table
			while (resultSet2.next()) {
				visitDate = resultSet2.getString("visitDate");
				diagnosis = resultSet2.getString("diagnosis");
				comment = resultSet2.getString("visitNote");
				visitType = resultSet2.getString("visitType");
				visitTimeFrom = resultSet2.getString("visitTimeFrom");
				visitTimeTo = resultSet2.getString("visitTimeTo");
			}

			/*
			 * Generate the queries to fetch details
			 */
			String fetchDetailQuery4 = QueryMaker.OPD_PDF_RETRIEVE_PRESCRIPTION;

			preparedStatement = connection.prepareStatement(fetchDetailQuery4);
			preparedStatement.setInt(1, visitID);
			preparedStatement.setString(2, ActivityStatus.ACTIVE);
			resultSet = preparedStatement.executeQuery();

			/*
			 * Generating query 2
			 */
			String fetchDetailQuery3 = QueryMaker.OPD_PDF_RETRIEVE_VISIT;

			preparedStatement3 = connection.prepareStatement(fetchDetailQuery3);
			preparedStatement3.setInt(1, visitID);
			resultSet3 = preparedStatement3.executeQuery();

			// To fetch visit details from Visit Table
			while (resultSet3.next()) {
				nextDayVisit = resultSet3.getInt("nextVisitDays") + " " + nextDayVisitText;
				System.out.println("Marathi text ::: " + nextDayVisit);
			}

			/*
			 * Getting page size from XMl
			 */
			String pageSize = configXMLUtil.getPageSize();

			/*
			 * Setting path to store PDF file
			 */
			File file = new File(realPath + "/" + pdfFileName);
			/*
			 * Creating Document for PDF
			 */
			Document document = null;

			/*
			 * Checking whether pageSize tag in XMl contains A5 or A4, according to that
			 * setting PDF page size
			 */
			if (pageSize.equals("A5")) {
				document = new Document(PageSize.A5);
			} else if (pageSize.equals("A4")) {
				document = new Document(PageSize.A4);
			}

			PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(file));

			Font Font1 = new Font(Font.FontFamily.TIMES_ROMAN, 10, Font.NORMAL);
			Font Font3 = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.NORMAL);
			Font Font2 = new Font(Font.FontFamily.TIMES_ROMAN, 8, Font.NORMAL);
			Font Font4 = new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.BOLD);
			Font Font5 = new Font(Font.FontFamily.TIMES_ROMAN, 10, Font.BOLD);
			Font mainContent = new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.NORMAL);
			Font mainContent1 = new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.NORMAL);
			mainContent1.setColor(BaseColor.GRAY);
			/*
			 * Defining marathi font
			 */
			Font marathiFont = FontFactory.getFont(marathiFontDir, BaseFont.IDENTITY_H, BaseFont.EMBEDDED);

			marathiFont.setSize(10);

			document.open();

			Image prescrImg = Image.getInstance(realPath + "/images/Rx_icon.png");

			prescrImg.scaleAbsolute(0f, 0f);

			/*
			 * Setting header
			 */
			document.addCreator("eDhanvantari");
			document.addTitle("Medical Note Report");

			/*
			 * For displaying patient personal details
			 */
			while (resultSet1.next()) {
				PdfPTable table = new PdfPTable(2);

				table.setFooterRows(1);
				table.setWidthPercentage(100);
				Rectangle rect = new Rectangle(270, 700);
				table.setWidthPercentage(new float[] { 100, 170 }, rect);

				PdfPCell cell = new PdfPCell(new Paragraph("Medical Note", Font5));

				cell.setPaddingBottom(10);
				cell.setHorizontalAlignment(Element.ALIGN_CENTER);
				cell.setUseBorderPadding(true);
				cell.setColspan(2);
				cell.setBorderWidthBottom(1f);
				cell.setBorderColorBottom(BaseColor.DARK_GRAY);
				cell.setBorderColor(BaseColor.WHITE);

				/*
				 * For Patient Name
				 */
				PdfPCell cell2 = new PdfPCell(new Paragraph("Patient Name", mainContent));
				cell2.setBorderWidth(0.01f);
				cell2.setPaddingBottom(5);
				cell2.setBorderWidthLeft(0.2f);
				cell2.setBorderColor(BaseColor.WHITE);

				String fullName = resultSet1.getString("firstName") + " " + resultSet1.getString("middleName") + " "
						+ resultSet1.getString("lastName") + " (" + resultSet1.getInt("id") + ")";

				PdfPCell cell3 = new PdfPCell(new Paragraph(fullName, mainContent));
				cell3.setBorderWidth(0.2f);
				cell3.setPaddingBottom(5);
				cell3.setBorderColor(BaseColor.WHITE);

				/*
				 * For Visit Type
				 */
				PdfPCell cell12 = new PdfPCell(new Paragraph("Visit Type", mainContent));
				cell12.setBorderWidth(0.01f);
				cell12.setPaddingBottom(5);
				cell12.setBorderWidthLeft(0.2f);
				cell12.setBorderColor(BaseColor.WHITE);
				cell12.setBorderWidthLeft(0.0f);
				cell12.setBorderWidthTop(0.0f);
				cell12.setBorderColorBottom(BaseColor.WHITE);

				PdfPCell cell13 = new PdfPCell(new Paragraph(visitType, mainContent));
				cell13.setBorderWidth(0.2f);
				cell13.setPaddingBottom(2);
				cell13.setBorderColor(BaseColor.WHITE);
				cell13.setBorderWidthLeft(0.0f);
				cell13.setBorderWidthTop(0.0f);
				cell13.setBorderColorBottom(BaseColor.WHITE);

				/*
				 * For Date
				 */

				PdfPCell cell4 = new PdfPCell(new Paragraph("Visit Date", mainContent));
				cell4.setBorderWidth(0.01f);
				cell4.setPaddingBottom(5);
				cell4.setBorderWidthLeft(0.2f);
				cell4.setBorderColor(BaseColor.WHITE);

				PdfPCell cell5 = new PdfPCell(new Paragraph(visitDate, mainContent));
				cell5.setBorderWidth(0.2f);
				cell5.setPaddingBottom(5);
				cell5.setBorderColor(BaseColor.WHITE);

				/*
				 * For Age
				 */
				PdfPCell cell6 = new PdfPCell(new Paragraph("Visit Time", mainContent));
				cell6.setBorderWidth(0.01f);
				cell6.setPaddingBottom(5);
				cell6.setBorderWidthLeft(0.2f);
				cell6.setBorderColor(BaseColor.WHITE);

				String visitTime = visitTimeFrom + " - " + visitTimeTo;

				PdfPCell cell7 = new PdfPCell(new Paragraph(visitTime, mainContent));
				cell7.setBorderWidth(0.2f);
				cell7.setPaddingBottom(5);
				cell7.setBorderColor(BaseColor.WHITE);

				/*
				 * For Diagnosis
				 */
				PdfPCell cell10 = new PdfPCell(new Paragraph("Diagnosis", mainContent));
				cell10.setBorderWidth(0.01f);
				cell10.setPaddingBottom(5);
				cell10.setBorderWidthLeft(0.2f);
				cell10.setBorderColor(BaseColor.WHITE);

				PdfPCell cell11 = new PdfPCell(new Paragraph(diagnosis, mainContent));
				cell11.setBorderWidth(0.2f);
				cell11.setPaddingBottom(2);
				cell11.setBorderColor(BaseColor.WHITE);

				/*
				 * For Comment
				 */
				PdfPCell cell14 = new PdfPCell(new Paragraph("Medical Notes", mainContent));
				cell14.setBorderWidth(0.01f);
				cell14.setPaddingBottom(5);
				cell14.setBorderWidthLeft(0.2f);
				cell14.setBorderColor(BaseColor.WHITE);
				cell14.setBorderWidthLeft(0.0f);
				cell14.setBorderWidthTop(0.0f);
				cell14.setBorderColorBottom(BaseColor.WHITE);

				PdfPCell cell15 = new PdfPCell(new Paragraph(comment, mainContent));
				cell15.setBorderWidth(0.2f);
				cell15.setPaddingBottom(2);
				cell15.setBorderColor(BaseColor.WHITE);
				cell15.setBorderWidthLeft(0.0f);
				cell15.setBorderWidthTop(0.0f);
				cell15.setBorderWidthBottom(1f);
				cell15.setBorderColorBottom(BaseColor.WHITE);

				/*
				 * adding all cell to the table to create tabular structure
				 */

				table.addCell(cell);
				// table.addCell(cell1);
				table.addCell(cell2);
				table.addCell(cell3);
				table.addCell(cell12);
				table.addCell(cell13);
				table.addCell(cell4);
				table.addCell(cell5);
				table.addCell(cell6);
				table.addCell(cell7);
				table.addCell(cell10);
				table.addCell(cell11);
				table.addCell(cell14);
				table.addCell(cell15);

				document.add(table);
			}

			/*
			 * For prescription
			 */
			PdfPTable table3 = new PdfPTable(5);
			table3.setWidthPercentage(100);
			Rectangle rect2 = new Rectangle(270, 700);
			table3.setWidthPercentage(new float[] { 30, 60, 60, 60, 60 }, rect2);

			// For blank space
			PdfPCell cell30 = new PdfPCell(new Paragraph(
					"                                                                                               "
							+ "                                                                                                                            "
							+ "                                                                                                                              ",
					Font2));
			cell30.setColspan(5);
			cell30.setBorderWidthRight(0f);
			cell30.setBorderWidthLeft(0f);
			cell30.setBorderWidthTop(0f);
			cell30.setBorderWidthBottom(0f);
			cell30.setBorderColorTop(BaseColor.WHITE);

			PdfPCell cell3011 = new PdfPCell(new Paragraph("Prescription", Font5));
			cell3011.setColspan(5);
			cell3011.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell3011.setPaddingBottom(10);
			cell3011.setBorderWidthBottom(1f);
			cell3011.setUseBorderPadding(true);
			cell3011.setBorderColorBottom(BaseColor.DARK_GRAY);
			cell3011.setBorderColor(BaseColor.WHITE);

			/*
			 * Table for Prescription image
			 */
			PdfPTable imageTable = new PdfPTable(2);
			imageTable.setWidthPercentage(100);
			imageTable.setWidths(new int[] { 1, 2 });

			PdfPCell imageCell1 = new PdfPCell(prescrImg, true);
			imageCell1.setBorderColor(BaseColor.WHITE);

			PdfPCell imageCell2 = new PdfPCell(new Paragraph("", mainContent));
			imageCell2.setBorderColor(BaseColor.WHITE);

			imageTable.addCell(imageCell1);
			imageTable.addCell(imageCell2);

			// Gene
			PdfPCell cell3002 = new PdfPCell(imageTable);

			cell3002.setBorderWidth(0.0f);
			cell3002.setPaddingTop(20);
			cell3002.setPaddingBottom(10);
			cell3002.setBorderColor(BaseColor.WHITE);

			PdfPCell cell320 = new PdfPCell(new Paragraph("", mainContent));

			cell320.setBorderWidth(0.01f);
			cell320.setPaddingBottom(5);
			cell320.setColspan(4);
			cell320.setBorderColor(BaseColor.WHITE);

			// Gene
			PdfPCell cell32 = new PdfPCell(new Paragraph("Sr.No.", mainContent));

			cell32.setBorderWidth(0.01f);
			cell32.setPaddingBottom(5);
			cell32.setBorderColor(BaseColor.WHITE);

			// Nucleotide Change
			PdfPCell cell33 = new PdfPCell(new Paragraph("Drug Name", mainContent));

			cell33.setBorderWidth(0.01f);
			cell33.setPaddingBottom(5);
			cell33.setColspan(3);
			cell33.setBorderColor(BaseColor.WHITE);

			// Amino Acid Change
			PdfPCell cell34 = new PdfPCell(new Paragraph("# Pills", mainContent));

			cell34.setBorderWidth(0.01f);
			cell34.setPaddingBottom(5);
			cell34.setBorderColor(BaseColor.WHITE);

			table3.addCell(cell30);
			table3.addCell(cell3011);
			table3.addCell(cell3002);
			table3.addCell(cell320);
			table3.addCell(cell32);
			table3.addCell(cell33);
			table3.addCell(cell34);

			document.add(table3);

			while (resultSet.next()) {
				PdfPTable table1 = new PdfPTable(5);

				table1.setWidthPercentage(100);
				Rectangle rect1 = new Rectangle(270, 700);
				table1.setWidthPercentage(new float[] { 30, 60, 60, 60, 60 }, rect1);

				/*
				 * for Gene
				 */
				PdfPCell cell20 = new PdfPCell(new Paragraph("" + count + "", mainContent));
				cell20.setBorderWidth(0.2f);
				cell20.setPaddingBottom(2);
				cell20.setBorderColor(BaseColor.WHITE);

				String finalTradeName = resultSet.getString("tradeName") + " (" + resultSet.getString("dose") + ")";

				/*
				 * for Nucleotide Change
				 */
				PdfPCell cell21 = new PdfPCell(new Paragraph(finalTradeName, mainContent));
				cell21.setBorderWidth(0.2f);
				cell21.setPaddingBottom(2);
				cell21.setColspan(3);
				cell21.setBorderColor(BaseColor.WHITE);

				/*
				 * for Amino Acid Change
				 */
				PdfPCell cell22 = new PdfPCell(
						new Paragraph(String.valueOf(resultSet.getInt("pillCount")), mainContent));
				cell22.setBorderWidth(0.2f);
				cell22.setPaddingBottom(2);
				cell22.setBorderColor(BaseColor.WHITE);

				/*
				 * for Variant Type
				 */
				PdfPCell cell23 = new PdfPCell(new Paragraph("", mainContent));
				cell23.setBorderWidth(0.2f);
				cell23.setPaddingBottom(2);
				cell23.setBorderColor(BaseColor.WHITE);

				/*
				 * for Variant Impact
				 */
				PdfPCell cell24 = new PdfPCell(
						new Paragraph(String.valueOf(resultSet.getString("frequency")), mainContent));
				cell24.setBorderWidth(0.2f);
				cell24.setPaddingBottom(2);
				cell24.setColspan(2);
				cell24.setBorderColor(BaseColor.WHITE);

				/*
				 * for Clinical Significance
				 */
				PdfPCell cell25 = new PdfPCell(new Paragraph(resultSet.getString("comment"), mainContent));
				cell25.setBorderWidth(0.2f);
				cell25.setPaddingBottom(2);
				cell25.setColspan(2);
				cell25.setBorderColor(BaseColor.WHITE);

				table1.addCell(cell20);
				table1.addCell(cell21);
				table1.addCell(cell22);
				table1.addCell(cell23);
				table1.addCell(cell24);
				table1.addCell(cell25);
				table1.addCell(cell3011);

				document.add(table1);

				count++;
			}

			/*
			 * For Next day visit text
			 */
			PdfPTable table5 = new PdfPTable(1);
			table5.setWidthPercentage(100);
			Rectangle rect4 = new Rectangle(270, 700);
			table5.setWidthPercentage(new float[] { 300 }, rect4);

			/*
			 * Creating Table header
			 */

			// For blank space
			PdfPCell cell301 = new PdfPCell(new Paragraph(
					"                                                                                               "
							+ "                                                                                                                            "
							+ "                                                                                                                              ",
					Font2));
			cell301.setColspan(1);
			cell301.setBorderWidthRight(0f);
			cell301.setBorderWidthLeft(0f);
			cell301.setBorderWidthTop(0f);
			cell301.setBorderWidthBottom(0f);
			cell301.setBorderColorTop(BaseColor.WHITE);

			// for Title
			PdfPCell cell311 = new PdfPCell(new Paragraph(nextDayVisit, marathiFont));
			cell311.setPaddingTop(5);
			cell311.setPaddingBottom(10);
			cell311.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell311.setUseBorderPadding(true);
			cell311.setColspan(1);
			cell311.setBorderWidthRight(0.1f);
			cell311.setBorderWidthLeft(0.1f);
			cell311.setBorderWidthTop(0.1f);
			cell311.setBorderWidthBottom(0.1f);
			cell311.setBorderColor(BaseColor.WHITE);

			table5.addCell(cell301);
			table5.addCell(cell311);

			document.add(table5);

			/*
			 * For signature in footer
			 */
			PdfPTable table = new PdfPTable(1);
			table.setTotalWidth(350);

			PdfPCell cell1111 = new PdfPCell(new Paragraph("Signature", mainContent1));
			cell1111.setBackgroundColor(BaseColor.WHITE);
			cell1111.setHorizontalAlignment(Element.ALIGN_RIGHT);
			cell1111.setBorderColor(BaseColor.WHITE);
			table.addCell(cell1111);

			FooterTable event = new FooterTable(table);
			writer.setPageEvent(event);

			document.close();

			System.out.println("Successfully written and generated Medical notes PDF Report");

			status = "success";

			connection.close();

		} catch (Exception exception) {
			exception.printStackTrace();
			status = "error";
		}
		return status;

	}

	/**
	 * 
	 * @param patientID
	 * @param realPath
	 * @param pdfFileName
	 * @return
	 */
	public String printMedicalNoteHistoryPDFReport(int patientID, String realPath, String pdfFileName) {

		int count = 1;

		String visitDate = null;
		String diagnosis = null;
		String visitType = null;
		String comment = null;
		String visitTimeFrom = null;
		String visitTimeTo = null;
		String billDate = null;

		String status = null;

		String nextDayVisitText = "ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚ÂµÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¸ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¨ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚ÂªÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¹ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¸ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â®ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¸ ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¹ÃƒÆ’Ã¢â‚¬Â¦ÃƒÂ¢Ã¢â€šÂ¬Ã…â€œÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¨ ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â­ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¸ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â£ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡";
		String nextDayVisit = null;

		int count1 = 1;

		int count2 = 1;

		double totalBill = 0D;

		/*
		 * To covert date from database into DD-MM-YYYY
		 */
		SimpleDateFormat databaseDate = new SimpleDateFormat("yyyy-MM-dd");

		SimpleDateFormat dateToBeDisplayed = new SimpleDateFormat("dd-MM-yyyy");

		Date date = new Date();

		/*
		 * Declaring variable which stores the location for FreeSans.ttf file to print
		 * marathi text on pdf
		 */
		String marathiFontDir = realPath + "fonts/FreeSans.ttf";

		ConfigurationUtil configXMLUtil = new ConfigurationUtil();

		try {
			connection = getConnection();

			/*
			 * Generate the queries to fetch details
			 */
			String fetchDetailQuery1 = QueryMaker.OPD_PDF_RETRIEVE_PATIENT;

			preparedStatement1 = connection.prepareStatement(fetchDetailQuery1);
			preparedStatement1.setInt(1, patientID);
			resultSet1 = preparedStatement1.executeQuery();

			/*
			 * Generating query 2
			 */
			String fetchDetailQuery2 = QueryMaker.RETRIEVE_VISIT_FOR_MEDICAL_HISTORY_REPORT;

			preparedStatement2 = connection.prepareStatement(fetchDetailQuery2);
			preparedStatement2.setInt(1, patientID);
			preparedStatement2.setString(2, "Active");
			resultSet2 = preparedStatement2.executeQuery();

			/*
			 * Generating query 3
			 */
			String fetchDetailQuery3 = QueryMaker.RETRIEVE_PRESCRIPTION_FOR_MEDICAL_HISTORY_REPORT;

			preparedStatement3 = connection.prepareStatement(fetchDetailQuery3);
			preparedStatement3.setInt(1, patientID);
			preparedStatement3.setString(2, "Active");
			resultSet3 = preparedStatement3.executeQuery();

			// For billing
			/*
			 * Generate the queries to fetch details
			 */
			String fetchDetailQuery4 = QueryMaker.RETRIEVE_BILLING_FOR_MEDICAL_HISTORY_REPORT;

			preparedStatement4 = connection.prepareStatement(fetchDetailQuery4);
			preparedStatement4.setInt(1, patientID);
			preparedStatement4.setString(2, ActivityStatus.ACTIVE);
			resultSet4 = preparedStatement4.executeQuery();

			while (resultSet4.next()) {
				String dateFromDB = resultSet4.getString("billDate");

				date = databaseDate.parse(dateFromDB);

				billDate = dateToBeDisplayed.format(date);
			}

			/*
			 * To fetch billDate
			 */
			preparedStatement = connection.prepareStatement(fetchDetailQuery4);
			preparedStatement.setInt(1, patientID);
			preparedStatement.setString(2, ActivityStatus.ACTIVE);
			resultSet = preparedStatement.executeQuery();

			/*
			 * Total final bill
			 */

			String retrieveTotalBillQuery = QueryMaker.RETRIEVE_TOTAL_BILL_FOR_MEDICAL_HISTORY_REPORT;

			/*
			 * Retrieving total service charge
			 */
			preparedStatement5 = connection.prepareStatement(retrieveTotalBillQuery);

			preparedStatement5.setInt(1, patientID);
			preparedStatement5.setString(2, ActivityStatus.ACTIVE);

			resultSet5 = preparedStatement5.executeQuery();

			while (resultSet5.next()) {
				totalBill = resultSet5.getDouble("SUM");
				System.out.println("TOtal bill for medical history report is :: " + totalBill);
			}

			/*
			 * Getting page size from XMl
			 */
			String pageSize = configXMLUtil.getPageSize();

			/*
			 * Setting path to store PDF file
			 */
			File file = new File(realPath + "/" + pdfFileName);
			/*
			 * Creating Document for PDF
			 */
			Document document = null;

			/*
			 * Checking whether pageSize tag in XMl contains A5 or A4, according to that
			 * setting PDF page size
			 */
			if (pageSize.equals("A5")) {
				document = new Document(PageSize.A5);
			} else if (pageSize.equals("A4")) {
				document = new Document(PageSize.A4);
			}

			PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(file));

			Font Font1 = new Font(Font.FontFamily.TIMES_ROMAN, 10, Font.NORMAL);
			Font Font3 = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.NORMAL);
			Font Font2 = new Font(Font.FontFamily.TIMES_ROMAN, 8, Font.NORMAL);
			Font Font4 = new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.BOLD);
			Font Font5 = new Font(Font.FontFamily.TIMES_ROMAN, 10, Font.BOLD);
			Font mainContent = new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.NORMAL);
			Font mainContent1 = new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.NORMAL);
			mainContent1.setColor(BaseColor.GRAY);
			/*
			 * Defining marathi font
			 */
			Font marathiFont = FontFactory.getFont(marathiFontDir, BaseFont.IDENTITY_H, BaseFont.EMBEDDED);

			marathiFont.setSize(9);

			document.open();

			Image prescrImg = Image.getInstance(realPath + "/images/Rx_icon.png");

			prescrImg.scaleAbsolute(0f, 0f);

			/*
			 * Setting header
			 */
			document.addCreator("eDhanvantari");
			document.addTitle("Medical Note History Report");

			/*
			 * For displaying patient personal details
			 */
			while (resultSet1.next()) {
				PdfPTable table = new PdfPTable(4);

				table.setFooterRows(1);
				table.setWidthPercentage(100);
				Rectangle rect = new Rectangle(270, 700);
				table.setWidthPercentage(new float[] { 55, 130, 45, 40 }, rect);

				PdfPCell cell = new PdfPCell(new Paragraph("Patient Details", Font5));
				cell.setPaddingBottom(10);
				cell.setHorizontalAlignment(Element.ALIGN_CENTER);
				cell.setUseBorderPadding(true);
				cell.setColspan(4);
				cell.setBorderWidthBottom(1f);
				cell.setBorderColorBottom(BaseColor.DARK_GRAY);
				cell.setBorderColor(BaseColor.WHITE);

				/*
				 * For Patient Name
				 */
				PdfPCell cell2 = new PdfPCell(new Paragraph("Patient Name", mainContent));
				cell2.setBorderWidth(0.01f);
				cell2.setPaddingBottom(5);
				cell2.setBorderWidthLeft(0.2f);
				cell2.setBorderColor(BaseColor.WHITE);

				String fullName = resultSet1.getString("firstName") + " " + resultSet1.getString("middleName") + " "
						+ resultSet1.getString("lastName") + " (" + resultSet1.getInt("id") + ")";

				PdfPCell cell3 = new PdfPCell(new Paragraph(fullName, mainContent));
				cell3.setBorderWidth(0.2f);
				cell3.setPaddingBottom(5);
				cell3.setBorderColor(BaseColor.WHITE);

				/*
				 * For Age
				 */

				PdfPCell cell4 = new PdfPCell(new Paragraph("Age/Gender", mainContent));
				cell4.setBorderWidth(0.01f);
				cell4.setPaddingBottom(5);
				cell4.setBorderWidthLeft(0.2f);
				cell4.setBorderColor(BaseColor.WHITE);

				// Age and gender
				String ageGender = resultSet1.getString("age") + "/" + resultSet1.getString("gender");

				PdfPCell cell5 = new PdfPCell(new Paragraph(ageGender, mainContent));
				cell5.setBorderWidth(0.2f);
				cell5.setPaddingBottom(5);
				cell5.setBorderColor(BaseColor.WHITE);
				/*
				 * adding all cell to the table to create tabular structure
				 */

				table.addCell(cell);
				table.addCell(cell2);
				table.addCell(cell3);
				table.addCell(cell4);
				table.addCell(cell5);

				document.add(table);
			}

			/*
			 * For Medical Notes
			 */
			PdfPTable table2 = new PdfPTable(7);
			table2.setWidthPercentage(100);
			Rectangle rect = new Rectangle(270, 700);
			table2.setWidthPercentage(new float[] { 23, 20, 37, 30, 30, 50, 80 }, rect);

			// for Title
			PdfPCell cell40 = new PdfPCell(new Paragraph("Medical Notes History", Font5));
			cell40.setPaddingTop(50);
			cell40.setPaddingBottom(10);
			cell40.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell40.setUseBorderPadding(true);
			cell40.setColspan(7);
			cell40.setBorderWidthRight(0.1f);
			cell40.setBorderWidthLeft(0.1f);
			cell40.setBorderWidthTop(0.1f);
			cell40.setBorderWidthBottom(1f);
			cell40.setBorderColorBottom(BaseColor.DARK_GRAY);
			cell40.setBorderColor(BaseColor.WHITE);

			PdfPCell cell41 = new PdfPCell(new Paragraph(
					"                                                                                               "
							+ "                                                                                                                            "
							+ "                                                                                                                              ",
					Font2));
			cell41.setColspan(7);
			cell41.setBorderWidthRight(0f);
			cell41.setBorderWidthLeft(0f);
			cell41.setBorderWidthTop(0f);
			cell41.setBorderWidthBottom(0f);
			cell41.setBorderColorTop(BaseColor.WHITE);

			PdfPCell cell42 = new PdfPCell(new Paragraph("Sr.No.", Font4));
			cell42.setBorderWidth(0.01f);
			cell42.setPaddingBottom(2);
			cell42.setBorderColor(BaseColor.GRAY);

			// Gene
			PdfPCell cell43 = new PdfPCell(new Paragraph("Care Type", Font4));

			cell43.setBorderWidth(0.01f);
			cell43.setPaddingBottom(2);
			cell43.setBorderColor(BaseColor.GRAY);

			// Nucleotide Change
			PdfPCell cell44 = new PdfPCell(new Paragraph("Visit Date", Font4));

			cell44.setBorderWidth(0.01f);
			cell44.setPaddingBottom(2);
			cell44.setBorderColor(BaseColor.GRAY);

			// Amino Acid Change
			PdfPCell cell45 = new PdfPCell(new Paragraph("Visit Time", Font4));

			cell45.setBorderWidth(0.01f);
			cell45.setPaddingBottom(2);
			cell45.setBorderColor(BaseColor.GRAY);

			PdfPCell cell46 = new PdfPCell(new Paragraph("Visit No.", Font4));

			cell46.setBorderWidth(0.01f);
			cell46.setPaddingBottom(2);
			cell46.setBorderColor(BaseColor.GRAY);

			PdfPCell cell47 = new PdfPCell(new Paragraph("Diagnosis", Font4));

			cell47.setBorderWidth(0.01f);
			cell47.setPaddingBottom(2);
			cell47.setBorderColor(BaseColor.GRAY);

			PdfPCell cell48 = new PdfPCell(new Paragraph("Visit Note", Font4));

			cell48.setBorderWidth(0.01f);
			cell48.setPaddingBottom(5);
			cell48.setBorderColor(BaseColor.GRAY);

			table2.addCell(cell40);
			table2.addCell(cell41);
			table2.addCell(cell42);
			table2.addCell(cell43);
			table2.addCell(cell44);
			table2.addCell(cell45);
			table2.addCell(cell46);
			table2.addCell(cell47);
			table2.addCell(cell48);

			document.add(table2);

			while (resultSet2.next()) {
				PdfPTable table1 = new PdfPTable(7);

				table1.setWidthPercentage(100);
				Rectangle rect1 = new Rectangle(270, 700);
				table1.setWidthPercentage(new float[] { 23, 20, 37, 30, 30, 50, 80 }, rect1);

				/*
				 * for Gene
				 */
				PdfPCell cell20 = new PdfPCell(new Paragraph("" + count1 + "", mainContent));
				cell20.setBorderWidth(0.2f);
				cell20.setPaddingBottom(2);
				cell20.setBorderColor(BaseColor.GRAY);
				/*
				 * for Nucleotide Change
				 */
				PdfPCell cell21 = new PdfPCell(new Paragraph(resultSet2.getString("careType"), mainContent));
				cell21.setBorderWidth(0.2f);
				cell21.setPaddingBottom(2);
				cell21.setBorderColor(BaseColor.GRAY);

				/*
				 * for Amino Acid Change
				 */
				PdfPCell cell22 = new PdfPCell(new Paragraph(resultSet2.getString("visitDate"), mainContent));
				cell22.setBorderWidth(0.2f);
				cell22.setPaddingBottom(2);
				cell22.setBorderColor(BaseColor.GRAY);

				/*
				 * for Variant Type
				 */
				if (resultSet2.getString("visitTimeFrom") == null || resultSet2.getString("visitTimeFrom") == "") {

					visitTimeFrom = resultSet2.getString("visitTimeFrom");

				} else {

					String[] visitTimeFromArray = resultSet2.getString("visitTimeFrom").split(":");

					String hour = visitTimeFromArray[0];
					if (hour.length() == 1) {
						hour = "0" + hour;
					}

					String minArray[] = visitTimeFromArray[1].split(" ");

					String min = minArray[0];
					if (min.length() == 1) {
						min = "0" + min;
					}

					String ampm = minArray[1];

					visitTimeFrom = hour + ":" + min + " " + ampm;

				}

				PdfPCell cell23 = new PdfPCell(new Paragraph(visitTimeFrom, mainContent));
				cell23.setBorderWidth(0.2f);
				cell23.setPaddingBottom(2);
				cell23.setBorderColor(BaseColor.GRAY);

				/*
				 * for Variant Impact
				 */
				PdfPCell cell24 = new PdfPCell(
						new Paragraph(String.valueOf(resultSet2.getInt("visitNumber")), mainContent));
				cell24.setBorderWidth(0.2f);
				cell24.setPaddingBottom(2);
				cell24.setBorderColor(BaseColor.GRAY);

				/*
				 * for Clinical Significance
				 */
				PdfPCell cell25 = new PdfPCell(new Paragraph(resultSet2.getString("diagnosis"), mainContent));
				cell25.setBorderWidth(0.2f);
				cell25.setPaddingBottom(2);
				cell25.setBorderColor(BaseColor.GRAY);

				PdfPCell cell26 = new PdfPCell(new Paragraph(resultSet2.getString("visitNote"), mainContent));
				cell26.setBorderWidth(0.2f);
				cell26.setPaddingBottom(2);
				cell26.setBorderColor(BaseColor.GRAY);

				table1.addCell(cell20);
				table1.addCell(cell21);
				table1.addCell(cell22);
				table1.addCell(cell23);
				table1.addCell(cell24);
				table1.addCell(cell25);
				table1.addCell(cell26);

				document.add(table1);

				count1++;
			}

			document.newPage();

			/*
			 * For prescription
			 */
			PdfPTable table3 = new PdfPTable(5);
			table3.setWidthPercentage(100);
			Rectangle rect2 = new Rectangle(270, 700);
			table3.setWidthPercentage(new float[] { 30, 60, 60, 60, 60 }, rect2);

			// For blank space
			PdfPCell cell30 = new PdfPCell(new Paragraph(
					"                                                                                               "
							+ "                                                                                                                            "
							+ "                                                                                                                              ",
					Font2));
			cell30.setColspan(5);
			cell30.setBorderWidthRight(0f);
			cell30.setBorderWidthLeft(0f);
			cell30.setBorderWidthTop(0f);
			cell30.setBorderWidthBottom(0f);
			cell30.setBorderColorTop(BaseColor.WHITE);

			// for Title
			PdfPCell cell31 = new PdfPCell(new Paragraph("Prescription History", Font5));
			cell31.setPaddingBottom(10);
			cell31.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell31.setUseBorderPadding(true);
			cell31.setColspan(5);
			cell31.setBorderWidthRight(0.1f);
			cell31.setBorderWidthLeft(0.1f);
			cell31.setBorderWidthTop(0.1f);
			cell31.setBorderWidthBottom(1f);
			cell31.setBorderColorBottom(BaseColor.DARK_GRAY);
			cell31.setBorderColor(BaseColor.WHITE);

			PdfPCell cell3011 = new PdfPCell(new Paragraph(
					"                                                                                               "
							+ "                                                                                                                            "
							+ "                                                                                                                              ",
					Font2));
			cell3011.setColspan(5);
			cell3011.setBorderWidthRight(0f);
			cell3011.setBorderWidthLeft(0f);
			cell3011.setBorderWidthTop(0f);
			cell3011.setBorderWidthBottom(0f);
			cell3011.setBorderColorTop(BaseColor.WHITE);

			/*
			 * Table for Prescription image
			 */
			PdfPTable imageTable = new PdfPTable(2);
			imageTable.setWidthPercentage(100);
			imageTable.setWidths(new int[] { 1, 2 });

			PdfPCell imageCell1 = new PdfPCell(prescrImg, true);
			imageCell1.setBorderColor(BaseColor.WHITE);

			PdfPCell imageCell2 = new PdfPCell(new Paragraph("", mainContent));
			imageCell2.setBorderColor(BaseColor.WHITE);

			imageTable.addCell(imageCell1);
			imageTable.addCell(imageCell2);

			// Gene
			PdfPCell cell3002 = new PdfPCell(imageTable);

			cell3002.setBorderWidth(0.0f);
			cell3002.setPaddingBottom(10);
			cell3002.setBorderColor(BaseColor.WHITE);

			PdfPCell cell320 = new PdfPCell(new Paragraph("", mainContent));

			cell320.setBorderWidth(0.01f);
			cell320.setPaddingBottom(5);
			cell320.setColspan(4);
			cell320.setBorderColor(BaseColor.WHITE);

			// Gene
			PdfPCell cell32 = new PdfPCell(new Paragraph("Sr.No.", Font4));

			cell32.setBorderWidth(0.01f);
			cell32.setPaddingBottom(5);
			cell32.setBorderColor(BaseColor.GRAY);

			// Nucleotide Change
			PdfPCell cell33 = new PdfPCell(new Paragraph("Drug Name", Font4));

			cell33.setBorderWidth(0.01f);
			cell33.setPaddingBottom(5);
			cell33.setColspan(3);
			cell33.setBorderColor(BaseColor.GRAY);

			// Amino Acid Change
			PdfPCell cell34 = new PdfPCell(new Paragraph("# Pills", Font4));

			cell34.setBorderWidth(0.01f);
			cell34.setPaddingBottom(5);
			cell34.setBorderColor(BaseColor.GRAY);

			table3.addCell(cell30);
			table3.addCell(cell31);
			table3.addCell(cell3011);
			table3.addCell(cell3002);
			table3.addCell(cell320);
			table3.addCell(cell32);
			table3.addCell(cell33);
			table3.addCell(cell34);

			document.add(table3);

			while (resultSet3.next()) {
				PdfPTable table1 = new PdfPTable(5);

				table1.setWidthPercentage(100);
				Rectangle rect1 = new Rectangle(270, 700);
				table1.setWidthPercentage(new float[] { 30, 60, 60, 60, 60 }, rect1);

				/*
				 * for Gene
				 */
				PdfPCell cell20 = new PdfPCell(new Paragraph("" + count + "", marathiFont));
				cell20.setBorderWidth(0.2f);
				cell20.setPaddingBottom(2);
				cell20.setBorderColor(BaseColor.GRAY);

				String finalTradeName = resultSet3.getString("tradeName") + " (" + resultSet3.getString("drugName")
						+ " " + resultSet3.getString("dose") + ")";

				/*
				 * for Nucleotide Change
				 */
				PdfPCell cell21 = new PdfPCell(new Paragraph(finalTradeName, marathiFont));
				cell21.setBorderWidth(0.2f);
				cell21.setPaddingBottom(2);
				cell21.setColspan(3);
				cell21.setBorderColor(BaseColor.GRAY);

				/*
				 * for Amino Acid Change
				 */
				PdfPCell cell22 = new PdfPCell(
						new Paragraph(String.valueOf(resultSet3.getInt("pillCount")), marathiFont));
				cell22.setBorderWidth(0.2f);
				cell22.setPaddingBottom(2);
				cell22.setBorderColor(BaseColor.GRAY);

				/*
				 * for Variant Type
				 */
				PdfPCell cell23 = new PdfPCell(new Paragraph("", marathiFont));
				cell23.setBorderWidth(0.2f);
				cell23.setPaddingBottom(2);
				cell23.setBorderColor(BaseColor.GRAY);

				/*
				 * for Variant Impact
				 */
				PdfPCell cell24 = new PdfPCell(new Paragraph(resultSet3.getString("frequency"), marathiFont));
				cell24.setBorderWidth(0.2f);
				cell24.setPaddingBottom(2);
				cell24.setColspan(2);
				cell24.setBorderColor(BaseColor.GRAY);

				/*
				 * for Clinical Significance
				 */
				PdfPCell cell25 = new PdfPCell(new Paragraph(resultSet3.getString("comment"), marathiFont));
				cell25.setBorderWidth(0.2f);
				cell25.setPaddingBottom(2);
				cell25.setColspan(2);
				cell25.setBorderColor(BaseColor.GRAY);

				table1.addCell(cell20);
				table1.addCell(cell21);
				table1.addCell(cell22);
				table1.addCell(cell23);
				table1.addCell(cell24);
				table1.addCell(cell25);

				document.add(table1);

				count++;
			}

			document.newPage();

			/*
			 * For Billing
			 */
			PdfPTable table5 = new PdfPTable(6);
			table5.setWidthPercentage(100);
			Rectangle rect4 = new Rectangle(270, 700);
			table5.setWidthPercentage(new float[] { 25, 50, 50, 50, 50, 50 }, rect4);

			/*
			 * Creating Table header
			 */
			cell30.setBorderColorTop(BaseColor.WHITE);

			// for Title
			PdfPCell cell50 = new PdfPCell(new Paragraph("Billing History", Font5));
			cell50.setPaddingBottom(10);
			cell50.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell50.setUseBorderPadding(true);
			cell50.setColspan(6);
			cell50.setBorderWidthRight(0.1f);
			cell50.setBorderWidthLeft(0.1f);
			cell50.setBorderWidthTop(0.1f);
			cell50.setBorderWidthBottom(1f);
			cell50.setBorderColorBottom(BaseColor.DARK_GRAY);

			// Gene
			PdfPCell cell52 = new PdfPCell(new Paragraph("Sr.No.", Font4));

			cell52.setBorderWidth(0.01f);
			cell52.setPaddingBottom(2);
			cell52.setBorderColor(BaseColor.GRAY);

			PdfPCell cell51 = new PdfPCell(new Paragraph("Billing Date", Font4));

			cell51.setBorderWidth(0.01f);
			cell51.setPaddingBottom(2);
			cell51.setBorderColor(BaseColor.GRAY);

			// Nucleotide Change
			PdfPCell cell53 = new PdfPCell(new Paragraph("Description", Font4));

			cell53.setBorderWidth(0.01f);
			cell53.setPaddingBottom(2);
			cell53.setBorderColor(BaseColor.GRAY);

			// Amino Acid Change
			PdfPCell cell54 = new PdfPCell(new Paragraph("Rate", Font4));

			cell54.setBorderWidth(0.01f);
			cell54.setPaddingBottom(2);
			cell54.setBorderColor(BaseColor.GRAY);

			// Variant Type
			PdfPCell cell55 = new PdfPCell(new Paragraph("Charge", Font4));

			cell55.setBorderWidth(0.01f);
			cell55.setPaddingBottom(2);
			cell55.setBorderColor(BaseColor.GRAY);

			// Variant Impact
			PdfPCell cell56 = new PdfPCell(new Paragraph("totalBill", Font4));

			cell56.setBorderWidth(0.01f);
			cell56.setPaddingBottom(2);
			cell56.setBorderColor(BaseColor.GRAY);

			table5.addCell(cell50);
			table5.addCell(cell52);
			table5.addCell(cell51);
			table5.addCell(cell53);
			table5.addCell(cell54);
			table5.addCell(cell55);
			table5.addCell(cell56);

			document.add(table5);

			/*
			 * Table for billing
			 */

			PdfPTable table1 = new PdfPTable(6);

			table1.setWidthPercentage(100);
			Rectangle rect1 = new Rectangle(270, 700);
			table1.setWidthPercentage(new float[] { 25, 50, 50, 50, 50, 50 }, rect1);

			while (resultSet.next()) {

				/*
				 * for Gene
				 */
				PdfPCell cell20 = new PdfPCell(new Paragraph("" + count2 + "", mainContent));
				cell20.setBorderWidth(0.2f);
				cell20.setPaddingBottom(2);
				cell20.setBorderColor(BaseColor.GRAY);

				PdfPCell cell201 = new PdfPCell(new Paragraph(resultSet.getString("billDate"), mainContent));
				cell201.setBorderWidth(0.2f);
				cell201.setPaddingBottom(2);
				cell201.setBorderColor(BaseColor.GRAY);

				/*
				 * for Nucleotide Change
				 */
				PdfPCell cell21 = new PdfPCell(new Paragraph(resultSet.getString("chargeType"), mainContent));
				cell21.setBorderWidth(0.2f);
				cell21.setPaddingBottom(2);
				cell21.setBorderColor(BaseColor.GRAY);

				/*
				 * for Amino Acid Change
				 */
				PdfPCell cell22 = new PdfPCell(new Paragraph(String.valueOf(resultSet.getDouble("rate")), mainContent));
				cell22.setBorderWidth(0.2f);
				cell22.setPaddingBottom(2);
				cell22.setBorderColor(BaseColor.GRAY);

				/*
				 * for Variant Type
				 */
				PdfPCell cell23 = new PdfPCell(
						new Paragraph(String.valueOf(resultSet.getDouble("charge")), mainContent));
				cell23.setBorderWidth(0.2f);
				cell23.setPaddingBottom(2);
				cell23.setBorderColor(BaseColor.GRAY);

				/*
				 * for Variant Impact
				 */
				PdfPCell cell24 = new PdfPCell(
						new Paragraph(String.valueOf(resultSet.getDouble("totalBill")), mainContent));
				cell24.setBorderWidth(0.2f);
				cell24.setPaddingBottom(2);
				cell24.setBorderColor(BaseColor.GRAY);

				table1.addCell(cell20);
				table1.addCell(cell201);
				table1.addCell(cell21);
				table1.addCell(cell22);
				table1.addCell(cell23);
				table1.addCell(cell24);

				count2++;
			}

			/*
			 * For total bill
			 */
			PdfPCell cell23 = new PdfPCell(new Paragraph("Total Bill", mainContent));
			cell23.setBorderWidth(0.2f);
			cell23.setPaddingBottom(2);
			cell23.setColspan(5);
			cell23.setHorizontalAlignment(Element.ALIGN_RIGHT);
			cell23.setBorderColor(BaseColor.GRAY);

			PdfPCell cell24 = new PdfPCell(new Paragraph(String.valueOf(totalBill), mainContent));
			cell24.setBorderWidth(0.2f);
			cell24.setPaddingBottom(2);
			cell24.setBorderColor(BaseColor.GRAY);

			table1.addCell(cell23);
			table1.addCell(cell24);

			document.add(table1);

			/*
			 * For signature in footer
			 */
			PdfPTable table = new PdfPTable(1);
			table.setTotalWidth(350);

			PdfPCell cell1111 = new PdfPCell(new Paragraph("Signature", mainContent1));
			cell1111.setBackgroundColor(BaseColor.WHITE);
			cell1111.setHorizontalAlignment(Element.ALIGN_RIGHT);
			cell1111.setBorderColor(BaseColor.WHITE);
			table.addCell(cell1111);

			FooterTable event = new FooterTable(table);
			writer.setPageEvent(event);

			document.close();

			System.out.println("Successfully written and generated Medical notes PDF Report");

			status = "success";

			connection.close();

		} catch (Exception exception) {
			exception.printStackTrace();
			status = "error";
		}
		return status;

	}

	public String generateOrderPDF(PrescriptionManagementForm form, int supplierID, String pdfFIleName,
			String realPath) {

		ConfigurationUtil configXMLUtil = new ConfigurationUtil();

		String supplierName = "";
		String supplierMobile = "";
		String supplierAddress = "";
		String supplierAgency = "";
		String supplierVAT = "";

		PrescriptionManagementDAOInf daoInf = new PrescriptionManagementDAOImpl();

		LoginDAOInf loginDAOInf = new LoginDAOImpl();

		String status = "error";

		String clinicName = "";

		if (form.getStockClinicID() != null) {

			clinicName = loginDAOInf.retrieveClinicName(Integer.parseInt(form.getStockClinicID()[0]));

		}

		int srNo = 1;

		try {

			connection = getConnection();

			String retrieveSupplierDetailsByIDQuery = QueryMaker.RETRIEVE_SUPPLIER_BY_ID;

			preparedStatement = connection.prepareStatement(retrieveSupplierDetailsByIDQuery);

			preparedStatement.setInt(1, supplierID);

			resultSet = preparedStatement.executeQuery();

			while (resultSet.next()) {

				supplierName = resultSet.getString("name");
				supplierMobile = resultSet.getString("mobile");
				supplierAddress = resultSet.getString("address");
				supplierAgency = resultSet.getString("agency");
				supplierVAT = resultSet.getString("vatNumber");

			}

			/*
			 * Getting image path from XML
			 */
			// String A5ImagePath = configXMLUtil.getLetterHeadImage();

			/*
			 * Getting page size from XMl
			 */
			String pageSize = configXMLUtil.getPageSize();

			/*
			 * Setting path to store PDF file
			 */
			File file = new File(realPath + "/" + pdfFIleName);
			/*
			 * Creating Document for PDF
			 */
			Document document = null;

			/*
			 * Checking whether pageSize tag in XMl contains A5 or A4, according to that
			 * setting PDF page size
			 */
			if (pageSize.equals("A5")) {
				document = new Document(PageSize.A5);
			} else if (pageSize.equals("A4")) {
				document = new Document(PageSize.A4);
			}

			PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(file));

			Font Font1 = new Font(Font.FontFamily.TIMES_ROMAN, 10, Font.NORMAL);
			Font Font3 = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.NORMAL);
			Font Font2 = new Font(Font.FontFamily.TIMES_ROMAN, 8, Font.NORMAL);
			Font Font4 = new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.BOLD);
			Font Font5 = new Font(Font.FontFamily.TIMES_ROMAN, 10, Font.BOLD);
			Font mainContent = new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.NORMAL);
			Font mainContent1 = new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.NORMAL);
			mainContent1.setColor(BaseColor.GRAY);

			document.open();

			/*
			 * Setting header
			 */
			document.addCreator("eDhanvantari");
			document.addTitle("Stock order");

			/*
			 * For Supplier details
			 */
			PdfPTable table = new PdfPTable(4);
			table.setFooterRows(1);
			table.setWidthPercentage(100);
			Rectangle rect = new Rectangle(270, 700);
			table.setWidthPercentage(new float[] { 65, 70, 65, 70 }, rect);

			PdfPCell cell = new PdfPCell(new Paragraph("", Font1));
			cell.setPaddingBottom(2);
			cell.setColspan(4);
			cell.setBorderWidthBottom(1f);
			cell.setBorderColor(BaseColor.WHITE);

			/*
			 * For supplier name
			 */
			PdfPCell cell1 = new PdfPCell(new Paragraph("Supplier Name: ", Font5));
			cell1.setPaddingBottom(5);
			cell1.setBorderColor(BaseColor.WHITE);

			PdfPCell cell2 = new PdfPCell(new Paragraph(supplierName, Font1));
			cell2.setPaddingBottom(5);
			cell2.setBorderColor(BaseColor.WHITE);

			/*
			 * For supplier mobile
			 */
			PdfPCell cell3 = new PdfPCell(new Paragraph("Mobile: ", Font5));
			cell3.setPaddingBottom(5);
			cell3.setBorderColor(BaseColor.WHITE);

			PdfPCell cell4 = new PdfPCell(new Paragraph(supplierMobile, Font1));
			cell4.setPaddingBottom(5);
			cell4.setBorderColor(BaseColor.WHITE);

			/*
			 * For supplier Agency
			 */
			PdfPCell cell5 = new PdfPCell(new Paragraph("Agency: ", Font5));
			cell5.setPaddingBottom(5);
			cell5.setBorderColor(BaseColor.WHITE);

			PdfPCell cell6 = new PdfPCell(new Paragraph(supplierAgency, Font1));
			cell6.setPaddingBottom(5);
			cell6.setBorderColor(BaseColor.WHITE);

			/*
			 * For supplier VAT
			 */
			PdfPCell cell7 = new PdfPCell(new Paragraph("VAT Number: ", Font5));
			cell7.setPaddingBottom(5);
			cell7.setBorderColor(BaseColor.WHITE);

			PdfPCell cell8 = new PdfPCell(new Paragraph(supplierVAT, Font1));
			cell8.setPaddingBottom(5);
			cell8.setBorderColor(BaseColor.WHITE);

			/*
			 * For supplier Address
			 */
			PdfPCell cell9 = new PdfPCell(new Paragraph("Address: ", Font5));
			cell9.setPaddingBottom(5);
			cell9.setBorderColor(BaseColor.WHITE);

			PdfPCell cell111 = new PdfPCell(new Paragraph(supplierAddress, Font1));
			cell111.setPaddingBottom(5);
			// cell111.setColspan(3);
			cell111.setBorderColor(BaseColor.WHITE);

			/*
			 * For Clinic Name
			 */
			PdfPCell cell91 = new PdfPCell(new Paragraph("Clinic: ", Font5));
			cell91.setPaddingBottom(5);
			cell91.setBorderColor(BaseColor.WHITE);

			PdfPCell cell1111 = new PdfPCell(new Paragraph(clinicName, Font1));
			cell1111.setPaddingBottom(5);
			// cell111.setColspan(3);
			cell1111.setBorderColor(BaseColor.WHITE);

			/*
			 * For Clinic Name
			 */
			PdfPCell cell911 = new PdfPCell(new Paragraph("Order No.: ", Font5));
			cell911.setPaddingBottom(5);
			cell911.setBorderColor(BaseColor.WHITE);

			PdfPCell cell11111 = new PdfPCell(new Paragraph(form.getOrderNo(), Font1));
			cell11111.setPaddingBottom(5);
			// cell111.setColspan(3);
			cell11111.setBorderColor(BaseColor.WHITE);

			PdfPCell cell101 = new PdfPCell(new Paragraph("", Font1));
			cell101.setPaddingBottom(5);
			cell101.setColspan(2);
			cell101.setBorderColor(BaseColor.WHITE);

			PdfPCell cell10 = new PdfPCell(new Paragraph("", Font1));
			cell10.setPaddingBottom(5);
			cell10.setColspan(4);
			cell10.setBorderColor(BaseColor.WHITE);

			table.addCell(cell);
			table.addCell(cell1);
			table.addCell(cell2);
			table.addCell(cell3);
			table.addCell(cell4);
			table.addCell(cell5);
			table.addCell(cell6);
			table.addCell(cell7);
			table.addCell(cell8);
			table.addCell(cell9);
			table.addCell(cell111);
			table.addCell(cell911);
			table.addCell(cell11111);
			table.addCell(cell101);
			table.addCell(cell91);
			table.addCell(cell1111);
			table.addCell(cell10);

			document.add(table);

			/*
			 * For Order details
			 */
			PdfPTable table3 = new PdfPTable(3);
			table3.setWidthPercentage(100);
			Rectangle rect2 = new Rectangle(310, 700);
			table3.setWidthPercentage(new float[] { 30, 120, 120 }, rect2);

			/*
			 * Creating header titles for table
			 */

			// For Sr no
			PdfPCell cell11 = new PdfPCell(new Paragraph("SR.No", Font1));
			cell11.setBorderWidth(0.01f);
			cell11.setPaddingBottom(3);
			cell11.setBorderColor(BaseColor.GRAY);

			// For Product
			PdfPCell cell12 = new PdfPCell(new Paragraph("Product", Font1));
			cell12.setBorderWidth(0.01f);
			cell12.setPaddingBottom(3);
			cell12.setBorderColor(BaseColor.GRAY);

			// For Quantity
			PdfPCell cell13 = new PdfPCell(new Paragraph("Quantity", Font1));
			cell13.setBorderWidth(0.01f);
			cell13.setPaddingBottom(3);
			cell13.setBorderColor(BaseColor.GRAY);

			table3.addCell(cell11);
			table3.addCell(cell12);
			table3.addCell(cell13);

			/*
			 * For Order details
			 */
			for (int i = 0; i < form.getCustomerID().length; i++) {

				// For Product name
				PdfPCell cell14 = new PdfPCell(new Paragraph("" + srNo, mainContent));
				cell14.setBorderWidth(0.01f);
				cell14.setPaddingBottom(3);
				cell14.setBorderColor(BaseColor.GRAY);

				// For Quantity
				PdfPCell cell15 = new PdfPCell(new Paragraph(
						daoInf.retrieveProductNameByProductID(Integer.parseInt(form.getProductCompID()[i])),
						mainContent));
				cell15.setBorderWidth(0.01f);
				cell15.setPaddingBottom(3);
				cell15.setBorderColor(BaseColor.GRAY);

				// For Quantity
				PdfPCell cell16 = new PdfPCell(new Paragraph(form.getProductQuantity()[i], mainContent));
				cell16.setBorderWidth(0.01f);
				cell16.setPaddingBottom(3);
				cell16.setBorderColor(BaseColor.GRAY);

				table3.addCell(cell14);
				table3.addCell(cell15);
				table3.addCell(cell16);

				srNo++;

			}

			document.add(table3);

			document.close();

			System.out.println("Successfully written and generated Stock order PDF");

			status = "success";

			/*
			 * Closing resultSet, preparedStatement, connection
			 */
			resultSet.close();
			preparedStatement.close();

			connection.close();

		} catch (Exception exception) {
			exception.printStackTrace();
			status = "error";
		}

		return status;

	}

	/**
	 * 
	 * @param realPath
	 * @param pdfFileName
	 * @param check
	 * @param clinicID
	 * @return
	 */
	public String generateAppointmentReportPDF(String realPath, String pdfFileName, String check, int clinicID) {

		PatientDAOInf patientDAOInf = new PatientDAOImpl();

		int count = 1;

		String status = null;

		String clinicName = patientDAOInf.retrieveClinicNameByID(clinicID);

		/*
		 * Converting date from Database into DD-MM-YYYY format in order to display it
		 * on UI
		 */
		SimpleDateFormat dateToBeParsed123 = new SimpleDateFormat("dd-MM-yyyy");

		SimpleDateFormat dateToBeFormatted = new SimpleDateFormat("yyyy-MM-dd");
		Date date = new Date();

		/*
		 * Declaring variable which stores the location for FreeSans.ttf file to print
		 * marathi text on pdf
		 */
		String marathiFontDir = realPath + "fonts/FreeSans.ttf";

		ConfigurationUtil configXMLUtil = new ConfigurationUtil();

		try {
			connection = getConnection();

			/*
			 * Check whether check value if Day, Month or Week and depending upon that
			 * retrieve appointment list and print
			 */
			if (check.equals("Day")) {

				/*
				 * Generate the query to fetch Todays appointment details
				 */
				String retrieveTodaysAppointmentListQuery = QueryMaker.RETRIEVE_APPOINTMENT_LIST;

				preparedStatement2 = connection.prepareStatement(retrieveTodaysAppointmentListQuery);

				preparedStatement2.setString(1, ActivityStatus.CANCELLED);
				preparedStatement2.setInt(2, clinicID);

				resultSet2 = preparedStatement2.executeQuery();

			} else if (check.equals("Week")) {

				/*
				 * Generate the query to fetch this week's appointment details
				 */
				String retrieveWeekAppointmentListQuery = QueryMaker.RETRIEVE_APPOINTMENT_WEEK_LIST;

				preparedStatement2 = connection.prepareStatement(retrieveWeekAppointmentListQuery);

				preparedStatement2.setString(1, ActivityStatus.CANCELLED);
				preparedStatement2.setInt(2, clinicID);

				resultSet2 = preparedStatement2.executeQuery();

			} else {

				/*
				 * Generate the query to fetch this month appointment details
				 */
				String retrieveMonthAppointmentListQuery = QueryMaker.RETRIEVE_APPOINTMENT_MONTH_LIST;

				preparedStatement2 = connection.prepareStatement(retrieveMonthAppointmentListQuery);

				preparedStatement2.setString(1, ActivityStatus.CANCELLED);
				preparedStatement2.setInt(2, clinicID);

				resultSet2 = preparedStatement2.executeQuery();

			}

			/*
			 * Getting image path from XML
			 */
			// String A5ImagePath = configXMLUtil.getLetterHeadImage();

			/*
			 * Getting page size from XMl
			 */
			String pageSize = configXMLUtil.getPageSize();

			/*
			 * Setting path to store PDF file
			 */
			File file = new File(realPath + "/" + pdfFileName);
			/*
			 * Creating Document for PDF
			 */
			Document document = null;

			/*
			 * Checking whether pageSize tag in XMl contains A5 or A4, according to that
			 * setting PDF page size
			 */
			if (pageSize.equals("A5")) {
				document = new Document(PageSize.A5);
			} else if (pageSize.equals("A4")) {
				document = new Document(PageSize.A4);
			}

			PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(file));

			Font Font1 = new Font(Font.FontFamily.TIMES_ROMAN, 10, Font.NORMAL);
			Font Font3 = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.NORMAL);
			Font Font2 = new Font(Font.FontFamily.TIMES_ROMAN, 8, Font.NORMAL);
			Font Font4 = new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.BOLD);
			Font Font5 = new Font(Font.FontFamily.TIMES_ROMAN, 10, Font.BOLD);
			Font mainContent = new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.NORMAL);
			Font mainContent1 = new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.NORMAL);
			mainContent1.setColor(BaseColor.GRAY);

			document.open();

			/*
			 * Setting header
			 */
			document.addCreator("eDhanvantari");

			if (check.equals("Day")) {
				document.addTitle("Today's Appointment Details at " + clinicName);
			} else if (check.equals("Week")) {
				document.addTitle("This Week's Appointment Details at " + clinicName);
			} else {
				document.addTitle("This Month's Appointment Details at " + clinicName);
			}

			PdfPTable table = new PdfPTable(1);

			table.setWidthPercentage(100);
			Rectangle rect = new Rectangle(270, 700);
			table.setWidthPercentage(new float[] { 270 }, rect);

			String header = "";

			if (check.equals("Day")) {
				header = "Today's Appointment at " + clinicName;
			} else if (check.equals("Week")) {
				header = "This Week's Appointment at " + clinicName;
			} else {
				header = "This Month's Appointment at " + clinicName;
			}

			PdfPCell cell = new PdfPCell(new Paragraph(header, Font5));
			cell.setPaddingTop(10);
			cell.setPaddingBottom(10);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell.setUseBorderPadding(true);
			cell.setBorderWidthBottom(1f);
			cell.setBorderColorBottom(BaseColor.DARK_GRAY);
			cell.setBorderColor(BaseColor.WHITE);

			/*
			 * adding all cell to the table to create tabular structure
			 */

			table.addCell(cell);

			document.add(table);

			/*
			 * For Appointment list
			 */
			PdfPTable table3 = new PdfPTable(8);
			table3.setWidthPercentage(100);
			Rectangle rect2 = new Rectangle(270, 700);
			table3.setWidthPercentage(new float[] { 15, 30, 25, 25, 30, 60, 60, 35 }, rect2);

			// For blank space
			PdfPCell cell30 = new PdfPCell(new Paragraph(
					"                                                                                               "
							+ "                                                                                                                            "
							+ "                                                                                                                              ",
					Font2));
			cell30.setColspan(8);
			cell30.setBorderWidthRight(0f);
			cell30.setBorderWidthLeft(0f);
			cell30.setBorderWidthTop(0f);
			cell30.setBorderWidthBottom(0f);
			cell30.setBorderColorTop(BaseColor.WHITE);

			// sR no
			PdfPCell cell32 = new PdfPCell(new Paragraph("Sr.No.", mainContent));

			cell32.setBorderWidth(0.01f);
			cell32.setPaddingBottom(3);
			cell32.setBorderColor(BaseColor.GRAY);

			// Compound
			PdfPCell cell33 = new PdfPCell(new Paragraph("Appt. Date", mainContent));

			cell33.setBorderWidth(0.01f);
			cell33.setPaddingBottom(3);
			cell33.setBorderColor(BaseColor.GRAY);

			// Quantity
			PdfPCell cell34 = new PdfPCell(new Paragraph("Appt. time From", mainContent));

			cell34.setBorderWidth(0.01f);
			cell34.setPaddingBottom(3);
			cell34.setBorderColor(BaseColor.GRAY);

			// Dose
			PdfPCell cell35 = new PdfPCell(new Paragraph("Appt. Time To", mainContent));

			cell35.setBorderWidth(0.01f);
			cell35.setPaddingBottom(3);
			cell35.setBorderColor(BaseColor.GRAY);

			// No of days
			PdfPCell cell36 = new PdfPCell(new Paragraph("Patient ID", mainContent));

			cell36.setBorderWidth(0.01f);
			cell36.setPaddingBottom(3);
			cell36.setBorderColor(BaseColor.GRAY);

			// No Frequency
			PdfPCell cell37 = new PdfPCell(new Paragraph("Patient Name", mainContent));

			cell37.setBorderWidth(0.01f);
			cell37.setPaddingBottom(3);
			cell37.setBorderColor(BaseColor.GRAY);

			// Comment
			PdfPCell cell38 = new PdfPCell(new Paragraph("Assigned To", mainContent));

			cell38.setBorderWidth(0.01f);
			cell38.setPaddingBottom(3);
			cell38.setBorderColor(BaseColor.GRAY);

			// Comment
			PdfPCell cell3002 = new PdfPCell(new Paragraph("Appt. Status", mainContent));

			cell3002.setBorderWidth(0.01f);
			cell3002.setPaddingBottom(3);
			cell3002.setBorderColor(BaseColor.GRAY);

			table3.addCell(cell30);
			table3.addCell(cell32);
			table3.addCell(cell33);
			table3.addCell(cell34);
			table3.addCell(cell35);
			table3.addCell(cell36);
			table3.addCell(cell37);
			table3.addCell(cell38);
			table3.addCell(cell3002);

			while (resultSet2.next()) {

				String dbDate = resultSet2.getString("apptDate");

				date = dateToBeFormatted.parse(dbDate);

				/*
				 * for Sr no
				 */
				PdfPCell cell20 = new PdfPCell(new Paragraph("" + count + "", mainContent));
				cell20.setBorderWidth(0.01f);
				cell20.setPaddingBottom(3);
				cell20.setBorderColor(BaseColor.GRAY);

				/*
				 * for compound
				 */
				PdfPCell cell21 = new PdfPCell(new Paragraph(dateToBeParsed123.format(date), mainContent));
				cell21.setBorderWidth(0.01f);
				cell21.setPaddingBottom(3);
				cell21.setBorderColor(BaseColor.GRAY);

				String[] timeFromArr = resultSet2.getString("apptTimeFrom").split(" ");

				String[] array = timeFromArr[0].split(":");

				String timeFrom = array[0] + ":" + array[1] + " " + timeFromArr[1];

				/*
				 * for Quantity
				 */
				PdfPCell cell22 = new PdfPCell(new Paragraph("" + timeFrom, mainContent));
				cell22.setBorderWidth(0.01f);
				cell22.setPaddingBottom(3);
				cell22.setBorderColor(BaseColor.GRAY);

				String[] timeToArr = resultSet2.getString("apptTimeTo").split(" ");

				String[] array1 = timeToArr[0].split(":");

				String timeTo = array1[0] + ":" + array1[1] + " " + timeToArr[1];

				/*
				 * for Dose
				 */
				PdfPCell cell23 = new PdfPCell(new Paragraph("" + timeTo, mainContent));
				cell23.setBorderWidth(0.01f);
				cell23.setPaddingBottom(3);
				cell23.setBorderColor(BaseColor.GRAY);

				String patientRegno = patientDAOInf.retrieveClinicRegNoByClinicID(clinicID,
						resultSet2.getInt("patientID"));

				/*
				 * for no of days
				 */
				PdfPCell cell24 = new PdfPCell(new Paragraph("" + patientRegno, mainContent));
				cell24.setBorderWidth(0.01f);
				cell24.setPaddingBottom(3);
				cell24.setBorderColor(BaseColor.GRAY);

				/*
				 * for frequency
				 */
				PdfPCell cell25 = new PdfPCell(new Paragraph(
						"" + patientDAOInf.retrievePatientFullName(resultSet2.getInt("patientID")), mainContent));
				cell25.setBorderWidth(0.01f);
				cell25.setPaddingBottom(3);
				cell25.setBorderColor(BaseColor.GRAY);

				/*
				 * for comment
				 */
				PdfPCell cell26 = new PdfPCell(new Paragraph(
						patientDAOInf.retrieveClinicianNameByID(resultSet2.getInt("clinicianID")), mainContent));
				cell26.setBorderWidth(0.01f);
				cell26.setPaddingBottom(3);
				cell26.setBorderColor(BaseColor.GRAY);

				/*
				 * for comment
				 */
				PdfPCell cell261 = new PdfPCell(new Paragraph(resultSet2.getString("status"), mainContent));
				cell261.setBorderWidth(0.01f);
				cell261.setPaddingBottom(3);
				cell261.setBorderColor(BaseColor.GRAY);

				table3.addCell(cell20);
				table3.addCell(cell21);
				table3.addCell(cell22);
				table3.addCell(cell23);
				table3.addCell(cell24);
				table3.addCell(cell25);
				table3.addCell(cell26);
				table3.addCell(cell261);

				count++;

			}

			document.add(table3);

			document.close();

			System.out.println("Successfully written and generated appointment report PDF Report");

			status = "success";

			resultSet2.close();
			preparedStatement2.close();

			connection.close();

		} catch (Exception exception) {
			exception.printStackTrace();
			status = "error";
		}
		return status;

	}

	/**
	 * 
	 * @param realPath
	 * @param pdfFileName
	 * @param patientForm
	 * @param clinicID
	 * @param check
	 * @return
	 */
	public String generatePatientAppointmentReportPDF(String realPath, String pdfFileName, PatientForm patientForm,
			int clinicID, String check) {

		PatientDAOInf patientDAOInf = new PatientDAOImpl();

		int count = 1;

		String status = null;

		String clinicName = patientDAOInf.retrieveClinicNameByID(clinicID);

		/*
		 * Converting date from Database into DD-MM-YYYY format in order to display it
		 * on UI
		 */
		SimpleDateFormat dateToBeParsed123 = new SimpleDateFormat("dd-MM-yyyy");

		SimpleDateFormat dateToBeFormatted = new SimpleDateFormat("yyyy-MM-dd");
		Date date = new Date();

		/*
		 * Declaring variable which stores the location for FreeSans.ttf file to print
		 * marathi text on pdf
		 */
		String marathiFontDir = realPath + "fonts/FreeSans.ttf";

		ConfigurationUtil configXMLUtil = new ConfigurationUtil();

		try {
			connection = getConnection();

			/*
			 * Getting image path from XML
			 */
			// String A5ImagePath = configXMLUtil.getLetterHeadImage();

			/*
			 * Getting page size from XMl
			 */
			String pageSize = configXMLUtil.getPageSize();

			/*
			 * Setting path to store PDF file
			 */
			File file = new File(realPath + "/" + pdfFileName);
			/*
			 * Creating Document for PDF
			 */
			Document document = null;

			/*
			 * Checking whether pageSize tag in XMl contains A5 or A4, according to that
			 * setting PDF page size
			 */
			if (pageSize.equals("A5")) {
				document = new Document(PageSize.A5);
			} else if (pageSize.equals("A4")) {
				document = new Document(PageSize.A4);
			}

			PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(file));

			Font Font1 = new Font(Font.FontFamily.TIMES_ROMAN, 10, Font.NORMAL);
			Font Font3 = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.NORMAL);
			Font Font2 = new Font(Font.FontFamily.TIMES_ROMAN, 8, Font.NORMAL);
			Font Font4 = new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.BOLD);
			Font Font5 = new Font(Font.FontFamily.TIMES_ROMAN, 10, Font.BOLD);
			Font mainContent = new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.NORMAL);
			Font mainContent1 = new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.NORMAL);
			mainContent1.setColor(BaseColor.GRAY);

			document.open();

			/*
			 * Setting header
			 */
			document.addCreator("eDhanvantari");

			if (check.equals("Day")) {
				document.addTitle("Today's Appointment Details at " + clinicName);
			} else if (check.equals("Week")) {
				document.addTitle("This Week's Appointment Details at " + clinicName);
			} else {
				document.addTitle("This Month's Appointment Details at " + clinicName);
			}

			PdfPTable table = new PdfPTable(1);

			table.setWidthPercentage(100);
			Rectangle rect = new Rectangle(270, 700);
			table.setWidthPercentage(new float[] { 270 }, rect);

			String header = "";

			if (check.equals("Day")) {
				header = "Today's Appointment at " + clinicName;
			} else if (check.equals("Week")) {
				header = "This Week's Appointment at " + clinicName;
			} else {
				header = "This Month's Appointment at " + clinicName;
			}

			PdfPCell cell = new PdfPCell(new Paragraph(header, Font5));
			cell.setPaddingTop(10);
			cell.setPaddingBottom(10);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell.setUseBorderPadding(true);
			cell.setBorderWidthBottom(1f);
			cell.setBorderColorBottom(BaseColor.DARK_GRAY);
			cell.setBorderColor(BaseColor.WHITE);

			/*
			 * adding all cell to the table to create tabular structure
			 */

			table.addCell(cell);

			document.add(table);

			/*
			 * For Appointment list
			 */
			PdfPTable table3 = new PdfPTable(8);
			table3.setWidthPercentage(100);
			Rectangle rect2 = new Rectangle(270, 700);
			table3.setWidthPercentage(new float[] { 15, 30, 25, 25, 30, 60, 60, 35 }, rect2);

			// For blank space
			PdfPCell cell30 = new PdfPCell(new Paragraph(
					"                                                                                               "
							+ "                                                                                                                            "
							+ "                                                                                                                              ",
					Font2));
			cell30.setColspan(8);
			cell30.setBorderWidthRight(0f);
			cell30.setBorderWidthLeft(0f);
			cell30.setBorderWidthTop(0f);
			cell30.setBorderWidthBottom(0f);
			cell30.setBorderColorTop(BaseColor.WHITE);

			// sR no
			PdfPCell cell32 = new PdfPCell(new Paragraph("Sr.No.", mainContent));

			cell32.setBorderWidth(0.01f);
			cell32.setPaddingBottom(3);
			cell32.setBorderColor(BaseColor.GRAY);

			// Compound
			PdfPCell cell33 = new PdfPCell(new Paragraph("Appt. Date", mainContent));

			cell33.setBorderWidth(0.01f);
			cell33.setPaddingBottom(3);
			cell33.setBorderColor(BaseColor.GRAY);

			// Quantity
			PdfPCell cell34 = new PdfPCell(new Paragraph("Appt. time From", mainContent));

			cell34.setBorderWidth(0.01f);
			cell34.setPaddingBottom(3);
			cell34.setBorderColor(BaseColor.GRAY);

			// Dose
			PdfPCell cell35 = new PdfPCell(new Paragraph("Appt. Time To", mainContent));

			cell35.setBorderWidth(0.01f);
			cell35.setPaddingBottom(3);
			cell35.setBorderColor(BaseColor.GRAY);

			// No of days
			PdfPCell cell36 = new PdfPCell(new Paragraph("Patient ID", mainContent));

			cell36.setBorderWidth(0.01f);
			cell36.setPaddingBottom(3);
			cell36.setBorderColor(BaseColor.GRAY);

			// No Frequency
			PdfPCell cell37 = new PdfPCell(new Paragraph("Patient Name", mainContent));

			cell37.setBorderWidth(0.01f);
			cell37.setPaddingBottom(3);
			cell37.setBorderColor(BaseColor.GRAY);

			// Comment
			PdfPCell cell38 = new PdfPCell(new Paragraph("Assigned To", mainContent));

			cell38.setBorderWidth(0.01f);
			cell38.setPaddingBottom(3);
			cell38.setBorderColor(BaseColor.GRAY);

			// Comment
			PdfPCell cell3002 = new PdfPCell(new Paragraph("Appt. Status", mainContent));

			cell3002.setBorderWidth(0.01f);
			cell3002.setPaddingBottom(3);
			cell3002.setBorderColor(BaseColor.GRAY);

			table3.addCell(cell30);
			table3.addCell(cell32);
			table3.addCell(cell33);
			table3.addCell(cell34);
			table3.addCell(cell35);
			table3.addCell(cell36);
			table3.addCell(cell37);
			table3.addCell(cell38);
			table3.addCell(cell3002);

			for (int i = 0; i < patientForm.getAppointmentID().length; i++) {

				/*
				 * Generate the query to fetch Todays appointment details
				 */
				String retrieveAppointmentListQuery = QueryMaker.RETRIEVE_APPT_DETAILS;

				preparedStatement2 = connection.prepareStatement(retrieveAppointmentListQuery);

				preparedStatement2.setString(1, ActivityStatus.CANCELLED);
				preparedStatement2.setInt(2, Integer.parseInt(patientForm.getAppointmentID()[i]));

				resultSet2 = preparedStatement2.executeQuery();

				while (resultSet2.next()) {

					String dbDate = resultSet2.getString("apptDate");

					date = dateToBeFormatted.parse(dbDate);

					/*
					 * for Sr no
					 */
					PdfPCell cell20 = new PdfPCell(new Paragraph("" + count + "", mainContent));
					cell20.setBorderWidth(0.01f);
					cell20.setPaddingBottom(3);
					cell20.setBorderColor(BaseColor.GRAY);

					/*
					 * for compound
					 */
					PdfPCell cell21 = new PdfPCell(new Paragraph(dateToBeParsed123.format(date), mainContent));
					cell21.setBorderWidth(0.01f);
					cell21.setPaddingBottom(3);
					cell21.setBorderColor(BaseColor.GRAY);

					String[] timeFromArr = resultSet2.getString("apptTimeFrom").split(" ");

					String[] array = timeFromArr[0].split(":");

					String timeFrom = array[0] + ":" + array[1] + " " + timeFromArr[1];

					/*
					 * for Quantity
					 */
					PdfPCell cell22 = new PdfPCell(new Paragraph("" + timeFrom, mainContent));
					cell22.setBorderWidth(0.01f);
					cell22.setPaddingBottom(3);
					cell22.setBorderColor(BaseColor.GRAY);

					String[] timeToArr = resultSet2.getString("apptTimeTo").split(" ");

					String[] array1 = timeToArr[0].split(":");

					String timeTo = array1[0] + ":" + array1[1] + " " + timeToArr[1];

					/*
					 * for Dose
					 */
					PdfPCell cell23 = new PdfPCell(new Paragraph("" + timeTo, mainContent));
					cell23.setBorderWidth(0.01f);
					cell23.setPaddingBottom(3);
					cell23.setBorderColor(BaseColor.GRAY);

					String patientRegno = patientDAOInf.retrieveClinicRegNoByClinicID(clinicID,
							resultSet2.getInt("patientID"));

					/*
					 * for no of days
					 */
					PdfPCell cell24 = new PdfPCell(new Paragraph("" + patientRegno, mainContent));
					cell24.setBorderWidth(0.01f);
					cell24.setPaddingBottom(3);
					cell24.setBorderColor(BaseColor.GRAY);

					/*
					 * for frequency
					 */
					PdfPCell cell25 = new PdfPCell(new Paragraph(
							"" + patientDAOInf.retrievePatientFullName(resultSet2.getInt("patientID")), mainContent));
					cell25.setBorderWidth(0.01f);
					cell25.setPaddingBottom(3);
					cell25.setBorderColor(BaseColor.GRAY);

					/*
					 * for comment
					 */
					PdfPCell cell26 = new PdfPCell(new Paragraph(
							patientDAOInf.retrieveClinicianNameByID(resultSet2.getInt("clinicianID")), mainContent));
					cell26.setBorderWidth(0.01f);
					cell26.setPaddingBottom(3);
					cell26.setBorderColor(BaseColor.GRAY);

					/*
					 * for comment
					 */
					PdfPCell cell261 = new PdfPCell(new Paragraph(resultSet2.getString("status"), mainContent));
					cell261.setBorderWidth(0.01f);
					cell261.setPaddingBottom(3);
					cell261.setBorderColor(BaseColor.GRAY);

					table3.addCell(cell20);
					table3.addCell(cell21);
					table3.addCell(cell22);
					table3.addCell(cell23);
					table3.addCell(cell24);
					table3.addCell(cell25);
					table3.addCell(cell26);
					table3.addCell(cell261);

					count++;

				}

			}

			document.add(table3);

			document.close();

			System.out.println("Successfully written and generated appointment report PDF Report");

			status = "success";

			resultSet2.close();
			preparedStatement2.close();

			connection.close();

		} catch (Exception exception) {
			exception.printStackTrace();
			status = "error";
		}
		return status;

	}

	public String convertGeneralHospitalVisitPDF(int patientID, int visitID, String realPath, String pdfOutFIleName,
			int clinicID, AmazonS3 s3, String s3reportFilePath, String bucketName) {
		int count = 1;
		PatientDAOInf patientDAOInf = new PatientDAOImpl();

		List<PatientForm> MedicalHistory = null;
		List<PatientForm> FamilyHistory = null;
		List<PatientForm> PersonalHistory = null;
		List<PatientForm> onEaminationList = null;

		PatientForm patientForm = new PatientForm();

		String visitDate = null;
		String diagnosis = null;
		String visitType = null;
		String comment = null;

		String status = null;

		String nextDayVisitText = "ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚ÂµÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¸ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¨ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚ÂªÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¹ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¸ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â®ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¸ ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¹ÃƒÆ’Ã¢â‚¬Â¦ÃƒÂ¢Ã¢â€šÂ¬Ã…â€œÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¨ ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â­ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¸ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â£ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡";
		String nextDayVisit = null;
		String ClinicRegNo = null;

		/*
		 * Declaring variable which stores the location for FreeSans.ttf file to print
		 * marathi text on pdf
		 */
		String marathiFontDir = realPath + "fonts/FreeSans.ttf";

		ConfigurationUtil configXMLUtil = new ConfigurationUtil();

		try {
			connection = getConnection();

			/*
			 * Generate the queries to fetch details
			 */
			String fetchDetailQuery1 = QueryMaker.OPD_PDF_RETRIEVE_PATIENT;

			preparedStatement1 = connection.prepareStatement(fetchDetailQuery1);
			preparedStatement1.setInt(1, patientID);
			resultSet1 = preparedStatement1.executeQuery();

			/*
			 * Generating query 2
			 */
			String fetchDetailQuery2 = QueryMaker.OPD_PDF_RETRIEVE_VISIT;

			preparedStatement2 = connection.prepareStatement(fetchDetailQuery2);
			preparedStatement2.setInt(1, visitID);
			resultSet2 = preparedStatement2.executeQuery();

			// To fetch visit details from Visit Table
			while (resultSet2.next()) {
				visitDate = resultSet2.getString("visitDate");
				diagnosis = resultSet2.getString("diagnosis");
				comment = resultSet2.getString("visitNote");
				// visitType = resultSet2.getString("visitType");
				nextDayVisit = resultSet2.getInt("nextVisitDays") + " " + nextDayVisitText;

			}

			/*
			 * Generating query 3
			 */
			String fetchDetailQuery3 = QueryMaker.RETRIEVE_CLINIC_REG_NO_BY_CLINIC_ID;

			preparedStatement3 = connection.prepareStatement(fetchDetailQuery3);
			preparedStatement3.setInt(1, clinicID);
			preparedStatement3.setInt(2, patientID);
			resultSet3 = preparedStatement3.executeQuery();

			while (resultSet3.next()) {
				ClinicRegNo = resultSet3.getString("regNumber");
			}

			/*
			 * Generate the queries to fetch details
			 */
			String fetchDetailQuery4 = QueryMaker.RETRIEVE_PRESENTCOMPLAINTS;

			preparedStatement = connection.prepareStatement(fetchDetailQuery4);
			preparedStatement.setInt(1, visitID);
			resultSet = preparedStatement.executeQuery();

			String fetchDetailQuery5 = QueryMaker.RETRIEVE_PATIENT_VITALS_FOR_EXISTTING_VISIT;

			preparedStatement4 = connection.prepareStatement(fetchDetailQuery5);
			preparedStatement4.setInt(1, visitID);
			resultSet4 = preparedStatement4.executeQuery();

			String fetchDetailQuery6 = QueryMaker.RETRIEVE_SIGNIFICANT_FINDINGS_DETAILS_FOR_EXISTING_PATIENT;

			preparedStatement5 = connection.prepareStatement(fetchDetailQuery6);
			preparedStatement5.setInt(1, visitID);
			preparedStatement5.setString(2, "Significant Findings");
			resultSet5 = preparedStatement5.executeQuery();

			String otherInsuranceList = "Medi Assist,DHS,Start Health,MD India,Religare,Universal Sampo,TIK - Sigma";
			String otherCompanyList = ("JSW,Jhonson");

			String categoryList = patientDAOInf.retrieveCategoryListOfLastVisit(visitID);
			String[] categoryVal = categoryList.split(",");

			String categoryVal1 = "";
			String categoryVal2 = "";

			if (categoryVal.length == 1) {
				categoryVal1 = categoryVal[0];
				categoryVal2 = "";

			} else {
				if (categoryList.contains("Other")) {
					System.out.println("inside else other");
					if (otherInsuranceList.contains(categoryVal[1])) {
						categoryVal1 = "Insurance";
						categoryVal2 = categoryVal[1];

					} else if (otherCompanyList.contains(categoryVal[1])) {
						categoryVal1 = "Company";
						categoryVal2 = categoryVal[1];
					}
				} else {

					System.out.println("inside else");
					categoryVal1 = categoryVal[0];
					categoryVal2 = categoryVal[1];
				}
			}

			MedicalHistory = patientDAOInf.retrievemedicalHistoryListOfLastVisit(patientForm, patientID);

			FamilyHistory = patientDAOInf.retrieveFamilyHistoryListOfLastVisit(patientForm, patientID);

			PersonalHistory = patientDAOInf.retrievePersonalHistoryListOfLastVisit(patientForm, patientID);

			onEaminationList = patientDAOInf.retrieveOnExaminationListByVisitID(visitID);

			/*
			 * Image path for posterior segment images
			 */
			String posteriorODImage = realPath + File.separator + "images" + File.separator + "posterio_segment.png";

			String posteriorOSImage = realPath + File.separator + "images" + File.separator + "posterio_segment_1.png";

			/*
			 * Getting image path from XML
			 */
			String A5ImagePath = configXMLUtil.getLetterHeadImage();

			/*
			 * Getting page size from XMl
			 */
			String pageSize = "A4";

			/*
			 * Setting path to store PDF file
			 */
			File file = new File(realPath + "/" + pdfOutFIleName);
			/*
			 * Creating Document for PDF
			 */
			Document document = null;

			/*
			 * Checking whether pageSize tag in XMl contains A5 or A4, according to that
			 * setting PDF page size
			 */
			if (pageSize.equals("A5")) {
				document = new Document(PageSize.A5);
			} else if (pageSize.equals("A4")) {
				document = new Document(PageSize.A4);
			}

			PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(file));

			Font Font1 = new Font(Font.FontFamily.TIMES_ROMAN, 10, Font.NORMAL);
			Font Font3 = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.NORMAL);
			Font Font2 = new Font(Font.FontFamily.TIMES_ROMAN, 8, Font.NORMAL);
			Font Font4 = new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.BOLD);
			Font Font5 = new Font(Font.FontFamily.TIMES_ROMAN, 10, Font.BOLD);
			Font mainContent = new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.NORMAL);
			Font mainContent1 = new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.NORMAL);
			mainContent1.setColor(BaseColor.GRAY);
			/*
			 * Defining marathi font
			 */
			Font marathiFont = FontFactory.getFont(marathiFontDir, BaseFont.IDENTITY_H, BaseFont.EMBEDDED);

			document.open();

			/*
			 * Adding image
			 */
			PdfContentByte canvas = writer.getDirectContentUnder();

			/*
			 * Checking whether pageSize is A4 or A5, according to that background image is
			 * being set
			 */
			Image image;

			if (pageSize.equals("A5")) {
				if (A5ImagePath == null || A5ImagePath == "") {

					image = null;

				} else {

					if (A5ImagePath.isEmpty()) {
						image = null;
					} else {

						S3ObjectInputStream s3ObjectInputStream = s3
								.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, A5ImagePath))
								.getObjectContent();

						IOUtils.copy(s3ObjectInputStream,
								new FileOutputStream(new File(realPath + "images/" + A5ImagePath)));

						image = Image.getInstance(realPath + "images/" + A5ImagePath);

						image.scaleToFit(PageSize.A5.getWidth(), PageSize.A5.getHeight());

						image.setAbsolutePosition(0, 0);

						canvas.saveState();
						PdfGState state = new PdfGState();
						canvas.setGState(state);
						canvas.addImage(image);
						canvas.restoreState();
					}

				}
			} else if (pageSize.equals("A4")) {
				if (A5ImagePath == null || A5ImagePath == "") {

					image = null;

				} else {

					if (A5ImagePath.isEmpty()) {
						image = null;
					} else {

						S3ObjectInputStream s3ObjectInputStream = s3
								.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, A5ImagePath))
								.getObjectContent();

						IOUtils.copy(s3ObjectInputStream,
								new FileOutputStream(new File(realPath + "images/" + A5ImagePath)));

						image = Image.getInstance(realPath + "images/" + A5ImagePath);

						image.scaleToFit(PageSize.A4.getWidth(), PageSize.A4.getHeight());

						image.setAbsolutePosition(0, 0);

						canvas.saveState();
						PdfGState state = new PdfGState();
						canvas.setGState(state);
						canvas.addImage(image);
						canvas.restoreState();
					}

				}
			}

			Image image1 = Image.getInstance(posteriorODImage);

			Image image2 = Image.getInstance(posteriorOSImage);

			/*
			 * Setting header
			 */
			document.addCreator("eDhanvantari");
			document.addTitle("OPD Visit");

			/*
			 * For displaying patient personal details
			 */
			while (resultSet1.next()) {
				PdfPTable table = new PdfPTable(4);

				table.setFooterRows(1);
				table.setWidthPercentage(100);
				Rectangle rect = new Rectangle(270, 700);
				table.setWidthPercentage(new float[] { 75, 75, 75, 75 }, rect);

				PdfPCell cell = new PdfPCell(new Paragraph("Patient Details", Font5));
				cell.setPaddingTop(120);
				cell.setPaddingBottom(10);
				cell.setHorizontalAlignment(Element.ALIGN_CENTER);
				cell.setUseBorderPadding(true);
				cell.setColspan(4);
				cell.setBorderWidthBottom(1f);
				cell.setBorderColorBottom(BaseColor.DARK_GRAY);
				cell.setBorderColor(BaseColor.WHITE);

				/*
				 * For Patient Name
				 */
				PdfPCell cell2 = new PdfPCell(new Paragraph("Patient Name", mainContent));
				cell2.setBorderWidth(0.01f);
				cell2.setPaddingBottom(5);
				cell2.setBorderWidthLeft(0.2f);
				cell2.setBorderColor(BaseColor.WHITE);

				String fullName = resultSet1.getString("firstName") + " " + resultSet1.getString("middleName") + " "
						+ resultSet1.getString("lastName") + " (" + resultSet1.getInt("id") + ")";

				PdfPCell cell3 = new PdfPCell(new Paragraph(fullName, mainContent));
				cell3.setBorderWidth(0.2f);
				cell3.setPaddingBottom(5);
				cell3.setBorderColor(BaseColor.WHITE);

				/*
				 * For Date
				 */

				PdfPCell cell4 = new PdfPCell(new Paragraph("Date", mainContent));
				cell4.setBorderWidth(0.01f);
				cell4.setPaddingBottom(5);
				cell4.setBorderWidthLeft(0.2f);
				cell4.setBorderColor(BaseColor.WHITE);

				PdfPCell cell5 = new PdfPCell(new Paragraph(visitDate, mainContent));
				cell5.setBorderWidth(0.2f);
				cell5.setPaddingBottom(5);
				cell5.setBorderColor(BaseColor.WHITE);

				/*
				 * For Age
				 */
				PdfPCell cell6 = new PdfPCell(new Paragraph("Age", mainContent));
				cell6.setBorderWidth(0.01f);
				cell6.setPaddingBottom(5);
				cell6.setBorderWidthLeft(0.2f);
				cell6.setBorderColor(BaseColor.WHITE);

				PdfPCell cell7 = new PdfPCell(new Paragraph(resultSet1.getString("age"), mainContent));
				cell7.setBorderWidth(0.2f);
				cell7.setPaddingBottom(5);
				cell7.setBorderColor(BaseColor.WHITE);

				/*
				 * For Diagnosis
				 */
				PdfPCell cell8 = new PdfPCell(new Paragraph("Gender", mainContent));
				cell8.setBorderWidth(0.01f);
				cell8.setPaddingBottom(5);
				cell8.setBorderWidthLeft(0.2f);
				cell8.setBorderColor(BaseColor.WHITE);

				PdfPCell cell9 = new PdfPCell(new Paragraph(resultSet1.getString("gender"), mainContent));
				cell9.setBorderWidth(0.2f);
				cell9.setPaddingBottom(2);
				cell9.setBorderColor(BaseColor.WHITE);

				/*
				 * For Diagnosis
				 */
				PdfPCell cell10 = new PdfPCell(new Paragraph("Address", mainContent));
				cell10.setBorderWidth(0.01f);
				cell10.setPaddingBottom(5);
				cell10.setBorderWidthLeft(0.2f);
				cell10.setBorderColor(BaseColor.WHITE);

				PdfPCell cell11 = new PdfPCell(new Paragraph(resultSet1.getString("address"), mainContent));
				cell11.setBorderWidth(0.2f);
				cell11.setPaddingBottom(2);
				cell11.setBorderColor(BaseColor.WHITE);

				/*
				 * For Visit Type
				 */
				PdfPCell cell12 = new PdfPCell(new Paragraph("Phone Number", mainContent));
				cell12.setBorderWidth(0.01f);
				cell12.setPaddingBottom(5);
				cell12.setBorderWidthLeft(0.2f);
				cell12.setBorderColor(BaseColor.WHITE);
				cell12.setBorderWidthLeft(0.0f);
				cell12.setBorderWidthTop(0.0f);
				cell12.setBorderColorBottom(BaseColor.WHITE);

				PdfPCell cell13 = new PdfPCell(new Paragraph(resultSet1.getString("mobile"), mainContent));
				cell13.setBorderWidth(0.2f);
				cell13.setPaddingBottom(2);
				cell13.setBorderColor(BaseColor.WHITE);
				cell13.setBorderWidthLeft(0.0f);
				cell13.setBorderWidthTop(0.0f);
				cell13.setBorderColorBottom(BaseColor.WHITE);

				/*
				 * For Comment
				 */
				PdfPCell cell14 = new PdfPCell(new Paragraph("Alternate Number:", mainContent));
				cell14.setBorderWidth(0.01f);
				cell14.setPaddingBottom(5);
				cell14.setBorderWidthLeft(0.2f);
				cell14.setBorderColor(BaseColor.WHITE);
				cell14.setBorderWidthLeft(0.0f);
				cell14.setBorderWidthTop(0.0f);
				cell14.setBorderColorBottom(BaseColor.WHITE);

				PdfPCell cell15 = new PdfPCell(new Paragraph(resultSet1.getString("phone"), mainContent));
				cell15.setBorderWidth(0.2f);
				cell15.setColspan(3);
				cell15.setPaddingBottom(2);
				cell15.setBorderColor(BaseColor.WHITE);
				cell15.setBorderWidthLeft(0.0f);
				cell15.setBorderWidthTop(0.0f);
				cell15.setBorderWidthBottom(1f);
				cell15.setBorderColorBottom(BaseColor.WHITE);

				/*
				 * For Occupation
				 */
				PdfPCell cell16 = new PdfPCell(new Paragraph("Occupation", mainContent));
				cell16.setBorderWidth(0.01f);
				cell16.setPaddingBottom(5);
				cell16.setBorderWidthLeft(0.2f);
				cell16.setBorderColor(BaseColor.WHITE);

				PdfPCell cell17 = new PdfPCell(new Paragraph(resultSet1.getString("occupation"), mainContent));
				cell17.setBorderWidth(0.2f);
				cell17.setPaddingBottom(5);
				cell17.setBorderColor(BaseColor.WHITE);
				/*
				 * adding all cell to the table to create tabular structure
				 */

				table.addCell(cell);
				// table.addCell(cell1);
				table.addCell(cell2);
				table.addCell(cell3);
				table.addCell(cell4);
				table.addCell(cell5);
				table.addCell(cell6);
				table.addCell(cell7);
				table.addCell(cell8);
				table.addCell(cell9);
				table.addCell(cell10);
				table.addCell(cell11);
				table.addCell(cell12);
				table.addCell(cell13);
				table.addCell(cell14);
				table.addCell(cell15);
				table.addCell(cell16);
				table.addCell(cell17);

				document.add(table);
			}

			/*
			 * for OPD Opthalmology Form
			 */
			PdfPTable table2 = new PdfPTable(3);
			table2.setWidthPercentage(100);
			Rectangle rect = new Rectangle(270, 700);
			table2.setWidthPercentage(new float[] { 100, 100, 100 }, rect);

			/*
			 * Creating Table header
			 */

			// For blank space
			PdfPCell cell = new PdfPCell(new Paragraph(
					"                                                                                               "
							+ "                                                                                                                            "
							+ "                                                                                                                              ",
					Font2));
			cell.setColspan(3);
			cell.setBorderWidthRight(0f);
			cell.setBorderWidthLeft(0f);
			cell.setBorderWidthTop(0f);
			cell.setBorderWidthBottom(0f);
			cell.setBorderColorTop(BaseColor.WHITE);

			// for Title
			PdfPCell cell0 = new PdfPCell(new Paragraph("GeneralHospital Hospital OPD Form", Font5));
			cell0.setPaddingTop(15);
			cell0.setPaddingBottom(10);
			cell0.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell0.setUseBorderPadding(true);
			cell0.setColspan(3);
			cell0.setBorderWidthRight(0.1f);
			cell0.setBorderWidthLeft(0.1f);
			cell0.setBorderWidthTop(0.1f);
			cell0.setBorderWidthBottom(1f);
			cell0.setBorderColorBottom(BaseColor.DARK_GRAY);
			cell0.setBorderColor(BaseColor.WHITE);

			// Gene
			PdfPCell cell1 = new PdfPCell(new Paragraph("Medical Reg. No.: " + ClinicRegNo, Font4));

			cell1.setBorderWidth(0.01f);
			cell1.setPaddingBottom(5);
			cell1.setPaddingTop(5);
			cell1.setBorderColor(BaseColor.WHITE);

			// OD RE
			PdfPCell cell2 = new PdfPCell(new Paragraph("Visit Date (DD/MM/YYYY): " + visitDate, Font4));

			cell2.setBorderWidth(0.01f);
			cell2.setPaddingBottom(5);
			cell2.setPaddingTop(5);
			cell2.setBorderColor(BaseColor.WHITE);

			PdfPCell cell02 = new PdfPCell(new Paragraph("Category: " + categoryVal1 + " :- " + categoryVal2, Font4));
			cell02.setBorderWidth(0.01f);
			cell02.setPaddingBottom(5);
			cell02.setPaddingTop(5);
			cell02.setBorderColor(BaseColor.WHITE);

			PdfPCell cell4 = new PdfPCell(new Paragraph(
					"                                                                                               "
							+ "                                                                                                                            "
							+ "                                                                                                                              ",
					Font2));
			cell4.setColspan(3);
			cell4.setBorderWidthRight(0f);
			cell4.setBorderWidthLeft(0f);
			cell4.setBorderWidthTop(0f);
			cell4.setBorderWidthBottom(1f);
			cell4.setBorderColorBottom(BaseColor.LIGHT_GRAY);

			PdfPCell cell15 = new PdfPCell(new Paragraph("Past History: ", Font4));
			cell15.setBorderWidth(0.01f);
			cell15.setPaddingBottom(5);
			cell15.setPaddingTop(5);
			cell15.setBorderColor(BaseColor.WHITE);

			table2.addCell(cell);
			table2.addCell(cell0);
			table2.addCell(cell1);
			table2.addCell(cell2);
			table2.addCell(cell02);
			table2.addCell(cell4);
			table2.addCell(cell15);

			for (PatientForm form1 : MedicalHistory) {

				if (form1.getDiabetesMellitus() == null) {
					System.out.println("DM Null");
				} else {

					if (form1.getDiabetesMellitus().equals("Yes")) {
						PdfPCell cell16 = new PdfPCell(new Paragraph("DM: " + form1.getDiabetesMellitusDuration() + "("
								+ form1.getDiabetesMellitusDesc() + ")", Font4));
						cell16.setBorderWidth(0.01f);
						cell16.setPaddingBottom(5);
						cell16.setPaddingTop(5);
						cell16.setBorderColor(BaseColor.WHITE);
						table2.addCell(cell16);
					}
				}

				if (form1.getHypertension() == null) {
					System.out.println("HTN Null");
				} else {

					if (form1.getHypertension().equals("Yes")) {
						PdfPCell cell17 = new PdfPCell(new Paragraph("Duration: " + form1.getHypertensionDuration()
								+ "(" + form1.getHypertensionDesc() + ")", Font4));
						cell17.setBorderWidth(0.01f);
						cell17.setPaddingBottom(5);
						cell17.setPaddingTop(5);
						cell17.setBorderColor(BaseColor.WHITE);
						table2.addCell(cell17);
					}
				}

				if (form1.getAsthema() == null) {
					System.out.println("Asthema Null");
				} else {

					if (form1.getAsthema().equals("Yes")) {
						PdfPCell cell18 = new PdfPCell(new Paragraph(
								"Asthema: " + form1.getAsthemaDuration() + "(" + form1.getAsthemaDesc() + ")", Font4));
						cell18.setBorderWidth(0.01f);
						cell18.setPaddingBottom(5);
						cell18.setPaddingTop(5);
						cell18.setBorderColor(BaseColor.WHITE);
						table2.addCell(cell18);
					}
				}

				if (form1.getIschemicHeartDisease() == null) {
					System.out.println("IHD Null");
				} else {

					if (form1.getIschemicHeartDisease().equals("Yes")) {
						PdfPCell cell19 = new PdfPCell(new Paragraph("IHD: " + form1.getIschemicHeartDiseaseDuration()
								+ "(" + form1.getIschemicHeartDiseaseDesc() + ")", Font4));
						cell19.setBorderWidth(0.01f);
						cell19.setPaddingBottom(5);
						cell19.setPaddingTop(5);
						cell19.setBorderColor(BaseColor.WHITE);
						table2.addCell(cell19);
					}
				}

				if (form1.getAllergies() == null) {
					System.out.println("Allergies Null");
				} else {

					if (form1.getAllergies().equals("Yes")) {
						PdfPCell cell20 = new PdfPCell(new Paragraph(
								"Allergies: " + form1.getAllergiesDuration() + "(" + form1.getAllergiesDesc() + ")",
								Font4));
						cell20.setBorderWidth(0.01f);
						cell20.setPaddingBottom(5);
						cell20.setPaddingTop(5);
						cell20.setBorderColor(BaseColor.WHITE);
						table2.addCell(cell20);
					}
				}

				if (form1.getSurgicalHistory() == null) {
					System.out.println("Surgical History Null");
				} else {

					if (form1.getSurgicalHistory().equals("Yes")) {
						PdfPCell cell21 = new PdfPCell(
								new Paragraph("Surgical History: " + form1.getSurgicalHistoryDuration() + "("
										+ form1.getSurgicalHistoryDesc() + ")", Font4));
						cell21.setBorderWidth(0.01f);
						cell21.setPaddingBottom(5);
						cell21.setPaddingTop(5);
						cell21.setBorderColor(BaseColor.WHITE);
						table2.addCell(cell21);
					}
				}

				if (form1.getGynecologyHistory() == null) {
					System.out.println("Gynecology History Null");
				} else {

					if (form1.getGynecologyHistory().equals("Yes")) {
						PdfPCell cell21 = new PdfPCell(
								new Paragraph("Gynecology History: " + form1.getGynecologyHistoryDuration() + "("
										+ form1.getGynecologyHistoryDesc() + ")", Font4));
						cell21.setBorderWidth(0.01f);
						cell21.setPaddingBottom(5);
						cell21.setPaddingTop(5);
						cell21.setBorderColor(BaseColor.WHITE);
						table2.addCell(cell21);
					}
				}
			}

			PdfPCell cell22 = new PdfPCell(new Paragraph("Family History: ", Font4));
			cell22.setBorderWidth(0.01f);
			cell22.setPaddingBottom(5);
			cell22.setPaddingTop(5);
			cell22.setBorderColor(BaseColor.WHITE);
			table2.addCell(cell22);

			for (PatientForm form1 : FamilyHistory) {

				if (form1.getFamHistDiabetesMellitus() == null) {
					System.out.println("Dm Family Null");
				} else {

					if (form1.getFamHistDiabetesMellitus().equals("Yes")) {
						PdfPCell cell23 = new PdfPCell(new Paragraph("DM: " + form1.getFamHistDiabetesMellitusDuration()
								+ "(" + form1.getFamHistDiabetesMellitusDesc() + ")", Font4));
						cell23.setBorderWidth(0.01f);
						cell23.setPaddingBottom(5);
						cell23.setPaddingTop(5);
						cell23.setBorderColor(BaseColor.WHITE);
						table2.addCell(cell23);
					}
				}

				if (form1.getFamHistHypertension() == null) {
					System.out.println("HTN Family Null");
				} else {

					if (form1.getFamHistHypertension().equals("Yes")) {
						PdfPCell cell24 = new PdfPCell(new Paragraph("HTN: " + form1.getFamHistHypertensionDuration()
								+ "(" + form1.getFamHistHypertensionDesc() + ")", Font4));
						cell24.setBorderWidth(0.01f);
						cell24.setPaddingBottom(5);
						cell24.setPaddingTop(5);
						cell24.setBorderColor(BaseColor.WHITE);
						table2.addCell(cell24);
					}
				}

				if (form1.getFamHistAsthema() == null) {
					System.out.println("Asthema Family Null");
				} else {

					if (form1.getFamHistAsthema().equals("Yes")) {
						PdfPCell cell25 = new PdfPCell(new Paragraph("Asthema: " + form1.getFamHistAsthemaDuration()
								+ "(" + form1.getFamHistAsthemaDesc() + ")", Font4));
						cell25.setBorderWidth(0.01f);
						cell25.setPaddingBottom(5);
						cell25.setPaddingTop(5);
						cell25.setBorderColor(BaseColor.WHITE);
						table2.addCell(cell25);
					}
				}

				if (form1.getFamHistAllergies() == null) {
					System.out.println("Allergies Family Null");
				} else {

					if (form1.getFamHistAllergies().equals("Yes")) {
						PdfPCell cell26 = new PdfPCell(new Paragraph("Allergies: " + form1.getFamHistAllergiesDuration()
								+ "(" + form1.getFamHistAllergiesDesc() + ")", Font4));
						cell26.setBorderWidth(0.01f);
						cell26.setPaddingBottom(5);
						cell26.setPaddingTop(5);
						cell26.setBorderColor(BaseColor.WHITE);
						table2.addCell(cell26);
					}
				}
			}

			PdfPCell cell27 = new PdfPCell(new Paragraph("Habbits: ", Font4));
			cell27.setBorderWidth(0.01f);
			cell27.setPaddingBottom(5);
			cell27.setPaddingTop(5);
			cell27.setBorderColor(BaseColor.WHITE);
			table2.addCell(cell27);

			for (PatientForm form1 : PersonalHistory) {

				if (form1.getPersonalHistorySmoking() == null) {
					System.out.println("Somking Null");
				} else {

					if (form1.getPersonalHistorySmoking().equals("Yes")) {
						PdfPCell cell28 = new PdfPCell(new Paragraph("Somking: " + form1.getSmokingDuration() + "("
								+ form1.getPersonalHistorySmokingDetails() + ")", Font4));
						cell28.setBorderWidth(0.01f);
						cell28.setPaddingBottom(5);
						cell28.setPaddingTop(5);
						cell28.setBorderColor(BaseColor.WHITE);
						table2.addCell(cell28);
					}
				}

				if (form1.getAlcohol() == null) {
					System.out.println("Alcohol Null");
				} else {

					if (form1.getAlcohol().equals("Yes")) {
						PdfPCell cell29 = new PdfPCell(new Paragraph(
								"Alcohol: " + form1.getAlcoholDuration() + "(" + form1.getAlcoholDesc() + ")", Font4));
						cell29.setBorderWidth(0.01f);
						cell29.setPaddingBottom(5);
						cell29.setPaddingTop(5);
						cell29.setBorderColor(BaseColor.WHITE);
						table2.addCell(cell29);
					}
				}

				if (form1.getMishari() == null) {
					System.out.println("Mishari Null");
				} else {

					if (form1.getMishari().equals("Yes")) {
						PdfPCell cell30 = new PdfPCell(new Paragraph(
								"Mishari: " + form1.getMishariDuration() + "(" + form1.getMishariDesc() + ")", Font4));
						cell30.setBorderWidth(0.01f);
						cell30.setPaddingBottom(5);
						cell30.setPaddingTop(5);
						cell30.setBorderColor(BaseColor.WHITE);
						table2.addCell(cell30);
					}
				}

				if (form1.getTobacco() == null) {
					System.out.println("Tobacco Null");
				} else {

					if (form1.getTobacco().equals("Yes")) {
						PdfPCell cell31 = new PdfPCell(new Paragraph(
								"Tobacco: " + form1.getTobaccoDuration() + "(" + form1.getTobaccoDesc() + ")", Font4));
						cell31.setBorderWidth(0.01f);
						cell31.setPaddingBottom(5);
						cell31.setPaddingTop(5);
						cell31.setBorderColor(BaseColor.WHITE);
						table2.addCell(cell31);
					}
				}
			}

			while (resultSet.next()) {
				PdfPCell cell32 = new PdfPCell(
						new Paragraph("Present Complaints: " + resultSet.getString("complaints"), Font4));
				cell32.setBorderWidth(0.01f);
				cell32.setPaddingBottom(5);
				cell32.setPaddingTop(5);
				cell32.setBorderColor(BaseColor.WHITE);
				table2.addCell(cell32);
			}

			while (resultSet4.next()) {
				PdfPCell cell33 = new PdfPCell(new Paragraph("Height: " + resultSet4.getDouble("height") + "    "
						+ "Weight:" + resultSet4.getDouble("weight") + "    " + "Pulse: " + resultSet4.getInt("pulse")
						+ "    " + "B.P.:" + resultSet4.getInt("systolicBP") + "-" + resultSet4.getInt("diastolicBP"),
						Font4));
				cell33.setBorderWidth(0.01f);
				cell33.setPaddingBottom(5);
				cell33.setPaddingTop(5);
				cell33.setBorderColor(BaseColor.WHITE);
				table2.addCell(cell33);

				PdfPCell cell34 = new PdfPCell(new Paragraph("Temp.: " + resultSet4.getDouble("temperature") + "    "
						+ "Respiration:" + resultSet4.getDouble("respiration") + "    " + "Pallor: "
						+ resultSet4.getString("pallor") + "    " + "Icterus:" + resultSet4.getString("Icterus"),
						Font4));
				cell34.setBorderWidth(0.01f);
				cell34.setPaddingBottom(5);
				cell34.setPaddingTop(5);
				cell34.setBorderColor(BaseColor.WHITE);
				table2.addCell(cell34);

				PdfPCell cell35 = new PdfPCell(
						new Paragraph("Abdominal Circumference: " + resultSet4.getDouble("abdominalCircumference")
								+ "    " + "BMI:" + resultSet4.getDouble("bmi"), Font4));
				cell35.setBorderWidth(0.01f);
				cell35.setPaddingBottom(5);
				cell35.setPaddingTop(5);
				cell35.setBorderColor(BaseColor.WHITE);
				table2.addCell(cell34);
			}
			document.add(table2);

			String Value, Value1, Value2 = "";

			/*
			 * for OPD Opthalmology Form
			 */
			PdfPTable table3 = new PdfPTable(3);
			table3.setWidthPercentage(100);
			Rectangle rect1 = new Rectangle(270, 700);
			table3.setWidthPercentage(new float[] { 100, 100, 100 }, rect1);

			for (PatientForm form1 : onEaminationList) {

				PdfPCell cell36 = new PdfPCell(new Paragraph("RS: ", Font4));
				cell36.setBorderWidth(0.01f);
				cell36.setPaddingBottom(5);
				cell36.setPaddingTop(5);
				cell36.setBorderColor(BaseColor.WHITE);
				table3.addCell(cell36);

				if (form1.getRsPhonchi() == null) {
					System.out.println("Rhonchi Null");
				} else {

					if (form1.getRsPhonchi().equals("Yes")) {
						Value = "Rhonchi";
						PdfPCell cell37 = new PdfPCell(new Paragraph(Value, Font4));

						cell37.setBorderWidth(0.01f);
						cell37.setPaddingBottom(5);
						cell37.setPaddingTop(5);
						cell37.setBorderColor(BaseColor.WHITE);
						table3.addCell(cell37);
					}
				}

				if (form1.getRsCrepitation() == null) {
					System.out.println("Crepitation Null");
				} else {

					if (form1.getRsCrepitation().equals("Yes")) {
						Value1 = "Crepitation";
						PdfPCell cell38 = new PdfPCell(new Paragraph(Value1, Font4));

						cell38.setBorderWidth(0.01f);
						cell38.setPaddingBottom(5);
						cell38.setPaddingTop(5);
						cell38.setBorderColor(BaseColor.WHITE);
						table2.addCell(cell38);
					}
				}

				if (form1.getRsClear() == null) {
					System.out.println("Clear Null");
				} else {

					if (form1.getRsClear().equals("Yes")) {
						Value2 = "Clear";
						PdfPCell cell39 = new PdfPCell(new Paragraph(Value2, Font4));

						cell39.setBorderWidth(0.01f);
						cell39.setPaddingBottom(5);
						cell39.setPaddingTop(5);
						cell39.setBorderColor(BaseColor.WHITE);
						table2.addCell(cell39);
					}
				}

				PdfPCell cell40 = new PdfPCell(new Paragraph("CVS: ", Font4));
				cell40.setBorderWidth(0.01f);
				cell40.setPaddingBottom(5);
				cell40.setPaddingTop(5);
				cell40.setBorderColor(BaseColor.WHITE);
				table3.addCell(cell40);

				if (form1.getS1s2() == null) {
					System.out.println("S1S2 Null");
				} else {

					if (form1.getS1s2().equals("Yes")) {

						PdfPCell cell41 = new PdfPCell(new Paragraph("S1S2", Font4));

						cell41.setBorderWidth(0.01f);
						cell41.setPaddingBottom(5);
						cell41.setPaddingTop(5);
						cell41.setBorderColor(BaseColor.WHITE);
						table3.addCell(cell41);
					}
				}

				if (form1.getMurmur() == null) {
					System.out.println("Murmur Null");
				} else {

					if (form1.getMurmur().equals("Yes")) {

						PdfPCell cell42 = new PdfPCell(
								new Paragraph("Murmur: " + form1.getMurmurSys() + " " + form1.getMurmurDia(), Font4));

						cell42.setBorderWidth(0.01f);
						cell42.setPaddingBottom(5);
						cell42.setPaddingTop(5);
						cell42.setBorderColor(BaseColor.WHITE);
						table3.addCell(cell42);
					}
				}

				if (form1.getWnl() == null) {
					System.out.println("WNL Null");
				} else {

					if (form1.getWnl().equals("Yes")) {

						PdfPCell cell43 = new PdfPCell(new Paragraph("WNL", Font4));

						cell43.setBorderWidth(0.01f);
						cell43.setPaddingBottom(5);
						cell43.setPaddingTop(5);
						cell43.setBorderColor(BaseColor.WHITE);
						table3.addCell(cell43);
					}
				}

				PdfPCell cell44 = new PdfPCell(new Paragraph("CNS: ", Font4));
				cell44.setBorderWidth(0.01f);
				cell44.setPaddingBottom(5);
				cell44.setPaddingTop(5);
				cell44.setBorderColor(BaseColor.WHITE);
				table3.addCell(cell44);

				if (form1.getCnsWNL() == null) {
					System.out.println("CNS WNL Null");
				} else {

					if (form1.getCnsWNL().equals("Yes")) {

						PdfPCell cell45 = new PdfPCell(new Paragraph("WNL", Font4));

						cell45.setBorderWidth(0.01f);
						cell45.setPaddingBottom(5);
						cell45.setPaddingTop(5);
						cell45.setBorderColor(BaseColor.WHITE);
						table3.addCell(cell45);
					}
				}

				if (form1.getCnsOther() == null) {
					System.out.println("CNS Other Null");
				} else {

					if (form1.getCnsOther().equals("Yes")) {

						PdfPCell cell46 = new PdfPCell(new Paragraph("Other: " + form1.getCnsOther(), Font4));

						cell46.setBorderWidth(0.01f);
						cell46.setPaddingBottom(5);
						cell46.setPaddingTop(5);
						cell46.setBorderColor(BaseColor.WHITE);
						table3.addCell(cell46);
					}
				}

				PdfPCell cell47 = new PdfPCell(new Paragraph("Abdomen: ", Font4));
				cell47.setBorderWidth(0.01f);
				cell47.setPaddingBottom(5);
				cell47.setPaddingTop(5);
				cell47.setBorderColor(BaseColor.WHITE);
				table3.addCell(cell47);

				if (form1.getAbdomen() == null) {
					System.out.println("Abdomen Null");
				} else {

					if (form1.getAbdomen().equals("Hepatomegaly")) {

						PdfPCell cell48 = new PdfPCell(new Paragraph("Hepatomegaly", Font4));

						cell48.setBorderWidth(0.01f);
						cell48.setPaddingBottom(5);
						cell48.setPaddingTop(5);
						cell48.setBorderColor(BaseColor.WHITE);
						table3.addCell(cell48);

						if (form1.getRightHypochondriac() == null) {
							System.out.println("Right Hypochondriac Null");
						} else {
							if (form1.getRightHypochondriac().equals("Yes")) {
								PdfPCell cell49 = new PdfPCell(new Paragraph("Right Hypochondriac", Font4));

								cell49.setBorderWidth(0.01f);
								cell49.setPaddingBottom(5);
								cell49.setPaddingTop(5);
								cell49.setBorderColor(BaseColor.WHITE);
								table3.addCell(cell49);
							}
						}

						if (form1.getEpigastric() == null) {
							System.out.println("Epigastric Null");
						} else {
							if (form1.getEpigastric().equals("Yes")) {
								PdfPCell cell50 = new PdfPCell(new Paragraph("Epigastric", Font4));

								cell50.setBorderWidth(0.01f);
								cell50.setPaddingBottom(5);
								cell50.setPaddingTop(5);
								cell50.setBorderColor(BaseColor.WHITE);
								table3.addCell(cell50);
							}
						}

						if (form1.getLeftHypochondriac() == null) {
							System.out.println("Left Hypochondriac Null");
						} else {
							if (form1.getLeftHypochondriac().equals("Yes")) {
								PdfPCell cell51 = new PdfPCell(new Paragraph("Left Hypochondriac", Font4));

								cell51.setBorderWidth(0.01f);
								cell51.setPaddingBottom(5);
								cell51.setPaddingTop(5);
								cell51.setBorderColor(BaseColor.WHITE);
								table3.addCell(cell51);
							}
						}

						if (form1.getRightLumbar() == null) {
							System.out.println("Right Lumbar Null");
						} else {
							if (form1.getRightLumbar().equals("Yes")) {
								PdfPCell cell52 = new PdfPCell(new Paragraph("Right Lumbar", Font4));

								cell52.setBorderWidth(0.01f);
								cell52.setPaddingBottom(5);
								cell52.setPaddingTop(5);
								cell52.setBorderColor(BaseColor.WHITE);
								table3.addCell(cell52);
							}
						}

						if (form1.getUmbilical() == null) {
							System.out.println("Umbilical Null");
						} else {
							if (form1.getUmbilical().equals("Yes")) {
								PdfPCell cell53 = new PdfPCell(new Paragraph("Umbilical", Font4));

								cell53.setBorderWidth(0.01f);
								cell53.setPaddingBottom(5);
								cell53.setPaddingTop(5);
								cell53.setBorderColor(BaseColor.WHITE);
								table3.addCell(cell53);
							}
						}

						if (form1.getLeftLumbar() == null) {
							System.out.println("Left Lumbar Null");
						} else {
							if (form1.getLeftLumbar().equals("Yes")) {
								PdfPCell cell54 = new PdfPCell(new Paragraph("Left Lumbar", Font4));

								cell54.setBorderWidth(0.01f);
								cell54.setPaddingBottom(5);
								cell54.setPaddingTop(5);
								cell54.setBorderColor(BaseColor.WHITE);
								table3.addCell(cell54);
							}
						}

						if (form1.getRightIliac() == null) {
							System.out.println("Right Iliac Null");
						} else {
							if (form1.getRightIliac().equals("Yes")) {
								PdfPCell cell55 = new PdfPCell(new Paragraph("Right Iliac", Font4));

								cell55.setBorderWidth(0.01f);
								cell55.setPaddingBottom(5);
								cell55.setPaddingTop(5);
								cell55.setBorderColor(BaseColor.WHITE);
								table3.addCell(cell55);
							}
						}

						if (form1.getHypogastric() == null) {
							System.out.println("Hypogastric Null");
						} else {
							if (form1.getHypogastric().equals("Yes")) {
								PdfPCell cell56 = new PdfPCell(new Paragraph("Hypogastric", Font4));

								cell56.setBorderWidth(0.01f);
								cell56.setPaddingBottom(5);
								cell56.setPaddingTop(5);
								cell56.setBorderColor(BaseColor.WHITE);
								table3.addCell(cell56);
							}
						}

						if (form1.getLeftIliac() == null) {
							System.out.println("Left Iliac Null");
						} else {
							if (form1.getLeftIliac().equals("Yes")) {
								PdfPCell cell57 = new PdfPCell(new Paragraph("Left Iliac", Font4));

								cell57.setBorderWidth(0.01f);
								cell57.setPaddingBottom(5);
								cell57.setPaddingTop(5);
								cell57.setBorderColor(BaseColor.WHITE);
								table3.addCell(cell57);
							}
						}

					} else if (form1.getAbdomen().equals("Splenomegaly")) {

						PdfPCell cell48 = new PdfPCell(new Paragraph("Hepatomegaly", Font4));

						cell48.setBorderWidth(0.01f);
						cell48.setPaddingBottom(5);
						cell48.setPaddingTop(5);
						cell48.setBorderColor(BaseColor.WHITE);
						table3.addCell(cell48);

						if (form1.getRightHypochondriac() == null) {
							System.out.println("Right Hypochondriac Null");
						} else {
							if (form1.getRightHypochondriac().equals("Yes")) {
								PdfPCell cell49 = new PdfPCell(new Paragraph("Right Hypochondriac", Font4));

								cell49.setBorderWidth(0.01f);
								cell49.setPaddingBottom(5);
								cell49.setPaddingTop(5);
								cell49.setBorderColor(BaseColor.WHITE);
								table3.addCell(cell49);
							}
						}

						if (form1.getEpigastric() == null) {
							System.out.println("Epigastric Null");
						} else {
							if (form1.getEpigastric().equals("Yes")) {
								PdfPCell cell50 = new PdfPCell(new Paragraph("Epigastric", Font4));

								cell50.setBorderWidth(0.01f);
								cell50.setPaddingBottom(5);
								cell50.setPaddingTop(5);
								cell50.setBorderColor(BaseColor.WHITE);
								table3.addCell(cell50);
							}
						}

						if (form1.getLeftHypochondriac() == null) {
							System.out.println("Left Hypochondriac Null");
						} else {
							if (form1.getLeftHypochondriac().equals("Yes")) {
								PdfPCell cell51 = new PdfPCell(new Paragraph("Left Hypochondriac", Font4));

								cell51.setBorderWidth(0.01f);
								cell51.setPaddingBottom(5);
								cell51.setPaddingTop(5);
								cell51.setBorderColor(BaseColor.WHITE);
								table3.addCell(cell51);
							}
						}

						if (form1.getRightLumbar() == null) {
							System.out.println("Right Lumbar Null");
						} else {
							if (form1.getRightLumbar().equals("Yes")) {
								PdfPCell cell52 = new PdfPCell(new Paragraph("Right Lumbar", Font4));

								cell52.setBorderWidth(0.01f);
								cell52.setPaddingBottom(5);
								cell52.setPaddingTop(5);
								cell52.setBorderColor(BaseColor.WHITE);
								table3.addCell(cell52);
							}
						}

						if (form1.getUmbilical() == null) {
							System.out.println("Umbilical Null");
						} else {
							if (form1.getUmbilical().equals("Yes")) {
								PdfPCell cell53 = new PdfPCell(new Paragraph("Umbilical", Font4));

								cell53.setBorderWidth(0.01f);
								cell53.setPaddingBottom(5);
								cell53.setPaddingTop(5);
								cell53.setBorderColor(BaseColor.WHITE);
								table3.addCell(cell53);
							}
						}

						if (form1.getLeftLumbar() == null) {
							System.out.println("Left Lumbar Null");
						} else {
							if (form1.getLeftLumbar().equals("Yes")) {
								PdfPCell cell54 = new PdfPCell(new Paragraph("Left Lumbar", Font4));

								cell54.setBorderWidth(0.01f);
								cell54.setPaddingBottom(5);
								cell54.setPaddingTop(5);
								cell54.setBorderColor(BaseColor.WHITE);
								table3.addCell(cell54);
							}
						}

						if (form1.getRightIliac() == null) {
							System.out.println("Right Iliac Null");
						} else {
							if (form1.getRightIliac().equals("Yes")) {
								PdfPCell cell55 = new PdfPCell(new Paragraph("Right Iliac", Font4));

								cell55.setBorderWidth(0.01f);
								cell55.setPaddingBottom(5);
								cell55.setPaddingTop(5);
								cell55.setBorderColor(BaseColor.WHITE);
								table3.addCell(cell55);
							}
						}

						if (form1.getHypogastric() == null) {
							System.out.println("Hypogastric Null");
						} else {
							if (form1.getHypogastric().equals("Yes")) {
								PdfPCell cell56 = new PdfPCell(new Paragraph("Hypogastric", Font4));

								cell56.setBorderWidth(0.01f);
								cell56.setPaddingBottom(5);
								cell56.setPaddingTop(5);
								cell56.setBorderColor(BaseColor.WHITE);
								table3.addCell(cell56);
							}
						}

						if (form1.getLeftIliac() == null) {
							System.out.println("Left Iliac Null");
						} else {
							if (form1.getLeftIliac().equals("Yes")) {
								PdfPCell cell57 = new PdfPCell(new Paragraph("Left Iliac", Font4));

								cell57.setBorderWidth(0.01f);
								cell57.setPaddingBottom(5);
								cell57.setPaddingTop(5);
								cell57.setBorderColor(BaseColor.WHITE);
								table3.addCell(cell57);
							}
						}

					}
				}

				if (form1.getCnsOther() == null) {
					System.out.println("Cns Other Null");
				} else {

					if (form1.getCnsOther().equals("Yes")) {

						PdfPCell cell46 = new PdfPCell(new Paragraph("Other: " + form1.getCnsOther(), Font4));

						cell46.setBorderWidth(0.01f);
						cell46.setPaddingBottom(5);
						cell46.setPaddingTop(5);
						cell46.setBorderColor(BaseColor.WHITE);
						table3.addCell(cell46);
					}
				}

			}
			document.add(table3);

			PdfPTable table4 = new PdfPTable(1);
			table4.setTotalWidth(350);

			while (resultSet5.next()) {
				PdfPCell cell11110 = new PdfPCell(
						new Paragraph("Significant Findings: " + resultSet5.getString("findings"), Font4));
				cell11110.setBorderWidth(0.01f);
				cell11110.setPaddingBottom(5);
				cell11110.setPaddingTop(5);
				cell11110.setBorderColor(BaseColor.WHITE);

				table4.addCell(cell11110);
			}

			PdfPCell cell11112 = new PdfPCell(new Paragraph("Provisional Diagnosis*: " + diagnosis, Font4));
			cell11112.setBorderWidth(0.01f);
			cell11112.setPaddingBottom(5);
			cell11112.setPaddingTop(5);
			cell11112.setBorderColor(BaseColor.WHITE);

			table4.addCell(cell11112);

			document.add(table4);
			/*
			 * For signature in footer
			 */
			PdfPTable table = new PdfPTable(1);
			table.setTotalWidth(350);

			PdfPCell cell1111 = new PdfPCell(new Paragraph("Signature", mainContent1));
			cell1111.setBackgroundColor(BaseColor.WHITE);
			cell1111.setHorizontalAlignment(Element.ALIGN_RIGHT);
			cell1111.setBorderColor(BaseColor.WHITE);
			table.addCell(cell1111);

			FooterTable event = new FooterTable(table);
			writer.setPageEvent(event);

			document.close();

			System.out.println("Successfully written and generated PDF Report");

			status = "success";

			/*
			 * Closing resultSet, preparedStatement, connection objects
			 */
			resultSet3.close();
			preparedStatement3.close();

			resultSet2.close();
			preparedStatement2.close();

			resultSet1.close();
			preparedStatement1.close();

			connection.close();

		} catch (Exception exception) {
			exception.printStackTrace();
			status = "error";
		}
		return status;
	}

	public String convertGeneralHospitalPrescriptionPDF(int patientID, int visitID, String realPath, String pdfFileName,
			int clinicID, AmazonS3 s3, String s3reportFilePath, String bucketName) {

		PatientDAOInf patientDAOInf = new PatientDAOImpl();

		PrescriptionManagementDAOInf managementDAOInf = new PrescriptionManagementDAOImpl();

		List<PatientForm> InjectionPrescriptionList = null;

		List<PatientForm> TabletPrescriptionList = null;

		List<PatientForm> LiquidPrescriptionList = null;

		int count = 1;

		String status = null;

		String Days = "";

		String nextDayVisitText = "ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚ÂµÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¸ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¨ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚ÂªÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¹ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¸ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â®ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¸ ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¹ÃƒÆ’Ã¢â‚¬Â¦ÃƒÂ¢Ã¢â€šÂ¬Ã…â€œÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¨ ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â­ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¸ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â£ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡";
		String nextDayVisit = null;

		/*
		 * Declaring variable which stores the location for FreeSans.ttf file to print
		 * marathi text on pdf
		 */
		String marathiFontDir = realPath + "fonts/FreeSans.ttf";

		ConfigurationUtil configXMLUtil = new ConfigurationUtil();

		try {
			connection = getConnection();

			/*
			 * Generate the queries to fetch details
			 */
			String fetchDetailQuery1 = QueryMaker.OPD_PDF_RETRIEVE_PATIENT;

			preparedStatement = connection.prepareStatement(fetchDetailQuery1);
			preparedStatement.setInt(1, patientID);
			resultSet = preparedStatement.executeQuery();

			/*
			 * Generate the queries to fetch details
			 */
			String fetchDetailQuery4 = QueryMaker.OPD_PDF_RETRIEVE_VISIT;

			preparedStatement1 = connection.prepareStatement(fetchDetailQuery4);
			preparedStatement1.setInt(1, visitID);
			resultSet1 = preparedStatement1.executeQuery();

			/*
			 * Generate the queries to fetch details
			 */
			String fetchDetailQuery2 = QueryMaker.RETRIEVE_VITAL_SIGNS;

			preparedStatement2 = connection.prepareStatement(fetchDetailQuery2);
			preparedStatement2.setInt(1, visitID);
			resultSet2 = preparedStatement2.executeQuery();

			/*
			 * Generate the queries to fetch details
			 */
			String fetchDetailQuery3 = QueryMaker.RETRIEVE_Physiotherapy_FOR_EXISTING_PATIENT;

			preparedStatement3 = connection.prepareStatement(fetchDetailQuery3);
			preparedStatement3.setInt(1, visitID);
			preparedStatement3.setString(2, ActivityStatus.ACTIVE);
			resultSet3 = preparedStatement3.executeQuery();

			InjectionPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientID, visitID,
					"Injection");

			TabletPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientID, visitID, "Tablet");

			LiquidPrescriptionList = patientDAOInf.retrieveInjectionPrescriptionList(patientID, visitID, "Liquid");

			String InvestigationDetails = managementDAOInf.retrieveInvestigationDetailsByVisitID(visitID);

			/*
			 * Getting image path from XML
			 */
			String A5ImagePath = configXMLUtil.getLetterHeadImage();

			/*
			 * Getting page size from XMl
			 */
			String pageSize = "A4";

			/*
			 * Setting path to store PDF file
			 */
			File file = new File(realPath + "/" + pdfFileName);
			/*
			 * Creating Document for PDF
			 */
			Document document = null;

			/*
			 * Checking whether pageSize tag in XMl contains A5 or A4, according to that
			 * setting PDF page size
			 */
			if (pageSize.equals("A5")) {
				document = new Document(PageSize.A5);
			} else if (pageSize.equals("A4")) {
				document = new Document(PageSize.A4);
			}

			PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(file));

			Font Font1 = new Font(Font.FontFamily.TIMES_ROMAN, 10, Font.NORMAL);
			Font Font3 = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.NORMAL);
			Font Font2 = new Font(Font.FontFamily.TIMES_ROMAN, 8, Font.NORMAL);
			Font Font4 = new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.BOLD);
			Font Font5 = new Font(Font.FontFamily.TIMES_ROMAN, 10, Font.BOLD);
			Font mainContent = new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.NORMAL);
			Font mainContent1 = new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.NORMAL);
			mainContent1.setColor(BaseColor.GRAY);
			/*
			 * Defining marathi font
			 */
			Font marathiFont = FontFactory.getFont(marathiFontDir, BaseFont.IDENTITY_H, BaseFont.EMBEDDED);
			marathiFont.setSize(10);

			document.open();

			/*
			 * Adding image
			 */
			PdfContentByte canvas = writer.getDirectContentUnder();

			/*
			 * Checking whether pageSize is A4 or A5, according to that background image is
			 * being set
			 */
			Image image;

			if (pageSize.equals("A5")) {
				if (A5ImagePath == null || A5ImagePath == "") {

					image = null;

				} else {

					if (A5ImagePath.isEmpty()) {
						image = null;
					} else {

						S3ObjectInputStream s3ObjectInputStream = s3
								.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, A5ImagePath))
								.getObjectContent();

						IOUtils.copy(s3ObjectInputStream,
								new FileOutputStream(new File(realPath + "images/" + A5ImagePath)));

						image = Image.getInstance(realPath + "images/" + A5ImagePath);

						image.scaleToFit(PageSize.A5.getWidth(), PageSize.A5.getHeight());

						image.setAbsolutePosition(0, 0);

						canvas.saveState();
						PdfGState state = new PdfGState();
						canvas.setGState(state);
						canvas.addImage(image);
						canvas.restoreState();
					}

				}
			} else if (pageSize.equals("A4")) {
				if (A5ImagePath == null || A5ImagePath == "") {

					image = null;

				} else {

					if (A5ImagePath.isEmpty()) {
						image = null;
					} else {

						S3ObjectInputStream s3ObjectInputStream = s3
								.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, A5ImagePath))
								.getObjectContent();

						IOUtils.copy(s3ObjectInputStream,
								new FileOutputStream(new File(realPath + "images/" + A5ImagePath)));

						image = Image.getInstance(realPath + "images/" + A5ImagePath);

						image.scaleToFit(PageSize.A4.getWidth(), PageSize.A4.getHeight());

						image.setAbsolutePosition(0, 0);

						canvas.saveState();
						PdfGState state = new PdfGState();
						canvas.setGState(state);
						canvas.addImage(image);
						canvas.restoreState();
					}

				}
			}

			Image prescrImg = Image.getInstance(realPath + "/images/Rx_icon.png");

			prescrImg.scaleAbsolute(0f, 0f);

			/*
			 * Setting header
			 */
			document.addCreator("eDhanvantari");
			document.addTitle("Prescription");

			PdfPTable table = new PdfPTable(2);

			table.setFooterRows(1);
			table.setWidthPercentage(100);
			Rectangle rect = new Rectangle(270, 700);
			table.setWidthPercentage(new float[] { 70, 200 }, rect);

			/*
			 * For displaying patient personal details
			 */
			while (resultSet.next()) {

				PdfPCell cell = new PdfPCell(new Paragraph("Prescription", Font3));
				cell.setPaddingTop(120);
				cell.setPaddingBottom(10);
				cell.setHorizontalAlignment(Element.ALIGN_CENTER);
				cell.setUseBorderPadding(true);
				cell.setColspan(2);
				cell.setBorderWidthBottom(1f);
				cell.setBorderColorBottom(BaseColor.DARK_GRAY);
				cell.setBorderColor(BaseColor.WHITE);

				/*
				 * For Patient Name
				 */

				String fullName = resultSet.getString("firstName") + " " + resultSet.getString("middleName") + " "
						+ resultSet.getString("lastName") + " (" + resultSet.getInt("id") + ")";

				PdfPCell cell2 = new PdfPCell(new Paragraph("Patient Name: " + fullName, mainContent));
				cell2.setBorderWidth(0.01f);
				cell2.setPaddingBottom(5);
				cell2.setBorderWidthLeft(0.2f);
				cell2.setBorderColor(BaseColor.WHITE);

				/*
				 * For Weight
				 */
				PdfPCell cell3 = new PdfPCell(new Paragraph("Age: " + resultSet.getInt("age"), mainContent));
				cell3.setBorderWidth(0.2f);
				cell3.setPaddingBottom(5);
				cell3.setBorderColor(BaseColor.WHITE);

				table.addCell(cell);
				table.addCell(cell2);
				table.addCell(cell3);
			}

			while (resultSet2.next()) {
				/*
				 * For Weight
				 */
				PdfPCell cell4 = new PdfPCell(new Paragraph("Weight: " + resultSet2.getDouble("weight"), mainContent));
				cell4.setBorderWidth(0.01f);
				cell4.setPaddingBottom(5);
				cell4.setBorderWidthLeft(0.2f);
				cell4.setBorderColor(BaseColor.WHITE);

				table.addCell(cell4);
			}

			while (resultSet1.next()) {

				Days = resultSet1.getInt("nextVisitDays") + "-" + resultSet1.getInt("nextVisitWeeks") + "-"
						+ resultSet1.getInt("nextVisitMonths");
				/*
				 * For Visit Date
				 */
				PdfPCell cell5 = new PdfPCell(
						new Paragraph("Date of visit: " + resultSet1.getString("visitDate"), mainContent));
				cell5.setBorderWidth(0.01f);
				cell5.setPaddingBottom(5);
				cell5.setBorderWidthLeft(0.2f);
				cell5.setBorderColor(BaseColor.WHITE);

				table.addCell(cell5);
			}
			/*
			 * adding all cell to the table to create tabular structure
			 */

			document.add(table);

			/*
			 * Table for Prescription image
			 */

			/*
			 * For prescription
			 */

			if (InjectionPrescriptionList.size() > 0) {

				PdfPTable table3 = new PdfPTable(5);
				table3.setWidthPercentage(100);
				Rectangle rect2 = new Rectangle(270, 700);
				table3.setWidthPercentage(new float[] { 30, 60, 60, 60, 60 }, rect2);

				PdfPTable imageTable = new PdfPTable(2);
				imageTable.setWidthPercentage(100);
				imageTable.setWidths(new int[] { 1, 2 });

				PdfPCell imageCell1 = new PdfPCell(prescrImg, true);
				imageCell1.setBorderColor(BaseColor.WHITE);

				PdfPCell imageCell2 = new PdfPCell(new Paragraph("", mainContent));
				imageCell2.setBorderColor(BaseColor.WHITE);

				imageTable.addCell(imageCell1);
				imageTable.addCell(imageCell2);

				// Gene
				PdfPCell cell3002 = new PdfPCell(imageTable);

				cell3002.setBorderWidth(0.02f);
				cell3002.setPaddingBottom(10);
				// cell3002.setColspan(5);
				cell3002.setBorderColor(BaseColor.WHITE);

				PdfPCell cell3011 = new PdfPCell(new Paragraph(
						"                                                                                               "
								+ "                                                                                                                            "
								+ "                                                                                                                              ",
						Font2));
				cell3011.setColspan(5);
				cell3011.setBorderWidthRight(0f);
				cell3011.setBorderWidthLeft(0f);
				cell3011.setBorderWidthTop(0f);
				cell3011.setBorderWidthBottom(0f);
				cell3011.setBorderColorTop(BaseColor.WHITE);

				PdfPCell cell320 = new PdfPCell(new Paragraph("Sr No", Font5));

				cell320.setBorderWidth(0.01f);
				cell320.setPaddingBottom(5);
				/*
				 * cell320.setColspan(2); cell320.setBorderWidthBottom(1f);
				 * cell320.setBorderColorBottom(BaseColor.DARK_GRAY);
				 */
				cell320.setBorderColor(BaseColor.WHITE);

				// Gene
				PdfPCell cell32 = new PdfPCell(new Paragraph("Injection", Font5));

				cell32.setBorderWidth(0.01f);
				cell32.setPaddingBottom(5);
				/*
				 * cell32.setColspan(2); cell32.setBorderWidthBottom(1f);
				 * cell32.setBorderColorBottom(BaseColor.DARK_GRAY);
				 */
				cell32.setBorderColor(BaseColor.WHITE);

				// Nucleotide Change
				PdfPCell cell33 = new PdfPCell(new Paragraph(
						"Before Meal/ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã¢â‚¬Â¦ÃƒÂ¢Ã¢â€šÂ¬Ã…â€œÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚ÂµÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â£ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â€šÂ¬Ã¯Â¿Â½ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¹ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â°",
						marathiFont));

				cell33.setBorderWidth(0.01f);
				cell33.setPaddingBottom(5);
				/*
				 * cell33.setColspan(2); cell33.setBorderWidthBottom(1f);
				 * cell33.setBorderColorBottom(BaseColor.DARK_GRAY);
				 */
				cell33.setBorderColor(BaseColor.WHITE);

				// Amino Acid Change
				PdfPCell cell34 = new PdfPCell(new Paragraph(
						"After Meal/ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã¢â‚¬Â¦ÃƒÂ¢Ã¢â€šÂ¬Ã…â€œÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚ÂµÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â£ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾  ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¨ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â°",
						marathiFont));

				cell34.setBorderWidth(0.01f);
				cell34.setPaddingBottom(5);
				/*
				 * cell34.setColspan(2); cell34.setBorderWidthBottom(1f);
				 * cell34.setBorderColorBottom(BaseColor.DARK_GRAY);
				 */
				cell34.setBorderColor(BaseColor.WHITE);

				// Amino Acid Change
				PdfPCell cell35 = new PdfPCell(new Paragraph(
						"Duration(Days/ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚ÂµÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¸)",
						marathiFont));

				cell35.setBorderWidth(0.01f);
				cell35.setPaddingBottom(5);
				/*
				 * cell35.setColspan(2); cell35.setBorderWidthBottom(1f);
				 * cell35.setBorderColorBottom(BaseColor.DARK_GRAY);
				 */
				cell35.setBorderColor(BaseColor.WHITE);

				table3.addCell(cell3002);
				table3.addCell(cell3011);
				table3.addCell(cell320);
				table3.addCell(cell32);
				table3.addCell(cell33);
				table3.addCell(cell34);
				table3.addCell(cell35);

				document.add(table3);

			}

			for (PatientForm form : InjectionPrescriptionList) {
				PdfPTable table1 = new PdfPTable(5);

				table1.setWidthPercentage(100);
				Rectangle rect1 = new Rectangle(270, 700);
				table1.setWidthPercentage(new float[] { 30, 60, 60, 60, 60 }, rect1);

				/*
				 * for Gene
				 */
				PdfPCell cell20 = new PdfPCell(new Paragraph("" + count + "", mainContent));
				cell20.setBorderWidth(0.2f);
				cell20.setPaddingBottom(2);
				cell20.setBorderColor(BaseColor.WHITE);

				/*
				 * for Nucleotide Change
				 */
				PdfPCell cell21 = new PdfPCell(new Paragraph(form.getTradeName(), mainContent));
				cell21.setBorderWidth(0.2f);
				cell21.setPaddingBottom(2);
				// cell21.setColspan(3);
				cell21.setBorderColor(BaseColor.WHITE);

				/*
				 * for Amino Acid Change
				 */
				PdfPCell cell22 = new PdfPCell(new Paragraph(String.valueOf(form.getDosageBeforeMeal()), mainContent));
				cell22.setBorderWidth(0.2f);
				cell22.setPaddingBottom(2);
				cell22.setBorderColor(BaseColor.WHITE);

				/*
				 * for Variant Type
				 */
				PdfPCell cell23 = new PdfPCell(new Paragraph(String.valueOf(form.getDosageAfterMeal()), mainContent));
				cell23.setBorderWidth(0.2f);
				cell23.setPaddingBottom(2);
				cell23.setBorderColor(BaseColor.WHITE);

				/*
				 * for Variant Impact
				 */
				PdfPCell cell24 = new PdfPCell(
						new Paragraph(String.valueOf(form.getDuration()) + "(Days)", marathiFont));
				cell24.setBorderWidth(0.2f);
				cell24.setPaddingBottom(2);
				// cell24.setColspan(2);
				cell24.setBorderColor(BaseColor.WHITE);

				table1.addCell(cell20);
				table1.addCell(cell21);
				table1.addCell(cell22);
				table1.addCell(cell23);
				table1.addCell(cell24);

				document.add(table1);

				count++;
			}

			/*
			 * For Tablet prescription
			 */

			if (TabletPrescriptionList.size() > 0) {

				PdfPTable table4 = new PdfPTable(5);
				table4.setWidthPercentage(100);
				Rectangle rect4 = new Rectangle(270, 700);
				table4.setWidthPercentage(new float[] { 30, 60, 60, 60, 60 }, rect4);
				/*
				 * // For blank space PdfPCell cell301 = new PdfPCell(new Paragraph(
				 * "                                                                                               "
				 * +
				 * "                                                                                                                            "
				 * +
				 * "                                                                                                                              "
				 * , Font2)); cell301.setColspan(5); cell301.setBorderWidthRight(0f);
				 * cell301.setBorderWidthLeft(0f); cell301.setBorderWidthTop(0f);
				 * cell301.setBorderWidthBottom(0f); cell301.setBorderColorTop(BaseColor.WHITE);
				 */

				PdfPCell cell302 = new PdfPCell(new Paragraph(
						"                                                                                               "
								+ "                                                                                                                            "
								+ "                                                                                                                              ",
						Font2));
				cell302.setColspan(5);
				cell302.setBorderWidthRight(0f);
				cell302.setBorderWidthLeft(0f);
				cell302.setBorderWidthTop(0f);
				cell302.setBorderWidthBottom(0f);
				cell302.setBorderColorTop(BaseColor.WHITE);

				PdfPCell cell303 = new PdfPCell(new Paragraph("Sr No", Font5));

				cell303.setBorderWidth(0.01f);
				cell303.setPaddingBottom(5);
				// cell303.setColspan(4);
				cell303.setBorderColor(BaseColor.WHITE);

				// Gene
				PdfPCell cell304 = new PdfPCell(new Paragraph("Tablet", Font5));

				cell304.setBorderWidth(0.01f);
				cell304.setPaddingBottom(5);
				cell304.setBorderColor(BaseColor.WHITE);

				// Nucleotide Change
				PdfPCell cell305 = new PdfPCell(new Paragraph(
						"Before Meal/ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã¢â‚¬Â¦ÃƒÂ¢Ã¢â€šÂ¬Ã…â€œÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚ÂµÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â£ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â€šÂ¬Ã¯Â¿Â½ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¹ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â°",
						marathiFont));

				cell305.setBorderWidth(0.01f);
				cell305.setPaddingBottom(5);
				// cell305.setColspan(3);
				cell305.setBorderColor(BaseColor.WHITE);

				// Amino Acid Change
				PdfPCell cell306 = new PdfPCell(new Paragraph(
						"After Meal/ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã¢â‚¬Â¦ÃƒÂ¢Ã¢â€šÂ¬Ã…â€œÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚ÂµÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â£ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾  ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¨ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â°",
						marathiFont));

				cell306.setBorderWidth(0.01f);
				cell306.setPaddingBottom(5);
				cell306.setBorderColor(BaseColor.WHITE);

				// Amino Acid Change
				PdfPCell cell307 = new PdfPCell(new Paragraph("Duration(Days)", marathiFont));

				cell307.setBorderWidth(0.01f);
				cell307.setPaddingBottom(5);
				cell307.setBorderColor(BaseColor.WHITE);

				// table4.addCell(cell301);
				table4.addCell(cell302);
				table4.addCell(cell303);
				table4.addCell(cell304);
				table4.addCell(cell305);
				table4.addCell(cell306);
				table4.addCell(cell307);

				document.add(table4);
			}

			for (PatientForm form : TabletPrescriptionList) {

				count = 1;

				PdfPTable table5 = new PdfPTable(5);

				table5.setWidthPercentage(100);
				Rectangle rect5 = new Rectangle(270, 700);
				table5.setWidthPercentage(new float[] { 30, 60, 60, 60, 60 }, rect5);

				/*
				 * for Gene
				 */
				PdfPCell cell201 = new PdfPCell(new Paragraph("" + count + "", mainContent));
				cell201.setBorderWidth(0.2f);
				cell201.setPaddingBottom(2);
				cell201.setBorderColor(BaseColor.WHITE);

				/*
				 * for Nucleotide Change
				 */
				PdfPCell cell211 = new PdfPCell(new Paragraph(form.getTradeName(), mainContent));
				cell211.setBorderWidth(0.2f);
				cell211.setPaddingBottom(2);
				// cell211.setColspan(3);
				cell211.setBorderColor(BaseColor.WHITE);

				/*
				 * for Amino Acid Change
				 */
				PdfPCell cell221 = new PdfPCell(new Paragraph(String.valueOf(form.getDosageBeforeMeal()), mainContent));
				cell221.setBorderWidth(0.2f);
				cell221.setPaddingBottom(2);
				cell221.setBorderColor(BaseColor.WHITE);

				/*
				 * for Variant Type
				 */
				PdfPCell cell231 = new PdfPCell(new Paragraph(String.valueOf(form.getDosageAfterMeal()), mainContent));
				cell231.setBorderWidth(0.2f);
				cell231.setPaddingBottom(2);
				cell231.setBorderColor(BaseColor.WHITE);

				/*
				 * for Variant Impact
				 */
				PdfPCell cell241 = new PdfPCell(
						new Paragraph(String.valueOf(form.getDuration()) + "(Days)", marathiFont));
				cell241.setBorderWidth(0.2f);
				cell241.setPaddingBottom(2);
				// cell241.setColspan(2);
				cell241.setBorderColor(BaseColor.WHITE);

				table5.addCell(cell201);
				table5.addCell(cell211);
				table5.addCell(cell221);
				table5.addCell(cell231);
				table5.addCell(cell241);

				document.add(table5);

				count++;
			}

			/*
			 * For Liquid prescription
			 */

			if (LiquidPrescriptionList.size() > 0) {

				PdfPTable table6 = new PdfPTable(5);
				table6.setWidthPercentage(100);
				Rectangle rect5 = new Rectangle(270, 700);
				table6.setWidthPercentage(new float[] { 30, 60, 60, 60, 60 }, rect5);

				/*
				 * // For blank space PdfPCell cell401 = new PdfPCell(new Paragraph(
				 * "                                                                                               "
				 * +
				 * "                                                                                                                            "
				 * +
				 * "                                                                                                                              "
				 * , Font2)); cell401.setColspan(5); cell401.setBorderWidthRight(0f);
				 * cell401.setBorderWidthLeft(0f); cell401.setBorderWidthTop(0f);
				 * cell401.setBorderWidthBottom(0f); cell401.setBorderColorTop(BaseColor.WHITE);
				 */

				PdfPCell cell402 = new PdfPCell(new Paragraph(
						"                                                                                               "
								+ "                                                                                                                            "
								+ "                                                                                                                              ",
						Font2));
				cell402.setColspan(5);
				cell402.setBorderWidthRight(0f);
				cell402.setBorderWidthLeft(0f);
				cell402.setBorderWidthTop(0f);
				cell402.setBorderWidthBottom(0f);
				cell402.setBorderColorTop(BaseColor.WHITE);

				PdfPCell cell403 = new PdfPCell(new Paragraph("Sr No.", Font5));

				cell403.setBorderWidth(0.01f);
				cell403.setPaddingBottom(5);
				// cell403.setColspan(4);
				cell403.setBorderColor(BaseColor.WHITE);

				// Gene
				PdfPCell cell404 = new PdfPCell(new Paragraph("Liquid", Font5));

				cell404.setBorderWidth(0.01f);
				cell404.setPaddingBottom(5);
				cell404.setBorderColor(BaseColor.WHITE);

				// Nucleotide Change
				PdfPCell cell405 = new PdfPCell(new Paragraph(
						"Before Meal/ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã¢â‚¬Â¦ÃƒÂ¢Ã¢â€šÂ¬Ã…â€œÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚ÂµÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â£ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â€šÂ¬Ã¯Â¿Â½ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¹ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â°",
						marathiFont));

				cell405.setBorderWidth(0.01f);
				cell405.setPaddingBottom(5);
				// cell405.setColspan(3);
				cell405.setBorderColor(BaseColor.WHITE);

				// Amino Acid Change
				PdfPCell cell406 = new PdfPCell(new Paragraph(
						"After Meal/ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã¢â‚¬Â¦ÃƒÂ¢Ã¢â€šÂ¬Ã…â€œÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚ÂµÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â£ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾  ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¨ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â°",
						marathiFont));

				cell406.setBorderWidth(0.01f);
				cell406.setPaddingBottom(5);
				cell406.setBorderColor(BaseColor.WHITE);

				// Amino Acid Change
				PdfPCell cell407 = new PdfPCell(new Paragraph("Duration(Days)", marathiFont));

				cell407.setBorderWidth(0.01f);
				cell407.setPaddingBottom(5);
				cell407.setBorderColor(BaseColor.WHITE);

				// table6.addCell(cell401);
				table6.addCell(cell402);
				table6.addCell(cell403);
				table6.addCell(cell404);
				table6.addCell(cell405);
				table6.addCell(cell406);
				table6.addCell(cell407);

				document.add(table6);

			}

			for (PatientForm form : LiquidPrescriptionList) {

				count = 1;

				PdfPTable table7 = new PdfPTable(5);

				table7.setWidthPercentage(100);
				Rectangle rect6 = new Rectangle(270, 700);
				table7.setWidthPercentage(new float[] { 30, 60, 60, 60, 60 }, rect6);

				/*
				 * for Gene
				 */
				PdfPCell cell501 = new PdfPCell(new Paragraph("" + count + "", mainContent));
				cell501.setBorderWidth(0.2f);
				cell501.setPaddingBottom(2);
				cell501.setBorderColor(BaseColor.WHITE);

				/*
				 * for Nucleotide Change
				 */
				PdfPCell cell511 = new PdfPCell(new Paragraph(form.getTradeName(), mainContent));
				cell511.setBorderWidth(0.2f);
				cell511.setPaddingBottom(2);
				// cell511.setColspan(3);
				cell511.setBorderColor(BaseColor.WHITE);

				/*
				 * for Amino Acid Change
				 */
				PdfPCell cell521 = new PdfPCell(new Paragraph(String.valueOf(form.getDosageBeforeMeal()), mainContent));
				cell521.setBorderWidth(0.2f);
				cell521.setPaddingBottom(2);
				cell521.setBorderColor(BaseColor.WHITE);

				/*
				 * for Variant Type
				 */
				PdfPCell cell531 = new PdfPCell(new Paragraph(String.valueOf(form.getDosageAfterMeal()), mainContent));
				cell531.setBorderWidth(0.2f);
				cell531.setPaddingBottom(2);
				cell531.setBorderColor(BaseColor.WHITE);

				/*
				 * for Variant Impact
				 */
				PdfPCell cell541 = new PdfPCell(
						new Paragraph(String.valueOf(form.getDuration()) + "(Days)", marathiFont));
				cell541.setBorderWidth(0.2f);
				cell541.setPaddingBottom(2);
				// cell541.setColspan(2);
				cell541.setBorderColor(BaseColor.WHITE);

				table7.addCell(cell501);
				table7.addCell(cell511);
				table7.addCell(cell521);
				table7.addCell(cell531);
				table7.addCell(cell541);

				document.add(table7);

				count++;
			}

			/*
			 * For PrescribedInvestigations prescription
			 */
			PdfPTable table10 = new PdfPTable(1);
			table10.setWidthPercentage(100);
			Rectangle rect10 = new Rectangle(270, 700);
			table10.setWidthPercentage(new float[] { 270 }, rect10);

			if (InvestigationDetails.length() > 0) {

				PdfPCell cell502 = new PdfPCell(new Paragraph(
						"                                                                                               "
								+ "                                                                                                                            "
								+ "                                                                                                                              ",
						Font2));
				cell502.setColspan(2);
				cell502.setBorderWidthRight(0f);
				cell502.setBorderWidthLeft(0f);
				cell502.setBorderWidthTop(0f);
				cell502.setBorderWidthBottom(0f);
				cell502.setBorderColorTop(BaseColor.WHITE);

				PdfPCell cell503 = new PdfPCell(
						new Paragraph("Prescribed Investigations: " + InvestigationDetails, mainContent));

				cell503.setBorderWidth(0.01f);
				cell503.setPaddingBottom(5);
				cell503.setColspan(2);
				cell503.setBorderColor(BaseColor.WHITE);

				table10.addCell(cell502);
				table10.addCell(cell503);

			}

			document.add(table10);

			PdfPTable table12 = new PdfPTable(1);
			table12.setWidthPercentage(100);
			Rectangle rect12 = new Rectangle(270, 700);
			table12.setWidthPercentage(new float[] { 270 }, rect12);

			while (resultSet3.next()) {

				PdfPCell cell11110 = new PdfPCell(
						new Paragraph("Physiotherapy: " + resultSet3.getString("physiotherapy"), mainContent));
				cell11110.setBorderWidth(0.2f);
				cell11110.setPaddingBottom(2);
				cell11110.setBorderColor(BaseColor.WHITE);
				table12.addCell(cell11110);
			}

			PdfPCell cell11111 = new PdfPCell(new Paragraph("Follow-up: " + Days, mainContent));
			cell11111.setBorderWidth(0.2f);
			cell11111.setPaddingBottom(2);
			cell11111.setBorderColor(BaseColor.WHITE);
			table12.addCell(cell11111);

			document.add(table12);

			/*
			 * For signature in footer
			 */

			PdfPTable table8 = new PdfPTable(1);
			table8.setTotalWidth(350);

			PdfPCell cell1111 = new PdfPCell(new Paragraph("Signature", mainContent1));
			cell1111.setBackgroundColor(BaseColor.WHITE);
			cell1111.setHorizontalAlignment(Element.ALIGN_RIGHT);
			cell1111.setBorderColor(BaseColor.WHITE);
			table8.addCell(cell1111);

			FooterTable event = new FooterTable(table8);
			writer.setPageEvent(event);

			document.close();

			System.out.println("Successfully written and generated General physicial Prescription PDF Report");

			status = "success";

			connection.close();

		} catch (Exception exception) {
			exception.printStackTrace();
			status = "error";
		}
		return status;

	}

	public String convertGeneralHospitalBillingPDF(int patientID, int visitID, String realPath, String pdfFileName,
			int clinicID, int VisitTypeID, String ClinicSuffix, AmazonS3 s3, String s3reportFilePath, String bucketName,
			int practiceID) {

		String status = null;

		String billDate = null;

		double totalBill = 0D;

		PatientDAOInf patientDAOInf = new PatientDAOImpl();

		PrescriptionManagementDAOInf managementDAOInf = new PrescriptionManagementDAOImpl();

		List<PatientForm> billList = null;
		List<PrescriptionManagementForm> OPDChargesList = null;

		/*
		 * To covert date from database into DD-MM-YYYY
		 */
		SimpleDateFormat databaseDate = new SimpleDateFormat("yyyy-MM-dd");

		SimpleDateFormat dateToBeDisplayed = new SimpleDateFormat("dd-MM-yyyy HH:mm");

		Date date = new Date();

		String receiptNo = "";
		String receiptDate = "";
		String billingType = "";
		double amount = 0D;

		String regNo = "";

		/*
		 * Declaring variable which stores the location for FreeSans.ttf file to print
		 * marathi text on pdf
		 */
		String marathiFontDir = realPath + "fonts/FreeSans.ttf";

		ConfigurationUtil configXMLUtil = new ConfigurationUtil();

		try {
			connection = getConnection();

			/*
			 * Generate the queries to fetch details
			 */
			String fetchDetailQuery1 = QueryMaker.OPD_PDF_RETRIEVE_PATIENT;

			preparedStatement1 = connection.prepareStatement(fetchDetailQuery1);
			preparedStatement1.setInt(1, patientID);
			resultSet1 = preparedStatement1.executeQuery();

			/*
			 * Retrieve patient registration no based on patientID and clinicID from
			 * ClinicRegistration table
			 */
			String fetchClinicRegNoQuery = QueryMaker.RETRIEVE_CLINIC_REG_NO_BY_CLINIC_ID;

			preparedStatement2 = connection.prepareStatement(fetchClinicRegNoQuery);

			preparedStatement2.setInt(1, clinicID);
			preparedStatement2.setInt(2, patientID);

			resultSet2 = preparedStatement2.executeQuery();

			while (resultSet2.next()) {
				regNo = resultSet2.getString("regNumber");
			}

			/*
			 * Generate the billing details
			 */

			String ReceiptDetails = patientDAOInf.retrieveReceiptDetailsByVisitID(visitID);

			System.out.println("ReceiptDetails: " + ReceiptDetails);

			String[] ReceiptValues = ReceiptDetails.split("\\$");

			System.out.println("ReceiptValues: " + ReceiptValues);

			billList = patientDAOInf.retrieveVisitBillingByVisitID(visitID);

			OPDChargesList = managementDAOInf.retrieveAllOPDCharges(practiceID);

			String ChargesDetails = managementDAOInf.retrieveOPDChargesDetailsByReceiptID(visitID);

			System.out.println("ChargesDetails : " + ChargesDetails);

			/*
			 * Getting image path from XML
			 */
			String A5ImagePath = configXMLUtil.getLetterHeadImage();

			/*
			 * Getting page size from XMl
			 */
			String pageSize = "A4";

			// Rectangle pagesize = new Rectangle(578.2f, 254.88f);

			/*
			 * Setting path to store PDF file
			 */
			File file = new File(realPath + "/" + pdfFileName);
			/*
			 * Creating Document for PDF
			 */
			Document document = null;

			/*
			 * Checking whether pageSize tag in XMl contains A5 or A4, according to that
			 * setting PDF page size
			 */
			if (pageSize.equals("A5")) {
				document = new Document(PageSize.A5);
			} else if (pageSize.equals("A4")) {
				document = new Document(PageSize.A4);
			}

			// document = new Document(pagesize);

			PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(file));

			Font Font1 = new Font(Font.FontFamily.TIMES_ROMAN, 10, Font.NORMAL);
			Font Font3 = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.NORMAL);
			Font Font2 = new Font(Font.FontFamily.TIMES_ROMAN, 8, Font.NORMAL);
			Font Font4 = new Font(Font.FontFamily.TIMES_ROMAN, 14, Font.BOLD);
			Font Font5 = new Font(Font.FontFamily.TIMES_ROMAN, 10, Font.BOLD);
			Font mainContent = new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.NORMAL);
			Font mainContent1 = new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.NORMAL);
			mainContent1.setColor(BaseColor.GRAY);
			/*
			 * Defining marathi font
			 */
			Font marathiFont = FontFactory.getFont(marathiFontDir, BaseFont.IDENTITY_H, BaseFont.EMBEDDED);

			document.open();

			/*
			 * Adding image
			 */
			PdfContentByte canvas = writer.getDirectContentUnder();

			/*
			 * Checking whether pageSize is A4 or A5, according to that background image is
			 * being set
			 */
			Image image;

			if (pageSize.equals("A5")) {
				if (A5ImagePath == null || A5ImagePath == "") {

					image = null;

				} else {

					if (A5ImagePath.isEmpty()) {
						image = null;
					} else {

						S3ObjectInputStream s3ObjectInputStream = s3
								.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, A5ImagePath))
								.getObjectContent();

						IOUtils.copy(s3ObjectInputStream,
								new FileOutputStream(new File(realPath + "images/" + A5ImagePath)));

						image = Image.getInstance(realPath + "images/" + A5ImagePath);

						image.scaleToFit(PageSize.A5.getWidth(), PageSize.A5.getHeight());

						image.setAbsolutePosition(0, 0);

						canvas.saveState();
						PdfGState state = new PdfGState();
						canvas.setGState(state);
						canvas.addImage(image);
						canvas.restoreState();
					}

				}
			} else if (pageSize.equals("A4")) {
				if (A5ImagePath == null || A5ImagePath == "") {

					image = null;

				} else {

					if (A5ImagePath.isEmpty()) {
						image = null;
					} else {

						S3ObjectInputStream s3ObjectInputStream = s3
								.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, A5ImagePath))
								.getObjectContent();

						IOUtils.copy(s3ObjectInputStream,
								new FileOutputStream(new File(realPath + "images/" + A5ImagePath)));

						image = Image.getInstance(realPath + "images/" + A5ImagePath);

						image.scaleToFit(PageSize.A4.getWidth(), PageSize.A4.getHeight());

						image.setAbsolutePosition(0, 0);

						canvas.saveState();
						PdfGState state = new PdfGState();
						canvas.setGState(state);
						canvas.addImage(image);
						canvas.restoreState();
					}

				}
			}

			/*
			 * Setting header
			 */
			document.addCreator("eDhanvantari");
			document.addTitle("OPD Billing");

			/* for spacing before table */

			PdfPTable tableA1 = new PdfPTable(1);
			tableA1.setWidthPercentage(100);
			Rectangle rectA1 = new Rectangle(270, 700);
			tableA1.setWidthPercentage(new float[] { 270 }, rectA1);

			PdfPCell cell111 = new PdfPCell(new Paragraph(" ", Font4));
			cell111.setPaddingTop(120);
			cell111.setBorderWidthRight(0f);
			cell111.setBorderWidthLeft(0f);
			cell111.setBorderWidthTop(0f);
			cell111.setBorderWidthBottom(0f);
			cell111.setBorderColorTop(BaseColor.WHITE);

			tableA1.addCell(cell111);
			document.add(tableA1);

			/*
			 * For displaying patient personal details
			 */

			PdfPTable table = new PdfPTable(2);

			table.setFooterRows(1);
			table.setWidthPercentage(100);
			Rectangle rect = new Rectangle(270, 700);
			table.setWidthPercentage(new float[] { 200, 70 }, rect);

			PdfPCell cell = new PdfPCell(new Paragraph("GeneralHospital Hospital", Font4));
			cell.setBorderWidth(0.01f);
			cell.setPaddingTop(10);
			cell.setPaddingBottom(10);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER);

			PdfPCell cell4 = new PdfPCell(new Paragraph("Receipt No: " + ReceiptValues[0], Font5));
			cell4.setBorderWidth(0.01f);
			cell4.setPaddingTop(10);
			cell4.setPaddingBottom(10);

			PdfPCell cell012 = new PdfPCell(
					new Paragraph("Add: 239/1A, Near Patneshwar Bridge, Antora Road, Pen. Dist.Raigad.\n"
							+ "Contact: 9210101092/9373710211", Font5));
			cell012.setBorderWidth(0.01f);

			PdfPCell cell5 = new PdfPCell(new Paragraph("Receipt Date: " + ReceiptValues[1], Font5));
			cell5.setBorderWidth(0.01f);
			cell5.setPaddingBottom(4);

			table.addCell(cell);
			table.addCell(cell4);
			table.addCell(cell012);
			table.addCell(cell5);

			while (resultSet1.next()) {

				/*
				 * For Patient Name
				 */

				String fullName = resultSet1.getString("firstName") + " " + resultSet1.getString("middleName") + " "
						+ resultSet1.getString("lastName") + " (" + regNo + ")";

				PdfPCell cell2 = new PdfPCell(new Paragraph("Patient Name:" + fullName, Font1));
				cell2.setBorderWidth(0.01f);
				cell2.setPaddingBottom(4);

				PdfPCell cell112 = new PdfPCell(new Paragraph("", Font2));
				cell112.setBorderWidth(0.01f);
				cell112.setPaddingBottom(4);

				table.addCell(cell2);
				table.addCell(cell112);

				document.add(table);
			}

			for (PatientForm form : billList) {

				/*
				 * For prescription
				 */
				PdfPTable table2 = new PdfPTable(5);
				table2.setWidthPercentage(100);
				Rectangle rect2 = new Rectangle(270, 700);
				table2.setWidthPercentage(new float[] { 20, 70, 60, 60, 60 }, rect2);

				/*
				 * Creating Table header
				 */

				// Gene
				PdfPCell cell10 = new PdfPCell(new Paragraph("Sr.No.", mainContent));

				cell10.setBorderWidth(0.01f);

				// Nucleotide Change
				PdfPCell cell11 = new PdfPCell(new Paragraph("OPD Charge Type", mainContent));
				cell11.setBorderWidth(0.01f);

				// Amino Acid Change
				PdfPCell cell12 = new PdfPCell(new Paragraph("Quantity", mainContent));
				cell12.setHorizontalAlignment(Element.ALIGN_CENTER);
				cell12.setBorderWidth(0.01f);

				// Variant Type
				PdfPCell cell13 = new PdfPCell(new Paragraph("Rate", mainContent));
				cell13.setHorizontalAlignment(Element.ALIGN_CENTER);
				cell13.setBorderWidth(0.01f);

				// Variant Impact
				PdfPCell cell14 = new PdfPCell(new Paragraph("Amount", mainContent));
				cell14.setHorizontalAlignment(Element.ALIGN_CENTER);
				cell14.setBorderWidth(0.01f);

				table2.addCell(cell10);
				table2.addCell(cell11);
				table2.addCell(cell12);
				table2.addCell(cell13);
				table2.addCell(cell14);

				document.add(table2);

				/*
				 * Table for billing
				 */

				PdfPTable table3 = new PdfPTable(5);

				table3.setWidthPercentage(100);
				Rectangle rect1 = new Rectangle(270, 700);
				table3.setWidthPercentage(new float[] { 20, 70, 60, 60, 60 }, rect1);

				int count = 1;

				PdfPCell cell105 = new PdfPCell(new Paragraph("" + count + "", mainContent));
				cell105.setHorizontalAlignment(Element.ALIGN_CENTER);
				cell105.setBorderWidth(0.01f);

				// for Title
				PdfPCell cell8 = new PdfPCell(new Paragraph("Consultation Charges:", mainContent));
				cell8.setHorizontalAlignment(Element.ALIGN_LEFT);
				cell8.setBorderWidth(0.01f);
				// cell8.setBorderColorBottom(BaseColor.DARK_GRAY);

				/*
				 * for Amino Acid Change
				 */
				PdfPCell cell107 = new PdfPCell(new Paragraph("-", mainContent));
				// cell107.setColspan(2);
				cell107.setHorizontalAlignment(Element.ALIGN_CENTER);
				cell107.setBorderWidth(0.01f);

				/*
				 * for Variant Type
				 */
				// Gene
				PdfPCell cell9 = new PdfPCell(new Paragraph(String.valueOf(form.getCharges()), mainContent));

				cell9.setBorderWidth(0.01f);
				cell9.setHorizontalAlignment(Element.ALIGN_CENTER);
				// cell9.setColspan(2);

				/*
				 * for Variant Impact
				 */
				// Gene
				PdfPCell cell09 = new PdfPCell(new Paragraph(String.valueOf(form.getCharges()), mainContent));

				cell09.setBorderWidth(0.01f);
				cell09.setHorizontalAlignment(Element.ALIGN_CENTER);
				// cell09.setColspan(2);

				table3.addCell(cell105);
				table3.addCell(cell8);
				table3.addCell(cell107);
				table3.addCell(cell9);
				table3.addCell(cell09);

				count = 2;

				if (ChargesDetails.contains(",")) {

					String[] Charges = ChargesDetails.split(",");

					for (int j = 0; j < Charges.length; j++) {

						String[] ChargeValues = Charges[j].split("#");

						PdfPCell cell15 = new PdfPCell(new Paragraph("" + count + "", mainContent));
						cell15.setHorizontalAlignment(Element.ALIGN_CENTER);
						cell15.setBorderWidth(0.01f);

						/*
						 * for Nucleotide Change
						 */
						PdfPCell cell16 = new PdfPCell(new Paragraph(ChargeValues[1], mainContent));
						cell16.setHorizontalAlignment(Element.ALIGN_LEFT);
						cell16.setBorderWidth(0.01f);

						/*
						 * for Amino Acid Change
						 */
						PdfPCell cell17 = new PdfPCell(new Paragraph(String.valueOf(ChargeValues[2]), mainContent));
						cell17.setHorizontalAlignment(Element.ALIGN_CENTER);
						cell17.setBorderWidth(0.01f);

						/*
						 * for Variant Type
						 */
						PdfPCell cell18 = new PdfPCell(new Paragraph(String.valueOf(ChargeValues[3]), mainContent));
						cell18.setBorderWidth(0.01f);
						cell18.setHorizontalAlignment(Element.ALIGN_CENTER);

						/*
						 * for Variant Impact
						 */
						PdfPCell cell19 = new PdfPCell(new Paragraph(String.valueOf(ChargeValues[4]), mainContent));
						cell19.setBorderWidth(0.01f);
						cell19.setHorizontalAlignment(Element.ALIGN_CENTER);

						table3.addCell(cell15);
						table3.addCell(cell16);
						table3.addCell(cell17);
						table3.addCell(cell18);
						table3.addCell(cell19);

						count++;
					}

				} else {

					String[] ChargeValues = ChargesDetails.split("#");

					PdfPCell cell15 = new PdfPCell(new Paragraph("" + count + "", mainContent));
					cell15.setBorderWidth(0.01f);
					cell15.setHorizontalAlignment(Element.ALIGN_CENTER);

					/*
					 * for Nucleotide Change
					 */
					PdfPCell cell16 = new PdfPCell(new Paragraph(ChargeValues[1], mainContent));
					cell16.setBorderWidth(0.01f);
					cell16.setHorizontalAlignment(Element.ALIGN_LEFT);

					/*
					 * for Amino Acid Change
					 */
					PdfPCell cell17 = new PdfPCell(new Paragraph(String.valueOf(ChargeValues[2]), mainContent));
					cell17.setBorderWidth(0.01f);
					cell17.setHorizontalAlignment(Element.ALIGN_CENTER);
					/*
					 * for Variant Type
					 */
					PdfPCell cell18 = new PdfPCell(new Paragraph(String.valueOf(ChargeValues[3]), mainContent));
					cell18.setBorderWidth(0.01f);
					cell18.setHorizontalAlignment(Element.ALIGN_CENTER);

					/*
					 * for Variant Impact
					 */
					PdfPCell cell19 = new PdfPCell(new Paragraph(String.valueOf(ChargeValues[4]), mainContent));
					cell19.setBorderWidth(0.01f);
					cell19.setHorizontalAlignment(Element.ALIGN_CENTER);

					table3.addCell(cell15);
					table3.addCell(cell16);
					table3.addCell(cell17);
					table3.addCell(cell18);
					table3.addCell(cell19);

					count++;
				}

				document.add(table3);

				/*
				 * Table for billing
				 */

				PdfPTable table4 = new PdfPTable(5);

				table4.setWidthPercentage(100);
				Rectangle rect4 = new Rectangle(270, 700);
				table4.setWidthPercentage(new float[] { 20, 70, 60, 60, 60 }, rect4);

				/*
				 * For total bill
				 */
				PdfPCell cell20 = new PdfPCell(new Paragraph("Total Bill", mainContent));
				cell20.setBorderWidth(0.01f);
				cell20.setColspan(4);
				cell20.setHorizontalAlignment(Element.ALIGN_RIGHT);

				PdfPCell cell21 = new PdfPCell(new Paragraph(String.valueOf(form.getTotalAmount()), mainContent));
				cell21.setBorderWidth(0.01f);
				cell21.setHorizontalAlignment(Element.ALIGN_CENTER);

				PdfPCell cell22 = new PdfPCell(new Paragraph("Concession if any", mainContent));
				cell22.setBorderWidth(0.01f);
				cell22.setHorizontalAlignment(Element.ALIGN_RIGHT);
				cell22.setColspan(4);

				PdfPCell cell23 = new PdfPCell(new Paragraph(String.valueOf(form.getTotalDiscount()), mainContent));
				cell23.setBorderWidth(0.1f);
				cell23.setHorizontalAlignment(Element.ALIGN_CENTER);

				PdfPCell cell24 = new PdfPCell(new Paragraph("Net Amount", mainContent));
				cell24.setBorderWidth(0.01f);
				cell24.setHorizontalAlignment(Element.ALIGN_RIGHT);
				cell24.setColspan(4);

				PdfPCell cell25 = new PdfPCell(new Paragraph(String.valueOf(form.getNetAmount()), mainContent));
				cell25.setBorderWidth(0.01f);
				cell25.setHorizontalAlignment(Element.ALIGN_CENTER);

				PdfPCell cell26 = new PdfPCell(new Paragraph("Advance Payment", mainContent));
				cell26.setBorderWidth(0.01f);
				cell26.setHorizontalAlignment(Element.ALIGN_RIGHT);
				cell26.setColspan(4);

				PdfPCell cell27 = new PdfPCell(new Paragraph(String.valueOf(form.getAdvPayment()), mainContent));
				cell27.setBorderWidth(0.01f);
				cell27.setHorizontalAlignment(Element.ALIGN_CENTER);

				PdfPCell cell270 = new PdfPCell(new Paragraph("Balance Payment", mainContent));
				cell270.setBorderWidth(0.01f);
				cell270.setHorizontalAlignment(Element.ALIGN_RIGHT);
				cell270.setColspan(4);

				PdfPCell cell271 = new PdfPCell(new Paragraph(String.valueOf(form.getBalPayment()), mainContent));
				cell271.setBorderWidth(0.01f);
				cell271.setHorizontalAlignment(Element.ALIGN_CENTER);

				table4.addCell(cell20);
				table4.addCell(cell21);
				table4.addCell(cell22);
				table4.addCell(cell23);
				table4.addCell(cell24);
				table4.addCell(cell25);
				table4.addCell(cell26);
				table4.addCell(cell27);
				table4.addCell(cell270);
				table4.addCell(cell271);

				document.add(table4);

				/*
				 * For remaining details
				 */
				PdfPTable table5 = new PdfPTable(4);
				table5.setWidthPercentage(100);
				Rectangle rect5 = new Rectangle(270, 700);
				table5.setWidthPercentage(new float[] { 65, 70, 65, 70 }, rect5);

				/*
				 * Checking what the payment type is, printing details
				 */
				if (form.getPaymentType().contains("Cash")) {

					/*
					 * For Payment Type
					 */
					PdfPCell cell57 = new PdfPCell(new Paragraph("Payment Type: ", mainContent));
					cell57.setBorderWidth(0.01f);

					PdfPCell cell58 = new PdfPCell(new Paragraph(form.getPaymentType(), mainContent));
					cell58.setBorderWidth(0.01f);
					cell58.setColspan(3);

					/*
					 * For Cash details
					 */
					// For cash paid
					PdfPCell cell62 = new PdfPCell(new Paragraph("Cash Paid", mainContent));
					cell62.setBorderWidth(0.01f);

					PdfPCell cell63 = new PdfPCell(new Paragraph("" + form.getCashPaid(), mainContent));
					cell63.setBorderWidth(0.01f);

					// For Cash to return
					PdfPCell cell64 = new PdfPCell(new Paragraph("Cash To Return", mainContent));
					cell64.setBorderWidth(0.01f);

					PdfPCell cell65 = new PdfPCell(new Paragraph("" + form.getCashToReturn(), mainContent));
					cell65.setBorderWidth(0.1f);

					table5.addCell(cell57);
					table5.addCell(cell58);
					table5.addCell(cell62);
					table5.addCell(cell63);
					table5.addCell(cell64);
					table5.addCell(cell65);

				}

				if (form.getPaymentType().contains("Cheque")) {

					/*
					 * For Payment Type
					 */
					PdfPCell cell57 = new PdfPCell(new Paragraph("Payment Type: ", mainContent));
					cell57.setBorderWidth(0.01f);

					PdfPCell cell58 = new PdfPCell(new Paragraph(form.getPaymentType(), mainContent));
					cell58.setBorderWidth(0.01f);
					cell58.setColspan(3);

					/*
					 * For cheque details
					 */
					// For cheque Issued By
					PdfPCell cell62 = new PdfPCell(new Paragraph("Cheque Issued By", mainContent));
					cell62.setBorderWidth(0.01f);

					PdfPCell cell63 = new PdfPCell(new Paragraph(form.getChequeIssuedBy(), mainContent));
					cell63.setBorderWidth(0.01f);

					// For cheque No
					PdfPCell cell64 = new PdfPCell(new Paragraph("Cheque No.", mainContent));
					cell64.setBorderWidth(0.01f);

					PdfPCell cell65 = new PdfPCell(new Paragraph(form.getChequeNo(), mainContent));
					cell65.setBorderWidth(0.01f);

					// For cheque Bank Name
					PdfPCell cell66 = new PdfPCell(new Paragraph("Bank Name", mainContent));
					cell66.setBorderWidth(0.01f);

					PdfPCell cell67 = new PdfPCell(new Paragraph(form.getChequeBankName(), mainContent));
					cell67.setBorderWidth(0.01f);

					// For cheque Bank Branch
					PdfPCell cell68 = new PdfPCell(new Paragraph("Branch", mainContent));
					cell68.setBorderWidth(0.01f);

					PdfPCell cell69 = new PdfPCell(new Paragraph(form.getChequeBankBranch(), mainContent));
					cell69.setBorderWidth(0.01f);

					// For cheque Date
					PdfPCell cell70 = new PdfPCell(new Paragraph("Date", mainContent));
					cell70.setBorderWidth(0.01f);

					PdfPCell cell71 = new PdfPCell(new Paragraph(form.getChequeDate(), mainContent));
					cell71.setBorderWidth(0.01f);

					// For cheque amount
					PdfPCell cell72 = new PdfPCell(new Paragraph("Amount", mainContent));
					cell72.setBorderWidth(0.01f);

					PdfPCell cell73 = new PdfPCell(new Paragraph("" + form.getChequeAmt(), mainContent));
					cell73.setBorderWidth(0.01f);

					table5.addCell(cell57);
					table5.addCell(cell58);
					table5.addCell(cell62);
					table5.addCell(cell63);
					table5.addCell(cell64);
					table5.addCell(cell65);
					table5.addCell(cell66);
					table5.addCell(cell67);
					table5.addCell(cell68);
					table5.addCell(cell69);
					table5.addCell(cell70);
					table5.addCell(cell71);
					table5.addCell(cell72);
					table5.addCell(cell73);

				}

				if (form.getPaymentType().contains("Credit/Debit Card")) {

					/*
					 * For Payment Type
					 */
					PdfPCell cell57 = new PdfPCell(new Paragraph("Payment Type: ", mainContent));
					cell57.setBorderWidth(0.01f);

					PdfPCell cell58 = new PdfPCell(new Paragraph(form.getPaymentType(), mainContent));
					cell58.setBorderWidth(0.01f);
					cell58.setColspan(3);

					/*
					 * For Credit/Debit card details
					 */
					// For card no

					PdfPCell cell62 = new PdfPCell(new Paragraph("Card Amount", mainContent));
					cell62.setBorderWidth(0.01f);

					PdfPCell cell63 = new PdfPCell(new Paragraph("" + form.getCardAmount(), mainContent));
					cell63.setBorderWidth(0.01f);

					PdfPCell cell64 = new PdfPCell(new Paragraph("Card No.", mainContent));
					cell64.setBorderWidth(0.01f);

					PdfPCell cell65 = new PdfPCell(new Paragraph("" + form.getCardMobileNo(), mainContent));
					cell65.setBorderWidth(0.01f);

					// For mobile no
					PdfPCell cell66 = new PdfPCell(new Paragraph("Mobile No.", mainContent));
					cell66.setBorderWidth(0.01f);

					PdfPCell cell67 = new PdfPCell(new Paragraph("" + form.getcMobileNo(), mainContent));
					cell67.setBorderWidth(0.01f);

					table5.addCell(cell57);
					table5.addCell(cell58);
					table5.addCell(cell62);
					table5.addCell(cell63);
					table5.addCell(cell64);
					table5.addCell(cell65);
					table5.addCell(cell66);
					table5.addCell(cell67);

				}
				if (form.getPaymentType().contains("Credit Note")) {

					/*
					 * For Payment Type
					 */
					PdfPCell cell57 = new PdfPCell(new Paragraph("Payment Type: ", mainContent));
					cell57.setBorderWidth(0.01f);

					PdfPCell cell58 = new PdfPCell(new Paragraph(form.getPaymentType(), mainContent));
					cell58.setBorderWidth(0.01f);
					cell58.setColspan(3);

					/*
					 * For Credit Note details
					 */
					// For credit note balance
					PdfPCell cell62 = new PdfPCell(new Paragraph("Credit Balance", mainContent));
					cell62.setBorderWidth(0.01f);

					PdfPCell cell63 = new PdfPCell(new Paragraph("" + form.getCreditNoteBal(), mainContent));
					cell63.setBorderWidth(0.01f);

					table5.addCell(cell57);
					table5.addCell(cell58);
					table5.addCell(cell62);
					table5.addCell(cell63);

				}
				if (form.getPaymentType().contains("Other")) {

					/*
					 * For Payment Type
					 */
					PdfPCell cell57 = new PdfPCell(new Paragraph("Payment Type: ", mainContent));
					cell57.setBorderWidth(0.01f);
					cell57.setPaddingTop(2);

					PdfPCell cell58 = new PdfPCell(new Paragraph(form.getPaymentType(), mainContent));
					cell58.setBorderWidth(0.01f);
					cell58.setColspan(3);

					/*
					 * For Credit Note details
					 */
					// For credit note balance
					PdfPCell cell62 = new PdfPCell(new Paragraph("Other Type", mainContent));
					cell62.setBorderWidth(0.01f);

					PdfPCell cell63 = new PdfPCell(new Paragraph("" + form.getOtherType(), mainContent));
					cell63.setBorderWidth(0.01f);
					cell63.setColspan(3);

					PdfPCell cell75 = new PdfPCell(new Paragraph("Amount", mainContent));
					cell75.setBorderWidth(0.01f);
					cell75.setColspan(2);

					PdfPCell cell76 = new PdfPCell(new Paragraph("" + form.getOtherAmount(), mainContent));
					cell76.setBorderWidth(0.01f);
					cell76.setColspan(3);

					table5.addCell(cell57);
					table5.addCell(cell58);
					table5.addCell(cell62);
					table5.addCell(cell63);
					table5.addCell(cell75);
					table5.addCell(cell76);

				}

				document.add(table5);

			}

			document.close();

			System.out.println("Successfully written and generated Billing PDF Report");

			status = "success";

			connection.close();

		} catch (Exception exception) {
			exception.printStackTrace();
			status = "error";
		}
		return status;

	}

	public String convertIPDBillPDF(int patientID, int visitID, String realPath, String pdfFileName, int clinicID,
			int VisitTypeID, String ClinicSuffix, List<PatientForm> billList, String fullName, AmazonS3 s3,
			String s3reportFilePath, String bucketName) {

		int count = 1;

		String status = null;

		SimpleDateFormat dateFormat1 = new SimpleDateFormat("dd-MM-yyyy");

		SimpleDateFormat dateFormat2 = new SimpleDateFormat("yyyy-MM-dd");

		PatientDAOInf patientDAOInf = new PatientDAOImpl();

		String receiptNo = "";
		String receiptDate = "";
		double totalAmt = 0D;
		double netAmt = 0D;
		double advAmt = 0D;
		double balanceAmt = 0D;
		String paymentType = "";

		String patientName = "";

		String cheqNo = "";
		String bankName = "";
		String bankBranch = "";
		String cheqDate = "";
		double cheqAmt = 0D;
		double cashPaid = 0D;
		double cashToReturn = 0D;
		String cardNo = "";
		String cheqIssuedBy = "";
		double creditNote = 0D;

		double cardAmt = 0D;

		double otherAmt = 0D;

		double emergencyCharges = 0;
		double concessionCharges = 0D;
		double MLCCharges = 0D;
		double ambulanceDoctorCharges = 0D;

		String otherType = "";
		String mobileNo = "";

		String IPDAdmissionDateTime = "";
		String dischargeDate = "";

		String patientAddress = "";
		String patientMobileNo = "";

		/*
		 * Declaring variable which stores the location for FreeSans.ttf file to print
		 * marathi text on pdf
		 */
		String marathiFontDir = realPath + "fonts/FreeSans.ttf";

		ConfigurationUtil configXMLUtil = new ConfigurationUtil();

		try {
			connection = getConnection();

			/*
			 * retrieving admission date and time
			 */
			String retrieveIPDAdmissionDateTimeQuery = QueryMaker.RETRIEVE_ADMISSION_VISIT_DATE_TIME;

			preparedStatement = connection.prepareStatement(retrieveIPDAdmissionDateTimeQuery);

			preparedStatement.setInt(1, visitID);

			resultSet = preparedStatement.executeQuery();

			while (resultSet.next()) {

				IPDAdmissionDateTime = resultSet.getString("visitDate") + " " + resultSet.getString("visitTimeFrom");

			}

			resultSet.close();
			preparedStatement.close();

			/*
			 * retrieving discharge date
			 */
			String retrieveIPDDischargeDateQuery = QueryMaker.RETRIEVE_DISCHARGE_DATE;

			preparedStatement = connection.prepareStatement(retrieveIPDDischargeDateQuery);

			preparedStatement.setInt(1, visitID);
			preparedStatement.setInt(2, 1);
			preparedStatement.setInt(3, clinicID);

			resultSet = preparedStatement.executeQuery();

			while (resultSet.next()) {

				dischargeDate = resultSet.getString("visitDate");

			}

			resultSet.close();
			preparedStatement.close();

			/*
			 * Get visit ID list
			 */
			String retrieveVisitIDListQuery = QueryMaker.RETRIEVE_VISIT_ID_LIST;

			preparedStatement2 = connection.prepareStatement(retrieveVisitIDListQuery);
			preparedStatement2.setInt(1, visitID);
			preparedStatement2.setInt(2, visitID);
			resultSet2 = preparedStatement2.executeQuery();

			/*
			 * Generate the query to fetch patient details
			 */
			String retrievePatientDetailQuery = QueryMaker.RETRIEVE_PATIENT_DETAILS_FOR_PDF1;

			preparedStatement3 = connection.prepareStatement(retrievePatientDetailQuery);
			preparedStatement3.setInt(1, patientID);
			resultSet3 = preparedStatement3.executeQuery();

			while (resultSet3.next()) {

				if (resultSet3.getString("middleName") == null || resultSet3.getString("middleName") == ""
						|| resultSet3.getString("middleName").isEmpty()) {
					patientName = resultSet3.getString("firstName") + " " + resultSet3.getString("lastName");
				} else {
					patientName = resultSet3.getString("firstName") + " " + resultSet3.getString("middleName") + " "
							+ resultSet3.getString("lastName");
				}

				patientAddress = resultSet3.getString("address");
				patientMobileNo = resultSet3.getString("mobile");

			}

			resultSet3.close();
			preparedStatement3.close();

			/*
			 * Generate query to fetch payment details by visitID
			 */
			String retrievePaymentDetailsQuery = QueryMaker.RETRIEVE_PAYMENT_DEATILS_FOR_PDF;

			preparedStatement4 = connection.prepareStatement(retrievePaymentDetailsQuery);
			preparedStatement4.setInt(1, visitID);
			resultSet4 = preparedStatement4.executeQuery();

			while (resultSet4.next()) {
				cheqNo = resultSet4.getString("chequeNumber");
				bankName = resultSet4.getString("bankName");
				bankBranch = resultSet4.getString("bankBranch");
				cheqDate = resultSet4.getString("chequeDate");

				if (cheqDate == null || cheqDate == "" || cheqDate.isEmpty()) {
					cheqDate = "";
				} else {
					cheqDate = dateFormat1.format(dateFormat2.parse(cheqDate));
				}

				cheqAmt = resultSet4.getDouble("chequeAmount");
				cashPaid = resultSet4.getDouble("cashPaid");
				cashToReturn = resultSet4.getDouble("cashToReturn");
				cardNo = resultSet4.getString("cardNumber");
				creditNote = resultSet4.getDouble("creditNote");
				mobileNo = resultSet4.getString("mobile");
				cheqIssuedBy = resultSet4.getString("chequeIssueBy");
				otherType = resultSet4.getString("otherMode");
				cardAmt = resultSet4.getDouble("cardAmount");
				otherAmt = resultSet4.getDouble("otherModeAmt");
			}

			resultSet4.close();
			preparedStatement4.close();

			String clinicRegNo = patientDAOInf.retrieveClinicRegNoByClinicID(clinicID, patientID);

			for (PatientForm form : billList) {
				netAmt = form.getNetAmount();
				totalAmt = form.getTotalAmount();
				concessionCharges = form.getTotalDiscount();
				emergencyCharges = form.getEmergencyCharges();
				advAmt = form.getAdvPayment();
				balanceAmt = form.getBalPayment();
				receiptNo = form.getReceiptNo();
				receiptDate = form.getReceiptDate();
				paymentType = form.getPaymentType();
				MLCCharges = form.getMlcCharges();
				ambulanceDoctorCharges = form.getAmbulanceDoctorCharges();

				System.out.println("eme chrge:" + emergencyCharges + "..mlc chrg:0" + MLCCharges + ".. ambu chang:"
						+ ambulanceDoctorCharges);
			}

			/*
			 * Getting image path from XML
			 */
			String A5ImagePath = configXMLUtil.getLetterHeadImage();

			/*
			 * Getting page size from XMl
			 */
			String pageSize = "A4";

			/*
			 * Setting path to store PDF file
			 */
			File file = new File(realPath + "/" + pdfFileName);
			/*
			 * Creating Document for PDF
			 */
			Document document = null;

			/*
			 * Checking whether pageSize tag in XMl contains A5 or A4, according to that
			 * setting PDF page size
			 */
			if (pageSize.equals("A5")) {
				document = new Document(PageSize.A5);
			} else if (pageSize.equals("A4")) {
				document = new Document(PageSize.A4);
			}

			PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(file));

			Font Font1 = new Font(Font.FontFamily.TIMES_ROMAN, 10, Font.NORMAL);
			Font Font3 = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.NORMAL);
			Font Font2 = new Font(Font.FontFamily.TIMES_ROMAN, 10, Font.BOLD);
			Font Font4 = new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.BOLD);
			Font Font5 = new Font(Font.FontFamily.TIMES_ROMAN, 10, Font.BOLD);
			Font mainContent = new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.NORMAL);
			Font mainContent1 = new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.NORMAL);
			mainContent1.setColor(BaseColor.GRAY);
			/*
			 * Defining marathi font
			 */
			Font marathiFont = FontFactory.getFont(marathiFontDir, BaseFont.IDENTITY_H, BaseFont.EMBEDDED);

			document.open();

			/*
			 * Adding image
			 */
			PdfContentByte canvas = writer.getDirectContentUnder();

			/*
			 * Checking whether pageSize is A4 or A5, according to that background image is
			 * being set
			 */
			Image image;

			if (pageSize.equals("A5")) {
				if (A5ImagePath == null || A5ImagePath == "") {

					image = null;

				} else {

					if (A5ImagePath.isEmpty()) {
						image = null;
					} else {

						S3ObjectInputStream s3ObjectInputStream = s3
								.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, A5ImagePath))
								.getObjectContent();

						IOUtils.copy(s3ObjectInputStream,
								new FileOutputStream(new File(realPath + "images/" + A5ImagePath)));

						image = Image.getInstance(realPath + "images/" + A5ImagePath);

						image.setAbsolutePosition(0, 0);

						image.scaleToFit(PageSize.A5.getWidth(), PageSize.A5.getHeight());

						canvas.saveState();
						PdfGState state = new PdfGState();
						canvas.setGState(state);
						canvas.addImage(image);
						canvas.restoreState();
					}

				}
			} else if (pageSize.equals("A4")) {
				if (A5ImagePath == null || A5ImagePath == "") {

					image = null;

				} else {

					if (A5ImagePath.isEmpty()) {
						image = null;
					} else {

						S3ObjectInputStream s3ObjectInputStream = s3
								.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, A5ImagePath))
								.getObjectContent();

						IOUtils.copy(s3ObjectInputStream,
								new FileOutputStream(new File(realPath + "images/" + A5ImagePath)));

						image = Image.getInstance(realPath + "images/" + A5ImagePath);

						image.setAbsolutePosition(0, 0);

						image.scaleToFit(PageSize.A4.getWidth(), PageSize.A4.getHeight());

						canvas.saveState();
						PdfGState state = new PdfGState();
						canvas.setGState(state);
						canvas.addImage(image);
						canvas.restoreState();
					}

				}
			}

			/*
			 * Setting header
			 */
			document.addCreator("eDhanvantari");
			document.addTitle("IPD Billing");

			int newPageCheck = 1;

			while (resultSet2.next()) {

				double chargeTotal = 0D;

				int visitID1 = resultSet2.getInt("id");

				String visitDate = resultSet2.getString("visitDate");

				int visitTypeID = resultSet2.getInt("visitTypeID");

				double visitAdvancePayment = resultSet2.getDouble("advancePayment");

				double visitEmergencyCharges = resultSet2.getDouble("emergencyPayment");

				double visitMLCCharges = resultSet2.getDouble("MLCCharges");

				double visitAmbulanceDoctorCharges = resultSet2.getDouble("ambulanceDoctorsCharges");

				// verify whether visitTYpeID of the current visit is od discharge type
				boolean dischargeVisit = patientDAOInf.verifyIPDDischargeVisitType(visitTypeID);

				if (dischargeVisit) {

					List<PatientForm> IPDBillTariffChargeList = patientDAOInf.retrieveIPDChargesByVisitID(visitID1,
							ActivityStatus.TARIFF);

					List<PatientForm> IPDBillConsultantChargeList = patientDAOInf.retrieveIPDChargesByVisitID(visitID1,
							ActivityStatus.CONSULTANT);

					List<PatientForm> OTBillChargeList = patientDAOInf.retrieveOTChargesByVisitID(visitID1);

					if (newPageCheck > 1) {
						document.newPage();

						if (pageSize.equals("A5")) {
							if (A5ImagePath == null || A5ImagePath == "") {

								image = null;

							} else {

								if (A5ImagePath.isEmpty()) {
									image = null;
								} else {

									S3ObjectInputStream s3ObjectInputStream = s3.getObject(
											new GetObjectRequest(bucketName + "/" + s3reportFilePath, A5ImagePath))
											.getObjectContent();

									IOUtils.copy(s3ObjectInputStream,
											new FileOutputStream(new File(realPath + "images/" + A5ImagePath)));

									image = Image.getInstance(realPath + "images/" + A5ImagePath);

									image.setAbsolutePosition(0, 0);

									image.scaleToFit(PageSize.A5.getWidth(), PageSize.A5.getHeight());

									canvas.saveState();
									PdfGState state = new PdfGState();
									canvas.setGState(state);
									canvas.addImage(image);
									canvas.restoreState();
								}

							}
						} else if (pageSize.equals("A4")) {
							if (A5ImagePath == null || A5ImagePath == "") {

								image = null;

							} else {

								if (A5ImagePath.isEmpty()) {
									image = null;
								} else {

									S3ObjectInputStream s3ObjectInputStream = s3.getObject(
											new GetObjectRequest(bucketName + "/" + s3reportFilePath, A5ImagePath))
											.getObjectContent();

									IOUtils.copy(s3ObjectInputStream,
											new FileOutputStream(new File(realPath + "images/" + A5ImagePath)));

									image = Image.getInstance(realPath + "images/" + A5ImagePath);

									image.setAbsolutePosition(0, 0);

									image.scaleToFit(PageSize.A4.getWidth(), PageSize.A4.getHeight());

									canvas.saveState();
									PdfGState state = new PdfGState();
									canvas.setGState(state);
									canvas.addImage(image);
									canvas.restoreState();
								}

							}
						}
					}

					PdfPTable table = new PdfPTable(4);

					table.setFooterRows(1);
					table.setWidthPercentage(100);
					Rectangle rect = new Rectangle(270, 700);
					table.setWidthPercentage(new float[] { 50, 85, 50, 85 }, rect);

					PdfPCell cell = new PdfPCell(new Paragraph("Bill Receipt - " + visitDate, Font5));
					cell.setPaddingTop(120);
					cell.setPaddingBottom(10);
					cell.setBorder(Rectangle.NO_BORDER);
					cell.setHorizontalAlignment(Element.ALIGN_CENTER);
					cell.setUseBorderPadding(true);
					cell.setColspan(4);
					cell.setBorderWidthBottom(1f);
					cell.setBorderColorBottom(BaseColor.DARK_GRAY);
					cell.setBorderColor(BaseColor.WHITE);

					/*
					 * For Patient Name
					 */
					PdfPCell cell2 = new PdfPCell(new Paragraph("Patient Name", Font4));
					cell2.setBorderWidth(0.01f);
					cell2.setPaddingBottom(5);
					cell2.setBorderWidthLeft(0.2f);
					cell2.setBorderColor(BaseColor.WHITE);

					PdfPCell cell3 = new PdfPCell(new Paragraph(patientName + "(" + clinicRegNo + ")", mainContent));
					cell3.setBorderWidth(0.2f);
					cell3.setPaddingBottom(5);
					cell3.setColspan(3);
					cell3.setBorderColor(BaseColor.WHITE);

					/*
					 * For mobile no
					 */
					PdfPCell cell02 = new PdfPCell(new Paragraph("Mobile No.", Font4));
					cell02.setBorderWidth(0.01f);
					cell02.setPaddingBottom(5);
					cell02.setBorderWidthLeft(0.2f);
					cell02.setBorderColor(BaseColor.WHITE);

					PdfPCell cell03 = new PdfPCell(new Paragraph(patientMobileNo, mainContent));
					cell03.setBorderWidth(0.2f);
					cell03.setPaddingBottom(5);
					cell03.setBorderColor(BaseColor.WHITE);

					/*
					 * For mobile no
					 */
					PdfPCell cell022 = new PdfPCell(new Paragraph("Address", Font4));
					cell022.setBorderWidth(0.01f);
					cell022.setPaddingBottom(5);
					cell022.setBorderWidthLeft(0.2f);
					cell022.setBorderColor(BaseColor.WHITE);

					PdfPCell cell033 = new PdfPCell(new Paragraph(patientAddress, mainContent));
					cell033.setBorderWidth(0.2f);
					cell033.setPaddingBottom(5);
					cell033.setBorderColor(BaseColor.WHITE);

					/*
					 * For admission date and time
					 */
					PdfPCell cell021 = new PdfPCell(new Paragraph("Admission Date & Time", Font4));
					cell021.setBorderWidth(0.01f);
					cell021.setPaddingBottom(5);
					cell021.setBorderWidthLeft(0.2f);
					cell021.setBorderColor(BaseColor.WHITE);

					PdfPCell cell031 = new PdfPCell(new Paragraph(IPDAdmissionDateTime, mainContent));
					cell031.setBorderWidth(0.2f);
					cell031.setPaddingBottom(5);
					cell031.setBorderColor(BaseColor.WHITE);

					/*
					 * For Discharge date
					 */
					PdfPCell cell0221 = new PdfPCell(new Paragraph("Discharge Date", Font4));
					cell0221.setBorderWidth(0.01f);
					cell0221.setPaddingBottom(5);
					cell0221.setBorderWidthLeft(0.2f);
					cell0221.setBorderColor(BaseColor.WHITE);

					PdfPCell cell0331 = new PdfPCell(new Paragraph(dischargeDate, mainContent));
					cell0331.setBorderWidth(0.2f);
					cell0331.setPaddingBottom(5);
					cell0331.setBorderColor(BaseColor.WHITE);

					/*
					 * For receipt date and time
					 */
					PdfPCell cell0211 = new PdfPCell(new Paragraph("Receipt Date and Time", Font4));
					cell0211.setBorderWidth(0.01f);
					cell0211.setPaddingBottom(5);
					cell0211.setBorderWidthLeft(0.2f);
					cell0211.setBorderColor(BaseColor.WHITE);

					PdfPCell cell0311 = new PdfPCell(new Paragraph(receiptDate, mainContent));
					cell0311.setBorderWidth(0.2f);
					cell0311.setPaddingBottom(5);
					cell0311.setBorderColor(BaseColor.WHITE);

					/*
					 * For receipt no
					 */
					PdfPCell cell02211 = new PdfPCell(new Paragraph("Receipt No.", Font4));
					cell02211.setBorderWidth(0.01f);
					cell02211.setPaddingBottom(5);
					cell02211.setBorderWidthLeft(0.2f);
					cell02211.setBorderColor(BaseColor.WHITE);

					PdfPCell cell03311 = new PdfPCell(new Paragraph(receiptNo, mainContent));
					cell03311.setBorderWidth(0.2f);
					cell03311.setPaddingBottom(5);
					cell03311.setBorderColor(BaseColor.WHITE);

					/*
					 * adding all cell to the table to create tabular structure
					 */

					table.addCell(cell);
					// table.addCell(cell1);
					table.addCell(cell2);
					table.addCell(cell3);
					table.addCell(cell02);
					table.addCell(cell03);
					table.addCell(cell022);
					table.addCell(cell033);
					table.addCell(cell021);
					table.addCell(cell031);
					table.addCell(cell0221);
					table.addCell(cell0331);
					table.addCell(cell0211);
					table.addCell(cell0311);
					table.addCell(cell02211);
					table.addCell(cell03311);

					document.add(table);

					if (IPDBillTariffChargeList.size() > 0 || IPDBillConsultantChargeList.size() > 0
							|| OTBillChargeList.size() > 0) {

						/*
						 * For Receipt details
						 */
						PdfPTable table2 = new PdfPTable(6);
						table2.setWidthPercentage(100);
						Rectangle rect02 = new Rectangle(270, 700);
						table2.setWidthPercentage(new float[] { 20, 100, 55, 20, 35, 30 }, rect02);

						/*
						 * For blank space
						 */
						PdfPCell cell7 = new PdfPCell(new Paragraph("", Font2));
						cell7.setColspan(6);
						cell7.setBorderColor(BaseColor.WHITE);

						table2.addCell(cell7);

						count = 1;

						/*
						 * Creating header titles for table
						 */
						// For Sr.No.
						PdfPCell cell8 = new PdfPCell(new Paragraph("Sr.No.", Font1));
						cell8.setBorderWidth(0.01f);
						cell8.setPaddingBottom(3);
						cell8.setBorderColor(BaseColor.GRAY);

						// For Product req.
						PdfPCell cell9 = new PdfPCell(new Paragraph("Charge For", Font1));
						cell9.setBorderWidth(0.01f);
						cell9.setPaddingBottom(3);
						cell9.setBorderColor(BaseColor.GRAY);

						// For Rate
						PdfPCell cell12 = new PdfPCell(new Paragraph("OT Date & Time(If any)", Font1));
						cell12.setBorderWidth(0.01f);
						cell12.setPaddingBottom(3);
						cell12.setColspan(1);
						cell12.setBorderColor(BaseColor.GRAY);

						// For Amount
						PdfPCell cell16 = new PdfPCell(new Paragraph("Rate", Font1));
						cell16.setBorderWidth(0.01f);
						cell16.setPaddingBottom(3);
						cell16.setBorderColor(BaseColor.GRAY);

						// For Amount
						PdfPCell cell161 = new PdfPCell(new Paragraph("Quantity", Font1));
						cell161.setBorderWidth(0.01f);
						cell161.setPaddingBottom(3);
						// cell161.setColspan(1);
						cell161.setBorderColor(BaseColor.GRAY);

						// For Amount
						PdfPCell cell162 = new PdfPCell(new Paragraph("Amount", Font1));
						cell162.setBorderWidth(0.01f);
						cell162.setPaddingBottom(3);
						cell162.setBorderColor(BaseColor.GRAY);

						table2.addCell(cell8);
						table2.addCell(cell9);
						// table2.addCell(cell10);
						table2.addCell(cell12);
						table2.addCell(cell16);
						table2.addCell(cell161);
						table2.addCell(cell162);

						if (IPDBillTariffChargeList.size() > 0) {

							/*
							 * For Tariff charges header
							 */
							PdfPCell cell07 = new PdfPCell(new Paragraph("Tariff Charges", Font2));
							cell07.setColspan(6);
							cell07.setBorderWidth(0.01f);
							cell07.setPaddingBottom(3);
							cell07.setBorderColor(BaseColor.GRAY);

							table2.addCell(cell07);

							for (PatientForm form : IPDBillTariffChargeList) {

								chargeTotal = chargeTotal + form.getIPDAmount();

								// For Sr.No.
								PdfPCell cell17 = new PdfPCell(new Paragraph("" + count, mainContent));
								cell17.setBorderWidth(0.01f);
								cell17.setPaddingBottom(3);
								cell17.setHorizontalAlignment(Element.ALIGN_CENTER);
								cell17.setBorderColor(BaseColor.GRAY);

								// For Product req.
								PdfPCell cell18 = new PdfPCell(new Paragraph(form.getIPDChargeName(), mainContent));
								cell18.setBorderWidth(0.01f);
								cell18.setPaddingBottom(3);
								cell18.setBorderColor(BaseColor.GRAY);

								// For Rate
								PdfPCell cell20 = new PdfPCell(new Paragraph("", mainContent));
								cell20.setBorderWidth(0.01f);
								cell20.setPaddingBottom(3);
								cell20.setHorizontalAlignment(Element.ALIGN_CENTER);
								cell20.setBorderColor(BaseColor.GRAY);

								// For Amount
								PdfPCell cell23 = new PdfPCell(new Paragraph("" + form.getIPDRate(), mainContent));
								cell23.setBorderWidth(0.01f);
								cell23.setPaddingBottom(3);
								cell23.setHorizontalAlignment(Element.ALIGN_CENTER);
								cell23.setBorderColor(BaseColor.GRAY);

								// For Amount
								PdfPCell cell24 = new PdfPCell(new Paragraph("" + form.getIPDQuantity(), mainContent));
								cell24.setBorderWidth(0.01f);
								cell24.setPaddingBottom(3);
								cell24.setHorizontalAlignment(Element.ALIGN_CENTER);
								cell24.setBorderColor(BaseColor.GRAY);

								// For Amount
								PdfPCell cell241 = new PdfPCell(new Paragraph("" + form.getIPDAmount(), mainContent));
								cell241.setBorderWidth(0.01f);
								cell241.setPaddingBottom(3);
								cell241.setHorizontalAlignment(Element.ALIGN_CENTER);
								cell241.setBorderColor(BaseColor.GRAY);

								count++;

								table2.addCell(cell17);
								table2.addCell(cell18);
								table2.addCell(cell20);
								table2.addCell(cell23);
								table2.addCell(cell24);
								table2.addCell(cell241);

							}

						}

						if (IPDBillConsultantChargeList.size() > 0) {

							/*
							 * For Tariff charges header
							 */
							PdfPCell cell07 = new PdfPCell(new Paragraph("Consultant Charges", Font2));
							cell07.setColspan(6);
							cell07.setBorderWidth(0.01f);
							cell07.setPaddingBottom(3);
							cell07.setBorderColor(BaseColor.GRAY);

							table2.addCell(cell07);

							for (PatientForm form : IPDBillConsultantChargeList) {

								chargeTotal = chargeTotal + form.getIPDAmount();

								// For Sr.No.
								PdfPCell cell17 = new PdfPCell(new Paragraph("" + count, mainContent));
								cell17.setBorderWidth(0.01f);
								cell17.setPaddingBottom(3);
								cell17.setHorizontalAlignment(Element.ALIGN_CENTER);
								cell17.setBorderColor(BaseColor.GRAY);

								// For Product req.
								PdfPCell cell18 = new PdfPCell(new Paragraph(form.getIPDChargeName(), mainContent));
								cell18.setBorderWidth(0.01f);
								cell18.setPaddingBottom(3);
								cell18.setBorderColor(BaseColor.GRAY);

								// For Rate
								PdfPCell cell20 = new PdfPCell(new Paragraph("", mainContent));
								cell20.setBorderWidth(0.01f);
								cell20.setPaddingBottom(3);
								cell20.setHorizontalAlignment(Element.ALIGN_CENTER);
								cell20.setBorderColor(BaseColor.GRAY);

								// For Amount
								PdfPCell cell23 = new PdfPCell(new Paragraph("" + form.getIPDRate(), mainContent));
								cell23.setBorderWidth(0.01f);
								cell23.setPaddingBottom(3);
								cell23.setHorizontalAlignment(Element.ALIGN_CENTER);
								cell23.setBorderColor(BaseColor.GRAY);

								// For Amount
								PdfPCell cell24 = new PdfPCell(new Paragraph("" + form.getIPDQuantity(), mainContent));
								cell24.setBorderWidth(0.01f);
								cell24.setPaddingBottom(3);
								cell24.setHorizontalAlignment(Element.ALIGN_CENTER);
								cell24.setBorderColor(BaseColor.GRAY);

								// For Amount
								PdfPCell cell241 = new PdfPCell(new Paragraph("" + form.getIPDAmount(), mainContent));
								cell241.setBorderWidth(0.01f);
								cell241.setPaddingBottom(3);
								cell241.setHorizontalAlignment(Element.ALIGN_CENTER);
								cell241.setBorderColor(BaseColor.GRAY);

								count++;

								table2.addCell(cell17);
								table2.addCell(cell18);
								table2.addCell(cell20);
								table2.addCell(cell23);
								table2.addCell(cell24);
								table2.addCell(cell241);

							}

						}

						if (OTBillChargeList.size() > 0) {

							/*
							 * For Tariff charges header
							 */
							PdfPCell cell07 = new PdfPCell(new Paragraph("OT Charges", Font2));
							cell07.setColspan(6);
							cell07.setBorderWidth(0.01f);
							cell07.setPaddingBottom(3);
							cell07.setBorderColor(BaseColor.GRAY);

							table2.addCell(cell07);

							for (PatientForm form : OTBillChargeList) {

								chargeTotal = chargeTotal + form.getRate();

								// For Sr.No.
								PdfPCell cell17 = new PdfPCell(new Paragraph("" + count, mainContent));
								cell17.setBorderWidth(0.01f);
								cell17.setPaddingBottom(3);
								cell17.setHorizontalAlignment(Element.ALIGN_CENTER);
								cell17.setBorderColor(BaseColor.GRAY);

								// For Product req.
								PdfPCell cell18 = new PdfPCell(new Paragraph(form.getOperationName(), mainContent));
								cell18.setBorderWidth(0.01f);
								cell18.setPaddingBottom(3);
								cell18.setBorderColor(BaseColor.GRAY);

								// For Rate
								PdfPCell cell20 = new PdfPCell(new Paragraph(form.getOtDateTime(), mainContent));
								cell20.setBorderWidth(0.01f);
								cell20.setPaddingBottom(3);
								cell20.setHorizontalAlignment(Element.ALIGN_CENTER);
								cell20.setBorderColor(BaseColor.GRAY);

								// For Amount
								PdfPCell cell23 = new PdfPCell(new Paragraph("" + form.getRate(), mainContent));
								cell23.setBorderWidth(0.01f);
								cell23.setPaddingBottom(3);
								cell23.setHorizontalAlignment(Element.ALIGN_CENTER);
								cell23.setBorderColor(BaseColor.GRAY);

								// For Amount
								PdfPCell cell24 = new PdfPCell(new Paragraph("", mainContent));
								cell24.setBorderWidth(0.01f);
								cell24.setPaddingBottom(3);
								cell24.setHorizontalAlignment(Element.ALIGN_CENTER);
								cell24.setBorderColor(BaseColor.GRAY);

								// For Amount
								PdfPCell cell241 = new PdfPCell(new Paragraph("" + form.getRate(), mainContent));
								cell241.setBorderWidth(0.01f);
								cell241.setPaddingBottom(3);
								cell241.setHorizontalAlignment(Element.ALIGN_CENTER);
								cell241.setBorderColor(BaseColor.GRAY);

								count++;

								table2.addCell(cell17);
								table2.addCell(cell18);
								table2.addCell(cell20);
								table2.addCell(cell23);
								table2.addCell(cell24);
								table2.addCell(cell241);

								// Retrieving OTcharge disbursement from OTChargeDisbursement table for the
								// corresponding otChargeID
								String retrieveOTChargeDisbursementQuery = QueryMaker.RETRIEVE_OT_CHARGES_DISBURSEMENT_LIST;

								preparedStatement = connection.prepareStatement(retrieveOTChargeDisbursementQuery);

								preparedStatement.setInt(1, form.getOtChargeID());

								resultSet = preparedStatement.executeQuery();

								while (resultSet.next()) {

									PdfPCell cell1811 = new PdfPCell(new Paragraph("", mainContent));
									cell1811.setBorderWidth(0.01f);
									cell1811.setPaddingBottom(3);
									cell1811.setBorderColor(BaseColor.GRAY);

									// For disbursement charge type
									PdfPCell cell181 = new PdfPCell(
											new Paragraph(resultSet.getString("chargeType"), mainContent));
									cell181.setBorderWidth(0.01f);
									cell181.setColspan(2);
									cell181.setPaddingBottom(3);
									cell181.setHorizontalAlignment(Element.ALIGN_RIGHT);
									cell181.setBorderColor(BaseColor.GRAY);

									// For disbursement charges
									PdfPCell cell201 = new PdfPCell(
											new Paragraph("" + resultSet.getDouble("charges"), mainContent));
									cell201.setBorderWidth(0.01f);
									cell201.setPaddingBottom(3);
									cell201.setHorizontalAlignment(Element.ALIGN_CENTER);
									cell201.setBorderColor(BaseColor.GRAY);

									PdfPCell cell2011 = new PdfPCell(new Paragraph("", mainContent));
									cell2011.setBorderWidth(0.01f);
									cell2011.setPaddingBottom(3);
									cell2011.setColspan(2);
									cell2011.setHorizontalAlignment(Element.ALIGN_CENTER);
									cell2011.setBorderColor(BaseColor.GRAY);

									table2.addCell(cell1811);
									table2.addCell(cell181);
									table2.addCell(cell201);
									table2.addCell(cell2011);

								}

								resultSet.close();
								preparedStatement.close();

							}

						}

						// For total amount
						PdfPCell cell25 = new PdfPCell(new Paragraph("Total Amount", Font1));
						cell25.setBorderWidth(0.01f);
						cell25.setPaddingBottom(3);
						cell25.setColspan(5);
						cell25.setHorizontalAlignment(Element.ALIGN_RIGHT);
						cell25.setBorderColor(BaseColor.GRAY);

						// For total amount
						PdfPCell cell26 = new PdfPCell(new Paragraph("" + chargeTotal, Font1));
						cell26.setBorderWidth(0.01f);
						cell26.setPaddingBottom(3);
						cell26.setHorizontalAlignment(Element.ALIGN_CENTER);
						cell26.setBorderColor(BaseColor.GRAY);

						// For emergency charges
						PdfPCell cell251 = new PdfPCell(new Paragraph("Emergency Charges", Font1));
						cell251.setBorderWidth(0.01f);
						cell251.setPaddingBottom(3);
						cell251.setColspan(5);
						cell251.setHorizontalAlignment(Element.ALIGN_RIGHT);
						cell251.setBorderColor(BaseColor.GRAY);

						// For emergency charges
						PdfPCell cell261 = new PdfPCell(new Paragraph("" + visitEmergencyCharges, Font1));
						cell261.setBorderWidth(0.01f);
						cell261.setPaddingBottom(3);
						cell261.setHorizontalAlignment(Element.ALIGN_CENTER);
						cell261.setBorderColor(BaseColor.GRAY);

						// For MLC charges
						PdfPCell cell25101 = new PdfPCell(new Paragraph("MLC Charges", Font1));
						cell25101.setBorderWidth(0.01f);
						cell25101.setPaddingBottom(3);
						cell25101.setColspan(5);
						cell25101.setHorizontalAlignment(Element.ALIGN_RIGHT);
						cell25101.setBorderColor(BaseColor.GRAY);

						// For MLC charges
						PdfPCell cell26101 = new PdfPCell(new Paragraph("" + visitMLCCharges, Font1));
						cell26101.setBorderWidth(0.01f);
						cell26101.setPaddingBottom(3);
						cell26101.setHorizontalAlignment(Element.ALIGN_CENTER);
						cell26101.setBorderColor(BaseColor.GRAY);

						// For ambulance doctor charges
						PdfPCell cell251011 = new PdfPCell(new Paragraph("Ambulance's Doctor Charges", Font1));
						cell251011.setBorderWidth(0.01f);
						cell251011.setPaddingBottom(3);
						cell251011.setColspan(5);
						cell251011.setHorizontalAlignment(Element.ALIGN_RIGHT);
						cell251011.setBorderColor(BaseColor.GRAY);

						// For ambulance doctor charges
						PdfPCell cell261011 = new PdfPCell(new Paragraph("" + visitAmbulanceDoctorCharges, Font1));
						cell261011.setBorderWidth(0.01f);
						cell261011.setPaddingBottom(3);
						cell261011.setHorizontalAlignment(Element.ALIGN_CENTER);
						cell261011.setBorderColor(BaseColor.GRAY);

						// For Advance Payment
						PdfPCell cell29 = new PdfPCell(new Paragraph("Advance Payment", Font1));
						cell29.setBorderWidth(0.01f);
						cell29.setPaddingBottom(3);
						cell29.setColspan(5);
						cell29.setHorizontalAlignment(Element.ALIGN_RIGHT);
						cell29.setBorderColor(BaseColor.GRAY);

						// For Advance Payment
						PdfPCell cell31 = new PdfPCell(new Paragraph("" + visitAdvancePayment, Font1));
						cell31.setBorderWidth(0.01f);
						cell31.setPaddingBottom(3);
						cell31.setHorizontalAlignment(Element.ALIGN_CENTER);
						cell31.setBorderColor(BaseColor.GRAY);

						table2.addCell(cell25);
						table2.addCell(cell26);
						table2.addCell(cell251);
						table2.addCell(cell261);
						table2.addCell(cell25101);
						table2.addCell(cell26101);
						table2.addCell(cell251011);
						table2.addCell(cell261011);
						table2.addCell(cell29);
						table2.addCell(cell31);

						/*
						 * For blank space
						 */
						PdfPCell cell71 = new PdfPCell(new Paragraph("", Font2));
						cell71.setColspan(6);
						cell71.setBorderColor(BaseColor.WHITE);
						cell71.setBorderColorTop(BaseColor.GRAY);

						table2.addCell(cell71);

						count = 1;

						// For total amount
						PdfPCell cell2500 = new PdfPCell(new Paragraph("Grand Total Amount", Font2));
						cell2500.setBorderWidth(0.01f);
						cell2500.setPaddingBottom(3);
						cell2500.setColspan(5);
						cell2500.setHorizontalAlignment(Element.ALIGN_RIGHT);
						cell2500.setBorderColor(BaseColor.GRAY);

						// For total amount
						PdfPCell cell2600 = new PdfPCell(new Paragraph("" + totalAmt, Font2));
						cell2600.setBorderWidth(0.01f);
						cell2600.setPaddingBottom(3);
						cell2600.setHorizontalAlignment(Element.ALIGN_CENTER);
						cell2600.setBorderColor(BaseColor.GRAY);

						// For emergency charges
						PdfPCell cell25100 = new PdfPCell(new Paragraph("Total Emergency Charges", Font2));
						cell25100.setBorderWidth(0.01f);
						cell25100.setPaddingBottom(3);
						cell25100.setColspan(5);
						cell25100.setHorizontalAlignment(Element.ALIGN_RIGHT);
						cell25100.setBorderColor(BaseColor.GRAY);

						// For emergency charges
						PdfPCell cell26100 = new PdfPCell(new Paragraph("" + emergencyCharges, Font2));
						cell26100.setBorderWidth(0.01f);
						cell26100.setPaddingBottom(3);
						cell26100.setHorizontalAlignment(Element.ALIGN_CENTER);
						cell26100.setBorderColor(BaseColor.GRAY);

						// For MLC charges
						PdfPCell cell2510001 = new PdfPCell(new Paragraph("MLC Charges", Font2));
						cell2510001.setBorderWidth(0.01f);
						cell2510001.setPaddingBottom(3);
						cell2510001.setColspan(5);
						cell2510001.setHorizontalAlignment(Element.ALIGN_RIGHT);
						cell2510001.setBorderColor(BaseColor.GRAY);

						// For MLC charges
						PdfPCell cell2610001 = new PdfPCell(new Paragraph("" + MLCCharges, Font2));
						cell2610001.setBorderWidth(0.01f);
						cell2610001.setPaddingBottom(3);
						cell2610001.setHorizontalAlignment(Element.ALIGN_CENTER);
						cell2610001.setBorderColor(BaseColor.GRAY);

						// For MLC charges
						PdfPCell cell25100011 = new PdfPCell(new Paragraph("Ambulance's Doctor Charges", Font2));
						cell25100011.setBorderWidth(0.01f);
						cell25100011.setPaddingBottom(3);
						cell25100011.setColspan(5);
						cell25100011.setHorizontalAlignment(Element.ALIGN_RIGHT);
						cell25100011.setBorderColor(BaseColor.GRAY);

						// For MLC charges
						PdfPCell cell26100011 = new PdfPCell(new Paragraph("" + ambulanceDoctorCharges, Font2));
						cell26100011.setBorderWidth(0.01f);
						cell26100011.setPaddingBottom(3);
						cell26100011.setHorizontalAlignment(Element.ALIGN_CENTER);
						cell26100011.setBorderColor(BaseColor.GRAY);

						// For Concession
						PdfPCell cell2511 = new PdfPCell(new Paragraph("Concession (if any)", Font2));
						cell2511.setBorderWidth(0.01f);
						cell2511.setPaddingBottom(3);
						cell2511.setColspan(5);
						cell2511.setHorizontalAlignment(Element.ALIGN_RIGHT);
						cell2511.setBorderColor(BaseColor.GRAY);

						// For Concession
						PdfPCell cell2611 = new PdfPCell(new Paragraph("" + concessionCharges, Font2));
						cell2611.setBorderWidth(0.01f);
						cell2611.setPaddingBottom(3);
						cell2611.setHorizontalAlignment(Element.ALIGN_CENTER);
						cell2611.setBorderColor(BaseColor.GRAY);

						// For Net Amount
						PdfPCell cell27 = new PdfPCell(new Paragraph("Net Amount", Font2));
						cell27.setBorderWidth(0.01f);
						cell27.setPaddingBottom(3);
						cell27.setColspan(5);
						cell27.setHorizontalAlignment(Element.ALIGN_RIGHT);
						cell27.setBorderColor(BaseColor.GRAY);

						// For Net Amount
						PdfPCell cell28 = new PdfPCell(new Paragraph("" + netAmt, Font2));
						cell28.setBorderWidth(0.01f);
						cell28.setPaddingBottom(3);
						cell28.setHorizontalAlignment(Element.ALIGN_CENTER);
						cell28.setBorderColor(BaseColor.GRAY);

						// For Advance Payment
						PdfPCell cell2900 = new PdfPCell(new Paragraph("Advance Payment", Font2));
						cell2900.setBorderWidth(0.01f);
						cell2900.setPaddingBottom(3);
						cell2900.setColspan(5);
						cell2900.setHorizontalAlignment(Element.ALIGN_RIGHT);
						cell2900.setBorderColor(BaseColor.GRAY);

						// For Advance Payment
						PdfPCell cell3100 = new PdfPCell(new Paragraph("" + advAmt, Font2));
						cell3100.setBorderWidth(0.01f);
						cell3100.setPaddingBottom(3);
						cell3100.setHorizontalAlignment(Element.ALIGN_CENTER);
						cell3100.setBorderColor(BaseColor.GRAY);

						// For Balance Payment
						PdfPCell cell41 = new PdfPCell(new Paragraph("Balance Payment", Font2));
						cell41.setBorderWidth(0.01f);
						cell41.setPaddingBottom(3);
						cell41.setColspan(5);
						cell41.setHorizontalAlignment(Element.ALIGN_RIGHT);
						cell41.setBorderColor(BaseColor.GRAY);

						// For balance Payment
						PdfPCell cell42 = new PdfPCell(new Paragraph("" + balanceAmt, Font2));
						cell42.setBorderWidth(0.01f);
						cell42.setPaddingBottom(3);
						cell42.setHorizontalAlignment(Element.ALIGN_CENTER);
						cell42.setBorderColor(BaseColor.GRAY);

						// for blank
						PdfPCell cell42_0 = new PdfPCell(new Paragraph("", Font2));
						cell42_0.setBorderWidth(0.01f);
						cell42_0.setPaddingBottom(3);
						cell42_0.setColspan(6);
						cell42_0.setBorder(Rectangle.NO_BORDER);
						cell42_0.setHorizontalAlignment(Element.ALIGN_CENTER);
						cell42_0.setBorderColorTop(BaseColor.GRAY);

						table2.addCell(cell2500);
						table2.addCell(cell2600);
						table2.addCell(cell25100);
						table2.addCell(cell26100);
						table2.addCell(cell2510001);
						table2.addCell(cell2610001);
						table2.addCell(cell25100011);
						table2.addCell(cell26100011);
						table2.addCell(cell2511);
						table2.addCell(cell2611);
						table2.addCell(cell27);
						table2.addCell(cell28);
						table2.addCell(cell2900);
						table2.addCell(cell3100);
						table2.addCell(cell41);
						table2.addCell(cell42);
						table2.addCell(cell42_0);

						document.add(table2);

					} else {

						/*
						 * For Receipt details
						 */
						PdfPTable table2 = new PdfPTable(6);
						table2.setWidthPercentage(100);
						Rectangle rect02 = new Rectangle(270, 700);
						table2.setWidthPercentage(new float[] { 20, 100, 55, 20, 35, 30 }, rect02);

						/*
						 * For blank space
						 */
						PdfPCell cell7 = new PdfPCell(new Paragraph("", Font2));
						cell7.setColspan(6);
						cell7.setBorderColor(BaseColor.WHITE);

						table2.addCell(cell7);

						count = 1;

						// For total amount
						PdfPCell cell25 = new PdfPCell(new Paragraph("Grand Total Amount", Font2));
						cell25.setBorderWidth(0.01f);
						cell25.setPaddingBottom(3);
						cell25.setColspan(5);
						cell25.setHorizontalAlignment(Element.ALIGN_RIGHT);
						cell25.setBorderColor(BaseColor.GRAY);

						// For total amount
						PdfPCell cell26 = new PdfPCell(new Paragraph("" + totalAmt, Font2));
						cell26.setBorderWidth(0.01f);
						cell26.setPaddingBottom(3);
						cell26.setHorizontalAlignment(Element.ALIGN_CENTER);
						cell26.setBorderColor(BaseColor.GRAY);

						// For emergency charges
						PdfPCell cell251 = new PdfPCell(new Paragraph("Total Emergency Charges", Font2));
						cell251.setBorderWidth(0.01f);
						cell251.setPaddingBottom(3);
						cell251.setColspan(5);
						cell251.setHorizontalAlignment(Element.ALIGN_RIGHT);
						cell251.setBorderColor(BaseColor.GRAY);

						// For emergency charges
						PdfPCell cell261 = new PdfPCell(new Paragraph("" + emergencyCharges, Font2));
						cell261.setBorderWidth(0.01f);
						cell261.setPaddingBottom(3);
						cell261.setHorizontalAlignment(Element.ALIGN_CENTER);
						cell261.setBorderColor(BaseColor.GRAY);

						// For MLC charges
						PdfPCell cell25101 = new PdfPCell(new Paragraph("MLC Charges", Font2));
						cell25101.setBorderWidth(0.01f);
						cell25101.setPaddingBottom(3);
						cell25101.setColspan(5);
						cell25101.setHorizontalAlignment(Element.ALIGN_RIGHT);
						cell25101.setBorderColor(BaseColor.GRAY);

						// For MLC charges
						PdfPCell cell26101 = new PdfPCell(new Paragraph("" + MLCCharges, Font2));
						cell26101.setBorderWidth(0.01f);
						cell26101.setPaddingBottom(3);
						cell26101.setHorizontalAlignment(Element.ALIGN_CENTER);
						cell26101.setBorderColor(BaseColor.GRAY);

						// For ambulance's doctor charges
						PdfPCell cell251011 = new PdfPCell(new Paragraph("Ambulance's Doctor Charges", Font2));
						cell251011.setBorderWidth(0.01f);
						cell251011.setPaddingBottom(3);
						cell251011.setColspan(5);
						cell251011.setHorizontalAlignment(Element.ALIGN_RIGHT);
						cell251011.setBorderColor(BaseColor.GRAY);

						// For ambulance's doctor charges
						PdfPCell cell261011 = new PdfPCell(new Paragraph("" + ambulanceDoctorCharges, Font2));
						cell261011.setBorderWidth(0.01f);
						cell261011.setPaddingBottom(3);
						cell261011.setHorizontalAlignment(Element.ALIGN_CENTER);
						cell261011.setBorderColor(BaseColor.GRAY);

						// For Concession
						PdfPCell cell2511 = new PdfPCell(new Paragraph("Concession (if any)", Font2));
						cell2511.setBorderWidth(0.01f);
						cell2511.setPaddingBottom(3);
						cell2511.setColspan(5);
						cell2511.setHorizontalAlignment(Element.ALIGN_RIGHT);
						cell2511.setBorderColor(BaseColor.GRAY);

						// For Concession
						PdfPCell cell2611 = new PdfPCell(new Paragraph("" + concessionCharges, Font2));
						cell2611.setBorderWidth(0.01f);
						cell2611.setPaddingBottom(3);
						cell2611.setHorizontalAlignment(Element.ALIGN_CENTER);
						cell2611.setBorderColor(BaseColor.GRAY);

						// For Net Amount
						PdfPCell cell27 = new PdfPCell(new Paragraph("Net Amount", Font2));
						cell27.setBorderWidth(0.01f);
						cell27.setPaddingBottom(3);
						cell27.setColspan(5);
						cell27.setHorizontalAlignment(Element.ALIGN_RIGHT);
						cell27.setBorderColor(BaseColor.GRAY);

						// For Net Amount
						PdfPCell cell28 = new PdfPCell(new Paragraph("" + netAmt, Font2));
						cell28.setBorderWidth(0.01f);
						cell28.setPaddingBottom(3);
						cell28.setHorizontalAlignment(Element.ALIGN_CENTER);
						cell28.setBorderColor(BaseColor.GRAY);

						// For Advance Payment
						PdfPCell cell29 = new PdfPCell(new Paragraph("Advance Payment", Font2));
						cell29.setBorderWidth(0.01f);
						cell29.setPaddingBottom(3);
						cell29.setColspan(5);
						cell29.setHorizontalAlignment(Element.ALIGN_RIGHT);
						cell29.setBorderColor(BaseColor.GRAY);

						// For Advance Payment
						PdfPCell cell31 = new PdfPCell(new Paragraph("" + advAmt, Font2));
						cell31.setBorderWidth(0.01f);
						cell31.setPaddingBottom(3);
						cell31.setHorizontalAlignment(Element.ALIGN_CENTER);
						cell31.setBorderColor(BaseColor.GRAY);

						// For Balance Payment
						PdfPCell cell41 = new PdfPCell(new Paragraph("Balance Payment", Font2));
						cell41.setBorderWidth(0.01f);
						cell41.setPaddingBottom(3);
						cell41.setColspan(5);
						cell41.setHorizontalAlignment(Element.ALIGN_RIGHT);
						cell41.setBorderColor(BaseColor.GRAY);

						// For balance Payment
						PdfPCell cell42 = new PdfPCell(new Paragraph("" + balanceAmt, Font2));
						cell42.setBorderWidth(0.01f);
						cell42.setPaddingBottom(3);
						cell42.setHorizontalAlignment(Element.ALIGN_CENTER);
						cell42.setBorderColor(BaseColor.GRAY);

						// for blank
						PdfPCell cell42_0 = new PdfPCell(new Paragraph("", Font2));
						cell42_0.setBorderWidth(0.01f);
						cell42_0.setPaddingBottom(3);
						cell42_0.setColspan(6);
						cell42_0.setBorder(Rectangle.NO_BORDER);
						cell42_0.setHorizontalAlignment(Element.ALIGN_CENTER);
						cell42_0.setBorderColorTop(BaseColor.GRAY);

						table2.addCell(cell25);
						table2.addCell(cell26);
						table2.addCell(cell251);
						table2.addCell(cell261);
						table2.addCell(cell25101);
						table2.addCell(cell26101);
						table2.addCell(cell251011);
						table2.addCell(cell261011);
						table2.addCell(cell2511);
						table2.addCell(cell2611);
						table2.addCell(cell27);
						table2.addCell(cell28);
						table2.addCell(cell29);
						table2.addCell(cell31);
						table2.addCell(cell41);
						table2.addCell(cell42);
						table2.addCell(cell42_0);

						document.add(table2);

					}

				} else {

					List<PatientForm> IPDBillTariffChargeList = patientDAOInf.retrieveIPDChargesByVisitID(visitID1,
							ActivityStatus.TARIFF);

					List<PatientForm> IPDBillConsultantChargeList = patientDAOInf.retrieveIPDChargesByVisitID(visitID1,
							ActivityStatus.CONSULTANT);

					List<PatientForm> OTBillChargeList = patientDAOInf.retrieveOTChargesByVisitID(visitID1);

					if (newPageCheck > 1) {
						document.newPage();

						if (pageSize.equals("A5")) {
							if (A5ImagePath == null || A5ImagePath == "") {

								image = null;

							} else {

								if (A5ImagePath.isEmpty()) {
									image = null;
								} else {

									S3ObjectInputStream s3ObjectInputStream = s3.getObject(
											new GetObjectRequest(bucketName + "/" + s3reportFilePath, A5ImagePath))
											.getObjectContent();

									IOUtils.copy(s3ObjectInputStream,
											new FileOutputStream(new File(realPath + "images/" + A5ImagePath)));

									image = Image.getInstance(realPath + "images/" + A5ImagePath);

									image.setAbsolutePosition(0, 0);

									image.scaleToFit(PageSize.A5.getWidth(), PageSize.A5.getHeight());

									canvas.saveState();
									PdfGState state = new PdfGState();
									canvas.setGState(state);
									canvas.addImage(image);
									canvas.restoreState();
								}

							}
						} else if (pageSize.equals("A4")) {
							if (A5ImagePath == null || A5ImagePath == "") {

								image = null;

							} else {

								if (A5ImagePath.isEmpty()) {
									image = null;
								} else {

									S3ObjectInputStream s3ObjectInputStream = s3.getObject(
											new GetObjectRequest(bucketName + "/" + s3reportFilePath, A5ImagePath))
											.getObjectContent();

									IOUtils.copy(s3ObjectInputStream,
											new FileOutputStream(new File(realPath + "images/" + A5ImagePath)));

									image = Image.getInstance(realPath + "images/" + A5ImagePath);

									image.setAbsolutePosition(0, 0);

									image.scaleToFit(PageSize.A4.getWidth(), PageSize.A4.getHeight());

									canvas.saveState();
									PdfGState state = new PdfGState();
									canvas.setGState(state);
									canvas.addImage(image);
									canvas.restoreState();
								}

							}
						}
					}

					PdfPTable table = new PdfPTable(4);

					table.setFooterRows(1);
					table.setWidthPercentage(100);
					Rectangle rect = new Rectangle(270, 700);
					table.setWidthPercentage(new float[] { 50, 85, 50, 85 }, rect);

					PdfPCell cell = new PdfPCell(new Paragraph("Bill Receipt - " + visitDate, Font5));
					cell.setPaddingTop(120);
					cell.setPaddingBottom(10);
					cell.setBorder(Rectangle.NO_BORDER);
					cell.setHorizontalAlignment(Element.ALIGN_CENTER);
					cell.setUseBorderPadding(true);
					cell.setColspan(4);
					cell.setBorderWidthBottom(1f);
					cell.setBorderColorBottom(BaseColor.DARK_GRAY);
					cell.setBorderColor(BaseColor.WHITE);

					/*
					 * For Patient Name
					 */
					PdfPCell cell2 = new PdfPCell(new Paragraph("Patient Name", Font4));
					cell2.setBorderWidth(0.01f);
					cell2.setPaddingBottom(5);
					cell2.setBorderWidthLeft(0.2f);
					cell2.setBorderColor(BaseColor.WHITE);

					PdfPCell cell3 = new PdfPCell(new Paragraph(patientName + "(" + clinicRegNo + ")", mainContent));
					cell3.setBorderWidth(0.2f);
					cell3.setPaddingBottom(5);
					cell3.setColspan(3);
					cell3.setBorderColor(BaseColor.WHITE);

					/*
					 * For mobile no
					 */
					PdfPCell cell02 = new PdfPCell(new Paragraph("Mobile No.", Font4));
					cell02.setBorderWidth(0.01f);
					cell02.setPaddingBottom(5);
					cell02.setBorderWidthLeft(0.2f);
					cell02.setBorderColor(BaseColor.WHITE);

					PdfPCell cell03 = new PdfPCell(new Paragraph(patientMobileNo, mainContent));
					cell03.setBorderWidth(0.2f);
					cell03.setPaddingBottom(5);
					cell03.setBorderColor(BaseColor.WHITE);

					/*
					 * For mobile no
					 */
					PdfPCell cell022 = new PdfPCell(new Paragraph("Address", Font4));
					cell022.setBorderWidth(0.01f);
					cell022.setPaddingBottom(5);
					cell022.setBorderWidthLeft(0.2f);
					cell022.setBorderColor(BaseColor.WHITE);

					PdfPCell cell033 = new PdfPCell(new Paragraph(patientAddress, mainContent));
					cell033.setBorderWidth(0.2f);
					cell033.setPaddingBottom(5);
					cell033.setBorderColor(BaseColor.WHITE);

					/*
					 * For admission date and time
					 */
					PdfPCell cell021 = new PdfPCell(new Paragraph("Admission Date & Time", Font4));
					cell021.setBorderWidth(0.01f);
					cell021.setPaddingBottom(5);
					cell021.setBorderWidthLeft(0.2f);
					cell021.setBorderColor(BaseColor.WHITE);

					PdfPCell cell031 = new PdfPCell(new Paragraph(IPDAdmissionDateTime, mainContent));
					cell031.setBorderWidth(0.2f);
					cell031.setPaddingBottom(5);
					cell031.setBorderColor(BaseColor.WHITE);

					/*
					 * For Discharge date
					 */
					PdfPCell cell0221 = new PdfPCell(new Paragraph("Discharge Date", Font4));
					cell0221.setBorderWidth(0.01f);
					cell0221.setPaddingBottom(5);
					cell0221.setBorderWidthLeft(0.2f);
					cell0221.setBorderColor(BaseColor.WHITE);

					PdfPCell cell0331 = new PdfPCell(new Paragraph(dischargeDate, mainContent));
					cell0331.setBorderWidth(0.2f);
					cell0331.setPaddingBottom(5);
					cell0331.setBorderColor(BaseColor.WHITE);

					/*
					 * For receipt date and time
					 */
					PdfPCell cell0211 = new PdfPCell(new Paragraph("Receipt Date and Time", Font4));
					cell0211.setBorderWidth(0.01f);
					cell0211.setPaddingBottom(5);
					cell0211.setBorderWidthLeft(0.2f);
					cell0211.setBorderColor(BaseColor.WHITE);

					PdfPCell cell0311 = new PdfPCell(new Paragraph(receiptDate, mainContent));
					cell0311.setBorderWidth(0.2f);
					cell0311.setPaddingBottom(5);
					cell0311.setBorderColor(BaseColor.WHITE);

					/*
					 * For receipt no
					 */
					PdfPCell cell02211 = new PdfPCell(new Paragraph("Receipt No.", Font4));
					cell02211.setBorderWidth(0.01f);
					cell02211.setPaddingBottom(5);
					cell02211.setBorderWidthLeft(0.2f);
					cell02211.setBorderColor(BaseColor.WHITE);

					PdfPCell cell03311 = new PdfPCell(new Paragraph(receiptNo, mainContent));
					cell03311.setBorderWidth(0.2f);
					cell03311.setPaddingBottom(5);
					cell03311.setBorderColor(BaseColor.WHITE);

					/*
					 * adding all cell to the table to create tabular structure
					 */

					table.addCell(cell);
					// table.addCell(cell1);
					table.addCell(cell2);
					table.addCell(cell3);
					table.addCell(cell02);
					table.addCell(cell03);
					table.addCell(cell022);
					table.addCell(cell033);
					table.addCell(cell021);
					table.addCell(cell031);
					table.addCell(cell0221);
					table.addCell(cell0331);
					table.addCell(cell0211);
					table.addCell(cell0311);
					table.addCell(cell02211);
					table.addCell(cell03311);

					document.add(table);

					/*
					 * For Receipt details
					 */
					PdfPTable table2 = new PdfPTable(6);
					table2.setWidthPercentage(100);
					Rectangle rect02 = new Rectangle(270, 700);
					table2.setWidthPercentage(new float[] { 20, 100, 55, 20, 35, 30 }, rect02);

					/*
					 * For blank space
					 */
					PdfPCell cell7 = new PdfPCell(new Paragraph("", Font2));
					cell7.setColspan(6);
					cell7.setBorderColor(BaseColor.WHITE);

					table2.addCell(cell7);

					count = 1;

					/*
					 * Creating header titles for table
					 */
					// For Sr.No.
					PdfPCell cell8 = new PdfPCell(new Paragraph("Sr.No.", Font1));
					cell8.setBorderWidth(0.01f);
					cell8.setPaddingBottom(3);
					cell8.setBorderColor(BaseColor.GRAY);

					// For Product req.
					PdfPCell cell9 = new PdfPCell(new Paragraph("Charge For", Font1));
					cell9.setBorderWidth(0.01f);
					cell9.setPaddingBottom(3);
					cell9.setBorderColor(BaseColor.GRAY);

					// For Rate
					PdfPCell cell12 = new PdfPCell(new Paragraph("OT Date & Time(If any)", Font1));
					cell12.setBorderWidth(0.01f);
					cell12.setPaddingBottom(3);
					cell12.setColspan(1);
					cell12.setBorderColor(BaseColor.GRAY);

					// For Amount
					PdfPCell cell16 = new PdfPCell(new Paragraph("Rate", Font1));
					cell16.setBorderWidth(0.01f);
					cell16.setPaddingBottom(3);
					cell16.setBorderColor(BaseColor.GRAY);

					// For Amount
					PdfPCell cell161 = new PdfPCell(new Paragraph("Quantity", Font1));
					cell161.setBorderWidth(0.01f);
					cell161.setPaddingBottom(3);
					// cell161.setColspan(1);
					cell161.setBorderColor(BaseColor.GRAY);

					// For Amount
					PdfPCell cell162 = new PdfPCell(new Paragraph("Amount", Font1));
					cell162.setBorderWidth(0.01f);
					cell162.setPaddingBottom(3);
					cell162.setBorderColor(BaseColor.GRAY);

					table2.addCell(cell8);
					table2.addCell(cell9);
					// table2.addCell(cell10);
					table2.addCell(cell12);
					table2.addCell(cell16);
					table2.addCell(cell161);
					table2.addCell(cell162);

					if (IPDBillTariffChargeList.size() > 0) {

						/*
						 * For Tariff charges header
						 */
						PdfPCell cell07 = new PdfPCell(new Paragraph("Tariff Charges", Font2));
						cell07.setColspan(6);
						cell07.setBorderWidth(0.01f);
						cell07.setPaddingBottom(3);
						cell07.setBorderColor(BaseColor.GRAY);

						table2.addCell(cell07);

						for (PatientForm form : IPDBillTariffChargeList) {

							chargeTotal = chargeTotal + form.getIPDAmount();

							// For Sr.No.
							PdfPCell cell17 = new PdfPCell(new Paragraph("" + count, mainContent));
							cell17.setBorderWidth(0.01f);
							cell17.setPaddingBottom(3);
							cell17.setHorizontalAlignment(Element.ALIGN_CENTER);
							cell17.setBorderColor(BaseColor.GRAY);

							// For Product req.
							PdfPCell cell18 = new PdfPCell(new Paragraph(form.getIPDChargeName(), mainContent));
							cell18.setBorderWidth(0.01f);
							cell18.setPaddingBottom(3);
							cell18.setBorderColor(BaseColor.GRAY);

							// For Rate
							PdfPCell cell20 = new PdfPCell(new Paragraph("", mainContent));
							cell20.setBorderWidth(0.01f);
							cell20.setPaddingBottom(3);
							cell20.setHorizontalAlignment(Element.ALIGN_CENTER);
							cell20.setBorderColor(BaseColor.GRAY);

							// For Amount
							PdfPCell cell23 = new PdfPCell(new Paragraph("" + form.getIPDRate(), mainContent));
							cell23.setBorderWidth(0.01f);
							cell23.setPaddingBottom(3);
							cell23.setHorizontalAlignment(Element.ALIGN_CENTER);
							cell23.setBorderColor(BaseColor.GRAY);

							// For Amount
							PdfPCell cell24 = new PdfPCell(new Paragraph("" + form.getIPDQuantity(), mainContent));
							cell24.setBorderWidth(0.01f);
							cell24.setPaddingBottom(3);
							cell24.setHorizontalAlignment(Element.ALIGN_CENTER);
							cell24.setBorderColor(BaseColor.GRAY);

							// For Amount
							PdfPCell cell241 = new PdfPCell(new Paragraph("" + form.getIPDAmount(), mainContent));
							cell241.setBorderWidth(0.01f);
							cell241.setPaddingBottom(3);
							cell241.setHorizontalAlignment(Element.ALIGN_CENTER);
							cell241.setBorderColor(BaseColor.GRAY);

							count++;

							table2.addCell(cell17);
							table2.addCell(cell18);
							table2.addCell(cell20);
							table2.addCell(cell23);
							table2.addCell(cell24);
							table2.addCell(cell241);

						}

					}

					if (IPDBillConsultantChargeList.size() > 0) {

						/*
						 * For Tariff charges header
						 */
						PdfPCell cell07 = new PdfPCell(new Paragraph("Consultant Charges", Font2));
						cell07.setColspan(6);
						cell07.setBorderWidth(0.01f);
						cell07.setPaddingBottom(3);
						cell07.setBorderColor(BaseColor.GRAY);

						table2.addCell(cell07);

						for (PatientForm form : IPDBillConsultantChargeList) {

							chargeTotal = chargeTotal + form.getIPDAmount();

							// For Sr.No.
							PdfPCell cell17 = new PdfPCell(new Paragraph("" + count, mainContent));
							cell17.setBorderWidth(0.01f);
							cell17.setPaddingBottom(3);
							cell17.setHorizontalAlignment(Element.ALIGN_CENTER);
							cell17.setBorderColor(BaseColor.GRAY);

							// For Product req.
							PdfPCell cell18 = new PdfPCell(new Paragraph(form.getIPDChargeName(), mainContent));
							cell18.setBorderWidth(0.01f);
							cell18.setPaddingBottom(3);
							cell18.setBorderColor(BaseColor.GRAY);

							// For Rate
							PdfPCell cell20 = new PdfPCell(new Paragraph("", mainContent));
							cell20.setBorderWidth(0.01f);
							cell20.setPaddingBottom(3);
							cell20.setHorizontalAlignment(Element.ALIGN_CENTER);
							cell20.setBorderColor(BaseColor.GRAY);

							// For Amount
							PdfPCell cell23 = new PdfPCell(new Paragraph("" + form.getIPDRate(), mainContent));
							cell23.setBorderWidth(0.01f);
							cell23.setPaddingBottom(3);
							cell23.setHorizontalAlignment(Element.ALIGN_CENTER);
							cell23.setBorderColor(BaseColor.GRAY);

							// For Amount
							PdfPCell cell24 = new PdfPCell(new Paragraph("" + form.getIPDQuantity(), mainContent));
							cell24.setBorderWidth(0.01f);
							cell24.setPaddingBottom(3);
							cell24.setHorizontalAlignment(Element.ALIGN_CENTER);
							cell24.setBorderColor(BaseColor.GRAY);

							// For Amount
							PdfPCell cell241 = new PdfPCell(new Paragraph("" + form.getIPDAmount(), mainContent));
							cell241.setBorderWidth(0.01f);
							cell241.setPaddingBottom(3);
							cell241.setHorizontalAlignment(Element.ALIGN_CENTER);
							cell241.setBorderColor(BaseColor.GRAY);

							count++;

							table2.addCell(cell17);
							table2.addCell(cell18);
							table2.addCell(cell20);
							table2.addCell(cell23);
							table2.addCell(cell24);
							table2.addCell(cell241);

						}

					}

					if (OTBillChargeList.size() > 0) {

						/*
						 * For Tariff charges header
						 */
						PdfPCell cell07 = new PdfPCell(new Paragraph("OT Charges", Font2));
						cell07.setColspan(6);
						cell07.setBorderWidth(0.01f);
						cell07.setPaddingBottom(3);
						cell07.setBorderColor(BaseColor.GRAY);

						table2.addCell(cell07);

						for (PatientForm form : OTBillChargeList) {

							chargeTotal = chargeTotal + form.getRate();

							// For Sr.No.
							PdfPCell cell17 = new PdfPCell(new Paragraph("" + count, mainContent));
							cell17.setBorderWidth(0.01f);
							cell17.setPaddingBottom(3);
							cell17.setHorizontalAlignment(Element.ALIGN_CENTER);
							cell17.setBorderColor(BaseColor.GRAY);

							// For Product req.
							PdfPCell cell18 = new PdfPCell(new Paragraph(form.getOperationName(), mainContent));
							cell18.setBorderWidth(0.01f);
							cell18.setPaddingBottom(3);
							cell18.setBorderColor(BaseColor.GRAY);

							// For Rate
							PdfPCell cell20 = new PdfPCell(new Paragraph(form.getOtDateTime(), mainContent));
							cell20.setBorderWidth(0.01f);
							cell20.setPaddingBottom(3);
							cell20.setHorizontalAlignment(Element.ALIGN_CENTER);
							cell20.setBorderColor(BaseColor.GRAY);

							// For Amount
							PdfPCell cell23 = new PdfPCell(new Paragraph("" + form.getRate(), mainContent));
							cell23.setBorderWidth(0.01f);
							cell23.setPaddingBottom(3);
							cell23.setHorizontalAlignment(Element.ALIGN_CENTER);
							cell23.setBorderColor(BaseColor.GRAY);

							// For Amount
							PdfPCell cell24 = new PdfPCell(new Paragraph("", mainContent));
							cell24.setBorderWidth(0.01f);
							cell24.setPaddingBottom(3);
							cell24.setHorizontalAlignment(Element.ALIGN_CENTER);
							cell24.setBorderColor(BaseColor.GRAY);

							// For Amount
							PdfPCell cell241 = new PdfPCell(new Paragraph("" + form.getRate(), mainContent));
							cell241.setBorderWidth(0.01f);
							cell241.setPaddingBottom(3);
							cell241.setHorizontalAlignment(Element.ALIGN_CENTER);
							cell241.setBorderColor(BaseColor.GRAY);

							count++;

							table2.addCell(cell17);
							table2.addCell(cell18);
							table2.addCell(cell20);
							table2.addCell(cell23);
							table2.addCell(cell24);
							table2.addCell(cell241);

							// Retrieving OTcharge disbursement from OTChargeDisbursement table for the
							// corresponding otChargeID
							String retrieveOTChargeDisbursementQuery = QueryMaker.RETRIEVE_OT_CHARGES_DISBURSEMENT_LIST;

							preparedStatement = connection.prepareStatement(retrieveOTChargeDisbursementQuery);

							preparedStatement.setInt(1, form.getOtChargeID());

							resultSet = preparedStatement.executeQuery();

							while (resultSet.next()) {

								PdfPCell cell1811 = new PdfPCell(new Paragraph("", mainContent));
								cell1811.setBorderWidth(0.01f);
								cell1811.setPaddingBottom(3);
								cell1811.setBorderColor(BaseColor.GRAY);

								// For disbursement charge type
								PdfPCell cell181 = new PdfPCell(
										new Paragraph(resultSet.getString("chargeType"), mainContent));
								cell181.setBorderWidth(0.01f);
								cell181.setColspan(2);
								cell181.setPaddingBottom(3);
								cell181.setHorizontalAlignment(Element.ALIGN_RIGHT);
								cell181.setBorderColor(BaseColor.GRAY);

								// For disbursement charges
								PdfPCell cell201 = new PdfPCell(
										new Paragraph("" + resultSet.getDouble("charges"), mainContent));
								cell201.setBorderWidth(0.01f);
								cell201.setPaddingBottom(3);
								cell201.setHorizontalAlignment(Element.ALIGN_CENTER);
								cell201.setBorderColor(BaseColor.GRAY);

								PdfPCell cell2011 = new PdfPCell(new Paragraph("", mainContent));
								cell2011.setBorderWidth(0.01f);
								cell2011.setPaddingBottom(3);
								cell2011.setColspan(2);
								cell2011.setHorizontalAlignment(Element.ALIGN_CENTER);
								cell2011.setBorderColor(BaseColor.GRAY);

								table2.addCell(cell1811);
								table2.addCell(cell181);
								table2.addCell(cell201);
								table2.addCell(cell2011);

							}

							resultSet.close();
							preparedStatement.close();

						}

					}

					// For total amount
					PdfPCell cell25 = new PdfPCell(new Paragraph("Total Amount", Font1));
					cell25.setBorderWidth(0.01f);
					cell25.setPaddingBottom(3);
					cell25.setColspan(5);
					cell25.setHorizontalAlignment(Element.ALIGN_RIGHT);
					cell25.setBorderColor(BaseColor.GRAY);

					// For total amount
					PdfPCell cell26 = new PdfPCell(new Paragraph("" + chargeTotal, Font1));
					cell26.setBorderWidth(0.01f);
					cell26.setPaddingBottom(3);
					cell26.setHorizontalAlignment(Element.ALIGN_CENTER);
					cell26.setBorderColor(BaseColor.GRAY);

					// For emergency charges
					PdfPCell cell251 = new PdfPCell(new Paragraph("Emergency Charges", Font1));
					cell251.setBorderWidth(0.01f);
					cell251.setPaddingBottom(3);
					cell251.setColspan(5);
					cell251.setHorizontalAlignment(Element.ALIGN_RIGHT);
					cell251.setBorderColor(BaseColor.GRAY);

					// For emergency charges
					PdfPCell cell261 = new PdfPCell(new Paragraph("" + visitEmergencyCharges, Font1));
					cell261.setBorderWidth(0.01f);
					cell261.setPaddingBottom(3);
					cell261.setHorizontalAlignment(Element.ALIGN_CENTER);
					cell261.setBorderColor(BaseColor.GRAY);

					// For MLC charges
					PdfPCell cell25101 = new PdfPCell(new Paragraph("MLC Charges", Font1));
					cell25101.setBorderWidth(0.01f);
					cell25101.setPaddingBottom(3);
					cell25101.setColspan(5);
					cell25101.setHorizontalAlignment(Element.ALIGN_RIGHT);
					cell25101.setBorderColor(BaseColor.GRAY);

					// For MLC charges
					PdfPCell cell26101 = new PdfPCell(new Paragraph("" + visitMLCCharges, Font1));
					cell26101.setBorderWidth(0.01f);
					cell26101.setPaddingBottom(3);
					cell26101.setHorizontalAlignment(Element.ALIGN_CENTER);
					cell26101.setBorderColor(BaseColor.GRAY);

					// For ambulance doctor charges
					PdfPCell cell251011 = new PdfPCell(new Paragraph("Ambulance's Doctor Charges", Font1));
					cell251011.setBorderWidth(0.01f);
					cell251011.setPaddingBottom(3);
					cell251011.setColspan(5);
					cell251011.setHorizontalAlignment(Element.ALIGN_RIGHT);
					cell251011.setBorderColor(BaseColor.GRAY);

					// For ambulance doctor charges
					PdfPCell cell261011 = new PdfPCell(new Paragraph("" + visitAmbulanceDoctorCharges, Font1));
					cell261011.setBorderWidth(0.01f);
					cell261011.setPaddingBottom(3);
					cell261011.setHorizontalAlignment(Element.ALIGN_CENTER);
					cell261011.setBorderColor(BaseColor.GRAY);

					// For Advance Payment
					PdfPCell cell29 = new PdfPCell(new Paragraph("Advance Payment", Font1));
					cell29.setBorderWidth(0.01f);
					cell29.setPaddingBottom(3);
					cell29.setColspan(5);
					cell29.setHorizontalAlignment(Element.ALIGN_RIGHT);
					cell29.setBorderColor(BaseColor.GRAY);

					// For Advance Payment
					PdfPCell cell31 = new PdfPCell(new Paragraph("" + visitAdvancePayment, Font1));
					cell31.setBorderWidth(0.01f);
					cell31.setPaddingBottom(3);
					cell31.setHorizontalAlignment(Element.ALIGN_CENTER);
					cell31.setBorderColor(BaseColor.GRAY);

					table2.addCell(cell25);
					table2.addCell(cell26);
					table2.addCell(cell251);
					table2.addCell(cell261);
					table2.addCell(cell25101);
					table2.addCell(cell26101);
					table2.addCell(cell251011);
					table2.addCell(cell261011);
					table2.addCell(cell29);
					table2.addCell(cell31);

					document.add(table2);

				}

				newPageCheck++;

			}

			System.out.println("...paymentType..." + paymentType + "....visitID..." + visitID);

			/*
			 * For remaining details
			 */
			PdfPTable table4 = new PdfPTable(4);
			table4.setWidthPercentage(100);
			Rectangle rect3 = new Rectangle(270, 700);
			table4.setWidthPercentage(new float[] { 65, 70, 65, 70 }, rect3);

			PdfPCell cell571 = new PdfPCell(new Paragraph("", mainContent));
			cell571.setBorderWidth(0.01f);
			cell571.setPaddingBottom(2);
			cell571.setPaddingTop(2);
			cell571.setColspan(4);
			cell571.setBorderColor(BaseColor.WHITE);

			/*
			 * For Payment Type
			 */
			PdfPCell cell57 = new PdfPCell(new Paragraph("Payment Type: ", mainContent));
			cell57.setBorderWidth(0.01f);
			cell57.setPaddingBottom(2);
			cell57.setPaddingTop(2);
			cell57.setBorderColor(BaseColor.WHITE);

			PdfPCell cell58 = new PdfPCell(new Paragraph(paymentType, mainContent));
			cell58.setBorderWidth(0.01f);
			cell58.setPaddingBottom(2);
			cell58.setPaddingTop(2);
			cell58.setColspan(3);
			cell58.setBorderColor(BaseColor.WHITE);

			PdfPCell cell61 = new PdfPCell(new Paragraph("", mainContent));
			cell61.setBorderWidth(0.01f);
			cell61.setColspan(4);
			cell61.setBorderWidthBottom(0.5f);
			cell61.setBorderColorBottom(BaseColor.GRAY);
			cell61.setBorderColor(BaseColor.WHITE);

			table4.addCell(cell571);
			table4.addCell(cell57);
			table4.addCell(cell58);
			table4.addCell(cell61);

			/*
			 * Checking what the payment type is, printing details
			 */
			if (paymentType.contains("Cash")) {

				/*
				 * For Cash details
				 */
				// For cash paid
				PdfPCell cell62 = new PdfPCell(new Paragraph("Cash Paid", mainContent));
				cell62.setBorderWidth(0.01f);
				cell62.setPaddingBottom(2);
				cell62.setPaddingTop(2);
				cell62.setBorderColor(BaseColor.WHITE);

				PdfPCell cell63 = new PdfPCell(new Paragraph("" + cashPaid, mainContent));
				cell63.setBorderWidth(0.01f);
				cell63.setPaddingBottom(2);
				cell63.setPaddingTop(2);
				cell63.setBorderColor(BaseColor.WHITE);

				// For Cash to return
				PdfPCell cell64 = new PdfPCell(new Paragraph("Cash To Return", mainContent));
				cell64.setBorderWidth(0.01f);
				cell64.setPaddingBottom(2);
				cell64.setPaddingTop(2);
				cell64.setBorderColor(BaseColor.WHITE);

				PdfPCell cell65 = new PdfPCell(new Paragraph("" + cashToReturn, mainContent));
				cell65.setBorderWidth(0.01f);
				cell65.setPaddingBottom(2);
				cell65.setPaddingTop(2);
				cell65.setBorderColor(BaseColor.WHITE);

				table4.addCell(cell62);
				table4.addCell(cell63);
				table4.addCell(cell64);
				table4.addCell(cell65);

			}
			if (paymentType.contains("Cheque")) {

				/*
				 * For cheque details
				 */
				// For cheque Issued By
				PdfPCell cell62 = new PdfPCell(new Paragraph("Cheque Issued By", mainContent));
				cell62.setBorderWidth(0.01f);
				cell62.setPaddingBottom(2);
				cell62.setPaddingTop(2);
				cell62.setBorderColor(BaseColor.WHITE);

				PdfPCell cell63 = new PdfPCell(new Paragraph(cheqIssuedBy, mainContent));
				cell63.setBorderWidth(0.01f);
				cell63.setPaddingBottom(2);
				cell63.setPaddingTop(2);
				cell63.setBorderColor(BaseColor.WHITE);

				// For cheque No
				PdfPCell cell64 = new PdfPCell(new Paragraph("Cheque No.", mainContent));
				cell64.setBorderWidth(0.01f);
				cell64.setPaddingBottom(2);
				cell64.setPaddingTop(2);
				cell64.setBorderColor(BaseColor.WHITE);

				PdfPCell cell65 = new PdfPCell(new Paragraph(cheqNo, mainContent));
				cell65.setBorderWidth(0.01f);
				cell65.setPaddingBottom(2);
				cell65.setPaddingTop(2);
				cell65.setBorderColor(BaseColor.WHITE);

				// For cheque Bank Name
				PdfPCell cell66 = new PdfPCell(new Paragraph("Bank Name", mainContent));
				cell66.setBorderWidth(0.01f);
				cell66.setPaddingBottom(2);
				cell66.setPaddingTop(2);
				cell66.setBorderColor(BaseColor.WHITE);

				PdfPCell cell67 = new PdfPCell(new Paragraph(bankName, mainContent));
				cell67.setBorderWidth(0.01f);
				cell67.setPaddingBottom(2);
				cell67.setPaddingTop(2);
				cell67.setBorderColor(BaseColor.WHITE);

				// For cheque Bank Branch
				PdfPCell cell68 = new PdfPCell(new Paragraph("Branch", mainContent));
				cell68.setBorderWidth(0.01f);
				cell68.setPaddingBottom(2);
				cell68.setPaddingTop(2);
				cell68.setBorderColor(BaseColor.WHITE);

				PdfPCell cell69 = new PdfPCell(new Paragraph(bankBranch, mainContent));
				cell69.setBorderWidth(0.01f);
				cell69.setPaddingBottom(2);
				cell69.setPaddingTop(2);
				cell69.setBorderColor(BaseColor.WHITE);

				// For cheque Date
				PdfPCell cell70 = new PdfPCell(new Paragraph("Date", mainContent));
				cell70.setBorderWidth(0.01f);
				cell70.setPaddingBottom(2);
				cell70.setPaddingTop(2);
				cell70.setBorderColor(BaseColor.WHITE);

				PdfPCell cell71 = new PdfPCell(new Paragraph(cheqDate, mainContent));
				cell71.setBorderWidth(0.01f);
				cell71.setPaddingBottom(2);
				cell71.setPaddingTop(2);
				cell71.setBorderColor(BaseColor.WHITE);

				// For cheque amount
				PdfPCell cell72 = new PdfPCell(new Paragraph("Amount", mainContent));
				cell72.setBorderWidth(0.01f);
				cell72.setPaddingBottom(2);
				cell72.setPaddingTop(2);
				cell72.setBorderColor(BaseColor.WHITE);

				PdfPCell cell73 = new PdfPCell(new Paragraph("" + cheqAmt, mainContent));
				cell73.setBorderWidth(0.01f);
				cell73.setPaddingBottom(2);
				cell73.setPaddingTop(2);
				cell73.setBorderColor(BaseColor.WHITE);

				PdfPCell cell74 = new PdfPCell(new Paragraph("", mainContent));
				cell74.setBorderWidth(0.01f);
				cell74.setColspan(4);
				cell74.setBorderWidthBottom(0.5f);
				cell74.setBorderColorBottom(BaseColor.GRAY);
				cell74.setBorderColor(BaseColor.WHITE);

				// For ref receipt No.
				/*
				 * PdfPCell cell75 = new PdfPCell(new Paragraph("Ref. Receipt No.",
				 * mainContent)); cell75.setBorderWidth(0.01f); cell75.setPaddingBottom(2);
				 * cell75.setPaddingTop(2); cell75.setColspan(3);
				 * cell75.setHorizontalAlignment(Element.ALIGN_RIGHT);
				 * cell75.setBorderColor(BaseColor.WHITE);
				 */

				// For ref receipt No.
				/*
				 * PdfPCell cell76 = new PdfPCell(new Paragraph(refReceiptNo, mainContent));
				 * cell76.setBorderWidth(0.01f); cell76.setPaddingBottom(2);
				 * cell76.setPaddingTop(2); cell76.setBorderColor(BaseColor.WHITE);
				 */
				table4.addCell(cell62);
				table4.addCell(cell63);
				table4.addCell(cell64);
				table4.addCell(cell65);
				table4.addCell(cell66);
				table4.addCell(cell67);
				table4.addCell(cell68);
				table4.addCell(cell69);
				table4.addCell(cell70);
				table4.addCell(cell71);
				table4.addCell(cell72);
				table4.addCell(cell73);
				table4.addCell(cell74);
				// table4.addCell(cell75);
				// table4.addCell(cell76);

			}
			if (paymentType.contains("Credit/Debit Card")) {

				/*
				 * For Credit/Debit card details
				 */
				// For card no
				PdfPCell cell62 = new PdfPCell(new Paragraph("Card No.", mainContent));
				cell62.setBorderWidth(0.01f);
				cell62.setPaddingBottom(2);
				cell62.setPaddingTop(2);
				cell62.setBorderColor(BaseColor.WHITE);

				PdfPCell cell63 = new PdfPCell(new Paragraph("" + cardNo, mainContent));
				cell63.setBorderWidth(0.01f);
				cell63.setPaddingBottom(2);
				cell63.setPaddingTop(2);
				cell63.setBorderColor(BaseColor.WHITE);

				// For mobile no
				PdfPCell cell64 = new PdfPCell(new Paragraph("Mobile No.", mainContent));
				cell64.setBorderWidth(0.01f);
				cell64.setPaddingBottom(2);
				cell64.setPaddingTop(2);
				cell64.setBorderColor(BaseColor.WHITE);

				PdfPCell cell65 = new PdfPCell(new Paragraph("" + mobileNo, mainContent));
				cell65.setBorderWidth(0.01f);
				cell65.setPaddingBottom(2);
				cell65.setPaddingTop(2);
				cell65.setBorderColor(BaseColor.WHITE);

				// For ref receipt No.

				PdfPCell cell75 = new PdfPCell(new Paragraph("Card Amount", mainContent));
				cell75.setBorderWidth(0.01f);
				cell75.setPaddingBottom(2);
				cell75.setPaddingTop(2);
				cell75.setBorderColor(BaseColor.WHITE);

				// For ref receipt No.

				PdfPCell cell76 = new PdfPCell(new Paragraph("" + cardAmt, mainContent));
				cell76.setBorderWidth(0.01f);
				cell76.setPaddingBottom(2);
				cell76.setPaddingTop(2);
				cell76.setBorderColor(BaseColor.WHITE);

				table4.addCell(cell62);
				table4.addCell(cell63);
				table4.addCell(cell75);
				table4.addCell(cell76);
				table4.addCell(cell64);
				table4.addCell(cell65);

			}
			if (paymentType.contains("Credit Note")) {

				/*
				 * For Credit Note details
				 */
				// For credit note balance
				PdfPCell cell62 = new PdfPCell(new Paragraph("Credit Balance", mainContent));
				cell62.setBorderWidth(0.01f);
				cell62.setPaddingBottom(2);
				cell62.setPaddingTop(2);
				cell62.setBorderColor(BaseColor.WHITE);

				PdfPCell cell63 = new PdfPCell(new Paragraph("" + creditNote, mainContent));
				cell63.setBorderWidth(0.01f);
				cell63.setPaddingBottom(2);
				cell63.setPaddingTop(2);
				cell63.setColspan(3);
				cell63.setBorderColor(BaseColor.WHITE);

				// For ref receipt No.
				/*
				 * PdfPCell cell75 = new PdfPCell(new Paragraph("Ref. Receipt No.",
				 * mainContent)); cell75.setBorderWidth(0.01f); cell75.setPaddingBottom(2);
				 * cell75.setPaddingTop(2); cell75.setColspan(3);
				 * cell75.setHorizontalAlignment(Element.ALIGN_RIGHT);
				 * cell75.setBorderColor(BaseColor.WHITE);
				 */

				// For ref receipt No.
				/*
				 * PdfPCell cell76 = new PdfPCell(new Paragraph(refReceiptNo, mainContent));
				 * cell76.setBorderWidth(0.01f); cell76.setPaddingBottom(2);
				 * cell76.setPaddingTop(2); cell76.setBorderColor(BaseColor.WHITE);
				 */

				table4.addCell(cell62);
				table4.addCell(cell63);
				// table4.addCell(cell75);
				// table4.addCell(cell76);
			}
			if (paymentType.contains("Other")) {

				/*
				 * For Credit Note details
				 */
				// For credit note balance
				PdfPCell cell62 = new PdfPCell(new Paragraph("Other Type", mainContent));
				cell62.setBorderWidth(0.01f);
				cell62.setPaddingBottom(2);
				cell62.setPaddingTop(2);
				cell62.setBorderColor(BaseColor.WHITE);

				PdfPCell cell63 = new PdfPCell(new Paragraph("" + otherType, mainContent));
				cell63.setBorderWidth(0.01f);
				cell63.setPaddingBottom(2);
				cell63.setPaddingTop(2);
				cell63.setColspan(3);
				cell63.setBorderColor(BaseColor.WHITE);

				// For ref receipt No.

				PdfPCell cell75 = new PdfPCell(new Paragraph("Other Amount", mainContent));
				cell75.setBorderWidth(0.01f);
				cell75.setPaddingBottom(2);
				cell75.setPaddingTop(2);
				cell75.setBorderColor(BaseColor.WHITE);

				// For ref receipt No.

				PdfPCell cell76 = new PdfPCell(new Paragraph("" + otherAmt, mainContent));
				cell76.setBorderWidth(0.01f);
				cell76.setPaddingBottom(2);
				cell76.setPaddingTop(2);
				cell76.setBorderColor(BaseColor.WHITE);

				table4.addCell(cell62);
				table4.addCell(cell63);
				table4.addCell(cell75);
				table4.addCell(cell76);

			}

			/*
			 * For receipt by
			 */
			PdfPCell cell811 = new PdfPCell(new Paragraph("", mainContent));
			cell811.setBorderWidth(0.01f);
			cell811.setPaddingBottom(2);
			cell811.setColspan(4);
			cell811.setPaddingTop(25);
			cell811.setBorderColor(BaseColor.WHITE);

			/*
			 * For receipt by
			 */
			PdfPCell cell81 = new PdfPCell(new Paragraph("Receipt Given By", mainContent));
			cell81.setBorderWidth(0.01f);
			cell81.setPaddingBottom(2);
			cell81.setPaddingTop(25);
			cell81.setBorderColor(BaseColor.WHITE);

			PdfPCell cell82 = new PdfPCell(new Paragraph(fullName, mainContent));
			cell82.setBorderWidth(0.01f);
			cell82.setPaddingBottom(2);
			cell82.setPaddingTop(25);
			cell82.setBorderColor(BaseColor.WHITE);

			/*
			 * For Receivers Signature
			 */
			PdfPCell cell83 = new PdfPCell(new Paragraph("Receivers Signature", mainContent));
			cell83.setBorderWidth(0.01f);
			cell83.setPaddingBottom(2);
			cell83.setPaddingTop(25);
			cell83.setColspan(2);
			cell83.setPaddingRight(20);
			cell83.setHorizontalAlignment(Element.ALIGN_RIGHT);
			cell83.setBorderColor(BaseColor.WHITE);

			table4.addCell(cell811);
			table4.addCell(cell81);
			table4.addCell(cell82);
			table4.addCell(cell83);

			document.add(table4);

			document.close();

			System.out.println("Successfully written and generated IPD Billing PDF Report");

			status = "success";

			resultSet2.close();
			preparedStatement2.close();

			connection.close();

		} catch (Exception exception) {

			exception.printStackTrace();
			status = "error";
		}
		return status;
	}

	public String convertGenaralClinicVisitPDF(int patientID, int visitID, String realPath, String pdfOutFIleName,
			int clinicID, int practiceID, String username, AmazonS3 s3, String s3reportFilePath, String bucketName) {

		SimpleDateFormat dateFormat1 = new SimpleDateFormat("dd-MM-yyyy");

		SimpleDateFormat dateFormat2 = new SimpleDateFormat("yyyy-MM-dd");

		String visitDate = null;
		String diagnosis = null;
		String lastMenstrualPeriod = null;
		String status = null;
		String investigation = "";
		String estimatedDueDate = "";
		int nextVisitDays = 0;
		String advice = "";
		String ClinicRegNo = null;

		/*
		 * Declaring variable which stores the location for FreeSans.ttf file to print
		 * marathi text on pdf
		 */
		String marathiFontDir = realPath + "fonts/FreeSans.ttf";

		ConfigurationUtil configXMLUtil = new ConfigurationUtil();

		ConfigXMLUtil xmlUtil = new ConfigXMLUtil();
		RegistrationDAOinf registrationDAOinf = new RegistrationDAOImpl();

		Image signImg = null;
		String docName = "";
		String signature = null;

		try {
			connection = getConnection();

			/*
			 * fetch Patient Detail
			 */
			String fetchPatientDetailQuery = QueryMaker.OPD_PDF_RETRIEVE_PATIENT;

			preparedStatement1 = connection.prepareStatement(fetchPatientDetailQuery);
			preparedStatement1.setInt(1, patientID);

			resultSet1 = preparedStatement1.executeQuery();

			/*
			 * fetch Visit Detail
			 */
			String fetchVisitDetailQuery = QueryMaker.OPD_PDF_RETRIEVE_VISIT;

			preparedStatement2 = connection.prepareStatement(fetchVisitDetailQuery);
			preparedStatement2.setInt(1, visitID);
			resultSet2 = preparedStatement2.executeQuery();

			// To fetch visit details from Visit Table
			while (resultSet2.next()) {

				visitDate = resultSet2.getString("visitDate");
				diagnosis = resultSet2.getString("diagnosis");

				lastMenstrualPeriod = resultSet2.getString("lastMenstrualPeriod");

				estimatedDueDate = resultSet2.getString("estimatedDueDate");

				advice = resultSet2.getString("advice");

				nextVisitDays = resultSet2.getInt("nextVisitDays");
			}

			/*
			 * fetch Clinic RegNo Detail
			 */
			String fetchClinicRegNoDetailQuery = QueryMaker.RETRIEVE_CLINIC_REG_NO_BY_CLINIC_ID;

			preparedStatement3 = connection.prepareStatement(fetchClinicRegNoDetailQuery);
			preparedStatement3.setInt(1, clinicID);
			preparedStatement3.setInt(2, patientID);
			resultSet3 = preparedStatement3.executeQuery();

			while (resultSet3.next()) {
				ClinicRegNo = resultSet3.getString("regNumber");
			}

			/*
			 * fetch PresentComplaints Detail
			 */
			String fetchPresentComplaintsDetailQuery = QueryMaker.RETRIEVE_PRESENTCOMPLAINTS;

			preparedStatement = connection.prepareStatement(fetchPresentComplaintsDetailQuery);
			preparedStatement.setInt(1, visitID);
			resultSet = preparedStatement.executeQuery();

			/*
			 * fetch MedicalHistory Detail
			 */
			String fetchMedicalHistoryDetailQuery = QueryMaker.RETRIEVE_MEDICAL_HISTORY_BY_PATIENT_ID;

			preparedStatement4 = connection.prepareStatement(fetchMedicalHistoryDetailQuery);
			preparedStatement4.setInt(1, patientID);
			resultSet4 = preparedStatement4.executeQuery();

			/*
			 * fetch OnExamination Detail
			 */
			String fetchOnExaminationDetailQuery = QueryMaker.RETRIEVE_ON_EXAMINATION_LIST_BY_VISIT_ID1;

			preparedStatement5 = connection.prepareStatement(fetchOnExaminationDetailQuery);
			preparedStatement5.setInt(1, visitID);
			resultSet5 = preparedStatement5.executeQuery();

			/*
			 * fetch Investigation details
			 */
			String fetchInvestigationDetailQuery = QueryMaker.RETREIVE_Investigations_Comma_SEPARATED_Test_LIST;

			preparedStatement6 = connection.prepareStatement(fetchInvestigationDetailQuery);

			preparedStatement6.setString(1, ActivityStatus.ACTIVE);
			preparedStatement6.setInt(2, visitID);

			resultSet6 = preparedStatement6.executeQuery();

			/*
			 * fetch prescription details
			 */
			String fetchprescriptionDetailQuery = QueryMaker.OPD_PDF_RETRIEVE_PRESCRIPTIONPDF;

			preparedStatement7 = connection.prepareStatement(fetchprescriptionDetailQuery);

			preparedStatement7.setInt(1, visitID);
			preparedStatement7.setString(2, ActivityStatus.ACTIVE);

			resultSet7 = preparedStatement7.executeQuery();

			// Retrieving USER Details by PracticeID
			HashMap<String, String> MDMap = registrationDAOinf.retrieveUserDetails(practiceID, username);

			// File SignatureFile = new File(logoFilePath + File.separator +
			// MDMap.get("Signature"));
			signature = MDMap.get("Signature");
			docName = MDMap.get("FirstName") + " " + MDMap.get("LastName");

			if (signature == "" || signature == null) {
				signImg = null;
			} else if (signature.isEmpty()) {
				signImg = null;
			} else {

				S3ObjectInputStream s3ObjectInputStream = s3
						.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, signature))
						.getObjectContent();

				IOUtils.copy(s3ObjectInputStream, new FileOutputStream(new File(realPath + "images/" + signature)));

				signImg = Image.getInstance(realPath + "images/" + signature);
			}

			/*
			 * if (SignatureFile.exists()) { signImg =
			 * Image.getInstance(SignatureFile.getAbsolutePath()); }
			 */

			/*
			 * Getting image path from XML
			 */
			String A5ImagePath = configXMLUtil.getLetterHeadImage();

			/*
			 * Getting page size from XMl
			 */
			String pageSize = "A4";

			/*
			 * Setting path to store PDF file
			 */
			File file = new File(realPath + "/" + pdfOutFIleName);
			/*
			 * Creating Document for PDF
			 */
			Document document = null;

			/*
			 * Checking whether pageSize tag in XMl contains A5 or A4, according to that
			 * setting PDF page size
			 */
			if (pageSize.equals("A5")) {
				document = new Document(PageSize.A5);
			} else if (pageSize.equals("A4")) {
				document = new Document(PageSize.A4);
			}

			PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(file));

			Font Font2 = new Font(Font.FontFamily.TIMES_ROMAN, 8, Font.NORMAL);
			Font Font4 = new Font(Font.FontFamily.TIMES_ROMAN, 10, Font.BOLD);
			Font Font5 = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.BOLD);
			Font mainContent = new Font(Font.FontFamily.TIMES_ROMAN, 10, Font.NORMAL);
			Font mainContent1 = new Font(Font.FontFamily.TIMES_ROMAN, 15, Font.NORMAL);
			mainContent1.setColor(BaseColor.GRAY);
			/*
			 * Defining marathi font
			 */
			Font marathiFont = FontFactory.getFont(marathiFontDir, BaseFont.IDENTITY_H, BaseFont.EMBEDDED);
			marathiFont.setSize(10);

			document.open();

			/*
			 * Adding image
			 */
			PdfContentByte canvas = writer.getDirectContentUnder();

			/*
			 * Checking whether pageSize is A4 or A5, according to that background image is
			 * being set
			 */
			Image image;

			if (pageSize.equals("A5")) {
				if (A5ImagePath == null || A5ImagePath == "") {

					image = null;

				} else {

					if (A5ImagePath.isEmpty()) {
						image = null;
					} else {

						S3ObjectInputStream s3ObjectInputStream = s3
								.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, A5ImagePath))
								.getObjectContent();

						IOUtils.copy(s3ObjectInputStream,
								new FileOutputStream(new File(realPath + "images/" + A5ImagePath)));

						image = Image.getInstance(realPath + "images/" + A5ImagePath);

						image.scaleToFit(PageSize.A5.getWidth(), PageSize.A5.getHeight());

						image.setAbsolutePosition(0, 0);

						canvas.saveState();
						PdfGState state = new PdfGState();
						canvas.setGState(state);
						canvas.addImage(image);
						canvas.restoreState();
					}

				}
			} else if (pageSize.equals("A4")) {
				if (A5ImagePath == null || A5ImagePath == "") {

					image = null;

				} else {

					if (A5ImagePath.isEmpty()) {
						image = null;
					} else {

						S3ObjectInputStream s3ObjectInputStream = s3
								.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, A5ImagePath))
								.getObjectContent();

						IOUtils.copy(s3ObjectInputStream,
								new FileOutputStream(new File(realPath + "images/" + A5ImagePath)));

						image = Image.getInstance(realPath + "images/" + A5ImagePath);

						image.scaleToFit(PageSize.A4.getWidth(), PageSize.A4.getHeight());

						image.setAbsolutePosition(0, 0);

						canvas.saveState();
						PdfGState state = new PdfGState();
						canvas.setGState(state);
						canvas.addImage(image);
						canvas.restoreState();
					}

				}
			}

			Image prescrImg = Image.getInstance(realPath + "/images/Rx_icon.png");

			/*
			 * Setting header
			 */
			document.addCreator("eDhanvantari");
			document.addTitle("OPD Visit");

			/*
			 * For displaying patient personal details
			 */
			while (resultSet1.next()) {
				PdfPTable table = new PdfPTable(4);

				table.setFooterRows(1);
				table.setWidthPercentage(100);
				Rectangle rect = new Rectangle(270, 700);
				table.setWidthPercentage(new float[] { 75, 75, 75, 75 }, rect);

				PdfPCell cell = new PdfPCell(new Paragraph("Patient Details", Font5));
				cell.setPaddingTop(120);
				cell.setPaddingBottom(10);
				cell.setHorizontalAlignment(Element.ALIGN_CENTER);
				cell.setUseBorderPadding(true);
				cell.setColspan(4);
				cell.setBorderWidthBottom(1f);
				cell.setBorderColorBottom(BaseColor.DARK_GRAY);
				cell.setBorderColor(BaseColor.WHITE);

				/*
				 * For Patient Name
				 */
				PdfPCell cell2 = new PdfPCell(new Paragraph("Patient Name", mainContent));
				cell2.setBorderWidth(0.01f);
				cell2.setPaddingBottom(5);
				cell2.setBorderWidthLeft(0.2f);
				cell2.setBorderColor(BaseColor.WHITE);

				String fullName = resultSet1.getString("firstName") + " " + resultSet1.getString("middleName") + " "
						+ resultSet1.getString("lastName") + " (" + resultSet1.getInt("id") + ")";

				PdfPCell cell3 = new PdfPCell(new Paragraph(fullName, mainContent));
				cell3.setBorderWidth(0.2f);
				cell3.setPaddingBottom(5);
				cell3.setBorderColor(BaseColor.WHITE);

				/*
				 * For Date
				 */

				PdfPCell cell4 = new PdfPCell(new Paragraph("Date", mainContent));
				cell4.setBorderWidth(0.01f);
				cell4.setPaddingBottom(5);
				cell4.setBorderWidthLeft(0.2f);
				cell4.setBorderColor(BaseColor.WHITE);

				PdfPCell cell5 = new PdfPCell(new Paragraph(visitDate, mainContent));
				cell5.setBorderWidth(0.2f);
				cell5.setPaddingBottom(5);
				cell5.setBorderColor(BaseColor.WHITE);

				/*
				 * For Age
				 */
				PdfPCell cell6 = new PdfPCell(new Paragraph("Age", mainContent));
				cell6.setBorderWidth(0.01f);
				cell6.setPaddingBottom(5);
				cell6.setBorderWidthLeft(0.2f);
				cell6.setBorderColor(BaseColor.WHITE);

				PdfPCell cell7 = new PdfPCell(new Paragraph(resultSet1.getString("age"), mainContent));
				cell7.setBorderWidth(0.2f);
				cell7.setPaddingBottom(5);
				cell7.setBorderColor(BaseColor.WHITE);

				/*
				 * For Diagnosis
				 */
				PdfPCell cell8 = new PdfPCell(new Paragraph("Gender", mainContent));
				cell8.setBorderWidth(0.01f);
				cell8.setPaddingBottom(5);
				cell8.setBorderWidthLeft(0.2f);
				cell8.setBorderColor(BaseColor.WHITE);

				PdfPCell cell9 = new PdfPCell(new Paragraph(resultSet1.getString("gender"), mainContent));
				cell9.setBorderWidth(0.2f);
				cell9.setPaddingBottom(2);
				cell9.setBorderColor(BaseColor.WHITE);

				/*
				 * For Diagnosis
				 */
				PdfPCell cell10 = new PdfPCell(new Paragraph("Address", mainContent));
				cell10.setBorderWidth(0.01f);
				cell10.setPaddingBottom(5);
				cell10.setBorderWidthLeft(0.2f);
				cell10.setBorderColor(BaseColor.WHITE);

				PdfPCell cell11 = new PdfPCell(new Paragraph(resultSet1.getString("address"), mainContent));
				cell11.setBorderWidth(0.2f);
				cell11.setPaddingBottom(2);
				cell11.setBorderColor(BaseColor.WHITE);

				/*
				 * For Visit Type
				 */
				PdfPCell cell12 = new PdfPCell(new Paragraph("Phone Number", mainContent));
				cell12.setBorderWidth(0.01f);
				cell12.setPaddingBottom(5);
				cell12.setBorderWidthLeft(0.2f);
				cell12.setBorderColor(BaseColor.WHITE);
				cell12.setBorderWidthLeft(0.0f);
				cell12.setBorderWidthTop(0.0f);
				cell12.setBorderColorBottom(BaseColor.WHITE);

				PdfPCell cell13 = new PdfPCell(new Paragraph(resultSet1.getString("mobile"), mainContent));
				cell13.setBorderWidth(0.2f);
				cell13.setPaddingBottom(2);
				cell13.setBorderColor(BaseColor.WHITE);
				cell13.setBorderWidthLeft(0.0f);
				cell13.setBorderWidthTop(0.0f);
				cell13.setBorderColorBottom(BaseColor.WHITE);

				/*
				 * For Comment
				 */
				PdfPCell cell14 = new PdfPCell(new Paragraph("Alternate Number:", mainContent));
				cell14.setBorderWidth(0.01f);
				cell14.setPaddingBottom(5);
				cell14.setBorderWidthLeft(0.2f);
				cell14.setBorderColor(BaseColor.WHITE);
				cell14.setBorderWidthLeft(0.0f);
				cell14.setBorderWidthTop(0.0f);
				cell14.setBorderColorBottom(BaseColor.WHITE);

				PdfPCell cell15 = new PdfPCell(new Paragraph(resultSet1.getString("phone"), mainContent));
				cell15.setBorderWidth(0.2f);
				cell15.setColspan(3);
				cell15.setPaddingBottom(2);
				cell15.setBorderColor(BaseColor.WHITE);
				cell15.setBorderWidthLeft(0.0f);
				cell15.setBorderWidthTop(0.0f);
				cell15.setBorderWidthBottom(1f);
				cell15.setBorderColorBottom(BaseColor.WHITE);

				/*
				 * For Occupation
				 */
				PdfPCell cell16 = new PdfPCell(new Paragraph("Occupation", mainContent));
				cell16.setBorderWidth(0.01f);
				cell16.setPaddingBottom(5);
				cell16.setBorderWidthLeft(0.2f);
				cell16.setBorderColor(BaseColor.WHITE);

				PdfPCell cell17 = new PdfPCell(new Paragraph(resultSet1.getString("occupation"), mainContent));
				cell17.setBorderWidth(0.2f);
				cell17.setPaddingBottom(5);
				cell17.setBorderColor(BaseColor.WHITE);
				/*
				 * adding all cell to the table to create tabular structure
				 */

				table.addCell(cell);
				table.addCell(cell2);
				table.addCell(cell3);
				table.addCell(cell4);
				table.addCell(cell5);
				table.addCell(cell6);
				table.addCell(cell7);
				table.addCell(cell8);
				table.addCell(cell9);
				table.addCell(cell10);
				table.addCell(cell11);
				table.addCell(cell12);
				table.addCell(cell13);
				table.addCell(cell14);
				table.addCell(cell15);
				table.addCell(cell16);
				table.addCell(cell17);

				document.add(table);
			}

			/*
			 * for OPD Opthalmology Form
			 */
			PdfPTable table2 = new PdfPTable(3);
			table2.setWidthPercentage(100);
			Rectangle rect = new Rectangle(270, 700);
			table2.setWidthPercentage(new float[] { 100, 100, 100 }, rect);

			/*
			 * Creating Table header
			 */

			// For blank space
			PdfPCell cell = new PdfPCell(new Paragraph(
					"                                                                                               "
							+ "                                                                                                                            "
							+ "                                                                                                                              ",
					Font2));
			cell.setColspan(3);
			cell.setBorderWidthRight(0f);
			cell.setBorderWidthLeft(0f);
			cell.setBorderWidthTop(0f);
			cell.setBorderWidthBottom(0f);
			cell.setBorderColorTop(BaseColor.WHITE);

			// for Title
			PdfPCell cell0 = new PdfPCell(new Paragraph("Genaral Clinic OPD Form", Font5));
			cell0.setPaddingTop(15);
			cell0.setPaddingBottom(10);
			cell0.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell0.setUseBorderPadding(true);
			cell0.setColspan(3);
			cell0.setBorderWidthRight(0.1f);
			cell0.setBorderWidthLeft(0.1f);
			cell0.setBorderWidthTop(0.1f);
			cell0.setBorderWidthBottom(1f);
			cell0.setBorderColorBottom(BaseColor.DARK_GRAY);
			cell0.setBorderColor(BaseColor.WHITE);

			// Gene
			PdfPCell cell1 = new PdfPCell(new Paragraph("Medical Reg. No.: " + ClinicRegNo, Font4));

			cell1.setBorderWidth(0.01f);
			cell1.setPaddingBottom(5);
			cell1.setPaddingTop(5);
			cell1.setBorderColor(BaseColor.WHITE);

			// OD RE
			PdfPCell cell2 = new PdfPCell(new Paragraph("Visit Date (DD/MM/YYYY): " + visitDate, Font4));

			cell2.setBorderWidth(0.01f);
			cell2.setPaddingBottom(5);
			cell2.setPaddingTop(5);
			cell2.setBorderColor(BaseColor.WHITE);

			PdfPCell cell02 = new PdfPCell(new Paragraph("Diagnosis: " + diagnosis, Font4));
			cell02.setBorderWidth(0.01f);
			cell02.setPaddingBottom(5);
			cell02.setPaddingTop(5);
			cell02.setBorderColor(BaseColor.WHITE);

			PdfPCell cell4 = new PdfPCell(new Paragraph(
					"                                                                                               "
							+ "                                                                                                                            "
							+ "                                                                                                                              ",
					Font2));
			cell4.setColspan(3);
			cell4.setBorderWidthRight(0f);
			cell4.setBorderWidthLeft(0f);
			cell4.setBorderWidthTop(0f);
			cell4.setBorderWidthBottom(1f);
			cell4.setBorderColorBottom(BaseColor.LIGHT_GRAY);

			PdfPCell cell15 = new PdfPCell(new Paragraph("Complaining Of: ", Font4));
			cell15.setBorderWidth(0.01f);
			cell15.setPaddingBottom(5);
			cell15.setPaddingTop(5);
			cell15.setBorderColor(BaseColor.WHITE);

			table2.addCell(cell);
			table2.addCell(cell0);
			table2.addCell(cell1);
			table2.addCell(cell2);
			table2.addCell(cell02);
			table2.addCell(cell4);
			table2.addCell(cell15);

			while (resultSet.next()) {

				PdfPCell cell16 = new PdfPCell(new Paragraph(resultSet.getString("comments"), mainContent));
				cell16.setBorderWidth(0.01f);
				cell16.setPaddingBottom(5);
				cell16.setPaddingTop(5);
				cell16.setColspan(2);
				cell16.setBorderColor(BaseColor.WHITE);
				table2.addCell(cell16);
			}

			PdfPCell cell17 = new PdfPCell(new Paragraph("History Of: ", Font4));
			cell17.setBorderWidth(0.01f);
			cell17.setPaddingBottom(5);
			cell17.setPaddingTop(5);
			cell17.setBorderColor(BaseColor.WHITE);
			table2.addCell(cell17);

			while (resultSet4.next()) {

				PdfPCell cell18 = new PdfPCell(new Paragraph(resultSet4.getString("comments"), mainContent));
				cell18.setBorderWidth(0.01f);
				cell18.setPaddingBottom(5);
				cell18.setPaddingTop(5);
				cell18.setColspan(2);
				cell18.setBorderColor(BaseColor.WHITE);
				table2.addCell(cell18);
			}

			PdfPCell cell19 = new PdfPCell(new Paragraph("On Examination: ", Font4));
			cell19.setBorderWidth(0.01f);
			cell19.setPaddingBottom(5);
			cell19.setPaddingTop(5);
			cell19.setBorderColor(BaseColor.WHITE);
			table2.addCell(cell19);

			while (resultSet5.next()) {

				PdfPCell cell20 = new PdfPCell(new Paragraph(resultSet5.getString("description"), mainContent));
				cell20.setBorderWidth(0.01f);
				cell20.setPaddingBottom(5);
				cell20.setPaddingTop(5);
				cell20.setColspan(2);
				cell20.setBorderColor(BaseColor.WHITE);
				table2.addCell(cell20);
			}

			PdfPCell cell119 = new PdfPCell(new Paragraph("LMP: ", Font4));
			cell119.setBorderWidth(0.01f);
			cell119.setPaddingBottom(5);
			cell119.setPaddingTop(5);
			cell119.setBorderColor(BaseColor.WHITE);
			table2.addCell(cell119);

			PdfPCell cell210 = new PdfPCell(new Paragraph(lastMenstrualPeriod, mainContent));
			cell210.setBorderWidth(0.01f);
			cell210.setPaddingBottom(5);
			cell210.setPaddingTop(5);
			cell210.setColspan(2);
			cell210.setBorderColor(BaseColor.WHITE);
			table2.addCell(cell210);

			PdfPCell cell191 = new PdfPCell(new Paragraph("EDD: ", Font4));
			cell191.setBorderWidth(0.01f);
			cell191.setPaddingBottom(5);
			cell191.setPaddingTop(5);
			cell191.setBorderColor(BaseColor.WHITE);
			table2.addCell(cell191);

			PdfPCell cell201 = new PdfPCell(new Paragraph(estimatedDueDate, mainContent));
			cell201.setBorderWidth(0.01f);
			cell201.setPaddingBottom(5);
			cell201.setPaddingTop(5);
			cell201.setColspan(2);
			cell201.setBorderColor(BaseColor.WHITE);
			table2.addCell(cell201);

			document.add(table2);

			PdfPTable table3 = new PdfPTable(3);

			table3.setWidthPercentage(100);
			Rectangle rect7 = new Rectangle(270, 700);
			table3.setWidthPercentage(new float[] { 100, 100, 100 }, rect7);

			// For blank space
			PdfPCell cell012 = new PdfPCell(new Paragraph(
					"                                                                                               "
							+ "                                                                                                                            "
							+ "                                                                                                                              ",
					Font2));
			cell012.setColspan(3);
			cell012.setBorderWidthRight(0f);
			cell012.setBorderWidthLeft(0f);
			cell012.setBorderWidthTop(0f);
			cell012.setBorderWidthBottom(0f);
			cell012.setBorderColorTop(BaseColor.WHITE);

			// for Title
			PdfPCell cell01 = new PdfPCell(new Paragraph("Prescription Details", Font5));
			cell01.setPaddingTop(15);
			cell01.setPaddingBottom(10);
			cell01.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell01.setUseBorderPadding(true);
			cell01.setColspan(3);
			cell01.setBorderWidthRight(0.1f);
			cell01.setBorderWidthLeft(0.1f);
			cell01.setBorderWidthTop(0.1f);
			cell01.setBorderWidthBottom(1f);
			cell01.setBorderColorBottom(BaseColor.DARK_GRAY);
			cell01.setBorderColor(BaseColor.WHITE);

			table3.addCell(cell012);
			table3.addCell(cell01);

			if (advice == "" || advice == null) {
				PdfPCell cell2005 = new PdfPCell(new Paragraph(""));

				cell2005.setBorderWidth(0.01f);
				cell2005.setPaddingBottom(5);
				cell2005.setColspan(3);
				cell2005.setBorderWidthLeft(0.2f);
				cell2005.setBorderColor(BaseColor.WHITE);

			} else if (advice.isEmpty()) {
				PdfPCell cell2005 = new PdfPCell(new Paragraph(""));
				cell2005.setBorderWidth(0.01f);
				cell2005.setPaddingBottom(5);
				cell2005.setColspan(3);
				cell2005.setBorderWidthLeft(0.2f);
				cell2005.setBorderColor(BaseColor.WHITE);

			} else {

				System.out.println("advice values is: " + advice);
				PdfPCell cell2005 = new PdfPCell(new Paragraph("Advice: ", Font4));

				cell2005.setBorderWidth(0.01f);
				cell2005.setPaddingBottom(5);
				cell2005.setPaddingTop(5);
				cell2005.setColspan(1);
				cell2005.setBorderColor(BaseColor.WHITE);

				PdfPCell cell2006 = new PdfPCell(new Paragraph(StringUtils.capitalize(advice), marathiFont));
				cell2006.setBorderWidth(0.01f);
				cell2006.setPaddingBottom(5);
				cell2006.setColspan(2);
				cell2006.setHorizontalAlignment(Element.ALIGN_LEFT);
				cell2006.setPaddingTop(5);
				cell2006.setBorderColor(BaseColor.WHITE);

				table3.addCell(cell2005);
				table3.addCell(cell2006);
			}

			document.add(table3);

			while (resultSet6.next()) {

				investigation = resultSet6.getString("investigation");

				if (investigation == "" || investigation == null) {
					continue;
				} else if (investigation.isEmpty()) {
					continue;
				} else {

					PdfPTable table4 = new PdfPTable(3);

					table4.setWidthPercentage(100);
					Rectangle rect5 = new Rectangle(270, 700);
					table4.setWidthPercentage(new float[] { 100, 100, 100 }, rect5);

					PdfPCell cell002 = new PdfPCell(new Paragraph("Investigation: ", Font4));
					cell002.setBorderWidth(0.01f);
					cell002.setPaddingBottom(5);
					cell002.setPaddingTop(5);
					cell002.setColspan(1);
					cell002.setBorderWidthLeft(0.2f);
					cell002.setBorderColor(BaseColor.WHITE);

					/*
					 * for investigation details
					 */
					PdfPCell cell2001 = new PdfPCell(new Paragraph(investigation, mainContent));
					cell2001.setBorderWidth(0.1f);
					cell2001.setColspan(2);
					cell2001.setPaddingBottom(5);
					cell2001.setPaddingTop(5);
					cell2001.setHorizontalAlignment(Element.ALIGN_LEFT);
					cell2001.setBorderColor(BaseColor.WHITE);

					table4.addCell(cell002);
					table4.addCell(cell2001);

					document.add(table4);

				}

			}

			/*
			 * For prescription
			 */
			PdfPTable table5 = new PdfPTable(3);
			table5.setWidthPercentage(100);
			Rectangle rect2 = new Rectangle(270, 700);
			table5.setWidthPercentage(new float[] { 30, 180, 60 }, rect2);

			// For blank space
			PdfPCell cell30 = new PdfPCell(new Paragraph(
					"                                                                                               "
							+ "                                                                                                                            "
							+ "                                                                                                                              ",
					Font2));
			cell30.setColspan(3);
			cell30.setBorderWidthRight(0f);
			cell30.setBorderWidthLeft(0f);
			cell30.setBorderWidthTop(0f);
			cell30.setBorderWidthBottom(0f);
			cell30.setBorderColorTop(BaseColor.WHITE);

			PdfPCell cell3011 = new PdfPCell(new Paragraph(
					"                                                                                               "
							+ "                                                                                                                            "
							+ "                                                                                                                              ",
					Font2));
			cell3011.setColspan(3);
			cell3011.setBorderWidthRight(0f);
			cell3011.setBorderWidthLeft(0f);
			cell3011.setBorderWidthTop(0f);
			cell3011.setBorderWidthBottom(0f);
			cell3011.setBorderColorTop(BaseColor.WHITE);

			/*
			 * Table for Prescription image
			 */
			PdfPTable imageTable = new PdfPTable(2);
			imageTable.setWidthPercentage(100);
			imageTable.setWidths(new int[] { 1, 2 });

			PdfPCell imageCell1 = new PdfPCell(prescrImg, true);
			imageCell1.setBorderColor(BaseColor.WHITE);

			PdfPCell imageCell2 = new PdfPCell(new Paragraph("", mainContent));
			imageCell2.setBorderColor(BaseColor.WHITE);

			imageTable.addCell(imageCell1);
			imageTable.addCell(imageCell2);

			// Gene
			PdfPCell cell3002 = new PdfPCell(imageTable);
			cell3002.setBorderWidth(0.0f);
			cell3002.setPaddingBottom(10);
			cell3002.setBorderColor(BaseColor.WHITE);

			PdfPCell cell320 = new PdfPCell(new Paragraph("", mainContent));
			cell320.setBorderWidth(0.01f);
			cell320.setPaddingBottom(5);
			cell320.setBorderColor(BaseColor.WHITE);

			// Amino Acid Change
			PdfPCell cell34 = new PdfPCell(new Paragraph("Qty", Font5));
			cell34.setBorderWidth(0.01f);
			cell34.setPaddingBottom(5);
			cell34.setHorizontalAlignment(Element.ALIGN_RIGHT);
			cell34.setBorderColor(BaseColor.WHITE);

			table5.addCell(cell30);
			table5.addCell(cell3011);
			table5.addCell(cell3002);
			table5.addCell(cell320);
			table5.addCell(cell34);

			document.add(table5);

			while (resultSet7.next()) {

				PdfPTable table6 = new PdfPTable(3);

				table6.setWidthPercentage(100);
				Rectangle rect1 = new Rectangle(270, 700);
				table6.setWidthPercentage(new float[] { 110, 40, 120 }, rect1);

				String finalTradeName = resultSet7.getString("tradeName").toUpperCase();

				if (resultSet7.getString("drugName") == null || resultSet7.getString("drugName") == "") {
					finalTradeName = resultSet7.getString("tradeName").toUpperCase();
				} else if (resultSet7.getString("drugName").isEmpty()) {
					finalTradeName = resultSet7.getString("tradeName").toUpperCase();
				} else {
					finalTradeName += "\n(" + resultSet7.getString("drugName") + ")";
				}

				PdfPCell cell21 = new PdfPCell(new Paragraph(finalTradeName, marathiFont));
				cell21.setBorderWidth(0.1f);
				cell21.setPaddingBottom(1);
				cell21.setPaddingTop(3);
				cell21.setColspan(2);
				cell21.setBorderColor(BaseColor.WHITE);

				PdfPCell cell22 = new PdfPCell(new Paragraph("" + resultSet7.getDouble("quantity"), mainContent));
				cell22.setBorderWidth(0.1f);
				cell22.setPaddingBottom(1);
				cell22.setPaddingTop(3);
				cell22.setHorizontalAlignment(Element.ALIGN_RIGHT);
				cell22.setBorderColor(BaseColor.WHITE);

				table6.addCell(cell21);
				table6.addCell(cell22);

				String frequency = resultSet7.getString("frequency");

				int noOfDays = resultSet7.getInt("numberOfDays");

				PdfPTable table7 = new PdfPTable(3);

				table7.setWidthPercentage(100);
				Rectangle rect3 = new Rectangle(270, 700);
				table7.setWidthPercentage(new float[] { 80, 50, 140 }, rect1);

				PdfPCell cell24 = new PdfPCell(new Paragraph(frequency, marathiFont));
				cell24.setBorderWidth(0.1f);
				cell24.setPaddingBottom(10);
				cell24.setBorderColor(BaseColor.WHITE);

				PdfPCell cell241 = new PdfPCell(new Paragraph(noOfDays + " days", mainContent));
				cell241.setBorderWidth(0.1f);
				cell241.setPaddingBottom(10);
				cell241.setBorderColor(BaseColor.WHITE);

				PdfPCell cell25 = new PdfPCell(
						new Paragraph(StringUtils.capitalize(resultSet7.getString("comment").trim()), marathiFont));
				cell25.setBorderWidth(0.1f);
				cell25.setPaddingBottom(9);
				cell25.setBorderColor(BaseColor.WHITE);

				table7.addCell(cell24);
				table7.addCell(cell241);
				table7.addCell(cell25);

				document.add(table6);
				document.add(table7);
			}

			/*
			 * For signature in footer
			 */
			PdfPTable tableNew = new PdfPTable(1);

			tableNew.setWidthPercentage(100);
			Rectangle rect6 = new Rectangle(270, 700);
			tableNew.setWidthPercentage(new float[] { 270 }, rect6);

			PdfPCell cell1112 = new PdfPCell(
					new Paragraph("Follow-up after  " + nextVisitDays + "  days.", marathiFont));
			cell1112.setBackgroundColor(BaseColor.WHITE);
			cell1112.setPaddingTop(30);
			cell1112.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell1112.setBorderColor(BaseColor.WHITE);

			tableNew.addCell(cell1112);

			document.add(tableNew);

			/*
			 * For signature in footer
			 */

			PdfPTable tableFooter = new PdfPTable(1);
			tableFooter.setTotalWidth(510);
			tableFooter.setWidthPercentage(100);

			// Table for Prescription image

			PdfPTable imageTable1 = new PdfPTable(2);
			imageTable1.setWidthPercentage(80);
			imageTable1.setWidths(new int[] { 1, 2 });

			PdfPCell imageCell11 = new PdfPCell(signImg, true);
			imageCell11.setBorderColor(BaseColor.WHITE);

			PdfPCell imageCell21 = new PdfPCell(new Paragraph("", mainContent));
			imageCell21.setBorderColor(BaseColor.WHITE);

			imageTable1.addCell(imageCell11);
			imageTable1.addCell(imageCell21);

			PdfPCell cellFooter = new PdfPCell(imageTable1);
			cellFooter.setBorderWidth(0.01f);
			cellFooter.setPaddingBottom(15);
			cellFooter.setColspan(2);
			cellFooter.setHorizontalAlignment(Element.ALIGN_RIGHT);
			cellFooter.setPaddingLeft(100);
			cellFooter.setBorderColor(BaseColor.WHITE);

			PdfPCell cellFooter1 = new PdfPCell(new Paragraph(docName, Font5));
			cellFooter1.setBorderWidth(0.01f);
			cellFooter1.setPaddingBottom(15);
			cellFooter1.setColspan(2);
			cellFooter1.setPaddingLeft(100);
			cellFooter1.setHorizontalAlignment(Element.ALIGN_RIGHT);
			cellFooter1.setBorderColor(BaseColor.WHITE);

			tableFooter.addCell(cellFooter);
			tableFooter.addCell(cellFooter1);

			FooterTable event = new FooterTable(tableFooter);
			writer.setPageEvent(event);

			document.close();

			System.out.println("Successfully written and generated PDF Report");

			status = "success";

			/*
			 * Closing resultSet, preparedStatement, connection objects
			 */
			resultSet3.close();
			preparedStatement3.close();

			resultSet2.close();
			preparedStatement2.close();

			resultSet1.close();
			preparedStatement1.close();

			connection.close();

		} catch (Exception exception) {
			exception.printStackTrace();
			status = "error";
		}
		return status;
	}

	public String convertGenaralIPDClinicVisitPDF(int patientID, int visitID, String realPath, String pdfOutFIleName,
			int clinicID, int practiceID, String username, AmazonS3 s3, String s3reportFilePath, String bucketName) {

		SimpleDateFormat dateFormat1 = new SimpleDateFormat("dd-MM-yyyy");

		SimpleDateFormat dateFormat2 = new SimpleDateFormat("yyyy-MM-dd");

		String visitDate = null;
		String diagnosis = null;
		String treatment = null;
		String status = null;
		String investigation = "";
		int nextVisitDays = 0;
		String advice = "";
		String ClinicRegNo = null;

		/*
		 * Declaring variable which stores the location for FreeSans.ttf file to print
		 * marathi text on pdf
		 */
		String marathiFontDir = realPath + "fonts/FreeSans.ttf";

		ConfigurationUtil configXMLUtil = new ConfigurationUtil();

		ConfigXMLUtil xmlUtil = new ConfigXMLUtil();
		RegistrationDAOinf registrationDAOinf = new RegistrationDAOImpl();

		String signature = null;
		Image signImg = null;
		String docName = "";

		try {
			connection = getConnection();

			/*
			 * fetch Patient Detail
			 */
			String fetchPatientDetailQuery = QueryMaker.OPD_PDF_RETRIEVE_PATIENT;

			preparedStatement1 = connection.prepareStatement(fetchPatientDetailQuery);
			preparedStatement1.setInt(1, patientID);

			resultSet1 = preparedStatement1.executeQuery();

			/*
			 * fetch Visit Detail
			 */
			String fetchVisitDetailQuery = QueryMaker.OPD_PDF_RETRIEVE_VISIT;

			preparedStatement2 = connection.prepareStatement(fetchVisitDetailQuery);
			preparedStatement2.setInt(1, visitID);
			resultSet2 = preparedStatement2.executeQuery();

			// To fetch visit details from Visit Table
			while (resultSet2.next()) {

				visitDate = resultSet2.getString("visitDate");
				diagnosis = resultSet2.getString("diagnosis");

				advice = resultSet2.getString("advice");

				nextVisitDays = resultSet2.getInt("nextVisitDays");

				treatment = resultSet2.getString("treatment");
			}

			/*
			 * fetch Clinic RegNo Detail
			 */
			String fetchClinicRegNoDetailQuery = QueryMaker.RETRIEVE_CLINIC_REG_NO_BY_CLINIC_ID;

			preparedStatement3 = connection.prepareStatement(fetchClinicRegNoDetailQuery);
			preparedStatement3.setInt(1, clinicID);
			preparedStatement3.setInt(2, patientID);
			resultSet3 = preparedStatement3.executeQuery();

			while (resultSet3.next()) {
				ClinicRegNo = resultSet3.getString("regNumber");
			}

			/*
			 * fetch PresentComplaints Detail
			 */
			String fetchPresentComplaintsDetailQuery = QueryMaker.RETRIEVE_PRESENTCOMPLAINTS;

			preparedStatement = connection.prepareStatement(fetchPresentComplaintsDetailQuery);
			preparedStatement.setInt(1, visitID);
			resultSet = preparedStatement.executeQuery();

			/*
			 * fetch MedicalHistory Detail
			 */
			String fetchMedicalHistoryDetailQuery = QueryMaker.RETRIEVE_MEDICAL_HISTORY_BY_PATIENT_ID;

			preparedStatement4 = connection.prepareStatement(fetchMedicalHistoryDetailQuery);
			preparedStatement4.setInt(1, patientID);
			resultSet4 = preparedStatement4.executeQuery();

			/*
			 * fetch OnExamination Detail
			 */
			String fetchOnExaminationDetailQuery = QueryMaker.RETRIEVE_ON_EXAMINATION_LIST_BY_VISIT_ID1;

			preparedStatement5 = connection.prepareStatement(fetchOnExaminationDetailQuery);
			preparedStatement5.setInt(1, visitID);
			resultSet5 = preparedStatement5.executeQuery();

			/*
			 * fetch Investigation details
			 */
			String fetchInvestigationDetailQuery = QueryMaker.RETREIVE_Investigations_Comma_SEPARATED_Test_LIST;

			preparedStatement6 = connection.prepareStatement(fetchInvestigationDetailQuery);

			preparedStatement6.setString(1, ActivityStatus.ACTIVE);
			preparedStatement6.setInt(2, visitID);

			resultSet6 = preparedStatement6.executeQuery();

			/*
			 * fetch prescription details
			 */
			String fetchprescriptionDetailQuery = QueryMaker.OPD_PDF_RETRIEVE_PRESCRIPTIONPDF;

			preparedStatement7 = connection.prepareStatement(fetchprescriptionDetailQuery);

			preparedStatement7.setInt(1, visitID);
			preparedStatement7.setString(2, ActivityStatus.ACTIVE);

			resultSet7 = preparedStatement7.executeQuery();

			// Retrieving USER Details by PracticeID
			HashMap<String, String> MDMap = registrationDAOinf.retrieveUserDetails(practiceID, username);

			// File SignatureFile = new File(logoFilePath + File.separator +
			// MDMap.get("Signature"));
			signature = MDMap.get("Signature");
			docName = MDMap.get("FirstName") + " " + MDMap.get("LastName");

			if (signature == "" || signature == null) {
				signImg = null;
			} else if (signature.isEmpty()) {
				signImg = null;
			} else {

				S3ObjectInputStream s3ObjectInputStream = s3
						.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, signature))
						.getObjectContent();

				IOUtils.copy(s3ObjectInputStream, new FileOutputStream(new File(realPath + "images/" + signature)));

				signImg = Image.getInstance(realPath + "images/" + signature);
			}

			/*
			 * Getting image path from XML
			 */
			String A5ImagePath = configXMLUtil.getLetterHeadImage();

			/*
			 * Getting page size from XMl
			 */
			String pageSize = "A4";

			/*
			 * Setting path to store PDF file
			 */
			File file = new File(realPath + "/" + pdfOutFIleName);
			/*
			 * Creating Document for PDF
			 */
			Document document = null;

			/*
			 * Checking whether pageSize tag in XMl contains A5 or A4, according to that
			 * setting PDF page size
			 */
			if (pageSize.equals("A5")) {
				document = new Document(PageSize.A5);
			} else if (pageSize.equals("A4")) {
				document = new Document(PageSize.A4);
			}

			PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(file));

			Font Font2 = new Font(Font.FontFamily.TIMES_ROMAN, 8, Font.NORMAL);
			Font Font4 = new Font(Font.FontFamily.TIMES_ROMAN, 10, Font.BOLD);
			Font Font5 = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.BOLD);
			Font mainContent = new Font(Font.FontFamily.TIMES_ROMAN, 10, Font.NORMAL);
			Font mainContent1 = new Font(Font.FontFamily.TIMES_ROMAN, 15, Font.NORMAL);
			mainContent1.setColor(BaseColor.GRAY);
			/*
			 * Defining marathi font
			 */
			Font marathiFont = FontFactory.getFont(marathiFontDir, BaseFont.IDENTITY_H, BaseFont.EMBEDDED);
			marathiFont.setSize(10);

			document.open();

			/*
			 * Adding image
			 */
			PdfContentByte canvas = writer.getDirectContentUnder();

			/*
			 * Checking whether pageSize is A4 or A5, according to that background image is
			 * being set
			 */
			Image image;

			if (pageSize.equals("A5")) {
				if (A5ImagePath == null || A5ImagePath == "") {

					image = null;

				} else {

					if (A5ImagePath.isEmpty()) {
						image = null;
					} else {

						S3ObjectInputStream s3ObjectInputStream = s3
								.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, A5ImagePath))
								.getObjectContent();

						IOUtils.copy(s3ObjectInputStream,
								new FileOutputStream(new File(realPath + "images/" + A5ImagePath)));

						image = Image.getInstance(realPath + "images/" + A5ImagePath);

						image.scaleToFit(PageSize.A5.getWidth(), PageSize.A5.getHeight());

						image.setAbsolutePosition(0, 0);

						canvas.saveState();
						PdfGState state = new PdfGState();
						canvas.setGState(state);
						canvas.addImage(image);
						canvas.restoreState();
					}

				}
			} else if (pageSize.equals("A4")) {
				if (A5ImagePath == null || A5ImagePath == "") {

					image = null;

				} else {

					if (A5ImagePath.isEmpty()) {
						image = null;
					} else {

						S3ObjectInputStream s3ObjectInputStream = s3
								.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, A5ImagePath))
								.getObjectContent();

						IOUtils.copy(s3ObjectInputStream,
								new FileOutputStream(new File(realPath + "images/" + A5ImagePath)));

						image = Image.getInstance(realPath + "images/" + A5ImagePath);

						image.scaleToFit(PageSize.A4.getWidth(), PageSize.A4.getHeight());

						image.setAbsolutePosition(0, 0);

						canvas.saveState();
						PdfGState state = new PdfGState();
						canvas.setGState(state);
						canvas.addImage(image);
						canvas.restoreState();
					}

				}
			}

			Image prescrImg = Image.getInstance(realPath + "/images/Rx_icon.png");

			/*
			 * Setting header
			 */
			document.addCreator("eDhanvantari");
			document.addTitle("IPD Visit");

			/*
			 * For displaying patient personal details
			 */
			while (resultSet1.next()) {
				PdfPTable table = new PdfPTable(4);

				table.setFooterRows(1);
				table.setWidthPercentage(100);
				Rectangle rect = new Rectangle(270, 700);
				table.setWidthPercentage(new float[] { 75, 75, 75, 75 }, rect);

				PdfPCell cell = new PdfPCell(new Paragraph("Patient Details", Font5));
				cell.setPaddingTop(120);
				cell.setPaddingBottom(10);
				cell.setHorizontalAlignment(Element.ALIGN_CENTER);
				cell.setUseBorderPadding(true);
				cell.setColspan(4);
				cell.setBorderWidthBottom(1f);
				cell.setBorderColorBottom(BaseColor.DARK_GRAY);
				cell.setBorderColor(BaseColor.WHITE);

				/*
				 * For Patient Name
				 */
				PdfPCell cell2 = new PdfPCell(new Paragraph("Patient Name", mainContent));
				cell2.setBorderWidth(0.01f);
				cell2.setPaddingBottom(5);
				cell2.setBorderWidthLeft(0.2f);
				cell2.setBorderColor(BaseColor.WHITE);

				String fullName = resultSet1.getString("firstName") + " " + resultSet1.getString("middleName") + " "
						+ resultSet1.getString("lastName") + " (" + resultSet1.getInt("id") + ")";

				PdfPCell cell3 = new PdfPCell(new Paragraph(fullName, mainContent));
				cell3.setBorderWidth(0.2f);
				cell3.setPaddingBottom(5);
				cell3.setBorderColor(BaseColor.WHITE);

				/*
				 * For Date
				 */

				PdfPCell cell4 = new PdfPCell(new Paragraph("Date", mainContent));
				cell4.setBorderWidth(0.01f);
				cell4.setPaddingBottom(5);
				cell4.setBorderWidthLeft(0.2f);
				cell4.setBorderColor(BaseColor.WHITE);

				PdfPCell cell5 = new PdfPCell(new Paragraph(visitDate, mainContent));
				cell5.setBorderWidth(0.2f);
				cell5.setPaddingBottom(5);
				cell5.setBorderColor(BaseColor.WHITE);

				/*
				 * For Age
				 */
				PdfPCell cell6 = new PdfPCell(new Paragraph("Age", mainContent));
				cell6.setBorderWidth(0.01f);
				cell6.setPaddingBottom(5);
				cell6.setBorderWidthLeft(0.2f);
				cell6.setBorderColor(BaseColor.WHITE);

				PdfPCell cell7 = new PdfPCell(new Paragraph(resultSet1.getString("age"), mainContent));
				cell7.setBorderWidth(0.2f);
				cell7.setPaddingBottom(5);
				cell7.setBorderColor(BaseColor.WHITE);

				/*
				 * For Diagnosis
				 */
				PdfPCell cell8 = new PdfPCell(new Paragraph("Gender", mainContent));
				cell8.setBorderWidth(0.01f);
				cell8.setPaddingBottom(5);
				cell8.setBorderWidthLeft(0.2f);
				cell8.setBorderColor(BaseColor.WHITE);

				PdfPCell cell9 = new PdfPCell(new Paragraph(resultSet1.getString("gender"), mainContent));
				cell9.setBorderWidth(0.2f);
				cell9.setPaddingBottom(2);
				cell9.setBorderColor(BaseColor.WHITE);

				/*
				 * For Diagnosis
				 */
				PdfPCell cell10 = new PdfPCell(new Paragraph("Address", mainContent));
				cell10.setBorderWidth(0.01f);
				cell10.setPaddingBottom(5);
				cell10.setBorderWidthLeft(0.2f);
				cell10.setBorderColor(BaseColor.WHITE);

				PdfPCell cell11 = new PdfPCell(new Paragraph(resultSet1.getString("address"), mainContent));
				cell11.setBorderWidth(0.2f);
				cell11.setPaddingBottom(2);
				cell11.setBorderColor(BaseColor.WHITE);

				/*
				 * For Visit Type
				 */
				PdfPCell cell12 = new PdfPCell(new Paragraph("Phone Number", mainContent));
				cell12.setBorderWidth(0.01f);
				cell12.setPaddingBottom(5);
				cell12.setBorderWidthLeft(0.2f);
				cell12.setBorderColor(BaseColor.WHITE);
				cell12.setBorderWidthLeft(0.0f);
				cell12.setBorderWidthTop(0.0f);
				cell12.setBorderColorBottom(BaseColor.WHITE);

				PdfPCell cell13 = new PdfPCell(new Paragraph(resultSet1.getString("mobile"), mainContent));
				cell13.setBorderWidth(0.2f);
				cell13.setPaddingBottom(2);
				cell13.setBorderColor(BaseColor.WHITE);
				cell13.setBorderWidthLeft(0.0f);
				cell13.setBorderWidthTop(0.0f);
				cell13.setBorderColorBottom(BaseColor.WHITE);

				/*
				 * For Comment
				 */
				PdfPCell cell14 = new PdfPCell(new Paragraph("Alternate Number:", mainContent));
				cell14.setBorderWidth(0.01f);
				cell14.setPaddingBottom(5);
				cell14.setBorderWidthLeft(0.2f);
				cell14.setBorderColor(BaseColor.WHITE);
				cell14.setBorderWidthLeft(0.0f);
				cell14.setBorderWidthTop(0.0f);
				cell14.setBorderColorBottom(BaseColor.WHITE);

				PdfPCell cell15 = new PdfPCell(new Paragraph(resultSet1.getString("phone"), mainContent));
				cell15.setBorderWidth(0.2f);
				cell15.setColspan(3);
				cell15.setPaddingBottom(2);
				cell15.setBorderColor(BaseColor.WHITE);
				cell15.setBorderWidthLeft(0.0f);
				cell15.setBorderWidthTop(0.0f);
				cell15.setBorderWidthBottom(1f);
				cell15.setBorderColorBottom(BaseColor.WHITE);

				/*
				 * For Occupation
				 */
				PdfPCell cell16 = new PdfPCell(new Paragraph("Occupation", mainContent));
				cell16.setBorderWidth(0.01f);
				cell16.setPaddingBottom(5);
				cell16.setBorderWidthLeft(0.2f);
				cell16.setBorderColor(BaseColor.WHITE);

				PdfPCell cell17 = new PdfPCell(new Paragraph(resultSet1.getString("occupation"), mainContent));
				cell17.setBorderWidth(0.2f);
				cell17.setPaddingBottom(5);
				cell17.setBorderColor(BaseColor.WHITE);
				/*
				 * adding all cell to the table to create tabular structure
				 */

				table.addCell(cell);
				table.addCell(cell2);
				table.addCell(cell3);
				table.addCell(cell4);
				table.addCell(cell5);
				table.addCell(cell6);
				table.addCell(cell7);
				table.addCell(cell8);
				table.addCell(cell9);
				table.addCell(cell10);
				table.addCell(cell11);
				table.addCell(cell12);
				table.addCell(cell13);
				table.addCell(cell14);
				table.addCell(cell15);
				table.addCell(cell16);
				table.addCell(cell17);

				document.add(table);
			}

			/*
			 * for OPD Opthalmology Form
			 */
			PdfPTable table2 = new PdfPTable(3);
			table2.setWidthPercentage(100);
			Rectangle rect = new Rectangle(270, 700);
			table2.setWidthPercentage(new float[] { 100, 100, 100 }, rect);

			/*
			 * Creating Table header
			 */

			// For blank space
			PdfPCell cell = new PdfPCell(new Paragraph(
					"                                                                                               "
							+ "                                                                                                                            "
							+ "                                                                                                                              ",
					Font2));
			cell.setColspan(3);
			cell.setBorderWidthRight(0f);
			cell.setBorderWidthLeft(0f);
			cell.setBorderWidthTop(0f);
			cell.setBorderWidthBottom(0f);
			cell.setBorderColorTop(BaseColor.WHITE);

			// for Title
			PdfPCell cell0 = new PdfPCell(new Paragraph("Genaral Clinic IPD Form", Font5));
			cell0.setPaddingTop(15);
			cell0.setPaddingBottom(10);
			cell0.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell0.setUseBorderPadding(true);
			cell0.setColspan(3);
			cell0.setBorderWidthRight(0.1f);
			cell0.setBorderWidthLeft(0.1f);
			cell0.setBorderWidthTop(0.1f);
			cell0.setBorderWidthBottom(1f);
			cell0.setBorderColorBottom(BaseColor.DARK_GRAY);
			cell0.setBorderColor(BaseColor.WHITE);

			// Gene
			PdfPCell cell1 = new PdfPCell(new Paragraph("Medical Reg. No.: " + ClinicRegNo, Font4));

			cell1.setBorderWidth(0.01f);
			cell1.setPaddingBottom(5);
			cell1.setPaddingTop(5);
			cell1.setBorderColor(BaseColor.WHITE);

			// OD RE
			PdfPCell cell2 = new PdfPCell(new Paragraph("Visit Date (DD/MM/YYYY): " + visitDate, Font4));

			cell2.setBorderWidth(0.01f);
			cell2.setPaddingBottom(5);
			cell2.setPaddingTop(5);
			cell2.setBorderColor(BaseColor.WHITE);

			PdfPCell cell02 = new PdfPCell(new Paragraph("Diagnosis: " + diagnosis, Font4));
			cell02.setBorderWidth(0.01f);
			cell02.setPaddingBottom(5);
			cell02.setPaddingTop(5);
			cell02.setBorderColor(BaseColor.WHITE);

			PdfPCell cell4 = new PdfPCell(new Paragraph(
					"                                                                                               "
							+ "                                                                                                                            "
							+ "                                                                                                                              ",
					Font2));
			cell4.setColspan(3);
			cell4.setBorderWidthRight(0f);
			cell4.setBorderWidthLeft(0f);
			cell4.setBorderWidthTop(0f);
			cell4.setBorderWidthBottom(1f);
			cell4.setBorderColorBottom(BaseColor.LIGHT_GRAY);

			PdfPCell cell15 = new PdfPCell(new Paragraph("Doctor's Orders: ", Font4));
			cell15.setBorderWidth(0.01f);
			cell15.setPaddingBottom(5);
			cell15.setPaddingTop(5);
			cell15.setBorderColor(BaseColor.WHITE);

			table2.addCell(cell);
			table2.addCell(cell0);
			table2.addCell(cell1);
			table2.addCell(cell2);
			table2.addCell(cell02);
			table2.addCell(cell4);
			table2.addCell(cell15);

			while (resultSet.next()) {

				PdfPCell cell16 = new PdfPCell(new Paragraph(advice, mainContent));
				cell16.setBorderWidth(0.01f);
				cell16.setPaddingBottom(5);
				cell16.setPaddingTop(5);
				cell16.setColspan(2);
				cell16.setBorderColor(BaseColor.WHITE);
				table2.addCell(cell16);
			}

			PdfPCell cell17 = new PdfPCell(new Paragraph("Treatment: ", Font4));
			cell17.setBorderWidth(0.01f);
			cell17.setPaddingBottom(5);
			cell17.setPaddingTop(5);
			cell17.setBorderColor(BaseColor.WHITE);
			table2.addCell(cell17);

			while (resultSet4.next()) {

				PdfPCell cell18 = new PdfPCell(new Paragraph(treatment, mainContent));
				cell18.setBorderWidth(0.01f);
				cell18.setPaddingBottom(5);
				cell18.setPaddingTop(5);
				cell18.setColspan(2);
				cell18.setBorderColor(BaseColor.WHITE);
				table2.addCell(cell18);
			}

			document.add(table2);

			PdfPTable table3 = new PdfPTable(3);

			table3.setWidthPercentage(100);
			Rectangle rect7 = new Rectangle(270, 700);
			table3.setWidthPercentage(new float[] { 100, 100, 100 }, rect7);

			// For blank space
			PdfPCell cell012 = new PdfPCell(new Paragraph(
					"                                                                                               "
							+ "                                                                                                                            "
							+ "                                                                                                                              ",
					Font2));
			cell012.setColspan(3);
			cell012.setBorderWidthRight(0f);
			cell012.setBorderWidthLeft(0f);
			cell012.setBorderWidthTop(0f);
			cell012.setBorderWidthBottom(0f);
			cell012.setBorderColorTop(BaseColor.WHITE);

			// for Title
			PdfPCell cell01 = new PdfPCell(new Paragraph("Prescription Details", Font5));
			cell01.setPaddingTop(15);
			cell01.setPaddingBottom(10);
			cell01.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell01.setUseBorderPadding(true);
			cell01.setColspan(3);
			cell01.setBorderWidthRight(0.1f);
			cell01.setBorderWidthLeft(0.1f);
			cell01.setBorderWidthTop(0.1f);
			cell01.setBorderWidthBottom(1f);
			cell01.setBorderColorBottom(BaseColor.DARK_GRAY);
			cell01.setBorderColor(BaseColor.WHITE);

			table3.addCell(cell012);
			table3.addCell(cell01);

			document.add(table3);

			while (resultSet6.next()) {

				investigation = resultSet6.getString("investigation");

				if (investigation == "" || investigation == null) {
					continue;
				} else if (investigation.isEmpty()) {
					continue;
				} else {

					PdfPTable table4 = new PdfPTable(3);

					table4.setWidthPercentage(100);
					Rectangle rect5 = new Rectangle(270, 700);
					table4.setWidthPercentage(new float[] { 100, 100, 100 }, rect5);

					PdfPCell cell002 = new PdfPCell(new Paragraph("Investigation: ", Font4));
					cell002.setBorderWidth(0.01f);
					cell002.setPaddingBottom(5);
					cell002.setPaddingTop(5);
					cell002.setColspan(1);
					cell002.setBorderWidthLeft(0.2f);
					cell002.setBorderColor(BaseColor.WHITE);

					/*
					 * for investigation details
					 */
					PdfPCell cell2001 = new PdfPCell(new Paragraph(investigation, mainContent));
					cell2001.setBorderWidth(0.1f);
					cell2001.setColspan(2);
					cell2001.setPaddingBottom(5);
					cell2001.setPaddingTop(5);
					cell2001.setHorizontalAlignment(Element.ALIGN_LEFT);
					cell2001.setBorderColor(BaseColor.WHITE);

					table4.addCell(cell002);
					table4.addCell(cell2001);

					document.add(table4);

				}

			}

			/*
			 * For prescription
			 */
			PdfPTable table5 = new PdfPTable(3);
			table5.setWidthPercentage(100);
			Rectangle rect2 = new Rectangle(270, 700);
			table5.setWidthPercentage(new float[] { 30, 180, 60 }, rect2);

			// For blank space
			PdfPCell cell30 = new PdfPCell(new Paragraph(
					"                                                                                               "
							+ "                                                                                                                            "
							+ "                                                                                                                              ",
					Font2));
			cell30.setColspan(3);
			cell30.setBorderWidthRight(0f);
			cell30.setBorderWidthLeft(0f);
			cell30.setBorderWidthTop(0f);
			cell30.setBorderWidthBottom(0f);
			cell30.setBorderColorTop(BaseColor.WHITE);

			PdfPCell cell3011 = new PdfPCell(new Paragraph(
					"                                                                                               "
							+ "                                                                                                                            "
							+ "                                                                                                                              ",
					Font2));
			cell3011.setColspan(3);
			cell3011.setBorderWidthRight(0f);
			cell3011.setBorderWidthLeft(0f);
			cell3011.setBorderWidthTop(0f);
			cell3011.setBorderWidthBottom(0f);
			cell3011.setBorderColorTop(BaseColor.WHITE);

			/*
			 * Table for Prescription image
			 */
			PdfPTable imageTable = new PdfPTable(2);
			imageTable.setWidthPercentage(100);
			imageTable.setWidths(new int[] { 1, 2 });

			PdfPCell imageCell1 = new PdfPCell(prescrImg, true);
			imageCell1.setBorderColor(BaseColor.WHITE);

			PdfPCell imageCell2 = new PdfPCell(new Paragraph("", mainContent));
			imageCell2.setBorderColor(BaseColor.WHITE);

			imageTable.addCell(imageCell1);
			imageTable.addCell(imageCell2);

			// Gene
			PdfPCell cell3002 = new PdfPCell(imageTable);
			cell3002.setBorderWidth(0.0f);
			cell3002.setPaddingBottom(10);
			cell3002.setBorderColor(BaseColor.WHITE);

			PdfPCell cell320 = new PdfPCell(new Paragraph("", mainContent));
			cell320.setBorderWidth(0.01f);
			cell320.setPaddingBottom(5);
			cell320.setBorderColor(BaseColor.WHITE);

			// Amino Acid Change
			PdfPCell cell34 = new PdfPCell(new Paragraph("Qty", Font5));
			cell34.setBorderWidth(0.01f);
			cell34.setPaddingBottom(5);
			cell34.setHorizontalAlignment(Element.ALIGN_RIGHT);
			cell34.setBorderColor(BaseColor.WHITE);

			table5.addCell(cell30);
			table5.addCell(cell3011);
			table5.addCell(cell3002);
			table5.addCell(cell320);
			table5.addCell(cell34);

			document.add(table5);

			while (resultSet7.next()) {

				PdfPTable table6 = new PdfPTable(3);

				table6.setWidthPercentage(100);
				Rectangle rect1 = new Rectangle(270, 700);
				table6.setWidthPercentage(new float[] { 110, 40, 120 }, rect1);

				String finalTradeName = resultSet7.getString("tradeName").toUpperCase();

				if (resultSet7.getString("drugName") == null || resultSet7.getString("drugName") == "") {
					finalTradeName = resultSet7.getString("tradeName").toUpperCase();
				} else if (resultSet7.getString("drugName").isEmpty()) {
					finalTradeName = resultSet7.getString("tradeName").toUpperCase();
				} else {
					finalTradeName += "\n(" + resultSet7.getString("drugName") + ")";
				}

				PdfPCell cell21 = new PdfPCell(new Paragraph(finalTradeName, marathiFont));
				cell21.setBorderWidth(0.1f);
				cell21.setPaddingBottom(1);
				cell21.setPaddingTop(3);
				cell21.setColspan(2);
				cell21.setBorderColor(BaseColor.WHITE);

				PdfPCell cell22 = new PdfPCell(new Paragraph("" + resultSet7.getDouble("quantity"), mainContent));
				cell22.setBorderWidth(0.1f);
				cell22.setPaddingBottom(1);
				cell22.setPaddingTop(3);
				cell22.setHorizontalAlignment(Element.ALIGN_RIGHT);
				cell22.setBorderColor(BaseColor.WHITE);

				table6.addCell(cell21);
				table6.addCell(cell22);

				String frequency = resultSet7.getString("frequency");

				int noOfDays = resultSet7.getInt("numberOfDays");

				PdfPTable table7 = new PdfPTable(3);

				table7.setWidthPercentage(100);
				Rectangle rect3 = new Rectangle(270, 700);
				table7.setWidthPercentage(new float[] { 80, 50, 140 }, rect1);

				PdfPCell cell24 = new PdfPCell(new Paragraph(frequency, marathiFont));
				cell24.setBorderWidth(0.1f);
				cell24.setPaddingBottom(10);
				cell24.setBorderColor(BaseColor.WHITE);

				PdfPCell cell241 = new PdfPCell(new Paragraph(noOfDays + " days", mainContent));
				cell241.setBorderWidth(0.1f);
				cell241.setPaddingBottom(10);
				cell241.setBorderColor(BaseColor.WHITE);

				PdfPCell cell25 = new PdfPCell(
						new Paragraph(StringUtils.capitalize(resultSet7.getString("comment").trim()), marathiFont));
				cell25.setBorderWidth(0.1f);
				cell25.setPaddingBottom(9);
				cell25.setBorderColor(BaseColor.WHITE);

				table7.addCell(cell24);
				table7.addCell(cell241);
				table7.addCell(cell25);

				document.add(table6);
				document.add(table7);
			}

			/*
			 * For signature in footer
			 */
			PdfPTable tableNew = new PdfPTable(1);

			tableNew.setWidthPercentage(100);
			Rectangle rect6 = new Rectangle(270, 700);
			tableNew.setWidthPercentage(new float[] { 270 }, rect6);

			PdfPCell cell1112 = new PdfPCell(
					new Paragraph("Follow-up after  " + nextVisitDays + "  days.", marathiFont));
			cell1112.setBackgroundColor(BaseColor.WHITE);
			cell1112.setPaddingTop(30);
			cell1112.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell1112.setBorderColor(BaseColor.WHITE);

			tableNew.addCell(cell1112);

			document.add(tableNew);

			/*
			 * For signature in footer
			 */

			PdfPTable tableFooter = new PdfPTable(1);
			tableFooter.setTotalWidth(510);
			tableFooter.setWidthPercentage(100);

			// Table for Prescription image

			PdfPTable imageTable1 = new PdfPTable(2);
			imageTable1.setWidthPercentage(80);
			imageTable1.setWidths(new int[] { 1, 2 });

			PdfPCell imageCell11 = new PdfPCell(signImg, true);
			imageCell11.setBorderColor(BaseColor.WHITE);

			PdfPCell imageCell21 = new PdfPCell(new Paragraph("", mainContent));
			imageCell21.setBorderColor(BaseColor.WHITE);

			imageTable1.addCell(imageCell11);
			imageTable1.addCell(imageCell21);

			PdfPCell cellFooter = new PdfPCell(imageTable1);
			cellFooter.setBorderWidth(0.01f);
			cellFooter.setPaddingBottom(15);
			cellFooter.setColspan(2);
			cellFooter.setHorizontalAlignment(Element.ALIGN_RIGHT);
			cellFooter.setPaddingLeft(100);
			cellFooter.setBorderColor(BaseColor.WHITE);

			PdfPCell cellFooter1 = new PdfPCell(new Paragraph(docName, Font5));
			cellFooter1.setBorderWidth(0.01f);
			cellFooter1.setPaddingBottom(15);
			cellFooter1.setColspan(2);
			cellFooter1.setPaddingLeft(100);
			cellFooter1.setHorizontalAlignment(Element.ALIGN_RIGHT);
			cellFooter1.setBorderColor(BaseColor.WHITE);

			tableFooter.addCell(cellFooter);
			tableFooter.addCell(cellFooter1);

			FooterTable event = new FooterTable(tableFooter);
			writer.setPageEvent(event);

			document.close();

			System.out.println("Successfully written and generated PDF Report");

			status = "success";

			/*
			 * Closing resultSet, preparedStatement, connection objects
			 */
			resultSet3.close();
			preparedStatement3.close();

			resultSet2.close();
			preparedStatement2.close();

			resultSet1.close();
			preparedStatement1.close();

			connection.close();

		} catch (Exception exception) {
			exception.printStackTrace();
			status = "error";
		}
		return status;
	}

	public String convertInvestigationPDF(int patientID, int visitID, String realPath, String pdfOutFIleName,
			int clinicID, int practiceID, String username, AmazonS3 s3, String s3reportFilePath, String bucketName) {

		int i = 1;

		String visitDate = null;
		String diagnosis = "";
		String status = "error";
		String regNo = "";
		String investigation = "";
		String docName = null;
		String signature = null;
		Image signImg = null;

		ConfigurationUtil configXMLUtil = new ConfigurationUtil();

		try {

			connection = getConnection();

			/*
			 * Generate the queries to fetch details
			 */
			String fetchDetailQuery1 = QueryMaker.OPD_PDF_RETRIEVE_PATIENT;

			preparedStatement1 = connection.prepareStatement(fetchDetailQuery1);
			preparedStatement1.setInt(1, patientID);
			resultSet1 = preparedStatement1.executeQuery();

			/*
			 * Generate the queries to fetch details
			 */
			String fetchInvestigationDetailQuery = QueryMaker.RETREIVE_Investigations_Comma_SEPARATED_Test_LIST;

			preparedStatement3 = connection.prepareStatement(fetchInvestigationDetailQuery);

			preparedStatement3.setString(1, ActivityStatus.ACTIVE);
			preparedStatement3.setInt(2, visitID);

			resultSet3 = preparedStatement3.executeQuery();

			/*
			 * Retrieve patient registration no based on patientID and clinicID from
			 * ClinicRegistration table
			 */
			String fetchClinicRegNoQuery = QueryMaker.RETRIEVE_CLINIC_REG_NO_BY_CLINIC_ID;

			preparedStatement2 = connection.prepareStatement(fetchClinicRegNoQuery);

			preparedStatement2.setInt(1, clinicID);
			preparedStatement2.setInt(2, patientID);

			resultSet2 = preparedStatement2.executeQuery();

			while (resultSet2.next()) {
				regNo = resultSet2.getString("regNumber");
			}

			/*
			 * Retrieve NextVisitDate based on visitID from Visit table
			 */
			String fetchNextVisitDateQuery = QueryMaker.OPD_PDF_RETRIEVE_VISIT;

			preparedStatement2 = connection.prepareStatement(fetchNextVisitDateQuery);

			preparedStatement2.setInt(1, visitID);

			resultSet2 = preparedStatement2.executeQuery();

			while (resultSet2.next()) {
				SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");

				if (resultSet2.getString("visitDate") == null || resultSet2.getString("visitDate") == ""
						|| resultSet2.getString("visitDate").isEmpty()) {
					visitDate = "";
				} else {
					visitDate = dateFormat.format(resultSet2.getDate("visitDate"));
				}

				diagnosis = resultSet2.getString("diagnosis");

			}

			// FOR SIGNATURE PRINTING

			ConfigXMLUtil xmlUtil = new ConfigXMLUtil();
			RegistrationDAOinf registrationDAOinf = new RegistrationDAOImpl();

			// Retrieving USER Details by PracticeID
			HashMap<String, String> MDMap = registrationDAOinf.retrieveUserDetails(practiceID, username);

			// File SignatureFile = new File(logoFilePath + File.separator +
			// MDMap.get("Signature"));
			signature = MDMap.get("Signature");
			docName = MDMap.get("FirstName") + " " + MDMap.get("LastName");

			System.out.println("doc name ::" + docName);

			if (signature == "" || signature == null) {
				signImg = null;
			} else if (signature.isEmpty()) {
				signImg = null;
			} else {

				S3ObjectInputStream s3ObjectInputStream = s3
						.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, signature))
						.getObjectContent();

				IOUtils.copy(s3ObjectInputStream, new FileOutputStream(new File(realPath + "images/" + signature)));

				signImg = Image.getInstance(realPath + "images/" + signature);
			}

			/*
			 * Getting image path from XML
			 */
			String A5ImagePath = configXMLUtil.getLetterHeadImage();

			System.out.println("A5IM.." + A5ImagePath);

			/*
			 * Getting page size from XMl
			 */
			String pageSize = configXMLUtil.getPageSize();

			/*
			 * Setting path to store PDF file
			 */
			File file = new File(realPath + "/" + pdfOutFIleName);

			/*
			 * Creating Document for PDF
			 */
			Document document = null;

			/*
			 * Checking whether pageSize tag in XMl contains A5 or A4, according to that
			 * setting PDF page size
			 */
			if (pageSize.equals("A5")) {
				document = new Document(PageSize.A5);
			} else if (pageSize.equals("A4")) {
				document = new Document(PageSize.A4);
			}

			PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(file));

			Font Font1 = new Font(Font.FontFamily.TIMES_ROMAN, 10, Font.NORMAL);
			Font Font3 = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.NORMAL);
			Font Font2 = new Font(Font.FontFamily.TIMES_ROMAN, 8, Font.NORMAL);
			Font Font4 = new Font(Font.FontFamily.TIMES_ROMAN, 5, Font.BOLD);
			Font Font5 = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.BOLD);
			Font Font6 = new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.BOLD);
			Font Font7 = new Font(Font.FontFamily.TIMES_ROMAN, 14, Font.BOLD);
			Font mainContent = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.NORMAL);
			Font mainContent1 = new Font(Font.FontFamily.TIMES_ROMAN, 15, Font.NORMAL);
			mainContent1.setColor(BaseColor.GRAY);

			document.open();

			document.setMargins(36, 36, 55, 36);

			/*
			 * Adding image
			 */
			PdfContentByte canvas = writer.getDirectContentUnder();

			/*
			 * Checking whether pageSize is A4 or A5, according to that background image is
			 * being set
			 */

			Image image;

			if (pageSize.equals("A5")) {
				if (A5ImagePath == null || A5ImagePath == "") {

					image = null;
				} else {

					if (A5ImagePath.isEmpty()) {
						image = null;
					} else {

						S3ObjectInputStream s3ObjectInputStream = s3
								.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, A5ImagePath))
								.getObjectContent();

						IOUtils.copy(s3ObjectInputStream,
								new FileOutputStream(new File(realPath + "images/" + A5ImagePath)));

						image = Image.getInstance(realPath + "images/" + A5ImagePath);
						image.scaleToFit(PageSize.A5.getWidth(), PageSize.A5.getHeight());
						image.setAbsolutePosition(0, 0);

						canvas.saveState();
						PdfGState state = new PdfGState();
						canvas.setGState(state);
						canvas.addImage(image);
						canvas.restoreState();
					}
				}
			} else if (pageSize.equals("A4")) {
				if (A5ImagePath == null || A5ImagePath == "") {

					image = null;

				} else {

					if (A5ImagePath.isEmpty()) {
						image = null;
					} else {

						S3ObjectInputStream s3ObjectInputStream = s3
								.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, A5ImagePath))
								.getObjectContent();

						IOUtils.copy(s3ObjectInputStream,
								new FileOutputStream(new File(realPath + "images/" + A5ImagePath)));

						image = Image.getInstance(realPath + "images/" + A5ImagePath);
						image.scaleToFit(PageSize.A4.getWidth(), PageSize.A4.getHeight());
						image.setAbsolutePosition(0, 0);

						canvas.saveState();
						PdfGState state = new PdfGState();
						canvas.setGState(state);
						canvas.addImage(image);
						canvas.restoreState();
					}
				}
			}

			/*
			 * Setting header
			 */
			document.addCreator("eDhanvantari");
			document.addTitle("General Physician Investigation");

			/*
			 * For displaying patient personal details
			 */
			while (resultSet1.next()) {
				PdfPTable table = new PdfPTable(3);

				table.setFooterRows(1);
				table.setWidthPercentage(100);
				Rectangle rect = new Rectangle(270, 700);
				table.setWidthPercentage(new float[] { 120, 75, 75 }, rect);

				PdfPCell cell0 = new PdfPCell(new Paragraph("Investigation", Font7));
				cell0.setPaddingTop(70);
				cell0.setPaddingBottom(10);
				cell0.setHorizontalAlignment(Element.ALIGN_CENTER);
				cell0.setUseBorderPadding(true);
				cell0.setColspan(3);
				cell0.setBorderWidthBottom(1f);
				cell0.setBorderColor(BaseColor.WHITE);

				/* For Patient Name */

				PdfPCell cell3 = new PdfPCell(new Paragraph("Reg.No : " + regNo, Font5));
				cell3.setBorderWidth(0.2f);
				cell3.setColspan(2);
				cell3.setPaddingBottom(5);
				cell3.setBorderColor(BaseColor.WHITE);

				PdfPCell cell311 = new PdfPCell(new Paragraph("Date : " + visitDate, Font5));
				cell311.setBorderWidth(0.2f);
				cell311.setPaddingBottom(5);
				cell311.setBorderColor(BaseColor.WHITE);

				String fullName = "";

				fullName = StringUtils.capitalize(resultSet1.getString("firstName")) + " "
						+ StringUtils.capitalize(resultSet1.getString("lastName"));

				PdfPCell cell2 = new PdfPCell(new Paragraph("Name : " + fullName, Font5));
				cell2.setBorderWidth(0.01f);
				cell2.setPaddingBottom(5);
				cell2.setBorderWidthLeft(0.2f);
				cell2.setBorderColor(BaseColor.WHITE);

				PdfPCell cell2002 = new PdfPCell(new Paragraph("" + resultSet1.getString("age") + " Years", Font5));
				cell2002.setBorderWidth(0.01f);
				cell2002.setPaddingBottom(5);
				cell2002.setBorderWidthLeft(0.2f);
				cell2002.setBorderColor(BaseColor.WHITE);

				PdfPCell cell2003 = new PdfPCell(
						new Paragraph("" + StringUtils.capitalize(resultSet1.getString("gender")), Font5));
				cell2003.setBorderWidth(0.01f);
				cell2003.setPaddingBottom(5);
				cell2003.setBorderWidthLeft(0.2f);
				cell2003.setBorderColor(BaseColor.WHITE);

				PdfPCell cell2004 = new PdfPCell(
						new Paragraph("Diagnosis: " + StringUtils.capitalize(diagnosis), Font5));
				cell2004.setBorderWidth(0.01f);
				cell2004.setPaddingBottom(5);
				cell2004.setColspan(3);
				cell2004.setBorderWidthLeft(0.2f);
				cell2004.setBorderColor(BaseColor.WHITE);

				table.addCell(cell0);
				table.addCell(cell3);
				table.addCell(cell311);
				table.addCell(cell2);
				table.addCell(cell2002);
				table.addCell(cell2003);
				table.addCell(cell2004);

				document.add(table);
			}

			while (resultSet3.next()) {

				investigation = resultSet3.getString("investigation");

				if (investigation == "" || investigation == null) {
					continue;
				} else if (investigation.isEmpty()) {
					continue;
				} else {

					PdfPTable table2 = new PdfPTable(2);

					table2.setWidthPercentage(100);
					Rectangle rect5 = new Rectangle(270, 700);
					table2.setWidthPercentage(new float[] { 105, 165 }, rect5);

					PdfPCell cell002 = new PdfPCell(new Paragraph("Investigation/Procedure: ", Font5));
					cell002.setBorderWidth(0.01f);
					cell002.setPaddingTop(30);
					cell002.setPaddingBottom(5);
					cell002.setColspan(1);
					cell002.setBorderWidthLeft(0.2f);
					cell002.setBorderColor(BaseColor.WHITE);

					/*
					 * for investigation details
					 */
					PdfPCell cell2001 = new PdfPCell(new Paragraph(investigation, mainContent));
					cell2001.setBorderWidth(0.2f);
					cell2001.setPaddingTop(30);
					cell2001.setColspan(2);
					cell2001.setPaddingBottom(1);
					cell2001.setHorizontalAlignment(Element.ALIGN_LEFT);
					cell2001.setBorderColor(BaseColor.WHITE);

					table2.addCell(cell002);
					table2.addCell(cell2001);

					document.add(table2);
				}
			}

			PdfPTable tableFooter = new PdfPTable(1);
			tableFooter.setTotalWidth(510);
			tableFooter.setWidthPercentage(100);

			// Table for Prescription image

			PdfPTable imageTable1 = new PdfPTable(2);
			imageTable1.setWidthPercentage(80);
			imageTable1.setWidths(new int[] { 1, 2 });

			PdfPCell imageCell11 = new PdfPCell(signImg, true);
			imageCell11.setBorderColor(BaseColor.WHITE);

			PdfPCell imageCell21 = new PdfPCell(new Paragraph("", mainContent));
			imageCell21.setBorderColor(BaseColor.WHITE);

			imageTable1.addCell(imageCell11);
			imageTable1.addCell(imageCell21);

			PdfPCell cellFooter = new PdfPCell(imageTable1);
			cellFooter.setBorderWidth(0.01f);
			cellFooter.setPaddingBottom(15);
			cellFooter.setPaddingLeft(100);
			cellFooter.setBorderColor(BaseColor.WHITE);

			PdfPCell cellFooter1 = new PdfPCell(new Paragraph(docName, Font5));
			cellFooter1.setBorderWidth(0.01f);
			cellFooter1.setPaddingBottom(15);
			cellFooter1.setPaddingLeft(100);
			cellFooter1.setBorderColor(BaseColor.WHITE);

			tableFooter.addCell(cellFooter);
			tableFooter.addCell(cellFooter1);

			// document.add(tableFooter);

			FooterTable1 event = new FooterTable1(tableFooter);
			writer.setPageEvent(event);

			document.close();

			System.out.println("Successfully written and generated General physicial Investigation PDF Report");

			status = "success";

			connection.close();

		} catch (Exception exception) {
			exception.printStackTrace();
			status = "error";
		}

		return status;
	}

	public String convertPrescriptionForPhysicianOPDPDF(int patientID, int visitID, String realPath,
			String pdfOutFIleName, int clinicID, int practiceID, String username, AmazonS3 s3, String s3reportFilePath,
			String bucketName) {

		int i = 1;

		String visitDate = null;
		String status = "error";
		String regNo = "";
		String nextVisitDate = "";
		int nextVisitDays = 0;
		String investigation = "";
		String diagnosis = "";
		String advice = "";
		String docName = null;
		String signature = null;
		Image signImg = null;

		boolean orthoCheck = false;

		/*
		 * Declaring variable which stores the location for FreeSans.ttf file to print
		 * marathi text on pdf
		 */
		String marathiFontDir = realPath + "fonts/FreeSans.ttf";

		ConfigurationUtil configXMLUtil = new ConfigurationUtil();

		PatientForm patientForm = new PatientForm();

		try {
			connection = getConnection();

			/*
			 * Generate the queries to fetch details
			 */
			String fetchDetailQuery1 = QueryMaker.OPD_PDF_RETRIEVE_PATIENT;

			preparedStatement1 = connection.prepareStatement(fetchDetailQuery1);
			preparedStatement1.setInt(1, patientID);
			resultSet1 = preparedStatement1.executeQuery();

			/*
			 * Generate the queries to fetch details
			 */
			String fetchDetailQuery4 = QueryMaker.OPD_PDF_RETRIEVE_PRESCRIPTIONPDF;

			preparedStatement = connection.prepareStatement(fetchDetailQuery4);

			preparedStatement.setInt(1, visitID);
			preparedStatement.setString(2, ActivityStatus.ACTIVE);

			resultSet = preparedStatement.executeQuery();

			String fetchDetailQuery4_investigation = QueryMaker.OPD_PDF_RETRIEVE_PRESCRIPTIONPDF_investigation;

			preparedStatement_investigation = connection.prepareStatement(fetchDetailQuery4_investigation);

			preparedStatement_investigation.setInt(1, visitID);

			resultSet_investigation = preparedStatement_investigation.executeQuery();

			/*
			 * Retrieve patient registration no based on patientID and clinicID from
			 * ClinicRegistration table
			 */
			String fetchClinicRegNoQuery = QueryMaker.RETRIEVE_CLINIC_REG_NO_BY_CLINIC_ID;

			preparedStatement2 = connection.prepareStatement(fetchClinicRegNoQuery);

			preparedStatement2.setInt(1, clinicID);
			preparedStatement2.setInt(2, patientID);

			resultSet2 = preparedStatement2.executeQuery();

			while (resultSet2.next()) {
				regNo = resultSet2.getString("regNumber");
			}

			/*
			 * Retrieve NextVisitDate based on visitID from Visit table
			 */
			String fetchNextVisitDateQuery = QueryMaker.OPD_PDF_RETRIEVE_VISIT;

			preparedStatement2 = connection.prepareStatement(fetchNextVisitDateQuery);

			preparedStatement2.setInt(1, visitID);

			resultSet2 = preparedStatement2.executeQuery();

			while (resultSet2.next()) {
				SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");

				SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");

				if (resultSet2.getString("visitDate") == null || resultSet2.getString("visitDate") == ""
						|| resultSet2.getString("visitDate").isEmpty()) {
					visitDate = "";
				} else {
					visitDate = dateFormat.format(resultSet2.getDate("visitDate"));
				}
				nextVisitDate = resultSet2.getString("nextVisitDate");
				nextVisitDays = resultSet2.getInt("nextVisitDays");
				diagnosis = resultSet2.getString("diagnosis");
				advice = resultSet2.getString("advice") == null ? "" : resultSet2.getString("advice");
			}

			// Check if the diagnosis is of type JSON
			if (new JSONValidator().isValid(diagnosis)) {
				orthoCheck = true;

				org.json.JSONArray diagnosisJSONArray = new org.json.JSONArray(diagnosis);

				diagnosis = "";

				for (int i_counter = 0; i_counter < diagnosisJSONArray.length(); i_counter++) {

					org.json.JSONObject diagnosisJSONObject = diagnosisJSONArray.getJSONObject(i_counter);

					diagnosis = diagnosis + ", " + diagnosisJSONObject.getString("diagnosis");

				}

				if (diagnosis.startsWith(",")) {
					diagnosis = diagnosis.substring(1);
				}
			}

			// FOR SIGNATURE PRINTING

			ConfigXMLUtil xmlUtil = new ConfigXMLUtil();
			RegistrationDAOinf registrationDAOinf = new RegistrationDAOImpl();

			// Retrieving USER Details by PracticeID
			HashMap<String, String> MDMap = registrationDAOinf.retrieveUserDetails(practiceID, username);

			// File SignatureFile = new File(logoFilePath + File.separator +
			// MDMap.get("Signature"));
			signature = MDMap.get("Signature");

			docName = MDMap.get("FirstName") + " " + MDMap.get("LastName");

			if (signature == "" || signature == null) {
				signImg = null;
			} else if (signature.isEmpty()) {
				signImg = null;
			} else {

				S3ObjectInputStream s3ObjectInputStream = s3
						.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, signature))
						.getObjectContent();

				IOUtils.copy(s3ObjectInputStream, new FileOutputStream(new File(realPath + "images/" + signature)));

				signImg = Image.getInstance(realPath + "images/" + signature);
			}

			/*
			 * Getting image path from XML
			 */
			String A5ImagePath = configXMLUtil.getLetterHeadImage();

			System.out.println("A5IM.." + A5ImagePath);

			/*
			 * Getting page size from XMl
			 */
			String pageSize = configXMLUtil.getPageSize();

			/*
			 * Setting path to store PDF file
			 */
			File file1 = new File(realPath + "/" + pdfOutFIleName);

			System.out.println("PRESC FILE NAME IN CONVERT::" + file1);
			/*
			 * Creating Document for PDF
			 */
			Document document = null;

			/*
			 * Checking whether pageSize tag in XMl contains A5 or A4, according to that
			 * setting PDF page size
			 */
			System.out.println("page size is prescription :: " + pageSize);
			if (pageSize.equals("A5")) {
				document = new Document(PageSize.A5);
			} else if (pageSize.equals("A4")) {
				document = new Document(PageSize.A4);
			}

			PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(file1));

			System.out.println("PRESC WRITER NAME IN CONVERT::" + writer);

			Font Font1 = new Font(Font.FontFamily.TIMES_ROMAN, 10, Font.NORMAL);
			Font Font3 = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.NORMAL);
			Font Font2 = new Font(Font.FontFamily.TIMES_ROMAN, 8, Font.NORMAL);
			Font Font4 = new Font(Font.FontFamily.TIMES_ROMAN, 5, Font.BOLD);
			Font Font5 = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.BOLD);
			Font Font6 = new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.BOLD);
			Font Font7 = new Font(Font.FontFamily.TIMES_ROMAN, 14, Font.BOLD);
			Font mainContent = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.NORMAL);
			Font mainContent1 = new Font(Font.FontFamily.TIMES_ROMAN, 15, Font.NORMAL);
			mainContent1.setColor(BaseColor.GRAY);

			Chunk bullet = new Chunk("\u2022", Font4);

			/*
			 * Defining marathi font
			 */
			Font marathiFont = FontFactory.getFont(marathiFontDir, BaseFont.IDENTITY_H, BaseFont.EMBEDDED);
			marathiFont.setSize(10);

			document.open();

			// document.setMargins(36, 36, 55, 36);

			/*
			 * Adding image
			 */
			PdfContentByte canvas = writer.getDirectContentUnder();

			/*
			 * Checking whether pageSize is A4 or A5, according to that background image is
			 * being set
			 */

			Image image;

			if (pageSize.equals("A5")) {
				if (A5ImagePath == null || A5ImagePath == "") {
					image = null;

				} else {

					if (A5ImagePath.isEmpty()) {
						image = null;
					} else {

						S3ObjectInputStream s3ObjectInputStream = s3
								.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, A5ImagePath))
								.getObjectContent();

						IOUtils.copy(s3ObjectInputStream,
								new FileOutputStream(new File(realPath + "images/" + A5ImagePath)));

						image = Image.getInstance(realPath + "images/" + A5ImagePath);

						image.scaleToFit(PageSize.A5.getWidth(), PageSize.A5.getHeight());
						image.setAbsolutePosition(0, 0);

						canvas.saveState();
						PdfGState state = new PdfGState();
						canvas.setGState(state);
						canvas.addImage(image);
						canvas.restoreState();
					}

				}
			} else if (pageSize.equals("A4")) {
				if (A5ImagePath == null || A5ImagePath == "") {

					image = null;

				} else {

					if (A5ImagePath.isEmpty()) {

						image = null;
					} else {

						S3ObjectInputStream s3ObjectInputStream = s3
								.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, A5ImagePath))
								.getObjectContent();

						IOUtils.copy(s3ObjectInputStream,
								new FileOutputStream(new File(realPath + "images/" + A5ImagePath)));

						image = Image.getInstance(realPath + "images/" + A5ImagePath);

						image.scaleToFit(PageSize.A4.getWidth(), PageSize.A4.getHeight());
						image.setAbsolutePosition(0, 0);

						canvas.saveState();
						PdfGState state = new PdfGState();
						canvas.setGState(state);
						canvas.addImage(image);
						canvas.restoreState();
					}

				}
			}

			Image prescrImg = Image.getInstance(realPath + "/images/Rx_icon.png");
			System.out.println("presc rx img is::" + prescrImg);

			/*
			 * Setting header
			 */
			document.addCreator("eDhanvantari");
			document.addTitle("General Physician Prescription");

			/*
			 * For displaying patient personal details
			 */
			while (resultSet1.next()) {
				PdfPTable table = new PdfPTable(3);

				table.setFooterRows(1);
				table.setWidthPercentage(110);
				Rectangle rect = new Rectangle(270, 700);
				table.setWidthPercentage(new float[] { 120, 75, 75 }, rect);

				PdfPCell cell0 = new PdfPCell(new Paragraph("Prescription", Font7));
				cell0.setPaddingTop(100);
				cell0.setPaddingBottom(10);
				cell0.setHorizontalAlignment(Element.ALIGN_CENTER);
				cell0.setUseBorderPadding(true);
				cell0.setColspan(3);
				cell0.setBorderWidthBottom(1f);
				// cell0.setBorderColorBottom(BaseColor.DARK_GRAY);
				cell0.setBorder(Rectangle.NO_BORDER);

				/* For Patient Name */

				PdfPCell cell3 = new PdfPCell(new Paragraph("Reg.No : " + regNo, Font5));
				// cell3.setPaddingTop(100);
				cell3.setBorderWidth(0.2f);
				cell3.setColspan(2);
				cell3.setPaddingBottom(5);
				cell3.setBorderColor(BaseColor.WHITE);

				PdfPCell cell311 = new PdfPCell(new Paragraph("Date : " + visitDate, Font5));
				// cell311.setPaddingTop(100);
				cell311.setBorderWidth(0.2f);
				cell311.setPaddingBottom(5);
				cell311.setBorderColor(BaseColor.WHITE);

				String fullName = "";

				fullName = StringUtils.capitalize(resultSet1.getString("firstName")) + " "
						+ StringUtils.capitalize(resultSet1.getString("lastName"));

				PdfPCell cell2 = new PdfPCell(new Paragraph("Name : " + fullName, Font5));
				cell2.setBorderWidth(0.01f);
				cell2.setPaddingBottom(5);
				cell2.setBorderWidthLeft(0.2f);
				cell2.setBorderColor(BaseColor.WHITE);

				PdfPCell cell2002 = new PdfPCell(new Paragraph("" + resultSet1.getString("age") + " Years", Font5));
				cell2002.setBorderWidth(0.01f);
				cell2002.setPaddingBottom(5);
				cell2002.setBorderWidthLeft(0.2f);
				cell2002.setBorderColor(BaseColor.WHITE);

				PdfPCell cell2003 = new PdfPCell(
						new Paragraph("" + StringUtils.capitalize(resultSet1.getString("gender")), Font5));
				cell2003.setBorderWidth(0.01f);
				cell2003.setPaddingBottom(5);
				cell2003.setBorderWidthLeft(0.2f);
				cell2003.setBorderColor(BaseColor.WHITE);

				table.addCell(cell0);
				table.addCell(cell3);
				table.addCell(cell311);
				table.addCell(cell2);
				table.addCell(cell2002);
				table.addCell(cell2003);

				document.add(table);
			}

			PdfPTable table4 = new PdfPTable(4);

			table4.setWidthPercentage(100);
			Rectangle rect7 = new Rectangle(270, 700);
			table4.setWidthPercentage(new float[] { 50, 80, 35, 105 }, rect7);

			PdfPCell cell2004 = new PdfPCell(new Paragraph("Diagnosis: ", Font5));
			cell2004.setBorderWidth(0.01f);
			cell2004.setPaddingBottom(5);
			cell2004.setBorderWidthLeft(0.2f);
			cell2004.setBorderColor(BaseColor.WHITE);

			PdfPCell cell20040 = new PdfPCell(new Paragraph(StringUtils.capitalize(diagnosis), mainContent));
			cell20040.setBorderWidth(0.01f);
			cell20040.setPaddingBottom(5);
			cell20040.setBorderWidthLeft(0.2f);
			cell20040.setBorderColor(BaseColor.WHITE);

			table4.addCell(cell2004);
			table4.addCell(cell20040);

			if (advice == "" || advice == null) {
				PdfPCell cell2005 = new PdfPCell(new Paragraph(""));
				cell2005.setBorderWidth(0.01f);
				cell2005.setPaddingBottom(5);
				cell2005.setColspan(2);
				cell2005.setBorderWidthLeft(0.2f);
				cell2005.setBorderColor(BaseColor.WHITE);

				table4.addCell(cell2005);
			} else if (advice.isEmpty()) {
				PdfPCell cell2005 = new PdfPCell(new Paragraph(""));
				cell2005.setBorderWidth(0.01f);
				cell2005.setPaddingBottom(5);
				cell2005.setColspan(2);
				cell2005.setBorderWidthLeft(0.2f);
				cell2005.setBorderColor(BaseColor.WHITE);

				table4.addCell(cell2005);
			} else {

				PdfPCell cell2005 = new PdfPCell(new Paragraph("Advice: ", Font5));
				cell2005.setBorderWidth(0.01f);
				cell2005.setPaddingBottom(5);
				cell2005.setBorderWidthLeft(0.2f);
				cell2005.setBorderColor(BaseColor.WHITE);

				PdfPCell cell2006 = new PdfPCell(new Paragraph(StringUtils.capitalize(advice), marathiFont));
				cell2006.setBorderWidth(0.01f);
				cell2006.setPaddingBottom(5);
				cell2006.setHorizontalAlignment(Element.ALIGN_LEFT);
				cell2006.setBorderWidthLeft(0.2f);
				cell2006.setBorderColor(BaseColor.WHITE);

				table4.addCell(cell2005);
				table4.addCell(cell2006);
			}

			document.add(table4);

			/*
			 * For prescription
			 */
			PdfPTable table3 = new PdfPTable(3);
			table3.setWidthPercentage(100);
			Rectangle rect2 = new Rectangle(270, 700);
			table3.setWidthPercentage(new float[] { 30, 180, 60 }, rect2);

			// For blank space
			PdfPCell cell30 = new PdfPCell(new Paragraph(
					"                                                                                               "
							+ "                                                                                                                            "
							+ "                                                                                                                              ",
					Font2));
			cell30.setColspan(3);
			cell30.setBorderWidthRight(0f);
			cell30.setBorderWidthLeft(0f);
			cell30.setBorderWidthTop(0f);
			cell30.setBorderWidthBottom(0f);
			cell30.setBorderColorTop(BaseColor.WHITE);

			PdfPCell cell3011 = new PdfPCell(new Paragraph(
					"                                                                                               "
							+ "                                                                                                                            "
							+ "                                                                                                                              ",
					Font2));
			cell3011.setColspan(3);
			cell3011.setBorderWidthRight(0f);
			cell3011.setBorderWidthLeft(0f);
			cell3011.setBorderWidthTop(0f);
			cell3011.setBorderWidthBottom(0f);
			cell3011.setBorderColorTop(BaseColor.WHITE);

			/*
			 * Table for Prescription image
			 */
			PdfPTable imageTable = new PdfPTable(2);
			imageTable.setWidthPercentage(80);
			imageTable.setWidths(new int[] { 1, 2 });

			PdfPCell imageCell1 = new PdfPCell(prescrImg, true);
			imageCell1.setBorderColor(BaseColor.WHITE);

			PdfPCell imageCell2 = new PdfPCell(new Paragraph("", mainContent));
			imageCell2.setBorderColor(BaseColor.WHITE);

			imageTable.addCell(imageCell1);
			imageTable.addCell(imageCell2);

			// Gene
			PdfPCell cell3002 = new PdfPCell(imageTable);
			cell3002.setBorderWidth(0.0f);
			cell3002.setPaddingBottom(10);
			cell3002.setBorderColor(BaseColor.WHITE);

			PdfPCell cell320 = new PdfPCell(new Paragraph("", mainContent));
			cell320.setBorderWidth(0.01f);
			cell320.setPaddingBottom(5);
			cell320.setBorderColor(BaseColor.WHITE);

			// Amino Acid Change
			PdfPCell cell34 = new PdfPCell(new Paragraph("Qty", Font5));
			cell34.setBorderWidth(0.01f);
			cell34.setPaddingBottom(5);
			cell34.setHorizontalAlignment(Element.ALIGN_RIGHT);
			cell34.setBorderColor(BaseColor.WHITE);

			table3.addCell(cell30);
			table3.addCell(cell3011);
			table3.addCell(cell3002);
			table3.addCell(cell320);
			table3.addCell(cell34);

			document.add(table3);

			while (resultSet.next()) {

				PdfPTable table1 = new PdfPTable(3);

				table1.setWidthPercentage(100);
				Rectangle rect1 = new Rectangle(270, 700);
				table1.setWidthPercentage(new float[] { 110, 40, 120 }, rect1);

				String finalTradeName = resultSet.getString("tradeName").toUpperCase();

				System.out.println("TRADENAME:: " + finalTradeName);

				String category = resultSet.getString("category");

				if (category == null) {
					category = "";
				}

				if (resultSet.getString("drugName") == null || resultSet.getString("drugName") == "") {
					finalTradeName = finalTradeName;
				} else if (resultSet.getString("drugName").isEmpty()) {
					finalTradeName = finalTradeName;
				} else {
					finalTradeName += "\n(" + resultSet.getString("drugName") + ")";
				}

				PdfPCell cell21 = new PdfPCell(new Paragraph(finalTradeName, marathiFont));
				cell21.setBorderWidth(0.2f);
				cell21.setPaddingBottom(1);
				cell21.setPaddingTop(3);
				cell21.setBorderColor(BaseColor.WHITE);

				PdfPCell cell021 = new PdfPCell(new Paragraph(category, marathiFont));
				cell021.setBorderWidth(0.2f);
				cell021.setPaddingBottom(1);
				cell021.setPaddingTop(3);
				cell021.setBorderColor(BaseColor.WHITE);

				System.out.println("QUANTIRTY:: " + resultSet.getDouble("quantity"));
				/*
				 * for Amino Acid Change
				 */
				PdfPCell cell22 = new PdfPCell(new Paragraph("" + resultSet.getDouble("quantity"), mainContent));
				cell22.setBorderWidth(0.2f);
				cell22.setPaddingBottom(1);
				cell22.setPaddingTop(3);
				cell22.setHorizontalAlignment(Element.ALIGN_RIGHT);
				cell22.setBorderColor(BaseColor.WHITE);

				table1.addCell(cell21);
				table1.addCell(cell021);
				table1.addCell(cell22);

				String frequency = resultSet.getString("frequency");
				System.out.println("FREQ:: " + frequency);

				int noOfDays = resultSet.getInt("numberOfDays");

				PdfPTable table2 = new PdfPTable(3);

				table2.setWidthPercentage(100);
				Rectangle rect3 = new Rectangle(270, 700);
				table2.setWidthPercentage(new float[] { 80, 50, 140 }, rect1);

				PdfPCell cell24 = new PdfPCell(new Paragraph(frequency.replace(',', '\n'), marathiFont));
				cell24.setBorderWidth(0.2f);
				cell24.setPaddingBottom(10);
				cell24.setBorderColor(BaseColor.WHITE);

				PdfPCell cell241 = new PdfPCell(new Paragraph(noOfDays + " days", mainContent));
				cell241.setBorderWidth(0.2f);
				cell241.setPaddingBottom(10);
				cell241.setBorderColor(BaseColor.WHITE);

				PdfPCell cell25 = new PdfPCell(
						new Paragraph(StringUtils.capitalize(resultSet.getString("comment").trim()), marathiFont));
				cell25.setBorderWidth(0.2f);
				cell25.setPaddingBottom(9);
				cell25.setBorderColor(BaseColor.WHITE);

				table2.addCell(cell24);
				table2.addCell(cell241);
				table2.addCell(cell25);

				document.add(table1);
				document.add(table2);
			}

			while (resultSet_investigation.next()) {

				investigation = resultSet_investigation.getString("investigation");

				if (investigation == "" || investigation == null) {
					// continue;
				} else if (investigation.isEmpty()) {
					// continue;
				} else {

					PdfPTable table2 = new PdfPTable(2);

					table2.setWidthPercentage(100);
					Rectangle rect5 = new Rectangle(270, 700);
					table2.setWidthPercentage(new float[] { 105, 165 }, rect5);

					PdfPCell cell002 = new PdfPCell(new Paragraph("Investigation/Procedure: ", Font5));
					cell002.setBorderWidth(0.01f);
					cell002.setPaddingBottom(5);
					cell002.setColspan(1);
					cell002.setBorderWidthLeft(0.2f);
					cell002.setBorderColor(BaseColor.WHITE);

					/*
					 * for investigation details
					 */
					PdfPCell cell2001 = new PdfPCell(new Paragraph(investigation, mainContent));
					cell2001.setBorderWidth(0.2f);
					cell2001.setColspan(2);
					cell2001.setPaddingBottom(1);
					cell2001.setHorizontalAlignment(Element.ALIGN_LEFT);
					cell2001.setBorderColor(BaseColor.WHITE);

					table2.addCell(cell002);
					table2.addCell(cell2001);

					document.add(table2);
				}
			}

			/*
			 * For signature in footer
			 */
			PdfPTable tableNew = new PdfPTable(1);

			tableNew.setWidthPercentage(100);
			Rectangle rect6 = new Rectangle(270, 700);
			tableNew.setWidthPercentage(new float[] { 270 }, rect6);

			String nextVisitLabel = "days.";

			/*
			 * if (orthoCheck) { nextVisitLabel = "month/s."; }
			 */

			PdfPCell cell1112 = new PdfPCell(
					new Paragraph("Follow-up after  " + nextVisitDays + "  " + nextVisitLabel, marathiFont));
			cell1112.setBackgroundColor(BaseColor.WHITE);
			cell1112.setPaddingTop(30);
			cell1112.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell1112.setBorderColor(BaseColor.WHITE);

			tableNew.addCell(cell1112);

			document.add(tableNew);

			/*
			 * For signature in footer
			 */

			PdfPTable tableFooter = new PdfPTable(1);
			tableFooter.setTotalWidth(510);
			tableFooter.setWidthPercentage(100);

			// Table for Prescription image

			PdfPTable imageTable1 = new PdfPTable(2);
			imageTable1.setWidthPercentage(80);
			imageTable1.setWidths(new int[] { 1, 2 });

			PdfPCell imageCell11 = new PdfPCell(signImg, true);
			imageCell11.setBorderColor(BaseColor.WHITE);

			PdfPCell imageCell21 = new PdfPCell(new Paragraph("", mainContent));
			imageCell21.setBorderColor(BaseColor.WHITE);

			imageTable1.addCell(imageCell11);
			imageTable1.addCell(imageCell21);

			PdfPCell cellFooter = new PdfPCell(imageTable1);
			cellFooter.setBorderWidth(0.01f);
			cellFooter.setPaddingBottom(15);
			cellFooter.setPaddingLeft(100);
			cellFooter.setBorderColor(BaseColor.WHITE);

			PdfPCell cellFooter1 = new PdfPCell(new Paragraph(docName, Font5));
			cellFooter1.setBorderWidth(0.01f);
			cellFooter1.setPaddingBottom(15);
			cellFooter1.setPaddingLeft(100);
			cellFooter1.setBorderColor(BaseColor.WHITE);

			tableFooter.addCell(cellFooter);
			tableFooter.addCell(cellFooter1);

			// document.add(tableFooter);

			FooterTable1 event = new FooterTable1(tableFooter);
			writer.setPageEvent(event);

			document.close();

			System.out.println("Successfully written and generated General physicial Prescription PDF Report");

			status = "success";

			connection.close();

		} catch (Exception exception) {
			exception.printStackTrace();
			status = "error";
		}
		return status;

	}

	public String convertPrescriptionForOrthoPhysicianOPDPDF(int patientID, int visitID, String realPath,
			String pdfOutFIleName, int clinicID, int practiceID, String username, AmazonS3 s3, String s3reportFilePath,
			String bucketName) {

		int i = 1;

		String visitDate = null;
		String status = "error";
		String regNo = "";
		String nextVisitDate = "";
		int nextVisitDays = 0;
		String investigation = "";
		String diagnosis = "";
		String advice = "";
		String docName = null;
		String signature = null;
		Image signImg = null;

		String visitTimeTo = null;
		String smoking = null;
		String smokingDesc = null;
		String alcohol = null;
		String alcoholDesc = null;
		String tobacco = null;
		String tobaccoDesc = null;
		String veg = null;
		String vegDesc = null;
		String nonveg = null;
		String nonvegDesc = null;
		String foodChoice = null;
		String foodChoiceDetails = null;
		Image LHimg = null;
		String onExamination = null;
		String visitTimeFrom = null;

		String visitType = "";

		boolean orthoCheck = false;

		/*
		 * Declaring variable which stores the location for FreeSans.ttf file to print
		 * marathi text on pdf
		 */
		String marathiFontDir = realPath + "fonts/FreeSans.ttf";

		ConfigurationUtil configXMLUtil = new ConfigurationUtil();

		PatientForm patientForm = new PatientForm();

		try {
			connection = getConnection();

			/*
			 * Generate the queries to fetch details
			 */
			String fetchDetailQuery1 = QueryMaker.OPD_PDF_RETRIEVE_PATIENT;

			preparedStatement1 = connection.prepareStatement(fetchDetailQuery1);
			preparedStatement1.setInt(1, patientID);
			resultSet1 = preparedStatement1.executeQuery();

			/*
			 * Generate the queries to fetch details
			 */
			String fetchDetailQuery4 = QueryMaker.OPD_PDF_RETRIEVE_PRESCRIPTIONPDF;

			preparedStatement = connection.prepareStatement(fetchDetailQuery4);

			preparedStatement.setInt(1, visitID);
			preparedStatement.setString(2, ActivityStatus.ACTIVE);

			resultSet = preparedStatement.executeQuery();

			String fetchDetailQuery4_investigation = QueryMaker.OPD_PDF_RETRIEVE_PRESCRIPTIONPDF_investigation;

			preparedStatement_investigation = connection.prepareStatement(fetchDetailQuery4_investigation);

			preparedStatement_investigation.setInt(1, visitID);

			resultSet_investigation = preparedStatement_investigation.executeQuery();

			/*
			 * Retrieve patient registration no based on patientID and clinicID from
			 * ClinicRegistration table
			 */
			String fetchClinicRegNoQuery = QueryMaker.RETRIEVE_CLINIC_REG_NO_BY_CLINIC_ID;

			preparedStatement2 = connection.prepareStatement(fetchClinicRegNoQuery);

			preparedStatement2.setInt(1, clinicID);
			preparedStatement2.setInt(2, patientID);

			resultSet2 = preparedStatement2.executeQuery();

			while (resultSet2.next()) {
				regNo = resultSet2.getString("regNumber");
			}

			/*
			 * Retrieve NextVisitDate based on visitID from Visit table
			 */
			/*
			 * String fetchNextVisitDateQuery = QueryMaker.OPD_PDF_RETRIEVE_VISIT;
			 * 
			 * preparedStatement2 = connection.prepareStatement(fetchNextVisitDateQuery);
			 * 
			 * preparedStatement2.setInt(1, visitID);
			 * 
			 * resultSet2 = preparedStatement2.executeQuery();
			 * 
			 * while (resultSet2.next()) { SimpleDateFormat dateFormat = new
			 * SimpleDateFormat("dd-MM-yyyy");
			 * 
			 * SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
			 * 
			 * if (resultSet2.getString("visitDate") == null ||
			 * resultSet2.getString("visitDate") == "" ||
			 * resultSet2.getString("visitDate").isEmpty()) { visitDate = ""; } else {
			 * visitDate = dateFormat.format(resultSet2.getDate("visitDate")); }
			 * nextVisitDate = resultSet2.getString("nextVisitDate"); nextVisitDays =
			 * resultSet2.getInt("nextVisitDays"); diagnosis =
			 * resultSet2.getString("diagnosis"); advice = resultSet2.getString("advice") ==
			 * null ? "" : resultSet2.getString("advice"); }
			 */

			resultSet2.close();
			preparedStatement2.close();

			/*
			 * Generating query 2
			 */
			String fetchDetailQuery2 = QueryMaker.OPD_PDF_RETRIEVE_VISIT;

			preparedStatement2 = connection.prepareStatement(fetchDetailQuery2);
			preparedStatement2.setInt(1, visitID);
			resultSet2 = preparedStatement2.executeQuery();

			// To fetch visit details from Visit Table
			while (resultSet2.next()) {
				SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");

				SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");

				if (resultSet2.getString("visitDate") == null || resultSet2.getString("visitDate") == ""
						|| resultSet2.getString("visitDate").isEmpty()) {
					visitDate = "";
				} else {
					visitDate = dateFormat.format(resultSet2.getDate("visitDate"));
				}

				diagnosis = resultSet2.getString("diagnosis");
				visitTimeFrom = resultSet2.getString("visitTimeFrom");
				visitTimeTo = resultSet2.getString("visitTimeTo");
				if (resultSet2.getString("onExamination") == null || resultSet2.getString("onExamination") == "") {
					onExamination = null;
				} else if (resultSet2.getString("onExamination").isEmpty()) {
					onExamination = null;
				} else {
					onExamination = resultSet2.getString("onExamination");
				}

				nextVisitDate = resultSet2.getString("nextVisitDate");
				nextVisitDays = resultSet2.getInt("nextVisitDays");

				advice = resultSet2.getString("advice") == null ? "" : resultSet2.getString("advice");

				visitType = resultSet2.getString("visitType");
			}

			// boolean orthoCheck = false;

			/*
			 * Generate the queries to fetch details
			 */
			String fetchDetailQuery3 = QueryMaker.OPD_PDF_RETRIEVE_PRESENT_COMPLAINTS;

			preparedStatement3 = connection.prepareStatement(fetchDetailQuery3);
			preparedStatement3.setInt(1, visitID);
			resultSet3 = preparedStatement3.executeQuery();

			/*
			 * Generate the queries to fetch details
			 */
			String fetchDetailQuery41 = QueryMaker.OPD_PDF_RETRIEVE_MEDICAL_HISTORY;

			preparedStatement4 = connection.prepareStatement(fetchDetailQuery41);
			preparedStatement4.setInt(1, patientID);
			resultSet4 = preparedStatement4.executeQuery();

			/*
			 * Generate the queries to fetch details
			 */
			String fetchDetailQuery5 = QueryMaker.OPD_PDF_RETRIEVE_PERSONAL_HISTORY;

			preparedStatement5 = connection.prepareStatement(fetchDetailQuery5);
			preparedStatement5.setInt(1, patientID);
			resultSet5 = preparedStatement5.executeQuery();
			while (resultSet5.next()) {
				smoking = resultSet5.getString("smoking");
				smokingDesc = resultSet5.getString("smokingDetails");
				alcohol = resultSet5.getString("alcohol");
				alcoholDesc = resultSet5.getString("alcoholDetails");
				tobacco = resultSet5.getString("tobacco");
				tobaccoDesc = resultSet5.getString("tobaccoDetails");
				foodChoice = resultSet5.getString("foodChoice");
				foodChoiceDetails = resultSet5.getString("foodChoiceDetails");

			}

			/*
			 * Generate the queries to fetch details
			 */
			String fetchDetailQuery6 = QueryMaker.OPD_PDF_RETRIEVE_PRESCRIPTION_HISTORY;

			preparedStatement6 = connection.prepareStatement(fetchDetailQuery6);
			preparedStatement6.setInt(1, patientID);
			resultSet6 = preparedStatement6.executeQuery();

			/*
			 * Generate the queries to fetch details
			 */
			String fetchDetailQuery7 = QueryMaker.OPD_PDF_RETRIEVE_VITAL_SIGNS;

			preparedStatement7 = connection.prepareStatement(fetchDetailQuery7);
			preparedStatement7.setInt(1, visitID);
			resultSet7 = preparedStatement7.executeQuery();

			// Check if the diagnosis is of type JSON
			if (new JSONValidator().isValid(diagnosis)) {
				orthoCheck = true;

				org.json.JSONArray diagnosisJSONArray = new org.json.JSONArray(diagnosis);

				diagnosis = "";

				for (int i_counter = 0; i_counter < diagnosisJSONArray.length(); i_counter++) {

					org.json.JSONObject diagnosisJSONObject = diagnosisJSONArray.getJSONObject(i_counter);

					diagnosis = diagnosis + ", " + diagnosisJSONObject.getString("diagnosis");

				}

				if (diagnosis.startsWith(",")) {
					diagnosis = diagnosis.substring(1);
				}
			}

			// FOR SIGNATURE PRINTING

			ConfigXMLUtil xmlUtil = new ConfigXMLUtil();
			RegistrationDAOinf registrationDAOinf = new RegistrationDAOImpl();

			// Retrieving USER Details by PracticeID
			HashMap<String, String> MDMap = registrationDAOinf.retrieveUserDetails(practiceID, username);

			// File SignatureFile = new File(logoFilePath + File.separator +
			// MDMap.get("Signature"));
			signature = MDMap.get("Signature");

			docName = MDMap.get("FirstName") + " " + MDMap.get("LastName");

			if (signature == "" || signature == null) {
				signImg = null;
			} else if (signature.isEmpty()) {
				signImg = null;
			} else {

				S3ObjectInputStream s3ObjectInputStream = s3
						.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, signature))
						.getObjectContent();

				IOUtils.copy(s3ObjectInputStream, new FileOutputStream(new File(realPath + "images/" + signature)));

				signImg = Image.getInstance(realPath + "images/" + signature);
			}

			/*
			 * Getting image path from XML
			 */
			String A5ImagePath = configXMLUtil.getLetterHeadImage();

			System.out.println("A5IM.." + A5ImagePath);

			/*
			 * Getting page size from XMl
			 */
			// String pageSize = configXMLUtil.getPageSize();
			String pageSize = "A4";

			/*
			 * Setting path to store PDF file
			 */
			File file1 = new File(realPath + "/" + pdfOutFIleName);

			System.out.println("PRESC FILE NAME IN CONVERT::" + file1);
			/*
			 * Creating Document for PDF
			 */
			Document document = null;

			/*
			 * Checking whether pageSize tag in XMl contains A5 or A4, according to that
			 * setting PDF page size
			 */
			System.out.println("page size is prescription :: " + pageSize);
			if (pageSize.equals("A5")) {
				document = new Document(PageSize.A5);
			} else if (pageSize.equals("A4")) {
				document = new Document(PageSize.A4);
			}

			PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(file1));

			MyEvent ImageEvent = new MyEvent();
			writer.setPageEvent(ImageEvent);

			System.out.println("PRESC WRITER NAME IN CONVERT::" + writer);

			/*
			 * Font Font1 = new Font(Font.FontFamily.TIMES_ROMAN, 10, Font.NORMAL); Font
			 * Font3 = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.NORMAL); Font Font2 =
			 * new Font(Font.FontFamily.TIMES_ROMAN, 8, Font.NORMAL); Font Font4 = new
			 * Font(Font.FontFamily.TIMES_ROMAN, 5, Font.BOLD); Font Font5 = new
			 * Font(Font.FontFamily.TIMES_ROMAN, 12, Font.BOLD); Font Font6 = new
			 * Font(Font.FontFamily.TIMES_ROMAN, 9, Font.BOLD); Font Font7 = new
			 * Font(Font.FontFamily.TIMES_ROMAN, 14, Font.BOLD); Font mainContent = new
			 * Font(Font.FontFamily.TIMES_ROMAN, 12, Font.NORMAL); Font mainContent1 = new
			 * Font(Font.FontFamily.TIMES_ROMAN, 15, Font.NORMAL);
			 * mainContent1.setColor(BaseColor.GRAY);
			 */

			Font Font1 = new Font(Font.FontFamily.TIMES_ROMAN, 10, Font.NORMAL);
			Font Font3 = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.NORMAL);
			Font Font2 = new Font(Font.FontFamily.TIMES_ROMAN, 8, Font.NORMAL);
			Font Font4 = new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.BOLD);
			Font Font5 = new Font(Font.FontFamily.TIMES_ROMAN, 10, Font.BOLD);
			Font Font6 = new Font(Font.FontFamily.TIMES_ROMAN, 11, Font.BOLD);
			Font Font7 = new Font(Font.FontFamily.TIMES_ROMAN, 14, Font.BOLD);
			Font Font8 = new Font(Font.FontFamily.TIMES_ROMAN, 16, Font.BOLD);
			Font mainContent = new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.NORMAL);
			Font mainContent1 = new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.NORMAL);
			mainContent1.setColor(BaseColor.GRAY);

			Chunk bullet = new Chunk("\u2022", Font4);

			/*
			 * Defining marathi font
			 */
			Font marathiFont = FontFactory.getFont(marathiFontDir, BaseFont.IDENTITY_H, BaseFont.EMBEDDED);
			marathiFont.setSize(10);

			document.open();

			document.setMargins(36, 36, 170, 100);

			/*
			 * Adding image
			 */
			PdfContentByte canvas = writer.getDirectContent();

			/*
			 * Checking whether pageSize is A4 or A5, according to that background image is
			 * being set
			 */

			Image image;

			if (pageSize.equals("A5")) {
				if (A5ImagePath == null || A5ImagePath == "") {
					image = null;

				} else {

					if (A5ImagePath.isEmpty()) {
						image = null;
					} else {

						S3ObjectInputStream s3ObjectInputStream = s3
								.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, A5ImagePath))
								.getObjectContent();

						IOUtils.copy(s3ObjectInputStream,
								new FileOutputStream(new File(realPath + "images/" + A5ImagePath)));

						image = Image.getInstance(realPath + "images/" + A5ImagePath);

						image.scaleToFit(PageSize.A5.getWidth(), PageSize.A5.getHeight());
						image.setAbsolutePosition(0, 0);

						canvas.saveState();
						PdfGState state = new PdfGState();
						canvas.setGState(state);
						canvas.addImage(image);
						canvas.restoreState();
					}

				}
			} else if (pageSize.equals("A4")) {
				if (A5ImagePath == null || A5ImagePath == "") {

					image = null;

				} else {

					if (A5ImagePath.isEmpty()) {

						image = null;
					} else {

						S3ObjectInputStream s3ObjectInputStream = s3
								.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, A5ImagePath))
								.getObjectContent();

						IOUtils.copy(s3ObjectInputStream,
								new FileOutputStream(new File(realPath + "images/" + A5ImagePath)));

						image = Image.getInstance(realPath + "images/" + A5ImagePath);

						image.scaleToFit(PageSize.A4.getWidth(), PageSize.A4.getHeight());
						image.setAbsolutePosition(0, 0);

						canvas.saveState();
						PdfGState state = new PdfGState();
						canvas.setGState(state);
						canvas.addImage(image);
						canvas.restoreState();
					}

				}
			}

			Image prescrImg = Image.getInstance(realPath + "/images/Rx_icon.png");
			System.out.println("presc rx img is::" + prescrImg);

			/*
			 * Setting header
			 */
			document.addCreator("eDhanvantari");
			document.addTitle("General Physician Prescription");

			// document.setMargins(20f, 20f, 20f, 550f);

			/*
			 * For displaying patient personal details
			 */
			while (resultSet1.next()) {

				PdfPTable table = new PdfPTable(6);

				table.setFooterRows(1);
				table.setWidthPercentage(100);
				Rectangle rect = new Rectangle(270, 700);
				table.setWidthPercentage(new float[] { 43, 61, 36, 36, 43, 41 }, rect);

				PdfPCell cell0 = new PdfPCell(new Paragraph("", Font7));
				cell0.setPaddingTop(120);
				cell0.setPaddingBottom(10);
				cell0.setHorizontalAlignment(Element.ALIGN_CENTER);
				cell0.setUseBorderPadding(true);
				cell0.setColspan(6);
				cell0.setBorderWidthBottom(1f);
				// cell0.setBorderColorBottom(BaseColor.DARK_GRAY);
				cell0.setBorder(Rectangle.NO_BORDER);

				PdfPCell cell = new PdfPCell(new Paragraph("PATIENT DETAILS", Font6));
				// cell.setPaddingTop(60);
				cell.setPaddingBottom(7);
				cell.setHorizontalAlignment(Element.ALIGN_CENTER);
				cell.setUseBorderPadding(true);
				cell.setColspan(6);
				cell.setBorderWidthBottom(1f);
				cell.setBorderColorBottom(BaseColor.DARK_GRAY);
				cell.setBorderColor(BaseColor.WHITE);

				/*
				 * For Patient Name
				 */
				PdfPCell cell2 = new PdfPCell(new Paragraph("Patient Name ", mainContent));
				cell2.setBorderWidth(0.01f);
				cell2.setPaddingBottom(5);
				cell2.setBorderWidthLeft(0.2f);
				cell2.setBorderColor(BaseColor.BLACK);

				String fullName = resultSet1.getString("firstName") + " " + resultSet1.getString("middleName") + " "
						+ resultSet1.getString("lastName");

				PdfPCell cell3 = new PdfPCell(new Paragraph(fullName, mainContent));
				cell3.setBorderWidth(0.2f);
				cell3.setPaddingBottom(5);
				cell3.setBorderColor(BaseColor.BLACK);

				/*
				 * For Age
				 */
				PdfPCell cell16 = new PdfPCell(new Paragraph("Age ", mainContent));
				// cell16.setBorderWidth(0.01f);
				cell16.setPaddingBottom(5);
				cell16.setBorderWidthLeft(0.2f);
				// cell16.setBorderWidthBottom(1f);
				cell16.setBorderColor(BaseColor.BLACK);

				PdfPCell cell17 = new PdfPCell(new Paragraph(resultSet1.getString("age"), mainContent));
				cell17.setBorderWidth(0.2f);
				cell17.setPaddingBottom(5);
				// cell17.setBorderWidthBottom(1f);
				cell17.setBorderColor(BaseColor.BLACK);

				/*
				 * For Mobile no.
				 */
				PdfPCell cell22 = new PdfPCell(new Paragraph("Mobile No. ", mainContent));
				cell22.setBorderWidth(0.01f);
				cell22.setPaddingBottom(5);
				cell22.setBorderWidthLeft(0.2f);
				// cell22.setBorderWidthBottom(1f);
				cell22.setBorderColor(BaseColor.BLACK);

				PdfPCell cell23 = new PdfPCell(new Paragraph(resultSet1.getString("mobile"), mainContent));
				cell23.setBorderWidth(0.01f);
				cell23.setPaddingBottom(5);
				// cell23.setBorderWidthBottom(1f);
				cell23.setBorderColor(BaseColor.BLACK);

				/*
				 * For Diagnosis
				 */
				PdfPCell cell18 = new PdfPCell(new Paragraph("Diagnosis ", mainContent));
				cell18.setBorderWidth(0.01f);
				cell18.setPaddingBottom(5);
				cell18.setBorderWidthLeft(0.2f);
				// cell18.setBorderWidthBottom(1f);
				cell18.setBorderColor(BaseColor.BLACK);

				PdfPCell cell19 = new PdfPCell(new Paragraph(diagnosis, mainContent));
				cell19.setBorderWidth(0.01f);
				cell19.setPaddingBottom(5);
				// cell19.setBorderWidthBottom(1f);
				cell19.setBorderColor(BaseColor.BLACK);

				/*
				 * For Gender
				 */
				PdfPCell cell10 = new PdfPCell(new Paragraph("Gender ", mainContent));
				// cell10.setBorderWidth(0.01f);
				cell10.setPaddingBottom(5);
				cell10.setBorderWidthLeft(0.2f);
				// cell10.setBorderWidthBottom(1f);
				cell10.setBorderColor(BaseColor.BLACK);

				PdfPCell cell11 = new PdfPCell(new Paragraph(resultSet1.getString("gender"), mainContent));
				cell11.setBorderWidth(0.2f);
				cell11.setPaddingBottom(5);
				// cell11.setBorderWidthBottom(1f);
				cell11.setBorderColor(BaseColor.BLACK);

				/*
				 * For Blood Gr
				 */
				PdfPCell cell20 = new PdfPCell(new Paragraph("Blood Group ", mainContent));
				cell20.setBorderWidth(0.01f);
				cell20.setPaddingBottom(5);
				cell20.setBorderWidthLeft(0.2f);
				// cell20.setBorderWidthBottom(1f);
				cell20.setBorderColor(BaseColor.BLACK);

				PdfPCell cell21 = new PdfPCell(new Paragraph(
						resultSet1.getString("bloodGroup") + " " + resultSet1.getString("rhFactor"), mainContent));
				cell21.setBorderWidth(0.01f);
				cell21.setPaddingBottom(5);
				// cell21.setBorderWidthBottom(1f);
				cell21.setBorderColor(BaseColor.BLACK);

				/*
				 * For Date
				 */

				PdfPCell cell4 = new PdfPCell(new Paragraph("Visit Date ", mainContent));
				cell4.setBorderWidth(0.01f);
				cell4.setPaddingBottom(5);
				cell4.setBorderWidthLeft(0.2f);
				cell4.setBorderColor(BaseColor.BLACK);

				PdfPCell cell5 = new PdfPCell(new Paragraph(visitDate, mainContent));
				cell5.setBorderWidth(0.2f);
				cell5.setPaddingBottom(5);
				// cell5.setBorderColor(BaseColor.WHITE);

				/*
				 * For Visit Type
				 */
				PdfPCell cell12 = new PdfPCell(new Paragraph("Visit Type ", mainContent));
				cell12.setBorderWidth(0.01f);
				cell12.setPaddingBottom(5);
				cell12.setBorderWidthLeft(0.2f);
				cell12.setBorderColor(BaseColor.BLACK);
				// cell12.setBorderWidthLeft(0.0f);
				// cell12.setBorderWidthTop(0.0f);
				// cell12.setBorderColorBottom(BaseColor.WHITE);

				PdfPCell cell13 = new PdfPCell(new Paragraph(visitType, mainContent));
				cell13.setBorderWidth(0.2f);
				cell13.setPaddingBottom(5);
				cell13.setColspan(3);
				cell13.setBorderColor(BaseColor.BLACK);

				/*
				 * adding all cell to the table to create tabular structure
				 */

				table.addCell(cell0);
				table.addCell(cell);
				table.addCell(cell2);
				table.addCell(cell3);
				table.addCell(cell16);
				table.addCell(cell17);
				table.addCell(cell22);
				table.addCell(cell23);
				table.addCell(cell18);
				table.addCell(cell19);
				table.addCell(cell10);
				table.addCell(cell11);
				table.addCell(cell20);
				table.addCell(cell21);
				table.addCell(cell4);
				table.addCell(cell5);
				table.addCell(cell12);
				table.addCell(cell13);

				document.add(table);
			}

			PdfPTable table01 = new PdfPTable(1);
			table01.setFooterRows(1);
			table01.setWidthPercentage(100);
			Rectangle rect01 = new Rectangle(270, 700);
			table01.setWidthPercentage(new float[] { 260 }, rect01);

			PdfPCell cell = new PdfPCell(new Paragraph("VISIT DETAILS", Font6));
			cell.setPaddingTop(8);
			cell.setPaddingBottom(2);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell.setUseBorderPadding(true);
			cell.setBorderWidthBottom(1f);
			// cell.setBorderColorBottom(BaseColor.DARK_GRAY);
			cell.setBorderColor(BaseColor.WHITE);
			table01.addCell(cell);
			document.add(table01);

			int cnt = 1;
			while (resultSet3.next()) {
				if (cnt == 1) {
					PdfPTable table1 = new PdfPTable(3);
					table1.setFooterRows(1);
					table1.setWidthPercentage(100);
					Rectangle rect1 = new Rectangle(270, 700);
					table1.setWidthPercentage(new float[] { 80, 60, 120 }, rect1);

					PdfPCell cell2 = new PdfPCell(new Paragraph("Present Complaints :", Font5));
					cell2.setBorderWidth(0.01f);
					cell2.setPaddingBottom(8);
					cell2.setColspan(3);
					cell2.setHorizontalAlignment(Element.ALIGN_LEFT);
					cell2.setBorderWidthLeft(0.2f);
					cell2.setBorderColor(BaseColor.WHITE);

					PdfPCell cell3 = new PdfPCell(new Paragraph("Symptom", Font4));
					cell3.setBorderWidth(0.01f);
					cell3.setPaddingBottom(5);
					cell3.setBorderWidthLeft(0.2f);
					cell3.setHorizontalAlignment(Element.ALIGN_CENTER);
					cell3.setBorderColor(BaseColor.BLACK);
					cell3.setBorderColorBottom(BaseColor.BLACK);

					String symptomDuration = "Days";

					/*
					 * if (orthoCheck) { symptomDuration = "Months"; }
					 */

					PdfPCell cell4 = new PdfPCell(new Paragraph("Duration (" + symptomDuration + ")", Font4));
					cell4.setBorderWidth(0.01f);
					cell4.setPaddingBottom(5);
					cell4.setBorderWidthLeft(0.2f);
					cell4.setHorizontalAlignment(Element.ALIGN_CENTER);
					cell4.setBorderColor(BaseColor.BLACK);
					cell4.setBorderColorBottom(BaseColor.BLACK);

					/*
					 * PdfPCell cell5 = new PdfPCell(new Paragraph("Other", Font4));
					 * cell5.setBorderWidth(0.01f); cell5.setPaddingBottom(5);
					 * cell5.setBorderWidthLeft(0.2f);
					 * cell5.setHorizontalAlignment(Element.ALIGN_CENTER);
					 * cell5.setBorderColor(BaseColor.BLACK);
					 */

					PdfPCell cell6 = new PdfPCell(new Paragraph("Comments", Font4));
					cell6.setBorderWidth(0.01f);
					cell6.setPaddingBottom(5);
					cell6.setBorderWidthLeft(0.2f);
					cell6.setHorizontalAlignment(Element.ALIGN_CENTER);
					cell6.setBorderColor(BaseColor.BLACK);
					cell6.setBorderColorBottom(BaseColor.BLACK);

					table1.addCell(cell2);
					table1.addCell(cell3);
					table1.addCell(cell4);
					// table1.addCell(cell5);
					table1.addCell(cell6);
					document.add(table1);
				}
				PdfPTable table1 = new PdfPTable(3);
				table1.setFooterRows(1);
				table1.setWidthPercentage(100);
				Rectangle rect1 = new Rectangle(270, 700);
				table1.setWidthPercentage(new float[] { 80, 60, 120 }, rect1);

				PdfPCell cell7 = new PdfPCell(new Paragraph(resultSet3.getString("complaints"), mainContent));
				cell7.setBorderWidth(0.01f);
				cell7.setPaddingBottom(5);
				cell7.setBorderWidthLeft(0.2f);
				cell7.setBorderWidthBottom(0.2f);
				cell7.setHorizontalAlignment(Element.ALIGN_CENTER);
				cell7.setBorderColor(BaseColor.BLACK);

				PdfPCell cell8 = new PdfPCell(new Paragraph(resultSet3.getString("duration"), mainContent));
				cell8.setBorderWidth(0.01f);
				cell8.setPaddingBottom(5);
				cell8.setBorderWidthLeft(0.2f);
				cell8.setBorderWidthBottom(0.2f);
				cell8.setHorizontalAlignment(Element.ALIGN_CENTER);
				cell8.setBorderColor(BaseColor.BLACK);

				/*
				 * PdfPCell cell9 = new PdfPCell(new Paragraph(resultSet3.getString("other"),
				 * mainContent)); cell9.setBorderWidth(0.01f); cell9.setPaddingBottom(5);
				 * cell9.setBorderWidthLeft(0.2f); cell9.setBorderWidthBottom(0.2f);
				 * cell9.setHorizontalAlignment(Element.ALIGN_CENTER);
				 * cell9.setBorderColor(BaseColor.BLACK);
				 */

				PdfPCell cell10 = new PdfPCell(new Paragraph(resultSet3.getString("comments"), mainContent));
				cell10.setBorderWidth(0.01f);
				cell10.setPaddingBottom(5);
				cell10.setBorderWidthLeft(0.2f);
				cell10.setBorderWidthBottom(0.2f);
				cell10.setHorizontalAlignment(Element.ALIGN_CENTER);
				cell10.setBorderColor(BaseColor.BLACK);

				cnt++;

				table1.addCell(cell7);
				table1.addCell(cell8);
				// table1.addCell(cell9);
				table1.addCell(cell10);

				document.add(table1);
			}

			int cnt2 = 1;
			while (resultSet4.next()) {
				if (cnt2 == 1) {
					PdfPTable table2 = new PdfPTable(3);
					table2.setFooterRows(1);
					table2.setWidthPercentage(100);
					Rectangle rect2 = new Rectangle(270, 700);
					table2.setWidthPercentage(new float[] { 80, 90, 90 }, rect2);

					/*
					 * PdfPCell cell120 = new PdfPCell(new Paragraph("", Font4));
					 * cell120.setBorderWidth(0.01f); cell120.setPaddingBottom(5);
					 * cell120.setColspan(3); cell120.setBorderWidthLeft(0.2f);
					 * cell120.setHorizontalAlignment(Element.ALIGN_CENTER);
					 * cell120.setBorderColor(BaseColor.WHITE);
					 * cell120.setBorderColorTop(BaseColor.BLACK);
					 */

					PdfPCell cell11 = new PdfPCell(new Paragraph("Medical History :", Font5));
					cell11.setBorderWidth(0.01f);
					cell11.setPaddingBottom(8);
					cell11.setPaddingTop(8);
					cell11.setColspan(3);
					cell11.setHorizontalAlignment(Element.ALIGN_LEFT);
					cell11.setBorderWidthLeft(0.2f);
					cell11.setBorderColor(BaseColor.WHITE);
					// cell11.setBorderColorTop(BaseColor.BLACK);

					PdfPCell cell12 = new PdfPCell(new Paragraph("Diagnosis", Font4));
					cell12.setBorderWidth(0.01f);
					cell12.setPaddingBottom(5);
					cell12.setBorderWidthLeft(0.2f);
					cell12.setHorizontalAlignment(Element.ALIGN_CENTER);
					cell12.setBorderColor(BaseColor.BLACK);

					PdfPCell cell13 = new PdfPCell(new Paragraph("Description", Font4));
					cell13.setBorderWidth(0.01f);
					cell13.setPaddingBottom(5);
					cell13.setColspan(2);
					cell13.setBorderWidthLeft(0.2f);
					cell13.setHorizontalAlignment(Element.ALIGN_CENTER);
					cell13.setBorderColor(BaseColor.BLACK);

					/*
					 * PdfPCell cell14 = new PdfPCell(new Paragraph("Comments", Font4));
					 * cell14.setBorderWidth(0.01f); cell14.setPaddingBottom(5);
					 * cell14.setBorderWidthLeft(0.2f);
					 * cell14.setHorizontalAlignment(Element.ALIGN_CENTER);
					 * cell14.setBorderColor(BaseColor.BLACK);
					 */
					// table2.addCell(cell120);
					table2.addCell(cell11);
					table2.addCell(cell12);
					table2.addCell(cell13);
					// table2.addCell(cell14);
					document.add(table2);
				}

				PdfPTable table2 = new PdfPTable(3);
				table2.setFooterRows(1);
				table2.setWidthPercentage(100);
				Rectangle rect2 = new Rectangle(270, 700);
				table2.setWidthPercentage(new float[] { 80, 90, 90 }, rect2);

				PdfPCell cell15 = new PdfPCell(new Paragraph(resultSet4.getString("diagnosis"), mainContent));
				cell15.setBorderWidth(0.01f);
				cell15.setPaddingBottom(5);
				cell15.setBorderWidthLeft(0.2f);
				cell15.setBorderWidthBottom(0.2f);
				cell15.setHorizontalAlignment(Element.ALIGN_CENTER);
				cell15.setBorderColor(BaseColor.BLACK);

				PdfPCell cell16 = new PdfPCell(new Paragraph(resultSet4.getString("description"), mainContent));
				cell16.setBorderWidth(0.01f);
				cell16.setPaddingBottom(5);
				cell16.setColspan(2);
				cell16.setBorderWidthLeft(0.2f);
				cell16.setBorderWidthBottom(0.2f);
				cell16.setHorizontalAlignment(Element.ALIGN_CENTER);
				cell16.setBorderColor(BaseColor.BLACK);

				/*
				 * PdfPCell cell17 = new PdfPCell(new
				 * Paragraph(resultSet4.getString("comments"), mainContent));
				 * cell17.setBorderWidth(0.01f); cell17.setPaddingBottom(5);
				 * cell17.setBorderWidthLeft(0.2f); cell17.setBorderWidthBottom(0.2f);
				 * cell17.setHorizontalAlignment(Element.ALIGN_CENTER);
				 * cell17.setBorderColor(BaseColor.BLACK);
				 */

				table2.addCell(cell15);
				table2.addCell(cell16);
				// table2.addCell(cell17);

				document.add(table2);
				cnt2++;
			}

			if (onExamination != null) {

				PdfPTable table1 = new PdfPTable(1);
				table1.setFooterRows(1);
				table1.setWidthPercentage(100);
				Rectangle rect1 = new Rectangle(270, 700);
				table1.setWidthPercentage(new float[] { 270 }, rect1);

				// On Examination
				PdfPCell cell2 = new PdfPCell(new Paragraph("On Examination :", Font5));
				cell2.setBorderWidth(0.01f);
				cell2.setPaddingBottom(8);
				cell2.setPaddingLeft(12);
				cell2.setHorizontalAlignment(Element.ALIGN_LEFT);
				cell2.setBorderWidthLeft(0.2f);
				cell2.setBorderColor(BaseColor.WHITE);

				PdfPCell cell3 = new PdfPCell(new Paragraph(onExamination, mainContent));
				cell3.setBorderWidth(0.01f);
				cell3.setPaddingBottom(8);
				cell3.setPaddingLeft(20);
				cell3.setHorizontalAlignment(Element.ALIGN_LEFT);
				cell3.setBorderWidthLeft(0.2f);
				cell3.setBorderColor(BaseColor.WHITE);

				table1.addCell(cell2);
				table1.addCell(cell3);

				document.add(table1);
			}

			// while (resultSet5.next()) {
			/*
			 * PdfPTable table5 = new PdfPTable(4); table5.setFooterRows(1);
			 * table5.setWidthPercentage(100); Rectangle rect5 = new Rectangle(270, 700);
			 * table5.setWidthPercentage(new float[] { 50, 30, 40, 140 }, rect5);
			 * 
			 * PdfPCell cell34 = new PdfPCell(new Paragraph("Personal History :", Font5));
			 * cell34.setBorderWidth(0.01f); cell34.setPaddingBottom(8);
			 * cell34.setPaddingTop(8); cell34.setColspan(4);
			 * cell34.setHorizontalAlignment(Element.ALIGN_LEFT);
			 * cell34.setBorderWidthLeft(0.2f); cell34.setBorderColor(BaseColor.WHITE); //
			 * cell34.setBorderColorTop(BaseColor.BLACK);
			 * 
			 * PdfPCell cell35 = new PdfPCell(new Paragraph("Smoking :", Font4));
			 * cell35.setBorderWidth(0.01f); cell35.setPaddingBottom(5);
			 * cell35.setBorderWidthLeft(0.2f);
			 * cell35.setHorizontalAlignment(Element.ALIGN_CENTER);
			 * cell35.setBorderColor(BaseColor.WHITE);
			 * 
			 * PdfPCell cell36 = new PdfPCell(new Paragraph(smoking, mainContent));
			 * cell36.setBorderWidth(0.01f); cell36.setPaddingBottom(5);
			 * cell36.setBorderWidthLeft(0.2f);
			 * cell36.setHorizontalAlignment(Element.ALIGN_CENTER);
			 * cell36.setBorderColor(BaseColor.WHITE);
			 * 
			 * PdfPCell cell37 = new PdfPCell(new Paragraph("Comments :", Font4));
			 * cell37.setBorderWidth(0.01f); cell37.setPaddingBottom(5);
			 * cell37.setBorderWidthLeft(0.2f);
			 * cell37.setHorizontalAlignment(Element.ALIGN_CENTER);
			 * cell37.setBorderColor(BaseColor.WHITE);
			 * 
			 * PdfPCell cell38 = new PdfPCell(new Paragraph(smokingDesc, mainContent));
			 * cell38.setBorderWidth(0.01f); cell38.setPaddingBottom(5);
			 * cell38.setBorderWidthLeft(0.2f); //
			 * cell38.setHorizontalAlignment(Element.ALIGN_CENTER);
			 * cell38.setBorderColor(BaseColor.WHITE);
			 * 
			 * PdfPCell cell39 = new PdfPCell(new Paragraph("Alcohol :", Font4));
			 * cell39.setBorderWidth(0.01f); cell39.setPaddingBottom(5);
			 * cell39.setBorderWidthLeft(0.2f);
			 * cell39.setHorizontalAlignment(Element.ALIGN_CENTER);
			 * cell39.setBorderColor(BaseColor.WHITE);
			 * 
			 * PdfPCell cell40 = new PdfPCell(new Paragraph(alcohol, mainContent));
			 * cell40.setBorderWidth(0.01f); cell40.setPaddingBottom(5);
			 * cell40.setBorderWidthLeft(0.2f);
			 * cell40.setHorizontalAlignment(Element.ALIGN_CENTER);
			 * cell40.setBorderColor(BaseColor.WHITE);
			 * 
			 * PdfPCell cell41 = new PdfPCell(new Paragraph("Comments :", Font4));
			 * cell41.setBorderWidth(0.01f); cell41.setPaddingBottom(5);
			 * cell41.setBorderWidthLeft(0.2f);
			 * cell41.setHorizontalAlignment(Element.ALIGN_CENTER);
			 * cell41.setBorderColor(BaseColor.WHITE);
			 * 
			 * PdfPCell cell42 = new PdfPCell(new Paragraph(alcoholDesc, mainContent));
			 * cell42.setBorderWidth(0.01f); cell42.setPaddingBottom(5);
			 * cell42.setBorderWidthLeft(0.2f); //
			 * cell42.setHorizontalAlignment(Element.ALIGN_CENTER);
			 * cell42.setBorderColor(BaseColor.WHITE);
			 * 
			 * PdfPCell cell43 = new PdfPCell(new Paragraph("Tobacco :", Font4));
			 * cell43.setBorderWidth(0.01f); cell43.setPaddingBottom(5);
			 * cell43.setBorderWidthLeft(0.2f);
			 * cell43.setHorizontalAlignment(Element.ALIGN_CENTER);
			 * cell43.setBorderColor(BaseColor.WHITE);
			 * 
			 * PdfPCell cell44 = new PdfPCell(new Paragraph(tobacco, mainContent));
			 * cell44.setBorderWidth(0.01f); cell44.setPaddingBottom(5);
			 * cell44.setBorderWidthLeft(0.2f);
			 * cell44.setHorizontalAlignment(Element.ALIGN_CENTER);
			 * cell44.setBorderColor(BaseColor.WHITE);
			 * 
			 * PdfPCell cell45 = new PdfPCell(new Paragraph("Comments :", Font4));
			 * cell45.setBorderWidth(0.01f); cell45.setPaddingBottom(5);
			 * cell45.setBorderWidthLeft(0.2f);
			 * cell45.setHorizontalAlignment(Element.ALIGN_CENTER);
			 * cell45.setBorderColor(BaseColor.WHITE);
			 * 
			 * PdfPCell cell46 = new PdfPCell(new Paragraph(tobaccoDesc, mainContent));
			 * cell46.setBorderWidth(0.01f); cell46.setPaddingBottom(5);
			 * cell46.setBorderWidthLeft(0.2f); //
			 * cell46.setHorizontalAlignment(Element.ALIGN_CENTER);
			 * cell46.setBorderColor(BaseColor.WHITE);
			 * 
			 * PdfPCell cell47 = new PdfPCell(new Paragraph("Food Choice :", Font4));
			 * cell47.setBorderWidth(0.01f); cell47.setPaddingBottom(5);
			 * cell47.setBorderWidthLeft(0.2f);
			 * cell47.setHorizontalAlignment(Element.ALIGN_CENTER);
			 * cell47.setBorderColor(BaseColor.WHITE);
			 * 
			 * PdfPCell cell48 = new PdfPCell(new Paragraph(foodChoice, mainContent));
			 * cell48.setBorderWidth(0.01f); cell48.setPaddingBottom(5);
			 * cell48.setBorderWidthLeft(0.2f);
			 * cell48.setHorizontalAlignment(Element.ALIGN_CENTER);
			 * cell48.setBorderColor(BaseColor.WHITE);
			 * 
			 * PdfPCell cell49 = new PdfPCell(new Paragraph("Comments :", Font4));
			 * cell49.setBorderWidth(0.01f); cell49.setPaddingBottom(5);
			 * cell49.setBorderWidthLeft(0.2f);
			 * cell49.setHorizontalAlignment(Element.ALIGN_CENTER);
			 * cell49.setBorderColor(BaseColor.WHITE);
			 * 
			 * PdfPCell cell50 = new PdfPCell(new Paragraph(foodChoiceDetails,
			 * mainContent)); cell50.setBorderWidth(0.01f); cell50.setPaddingBottom(5);
			 * cell50.setBorderWidthLeft(0.2f); //
			 * cell50.setHorizontalAlignment(Element.ALIGN_CENTER);
			 * cell50.setBorderColor(BaseColor.WHITE);
			 * 
			 * // table5.addCell(cell120); table5.addCell(cell34); table5.addCell(cell35);
			 * table5.addCell(cell36); table5.addCell(cell37); table5.addCell(cell38);
			 * table5.addCell(cell39); table5.addCell(cell40); table5.addCell(cell41);
			 * table5.addCell(cell42); table5.addCell(cell43); table5.addCell(cell44);
			 * table5.addCell(cell45); table5.addCell(cell46); table5.addCell(cell47);
			 * table5.addCell(cell48); table5.addCell(cell49); table5.addCell(cell50);
			 * 
			 * document.add(table5);
			 */
			// }

			int cnt1 = 1;
			while (resultSet6.next()) {
				if (cnt1 == 1) {
					PdfPTable table3 = new PdfPTable(3);
					table3.setFooterRows(1);
					table3.setWidthPercentage(100);
					Rectangle rect3 = new Rectangle(270, 700);
					table3.setWidthPercentage(new float[] { 80, 60, 120 }, rect3);

					PdfPCell cell18 = new PdfPCell(new Paragraph("Current Medication :", Font5));
					cell18.setBorderWidth(0.01f);
					cell18.setPaddingBottom(8);
					cell18.setPaddingTop(8);
					cell18.setColspan(3);
					cell18.setHorizontalAlignment(Element.ALIGN_LEFT);
					cell18.setBorderWidthLeft(0.2f);
					cell18.setBorderColor(BaseColor.WHITE);
					// cell18.setBorderColorTop(BaseColor.BLACK);

					PdfPCell cell19 = new PdfPCell(new Paragraph("Drug Name", Font4));
					cell19.setBorderWidth(0.01f);
					cell19.setPaddingBottom(5);
					cell19.setBorderWidthLeft(0.2f);
					cell19.setHorizontalAlignment(Element.ALIGN_CENTER);
					cell19.setBorderColor(BaseColor.BLACK);

					PdfPCell cell20 = new PdfPCell(new Paragraph("Duration (Days)", Font4));
					cell20.setBorderWidth(0.01f);
					cell20.setPaddingBottom(5);
					cell20.setBorderWidthLeft(0.2f);
					cell20.setHorizontalAlignment(Element.ALIGN_CENTER);
					cell20.setBorderColor(BaseColor.BLACK);

					PdfPCell cell21 = new PdfPCell(new Paragraph("Comments", Font4));
					cell21.setBorderWidth(0.01f);
					cell21.setPaddingBottom(5);
					cell21.setBorderWidthLeft(0.2f);
					cell21.setHorizontalAlignment(Element.ALIGN_CENTER);
					cell21.setBorderColor(BaseColor.BLACK);

					table3.addCell(cell18);
					table3.addCell(cell19);
					table3.addCell(cell20);
					table3.addCell(cell21);
					document.add(table3);
				}
				PdfPTable table3 = new PdfPTable(3);
				table3.setFooterRows(1);
				table3.setWidthPercentage(100);
				Rectangle rect3 = new Rectangle(270, 700);
				table3.setWidthPercentage(new float[] { 80, 60, 120 }, rect3);

				PdfPCell cell22 = new PdfPCell(new Paragraph(resultSet6.getString("drugName"), mainContent));
				cell22.setBorderWidth(0.01f);
				cell22.setPaddingBottom(5);
				cell22.setBorderWidthLeft(0.2f);
				cell22.setBorderWidthBottom(0.2f);
				cell22.setHorizontalAlignment(Element.ALIGN_CENTER);
				cell22.setBorderColor(BaseColor.BLACK);

				PdfPCell cell23 = new PdfPCell(new Paragraph(resultSet6.getString("duration"), mainContent));
				cell23.setBorderWidth(0.01f);
				cell23.setPaddingBottom(5);
				cell23.setBorderWidthLeft(0.2f);
				cell23.setBorderWidthBottom(0.2f);
				cell23.setHorizontalAlignment(Element.ALIGN_CENTER);
				cell23.setBorderColor(BaseColor.BLACK);

				PdfPCell cell24 = new PdfPCell(new Paragraph(resultSet6.getString("comments"), mainContent));
				cell24.setBorderWidth(0.01f);
				cell24.setPaddingBottom(5);
				cell24.setBorderWidthLeft(0.2f);
				cell24.setBorderWidthBottom(0.2f);
				cell24.setHorizontalAlignment(Element.ALIGN_CENTER);
				cell24.setBorderColor(BaseColor.BLACK);

				table3.addCell(cell22);
				table3.addCell(cell23);
				table3.addCell(cell24);

				document.add(table3);

				cnt1++;
			}

			while (resultSet7.next()) {
				PdfPTable table4 = new PdfPTable(8);
				table4.setFooterRows(1);
				table4.setWidthPercentage(100);
				Rectangle rect4 = new Rectangle(270, 700);
				table4.setWidthPercentage(new float[] { 25, 25, 40, 37, 43, 37, 25, 28 }, rect4);

				/*
				 * PdfPCell cell1201 = new PdfPCell(new Paragraph("", Font4));
				 * cell1201.setBorderWidth(0.01f); cell1201.setPaddingBottom(5);
				 * cell1201.setColspan(8); cell1201.setBorderWidthLeft(0.2f);
				 * cell1201.setHorizontalAlignment(Element.ALIGN_CENTER);
				 * cell1201.setBorderColor(BaseColor.WHITE);
				 * cell1201.setBorderColorTop(BaseColor.BLACK);
				 */

				PdfPCell cell25 = new PdfPCell(new Paragraph("Vital Signs :", Font5));
				cell25.setBorderWidth(0.01f);
				cell25.setPaddingBottom(8);
				cell25.setPaddingTop(8);
				cell25.setColspan(8);
				cell25.setHorizontalAlignment(Element.ALIGN_LEFT);
				cell25.setBorderWidthLeft(0.2f);
				cell25.setBorderColor(BaseColor.WHITE);
				// cell25.setBorderColorTop(BaseColor.BLACK);

				PdfPCell cell26 = new PdfPCell(new Paragraph("Weight", Font4));
				cell26.setBorderWidth(0.01f);
				cell26.setPaddingBottom(10);
				cell26.setBorderWidthLeft(0.2f);
				cell26.setHorizontalAlignment(Element.ALIGN_CENTER);
				cell26.setBorderColor(BaseColor.BLACK);

				PdfPCell cell27 = new PdfPCell(new Paragraph(resultSet7.getString("weight"), mainContent));
				cell27.setBorderWidth(0.01f);
				cell27.setPaddingBottom(10);
				cell27.setBorderWidthLeft(0.2f);
				cell27.setHorizontalAlignment(Element.ALIGN_CENTER);
				cell27.setBorderColor(BaseColor.BLACK);

				PdfPCell cell28 = new PdfPCell(new Paragraph("Systolic-BP", Font4));
				cell28.setBorderWidth(0.01f);
				cell28.setPaddingBottom(10);
				cell28.setBorderWidthLeft(0.2f);
				cell28.setHorizontalAlignment(Element.ALIGN_CENTER);
				cell28.setBorderColor(BaseColor.BLACK);

				PdfPCell cell29 = new PdfPCell(new Paragraph(resultSet7.getString("systolicBP"), mainContent));
				cell29.setBorderWidth(0.01f);
				cell29.setPaddingBottom(10);
				cell29.setBorderWidthLeft(0.2f);
				cell29.setHorizontalAlignment(Element.ALIGN_CENTER);
				cell29.setBorderColor(BaseColor.BLACK);

				PdfPCell cell30 = new PdfPCell(new Paragraph("Diastolic-BP", Font4));
				cell30.setBorderWidth(0.01f);
				cell30.setPaddingBottom(10);
				cell30.setBorderWidthLeft(0.2f);
				cell30.setHorizontalAlignment(Element.ALIGN_CENTER);
				cell30.setBorderColor(BaseColor.BLACK);

				PdfPCell cell31 = new PdfPCell(new Paragraph(resultSet7.getString("diastolicBP"), mainContent));
				cell31.setBorderWidth(0.01f);
				cell31.setPaddingBottom(10);
				cell31.setBorderWidthLeft(0.2f);
				cell31.setHorizontalAlignment(Element.ALIGN_CENTER);
				cell31.setBorderColor(BaseColor.BLACK);

				PdfPCell cell32 = new PdfPCell(new Paragraph("Pulse", Font4));
				cell32.setBorderWidth(0.01f);
				cell32.setPaddingBottom(10);
				cell32.setBorderWidthLeft(0.2f);
				cell32.setHorizontalAlignment(Element.ALIGN_CENTER);
				cell32.setBorderColor(BaseColor.BLACK);

				PdfPCell cell33 = new PdfPCell(new Paragraph(resultSet7.getString("pulse"), mainContent));
				cell33.setBorderWidth(0.01f);
				cell33.setPaddingBottom(10);
				cell33.setBorderWidthLeft(0.2f);
				cell33.setHorizontalAlignment(Element.ALIGN_CENTER);
				cell33.setBorderColor(BaseColor.BLACK);

				// table4.addCell(cell1201);
				table4.addCell(cell25);
				table4.addCell(cell26);
				table4.addCell(cell27);
				table4.addCell(cell28);
				table4.addCell(cell29);
				table4.addCell(cell30);
				table4.addCell(cell31);
				table4.addCell(cell32);
				table4.addCell(cell33);

				document.add(table4);
			}

			/*
			 * For displaying patient personal details
			 */

			PdfPTable table = new PdfPTable(3);

			table.setFooterRows(1);
			table.setWidthPercentage(110);
			Rectangle rect = new Rectangle(270, 700);
			table.setWidthPercentage(new float[] { 120, 75, 75 }, rect);

			PdfPCell cell0 = new PdfPCell(new Paragraph("Prescription", Font7));
			cell0.setPaddingTop(8);
			cell0.setPaddingBottom(5);
			cell0.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell0.setUseBorderPadding(true);
			cell0.setColspan(3);
			cell0.setBorderWidthBottom(1f);
			// cell0.setBorderColorBottom(BaseColor.DARK_GRAY);
			cell0.setBorder(Rectangle.NO_BORDER);

			/* For Patient Name */

			/*
			 * PdfPCell cell3 = new PdfPCell(new Paragraph("Reg.No : " + regNo, Font5)); //
			 * cell3.setPaddingTop(100); cell3.setBorderWidth(0.2f); cell3.setColspan(2);
			 * cell3.setPaddingBottom(5); cell3.setBorderColor(BaseColor.WHITE);
			 * 
			 * PdfPCell cell311 = new PdfPCell(new Paragraph("Date : " + visitDate, Font5));
			 * // cell311.setPaddingTop(100); cell311.setBorderWidth(0.2f);
			 * cell311.setPaddingBottom(5); cell311.setBorderColor(BaseColor.WHITE);
			 * 
			 * String fullName = "";
			 * 
			 * fullName = StringUtils.capitalize(resultSet1.getString("firstName")) + " " +
			 * StringUtils.capitalize(resultSet1.getString("lastName"));
			 * 
			 * PdfPCell cell2 = new PdfPCell(new Paragraph("Name : " + fullName, Font5));
			 * cell2.setBorderWidth(0.01f); cell2.setPaddingBottom(5);
			 * cell2.setBorderWidthLeft(0.2f); cell2.setBorderColor(BaseColor.WHITE);
			 * 
			 * PdfPCell cell2002 = new PdfPCell(new Paragraph("" +
			 * resultSet1.getString("age") + " Years", Font5));
			 * cell2002.setBorderWidth(0.01f); cell2002.setPaddingBottom(5);
			 * cell2002.setBorderWidthLeft(0.2f); cell2002.setBorderColor(BaseColor.WHITE);
			 * 
			 * PdfPCell cell2003 = new PdfPCell( new Paragraph("" +
			 * StringUtils.capitalize(resultSet1.getString("gender")), Font5));
			 * cell2003.setBorderWidth(0.01f); cell2003.setPaddingBottom(5);
			 * cell2003.setBorderWidthLeft(0.2f); cell2003.setBorderColor(BaseColor.WHITE);
			 */

			table.addCell(cell0);
			/*
			 * table.addCell(cell3); table.addCell(cell311); table.addCell(cell2);
			 * table.addCell(cell2002); table.addCell(cell2003);
			 */

			document.add(table);

			PdfPTable table4 = new PdfPTable(4);

			table4.setWidthPercentage(100);
			Rectangle rect7 = new Rectangle(270, 700);
			table4.setWidthPercentage(new float[] { 35, 100, 35, 100 }, rect7);

			/*
			 * PdfPCell cell2004 = new PdfPCell(new Paragraph("Diagnosis: ", Font5));
			 * cell2004.setBorderWidth(0.01f); cell2004.setPaddingBottom(5);
			 * cell2004.setBorderWidthLeft(0.2f); cell2004.setBorderColor(BaseColor.WHITE);
			 * 
			 * PdfPCell cell20040 = new PdfPCell(new
			 * Paragraph(StringUtils.capitalize(diagnosis), mainContent));
			 * cell20040.setBorderWidth(0.01f); cell20040.setPaddingBottom(5);
			 * cell20040.setBorderWidthLeft(0.2f);
			 * cell20040.setBorderColor(BaseColor.WHITE);
			 * 
			 * table4.addCell(cell2004); table4.addCell(cell20040);
			 */

			if (advice == "" || advice == null) {
				PdfPCell cell2005 = new PdfPCell(new Paragraph(""));
				cell2005.setBorderWidth(0.01f);
				cell2005.setPaddingBottom(5);
				cell2005.setColspan(4);
				cell2005.setBorderWidthLeft(0.2f);
				cell2005.setBorderColor(BaseColor.WHITE);

				table4.addCell(cell2005);
			} else if (advice.isEmpty()) {
				PdfPCell cell2005 = new PdfPCell(new Paragraph(""));
				cell2005.setBorderWidth(0.01f);
				cell2005.setPaddingBottom(5);
				cell2005.setColspan(4);
				cell2005.setBorderWidthLeft(0.2f);
				cell2005.setBorderColor(BaseColor.WHITE);

				table4.addCell(cell2005);
			} else {

				PdfPCell cell2005 = new PdfPCell(new Paragraph("Advice: ", Font5));
				cell2005.setBorderWidth(0.01f);
				cell2005.setPaddingBottom(5);
				cell2005.setPaddingLeft(10f);
				cell2005.setHorizontalAlignment(Element.ALIGN_LEFT);
				cell2005.setBorderWidthLeft(0.2f);
				cell2005.setBorderColor(BaseColor.WHITE);

				PdfPCell cell2006 = new PdfPCell(new Paragraph(StringUtils.capitalize(advice), marathiFont));
				cell2006.setBorderWidth(0.01f);
				cell2006.setPaddingBottom(5);
				cell2006.setColspan(3);
				cell2006.setHorizontalAlignment(Element.ALIGN_LEFT);
				cell2006.setBorderWidthLeft(0.2f);
				cell2006.setBorderColor(BaseColor.WHITE);

				table4.addCell(cell2005);
				table4.addCell(cell2006);
			}

			document.add(table4);

			/*
			 * For prescription
			 */
			PdfPTable table3 = new PdfPTable(3);
			table3.setWidthPercentage(100);
			Rectangle rect2 = new Rectangle(270, 700);
			table3.setWidthPercentage(new float[] { 30, 180, 60 }, rect2);

			/*
			 * // For blank space PdfPCell cell30 = new PdfPCell(new Paragraph(
			 * "                                                                                               "
			 * +
			 * "                                                                                                                            "
			 * +
			 * "                                                                                                                              "
			 * , Font2)); cell30.setColspan(3); cell30.setBorderWidthRight(0f);
			 * cell30.setBorderWidthLeft(0f); cell30.setBorderWidthTop(0f);
			 * cell30.setBorderWidthBottom(0f); cell30.setBorderColorTop(BaseColor.WHITE);
			 * 
			 * PdfPCell cell3011 = new PdfPCell(new Paragraph(
			 * "                                                                                               "
			 * +
			 * "                                                                                                                            "
			 * +
			 * "                                                                                                                              "
			 * , Font2)); cell3011.setColspan(3); cell3011.setBorderWidthRight(0f);
			 * cell3011.setBorderWidthLeft(0f); cell3011.setBorderWidthTop(0f);
			 * cell3011.setBorderWidthBottom(0f);
			 * cell3011.setBorderColorTop(BaseColor.WHITE);
			 */

			/*
			 * Table for Prescription image
			 */
			PdfPTable imageTable = new PdfPTable(2);
			imageTable.setWidthPercentage(80);
			imageTable.setWidths(new int[] { 1, 2 });

			PdfPCell imageCell1 = new PdfPCell(prescrImg, true);
			imageCell1.setBorderColor(BaseColor.WHITE);

			PdfPCell imageCell2 = new PdfPCell(new Paragraph("", mainContent));
			imageCell2.setBorderColor(BaseColor.WHITE);

			imageTable.addCell(imageCell1);
			imageTable.addCell(imageCell2);

			// Gene
			PdfPCell cell3002 = new PdfPCell(imageTable);
			cell3002.setBorderWidth(0.0f);
			cell3002.setPaddingBottom(10);
			cell3002.setBorderColor(BaseColor.WHITE);

			PdfPCell cell320 = new PdfPCell(new Paragraph("", mainContent));
			cell320.setBorderWidth(0.01f);
			cell320.setPaddingBottom(5);
			cell320.setBorderColor(BaseColor.WHITE);

			// Amino Acid Change
			PdfPCell cell34 = new PdfPCell(new Paragraph("Qty", Font5));
			cell34.setBorderWidth(0.01f);
			cell34.setPaddingBottom(5);
			cell34.setHorizontalAlignment(Element.ALIGN_RIGHT);
			cell34.setBorderColor(BaseColor.WHITE);

			/*
			 * table3.addCell(cell30); table3.addCell(cell3011);
			 */
			table3.addCell(cell3002);
			table3.addCell(cell320);
			table3.addCell(cell34);

			document.add(table3);

			int prescRowCount = 1;

			while (resultSet.next()) {

				if (prescRowCount == 5) {
					document.newPage();

					/*
					 * Adding image
					 */
					PdfContentByte canvas1 = writer.getDirectContent();

					/*
					 * Checking whether pageSize is A4 or A5, according to that background image is
					 * being set
					 */

					Image image1;

					if (pageSize.equals("A5")) {
						if (A5ImagePath == null || A5ImagePath == "") {
							image1 = null;

						} else {

							if (A5ImagePath.isEmpty()) {
								image1 = null;
							} else {

								S3ObjectInputStream s3ObjectInputStream = s3
										.getObject(
												new GetObjectRequest(bucketName + "/" + s3reportFilePath, A5ImagePath))
										.getObjectContent();

								IOUtils.copy(s3ObjectInputStream,
										new FileOutputStream(new File(realPath + "images/" + A5ImagePath)));

								image1 = Image.getInstance(realPath + "images/" + A5ImagePath);

								image1.scaleToFit(PageSize.A5.getWidth(), PageSize.A5.getHeight());
								image1.setAbsolutePosition(0, 0);

								canvas1.saveState();
								PdfGState state = new PdfGState();
								canvas1.setGState(state);
								canvas1.addImage(image1);
								canvas1.restoreState();
							}

						}
					} else if (pageSize.equals("A4")) {
						if (A5ImagePath == null || A5ImagePath == "") {

							image1 = null;

						} else {

							if (A5ImagePath.isEmpty()) {

								image1 = null;
							} else {

								S3ObjectInputStream s3ObjectInputStream = s3
										.getObject(
												new GetObjectRequest(bucketName + "/" + s3reportFilePath, A5ImagePath))
										.getObjectContent();

								IOUtils.copy(s3ObjectInputStream,
										new FileOutputStream(new File(realPath + "images/" + A5ImagePath)));

								image1 = Image.getInstance(realPath + "images/" + A5ImagePath);

								image1.scaleToFit(PageSize.A4.getWidth(), PageSize.A4.getHeight());
								image1.setAbsolutePosition(0, 0);

								canvas1.saveState();
								PdfGState state = new PdfGState();
								canvas1.setGState(state);
								canvas1.addImage(image1);
								canvas1.restoreState();
							}

						}
					}
				}

				PdfPTable table1 = new PdfPTable(3);

				table1.setWidthPercentage(100);
				Rectangle rect1 = new Rectangle(270, 700);
				table1.setWidthPercentage(new float[] { 110, 40, 120 }, rect1);

				String finalTradeName = resultSet.getString("tradeName").toUpperCase();

				System.out.println("TRADENAME:: " + finalTradeName);

				String category = resultSet.getString("category");

				if (category == null) {
					category = "";
				}

				if (resultSet.getString("drugName") == null || resultSet.getString("drugName") == "") {
					finalTradeName = finalTradeName;
				} else if (resultSet.getString("drugName").isEmpty()) {
					finalTradeName = finalTradeName;
				} else {
					finalTradeName += "\n(" + resultSet.getString("drugName") + ")";
				}

				PdfPCell cell21 = new PdfPCell(new Paragraph(finalTradeName, marathiFont));
				cell21.setBorderWidth(0.2f);
				cell21.setPaddingBottom(1);
				cell21.setPaddingTop(3);
				cell21.setBorderColor(BaseColor.WHITE);
				cell21.setBorder(Rectangle.NO_BORDER);

				PdfPCell cell021 = new PdfPCell(new Paragraph(category, marathiFont));
				cell021.setBorderWidth(0.2f);
				cell021.setPaddingBottom(1);
				cell021.setPaddingTop(3);
				cell021.setBorderColor(BaseColor.WHITE);
				cell021.setBorder(Rectangle.NO_BORDER);

				System.out.println("QUANTIRTY:: " + resultSet.getDouble("quantity"));
				/*
				 * for Amino Acid Change
				 */
				PdfPCell cell22 = new PdfPCell(new Paragraph("" + resultSet.getDouble("quantity"), mainContent));
				cell22.setBorderWidth(0.2f);
				cell22.setPaddingBottom(1);
				cell22.setPaddingTop(3);
				cell22.setHorizontalAlignment(Element.ALIGN_RIGHT);
				cell22.setBorderColor(BaseColor.WHITE);
				cell22.setBorder(Rectangle.NO_BORDER);

				table1.addCell(cell21);
				table1.addCell(cell021);
				table1.addCell(cell22);

				String frequency = resultSet.getString("frequency");
				System.out.println("FREQ:: " + frequency);

				int noOfDays = resultSet.getInt("numberOfDays");

				PdfPTable table2 = new PdfPTable(3);

				table2.setWidthPercentage(100);
				Rectangle rect3 = new Rectangle(270, 700);
				table2.setWidthPercentage(new float[] { 80, 50, 140 }, rect1);

				PdfPCell cell24 = new PdfPCell(new Paragraph(frequency.replace(',', '\n'), marathiFont));
				cell24.setBorderWidth(0.2f);
				cell24.setPaddingBottom(10);
				cell24.setBorderColor(BaseColor.WHITE);
				cell24.setBorder(Rectangle.NO_BORDER);

				PdfPCell cell241 = new PdfPCell(new Paragraph(noOfDays + " days", mainContent));
				cell241.setBorderWidth(0.2f);
				cell241.setPaddingBottom(10);
				cell241.setBorderColor(BaseColor.WHITE);
				cell241.setBorder(Rectangle.NO_BORDER);

				PdfPCell cell25 = new PdfPCell(
						new Paragraph(StringUtils.capitalize(resultSet.getString("comment").trim()), marathiFont));
				cell25.setBorderWidth(0.2f);
				cell25.setPaddingBottom(9);
				cell25.setBorderColor(BaseColor.WHITE);
				cell25.setBorder(Rectangle.NO_BORDER);

				table2.addCell(cell24);
				table2.addCell(cell241);
				table2.addCell(cell25);

				document.add(table1);
				document.add(table2);

				prescRowCount++;
			}

			while (resultSet_investigation.next()) {

				investigation = resultSet_investigation.getString("investigation");

				if (investigation == "" || investigation == null) {
					// continue;
				} else if (investigation.isEmpty()) {
					// continue;
				} else {

					PdfPTable table2 = new PdfPTable(2);

					table2.setWidthPercentage(100);
					Rectangle rect5 = new Rectangle(270, 700);
					table2.setWidthPercentage(new float[] { 105, 165 }, rect5);

					PdfPCell cell002 = new PdfPCell(new Paragraph("Investigation/Procedure: ", Font5));
					cell002.setBorderWidth(0.01f);
					cell002.setPaddingBottom(5);
					cell002.setColspan(1);
					cell002.setBorderWidthLeft(0.2f);
					cell002.setBorderColor(BaseColor.WHITE);

					/*
					 * for investigation details
					 */
					PdfPCell cell2001 = new PdfPCell(new Paragraph(investigation, mainContent));
					cell2001.setBorderWidth(0.2f);
					cell2001.setColspan(2);
					cell2001.setPaddingBottom(1);
					cell2001.setHorizontalAlignment(Element.ALIGN_LEFT);
					cell2001.setBorderColor(BaseColor.WHITE);

					table2.addCell(cell002);
					table2.addCell(cell2001);

					document.add(table2);
				}
			}

			/*
			 * For signature in footer
			 */
			PdfPTable tableNew = new PdfPTable(1);

			tableNew.setWidthPercentage(100);
			Rectangle rect6 = new Rectangle(270, 700);
			tableNew.setWidthPercentage(new float[] { 270 }, rect6);

			String nextVisitLabel = "days.";

			/*
			 * if (orthoCheck) { nextVisitLabel = "month/s."; }
			 */

			PdfPCell cell1112 = new PdfPCell(
					new Paragraph("Follow-up after  " + nextVisitDays + "  " + nextVisitLabel, marathiFont));
			cell1112.setBackgroundColor(BaseColor.WHITE);
			cell1112.setPaddingTop(30);
			cell1112.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell1112.setBorderColor(BaseColor.WHITE);

			PdfPCell cellnew = new PdfPCell(new Paragraph(
					"Any of the above mentioned branded medicines can be replaced with generic medicines of the same composition.",
					marathiFont));
			cellnew.setBackgroundColor(BaseColor.WHITE);
			cellnew.setPaddingTop(15);
			cellnew.setHorizontalAlignment(Element.ALIGN_CENTER);
			cellnew.setBorderColor(BaseColor.WHITE);

			tableNew.addCell(cell1112);
			tableNew.addCell(cellnew);

			document.add(tableNew);

			/*
			 * For signature in footer
			 */

			PdfPTable tableFooter = new PdfPTable(1);
			tableFooter.setTotalWidth(510);
			tableFooter.setWidthPercentage(100);

			// Table for Prescription image

			PdfPTable imageTable1 = new PdfPTable(2);
			imageTable1.setWidthPercentage(80);
			imageTable1.setWidths(new int[] { 1, 2 });

			PdfPCell imageCell11 = new PdfPCell(signImg, true);
			imageCell11.setBorderColor(BaseColor.WHITE);

			PdfPCell imageCell21 = new PdfPCell(new Paragraph("", mainContent));
			imageCell21.setBorderColor(BaseColor.WHITE);

			imageTable1.addCell(imageCell11);
			imageTable1.addCell(imageCell21);

			PdfPCell cellFooter = new PdfPCell(imageTable1);
			cellFooter.setBorderWidth(0.01f);
			cellFooter.setPaddingBottom(15);
			cellFooter.setPaddingLeft(100);
			cellFooter.setBorderColor(BaseColor.WHITE);

			PdfPCell cellFooter1 = new PdfPCell(new Paragraph(docName, Font5));
			cellFooter1.setBorderWidth(0.01f);
			cellFooter1.setPaddingBottom(15);
			cellFooter1.setPaddingLeft(100);
			cellFooter1.setBorderColor(BaseColor.WHITE);

			tableFooter.addCell(cellFooter);
			tableFooter.addCell(cellFooter1);

			// document.add(tableFooter);

			FooterTable1 event = new FooterTable1(tableFooter);
			writer.setPageEvent(event);

			document.close();

			System.out.println("Successfully written and generated General physicial Prescription PDF Report");

			status = "success";

			resultSet7.close();
			preparedStatement7.close();

			resultSet6.close();
			preparedStatement6.close();

			resultSet5.close();
			preparedStatement5.close();

			resultSet4.close();
			preparedStatement4.close();

			resultSet3.close();
			preparedStatement3.close();

			resultSet2.close();
			preparedStatement2.close();

			resultSet.close();
			preparedStatement.close();

			resultSet1.close();
			preparedStatement1.close();

			connection.close();

		} catch (Exception exception) {
			exception.printStackTrace();
			status = "error";
		}
		return status;

	}

	public String convertLabBillingPDF(int patientID, int visitID, String realPath, String pdfOutFIleName, int clinicID,
			String fullName, AmazonS3 s3, String s3LogoFilePath, String bucketName) {

		int count = 1;

		String status = null;

		SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");

		SimpleDateFormat dateFormat1 = new SimpleDateFormat("dd-MM-yyyy");

		SimpleDateFormat dateFormat2 = new SimpleDateFormat("yyyy-MM-dd");

		PatientDAOInf patientDAOInf = new PatientDAOImpl();

		String receiptNo = "";
		String receiptDate = "";
		double consultationCharges = 0D;
		double totalAmt = 0D;
		double tax = 0D;
		double netAmt = 0D;
		double advAmt = 0D;
		double balanceAmt = 0D;
		String paymentType = "";
		String billingType = "";
		String refReceiptNo = "";
		double totalDiscount = 0D;

		String patientName = "";

		String cheqNo = "";
		String bankName = "";
		String bankBranch = "";
		String cheqDate = "";
		double cheqAmt = 0D;
		double cashPaid = 0D;
		double cashToReturn = 0D;
		String cardNo = "";
		String cheqIssuedBy = "";
		double creditNote = 0D;

		double cardAmt = 0D;

		double otherAmt = 0D;

		String currency = "";
		double totalAmountUSD = 0;
		double converstionRate = 0;

		double amountAdj = 0;

		String cashAdjStatus = "";

		String otherType = "";
		String mobileNo = "";

		// int clinicID = 0;

		String tempCompoundName = "";

		/*
		 * Declaring variable which stores the location for FreeSans.ttf file to print
		 * marathi text on pdf
		 */
		String marathiFontDir = realPath + "fonts/FreeSans.ttf";

		ConfigurationUtil configXMLUtil = new ConfigurationUtil();

		try {
			connection = getConnection();

			/*
			 * Generate the Receipt details based on patientID
			 */
			String retrieveReceiptDetailsQuery = QueryMaker.RETRIEVE_RECEIPT_DETAILS_FOR_PDF;

			preparedStatement1 = connection.prepareStatement(retrieveReceiptDetailsQuery);
			preparedStatement1.setInt(1, visitID);
			resultSet1 = preparedStatement1.executeQuery();

			while (resultSet1.next()) {

				receiptNo = resultSet1.getString("receiptNo");
				receiptDate = dateFormat.format(resultSet1.getTimestamp("receiptDate"));
				consultationCharges = resultSet1.getDouble("consultationCharges");
				totalAmt = resultSet1.getDouble("totalAmount");
				tax = resultSet1.getDouble("totalDiscount");
				netAmt = resultSet1.getDouble("netAmount");
				advAmt = resultSet1.getDouble("advPayment");
				balanceAmt = resultSet1.getDouble("balPayment");
				totalDiscount = resultSet1.getDouble("totalDiscount");
				paymentType = resultSet1.getString("paymentType");
				billingType = resultSet1.getString("billingType");
				refReceiptNo = resultSet1.getString("referenceReceiptNo");
				// totalDiscount = resultSet1.getDouble("totalDiscount");
				// currency = resultSet1.getString("currency");
				// converstionRate = resultSet1.getDouble("conversionRate");
				// totalAmountUSD = resultSet1.getDouble("totalAmountUSD");
				// amountAdj = resultSet1.getDouble("adjAmount");

			}

			/*
			 * Generate the query to fetch patient details
			 */
			String retrievePatientDetailQuery = QueryMaker.RETRIEVE_PATIENT_DETAILS_FOR_PDF;

			preparedStatement2 = connection.prepareStatement(retrievePatientDetailQuery);
			preparedStatement2.setInt(1, patientID);
			resultSet2 = preparedStatement2.executeQuery();

			while (resultSet2.next()) {

				if (resultSet2.getString("middleName") == null || resultSet2.getString("middleName") == ""
						|| resultSet2.getString("middleName").isEmpty()) {
					patientName = resultSet2.getString("firstName") + " " + resultSet2.getString("lastName");
				} else {
					patientName = resultSet2.getString("firstName") + " " + resultSet2.getString("middleName") + " "
							+ resultSet2.getString("lastName");
				}

			}

			/*
			 * Generate query to fetch payment details by visitID
			 */
			String retrievePaymentDetailsQuery = QueryMaker.RETRIEVE_PAYMENT_DEATILS_FOR_PDF;

			preparedStatement4 = connection.prepareStatement(retrievePaymentDetailsQuery);
			preparedStatement4.setInt(1, visitID);
			resultSet4 = preparedStatement4.executeQuery();

			while (resultSet4.next()) {
				cheqNo = resultSet4.getString("chequeNumber");
				bankName = resultSet4.getString("bankName");
				bankBranch = resultSet4.getString("bankBranch");
				cheqDate = resultSet4.getString("chequeDate");

				if (cheqDate == null || cheqDate == "" || cheqDate.isEmpty()) {
					cheqDate = "";
				} else {
					cheqDate = dateFormat1.format(dateFormat2.parse(cheqDate));
				}

				cheqAmt = resultSet4.getDouble("chequeAmount");
				cashPaid = resultSet4.getDouble("cashPaid");
				cashToReturn = resultSet4.getDouble("cashToReturn");
				cardNo = resultSet4.getString("cardNumber");
				creditNote = resultSet4.getDouble("creditNote");
				mobileNo = resultSet4.getString("mobile");
				cheqIssuedBy = resultSet4.getString("chequeIssueBy");
				otherType = resultSet4.getString("otherMode");
				cardAmt = resultSet4.getDouble("cardAmount");
				otherAmt = resultSet4.getDouble("otherAmount");
				// cashAdjStatus = resultSet4.getString("cashAdjStatus");
			}

			/*
			 * Query to fetch clinicID from Visit table based on visitID
			 */
			String retrieveClinicIDByVisitIDQuery = QueryMaker.RETRIEVE_CLINIC_ID_BY_VISIT_ID;

			preparedStatement3 = connection.prepareStatement(retrieveClinicIDByVisitIDQuery);

			preparedStatement3.setInt(1, visitID);

			resultSet3 = preparedStatement3.executeQuery();

			while (resultSet3.next()) {
				clinicID = resultSet3.getInt("clinicID");
			}

			String clinicRegNo = patientDAOInf.retrieveClinicRegNoByClinicID(clinicID, patientID);

			List<PatientForm> list = patientDAOInf.retrieveTransactionListByVisitID(visitID);

			/*
			 * Getting image path from XML
			 */
			// String A5ImagePath = configXMLUtil.getLetterHeadImage();

			/*
			 * ConfigXMLUtil XMLUtil = new ConfigXMLUtil();
			 * 
			 * String logoPath = XMLUtil.getLogoFilePath();
			 * 
			 * File SignatureFile = new File(logoPath + File.separator +
			 * "Lab_letterHead.jpeg");
			 * 
			 * String A5ImagePath = logoPath + File.separator + "Lab_letterHead.jpeg";
			 * 
			 * if (!SignatureFile.exists()) { A5ImagePath = null; }
			 */

			String A5ImagePath = configXMLUtil.getLetterHeadImage();

			System.out.println("A5IM.." + A5ImagePath);

			/*
			 * Getting page size from XMl
			 */
			// String pageSize = configXMLUtil.getPageSize();
			String pageSize = "A5";

			/*
			 * Setting path to store PDF file
			 */
			File file = new File(realPath + "/" + pdfOutFIleName);
			/*
			 * Creating Document for PDF
			 */
			Document document = null;

			/*
			 * Checking whether pageSize tag in XMl contains A5 or A4, according to that
			 * setting PDF page size
			 */
			if (pageSize.equals("A5")) {
				document = new Document(PageSize.A5);
			} else if (pageSize.equals("A4")) {
				document = new Document(PageSize.A4);
			}

			PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(file));

			Font Font1 = new Font(Font.FontFamily.TIMES_ROMAN, 11, Font.NORMAL);
			Font Font3 = new Font(Font.FontFamily.TIMES_ROMAN, 14, Font.NORMAL);
			Font Font2 = new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.NORMAL);
			Font Font4 = new Font(Font.FontFamily.TIMES_ROMAN, 11, Font.BOLD);
			Font Font5 = new Font(Font.FontFamily.TIMES_ROMAN, 11, Font.BOLD);
			Font mainContent = new Font(Font.FontFamily.TIMES_ROMAN, 10, Font.NORMAL);
			Font mainContent1 = new Font(Font.FontFamily.TIMES_ROMAN, 10, Font.NORMAL);
			mainContent1.setColor(BaseColor.GRAY);
			/*
			 * Defining marathi font
			 */
			Font marathiFont = FontFactory.getFont(marathiFontDir, BaseFont.IDENTITY_H, BaseFont.EMBEDDED);

			document.open();

			/*
			 * Adding image
			 */
			PdfContentByte canvas = writer.getDirectContentUnder();

			/*
			 * Checking whether pageSize is A4 or A5, according to that background image is
			 * being set
			 */
			Image image;

			if (pageSize.equals("A5")) {
				if (A5ImagePath == null || A5ImagePath == "") {

					image = null;

				} else {

					if (A5ImagePath.isEmpty()) {
						image = null;
					} else {

						S3ObjectInputStream s3ObjectInputStream = s3
								.getObject(new GetObjectRequest(bucketName + "/" + s3LogoFilePath, A5ImagePath))
								.getObjectContent();

						IOUtils.copy(s3ObjectInputStream,
								new FileOutputStream(new File(realPath + "images/" + A5ImagePath)));

						image = Image.getInstance(realPath + "images/" + A5ImagePath);

						image.scaleToFit(PageSize.A5.getWidth(), PageSize.A5.getHeight());
						image.setAbsolutePosition(0, 0);

						canvas.saveState();
						PdfGState state = new PdfGState();
						canvas.setGState(state);
						canvas.addImage(image);
						canvas.restoreState();
					}

				}
			} else if (pageSize.equals("A4")) {
				if (A5ImagePath == null || A5ImagePath == "") {

					image = null;

				} else {

					if (A5ImagePath.isEmpty()) {
						image = null;
					} else {

						S3ObjectInputStream s3ObjectInputStream = s3
								.getObject(new GetObjectRequest(bucketName + "/" + s3LogoFilePath, A5ImagePath))
								.getObjectContent();

						IOUtils.copy(s3ObjectInputStream,
								new FileOutputStream(new File(realPath + "images/" + A5ImagePath)));

						image = Image.getInstance(realPath + "images/" + A5ImagePath);

						image.scaleToFit(PageSize.A4.getWidth(), PageSize.A4.getHeight());
						image.setAbsolutePosition(0, 0);

						canvas.saveState();
						PdfGState state = new PdfGState();
						canvas.setGState(state);
						canvas.addImage(image);
						canvas.restoreState();
					}

				}
			}

			/*
			 * Setting header
			 */
			document.addCreator("eDhanvantariLab");
			document.addTitle("Lab Test Bill");

			PdfPTable table = new PdfPTable(2);

			table.setFooterRows(1);
			table.setWidthPercentage(100);
			Rectangle rect = new Rectangle(270, 700);
			table.setWidthPercentage(new float[] { 70, 200 }, rect);

			PdfPCell cell = new PdfPCell(new Paragraph("Lab Bill Receipt", Font5));
			cell.setPaddingTop(70);
			cell.setPaddingBottom(5);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell.setUseBorderPadding(true);
			cell.setColspan(2);
			cell.setBorder(Rectangle.NO_BORDER);
			cell.setBorderWidthBottom(1f);
			cell.setBorderColorBottom(BaseColor.DARK_GRAY);
			cell.setBorderColor(BaseColor.WHITE);

			/*
			 * For Patient Name
			 */
			PdfPCell cell2 = new PdfPCell(new Paragraph("Patient Name", mainContent));
			cell2.setBorderWidth(0.01f);
			cell2.setPaddingBottom(5);
			cell2.setBorderWidthLeft(0.2f);
			cell2.setBorderColor(BaseColor.WHITE);

			PdfPCell cell3 = new PdfPCell(new Paragraph(patientName + "(" + clinicRegNo + ")", mainContent));
			cell3.setBorderWidth(0.2f);
			cell3.setPaddingBottom(5);
			cell3.setBorderColor(BaseColor.WHITE);

			/*
			 * adding all cell to the table to create tabular structure
			 */

			table.addCell(cell);
			// table.addCell(cell1);
			table.addCell(cell2);
			table.addCell(cell3);

			document.add(table);

			/*
			 * For Billing header
			 */
			PdfPTable table0 = new PdfPTable(3);
			table0.setWidthPercentage(100);
			Rectangle rect0 = new Rectangle(270, 700);
			table0.setWidthPercentage(new float[] { 100, 50, 120 }, rect0);

			// For blank space
			PdfPCell cell10 = new PdfPCell(new Paragraph("", Font2));
			cell10.setColspan(3);
			cell10.setPadding(0);
			cell10.setPaddingBottom(2);
			cell10.setBorderColor(BaseColor.WHITE);

			// For Receipt Date and time
			PdfPCell cell4 = new PdfPCell(new Paragraph("Receipt Date and Time: " + receiptDate, mainContent));
			cell4.setPaddingBottom(2);
			cell4.setColspan(2);
			cell4.setBorderWidthRight(0f);
			cell4.setBorderWidthLeft(0f);
			cell4.setBorderWidthTop(0f);
			cell4.setBorderWidthBottom(0f);
			cell4.setBorderColor(BaseColor.WHITE);

			// For receipt no.
			PdfPCell cell5 = new PdfPCell(new Paragraph("Receipt No.: " + receiptNo, mainContent));
			cell5.setBorderWidth(0.01f);
			cell5.setPaddingBottom(2);
			cell5.setHorizontalAlignment(Element.ALIGN_RIGHT);
			cell5.setBorderColor(BaseColor.WHITE);

			table0.addCell(cell10);
			table0.addCell(cell4);
			table0.addCell(cell5);
			// table0.addCell(cell6);

			document.add(table0);

			/*
			 * For Receipt details
			 */
			PdfPTable table2 = new PdfPTable(3);
			table2.setWidthPercentage(100);
			Rectangle rect02 = new Rectangle(270, 700);
			table2.setWidthPercentage(new float[] { 30, 180, 60 }, rect02);

			/*
			 * For blank space
			 */
			PdfPCell cell7 = new PdfPCell(new Paragraph("", Font2));
			cell7.setColspan(6);
			cell7.setBorderColor(BaseColor.WHITE);

			table2.addCell(cell7);

			/*
			 * Creating header titles for table
			 */
			// For Sr.No.
			PdfPCell cell8 = new PdfPCell(new Paragraph("Sr.No.", Font1));
			cell8.setBorderWidth(0.01f);
			cell8.setPaddingBottom(3);
			cell8.setBorderColor(BaseColor.GRAY);

			// For Product req.
			PdfPCell cell9 = new PdfPCell(new Paragraph("Tests", Font1));
			cell9.setBorderWidth(0.01f);
			cell9.setPaddingBottom(3);
			cell9.setBorderColor(BaseColor.GRAY);

			// For Amount
			PdfPCell cell162 = new PdfPCell(new Paragraph("Amount", Font1));
			cell162.setBorderWidth(0.01f);
			cell162.setPaddingBottom(3);
			cell162.setBorderColor(BaseColor.GRAY);

			table2.addCell(cell8);
			table2.addCell(cell9);
			// table2.addCell(cell10);
			table2.addCell(cell162);

			count = 1;

			for (PatientForm form : list) {

				if (form.getRate() == 0D) {
					continue;
				}

				// For Sr.No.
				PdfPCell cell17 = new PdfPCell(new Paragraph("" + count, mainContent));
				cell17.setBorderWidth(0.01f);
				cell17.setPaddingBottom(3);
				cell17.setHorizontalAlignment(Element.ALIGN_CENTER);
				cell17.setBorderColor(BaseColor.GRAY);

				// For Product req.
				PdfPCell cell18 = new PdfPCell(new Paragraph(form.getCBCProfileTest(), mainContent));
				cell18.setBorderWidth(0.01f);
				cell18.setPaddingBottom(3);
				cell18.setBorderColor(BaseColor.GRAY);

				// For Rate
				PdfPCell cell20 = new PdfPCell(new Paragraph("" + form.getRate(), mainContent));
				cell20.setBorderWidth(0.01f);
				cell20.setPaddingBottom(3);
				cell20.setHorizontalAlignment(Element.ALIGN_CENTER);
				cell20.setBorderColor(BaseColor.GRAY);

				count++;

				table2.addCell(cell17);
				table2.addCell(cell18);
				table2.addCell(cell20);

			}

			// For Consultation Charges Change
			PdfPCell cell23 = new PdfPCell(new Paragraph("Consultation Charges (Rs)", Font1));
			cell23.setBorderWidth(0.01f);
			cell23.setPaddingBottom(3);
			cell23.setColspan(2);
			cell23.setHorizontalAlignment(Element.ALIGN_RIGHT);
			cell23.setBorderColor(BaseColor.GRAY);

			// For Consultation Charges
			PdfPCell cell24 = new PdfPCell(new Paragraph("" + consultationCharges, Font1));
			cell24.setBorderWidth(0.01f);
			cell24.setPaddingBottom(3);
			cell24.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell24.setBorderColor(BaseColor.GRAY);

			// For total amount
			PdfPCell cell25 = new PdfPCell(new Paragraph("Total Amount", Font1));
			cell25.setBorderWidth(0.01f);
			cell25.setPaddingBottom(3);
			cell25.setColspan(2);
			cell25.setHorizontalAlignment(Element.ALIGN_RIGHT);
			cell25.setBorderColor(BaseColor.GRAY);

			// For total amount
			PdfPCell cell26 = new PdfPCell(new Paragraph("" + totalAmt, Font1));
			cell26.setBorderWidth(0.01f);
			cell26.setPaddingBottom(3);
			cell26.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell26.setBorderColor(BaseColor.GRAY);

			// For amount adjusted
			/*
			 * PdfPCell cell251 = new PdfPCell(new Paragraph("Concession, if any", Font1));
			 * cell251.setBorderWidth(0.01f); cell251.setPaddingBottom(3);
			 * cell251.setColspan(2); cell251.setHorizontalAlignment(Element.ALIGN_RIGHT);
			 * cell251.setBorderColor(BaseColor.GRAY);
			 */

			// For amount adjusted
			/*
			 * PdfPCell cell261 = new PdfPCell(new Paragraph("" + totalDiscount, Font1));
			 * cell261.setBorderWidth(0.01f); cell261.setPaddingBottom(3);
			 * cell261.setHorizontalAlignment(Element.ALIGN_CENTER);
			 * cell261.setBorderColor(BaseColor.GRAY);
			 */

			// For Net Amount
			/*
			 * PdfPCell cell27 = new PdfPCell(new Paragraph("Net Amount", Font1));
			 * cell27.setBorderWidth(0.01f); cell27.setPaddingBottom(3);
			 * cell27.setColspan(2); cell27.setHorizontalAlignment(Element.ALIGN_RIGHT);
			 * cell27.setBorderColor(BaseColor.GRAY);
			 */

			// For Net Amount
			/*
			 * PdfPCell cell28 = new PdfPCell(new Paragraph("" + netAmt, Font1));
			 * cell28.setBorderWidth(0.01f); cell28.setPaddingBottom(3);
			 * cell28.setHorizontalAlignment(Element.ALIGN_CENTER);
			 * cell28.setBorderColor(BaseColor.GRAY);
			 */

			// For Advance Payment
			PdfPCell cell29 = new PdfPCell(new Paragraph("Total Discount", Font1));
			cell29.setBorderWidth(0.01f);
			cell29.setPaddingBottom(3);
			cell29.setColspan(2);
			cell29.setHorizontalAlignment(Element.ALIGN_RIGHT);
			cell29.setBorderColor(BaseColor.GRAY);

			// For Advance Payment
			PdfPCell cell31 = new PdfPCell(new Paragraph("" + totalDiscount, Font1));
			cell31.setBorderWidth(0.01f);
			cell31.setPaddingBottom(3);
			cell31.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell31.setBorderColor(BaseColor.GRAY);

			// For NET Payment
			PdfPCell cell41 = new PdfPCell(new Paragraph("Net Amount", Font1));
			cell41.setBorderWidth(0.01f);
			cell41.setPaddingBottom(3);
			cell41.setColspan(2);
			cell41.setHorizontalAlignment(Element.ALIGN_RIGHT);
			cell41.setBorderColor(BaseColor.GRAY);
			cell41.setBorderWidthBottom(1f);

			// For NET Payment
			PdfPCell cell42 = new PdfPCell(new Paragraph("" + netAmt, Font1));
			cell42.setBorderWidth(0.01f);
			cell42.setPaddingBottom(3);
			cell42.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell42.setBorderColor(BaseColor.GRAY);
			cell42.setBorderWidthBottom(1f);

			table2.addCell(cell23);
			table2.addCell(cell24);
			table2.addCell(cell25);
			table2.addCell(cell26);
			// table2.addCell(cell251);
			// table2.addCell(cell261);
			// table2.addCell(cell27);
			// table2.addCell(cell28);
			table2.addCell(cell29);
			table2.addCell(cell31);
			table2.addCell(cell41);
			table2.addCell(cell42);

			if (balanceAmt != netAmt) {
				// For Advance AMT Payment
				PdfPCell cell43 = new PdfPCell(new Paragraph("Advance Payment", Font1));
				cell43.setBorderWidth(0.01f);
				cell43.setPaddingBottom(3);
				cell43.setColspan(2);
				cell43.setHorizontalAlignment(Element.ALIGN_RIGHT);
				cell43.setBorderColor(BaseColor.GRAY);
				cell43.setBorderWidthBottom(1f);

				// For Advance Amt Payment
				PdfPCell cell44 = new PdfPCell(new Paragraph("" + advAmt, Font1));
				cell44.setBorderWidth(0.01f);
				cell44.setPaddingBottom(3);
				cell44.setHorizontalAlignment(Element.ALIGN_CENTER);
				cell44.setBorderColor(BaseColor.GRAY);
				cell44.setBorderWidthBottom(1f);

				// For balance AMT Payment
				PdfPCell cell45 = new PdfPCell(new Paragraph("Balance Payment", Font1));
				cell45.setBorderWidth(0.01f);
				cell45.setPaddingBottom(3);
				cell45.setColspan(2);
				cell45.setHorizontalAlignment(Element.ALIGN_RIGHT);
				cell45.setBorderColor(BaseColor.GRAY);
				cell45.setBorderWidthBottom(1f);

				// For balance Amt Payment
				PdfPCell cell46 = new PdfPCell(new Paragraph("" + balanceAmt, Font1));
				cell46.setBorderWidth(0.01f);
				cell46.setPaddingBottom(3);
				cell46.setHorizontalAlignment(Element.ALIGN_CENTER);
				cell46.setBorderColor(BaseColor.GRAY);
				cell46.setBorderWidthBottom(1f);

				table2.addCell(cell43);
				table2.addCell(cell44);
				table2.addCell(cell45);
				table2.addCell(cell46);

			}

			document.add(table2);

			/*
			 * For remaining details
			 */
			PdfPTable table4 = new PdfPTable(4);
			table4.setWidthPercentage(100);
			Rectangle rect3 = new Rectangle(270, 700);
			table4.setWidthPercentage(new float[] { 65, 70, 65, 70 }, rect3);

			/*
			 * Checking what the payment type is, printing details
			 */
			if (paymentType != null && paymentType.contains("Cash")) {

				PdfPCell cell571 = new PdfPCell(new Paragraph("", mainContent));
				cell571.setBorderWidth(0.01f);
				cell571.setPaddingBottom(2);
				cell571.setPaddingTop(2);
				cell571.setColspan(4);
				cell571.setBorderColor(BaseColor.WHITE);

				/*
				 * For Payment Type
				 */
				PdfPCell cell57 = new PdfPCell(new Paragraph("Payment Type: ", mainContent));
				cell57.setBorderWidth(0.01f);
				cell57.setPaddingBottom(2);
				cell57.setPaddingTop(2);
				cell57.setBorderColor(BaseColor.WHITE);

				PdfPCell cell58 = new PdfPCell(new Paragraph(paymentType, mainContent));
				cell58.setBorderWidth(0.01f);
				cell58.setPaddingBottom(2);
				cell58.setPaddingTop(2);
				cell58.setColspan(3);
				cell58.setBorderColor(BaseColor.WHITE);

				PdfPCell cell61 = new PdfPCell(new Paragraph("", mainContent));
				cell61.setBorderWidth(0.01f);
				cell61.setColspan(4);
				cell61.setBorderWidthBottom(0.5f);
				cell61.setBorderColorBottom(BaseColor.GRAY);
				cell61.setBorderColor(BaseColor.WHITE);

				/*
				 * For Cash details
				 */
				// For cash paid
				/*
				 * PdfPCell cell62 = new PdfPCell(new Paragraph("Cash Paid", mainContent));
				 * cell62.setBorderWidth(0.01f); cell62.setPaddingBottom(2);
				 * cell62.setPaddingTop(2); cell62.setBorderColor(BaseColor.WHITE);
				 * 
				 * PdfPCell cell63 = new PdfPCell(new Paragraph("" + cashPaid, mainContent));
				 * cell63.setBorderWidth(0.01f); cell63.setPaddingBottom(2);
				 * cell63.setPaddingTop(2); cell63.setBorderColor(BaseColor.WHITE);
				 */

				// For Cash to return
				/*
				 * PdfPCell cell64 = new PdfPCell(new Paragraph("Cash To Return", mainContent));
				 * cell64.setBorderWidth(0.01f); cell64.setPaddingBottom(2);
				 * cell64.setPaddingTop(2); cell64.setBorderColor(BaseColor.WHITE);
				 * 
				 * PdfPCell cell65 = new PdfPCell(new Paragraph("" + cashToReturn,
				 * mainContent)); cell65.setBorderWidth(0.01f); cell65.setPaddingBottom(2);
				 * cell65.setPaddingTop(2); cell65.setBorderColor(BaseColor.WHITE);
				 */

				table4.addCell(cell571);
				table4.addCell(cell57);
				table4.addCell(cell58);
				table4.addCell(cell61);
				/*
				 * table4.addCell(cell62); table4.addCell(cell63); table4.addCell(cell64);
				 * table4.addCell(cell65);
				 */

			}
			if (paymentType.contains("Cheque")) {

				PdfPCell cell571 = new PdfPCell(new Paragraph("", mainContent));
				cell571.setBorderWidth(0.01f);
				cell571.setPaddingBottom(2);
				cell571.setPaddingTop(2);
				cell571.setColspan(4);
				cell571.setBorderColor(BaseColor.WHITE);

				/*
				 * For Payment Type
				 */
				PdfPCell cell57 = new PdfPCell(new Paragraph("Payment Type: ", mainContent));
				cell57.setBorderWidth(0.01f);
				cell57.setPaddingBottom(2);
				cell57.setPaddingTop(2);
				cell57.setBorderColor(BaseColor.WHITE);

				PdfPCell cell58 = new PdfPCell(new Paragraph(paymentType, mainContent));
				cell58.setBorderWidth(0.01f);
				cell58.setPaddingBottom(2);
				cell58.setPaddingTop(2);
				cell58.setColspan(3);
				cell58.setBorderColor(BaseColor.WHITE);

				PdfPCell cell61 = new PdfPCell(new Paragraph("", mainContent));
				cell61.setBorderWidth(0.01f);
				cell61.setColspan(4);
				cell61.setBorderWidthBottom(0.5f);
				cell61.setBorderColorBottom(BaseColor.GRAY);
				cell61.setBorderColor(BaseColor.WHITE);

				/*
				 * For cheque details
				 */
				// For cheque Issued By
				/*
				 * PdfPCell cell62 = new PdfPCell(new Paragraph("Cheque Issued By",
				 * mainContent)); cell62.setBorderWidth(0.01f); cell62.setPaddingBottom(2);
				 * cell62.setPaddingTop(2); cell62.setBorderColor(BaseColor.WHITE);
				 * 
				 * PdfPCell cell63 = new PdfPCell(new Paragraph(cheqIssuedBy, mainContent));
				 * cell63.setBorderWidth(0.01f); cell63.setPaddingBottom(2);
				 * cell63.setPaddingTop(2); cell63.setBorderColor(BaseColor.WHITE);
				 */

				// For cheque No
				/*
				 * PdfPCell cell64 = new PdfPCell(new Paragraph("Cheque No.", mainContent));
				 * cell64.setBorderWidth(0.01f); cell64.setPaddingBottom(2);
				 * cell64.setPaddingTop(2); cell64.setBorderColor(BaseColor.WHITE);
				 * 
				 * PdfPCell cell65 = new PdfPCell(new Paragraph(cheqNo, mainContent));
				 * cell65.setBorderWidth(0.01f); cell65.setPaddingBottom(2);
				 * cell65.setPaddingTop(2); cell65.setBorderColor(BaseColor.WHITE);
				 */

				// For cheque Bank Name
				/*
				 * PdfPCell cell66 = new PdfPCell(new Paragraph("Bank Name", mainContent));
				 * cell66.setBorderWidth(0.01f); cell66.setPaddingBottom(2);
				 * cell66.setPaddingTop(2); cell66.setBorderColor(BaseColor.WHITE);
				 * 
				 * PdfPCell cell67 = new PdfPCell(new Paragraph(bankName, mainContent));
				 * cell67.setBorderWidth(0.01f); cell67.setPaddingBottom(2);
				 * cell67.setPaddingTop(2); cell67.setBorderColor(BaseColor.WHITE);
				 */

				// For cheque Bank Branch
				/*
				 * PdfPCell cell68 = new PdfPCell(new Paragraph("Branch", mainContent));
				 * cell68.setBorderWidth(0.01f); cell68.setPaddingBottom(2);
				 * cell68.setPaddingTop(2); cell68.setBorderColor(BaseColor.WHITE);
				 * 
				 * PdfPCell cell69 = new PdfPCell(new Paragraph(bankBranch, mainContent));
				 * cell69.setBorderWidth(0.01f); cell69.setPaddingBottom(2);
				 * cell69.setPaddingTop(2); cell69.setBorderColor(BaseColor.WHITE);
				 */

				// For cheque Date
				/*
				 * PdfPCell cell70 = new PdfPCell(new Paragraph("Date", mainContent));
				 * cell70.setBorderWidth(0.01f); cell70.setPaddingBottom(2);
				 * cell70.setPaddingTop(2); cell70.setBorderColor(BaseColor.WHITE);
				 * 
				 * PdfPCell cell71 = new PdfPCell(new Paragraph(cheqDate, mainContent));
				 * cell71.setBorderWidth(0.01f); cell71.setPaddingBottom(2);
				 * cell71.setPaddingTop(2); cell71.setBorderColor(BaseColor.WHITE);
				 */

				// For cheque amount
				/*
				 * PdfPCell cell72 = new PdfPCell(new Paragraph("Amount", mainContent));
				 * cell72.setBorderWidth(0.01f); cell72.setPaddingBottom(2);
				 * cell72.setPaddingTop(2); cell72.setBorderColor(BaseColor.WHITE);
				 * 
				 * PdfPCell cell73 = new PdfPCell(new Paragraph("" + cheqAmt, mainContent));
				 * cell73.setBorderWidth(0.01f); cell73.setPaddingBottom(2);
				 * cell73.setPaddingTop(2); cell73.setBorderColor(BaseColor.WHITE);
				 * 
				 * PdfPCell cell74 = new PdfPCell(new Paragraph("", mainContent));
				 * cell74.setBorderWidth(0.01f); cell74.setColspan(4);
				 * cell74.setBorderWidthBottom(0.5f);
				 * cell74.setBorderColorBottom(BaseColor.GRAY);
				 * cell74.setBorderColor(BaseColor.WHITE);
				 */

				// For ref receipt No.
				/*
				 * PdfPCell cell75 = new PdfPCell(new Paragraph("Ref. Receipt No.",
				 * mainContent)); cell75.setBorderWidth(0.01f); cell75.setPaddingBottom(2);
				 * cell75.setPaddingTop(2); cell75.setColspan(3);
				 * cell75.setHorizontalAlignment(Element.ALIGN_RIGHT);
				 * cell75.setBorderColor(BaseColor.WHITE);
				 */

				// For ref receipt No.
				/*
				 * PdfPCell cell76 = new PdfPCell(new Paragraph(refReceiptNo, mainContent));
				 * cell76.setBorderWidth(0.01f); cell76.setPaddingBottom(2);
				 * cell76.setPaddingTop(2); cell76.setBorderColor(BaseColor.WHITE);
				 */

				table4.addCell(cell571);
				table4.addCell(cell57);
				table4.addCell(cell58);
				table4.addCell(cell61);
				/*
				 * table4.addCell(cell62); table4.addCell(cell63); table4.addCell(cell64);
				 * table4.addCell(cell65); table4.addCell(cell66); table4.addCell(cell67);
				 * table4.addCell(cell68); table4.addCell(cell69); table4.addCell(cell70);
				 * table4.addCell(cell71); table4.addCell(cell72); table4.addCell(cell73);
				 * table4.addCell(cell74);
				 */
				// table4.addCell(cell75);
				// table4.addCell(cell76);

			}
			if (paymentType.contains("Credit/Debit Card")) {

				PdfPCell cell571 = new PdfPCell(new Paragraph("", mainContent));
				cell571.setBorderWidth(0.01f);
				cell571.setPaddingBottom(2);
				cell571.setPaddingTop(2);
				cell571.setColspan(4);
				cell571.setBorderColor(BaseColor.WHITE);

				/*
				 * For Payment Type
				 */
				PdfPCell cell57 = new PdfPCell(new Paragraph("Payment Type: ", mainContent));
				cell57.setBorderWidth(0.01f);
				cell57.setPaddingBottom(2);
				cell57.setPaddingTop(2);
				cell57.setBorderColor(BaseColor.WHITE);

				PdfPCell cell58 = new PdfPCell(new Paragraph(paymentType, mainContent));
				cell58.setBorderWidth(0.01f);
				cell58.setPaddingBottom(2);
				cell58.setPaddingTop(2);
				cell58.setColspan(3);
				cell58.setBorderColor(BaseColor.WHITE);

				PdfPCell cell61 = new PdfPCell(new Paragraph("", mainContent));
				cell61.setBorderWidth(0.01f);
				cell61.setColspan(4);
				cell61.setBorderWidthBottom(0.5f);
				cell61.setBorderColorBottom(BaseColor.GRAY);
				cell61.setBorderColor(BaseColor.WHITE);

				/*
				 * For Credit/Debit card details
				 */
				// For card no
				/*
				 * PdfPCell cell62 = new PdfPCell(new Paragraph("Card No.", mainContent));
				 * cell62.setBorderWidth(0.01f); cell62.setPaddingBottom(2);
				 * cell62.setPaddingTop(2); cell62.setBorderColor(BaseColor.WHITE);
				 * 
				 * PdfPCell cell63 = new PdfPCell(new Paragraph("" + cardNo, mainContent));
				 * cell63.setBorderWidth(0.01f); cell63.setPaddingBottom(2);
				 * cell63.setPaddingTop(2); cell63.setBorderColor(BaseColor.WHITE);
				 */

				// For mobile no
				/*
				 * PdfPCell cell64 = new PdfPCell(new Paragraph("Mobile No.", mainContent));
				 * cell64.setBorderWidth(0.01f); cell64.setPaddingBottom(2);
				 * cell64.setPaddingTop(2); cell64.setBorderColor(BaseColor.WHITE);
				 * 
				 * PdfPCell cell65 = new PdfPCell(new Paragraph("" + mobileNo, mainContent));
				 * cell65.setBorderWidth(0.01f); cell65.setPaddingBottom(2);
				 * cell65.setPaddingTop(2); cell65.setBorderColor(BaseColor.WHITE);
				 */

				// For ref receipt No.

				/*
				 * PdfPCell cell75 = new PdfPCell(new Paragraph("Card Amount", mainContent));
				 * cell75.setBorderWidth(0.01f); cell75.setPaddingBottom(2);
				 * cell75.setPaddingTop(2); cell75.setBorderColor(BaseColor.WHITE);
				 * 
				 * // For ref receipt No.
				 * 
				 * PdfPCell cell76 = new PdfPCell(new Paragraph("" + cardAmt, mainContent));
				 * cell76.setBorderWidth(0.01f); cell76.setPaddingBottom(2);
				 * cell76.setPaddingTop(2); cell76.setBorderColor(BaseColor.WHITE);
				 */

				table4.addCell(cell571);
				table4.addCell(cell57);
				table4.addCell(cell58);
				table4.addCell(cell61);
				/*
				 * table4.addCell(cell62); table4.addCell(cell63); table4.addCell(cell75);
				 * table4.addCell(cell76); table4.addCell(cell64); table4.addCell(cell65);
				 */

			}

			if (paymentType.contains("Other")) {

				PdfPCell cell571 = new PdfPCell(new Paragraph("", mainContent));
				cell571.setBorderWidth(0.01f);
				cell571.setPaddingBottom(2);
				cell571.setPaddingTop(2);
				cell571.setColspan(4);
				cell571.setBorderColor(BaseColor.WHITE);

				/*
				 * For Payment Type
				 */
				PdfPCell cell57 = new PdfPCell(new Paragraph("Payment Type: ", mainContent));
				cell57.setBorderWidth(0.01f);
				cell57.setPaddingBottom(2);
				cell57.setPaddingTop(2);
				cell57.setBorderColor(BaseColor.WHITE);

				PdfPCell cell58 = new PdfPCell(new Paragraph(paymentType, mainContent));
				cell58.setBorderWidth(0.01f);
				cell58.setPaddingBottom(2);
				cell58.setPaddingTop(2);
				cell58.setColspan(3);
				cell58.setBorderColor(BaseColor.WHITE);

				PdfPCell cell61 = new PdfPCell(new Paragraph("", mainContent));
				cell61.setBorderWidth(0.01f);
				cell61.setColspan(4);
				cell61.setBorderWidthBottom(0.5f);
				cell61.setBorderColorBottom(BaseColor.GRAY);
				cell61.setBorderColor(BaseColor.WHITE);

				/*
				 * For Credit Note details
				 */
				// For credit note balance
				/*
				 * PdfPCell cell62 = new PdfPCell(new Paragraph("Other Type", mainContent));
				 * cell62.setBorderWidth(0.01f); cell62.setPaddingBottom(2);
				 * cell62.setPaddingTop(2); cell62.setBorderColor(BaseColor.WHITE);
				 * 
				 * PdfPCell cell63 = new PdfPCell(new Paragraph("" + otherType, mainContent));
				 * cell63.setBorderWidth(0.01f); cell63.setPaddingBottom(2);
				 * cell63.setPaddingTop(2); //cell63.setColspan(3);
				 * cell63.setBorderColor(BaseColor.WHITE);
				 */

				// For ref receipt No.

				/*
				 * PdfPCell cell75 = new PdfPCell(new Paragraph("Other Amount", mainContent));
				 * cell75.setBorderWidth(0.01f); cell75.setPaddingBottom(2);
				 * cell75.setPaddingTop(2); cell75.setBorderColor(BaseColor.WHITE);
				 * 
				 * // For ref receipt No.
				 * 
				 * PdfPCell cell76 = new PdfPCell(new Paragraph("" + otherAmt, mainContent));
				 * cell76.setBorderWidth(0.01f); cell76.setPaddingBottom(2);
				 * cell76.setPaddingTop(2); cell76.setBorderColor(BaseColor.WHITE);
				 */

				table4.addCell(cell571);
				table4.addCell(cell57);
				table4.addCell(cell58);
				table4.addCell(cell61);
				/*
				 * table4.addCell(cell62); table4.addCell(cell63); table4.addCell(cell75);
				 * table4.addCell(cell76);
				 */

			}

			/*
			 * For receipt by
			 */
			PdfPCell cell81 = new PdfPCell(new Paragraph("Receipt Given By", mainContent));
			cell81.setBorderWidth(0.01f);
			cell81.setPaddingBottom(2);
			cell81.setPaddingTop(25);
			cell81.setBorderColor(BaseColor.WHITE);

			PdfPCell cell82 = new PdfPCell(new Paragraph(fullName, mainContent));
			cell82.setBorderWidth(0.01f);
			cell82.setPaddingBottom(2);
			cell82.setPaddingTop(25);
			cell82.setBorderColor(BaseColor.WHITE);

			/*
			 * For Receivers Signature
			 */
			PdfPCell cell83 = new PdfPCell(new Paragraph("Receivers Signature", mainContent));
			cell83.setBorderWidth(0.01f);
			cell83.setPaddingBottom(2);
			cell83.setPaddingTop(25);
			cell83.setColspan(2);
			cell83.setPaddingRight(20);
			cell83.setHorizontalAlignment(Element.ALIGN_RIGHT);
			cell83.setBorderColor(BaseColor.WHITE);

			table4.addCell(cell81);
			table4.addCell(cell82);
			table4.addCell(cell83);

			document.add(table4);

			document.close();

			System.out.println("Successfully written and generated lab Billing PDF Report");

			status = "success";

			resultSet3.close();
			preparedStatement3.close();

			resultSet4.close();
			preparedStatement4.close();

			resultSet2.close();
			preparedStatement2.close();

			resultSet1.close();
			preparedStatement1.close();

			connection.close();

		} catch (Exception exception) {

			exception.printStackTrace();
			status = "error";
		}
		return status;
	}

	public String convertLabReportPDF(int patientID, int visitID, String realPath, String pdfOutFIleName, int clinicID,
			int mdDoctorID, int practiceID, String fullName, AmazonS3 s3, String s3LogoFilePath, String bucketName) {

		System.out.println("inside lab report pdf");
		int count = 1;

		String status = null;

		PatientDAOInf patientDAOInf = new PatientDAOImpl();

		ConfigXMLUtil XMLUtil = new ConfigXMLUtil();

		// String logoPath = XMLUtil.getLogoFilePath();

		RegistrationDAOinf registrationDAOinf = new RegistrationDAOImpl();

		List<PatientForm> patientList = patientDAOInf.retrieveLabPatientDetails(patientID, visitID, clinicID, 0);

		LinkedHashMap<String, String> singleLabTestMap = patientDAOInf.retrieveSingleLabTestListByVisitID(visitID);

		// Retriving group lab test from LabInvestigations tables for the respective
		// visitID
		LinkedHashMap<String, LinkedHashMap<String, String>> groupMap = patientDAOInf
				.retrieveGroupLabTestByVisitID(visitID, practiceID);

		ConfigurationUtil configurationUtil = new ConfigurationUtil();

		String patientName = "";
		String age = "";
		String gender = "";
		String emailID = "";
		String mobile = "";
		String collectionDate = "";
		String collectionTime = "";
		String sampleID = "";
		String regNo = "";
		String referredBy = "";
		String comment = "";
		String signature = "";

		try {
			String rangelevelValue = "3#5-50$4#5-426$5#18-7,340$6#1,080-56,500$7-8#7,650-229,000$9-12#25,700-288,000$13-16#13,300-254,000$17-24#4,060-165,400$25-40#3,640-117,000";

			String[] rangelevel = rangelevelValue.split("\\$");
			System.out.println("rangelevel: " + rangelevel.length);

			for (PatientForm form : patientList) {
				patientName = form.getFirstName() + " " + form.getMiddleName() + " " + form.getLastName();
				age = form.getAge();
				gender = form.getGender();
				mobile = form.getMobile();
				emailID = form.getEmailID();
				regNo = form.getRegistrationNo();
				collectionDate = form.getFirstVisitDate();
				collectionTime = form.getVisitFromTime();
				sampleID = form.getSampleID();
				referredBy = form.getReferredBy();
				comment = form.getMedicalNotes();
			}

			// Retrieving MD Details by PracticeID
			HashMap<String, String> MDMap = registrationDAOinf.retrieveMDDetails(ActivityStatus.MDDOCTORIDBDP,
					collectionDate);

			// File SignatureFile = new File(logoPath + File.separator +
			// MDMap.get("MDSignature"));

			signature = MDMap.get("MDSignature");

			Image signatureImg = null;

			if (signature == "" || signature == null) {
				signatureImg = null;
			} else if (signature.isEmpty()) {
				signatureImg = null;
			} else {

				S3ObjectInputStream s3ObjectInputStream = s3
						.getObject(new GetObjectRequest(bucketName + "/" + s3LogoFilePath, signature))
						.getObjectContent();

				IOUtils.copy(s3ObjectInputStream, new FileOutputStream(new File(realPath + "images/" + signature)));

				signatureImg = Image.getInstance(realPath + "images/" + signature);
			}

			/*
			 * Declaring variable which stores the location for FreeSans.ttf file to print
			 * marathi text on pdf
			 */
			String marathiFontDir = realPath + "fonts/FreeSans.ttf";

			ConfigurationUtil configXMLUtil = new ConfigurationUtil();

			/*
			 * Getting image path from XML
			 */
			String A5ImagePath = configXMLUtil.getLetterHeadImage();

			/*
			 * Getting page size from XMl
			 */
			// String pageSize = configXMLUtil.getPageSize();
			String pageSize = "A4";

			/*
			 * Setting path to store PDF file
			 */
			File file = new File(realPath + pdfOutFIleName);
			/*
			 * Creating Document for PDF
			 */
			Document document = null;

			/*
			 * Checking whether pageSize tag in XMl contains A5 or A4, according to that
			 * setting PDF page size
			 */
			if (pageSize.equals("A5")) {
				document = new Document(PageSize.A5);
			} else if (pageSize.equals("A4")) {
				document = new Document(PageSize.A4);
			}

			PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(file));

			Font Font1 = new Font(Font.FontFamily.TIMES_ROMAN, 10, Font.NORMAL);
			Font Font3 = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.BOLD);
			Font Font2 = new Font(Font.FontFamily.TIMES_ROMAN, 11, Font.BOLD | Font.UNDERLINE);
			Font Font4 = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.BOLD);
			Font Font5 = new Font(Font.FontFamily.TIMES_ROMAN, 11, Font.BOLD);
			Font Font6 = new Font(Font.FontFamily.TIMES_ROMAN, 11, Font.BOLDITALIC | Font.UNDERLINE);
			Font mainContent = new Font(Font.FontFamily.TIMES_ROMAN, 11, Font.NORMAL);
			Font mainContent_abnormal = new Font(Font.FontFamily.TIMES_ROMAN, 11, Font.BOLD);
			Font mainContent1 = new Font(Font.FontFamily.TIMES_ROMAN, 10, Font.NORMAL);
			mainContent1.setColor(BaseColor.GRAY);
			/*
			 * Defining marathi font
			 */
			Font marathiFont = FontFactory.getFont(marathiFontDir, BaseFont.IDENTITY_H, BaseFont.EMBEDDED);

			document.open();

			// Image signatureImg = Image.getInstance(SignatureFile.getAbsolutePath());

			/*
			 * Adding image
			 */
			PdfContentByte canvas = writer.getDirectContentUnder();

			/*
			 * Checking whether pageSize is A4 or A5, according to that background image is
			 * being set
			 */
			Image image;

			if (pageSize.equals("A5")) {
				if (A5ImagePath == null || A5ImagePath == "") {

					image = null;

				} else {

					if (A5ImagePath.isEmpty()) {
						image = null;
					} else {

						S3ObjectInputStream s3ObjectInputStream = s3
								.getObject(new GetObjectRequest(bucketName + "/" + s3LogoFilePath, A5ImagePath))
								.getObjectContent();

						IOUtils.copy(s3ObjectInputStream,
								new FileOutputStream(new File(realPath + "images/" + A5ImagePath)));

						image = Image.getInstance(realPath + "images/" + A5ImagePath);

						image.scaleToFit(PageSize.A5.getWidth(), PageSize.A5.getHeight());
						image.setAbsolutePosition(0, 0);

						canvas.saveState();
						PdfGState state = new PdfGState();
						canvas.setGState(state);
						canvas.addImage(image);
						canvas.restoreState();
					}

				}
			} else if (pageSize.equals("A4")) {
				if (A5ImagePath == null || A5ImagePath == "") {

					image = null;

				} else {

					if (A5ImagePath.isEmpty()) {
						image = null;
					} else {

						S3ObjectInputStream s3ObjectInputStream = s3
								.getObject(new GetObjectRequest(bucketName + "/" + s3LogoFilePath, A5ImagePath))
								.getObjectContent();

						IOUtils.copy(s3ObjectInputStream,
								new FileOutputStream(new File(realPath + "images/" + A5ImagePath)));

						image = Image.getInstance(realPath + "images/" + A5ImagePath);

						image.scaleToFit(PageSize.A4.getWidth(), PageSize.A4.getHeight());
						image.setAbsolutePosition(0, 0);

						canvas.saveState();
						PdfGState state = new PdfGState();
						canvas.setGState(state);
						canvas.addImage(image);
						canvas.restoreState();
					}

				}
			}

			/*
			 * Setting header
			 */
			document.addCreator("eDhanvantariLab");
			document.addTitle("Lab Report");

			PdfPTable table = new PdfPTable(4);

			table.setFooterRows(1);
			table.setWidthPercentage(100);
			Rectangle rect = new Rectangle(270, 700);
			table.setWidthPercentage(new float[] { 55, 85, 55, 85 }, rect);

			PdfPCell cell = new PdfPCell(new Paragraph("", Font3));
			cell.setPaddingTop(100);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell.setUseBorderPadding(true);
			cell.setColspan(4);
			cell.setBorder(Rectangle.NO_BORDER);
			cell.setBorderWidthBottom(1f);
			cell.setBorderColorBottom(BaseColor.DARK_GRAY);
			cell.setBorder(Rectangle.NO_BORDER);
			cell.setBorderColor(BaseColor.WHITE);

			/*
			 * For patient name
			 */
			PdfPCell cell6 = new PdfPCell(new Paragraph("Patient Name", Font5));
			cell6.setBorderWidth(0.01f);
			cell6.setPaddingBottom(5);
			cell6.setBorderWidthLeft(0.2f);
			cell6.setBorderColor(BaseColor.WHITE);

			PdfPCell cell7 = new PdfPCell(new Paragraph(patientName, mainContent));
			cell7.setBorderWidth(0.2f);
			cell7.setPaddingBottom(5);
			cell7.setBorderColor(BaseColor.WHITE);

			/*
			 * For Medical Reg. No.
			 */
			PdfPCell cell10 = new PdfPCell(new Paragraph("Medical Reg. No.", Font5));
			cell10.setBorderWidth(0.01f);
			cell10.setPaddingBottom(5);
			cell10.setBorderWidthLeft(0.2f);
			cell10.setBorderColor(BaseColor.WHITE);

			PdfPCell cell11 = new PdfPCell(new Paragraph(regNo, mainContent));
			cell11.setBorderWidth(0.2f);
			cell11.setPaddingBottom(5);
			cell11.setBorderColor(BaseColor.WHITE);

			/*
			 * For Age and Gender
			 */
			PdfPCell cell12 = new PdfPCell(new Paragraph("Age/Gender", Font5));
			cell12.setBorderWidth(0.01f);
			cell12.setPaddingBottom(5);
			cell12.setBorderWidthLeft(0.2f);
			cell12.setBorderColor(BaseColor.WHITE);

			PdfPCell cell13 = new PdfPCell(new Paragraph(age + "/" + gender, mainContent));
			cell13.setBorderWidth(0.2f);
			cell13.setPaddingBottom(5);
			cell13.setBorderColor(BaseColor.WHITE);

			/*
			 * For Mobile
			 */
			PdfPCell cell14 = new PdfPCell(new Paragraph("Mobile No.", Font5));
			cell14.setBorderWidth(0.01f);
			cell14.setPaddingBottom(5);
			cell14.setBorderWidthLeft(0.2f);
			cell14.setBorderColor(BaseColor.WHITE);

			PdfPCell cell15 = new PdfPCell(new Paragraph(mobile, mainContent));
			cell15.setBorderWidth(0.2f);
			cell15.setPaddingBottom(5);
			cell15.setBorderColor(BaseColor.WHITE);

			/*
			 * For collection date
			 */
			PdfPCell cell18 = new PdfPCell(new Paragraph("Collection Date", Font5));
			cell18.setBorderWidth(0.01f);
			cell18.setPaddingBottom(5);
			cell18.setBorderWidthLeft(0.2f);
			cell18.setBorderColor(BaseColor.WHITE);

			PdfPCell cell19 = new PdfPCell(new Paragraph(collectionDate, mainContent));
			cell19.setBorderWidth(0.2f);
			cell19.setPaddingBottom(5);
			cell19.setBorderColor(BaseColor.WHITE);

			/*
			 * For Collection time
			 */
			PdfPCell cell20 = new PdfPCell(new Paragraph("Collection Time", Font5));
			cell20.setBorderWidth(0.01f);
			cell20.setPaddingBottom(5);
			cell20.setBorderWidthLeft(0.2f);
			cell20.setBorderColor(BaseColor.WHITE);

			PdfPCell cell21 = new PdfPCell(new Paragraph(collectionTime, mainContent));
			cell21.setBorderWidth(0.2f);
			cell21.setPaddingBottom(5);
			cell21.setBorderColor(BaseColor.WHITE);

			/*
			 * For Sample ID
			 */
			PdfPCell cell22 = new PdfPCell(new Paragraph("Sample ID", Font5));
			cell22.setBorderWidth(0.01f);
			cell22.setPaddingBottom(15);
			cell22.setBorderWidthLeft(0.2f);
			cell22.setBorderColor(BaseColor.WHITE);

			PdfPCell cell23 = new PdfPCell(new Paragraph(sampleID, mainContent));
			cell23.setBorderWidth(0.2f);
			cell23.setPaddingBottom(15);
			cell23.setBorderColor(BaseColor.WHITE);

			/*
			 * For Referred by
			 */
			PdfPCell cell221 = new PdfPCell(new Paragraph("Referred By", Font5));
			cell221.setBorderWidth(0.01f);
			cell221.setPaddingBottom(15);
			cell221.setBorderWidthLeft(0.2f);
			cell221.setBorder(Rectangle.NO_BORDER);
			cell221.setBorderColor(BaseColor.WHITE);

			PdfPCell cell231 = new PdfPCell(new Paragraph(referredBy, mainContent));
			cell231.setBorderWidth(0.2f);
			cell231.setPaddingBottom(15);
			cell231.setBorder(Rectangle.NO_BORDER);
			cell231.setBorderColor(BaseColor.WHITE);

			PdfPCell cell232 = new PdfPCell(new Paragraph("", mainContent));
			cell232.setBorderWidth(0.2f);
			cell232.setColspan(4);
			cell232.setBorderColorTop(BaseColor.BLACK);
			cell232.setBorderColorBottom(BaseColor.WHITE);
			cell232.setBorderColorLeft(BaseColor.WHITE);
			cell232.setBorderColorRight(BaseColor.WHITE);
			cell232.setBorderWidthLeft(0);
			cell232.setBorderWidthRight(0);

			/*
			 * adding all cell to the table to create tabular structure
			 */

			table.addCell(cell);
			table.addCell(cell6);
			table.addCell(cell7);
			table.addCell(cell10);
			table.addCell(cell11);
			table.addCell(cell12);
			table.addCell(cell13);
			table.addCell(cell14);
			table.addCell(cell15);
			table.addCell(cell18);
			table.addCell(cell19);
			table.addCell(cell20);
			table.addCell(cell21);
			table.addCell(cell22);
			table.addCell(cell23);
			table.addCell(cell221);
			table.addCell(cell231);
			table.addCell(cell232);

			document.add(table);

			int groupCheck = 0;

			String tests = "HIV,HBSAG,HCV,ENTROCHEK (TYPHOID),LEPTO,VDRL,Blood Group,MP ANTIGEN,PS FOR MP,DENGU";

			/*
			 * Check whether group lab tests are added or not, by checking whether
			 * groupTestMap size is > 0, if so then only print into PDF else do not print
			 * the headers into PDF
			 */
			System.out.println("groupMap" + groupMap.size());
			if (groupMap.size() > 0) {

				Set<String> keySet = groupMap.keySet();

				for (String groupName : keySet) {

					/*
					 * For Receipt details
					 */
					PdfPTable table2 = new PdfPTable(3);
					table2.setWidthPercentage(100);
					Rectangle rect02 = new Rectangle(270, 700);
					table2.setWidthPercentage(new float[] { 120, 75, 75 }, rect02);

					System.out.println("profile test check.." + groupCheck);

					if (groupCheck > 0) {
						document.newPage();

						PdfPTable table3 = new PdfPTable(4);

						table3.setFooterRows(1);
						table3.setWidthPercentage(100);
						Rectangle rect3 = new Rectangle(270, 700);
						table.setWidthPercentage(new float[] { 50, 85, 50, 85 }, rect3);

						PdfPCell cell00 = new PdfPCell(new Paragraph("", Font3));
						cell00.setPaddingTop(100);
						cell00.setHorizontalAlignment(Element.ALIGN_CENTER);
						cell00.setUseBorderPadding(true);
						cell00.setColspan(4);
						cell00.setBorder(Rectangle.NO_BORDER);
						cell00.setBorderWidthBottom(1f);
						cell00.setBorderColorBottom(BaseColor.DARK_GRAY);
						cell00.setBorder(Rectangle.NO_BORDER);
						cell00.setBorderColor(BaseColor.WHITE);

						/*
						 * For patient name
						 */
						PdfPCell cell600 = new PdfPCell(new Paragraph("Patient Name", Font5));
						cell600.setBorderWidth(0.01f);
						cell600.setPaddingBottom(5);
						cell600.setBorderWidthLeft(0.2f);
						cell600.setBorderColor(BaseColor.WHITE);

						PdfPCell cell700 = new PdfPCell(new Paragraph(patientName, mainContent));
						cell700.setBorderWidth(0.2f);
						cell700.setPaddingBottom(5);
						cell700.setBorderColor(BaseColor.WHITE);

						/*
						 * For Gender
						 */
						PdfPCell cell1000 = new PdfPCell(new Paragraph("Medical Reg. No.", Font5));
						cell1000.setBorderWidth(0.01f);
						cell1000.setPaddingBottom(5);
						cell1000.setBorderWidthLeft(0.2f);
						cell1000.setBorderColor(BaseColor.WHITE);

						PdfPCell cell1100 = new PdfPCell(new Paragraph(regNo, mainContent));
						cell1100.setBorderWidth(0.2f);
						cell1100.setPaddingBottom(5);
						cell1100.setBorderColor(BaseColor.WHITE);

						/*
						 * For age
						 */
						PdfPCell cell1200 = new PdfPCell(new Paragraph("Age/Gender", Font5));
						cell1200.setBorderWidth(0.01f);
						cell1200.setPaddingBottom(5);
						cell1200.setBorderWidthLeft(0.2f);
						cell1200.setBorderColor(BaseColor.WHITE);

						PdfPCell cell1300 = new PdfPCell(new Paragraph(age + "/" + gender, mainContent));
						cell1300.setBorderWidth(0.2f);
						cell1300.setPaddingBottom(5);
						cell1300.setBorderColor(BaseColor.WHITE);

						/*
						 * For Mobile
						 */
						PdfPCell cell1400 = new PdfPCell(new Paragraph("Mobile No.", Font5));
						cell1400.setBorderWidth(0.01f);
						cell1400.setPaddingBottom(5);
						cell1400.setBorderWidthLeft(0.2f);
						cell1400.setBorderColor(BaseColor.WHITE);

						PdfPCell cell1500 = new PdfPCell(new Paragraph(mobile, mainContent));
						cell1500.setBorderWidth(0.2f);
						cell1500.setPaddingBottom(5);
						cell1500.setBorderColor(BaseColor.WHITE);

						/*
						 * For collection date
						 */
						PdfPCell cell1800 = new PdfPCell(new Paragraph("Collection Date", Font5));
						cell1800.setBorderWidth(0.01f);
						cell1800.setPaddingBottom(5);
						cell1800.setBorderWidthLeft(0.2f);
						cell1800.setBorderColor(BaseColor.WHITE);

						PdfPCell cell1900 = new PdfPCell(new Paragraph(collectionDate, mainContent));
						cell1900.setBorderWidth(0.2f);
						cell1900.setPaddingBottom(5);
						cell1900.setBorderColor(BaseColor.WHITE);

						/*
						 * For Collection time
						 */
						PdfPCell cell2000 = new PdfPCell(new Paragraph("Collection Time", Font5));
						cell2000.setBorderWidth(0.01f);
						cell2000.setPaddingBottom(5);
						cell2000.setBorderWidthLeft(0.2f);
						cell2000.setBorderColor(BaseColor.WHITE);

						PdfPCell cell2100 = new PdfPCell(new Paragraph(collectionTime, mainContent));
						cell2100.setBorderWidth(0.2f);
						cell2100.setPaddingBottom(5);
						cell2100.setBorderColor(BaseColor.WHITE);

						/*
						 * For Sample ID
						 */
						PdfPCell cell2200 = new PdfPCell(new Paragraph("Sample ID", Font5));
						cell2200.setBorderWidth(0.01f);
						cell2200.setPaddingBottom(15);
						cell2200.setBorderWidthLeft(0.2f);
						cell2200.setBorderColor(BaseColor.WHITE);

						PdfPCell cell2300 = new PdfPCell(new Paragraph(sampleID, mainContent));
						cell2300.setBorderWidth(0.2f);
						cell2300.setPaddingBottom(15);
						cell2300.setBorderColor(BaseColor.WHITE);

						/*
						 * For Referred by
						 */
						PdfPCell cell22100 = new PdfPCell(new Paragraph("Referred By", Font5));
						cell22100.setBorderWidth(0.01f);
						cell22100.setPaddingBottom(15);
						cell22100.setBorderWidthLeft(0.2f);
						cell22100.setBorder(Rectangle.NO_BORDER);
						cell22100.setBorderColor(BaseColor.WHITE);

						PdfPCell cell23100 = new PdfPCell(new Paragraph(referredBy, mainContent));
						cell23100.setBorderWidth(0.2f);
						cell23100.setPaddingBottom(15);
						cell23100.setBorder(Rectangle.NO_BORDER);
						cell23100.setBorderColor(BaseColor.WHITE);

						PdfPCell cell23200 = new PdfPCell(new Paragraph("", mainContent));
						cell23200.setBorderWidth(0.2f);
						cell23200.setColspan(4);
						cell23200.setBorderColorTop(BaseColor.BLACK);
						cell23200.setBorderColorBottom(BaseColor.WHITE);
						cell23200.setBorderColorLeft(BaseColor.WHITE);
						cell23200.setBorderColorRight(BaseColor.WHITE);
						cell23200.setBorderWidthLeft(0);
						cell23200.setBorderWidthRight(0);

						/*
						 * adding all cell to the table to create tabular structure
						 */

						table3.addCell(cell00);
						table3.addCell(cell600);
						table3.addCell(cell700);
						table3.addCell(cell1000);
						table3.addCell(cell1100);
						table3.addCell(cell1200);
						table3.addCell(cell1300);
						table3.addCell(cell1400);
						table3.addCell(cell1500);
						table3.addCell(cell1800);
						table3.addCell(cell1900);
						table3.addCell(cell2000);
						table3.addCell(cell2100);
						table3.addCell(cell2200);
						table3.addCell(cell2300);
						table3.addCell(cell22100);
						table3.addCell(cell23100);
						table3.addCell(cell23200);

						document.add(table3);
					}

					groupCheck++;

					// For test profile name i.e., group name
					PdfPCell cell026 = new PdfPCell(new Paragraph(groupName, Font4));
					cell026.setBorderWidth(0.5f);
					cell026.setPaddingBottom(8);
					cell026.setPaddingTop(15);
					cell026.setColspan(3);
					cell026.setHorizontalAlignment(Element.ALIGN_CENTER);
					cell026.setBorderColor(BaseColor.WHITE);

					// For test
					PdfPCell cell26 = new PdfPCell(new Paragraph("TEST DONE", Font6));
					cell26.setBorderWidth(0.5f);
					cell26.setPaddingBottom(8);
					cell26.setBorderColor(BaseColor.WHITE);

					// For normal range
					PdfPCell cell27 = new PdfPCell(new Paragraph("RESULT", Font6));
					cell27.setBorderWidth(0.5f);
					cell27.setPaddingBottom(8);
					cell27.setBorderColor(BaseColor.WHITE);

					// For observed value
					PdfPCell cell28 = new PdfPCell(new Paragraph("NORMAL RANGE", Font6));
					cell28.setBorderWidth(0.5f);
					cell28.setPaddingBottom(8);
					cell28.setBorderColor(BaseColor.WHITE);

					// table2.addCell(cell25);
					table2.addCell(cell026);
					table2.addCell(cell26);
					table2.addCell(cell27);
					table2.addCell(cell28);

					count = 1;

					LinkedHashMap<String, String> subMap = groupMap.get(groupName);

					// LinkedHashMap<String, String> sortedSubMap =
					// configurationUtil.sortStringHashMap(subMap);

					Set<String> subKeySet = subMap.keySet();

					for (String subGroup : subKeySet) {

						if (subGroup == null) {
							// For test
							PdfPCell cell30111 = new PdfPCell(new Paragraph("", Font2));
							cell30111.setBorderWidth(0.5f);
							cell30111.setPaddingBottom(5);
							cell30111.setColspan(3);
							cell30111.setBorderColor(BaseColor.WHITE);

							table2.addCell(cell30111);
						} else if (subGroup.equals("null")) {
							// For test
							PdfPCell cell30111 = new PdfPCell(new Paragraph("", Font2));
							cell30111.setBorderWidth(0.5f);
							cell30111.setPaddingBottom(5);
							cell30111.setColspan(3);
							cell30111.setBorderColor(BaseColor.WHITE);

							table2.addCell(cell30111);
						} else {
							// For test
							PdfPCell cell30111 = new PdfPCell(new Paragraph(subGroup, Font2));
							cell30111.setBorderWidth(0.5f);
							cell30111.setPaddingBottom(5);
							cell30111.setColspan(3);
							cell30111.setBorderColor(BaseColor.WHITE);

							table2.addCell(cell30111);
						}

						String groupTestsArray[] = subMap.get(subGroup).split("___");

						for (int i = 0; i < groupTestsArray.length; i++) {

							String testArray[] = groupTestsArray[i].split("===");

							String test = testArray[0];

							String normalRange = testArray[3].trim();

							String quantitativeValueStr = testArray[2];

							String qualitativeValueStr = testArray[1];

							String result = "";

							if (qualitativeValueStr == null || qualitativeValueStr == "") {

								result = quantitativeValueStr;

							} else if (qualitativeValueStr.isEmpty()) {

								result = quantitativeValueStr;

							} else {
								result = qualitativeValueStr;
							}

							if (result.equals("NA")) {
								continue;
							} else {

								if (groupName.equals("PTINR") || groupName.equals("Prothrombin Time")) {

									// For test
									PdfPCell cell30 = new PdfPCell(new Paragraph(test, mainContent));
									cell30.setBorderWidth(0.5f);
									cell30.setPaddingBottom(5);
									// cell30.setHorizontalAlignment(Element.ALIGN_CENTER);
									cell30.setBorderColor(BaseColor.WHITE);

									try {

										double resultValue = Double.parseDouble(result);

										if ((resultValue % 1 == 0)) {
											result = "" + (int) resultValue;
										}

									} catch (Exception exception) {
										result = result;
									}

									PdfPCell cell31 = new PdfPCell(new Paragraph("" + result, mainContent));
									cell31.setBorderWidth(0.5f);
									cell31.setPaddingBottom(5);
									// cell31.setHorizontalAlignment(Element.ALIGN_CENTER);
									cell31.setBorderColor(BaseColor.WHITE);

									// For observed value
									PdfPCell cell32 = new PdfPCell(new Paragraph("", mainContent));
									cell32.setBorderWidth(0.5f);
									cell32.setPaddingBottom(5);
									// cell32.setHorizontalAlignment(Element.ALIGN_CENTER);
									cell32.setBorderColor(BaseColor.WHITE);

									count++;

									// table2.addCell(cell29);
									table2.addCell(cell30);
									table2.addCell(cell31);
									table2.addCell(cell32);

								} else {

									// For test
									PdfPCell cell30 = new PdfPCell(new Paragraph(test, mainContent));
									cell30.setBorderWidth(0.5f);
									cell30.setPaddingBottom(5);
									// cell30.setHorizontalAlignment(Element.ALIGN_CENTER);
									cell30.setBorderColor(BaseColor.WHITE);

									// For normal range
									PdfPCell cell31 = null;

									cell31 = new PdfPCell(new Paragraph("" + result, mainContent));
									cell31.setBorderWidth(0.5f);
									cell31.setPaddingBottom(5);
									// cell31.setHorizontalAlignment(Element.ALIGN_CENTER);
									cell31.setBorderColor(BaseColor.WHITE);

									// checking whether to include of exclude the normal values for priting by
									// checking whether the isExcludeFlag is off or on.
									boolean excludeFlag = patientDAOInf.isNormalValueExclude(test, groupName);

									boolean showNormalRange = patientDAOInf.showNormalRange(test, groupName);

									if (excludeFlag) {

										// For observed value
										PdfPCell cell32 = new PdfPCell(new Paragraph("", mainContent));
										cell32.setBorderWidth(0.5f);
										cell32.setPaddingBottom(5);
										// cell32.setHorizontalAlignment(Element.ALIGN_CENTER);
										cell32.setBorderColor(BaseColor.WHITE);

										count++;

										// table2.addCell(cell29);
										table2.addCell(cell30);
										table2.addCell(cell31);
										table2.addCell(cell32);

									} else {

										if (showNormalRange) {

											// retrieving normal range description for the test if any
											String normalRangeDesc = patientDAOInf.retrieveTestNormalRangeDesc(test,
													groupName);

											// For observed value
											PdfPCell cell32 = new PdfPCell(
													new Paragraph("" + normalRangeDesc, mainContent));
											cell32.setBorderWidth(0.5f);
											cell32.setPaddingBottom(5);
											// cell32.setHorizontalAlignment(Element.ALIGN_CENTER);
											cell32.setBorderColor(BaseColor.WHITE);

											count++;

											// table2.addCell(cell29);
											table2.addCell(cell30);
											table2.addCell(cell31);
											table2.addCell(cell32);

										} else {

											// For observed value
											PdfPCell cell32 = new PdfPCell(
													new Paragraph("" + normalRange, mainContent));
											cell32.setBorderWidth(0.5f);
											cell32.setPaddingBottom(5);
											// cell32.setHorizontalAlignment(Element.ALIGN_CENTER);
											cell32.setBorderColor(BaseColor.WHITE);

											count++;

											// table2.addCell(cell29);
											table2.addCell(cell30);
											table2.addCell(cell31);
											table2.addCell(cell32);

										}

									}

								}

								// retrieving remark for the test if any
								/*
								 * String remark = patientDAOInf.retrieveTestRemark(test, "");
								 * 
								 * if (remark == null || remark == "") { continue; } else if (remark.isEmpty())
								 * { continue; } else {
								 * 
								 * // For remark PdfPCell cell32 = new PdfPCell(new Paragraph("" + remark,
								 * mainContent1)); cell32.setBorderWidth(0.5f); cell32.setPaddingTop(-2);
								 * cell32.setPaddingBottom(5); cell32.setColspan(3);
								 * cell32.setBorderColor(BaseColor.WHITE);
								 * 
								 * table2.addCell(cell32);
								 * 
								 * }
								 */

								boolean showNormalRange = patientDAOInf.showNormalRange(test, groupName);

								if (showNormalRange && test.contains("Beta")) {

									// retrieving normal range description for the test if any
									/*
									 * String normalRangeDesc = patientDAOInf.retrieveTestNormalRangeDesc(test,
									 * groupName);
									 * 
									 * // For remark PdfPCell cell32 = new PdfPCell(new Paragraph("" +
									 * normalRangeDesc, mainContent)); cell32.setBorderWidth(0.5f);
									 * cell32.setPaddingBottom(5); cell32.setBorderColor(BaseColor.BLACK);
									 */

									PdfPCell cell302 = new PdfPCell(new Paragraph("", Font5));
									cell302.setPaddingTop(5);
									cell302.setColspan(3);
									cell302.setBorderColor(BaseColor.WHITE);

									// For remark
									PdfPCell cell32 = new PdfPCell(
											new Paragraph("pregnant woman \n (weeks since LMP*)", Font5));
									cell32.setBorderWidth(0.5f);
									cell32.setPaddingBottom(5);
									cell32.setHorizontalAlignment(Element.ALIGN_CENTER);
									cell32.setBorderColor(BaseColor.BLACK);

									PdfPCell cell33 = new PdfPCell(
											new Paragraph("Total Î²HCG level [mlU/mL] \n range", Font5));
									cell33.setBorderWidth(0.1f);
									cell33.setPaddingBottom(5);
									cell33.setPaddingTop(5);
									cell33.setColspan(2);
									cell33.setHorizontalAlignment(Element.ALIGN_CENTER);
									cell33.setBorderColor(BaseColor.BLACK);

									table2.addCell(cell302);
									table2.addCell(cell32);
									table2.addCell(cell33);

									for (int j = 0; j < rangelevel.length; j++) {

										String[] levelVal = rangelevel[j].split("#");

										PdfPCell cell35 = new PdfPCell(new Paragraph("" + levelVal[0], mainContent));
										cell35.setBorderWidth(0.5f);
										cell35.setPaddingBottom(5);
										cell35.setHorizontalAlignment(Element.ALIGN_CENTER);
										cell35.setBorderColor(BaseColor.BLACK);

										PdfPCell cell36 = new PdfPCell(new Paragraph("" + levelVal[1], mainContent));
										cell36.setBorderWidth(0.1f);
										cell36.setPaddingBottom(5);
										cell36.setHorizontalAlignment(Element.ALIGN_CENTER);
										cell36.setColspan(2);
										cell36.setBorderColor(BaseColor.BLACK);

										table2.addCell(cell35);
										table2.addCell(cell36);
									}

								}

							}

						}

						/* document.add(table2); */

						/*
						 * For remaining details
						 */

						PdfPTable table4 = new PdfPTable(2);
						table4.setWidthPercentage(100);
						table4.setTotalWidth(530);
						Rectangle rect3 = new Rectangle(270, 700);
						table4.setWidthPercentage(new float[] { 170, 100 }, rect3);

						/*
						 * For receipt by
						 */

						PdfPCell cell81 = new PdfPCell(new Paragraph("", Font5));
						cell81.setBorderWidth(0.01f);
						cell81.setPaddingBottom(2);
						cell81.setPaddingTop(80);
						cell81.setBorderColor(BaseColor.WHITE);

						/*
						 * PdfPCell cell82 = new PdfPCell(new Paragraph("", mainContent));
						 * cell82.setBorderWidth(0.01f); cell82.setPaddingBottom(2);
						 * cell82.setPaddingTop(10); cell82.setBorderColor(BaseColor.WHITE);
						 */
						/*
						 * Table for Prescription image
						 */
						PdfPTable imageTable = new PdfPTable(2);
						imageTable.setWidthPercentage(100);
						imageTable.setWidths(new int[] { 2, 2 });

						PdfPCell imageCell1 = new PdfPCell(signatureImg, true);
						imageCell1.setBorderColor(BaseColor.WHITE);
						imageCell1.setHorizontalAlignment(Element.ALIGN_RIGHT);
						imageCell1.setPaddingTop(80);

						PdfPCell imageCell2 = new PdfPCell(new Paragraph("", Font5));
						imageCell2.setBorderColor(BaseColor.WHITE);

						imageTable.addCell(imageCell1);
						imageTable.addCell(imageCell2);

						/*
						 * For Receivers Signature
						 */

						PdfPCell cell83 = new PdfPCell(imageTable);
						cell83.setBorderWidth(0.01f);
						cell83.setPaddingBottom(0);
						cell83.setPaddingTop(2);
						cell83.setPaddingLeft(80);
						cell83.setHorizontalAlignment(Element.ALIGN_RIGHT);
						cell83.setBorderColor(BaseColor.WHITE);

						PdfPCell cell811 = new PdfPCell(new Paragraph(" ", Font5));
						cell811.setBorderWidth(0.01f);
						cell811.setPaddingBottom(2);
						cell811.setPaddingTop(2);
						cell811.setBorderColor(BaseColor.WHITE);

						PdfPCell cell84 = new PdfPCell(
								new Paragraph(MDMap.get("MDName") + "\n" + MDMap.get("MDQualification") + "", Font5));
						cell84.setBorderWidth(0.01f);
						cell84.setPaddingBottom(2);
						cell84.setPaddingTop(2);
						// cell84.setColspan(2);
						cell84.setPaddingRight(30);
						cell84.setHorizontalAlignment(Element.ALIGN_RIGHT);
						cell84.setBorderColor(BaseColor.WHITE);

						table4.addCell(cell81);
						// table4.addCell(cell82);
						table4.addCell(cell83);
						table4.addCell(cell811);
						table4.addCell(cell84);

						// document.add(table4);

						FooterTable3 event = new FooterTable3(table4);
						writer.setPageEvent(event);

					}

					String groupRemark = patientDAOInf.retrieveGroupRemark(groupName);

					if (groupRemark != null && groupRemark != "null" && groupRemark != "") {

						PdfPCell cell29 = new PdfPCell(new Paragraph("Remark", Font5));
						cell29.setBorderWidth(0.5f);
						cell29.setBorderColorTop(BaseColor.WHITE);
						cell29.setPaddingTop(10);
						cell29.setColspan(3);
						cell29.setPaddingBottom(5);
						cell29.setBorderWidthLeft(0.2f);
						cell29.setBorderColor(BaseColor.WHITE);

						PdfPCell cell30 = new PdfPCell(new Paragraph(groupRemark, mainContent));
						cell30.setBorderWidth(0.2f);
						cell30.setPaddingBottom(5);
						cell30.setPaddingLeft(10);
						cell30.setColspan(3);
						cell30.setBorderColor(BaseColor.WHITE);

						table2.addCell(cell29);
						table2.addCell(cell30);
					}

					document.add(table2);

				}

			}

			/*
			 * For Receipt details
			 */
			PdfPTable table2 = new PdfPTable(3);
			table2.setWidthPercentage(100);
			Rectangle rect02 = new Rectangle(270, 700);
			table2.setWidthPercentage(new float[] { 120, 75, 75 }, rect02);

			/*
			 * Check whether single lab tests are added or not, by checking whether
			 * labTestList size is > 0, if so then only print into PDF else do not print the
			 * headers into PDF
			 */
			System.out.println("singleLabTestMap" + singleLabTestMap.size());
			if (singleLabTestMap.size() > 0) {

				int maxRecordCount = 0;

				System.out.println("Single test check.." + groupCheck);

				if (groupCheck > 0) {
					document.newPage();

					PdfPTable table3 = new PdfPTable(4);

					table3.setFooterRows(1);
					table3.setWidthPercentage(100);
					Rectangle rect3 = new Rectangle(270, 700);
					table.setWidthPercentage(new float[] { 50, 85, 50, 85 }, rect3);

					PdfPCell cell00 = new PdfPCell(new Paragraph("", Font3));
					cell00.setPaddingTop(100);
					cell00.setHorizontalAlignment(Element.ALIGN_CENTER);
					cell00.setUseBorderPadding(true);
					cell00.setColspan(4);
					cell00.setBorder(Rectangle.NO_BORDER);
					cell00.setBorderWidthBottom(1f);
					cell00.setBorderColorBottom(BaseColor.DARK_GRAY);
					cell00.setBorder(Rectangle.NO_BORDER);
					cell00.setBorderColor(BaseColor.WHITE);

					/*
					 * For patient name
					 */
					PdfPCell cell600 = new PdfPCell(new Paragraph("Patient Name", Font5));
					cell600.setBorderWidth(0.01f);
					cell600.setPaddingBottom(5);
					cell600.setBorderWidthLeft(0.2f);
					cell600.setBorderColor(BaseColor.WHITE);

					PdfPCell cell700 = new PdfPCell(new Paragraph(patientName, mainContent));
					cell700.setBorderWidth(0.2f);
					cell700.setPaddingBottom(5);
					cell700.setBorderColor(BaseColor.WHITE);

					/*
					 * For Gender
					 */
					PdfPCell cell1000 = new PdfPCell(new Paragraph("Medical Reg. No.", Font5));
					cell1000.setBorderWidth(0.01f);
					cell1000.setPaddingBottom(5);
					cell1000.setBorderWidthLeft(0.2f);
					cell1000.setBorderColor(BaseColor.WHITE);

					PdfPCell cell1100 = new PdfPCell(new Paragraph(regNo, mainContent));
					cell1100.setBorderWidth(0.2f);
					cell1100.setPaddingBottom(5);
					cell1100.setBorderColor(BaseColor.WHITE);

					/*
					 * For age
					 */
					PdfPCell cell1200 = new PdfPCell(new Paragraph("Age/Gender", Font5));
					cell1200.setBorderWidth(0.01f);
					cell1200.setPaddingBottom(5);
					cell1200.setBorderWidthLeft(0.2f);
					cell1200.setBorderColor(BaseColor.WHITE);

					PdfPCell cell1300 = new PdfPCell(new Paragraph(age + "/" + gender, mainContent));
					cell1300.setBorderWidth(0.2f);
					cell1300.setPaddingBottom(5);
					cell1300.setBorderColor(BaseColor.WHITE);

					/*
					 * For Mobile
					 */
					PdfPCell cell1400 = new PdfPCell(new Paragraph("Mobile No.", Font5));
					cell1400.setBorderWidth(0.01f);
					cell1400.setPaddingBottom(5);
					cell1400.setBorderWidthLeft(0.2f);
					cell1400.setBorderColor(BaseColor.WHITE);

					PdfPCell cell1500 = new PdfPCell(new Paragraph(mobile, mainContent));
					cell1500.setBorderWidth(0.2f);
					cell1500.setPaddingBottom(5);
					cell1500.setBorderColor(BaseColor.WHITE);

					/*
					 * For collection date
					 */
					PdfPCell cell1800 = new PdfPCell(new Paragraph("Collection Date", Font5));
					cell1800.setBorderWidth(0.01f);
					cell1800.setPaddingBottom(5);
					cell1800.setBorderWidthLeft(0.2f);
					cell1800.setBorderColor(BaseColor.WHITE);

					PdfPCell cell1900 = new PdfPCell(new Paragraph(collectionDate, mainContent));
					cell1900.setBorderWidth(0.2f);
					cell1900.setPaddingBottom(5);
					cell1900.setBorderColor(BaseColor.WHITE);

					/*
					 * For Collection time
					 */
					PdfPCell cell2000 = new PdfPCell(new Paragraph("Collection Time", Font5));
					cell2000.setBorderWidth(0.01f);
					cell2000.setPaddingBottom(5);
					cell2000.setBorderWidthLeft(0.2f);
					cell2000.setBorderColor(BaseColor.WHITE);

					PdfPCell cell2100 = new PdfPCell(new Paragraph(collectionTime, mainContent));
					cell2100.setBorderWidth(0.2f);
					cell2100.setPaddingBottom(5);
					cell2100.setBorderColor(BaseColor.WHITE);

					/*
					 * For Sample ID
					 */
					PdfPCell cell2200 = new PdfPCell(new Paragraph("Sample ID", Font5));
					cell2200.setBorderWidth(0.01f);
					cell2200.setPaddingBottom(15);
					cell2200.setBorderWidthLeft(0.2f);
					cell2200.setBorderColor(BaseColor.WHITE);

					PdfPCell cell2300 = new PdfPCell(new Paragraph(sampleID, mainContent));
					cell2300.setBorderWidth(0.2f);
					cell2300.setPaddingBottom(15);
					cell2300.setBorderColor(BaseColor.WHITE);

					/*
					 * For Referred by
					 */
					PdfPCell cell22100 = new PdfPCell(new Paragraph("Referred By", Font5));
					cell22100.setBorderWidth(0.01f);
					cell22100.setPaddingBottom(15);
					cell22100.setBorderWidthLeft(0.2f);
					cell22100.setBorder(Rectangle.NO_BORDER);
					cell22100.setBorderColor(BaseColor.WHITE);

					PdfPCell cell23100 = new PdfPCell(new Paragraph(referredBy, mainContent));
					cell23100.setBorderWidth(0.2f);
					cell23100.setPaddingBottom(15);
					cell23100.setBorder(Rectangle.NO_BORDER);
					cell23100.setBorderColor(BaseColor.WHITE);

					PdfPCell cell23200 = new PdfPCell(new Paragraph("", mainContent));
					cell23200.setBorderWidth(0.2f);
					cell23200.setColspan(4);
					cell23200.setBorderColorTop(BaseColor.BLACK);
					cell23200.setBorderColorBottom(BaseColor.WHITE);
					cell23200.setBorderColorLeft(BaseColor.WHITE);
					cell23200.setBorderColorRight(BaseColor.WHITE);
					cell23200.setBorderWidthLeft(0);
					cell23200.setBorderWidthRight(0);

					/*
					 * adding all cell to the table to create tabular structure
					 */

					table3.addCell(cell00);
					table3.addCell(cell600);
					table3.addCell(cell700);
					table3.addCell(cell1000);
					table3.addCell(cell1100);
					table3.addCell(cell1200);
					table3.addCell(cell1300);
					table3.addCell(cell1400);
					table3.addCell(cell1500);
					table3.addCell(cell1800);
					table3.addCell(cell1900);
					table3.addCell(cell2000);
					table3.addCell(cell2100);
					table3.addCell(cell2200);
					table3.addCell(cell2300);
					table3.addCell(cell22100);
					table3.addCell(cell23100);
					table3.addCell(cell23200);

					document.add(table3);

					// For test
					PdfPCell cell26 = new PdfPCell(new Paragraph("TEST DONE", Font6));
					cell26.setBorderWidth(0.5f);
					cell26.setPaddingBottom(8);
					cell26.setPaddingTop(15);
					cell26.setBorderColor(BaseColor.WHITE);

					// For normal range
					PdfPCell cell27 = new PdfPCell(new Paragraph("RESULT", Font6));
					cell27.setBorderWidth(0.5f);
					cell27.setPaddingBottom(8);
					cell27.setPaddingTop(15);
					cell27.setBorderColor(BaseColor.WHITE);

					// For observed value
					PdfPCell cell28 = new PdfPCell(new Paragraph("NORMAL RANGE", Font6));
					cell28.setBorderWidth(0.5f);
					cell28.setPaddingBottom(8);
					cell28.setPaddingTop(15);
					cell28.setBorderColor(BaseColor.WHITE);

					// table2.addCell(cell25);
					table2.addCell(cell26);
					table2.addCell(cell27);
					table2.addCell(cell28);
				} else {
					// For test
					PdfPCell cell26 = new PdfPCell(new Paragraph("TEST DONE", Font6));
					cell26.setBorderWidth(0.5f);
					cell26.setPaddingBottom(8);
					cell26.setPaddingTop(15);
					cell26.setBorderColor(BaseColor.WHITE);

					// For normal range
					PdfPCell cell27 = new PdfPCell(new Paragraph("RESULT", Font6));
					cell27.setBorderWidth(0.5f);
					cell27.setPaddingBottom(8);
					cell27.setPaddingTop(15);
					cell27.setBorderColor(BaseColor.WHITE);

					// For observed value
					PdfPCell cell28 = new PdfPCell(new Paragraph("NORMAL RANGE", Font6));
					cell28.setBorderWidth(0.5f);
					cell28.setPaddingBottom(8);
					cell28.setPaddingTop(15);
					cell28.setBorderColor(BaseColor.WHITE);

					// table2.addCell(cell25);
					table2.addCell(cell26);
					table2.addCell(cell27);
					table2.addCell(cell28);
				}

				count = 1;

				Set<String> keySet = singleLabTestMap.keySet();

				for (String subGroup : keySet) {

					if (subGroup == null) {
						// For test
						PdfPCell cell30111 = new PdfPCell(new Paragraph("", Font2));
						cell30111.setBorderWidth(0.5f);
						cell30111.setPaddingBottom(5);
						cell30111.setColspan(3);
						cell30111.setBorderColor(BaseColor.WHITE);

						table2.addCell(cell30111);
					} else if (subGroup.equals("null")) {
						// For test
						PdfPCell cell30111 = new PdfPCell(new Paragraph("", Font2));
						cell30111.setBorderWidth(0.5f);
						cell30111.setPaddingBottom(5);
						cell30111.setColspan(3);
						cell30111.setBorderColor(BaseColor.WHITE);

						table2.addCell(cell30111);
					} else {
						// For test
						PdfPCell cell30111 = new PdfPCell(new Paragraph(subGroup, Font2));
						cell30111.setBorderWidth(0.5f);
						cell30111.setPaddingBottom(5);
						cell30111.setColspan(3);
						cell30111.setBorderColor(BaseColor.WHITE);

						table2.addCell(cell30111);
					}

					PatientForm form = new PatientForm();

					String testArray[] = singleLabTestMap.get(subGroup).split("___");

					for (int i = 0; i < testArray.length; i++) {

						maxRecordCount++;

						if (maxRecordCount >= 20) {

							PdfPTable table4 = new PdfPTable(2);
							table4.setWidthPercentage(100);
							table4.setTotalWidth(530);
							Rectangle rect4 = new Rectangle(270, 700);
							table4.setWidthPercentage(new float[] { 170, 100 }, rect4);

							/*
							 * For receipt by
							 */

							PdfPCell cell81 = new PdfPCell(new Paragraph("", Font5));
							cell81.setBorderWidth(0.01f);
							cell81.setPaddingBottom(2);
							cell81.setPaddingTop(80);
							cell81.setBorderColor(BaseColor.WHITE);

							/*
							 * PdfPCell cell82 = new PdfPCell(new Paragraph("", mainContent));
							 * cell82.setBorderWidth(0.01f); cell82.setPaddingBottom(2);
							 * cell82.setPaddingTop(10); cell82.setBorderColor(BaseColor.WHITE);
							 */
							/*
							 * Table for Prescription image
							 */
							PdfPTable imageTable = new PdfPTable(2);
							imageTable.setWidthPercentage(100);
							imageTable.setWidths(new int[] { 2, 2 });

							PdfPCell imageCell1 = new PdfPCell(signatureImg, true);
							imageCell1.setBorderColor(BaseColor.WHITE);
							imageCell1.setHorizontalAlignment(Element.ALIGN_RIGHT);
							imageCell1.setPaddingTop(80);

							PdfPCell imageCell2 = new PdfPCell(new Paragraph("", Font5));
							imageCell2.setBorderColor(BaseColor.WHITE);

							imageTable.addCell(imageCell1);
							imageTable.addCell(imageCell2);

							/*
							 * For Receivers Signature
							 */

							PdfPCell cell83 = new PdfPCell(imageTable);
							cell83.setBorderWidth(0.01f);
							cell83.setPaddingBottom(0);
							cell83.setPaddingTop(2);
							cell83.setPaddingLeft(80);
							cell83.setHorizontalAlignment(Element.ALIGN_RIGHT);
							cell83.setBorderColor(BaseColor.WHITE);

							PdfPCell cell811 = new PdfPCell(new Paragraph(" ", Font5));
							cell811.setBorderWidth(0.01f);
							cell811.setPaddingBottom(2);
							cell811.setPaddingTop(2);
							cell811.setBorderColor(BaseColor.WHITE);

							PdfPCell cell84 = new PdfPCell(new Paragraph(
									MDMap.get("MDName") + "\n" + MDMap.get("MDQualification") + "", Font5));
							cell84.setBorderWidth(0.01f);
							cell84.setPaddingBottom(2);
							cell84.setPaddingTop(2);
							// cell84.setColspan(2);
							cell84.setPaddingRight(50);
							cell84.setHorizontalAlignment(Element.ALIGN_RIGHT);
							cell84.setBorderColor(BaseColor.WHITE);

							table4.addCell(cell81);
							// table4.addCell(cell82);
							table4.addCell(cell83);
							table4.addCell(cell811);
							table4.addCell(cell84);

							// document.add(table4);

							FooterTable3 event = new FooterTable3(table4);
							writer.setPageEvent(event);

							document.add(table2);

							table2 = new PdfPTable(3);

							table2.setWidthPercentage(100);
							rect02 = new Rectangle(270, 700);
							table2.setWidthPercentage(new float[] { 120, 75, 75 }, rect02);

							document.newPage();

							PdfPTable table3 = new PdfPTable(4);

							table3.setFooterRows(1);
							table3.setWidthPercentage(100);
							Rectangle rect3 = new Rectangle(270, 700);
							table.setWidthPercentage(new float[] { 50, 85, 50, 85 }, rect3);

							PdfPCell cell00 = new PdfPCell(new Paragraph("", Font3));
							cell00.setPaddingTop(100);
							cell00.setHorizontalAlignment(Element.ALIGN_CENTER);
							cell00.setUseBorderPadding(true);
							cell00.setColspan(4);
							cell00.setBorder(Rectangle.NO_BORDER);
							cell00.setBorderWidthBottom(1f);
							cell00.setBorderColorBottom(BaseColor.DARK_GRAY);
							cell00.setBorder(Rectangle.NO_BORDER);
							cell00.setBorderColor(BaseColor.WHITE);

							/*
							 * For patient name
							 */
							PdfPCell cell600 = new PdfPCell(new Paragraph("Patient Name", Font5));
							cell600.setBorderWidth(0.01f);
							cell600.setPaddingBottom(5);
							cell600.setBorderWidthLeft(0.2f);
							cell600.setBorderColor(BaseColor.WHITE);

							PdfPCell cell700 = new PdfPCell(new Paragraph(patientName, mainContent));
							cell700.setBorderWidth(0.2f);
							cell700.setPaddingBottom(5);
							cell700.setBorderColor(BaseColor.WHITE);

							/*
							 * For Gender
							 */
							PdfPCell cell1000 = new PdfPCell(new Paragraph("Medical Reg. No.", Font5));
							cell1000.setBorderWidth(0.01f);
							cell1000.setPaddingBottom(5);
							cell1000.setBorderWidthLeft(0.2f);
							cell1000.setBorderColor(BaseColor.WHITE);

							PdfPCell cell1100 = new PdfPCell(new Paragraph(regNo, mainContent));
							cell1100.setBorderWidth(0.2f);
							cell1100.setPaddingBottom(5);
							cell1100.setBorderColor(BaseColor.WHITE);

							/*
							 * For age
							 */
							PdfPCell cell1200 = new PdfPCell(new Paragraph("Age/Gender", Font5));
							cell1200.setBorderWidth(0.01f);
							cell1200.setPaddingBottom(5);
							cell1200.setBorderWidthLeft(0.2f);
							cell1200.setBorderColor(BaseColor.WHITE);

							PdfPCell cell1300 = new PdfPCell(new Paragraph(age + "/" + gender, mainContent));
							cell1300.setBorderWidth(0.2f);
							cell1300.setPaddingBottom(5);
							cell1300.setBorderColor(BaseColor.WHITE);

							/*
							 * For Mobile
							 */
							PdfPCell cell1400 = new PdfPCell(new Paragraph("Mobile No.", Font5));
							cell1400.setBorderWidth(0.01f);
							cell1400.setPaddingBottom(5);
							cell1400.setBorderWidthLeft(0.2f);
							cell1400.setBorderColor(BaseColor.WHITE);

							PdfPCell cell1500 = new PdfPCell(new Paragraph(mobile, mainContent));
							cell1500.setBorderWidth(0.2f);
							cell1500.setPaddingBottom(5);
							cell1500.setBorderColor(BaseColor.WHITE);

							/*
							 * For collection date
							 */
							PdfPCell cell1800 = new PdfPCell(new Paragraph("Collection Date", Font5));
							cell1800.setBorderWidth(0.01f);
							cell1800.setPaddingBottom(5);
							cell1800.setBorderWidthLeft(0.2f);
							cell1800.setBorderColor(BaseColor.WHITE);

							PdfPCell cell1900 = new PdfPCell(new Paragraph(collectionDate, mainContent));
							cell1900.setBorderWidth(0.2f);
							cell1900.setPaddingBottom(5);
							cell1900.setBorderColor(BaseColor.WHITE);

							/*
							 * For Collection time
							 */
							PdfPCell cell2000 = new PdfPCell(new Paragraph("Collection Time", Font5));
							cell2000.setBorderWidth(0.01f);
							cell2000.setPaddingBottom(5);
							cell2000.setBorderWidthLeft(0.2f);
							cell2000.setBorderColor(BaseColor.WHITE);

							PdfPCell cell2100 = new PdfPCell(new Paragraph(collectionTime, mainContent));
							cell2100.setBorderWidth(0.2f);
							cell2100.setPaddingBottom(5);
							cell2100.setBorderColor(BaseColor.WHITE);

							/*
							 * For Sample ID
							 */
							PdfPCell cell2200 = new PdfPCell(new Paragraph("Sample ID", Font5));
							cell2200.setBorderWidth(0.01f);
							cell2200.setPaddingBottom(15);
							cell2200.setBorderWidthLeft(0.2f);
							cell2200.setBorderColor(BaseColor.WHITE);

							PdfPCell cell2300 = new PdfPCell(new Paragraph(sampleID, mainContent));
							cell2300.setBorderWidth(0.2f);
							cell2300.setPaddingBottom(15);
							cell2300.setBorderColor(BaseColor.WHITE);

							/*
							 * For Referred by
							 */
							PdfPCell cell22100 = new PdfPCell(new Paragraph("Referred By", Font5));
							cell22100.setBorderWidth(0.01f);
							cell22100.setPaddingBottom(15);
							cell22100.setBorderWidthLeft(0.2f);
							cell22100.setBorder(Rectangle.NO_BORDER);
							cell22100.setBorderColor(BaseColor.WHITE);

							PdfPCell cell23100 = new PdfPCell(new Paragraph(referredBy, mainContent));
							cell23100.setBorderWidth(0.2f);
							cell23100.setPaddingBottom(15);
							cell23100.setBorder(Rectangle.NO_BORDER);
							cell23100.setBorderColor(BaseColor.WHITE);

							PdfPCell cell23200 = new PdfPCell(new Paragraph("", mainContent));
							cell23200.setBorderWidth(0.2f);
							cell23200.setColspan(4);
							cell23200.setBorderColorTop(BaseColor.BLACK);
							cell23200.setBorderColorBottom(BaseColor.WHITE);
							cell23200.setBorderColorLeft(BaseColor.WHITE);
							cell23200.setBorderColorRight(BaseColor.WHITE);
							cell23200.setBorderWidthLeft(0);
							cell23200.setBorderWidthRight(0);

							/*
							 * adding all cell to the table to create tabular structure
							 */

							table3.addCell(cell00);
							table3.addCell(cell600);
							table3.addCell(cell700);
							table3.addCell(cell1000);
							table3.addCell(cell1100);
							table3.addCell(cell1200);
							table3.addCell(cell1300);
							table3.addCell(cell1400);
							table3.addCell(cell1500);
							table3.addCell(cell1800);
							table3.addCell(cell1900);
							table3.addCell(cell2000);
							table3.addCell(cell2100);
							table3.addCell(cell2200);
							table3.addCell(cell2300);
							table3.addCell(cell22100);
							table3.addCell(cell23100);
							table3.addCell(cell23200);

							document.add(table3);

							// For test
							PdfPCell cell26 = new PdfPCell(new Paragraph("TEST DONE", Font6));
							cell26.setBorderWidth(0.5f);
							cell26.setPaddingBottom(8);
							cell26.setPaddingTop(15);
							cell26.setBorderColor(BaseColor.WHITE);

							// For normal range
							PdfPCell cell27 = new PdfPCell(new Paragraph("RESULT", Font6));
							cell27.setBorderWidth(0.5f);
							cell27.setPaddingBottom(8);
							cell27.setPaddingTop(15);
							cell27.setBorderColor(BaseColor.WHITE);

							// For observed value
							PdfPCell cell28 = new PdfPCell(new Paragraph("NORMAL RANGE", Font6));
							cell28.setBorderWidth(0.5f);
							cell28.setPaddingBottom(8);
							cell28.setPaddingTop(15);
							cell28.setBorderColor(BaseColor.WHITE);

							// table2.addCell(cell25);
							table2.addCell(cell26);
							table2.addCell(cell27);
							table2.addCell(cell28);

							maxRecordCount = 0;
						}

						String array1[] = testArray[i].split("===");

						String test = array1[0];

						String quantitativeValueStr = array1[2];

						String qualitativeValueStr = array1[1];

						String result = "";

						if (qualitativeValueStr == null || qualitativeValueStr == "") {

							result = quantitativeValueStr;

						} else if (qualitativeValueStr.isEmpty()) {

							result = quantitativeValueStr;

						} else {
							result = qualitativeValueStr;
						}

						form.setCBCProfileTest(test);

						form.setCBCProfileValue(result);

						form.setCBCProfileNormalValue(array1[3]);

						if (form.getCBCProfileValue().equals("NA")) {
							continue;
						} else {

							// For test
							PdfPCell cell30 = new PdfPCell(new Paragraph(form.getCBCProfileTest(), mainContent));
							cell30.setBorderWidth(0.5f);
							cell30.setPaddingBottom(5);
							// cell30.setHorizontalAlignment(Element.ALIGN_CENTER);
							cell30.setBorderColor(BaseColor.WHITE);

							// For normal range
							PdfPCell cell31 = null;

							if (form.getCBCProfileNormalValue().trim().contains(",")) {

								if (form.getCBCProfileNormalValue().contains(form.getCBCProfileValue())) {

									cell31 = new PdfPCell(new Paragraph("" + form.getCBCProfileValue(), mainContent));
									cell31.setBorderWidth(0.5f);
									cell31.setPaddingBottom(5);
									// cell31.setHorizontalAlignment(Element.ALIGN_CENTER);
									cell31.setBorderColor(BaseColor.WHITE);

								} else {

									cell31 = new PdfPCell(
											new Paragraph("" + form.getCBCProfileValue(), mainContent_abnormal));
									cell31.setBorderWidth(0.5f);
									cell31.setPaddingBottom(5);
									// cell31.setHorizontalAlignment(Element.ALIGN_CENTER);
									cell31.setBorderColor(BaseColor.WHITE);

								}
							} else if (form.getCBCProfileNormalValue().trim().contains(">")) {

								System.out.println("...." + form.getCBCProfileNormalValue());

								String normalRangeArr[] = form.getCBCProfileNormalValue().trim().substring(1).trim()
										.split(" ");

								double value = Double.parseDouble(normalRangeArr[0].trim());

								try {

									double resulValue = Double.parseDouble(form.getCBCProfileValue());

									if ((resulValue % 1 == 0)) {
										result = "" + (int) resulValue;
									}

									if (resulValue > value) {

										cell31 = new PdfPCell(
												new Paragraph("" + form.getCBCProfileValue(), mainContent));
										cell31.setBorderWidth(0.5f);
										cell31.setPaddingBottom(5);
										// cell31.setHorizontalAlignment(Element.ALIGN_CENTER);
										cell31.setBorderColor(BaseColor.WHITE);

									} else {

										cell31 = new PdfPCell(
												new Paragraph("" + form.getCBCProfileValue(), mainContent_abnormal));
										cell31.setBorderWidth(0.5f);
										cell31.setPaddingBottom(5);
										// cell31.setHorizontalAlignment(Element.ALIGN_CENTER);
										cell31.setBorderColor(BaseColor.WHITE);

									}

								} catch (Exception exception) {

									System.out.println("NumberFormatException occurred due to result value.."
											+ form.getCBCProfileValue());

									cell31 = new PdfPCell(
											new Paragraph("" + form.getCBCProfileValue(), mainContent_abnormal));
									cell31.setBorderWidth(0.5f);
									cell31.setPaddingBottom(5);
									// cell31.setHorizontalAlignment(Element.ALIGN_CENTER);
									cell31.setBorderColor(BaseColor.WHITE);
								}

							} else if (form.getCBCProfileNormalValue().trim().contains("<")) {

								System.out.println("...." + form.getCBCProfileNormalValue());

								String normalRangeArr[] = form.getCBCProfileNormalValue().trim().substring(1).trim()
										.split(" ");

								double value = Double.parseDouble(normalRangeArr[0].trim());

								try {

									double resultValue = Double.parseDouble(form.getCBCProfileValue());

									if ((resultValue % 1 == 0)) {
										form.setCBCProfileValue("" + (int) resultValue);
									}

									if (resultValue < value) {

										cell31 = new PdfPCell(
												new Paragraph("" + form.getCBCProfileValue(), mainContent));
										cell31.setBorderWidth(0.5f);
										cell31.setPaddingBottom(5);
										// cell31.setHorizontalAlignment(Element.ALIGN_CENTER);
										cell31.setBorderColor(BaseColor.WHITE);

									} else {

										cell31 = new PdfPCell(
												new Paragraph("" + form.getCBCProfileValue(), mainContent_abnormal));
										cell31.setBorderWidth(0.5f);
										cell31.setPaddingBottom(5);
										// cell31.setHorizontalAlignment(Element.ALIGN_CENTER);
										cell31.setBorderColor(BaseColor.WHITE);

									}

								} catch (Exception exception) {

									System.out.println("NumberFormatException occurred due to result value..."
											+ form.getCBCProfileValue());

									cell31 = new PdfPCell(
											new Paragraph("" + form.getCBCProfileValue(), mainContent_abnormal));
									cell31.setBorderWidth(0.5f);
									cell31.setPaddingBottom(5);
									// cell31.setHorizontalAlignment(Element.ALIGN_CENTER);
									cell31.setBorderColor(BaseColor.WHITE);
								}

							} else if (form.getCBCProfileNormalValue().matches(".*\\d.*")) {

								System.out.println("...." + form.getCBCProfileNormalValue());

								if (form.getCBCProfileNormalValue().contains(" ")) {

									String normalRangeArr[] = form.getCBCProfileNormalValue().trim().split(" ");

									if (normalRangeArr[1].trim().equals("-")) {

										// String rangeStrArr[] = normalRangeArr[0].split("-");

										double minVal = Double.parseDouble(normalRangeArr[0].trim());

										double maxVal = Double.parseDouble(normalRangeArr[2].trim());

										Range<Double> range = Range.between(minVal, maxVal);

										if (form.getCBCProfileValue().equals("NA")) {

											cell31 = new PdfPCell(
													new Paragraph("" + form.getCBCProfileValue(), mainContent));
											cell31.setBorderWidth(0.5f);
											cell31.setPaddingBottom(5);
											// cell31.setHorizontalAlignment(Element.ALIGN_CENTER);
											cell31.setBorderColor(BaseColor.WHITE);

										} else {

											try {

												double resultValue = Double.parseDouble(form.getCBCProfileValue());

												if ((resultValue % 1 == 0)) {
													form.setCBCProfileValue("" + (int) resultValue);
												}

												if (range.contains(resultValue)) {

													cell31 = new PdfPCell(
															new Paragraph("" + form.getCBCProfileValue(), mainContent));
													cell31.setBorderWidth(0.5f);
													cell31.setPaddingBottom(5);
													// cell31.setHorizontalAlignment(Element.ALIGN_CENTER);
													cell31.setBorderColor(BaseColor.WHITE);

												} else {

													cell31 = new PdfPCell(new Paragraph("" + form.getCBCProfileValue(),
															mainContent_abnormal));
													cell31.setBorderWidth(0.5f);
													cell31.setPaddingBottom(5);
													// cell31.setHorizontalAlignment(Element.ALIGN_CENTER);
													cell31.setBorderColor(BaseColor.WHITE);

												}

											} catch (Exception exception) {

												System.out
														.println("NumberFormatException occurred due to result value..."
																+ form.getCBCProfileValue());

												cell31 = new PdfPCell(new Paragraph("" + form.getCBCProfileValue(),
														mainContent_abnormal));
												cell31.setBorderWidth(0.5f);
												cell31.setPaddingBottom(5);
												// cell31.setHorizontalAlignment(Element.ALIGN_CENTER);
												cell31.setBorderColor(BaseColor.WHITE);
											}

										}

									} else {

										String rangeStrArr[] = normalRangeArr[0].split("-");

										double minVal = Double.parseDouble(rangeStrArr[0].trim());

										double maxVal = Double.parseDouble(rangeStrArr[1].trim());

										Range<Double> range = Range.between(minVal, maxVal);

										if (form.getCBCProfileValue().equals("NA")) {
											cell31 = new PdfPCell(
													new Paragraph("" + form.getCBCProfileValue(), mainContent));
											cell31.setBorderWidth(0.5f);
											cell31.setPaddingBottom(5);
											// cell31.setHorizontalAlignment(Element.ALIGN_CENTER);
											cell31.setBorderColor(BaseColor.WHITE);
										} else {

											try {

												double resultValue = Double.parseDouble(form.getCBCProfileValue());

												if ((resultValue % 1 == 0)) {
													form.setCBCProfileValue("" + (int) resultValue);
												}

												if (range.contains(resultValue)) {

													cell31 = new PdfPCell(
															new Paragraph("" + form.getCBCProfileValue(), mainContent));
													cell31.setBorderWidth(0.5f);
													cell31.setPaddingBottom(5);
													// cell31.setHorizontalAlignment(Element.ALIGN_CENTER);
													cell31.setBorderColor(BaseColor.WHITE);

												} else {

													cell31 = new PdfPCell(new Paragraph("" + form.getCBCProfileValue(),
															mainContent_abnormal));
													cell31.setBorderWidth(0.5f);
													cell31.setPaddingBottom(5);
													// cell31.setHorizontalAlignment(Element.ALIGN_CENTER);
													cell31.setBorderColor(BaseColor.WHITE);

												}

											} catch (Exception exception) {

												System.out
														.println("NumberFormatException occurred due to result value..."
																+ form.getCBCProfileValue());

												cell31 = new PdfPCell(new Paragraph("" + form.getCBCProfileValue(),
														mainContent_abnormal));
												cell31.setBorderWidth(0.5f);
												cell31.setPaddingBottom(5);
												// cell31.setHorizontalAlignment(Element.ALIGN_CENTER);
												cell31.setBorderColor(BaseColor.WHITE);
											}

										}

									}

								} else {

									if (form.getCBCProfileValue().equals(form.getCBCProfileNormalValue())) {

										cell31 = new PdfPCell(
												new Paragraph("" + form.getCBCProfileValue(), mainContent));
										cell31.setBorderWidth(0.5f);
										cell31.setPaddingBottom(5);
										// cell31.setHorizontalAlignment(Element.ALIGN_CENTER);
										cell31.setBorderColor(BaseColor.WHITE);

									} else {

										cell31 = new PdfPCell(
												new Paragraph("" + form.getCBCProfileValue(), mainContent_abnormal));
										cell31.setBorderWidth(0.5f);
										cell31.setPaddingBottom(5);
										// cell31.setHorizontalAlignment(Element.ALIGN_CENTER);
										cell31.setBorderColor(BaseColor.WHITE);

									}

								}

							} else {

								if (form.getCBCProfileNormalValue().toLowerCase().trim()
										.equals(form.getCBCProfileValue().toLowerCase().trim())) {

									cell31 = new PdfPCell(new Paragraph("" + form.getCBCProfileValue(), mainContent));
									cell31.setBorderWidth(0.5f);
									cell31.setPaddingBottom(5);
									// cell31.setHorizontalAlignment(Element.ALIGN_CENTER);
									cell31.setBorderColor(BaseColor.WHITE);

								} else if (form.getCBCProfileNormalValue().toLowerCase()
										.contains(form.getCBCProfileValue().toLowerCase())) {
									cell31 = new PdfPCell(new Paragraph("" + form.getCBCProfileValue(), mainContent));
									cell31.setBorderWidth(0.5f);
									cell31.setPaddingBottom(5);
									// cell31.setHorizontalAlignment(Element.ALIGN_CENTER);
									cell31.setBorderColor(BaseColor.WHITE);
								} else {
									cell31 = new PdfPCell(
											new Paragraph("" + form.getCBCProfileValue(), mainContent_abnormal));
									cell31.setBorderWidth(0.5f);
									cell31.setPaddingBottom(5);
									// cell31.setHorizontalAlignment(Element.ALIGN_CENTER);
									cell31.setBorderColor(BaseColor.WHITE);
								}

							}

							// checking whether to include of exclude the normal values for priting by
							// checking whether the isExcludeFlag is off or on.
							boolean excludeFlag = patientDAOInf.isNormalValueExclude(form.getCBCProfileTest(), "");

							boolean showNormalRange = patientDAOInf.showNormalRange(form.getCBCProfileTest(), "");

							if (excludeFlag) {

								// For observed value
								PdfPCell cell32 = new PdfPCell(new Paragraph("", mainContent));
								cell32.setBorderWidth(0.5f);
								cell32.setPaddingBottom(5);
								// cell32.setHorizontalAlignment(Element.ALIGN_CENTER);
								cell32.setBorderColor(BaseColor.WHITE);

								// table2.addCell(cell29);
								table2.addCell(cell30);
								table2.addCell(cell31);
								table2.addCell(cell32);

							} else {

								if (showNormalRange) {

									// retrieving normal range description for the test if any
									String normalRangeDesc = patientDAOInf
											.retrieveTestNormalRangeDesc(form.getCBCProfileTest(), "");

									// For observed value
									PdfPCell cell32 = new PdfPCell(new Paragraph("" + normalRangeDesc, mainContent));
									cell32.setBorderWidth(0.5f);
									cell32.setPaddingBottom(5);
									// cell32.setHorizontalAlignment(Element.ALIGN_CENTER);
									cell32.setBorderColor(BaseColor.WHITE);

									// table2.addCell(cell29);
									table2.addCell(cell30);
									table2.addCell(cell31);
									table2.addCell(cell32);

								} else {

									// For observed value
									PdfPCell cell32 = new PdfPCell(
											new Paragraph("" + form.getCBCProfileNormalValue(), mainContent));
									cell32.setBorderWidth(0.5f);
									cell32.setPaddingBottom(5);
									// cell32.setHorizontalAlignment(Element.ALIGN_CENTER);
									cell32.setBorderColor(BaseColor.WHITE);

									// table2.addCell(cell29);
									table2.addCell(cell30);
									table2.addCell(cell31);
									table2.addCell(cell32);

								}

							}

							// retrieving remark for the test if any
							String remark = patientDAOInf.retrieveTestRemark(form.getCBCProfileTest(), "");

							if (remark == null || remark == "") {
								continue;
							} else if (remark.isEmpty()) {
								continue;
							} else {

								// For remark
								PdfPCell cell32 = new PdfPCell(new Paragraph("" + remark, mainContent1));
								cell32.setBorderWidth(0.5f);
								cell32.setPaddingTop(-2);
								cell32.setPaddingBottom(5);
								cell32.setColspan(3);
								cell32.setBorderColor(BaseColor.WHITE);

								table2.addCell(cell32);

							}

							if (showNormalRange && form.getCBCProfileTest().contains("Beta")) {

								// retrieving normal range description for the test if any
								/*
								 * String normalRangeDesc =
								 * patientDAOInf.retrieveTestNormalRangeDesc(form.getCBCProfileTest(), "");
								 * 
								 * // For Normal range description PdfPCell cell32 = new PdfPCell(new
								 * Paragraph("" + normalRangeDesc, mainContent)); cell32.setBorderWidth(0.5f);
								 * cell32.setPaddingBottom(5); cell32.setColspan(3);
								 * cell32.setBorderColor(BaseColor.BLACK);
								 */

								PdfPCell cell302 = new PdfPCell(new Paragraph("", Font5));
								cell302.setPaddingTop(5);
								cell302.setColspan(3);
								cell302.setBorderColor(BaseColor.WHITE);

								// For remark
								PdfPCell cell32 = new PdfPCell(
										new Paragraph("pregnant woman \n (weeks since LMP*)", Font5));
								cell32.setBorderWidth(0.5f);
								cell32.setPaddingBottom(5);
								cell32.setHorizontalAlignment(Element.ALIGN_CENTER);
								cell32.setBorderColor(BaseColor.BLACK);

								PdfPCell cell33 = new PdfPCell(
										new Paragraph("Total Î²HCG level [mlU/mL] \n range", Font5));
								cell33.setBorderWidth(0.1f);
								cell33.setPaddingBottom(5);
								cell33.setPaddingTop(5);
								cell33.setColspan(2);
								cell33.setHorizontalAlignment(Element.ALIGN_CENTER);
								cell33.setBorderColor(BaseColor.BLACK);

								table2.addCell(cell302);
								table2.addCell(cell32);
								table2.addCell(cell33);

								for (int j = 0; j < rangelevel.length; j++) {

									String[] levelVal = rangelevel[j].split("#");

									PdfPCell cell35 = new PdfPCell(new Paragraph("" + levelVal[0], mainContent));
									cell35.setBorderWidth(0.5f);
									cell35.setPaddingBottom(5);
									cell35.setHorizontalAlignment(Element.ALIGN_CENTER);
									cell35.setBorderColor(BaseColor.BLACK);

									PdfPCell cell36 = new PdfPCell(new Paragraph("" + levelVal[1], mainContent));
									cell36.setBorderWidth(0.1f);
									cell36.setPaddingBottom(5);
									cell36.setHorizontalAlignment(Element.ALIGN_CENTER);
									cell36.setColspan(2);
									cell36.setBorderColor(BaseColor.BLACK);

									table2.addCell(cell35);
									table2.addCell(cell36);
								}

							}

						}

					}

					count++;

				}

			}

			/*
			 * For conclusion/comment
			 */
			PdfPCell cell29 = new PdfPCell(new Paragraph("Conclusion/comment", Font5));
			cell29.setBorderWidth(0.5f);
			cell29.setBorderColorTop(BaseColor.WHITE);
			cell29.setPaddingTop(10);
			cell29.setColspan(3);
			cell29.setPaddingBottom(5);
			cell29.setBorderWidthLeft(0.2f);
			cell29.setBorderColor(BaseColor.WHITE);

			PdfPCell cell30 = new PdfPCell(new Paragraph(comment, mainContent));
			cell30.setBorderWidth(0.2f);
			cell30.setPaddingBottom(5);
			cell30.setPaddingLeft(10);
			cell30.setColspan(3);
			cell30.setBorderColor(BaseColor.WHITE);

			table2.addCell(cell29);
			table2.addCell(cell30);

			document.add(table2);

			/*
			 * For remaining details
			 */

			PdfPTable table4 = new PdfPTable(2);
			table4.setWidthPercentage(100);
			table4.setTotalWidth(530);
			Rectangle rect3 = new Rectangle(270, 700);
			table4.setWidthPercentage(new float[] { 170, 100 }, rect3);

			/*
			 * For receipt by
			 */

			PdfPCell cell81 = new PdfPCell(new Paragraph("", Font5));
			cell81.setBorderWidth(0.01f);
			cell81.setPaddingBottom(2);
			cell81.setPaddingTop(80); 
			cell81.setBorderColor(BaseColor.WHITE);

			/*
			 * PdfPCell cell82 = new PdfPCell(new Paragraph("", mainContent));
			 * cell82.setBorderWidth(0.01f); cell82.setPaddingBottom(2);
			 * cell82.setPaddingTop(10); cell82.setBorderColor(BaseColor.WHITE);
			 */
			/*
			 * Table for Prescription image
			 */
			PdfPTable imageTable = new PdfPTable(2);
			imageTable.setWidthPercentage(100);
			imageTable.setWidths(new int[] { 2, 2 });

			PdfPCell imageCell1 = new PdfPCell(signatureImg, true);
			imageCell1.setBorderColor(BaseColor.WHITE);
			imageCell1.setHorizontalAlignment(Element.ALIGN_RIGHT);
			imageCell1.setPaddingTop(80);

			PdfPCell imageCell2 = new PdfPCell(new Paragraph("", Font5));
			imageCell2.setBorderColor(BaseColor.WHITE);

			imageTable.addCell(imageCell1);
			imageTable.addCell(imageCell2);

			/*
			 * For Receivers Signature
			 */

			PdfPCell cell83 = new PdfPCell(imageTable);
			cell83.setBorderWidth(0.01f);
			cell83.setPaddingBottom(0);
			cell83.setPaddingTop(2);
			cell83.setPaddingLeft(80);
			cell83.setHorizontalAlignment(Element.ALIGN_RIGHT);
			cell83.setBorderColor(BaseColor.WHITE);

			/*
			 * PdfPCell cell811 = new PdfPCell(new Paragraph(" ", Font5));
			 * cell811.setBorderWidth(0.01f); cell811.setPaddingBottom(2);
			 * cell811.setPaddingTop(2); cell811.setBorderColor(BaseColor.WHITE);
			 */

			PdfPCell cell84 = new PdfPCell(
					new Paragraph(MDMap.get("MDName") + "\n" + MDMap.get("MDQualification") + "", Font5));
			cell84.setBorderWidth(0.01f);
			cell84.setPaddingBottom(2);
			cell84.setPaddingTop(2);
			// cell84.setColspan(2);
			cell84.setPaddingRight(50);
			cell84.setHorizontalAlignment(Element.ALIGN_RIGHT);
			cell84.setBorderColor(BaseColor.WHITE);

			table4.addCell(cell81);
			// table4.addCell(cell82);
			table4.addCell(cell83);
			/* table4.addCell(cell811); */
			table4.addCell(cell84);

			// document.add(table4);

			FooterTable3 event = new FooterTable3(table4);
			writer.setPageEvent(event);

			document.close();

			System.out.println("Successfully written and generated lab test Report PDF");

			status = "success";

		} catch (Exception exception) {

			exception.printStackTrace();
			status = "error";
		}

		return status;
	}

	public String convertAddNewOPDVisitPDF(int patientID, int visitID, String realPath, String pdfOutFIleName,
			int clinicID, int practiceID, String username, AmazonS3 s3, String s3reportFilePath, String bucketName) {
		// TODO Auto-generated method stub
		int i = 1;

		String visitDate = null;
		String status = "error";
		String regNo = "";
		String nextVisitDate = "";
		int nextVisitDays = 0;
		String investigation = "";
		String diagnosis = "";
		String advice = "";
		String docName = null;
		String signature = null;
		Image signImg = null;

		/*
		 * Declaring variable which stores the location for FreeSans.ttf file to print
		 * marathi text on pdf
		 */
		String marathiFontDir = realPath + "fonts/FreeSans.ttf";

		ConfigurationUtil configXMLUtil = new ConfigurationUtil();

		PatientForm patientForm = new PatientForm();
		try {
			connection = getConnection();

			ConfigXMLUtil xmlUtil = new ConfigXMLUtil();
			RegistrationDAOinf registrationDAOinf = new RegistrationDAOImpl();

			// Retrieving USER Details by PracticeID
			HashMap<String, String> MDMap = registrationDAOinf.retrieveUserDetails(practiceID, username);

			// File SignatureFile = new File(logoFilePath + File.separator +
			// MDMap.get("Signature"));
			signature = MDMap.get("Signature");

			docName = MDMap.get("FirstName") + " " + MDMap.get("LastName");

			if (signature == "" || signature == null) {
				signImg = null;
			} else if (signature.isEmpty()) {
				signImg = null;
			} else {

				S3ObjectInputStream s3ObjectInputStream = s3
						.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, signature))
						.getObjectContent();

				IOUtils.copy(s3ObjectInputStream, new FileOutputStream(new File(realPath + "images/" + signature)));

				signImg = Image.getInstance(realPath + "images/" + signature);
			}

			/*
			 * Getting image path from XML
			 */
			String A5ImagePath = configXMLUtil.getLetterHeadImage();

			System.out.println("A5IM.." + A5ImagePath);

			/*
			 * Getting page size from XMl
			 */
			String pageSize = configXMLUtil.getPageSize();

			/*
			 * Setting path to store PDF file
			 */
			File file1 = new File(realPath + "/" + pdfOutFIleName);

			System.out.println("PRESC FILE NAME IN CONVERT::" + file1);
			/*
			 * Creating Document for PDF
			 */
			Document document = null;

			/*
			 * Checking whether pageSize tag in XMl contains A5 or A4, according to that
			 * setting PDF page size
			 */
			if (pageSize.equals("A5")) {
				document = new Document(PageSize.A5);
			} else if (pageSize.equals("A4")) {
				document = new Document(PageSize.A4);
			}

			PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(file1));

			System.out.println("PRESC WRITER NAME IN CONVERT::" + writer);

			Font Font1 = new Font(Font.FontFamily.TIMES_ROMAN, 10, Font.NORMAL);
			Font Font3 = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.NORMAL);
			Font Font2 = new Font(Font.FontFamily.TIMES_ROMAN, 8, Font.NORMAL);
			Font Font4 = new Font(Font.FontFamily.TIMES_ROMAN, 5, Font.BOLD);
			Font Font5 = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.BOLD);
			Font Font6 = new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.BOLD);
			Font Font7 = new Font(Font.FontFamily.TIMES_ROMAN, 14, Font.BOLD);
			Font mainContent = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.NORMAL);
			Font mainContent1 = new Font(Font.FontFamily.TIMES_ROMAN, 15, Font.NORMAL);
			mainContent1.setColor(BaseColor.GRAY);

			Chunk bullet = new Chunk("\u2022", Font4);

			/*
			 * Defining marathi font
			 */
			Font marathiFont = FontFactory.getFont(marathiFontDir, BaseFont.IDENTITY_H, BaseFont.EMBEDDED);
			marathiFont.setSize(10);

			document.open();

			document.setMargins(36, 36, 55, 36);

			/*
			 * Adding image
			 */
			PdfContentByte canvas = writer.getDirectContentUnder();

			/*
			 * Checking whether pageSize is A4 or A5, according to that background image is
			 * being set
			 */

			Image image;

			if (pageSize.equals("A5")) {
				if (A5ImagePath == null || A5ImagePath == "") {

					image = null;

				} else {

					if (A5ImagePath.isEmpty()) {
						image = null;
					} else {

						S3ObjectInputStream s3ObjectInputStream = s3
								.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, A5ImagePath))
								.getObjectContent();

						IOUtils.copy(s3ObjectInputStream,
								new FileOutputStream(new File(realPath + "images/" + A5ImagePath)));

						image = Image.getInstance(realPath + "images/" + A5ImagePath);
						image.scaleToFit(PageSize.A5.getWidth(), PageSize.A5.getHeight());
						image.setAbsolutePosition(0, 0);

						canvas.saveState();
						PdfGState state = new PdfGState();
						canvas.setGState(state);
						canvas.addImage(image);
						canvas.restoreState();
					}

				}
			} else if (pageSize.equals("A4")) {
				System.out.println("..........A5ImagePath: " + A5ImagePath);
				if (A5ImagePath == null || A5ImagePath == "NULL") {

					image = null;

				} else {

					if (A5ImagePath.isEmpty()) {
						image = null;
					} else {

						S3ObjectInputStream s3ObjectInputStream = s3
								.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, A5ImagePath))
								.getObjectContent();

						IOUtils.copy(s3ObjectInputStream,
								new FileOutputStream(new File(realPath + "images/" + A5ImagePath)));

						image = Image.getInstance(realPath + "images/" + A5ImagePath);

						image.scaleToFit(PageSize.A4.getWidth(), PageSize.A4.getHeight());
						image.setAbsolutePosition(0, 0);

						canvas.saveState();
						PdfGState state = new PdfGState();
						canvas.setGState(state);
						canvas.addImage(image);
						canvas.restoreState();
					}

				}
			}
			Image prescrImg = Image.getInstance(realPath + "/images/Rx_icon.png");
			System.out.println("PAtient ID is SSS::" + patientID);

			String fetchDetailQuery2 = QueryMaker.OPD_PDF_RETRIEVE_PATIENT;

			preparedStatement1 = connection.prepareStatement(fetchDetailQuery2);
			preparedStatement1.setInt(1, patientID);
			resultSet1 = preparedStatement1.executeQuery();

			String fetchClinicRegNoQuery = QueryMaker.RETRIEVE_CLINIC_REG_NO_BY_CLINIC_ID;

			preparedStatement2 = connection.prepareStatement(fetchClinicRegNoQuery);

			preparedStatement2.setInt(1, clinicID);
			preparedStatement2.setInt(2, patientID);

			resultSet2 = preparedStatement2.executeQuery();

			while (resultSet2.next()) {
				regNo = resultSet2.getString("regNumber");
			}

			/*
			 * Retrieve NextVisitDate based on visitID from Visit table
			 */
			String fetchNextVisitDateQuery = QueryMaker.OPD_PDF_RETRIEVE_VISIT;

			preparedStatement4 = connection.prepareStatement(fetchNextVisitDateQuery);

			preparedStatement4.setInt(1, visitID);

			resultSet4 = preparedStatement4.executeQuery();

			while (resultSet4.next()) {
				SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");

				SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");

				if (resultSet4.getString("visitDate") == null || resultSet4.getString("visitDate") == ""
						|| resultSet4.getString("visitDate").isEmpty()) {
					visitDate = "";
				} else {
					visitDate = dateFormat.format(resultSet4.getDate("visitDate"));
				}
				nextVisitDate = resultSet4.getString("nextVisitDate");
				nextVisitDays = resultSet4.getInt("nextVisitDays");
				diagnosis = resultSet4.getString("diagnosis");
				advice = resultSet4.getString("advice") == null ? "" : resultSet4.getString("advice");
			}

			/*
			 * Setting header
			 */
			document.addCreator("eDhanvantari");
			document.addTitle("General Physician Prescription");

			while (resultSet1.next()) {

				PdfPTable table = new PdfPTable(3);
				table.setFooterRows(1);
				table.setWidthPercentage(100);
				Rectangle rect = new Rectangle(270, 700);
				table.setWidthPercentage(new float[] { 120, 75, 75 }, rect);

				PdfPCell cell0 = new PdfPCell(new Paragraph("", Font7));
				cell0.setPaddingTop(70);
				cell0.setPaddingBottom(10);
				cell0.setHorizontalAlignment(Element.ALIGN_CENTER);
				cell0.setUseBorderPadding(true);
				cell0.setColspan(3);
				cell0.setBorderWidthBottom(1f);
				// cell0.setBorderColorBottom(BaseColor.DARK_GRAY);
				cell0.setBorderColor(BaseColor.WHITE);

				/* For Patient Name */

				PdfPCell cell3 = new PdfPCell(new Paragraph("Reg.No : " + regNo, Font5));
				// cell3.setPaddingTop(100);
				cell3.setBorderWidth(0.2f);
				cell3.setColspan(2);
				cell3.setPaddingBottom(5);
				cell3.setBorderColor(BaseColor.WHITE);

				PdfPCell cell311 = new PdfPCell(new Paragraph("Date : " + visitDate, Font5));
				// cell311.setPaddingTop(100);
				cell311.setBorderWidth(0.2f);
				cell311.setPaddingBottom(5);
				cell311.setBorderColor(BaseColor.WHITE);

				String fullName = "";

				fullName = StringUtils.capitalize(resultSet1.getString("firstName")) + " "
						+ StringUtils.capitalize(resultSet1.getString("lastName"));

				PdfPCell cell2 = new PdfPCell(new Paragraph("Name : " + fullName, Font5));
				cell2.setBorderWidth(0.01f);
				cell2.setPaddingBottom(5);
				cell2.setBorderWidthLeft(0.2f);
				cell2.setBorderColor(BaseColor.WHITE);

				PdfPCell cell2002 = new PdfPCell(new Paragraph("" + resultSet1.getString("age") + " Years", Font5));
				cell2002.setBorderWidth(0.01f);
				cell2002.setPaddingBottom(5);
				cell2002.setBorderWidthLeft(0.2f);
				cell2002.setBorderColor(BaseColor.WHITE);

				PdfPCell cell2003 = new PdfPCell(
						new Paragraph("" + StringUtils.capitalize(resultSet1.getString("gender")), Font5));
				cell2003.setBorderWidth(0.01f);
				cell2003.setPaddingBottom(5);
				cell2003.setBorderWidthLeft(0.2f);
				cell2003.setBorderColor(BaseColor.WHITE);

				PdfPCell cell2004 = new PdfPCell(
						new Paragraph("Diagnosis: " + StringUtils.capitalize(diagnosis), Font5));
				cell2004.setBorderWidth(0.01f);
				cell2004.setPaddingBottom(5);
				cell2004.setColspan(3);
				cell2004.setBorderWidthLeft(0.2f);
				cell2004.setBorderColor(BaseColor.WHITE);

				table.addCell(cell0);
				table.addCell(cell3);
				table.addCell(cell311);
				table.addCell(cell2);
				table.addCell(cell2002);
				table.addCell(cell2003);
				table.addCell(cell2004);

				document.add(table);

			}

			String getVisitDetails = QueryMaker.RETRIEVE_VISIT_DETAILS;

			preparedStatement3 = connection.prepareStatement(getVisitDetails);

			preparedStatement3.setInt(1, visitID);

			resultSet3 = preparedStatement3.executeQuery();

			PdfPTable table4 = new PdfPTable(3);
			table4.setFooterRows(1);
			table4.setWidthPercentage(100);
			Rectangle rect = new Rectangle(270, 700);
			table4.setWidthPercentage(new float[] { 120, 75, 75 }, rect);

			while (resultSet3.next()) {
				System.out.println("in while loop1");
				String eyelidUpperOD = resultSet3.getString("eyelidUpperOD");
				String eyelidUpperOS = resultSet3.getString("eyelidUpperOS");
				String eyelidLowerOS = resultSet3.getString("eyelidLowerOS");
				String eyelidLowerOD = resultSet3.getString("eyelidLowerOD");
				String visualAcuityNearOS = resultSet3.getString("visualAcuityNearOS");
				String pinholeVisionDistOD = resultSet3.getString("pinholeVisionDistOD");
				String visualAcuityDistOD = resultSet3.getString("visualAcuityDistOD");
				String pinholeVisionDistOS = resultSet3.getString("pinholeVisionDistOS");
				String visualAcuityDistOS = resultSet3.getString("visualAcuityDistOS");
				String pinholeVisionNearOD = resultSet3.getString("pinholeVisionNearOD");
				String visualAcuityNearOD = resultSet3.getString("visualAcuityNearOD");
				String pinholeVisionNearOS = resultSet3.getString("pinholeVisionNearOS");
				String bcvaDistOD = resultSet3.getString("bcvaDistOD");
				String bcvaDistOS = resultSet3.getString("bcvaDistOS");
				String bcvaNearOD = resultSet3.getString("bcvaNearOD");
				String bcvaNearOS = resultSet3.getString("bcvaNearOS");
				String conjunctivaOD = resultSet3.getString("conjunctivaOD");
				String conjunctivaOS = resultSet3.getString("conjunctivaOS");
				String corneaOD = resultSet3.getString("corneaOD");
				String corneaOS = resultSet3.getString("corneaOS");
				String pupilOD = resultSet3.getString("pupilOD");
				String pupilOS = resultSet3.getString("pupilOS");
				String lensOD = resultSet3.getString("lensOD");
				String anteriorChamberOD = resultSet3.getString("anteriorChamberOD");
				String lensOS = resultSet3.getString("lensOS");
				String anteriorChamberOS = resultSet3.getString("anteriorChamberOS");
				String discOD = resultSet3.getString("discOD");
				String discOS = resultSet3.getString("discOS");
				String irisOD = resultSet3.getString("irisOD");
				String irisOS = resultSet3.getString("irisOS");
				String vesselOD = resultSet3.getString("vesselOD");
				String vesselOS = resultSet3.getString("vesselOS");
				String maculaOD = resultSet3.getString("maculaOD");
				String maculaOS = resultSet3.getString("maculaOS");
				String iopOD = resultSet3.getString("iopOD");
				String iopOS = resultSet3.getString("iopOS");
				String sacOD = resultSet3.getString("sacOD");
				String sacOS = resultSet3.getString("sacOS");
				String biometryK1OD = resultSet3.getString("biometryK1OD");
				String biometryK1OS = resultSet3.getString("biometryK1OS");
				String biometryK2OD = resultSet3.getString("biometryK2OD");
				String biometryK2OS = resultSet3.getString("biometryK2OS");
				String biometryAxialLengthOD = resultSet3.getString("biometryAxialLengthOD");
				String biometryAxialLengthOS = resultSet3.getString("biometryAxialLengthOS");
				String biometryIOLOD = resultSet3.getString("biometryIOLOD");
				String biometryIOLOS = resultSet3.getString("biometryIOLOS");
				String posteriorComment = resultSet3.getString("posteriorComment");
				String biometryComment = resultSet3.getString("biometryComment");
				String scleraOD = resultSet3.getString("scleraOD");
				String scleraOS = resultSet3.getString("scleraOS");

				PdfPCell cell34 = new PdfPCell(new Paragraph("Qty", Font5));
				cell34.setBorderWidth(0.01f);
				cell34.setPaddingBottom(5);
				cell34.setHorizontalAlignment(Element.ALIGN_RIGHT);
				cell34.setBorderColor(BaseColor.WHITE);

				table4.addCell(cell34);
				document.add(table4);
			}

			document.close();
			status = "success";
		} catch (Exception exception) {
			exception.printStackTrace();
			status = "error";
		}

		return status;
	}

	public String convertBDPReportPDF(int patientID, int visitID, String realPath, String pdfOutFIleName, int clinicID,
			int practiceID, String username, AmazonS3 s3, String s3reportFilePath, String bucketName) {
		// TODO Auto-generated method stub
		int i = 1;

		String visitDate = null;
		String status = "error";
		String regNo = "";
		String nextVisitDate = "";
		int nextVisitDays = 0;
		String investigation = "";
		String diagnosis = "";
		String advice = "";
		String docName = null;
		String signature = null;
		Image signImg = null;

		System.out.println("visitID" + visitID);
		String marathiFontDir = realPath + "fonts/FreeSans.ttf";

		ConfigurationUtil configXMLUtil = new ConfigurationUtil();

		try {
			connection = getConnection();

			ConfigXMLUtil xmlUtil = new ConfigXMLUtil();
			RegistrationDAOinf registrationDAOinf = new RegistrationDAOImpl();

			// Retrieving USER Details by PracticeID
			HashMap<String, String> MDMap = registrationDAOinf.retrieveUserDetails(practiceID, username);

			// File SignatureFile = new File(logoFilePath + File.separator +
			// MDMap.get("Signature"));
			signature = MDMap.get("Signature");

			docName = MDMap.get("FirstName") + " " + MDMap.get("LastName");

			if (signature == "" || signature == null) {
				signImg = null;
			} else if (signature.isEmpty()) {
				signImg = null;
			} else {

				S3ObjectInputStream s3ObjectInputStream = s3
						.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, signature))
						.getObjectContent();

				IOUtils.copy(s3ObjectInputStream, new FileOutputStream(new File(realPath + "images/" + signature)));

				signImg = Image.getInstance(realPath + "images/" + signature);
			}

			/*
			 * Getting image path from XML
			 */
			String A5ImagePath = configXMLUtil.getLetterHeadImage();

			System.out.println("A5IM.." + A5ImagePath);

			/*
			 * Getting page size from XMl
			 */
			String pageSize = configXMLUtil.getPageSize();

			/*
			 * Setting path to store PDF file
			 */
			File file1 = new File(realPath + "/" + pdfOutFIleName);

			System.out.println("PRESC FILE NAME IN CONVERT::" + file1);
			/*
			 * Creating Document for PDF
			 */
			Document document = new Document();

			/*
			 * Checking whether pageSize tag in XMl contains A5 or A4, according to that
			 * setting PDF page size
			 */
			if (pageSize.equals("A5")) {
				document = new Document(PageSize.A5);
			} else if (pageSize.equals("A4")) {
				document = new Document(PageSize.A4);
			}

			// PdfWriter writer = PdfWriter.getInstance(document, new
			// FileOutputStream(file1));

//			System.out.println("PRESC WRITER NAME IN CONVERT::"+writer);
//
//			Font Font1 = new Font(Font.FontFamily.TIMES_ROMAN, 10, Font.NORMAL);
//			Font Font3 = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.NORMAL);
//			Font Font2 = new Font(Font.FontFamily.TIMES_ROMAN, 8, Font.NORMAL);
//			Font Font4 = new Font(Font.FontFamily.TIMES_ROMAN, 5, Font.BOLD);
//			Font Font5 = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.BOLD);
//			Font Font6 = new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.BOLD);
//			Font Font7 = new Font(Font.FontFamily.TIMES_ROMAN, 14, Font.BOLD);
//			Font mainContent = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.NORMAL);
//			Font mainContent1 = new Font(Font.FontFamily.TIMES_ROMAN, 15, Font.NORMAL);
//			mainContent1.setColor(BaseColor.GRAY);
//
//			Chunk bullet = new Chunk("\u2022", Font4);
//
//			/*
//			 * Defining marathi font
//			 */
//			Font marathiFont = FontFactory.getFont(marathiFontDir, BaseFont.IDENTITY_H, BaseFont.EMBEDDED);
//			marathiFont.setSize(10);
//
//			document.open();
//
//			document.setMargins(36, 36, 55, 36);
//
//			/*
//			 * Adding image
//			 */
//			PdfContentByte canvas = writer.getDirectContentUnder();
//
//			/*
//			 * Checking whether pageSize is A4 or A5, according to that background image is
//			 * being set
//			 */
//			
//			Image image;
//			System.out.println("pageSize :: "+pageSize);
//			if (pageSize.equals("A5")) {
//				if (A5ImagePath == null || A5ImagePath == "") {
//
//					image = null;
//
//				} else {
//
//					if (A5ImagePath.isEmpty()) {
//						image = null;
//					} else {
//
//						S3ObjectInputStream s3ObjectInputStream = s3.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, A5ImagePath)).getObjectContent();
//						
//						IOUtils.copy(s3ObjectInputStream, new FileOutputStream(new File(realPath + "images/"+A5ImagePath)));
//						
//						image = Image.getInstance(realPath + "images/"+A5ImagePath);
//						image.scaleToFit(PageSize.A5.getWidth(), PageSize.A5.getHeight());	
//						image.setAbsolutePosition(0, 0);
//
//						canvas.saveState();
//						PdfGState state = new PdfGState();
//						canvas.setGState(state);
//						canvas.addImage(image);
//						canvas.restoreState();
//					}
//
//				}
//			} else if (pageSize.equals("A4")) {
//				System.out.println("..........A5ImagePath: "+A5ImagePath);
//				if (A5ImagePath == null || A5ImagePath == "NULL") {
//
//					image = null;
//
//				} else {
//
//					if (A5ImagePath.isEmpty()) {
//						image = null;
//					} else {
//
//						S3ObjectInputStream s3ObjectInputStream = s3.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, A5ImagePath)).getObjectContent();
//						
//						IOUtils.copy(s3ObjectInputStream, new FileOutputStream(new File(realPath + "images/"+A5ImagePath)));
//						
//						image = Image.getInstance(realPath + "images/"+A5ImagePath);
//						image.setAbsolutePosition(0, 0);
//
//						canvas.saveState();
//						PdfGState state = new PdfGState();
//						canvas.setGState(state);
//						canvas.addImage(image);
//						canvas.restoreState();
//					}
//
//				}
//			}
//			Image prescrImg = Image.getInstance(realPath + "/images/Rx_icon.png");
//			System.out.println("PAtient ID is SSS::" + patientID);

			document.addCreator("eDhanvantari");
			document.addTitle("BDP Reports");

			String fetchDetailQuery1 = QueryMaker.GET_VISIT_DATA;

			preparedStatement1 = connection.prepareStatement(fetchDetailQuery1);
			preparedStatement1.setInt(1, visitID);
			resultSet1 = preparedStatement1.executeQuery();

			while (resultSet1.next()) {
				// System.out.println(resultSet1.getString("visitNote"));

				String str = resultSet1.getString("visitNote");
				str = str.replace("line-height: 1.2;", "");
				// HtmlConverter.convertToPdf(str, new FileOutputStream(file1));

				FileOutputStream file = new FileOutputStream(new File(realPath + "/" + pdfOutFIleName));

				PdfWriter.getInstance(document, file);
				document.open();
				HTMLWorker htmlWorker = new HTMLWorker(document);
				htmlWorker.parse(new StringReader(str));
				document.close();
				file.close();
			}

			System.out.println("Successfully written and generated PDF Report");

			status = "success";

		} catch (Exception exception) {
			exception.printStackTrace();
			status = "error";
		}

		return status;
	}

	public String convertPrescriptionForPhysicianOPDPDF1(int patientID, int visitID, String realPath,
			String pdfOutFIleName, int clinicID, int practiceID, AmazonS3 s3, String s3reportFilePath,
			String bucketName) {

		int i = 1;

		String visitDate = null;
		String status = "error";
		String regNo = "";
		String nextVisitDate = "";
		int nextVisitDays = 0;
		String investigation = "";
		String diagnosis = "";
		String advice = "";
		String docName = null;
		String signature = null;
		Image signImg = null;

		/*
		 * Declaring variable which stores the location for FreeSans.ttf file to print
		 * marathi text on pdf
		 */
		String marathiFontDir = realPath + "fonts/FreeSans.ttf";

		ConfigurationUtil configXMLUtil = new ConfigurationUtil();

		PatientForm patientForm = new PatientForm();

		try {
			connection = getConnection();

			/*
			 * Generate the queries to fetch details
			 */
			String fetchDetailQuery1 = QueryMaker.OPD_PDF_RETRIEVE_PATIENT;

			preparedStatement1 = connection.prepareStatement(fetchDetailQuery1);
			preparedStatement1.setInt(1, patientID);
			resultSet1 = preparedStatement1.executeQuery();

			/*
			 * Generate the queries to fetch details
			 */
			String fetchDetailQuery4 = QueryMaker.OPD_PDF_RETRIEVE_PRESCRIPTIONPDF;

			preparedStatement = connection.prepareStatement(fetchDetailQuery4);

			preparedStatement.setInt(1, visitID);
			preparedStatement.setString(2, ActivityStatus.ACTIVE);

			resultSet = preparedStatement.executeQuery();

			String fetchDetailQuery4_investigation = QueryMaker.OPD_PDF_RETRIEVE_PRESCRIPTIONPDF_investigation;

			preparedStatement_investigation = connection.prepareStatement(fetchDetailQuery4_investigation);

			preparedStatement_investigation.setInt(1, visitID);

			resultSet_investigation = preparedStatement_investigation.executeQuery();

			/*
			 * Retrieve patient registration no based on patientID and clinicID from
			 * ClinicRegistration table
			 */
			String fetchClinicRegNoQuery = QueryMaker.RETRIEVE_CLINIC_REG_NO_BY_CLINIC_ID;

			preparedStatement2 = connection.prepareStatement(fetchClinicRegNoQuery);

			preparedStatement2.setInt(1, clinicID);
			preparedStatement2.setInt(2, patientID);

			resultSet2 = preparedStatement2.executeQuery();

			while (resultSet2.next()) {
				regNo = resultSet2.getString("regNumber");
			}

			/*
			 * Retrieve NextVisitDate based on visitID from Visit table
			 */
			String fetchNextVisitDateQuery = QueryMaker.OPD_PDF_RETRIEVE_VISIT;

			preparedStatement2 = connection.prepareStatement(fetchNextVisitDateQuery);

			preparedStatement2.setInt(1, visitID);

			resultSet2 = preparedStatement2.executeQuery();

			while (resultSet2.next()) {
				SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");

				SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");

				if (resultSet2.getString("visitDate") == null || resultSet2.getString("visitDate") == ""
						|| resultSet2.getString("visitDate").isEmpty()) {
					visitDate = "";
				} else {
					visitDate = dateFormat.format(resultSet2.getDate("visitDate"));
				}
				nextVisitDate = resultSet2.getString("nextVisitDate");
				nextVisitDays = resultSet2.getInt("nextVisitDays");
				diagnosis = resultSet2.getString("diagnosis");
				advice = resultSet2.getString("advice") == null ? "" : resultSet2.getString("advice");
			}

			boolean orthoCheck = false;

			// Check if the diagnosis is of type JSON
			if (new JSONValidator().isValid(diagnosis)) {
				orthoCheck = true;

				org.json.JSONArray diagnosisJSONArray = new org.json.JSONArray(diagnosis);

				diagnosis = "";

				for (int i_counter = 0; i_counter < diagnosisJSONArray.length(); i_counter++) {

					org.json.JSONObject diagnosisJSONObject = diagnosisJSONArray.getJSONObject(i_counter);

					diagnosis = diagnosis + ", " + diagnosisJSONObject.getString("diagnosis");

				}

				if (diagnosis.startsWith(",")) {
					diagnosis = diagnosis.substring(1);
				}
			}

			// FOR SIGNATURE PRINTING

			ConfigXMLUtil xmlUtil = new ConfigXMLUtil();

			/*
			 * Getting image path from XML
			 */
			String A5ImagePath = configXMLUtil.getLetterHeadImage();

			System.out.println("A5IM.." + A5ImagePath);

			/*
			 * Getting page size from XMl
			 */
			String pageSize = configXMLUtil.getPageSize();

			/*
			 * Setting path to store PDF file
			 */
			File file1 = new File(realPath + "/" + pdfOutFIleName);

			System.out.println("PRESC FILE NAME IN CONVERT::" + file1);
			/*
			 * Creating Document for PDF
			 */
			Document document = null;

			/*
			 * Checking whether pageSize tag in XMl contains A5 or A4, according to that
			 * setting PDF page size
			 */
			System.out.println("page size is prescription :: " + pageSize);
			if (pageSize.equals("A5")) {
				document = new Document(PageSize.A5);
			} else if (pageSize.equals("A4")) {
				document = new Document(PageSize.A4);
			}

			PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(file1));

			System.out.println("PRESC WRITER NAME IN CONVERT::" + writer);

			Font Font1 = new Font(Font.FontFamily.TIMES_ROMAN, 10, Font.NORMAL);
			Font Font3 = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.NORMAL);
			Font Font2 = new Font(Font.FontFamily.TIMES_ROMAN, 8, Font.NORMAL);
			Font Font4 = new Font(Font.FontFamily.TIMES_ROMAN, 5, Font.BOLD);
			Font Font5 = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.BOLD);
			Font Font6 = new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.BOLD);
			Font Font7 = new Font(Font.FontFamily.TIMES_ROMAN, 14, Font.BOLD);
			Font mainContent = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.NORMAL);
			Font mainContent1 = new Font(Font.FontFamily.TIMES_ROMAN, 15, Font.NORMAL);
			mainContent1.setColor(BaseColor.GRAY);

			Chunk bullet = new Chunk("\u2022", Font4);

			/*
			 * Defining marathi font
			 */
			Font marathiFont = FontFactory.getFont(marathiFontDir, BaseFont.IDENTITY_H, BaseFont.EMBEDDED);
			marathiFont.setSize(10);

			document.open();

			// document.setMargins(36, 36, 55, 36);

			/*
			 * Adding image
			 */
			PdfContentByte canvas = writer.getDirectContentUnder();

			/*
			 * Checking whether pageSize is A4 or A5, according to that background image is
			 * being set
			 */

			Image image;

			if (pageSize.equals("A5")) {
				if (A5ImagePath == null || A5ImagePath == "") {
					image = null;

				} else {

					if (A5ImagePath.isEmpty()) {
						image = null;
					} else {

						S3ObjectInputStream s3ObjectInputStream = s3
								.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, A5ImagePath))
								.getObjectContent();

						IOUtils.copy(s3ObjectInputStream,
								new FileOutputStream(new File(realPath + "images/" + A5ImagePath)));

						image = Image.getInstance(realPath + "images/" + A5ImagePath);

						image.scaleToFit(PageSize.A5.getWidth(), PageSize.A5.getHeight());
						image.setAbsolutePosition(0, 0);

						canvas.saveState();
						PdfGState state = new PdfGState();
						canvas.setGState(state);
						canvas.addImage(image);
						canvas.restoreState();
					}

				}
			} else if (pageSize.equals("A4")) {
				if (A5ImagePath == null || A5ImagePath == "") {

					image = null;

				} else {

					if (A5ImagePath.isEmpty()) {

						image = null;
					} else {

						S3ObjectInputStream s3ObjectInputStream = s3
								.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, A5ImagePath))
								.getObjectContent();

						IOUtils.copy(s3ObjectInputStream,
								new FileOutputStream(new File(realPath + "images/" + A5ImagePath)));

						image = Image.getInstance(realPath + "images/" + A5ImagePath);

						image.scaleToFit(PageSize.A4.getWidth(), PageSize.A4.getHeight());
						image.setAbsolutePosition(0, 0);

						canvas.saveState();
						PdfGState state = new PdfGState();
						canvas.setGState(state);
						canvas.addImage(image);
						canvas.restoreState();
					}

				}
			}

			Image prescrImg = Image.getInstance(realPath + "/images/Rx_icon.png");
			System.out.println("presc rx img is::" + prescrImg);

			/*
			 * Setting header
			 */
			document.addCreator("eDhanvantari");
			document.addTitle("General Physician Prescription");

			/*
			 * For displaying patient personal details
			 */
			while (resultSet1.next()) {
				PdfPTable table = new PdfPTable(3);

				table.setFooterRows(1);
				table.setWidthPercentage(100);
				Rectangle rect = new Rectangle(270, 700);
				table.setWidthPercentage(new float[] { 120, 75, 75 }, rect);

				PdfPCell cell0 = new PdfPCell(new Paragraph("Prescription", Font7));
				cell0.setPaddingTop(110);
				cell0.setPaddingBottom(10);
				cell0.setHorizontalAlignment(Element.ALIGN_CENTER);
				cell0.setUseBorderPadding(true);
				cell0.setColspan(3);
				cell0.setBorderWidthBottom(1f);
				// cell0.setBorderColorBottom(BaseColor.DARK_GRAY);
				cell0.setBorderColor(BaseColor.WHITE);

				/* For Patient Name */

				PdfPCell cell3 = new PdfPCell(new Paragraph("Reg.No : " + regNo, Font5));
				// cell3.setPaddingTop(100);
				cell3.setBorderWidth(0.2f);
				cell3.setColspan(2);
				cell3.setPaddingBottom(5);
				cell3.setBorderColor(BaseColor.WHITE);

				PdfPCell cell311 = new PdfPCell(new Paragraph("Date : " + visitDate, Font5));
				// cell311.setPaddingTop(100);
				cell311.setBorderWidth(0.2f);
				cell311.setPaddingBottom(5);
				cell311.setBorderColor(BaseColor.WHITE);

				String fullName = "";

				fullName = StringUtils.capitalize(resultSet1.getString("firstName")) + " "
						+ StringUtils.capitalize(resultSet1.getString("lastName"));

				PdfPCell cell2 = new PdfPCell(new Paragraph("Name : " + fullName, Font5));
				cell2.setBorderWidth(0.01f);
				cell2.setPaddingBottom(5);
				cell2.setBorderWidthLeft(0.2f);
				cell2.setBorderColor(BaseColor.WHITE);

				PdfPCell cell2002 = new PdfPCell(new Paragraph("" + resultSet1.getString("age") + " Years", Font5));
				cell2002.setBorderWidth(0.01f);
				cell2002.setPaddingBottom(5);
				cell2002.setBorderWidthLeft(0.2f);
				cell2002.setBorderColor(BaseColor.WHITE);

				PdfPCell cell2003 = new PdfPCell(
						new Paragraph("" + StringUtils.capitalize(resultSet1.getString("gender")), Font5));
				cell2003.setBorderWidth(0.01f);
				cell2003.setPaddingBottom(5);
				cell2003.setBorderWidthLeft(0.2f);
				cell2003.setBorderColor(BaseColor.WHITE);

				table.addCell(cell0);
				table.addCell(cell3);
				table.addCell(cell311);
				table.addCell(cell2);
				table.addCell(cell2002);
				table.addCell(cell2003);

				document.add(table);
			}

			PdfPTable table4 = new PdfPTable(4);

			table4.setWidthPercentage(100);
			Rectangle rect7 = new Rectangle(270, 700);
			table4.setWidthPercentage(new float[] { 50, 80, 35, 105 }, rect7);

			PdfPCell cell2004 = new PdfPCell(new Paragraph("Diagnosis: ", Font5));
			cell2004.setBorderWidth(0.01f);
			cell2004.setPaddingBottom(5);
			cell2004.setBorderWidthLeft(0.2f);
			cell2004.setBorderColor(BaseColor.WHITE);

			PdfPCell cell20040 = new PdfPCell(new Paragraph(StringUtils.capitalize(diagnosis), mainContent));
			cell20040.setBorderWidth(0.01f);
			cell20040.setPaddingBottom(5);
			cell20040.setBorderWidthLeft(0.2f);
			cell20040.setBorderColor(BaseColor.WHITE);

			table4.addCell(cell2004);
			table4.addCell(cell20040);

			if (advice == "" || advice == null) {
				PdfPCell cell2005 = new PdfPCell(new Paragraph(""));
				cell2005.setBorderWidth(0.01f);
				cell2005.setPaddingBottom(5);
				cell2005.setColspan(2);
				cell2005.setBorderWidthLeft(0.2f);
				cell2005.setBorderColor(BaseColor.WHITE);

				table4.addCell(cell2005);
			} else if (advice.isEmpty()) {
				PdfPCell cell2005 = new PdfPCell(new Paragraph(""));
				cell2005.setBorderWidth(0.01f);
				cell2005.setPaddingBottom(5);
				cell2005.setColspan(2);
				cell2005.setBorderWidthLeft(0.2f);
				cell2005.setBorderColor(BaseColor.WHITE);

				table4.addCell(cell2005);
			} else {

				PdfPCell cell2005 = new PdfPCell(new Paragraph("Advice: ", Font5));
				cell2005.setBorderWidth(0.01f);
				cell2005.setPaddingBottom(5);
				cell2005.setBorderWidthLeft(0.2f);
				cell2005.setBorderColor(BaseColor.WHITE);

				PdfPCell cell2006 = new PdfPCell(new Paragraph(StringUtils.capitalize(advice), marathiFont));
				cell2006.setBorderWidth(0.01f);
				cell2006.setPaddingBottom(5);
				cell2006.setHorizontalAlignment(Element.ALIGN_LEFT);
				cell2006.setBorderWidthLeft(0.2f);
				cell2006.setBorderColor(BaseColor.WHITE);

				table4.addCell(cell2005);
				table4.addCell(cell2006);
			}

			document.add(table4);

			/*
			 * For prescription
			 */
			PdfPTable table3 = new PdfPTable(3);
			table3.setWidthPercentage(100);
			Rectangle rect2 = new Rectangle(270, 700);
			table3.setWidthPercentage(new float[] { 30, 180, 60 }, rect2);

			// For blank space
			PdfPCell cell30 = new PdfPCell(new Paragraph(
					"                                                                                               "
							+ "                                                                                                                            "
							+ "                                                                                                                              ",
					Font2));
			cell30.setColspan(3);
			cell30.setBorderWidthRight(0f);
			cell30.setBorderWidthLeft(0f);
			cell30.setBorderWidthTop(0f);
			cell30.setBorderWidthBottom(0f);
			cell30.setBorderColorTop(BaseColor.WHITE);

			PdfPCell cell3011 = new PdfPCell(new Paragraph(
					"                                                                                               "
							+ "                                                                                                                            "
							+ "                                                                                                                              ",
					Font2));
			cell3011.setColspan(3);
			cell3011.setBorderWidthRight(0f);
			cell3011.setBorderWidthLeft(0f);
			cell3011.setBorderWidthTop(0f);
			cell3011.setBorderWidthBottom(0f);
			cell3011.setBorderColorTop(BaseColor.WHITE);

			/*
			 * Table for Prescription image
			 */
			PdfPTable imageTable = new PdfPTable(2);
			imageTable.setWidthPercentage(80);
			imageTable.setWidths(new int[] { 1, 2 });

			PdfPCell imageCell1 = new PdfPCell(prescrImg, true);
			imageCell1.setBorderColor(BaseColor.WHITE);

			PdfPCell imageCell2 = new PdfPCell(new Paragraph("", mainContent));
			imageCell2.setBorderColor(BaseColor.WHITE);

			imageTable.addCell(imageCell1);
			imageTable.addCell(imageCell2);

			// Gene
			PdfPCell cell3002 = new PdfPCell(imageTable);
			cell3002.setBorderWidth(0.0f);
			cell3002.setPaddingBottom(10);
			cell3002.setBorderColor(BaseColor.WHITE);

			PdfPCell cell320 = new PdfPCell(new Paragraph("", mainContent));
			cell320.setBorderWidth(0.01f);
			cell320.setPaddingBottom(5);
			cell320.setBorderColor(BaseColor.WHITE);

			// Amino Acid Change
			PdfPCell cell34 = new PdfPCell(new Paragraph("Qty", Font5));
			cell34.setBorderWidth(0.01f);
			cell34.setPaddingBottom(5);
			cell34.setHorizontalAlignment(Element.ALIGN_RIGHT);
			cell34.setBorderColor(BaseColor.WHITE);

			table3.addCell(cell30);
			table3.addCell(cell3011);
			table3.addCell(cell3002);
			table3.addCell(cell320);
			table3.addCell(cell34);

			document.add(table3);

			/*
			 * For signature in footer
			 */

			PdfPTable tableFooter = new PdfPTable(1);
			tableFooter.setTotalWidth(510);
			tableFooter.setWidthPercentage(100);

			// Table for Prescription image

			PdfPTable imageTable1 = new PdfPTable(2);
			imageTable1.setWidthPercentage(80);
			imageTable1.setWidths(new int[] { 1, 2 });

			PdfPCell imageCell11 = new PdfPCell(signImg, true);
			imageCell11.setBorderColor(BaseColor.WHITE);

			PdfPCell imageCell21 = new PdfPCell(new Paragraph("", mainContent));
			imageCell21.setBorderColor(BaseColor.WHITE);

			imageTable1.addCell(imageCell11);
			imageTable1.addCell(imageCell21);

			PdfPCell cellFooter = new PdfPCell(imageTable1);
			cellFooter.setBorderWidth(0.01f);
			cellFooter.setPaddingBottom(15);
			cellFooter.setPaddingLeft(100);
			cellFooter.setBorderColor(BaseColor.WHITE);

			PdfPCell cellFooter1 = new PdfPCell(new Paragraph(docName, Font5));
			cellFooter1.setBorderWidth(0.01f);
			cellFooter1.setPaddingBottom(15);
			cellFooter1.setPaddingLeft(100);
			cellFooter1.setBorderColor(BaseColor.WHITE);

			tableFooter.addCell(cellFooter);
			tableFooter.addCell(cellFooter1);

			// document.add(tableFooter);

			FooterTable1 event = new FooterTable1(tableFooter);
			writer.setPageEvent(event);

			document.close();

			System.out.println("Successfully written and generated General physicial Prescription PDF Report");

			status = "success";

			connection.close();

		} catch (Exception exception) {
			exception.printStackTrace();
			status = "error";
		}
		return status;

	}

	/**
	 * 
	 * @param patientID
	 * @param visitID
	 * @param realPath
	 * @param pdfFileName
	 * @param clinicID
	 * @param practiceID
	 * @param username
	 * @param s3
	 * @param s3reportFilePath
	 * @param bucketName
	 * @return String
	 */
	public String convertOrthoBillingPDF(int patientID, int visitID, String realPath, String pdfFileName, int clinicID,
			int practiceID, String username, AmazonS3 s3, String s3reportFilePath, String bucketName) {

		int count = 1;

		String status = null;

		String billDate = null;

		double totalBill = 0D;
		String diagnosis = null;
		String docName = null;

		/*
		 * To covert date from database into DD-MM-YYYY
		 */
		SimpleDateFormat databaseDate = new SimpleDateFormat("yyyy-MM-dd");

		SimpleDateFormat dateToBeDisplayed = new SimpleDateFormat("dd-MM-yyyy HH:mm");

		Date date = new Date();

		int receiptID = 0;
		String receiptNo = "";
		String receiptDate = "";
		String billingType = "";
		double amount = 0D;
		int visitTypeID = 0;
		String visitTypeName = "";
		String signature = null;
		Image signImg = null;
		String regNo = "";
		double consultationCharges = 0D;
		double totalAmt = 0D;
		double tax = 0D;
		double netAmt = 0D;
		double advAmt = 0D;
		double balanceAmt = 0D;
		String paymentType = "";
		String refReceiptNo = "";
		String ClinicianName = "";
		double totalDiscount = 0D;
		String patientName = "";
		String discountPercetage = "";
		/*
		 * Declaring variable which stores the location for FreeSans.ttf file to print
		 * marathi text on pdf
		 */
		String marathiFontDir = realPath + "fonts/FreeSans.ttf";

		ConfigurationUtil configXMLUtil = new ConfigurationUtil();

		try {
			connection = getConnection();

			/*
			 * Generate the queries to fetch details
			 */
			String fetchDetailQuery1 = QueryMaker.OPD_PDF_RETRIEVE_PATIENT;

			preparedStatement1 = connection.prepareStatement(fetchDetailQuery1);
			preparedStatement1.setInt(1, patientID);
			resultSet1 = preparedStatement1.executeQuery();

			String fetchDetailQuery2 = QueryMaker.OPD_PDF_RETRIEVE_VISIT;

			preparedStatement3 = connection.prepareStatement(fetchDetailQuery2);
			preparedStatement3.setInt(1, visitID);
			resultSet3 = preparedStatement3.executeQuery();

			// To fetch visit details from Visit Table
			while (resultSet3.next()) {
				diagnosis = resultSet3.getString("diagnosis");
				visitTypeID = resultSet3.getInt("visitTypeID");
			}

			// Check if the diagnosis is of type JSON
			if (new JSONValidator().isValid(diagnosis)) {

				org.json.JSONArray diagnosisJSONArray = new org.json.JSONArray(diagnosis);

				diagnosis = "";

				for (int i_counter = 0; i_counter < diagnosisJSONArray.length(); i_counter++) {

					org.json.JSONObject diagnosisJSONObject = diagnosisJSONArray.getJSONObject(i_counter);

					diagnosis = diagnosis + ", " + diagnosisJSONObject.getString("diagnosis");

				}

				if (diagnosis.startsWith(",")) {
					diagnosis = diagnosis.substring(1);
				}
			}

			String fetchDetailQuery3 = QueryMaker.OPD_PDF_RETRIEVE_VISIT_TYPE_NAME;
			preparedStatement4 = connection.prepareStatement(fetchDetailQuery3);
			preparedStatement4.setInt(1, visitTypeID);
			resultSet4 = preparedStatement4.executeQuery();
			while (resultSet4.next()) {
				visitTypeName = resultSet4.getString("name");
			}

			/*
			 * Generate the queries to fetch details
			 */
			String fetchDetailQuery4 = QueryMaker.RETREIVE_BILL_LIST;

			preparedStatement2 = connection.prepareStatement(fetchDetailQuery4);
			preparedStatement2.setInt(1, visitID);
			// preparedStatement2.setString(1, ActivityStatus.ACTIVE);
			resultSet2 = preparedStatement2.executeQuery();

			while (resultSet2.next()) {

				receiptNo = resultSet2.getString("receiptNo");
				receiptDate = dateToBeDisplayed.format(resultSet2.getTimestamp("receiptDate"));
				billingType = resultSet2.getString("billingType");
				amount = resultSet2.getDouble("netAmount");
				totalBill = resultSet2.getDouble("totalAmount");
				consultationCharges = resultSet2.getDouble("consultationCharges");
				tax = resultSet2.getDouble("totalDiscount");
				advAmt = resultSet2.getDouble("advPayment");
				balanceAmt = resultSet2.getDouble("balPayment");
				totalDiscount = resultSet2.getDouble("totalDiscount");
				paymentType = resultSet2.getString("paymentType");
				refReceiptNo = resultSet2.getString("referenceReceiptNo");
				ClinicianName = resultSet2.getString("clinicianName");
				receiptID = resultSet2.getInt("id");

				if (resultSet2.getString("discountType") == null || resultSet2.getString("discountType") == "") {
					discountPercetage = "";
				} else if (resultSet2.getString("discountType").isEmpty()) {
					discountPercetage = "";
				} else if (resultSet2.getString("discountType").equals("Percentage")) {
					discountPercetage = " (%)";
				} else {
					discountPercetage = "";
				}

			}

			/*
			 * Retrieve patient registration no based on patientID and clinicID from
			 * ClinicRegistration table
			 */
			String fetchClinicRegNoQuery = QueryMaker.RETRIEVE_CLINIC_REG_NO_BY_CLINIC_ID;

			preparedStatement = connection.prepareStatement(fetchClinicRegNoQuery);

			preparedStatement.setInt(1, clinicID);
			preparedStatement.setInt(2, patientID);

			resultSet2 = preparedStatement.executeQuery();

			while (resultSet2.next()) {
				regNo = resultSet2.getString("regNumber");
			}

			resultSet2.close();
			preparedStatement.close();

			String fetchBillItemDetailsQuery = QueryMaker.RETRIEVE_RECEIPT_ITEM_DETAILS_BY_RECEIPT_ID;

			preparedStatement = connection.prepareStatement(fetchBillItemDetailsQuery);

			preparedStatement.setInt(1, receiptID);

			resultSet2 = preparedStatement.executeQuery();

			/*
			 * Retrieving receipt item details from the ReceiptItems table for the
			 * corresponding receiptID
			 */

			RegistrationDAOinf registrationDAOinf = new RegistrationDAOImpl();

			// Retrieving USER Details by PracticeID
			HashMap<String, String> MDMap = registrationDAOinf.retrieveUserDetails(practiceID, username);

			// File SignatureFile = new File(logoFilePath + File.separator +
			// MDMap.get("Signature"));
			// signature = MDMap.get("Signature");
			docName = MDMap.get("FirstName") + " " + MDMap.get("LastName");

			/*
			 * Getting image path from XML
			 */
			String A5ImagePath = configXMLUtil.getLetterHeadImage();

			/*
			 * Getting page size from XMl
			 */
			String pageSize = configXMLUtil.getPageSize();

			/*
			 * Setting path to store PDF file
			 */
			File file = new File(realPath + "/" + pdfFileName);
			/*
			 * Creating Document for PDF
			 */
			Document document = null;

			/*
			 * Checking whether pageSize tag in XMl contains A5 or A4, according to that
			 * setting PDF page size
			 */
			if (pageSize.equals("A5")) {
				document = new Document(PageSize.A5);
			} else if (pageSize.equals("A4")) {
				document = new Document(PageSize.A4);
			}

			PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(file));

			Font Font1 = new Font(Font.FontFamily.TIMES_ROMAN, 10, Font.NORMAL);
			Font Font3 = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.NORMAL);
			Font Font2 = new Font(Font.FontFamily.TIMES_ROMAN, 8, Font.NORMAL);
			Font Font4 = new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.BOLD);
			Font Font5 = new Font(Font.FontFamily.TIMES_ROMAN, 10, Font.BOLD);
			Font Font7 = new Font(Font.FontFamily.TIMES_ROMAN, 14, Font.BOLD);
			Font mainContent = new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.NORMAL);
			Font mainContent1 = new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.NORMAL);
			mainContent1.setColor(BaseColor.GRAY);
			/*
			 * Defining marathi font
			 */
			Font marathiFont = FontFactory.getFont(marathiFontDir, BaseFont.IDENTITY_H, BaseFont.EMBEDDED);

			document.open();

			/*
			 * Adding image
			 */
			PdfContentByte canvas = writer.getDirectContentUnder();

			/*
			 * Checking whether pageSize is A4 or A5, according to that background image is
			 * being set
			 */

			Image image;

			if (pageSize.equals("A5")) {
				if (A5ImagePath == null || A5ImagePath == "") {
					image = null;

				} else {

					if (A5ImagePath.isEmpty()) {
						image = null;
					} else {

						S3ObjectInputStream s3ObjectInputStream = s3
								.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, A5ImagePath))
								.getObjectContent();

						IOUtils.copy(s3ObjectInputStream,
								new FileOutputStream(new File(realPath + "images/" + A5ImagePath)));

						image = Image.getInstance(realPath + "images/" + A5ImagePath);

						image.scaleToFit(PageSize.A5.getWidth(), PageSize.A5.getHeight());
						image.setAbsolutePosition(0, 0);

						canvas.saveState();
						PdfGState state = new PdfGState();
						canvas.setGState(state);
						canvas.addImage(image);
						canvas.restoreState();
					}

				}
			} else if (pageSize.equals("A4")) {
				if (A5ImagePath == null || A5ImagePath == "") {

					image = null;

				} else {

					if (A5ImagePath.isEmpty()) {

						image = null;
					} else {

						S3ObjectInputStream s3ObjectInputStream = s3
								.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, A5ImagePath))
								.getObjectContent();

						IOUtils.copy(s3ObjectInputStream,
								new FileOutputStream(new File(realPath + "images/" + A5ImagePath)));

						image = Image.getInstance(realPath + "images/" + A5ImagePath);

						image.scaleToFit(PageSize.A4.getWidth(), PageSize.A4.getHeight());
						image.setAbsolutePosition(0, 0);

						canvas.saveState();
						PdfGState state = new PdfGState();
						canvas.setGState(state);
						canvas.addImage(image);
						canvas.restoreState();
					}

				}
			}

			/*
			 * Setting header
			 */
			document.addCreator("eDhanvantari");
			document.addTitle("OPD Receipt");

			/*
			 * For displaying patient personal details
			 */
			while (resultSet1.next()) {

				if (resultSet1.getString("middleName") == null || resultSet1.getString("middleName") == ""
						|| resultSet1.getString("middleName").isEmpty()) {
					patientName = resultSet1.getString("firstName") + " " + resultSet1.getString("lastName");
				} else {
					patientName = resultSet1.getString("firstName") + " " + resultSet1.getString("middleName") + " "
							+ resultSet1.getString("lastName");
				}
			}

			PdfPTable table = new PdfPTable(2);

			table.setFooterRows(1);
			table.setWidthPercentage(100);
			Rectangle rect = new Rectangle(270, 700);
			table.setWidthPercentage(new float[] { 70, 200 }, rect);

			PdfPCell cell = new PdfPCell(new Paragraph("OPD Receipt", Font5));
			cell.setPaddingTop(110);
			cell.setPaddingBottom(5);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell.setUseBorderPadding(true);
			cell.setColspan(2);
			cell.setBorder(Rectangle.NO_BORDER);
//			cell.setBorderWidthBottom(1f);
//			cell.setBorderColorBottom(BaseColor.DARK_GRAY);

			/*
			 * For Patient Name
			 */
			PdfPCell cell2 = new PdfPCell(new Paragraph("Bill / Receipt /", Font4));
			cell2.setBorderWidth(0.01f);
			cell2.setPaddingBottom(5);
			cell2.setColspan(2);
			cell2.setBorderWidthLeft(0.2f);
			cell2.setBorderColor(BaseColor.WHITE);

			PdfPCell cell02 = new PdfPCell(new Paragraph("OPD Bill No.: " + receiptNo, Font4));
			cell02.setBorderWidth(0.01f);
			cell02.setPaddingBottom(5);
			cell02.setBorderWidthLeft(0.2f);
			cell02.setBorderColor(BaseColor.WHITE);

			PdfPCell cell03 = new PdfPCell(new Paragraph("Date: " + receiptDate, Font4));
			cell03.setBorderWidth(0.2f);
			cell03.setPaddingBottom(5);
			cell03.setHorizontalAlignment(Element.ALIGN_RIGHT);
			cell03.setBorderColor(BaseColor.WHITE);

			/*
			 * adding all cell to the table to create tabular structure
			 */

			table.addCell(cell);
			table.addCell(cell2);
			table.addCell(cell02);
			table.addCell(cell03);

			document.add(table);

			/*
			 * For prescription
			 */
			PdfPTable table3 = new PdfPTable(3);
			table3.setWidthPercentage(100);
			Rectangle rect2 = new Rectangle(270, 700);
			table3.setWidthPercentage(new float[] { 40, 120, 100 }, rect2);

			/*
			 * Creating Table header
			 */

			// For blank space
			PdfPCell cell30 = new PdfPCell(new Paragraph(
					"                                                                                               "
							+ "                                                                                                                            "
							+ "                                                                                                                              ",
					Font2));
			cell30.setColspan(3);
			cell30.setBorderWidthRight(0f);
			cell30.setBorderWidthLeft(0f);
			cell30.setBorderWidthTop(0f);
			cell30.setBorderWidthBottom(0f);
			cell30.setBorderColorTop(BaseColor.WHITE);

			// Sr NO
			PdfPCell cell32 = new PdfPCell(new Paragraph("Sr.No.", Font4));
			cell32.setBorderWidth(0.01f);
			cell32.setPaddingBottom(5);
			cell32.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell32.setBorderColor(BaseColor.BLACK);

			// Charges
			PdfPCell cell33 = new PdfPCell(new Paragraph("CHARGES", Font4));
			cell33.setBorderWidth(0.01f);
			cell33.setPaddingBottom(5);
			cell33.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell33.setBorderColor(BaseColor.BLACK);

			// Rate
			PdfPCell cell36 = new PdfPCell(new Paragraph("Rs.", Font4));
			cell36.setBorderWidth(0.01f);
			cell36.setPaddingBottom(5);
			cell36.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell36.setBorderColor(BaseColor.BLACK);

			table3.addCell(cell30);
			table3.addCell(cell32);
			table3.addCell(cell33);
			table3.addCell(cell36);

			int srNo = 1;

			while (resultSet2.next()) {

				// Sr NO
				PdfPCell cell032 = new PdfPCell(new Paragraph("" + srNo, mainContent));
				cell032.setBorderWidth(0.01f);
				cell032.setPaddingBottom(5);
				cell032.setHorizontalAlignment(Element.ALIGN_CENTER);
				cell032.setBorderColor(BaseColor.BLACK);

				// Charges
				PdfPCell cell033 = new PdfPCell(new Paragraph(resultSet2.getString("item"), mainContent));
				cell033.setBorderWidth(0.01f);
				cell033.setPaddingBottom(5);
				cell033.setHorizontalAlignment(Element.ALIGN_CENTER);
				cell033.setBorderColor(BaseColor.BLACK);

				// Rate
				PdfPCell cell036 = new PdfPCell(new Paragraph("" + resultSet2.getDouble("rate"), mainContent));
				cell036.setBorderWidth(0.01f);
				cell036.setPaddingBottom(5);
				cell036.setHorizontalAlignment(Element.ALIGN_CENTER);
				cell036.setBorderColor(BaseColor.BLACK);

				table3.addCell(cell032);
				table3.addCell(cell033);
				table3.addCell(cell036);

				srNo++;

			}

			// Sr NO
			PdfPCell cell028 = new PdfPCell(new Paragraph("" + srNo, mainContent));
			cell028.setBorderWidth(0.01f);
			cell028.setPaddingBottom(5);
			cell028.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell028.setBorderColor(BaseColor.BLACK);

			// Charges
			PdfPCell cell029 = new PdfPCell(new Paragraph("Consultation Charges", mainContent));
			cell029.setBorderWidth(0.01f);
			cell029.setPaddingBottom(5);
			cell029.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell029.setBorderColor(BaseColor.BLACK);

			// Rate
			PdfPCell cell030 = new PdfPCell(new Paragraph("" + consultationCharges, mainContent));
			cell030.setBorderWidth(0.01f);
			cell030.setPaddingBottom(5);
			cell030.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell030.setBorderColor(BaseColor.BLACK);

			table3.addCell(cell028);
			table3.addCell(cell029);
			table3.addCell(cell030);

			if (totalDiscount > 0D) {

				// DISCOUNT
				PdfPCell cell032 = new PdfPCell(new Paragraph("DISCOUNT" + discountPercetage, Font4));
				cell032.setBorderWidth(0.01f);
				cell032.setPaddingBottom(5);
				cell032.setColspan(2);
				cell032.setBorderWidthBottom(1f);
				cell032.setBorderColorBottom(BaseColor.BLACK);
				cell032.setHorizontalAlignment(Element.ALIGN_RIGHT);
				cell032.setBorderColor(BaseColor.BLACK);

				// TOTAL Amount
				PdfPCell cell033 = new PdfPCell(new Paragraph("" + totalDiscount, Font4));
				cell033.setBorderWidth(0.01f);
				cell033.setPaddingBottom(5);
				cell033.setBorderColorBottom(BaseColor.BLACK);
				cell033.setBorderWidthBottom(1f);
				cell033.setHorizontalAlignment(Element.ALIGN_CENTER);
				cell033.setBorderColor(BaseColor.BLACK);

				table3.addCell(cell032);
				table3.addCell(cell033);
			}

			// TOTAL
			PdfPCell cell032 = new PdfPCell(new Paragraph("TOTAL BILL", Font4));
			cell032.setBorderWidth(0.01f);
			cell032.setPaddingBottom(5);
			cell032.setColspan(2);
			cell032.setBorderWidthBottom(1f);
			cell032.setBorderColorBottom(BaseColor.BLACK);
			cell032.setHorizontalAlignment(Element.ALIGN_RIGHT);
			cell032.setBorderColor(BaseColor.BLACK);

			// TOTAL Amount
			PdfPCell cell033 = new PdfPCell(new Paragraph("" + amount, Font4));
			cell033.setBorderWidth(0.01f);
			cell033.setPaddingBottom(5);
			cell033.setBorderColorBottom(BaseColor.BLACK);
			cell033.setBorderWidthBottom(1f);
			cell033.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell033.setBorderColor(BaseColor.BLACK);

			table3.addCell(cell032);
			table3.addCell(cell033);

			// Amount Paid
			PdfPCell cell0321 = new PdfPCell(new Paragraph("AMOUNT PAID", Font4));
			cell0321.setBorderWidth(0.01f);
			cell0321.setPaddingBottom(5);
			cell0321.setColspan(2);
			cell0321.setBorderWidthBottom(1f);
			cell0321.setBorderColorBottom(BaseColor.BLACK);
			cell0321.setHorizontalAlignment(Element.ALIGN_RIGHT);
			cell0321.setBorderColor(BaseColor.BLACK);

			// Amount Paid
			PdfPCell cell0331 = new PdfPCell(new Paragraph("" + amount, Font4));
			cell0331.setBorderWidth(0.01f);
			cell0331.setPaddingBottom(5);
			cell0331.setBorderColorBottom(BaseColor.BLACK);
			cell0331.setBorderWidthBottom(1f);
			cell0331.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell0331.setBorderColor(BaseColor.BLACK);

			table3.addCell(cell0321);
			table3.addCell(cell0331);

			if (balanceAmt > 0D) {

				// Amount Paid
				PdfPCell cell1 = new PdfPCell(new Paragraph("BALANCE AMOUNT", Font4));
				cell1.setBorderWidth(0.01f);
				cell1.setPaddingBottom(5);
				cell1.setColspan(2);
				cell1.setBorderWidthBottom(1f);
				cell1.setBorderColorBottom(BaseColor.BLACK);
				cell1.setHorizontalAlignment(Element.ALIGN_RIGHT);
				cell1.setBorderColor(BaseColor.BLACK);

				// Amount Paid
				PdfPCell celll2 = new PdfPCell(new Paragraph("" + balanceAmt, Font4));
				celll2.setBorderWidth(0.01f);
				celll2.setPaddingBottom(5);
				celll2.setBorderColorBottom(BaseColor.BLACK);
				celll2.setBorderWidthBottom(1f);
				celll2.setHorizontalAlignment(Element.ALIGN_CENTER);
				celll2.setBorderColor(BaseColor.BLACK);

				table3.addCell(cell1);
				table3.addCell(celll2);

			}

			document.add(table3);

			PdfPTable table4 = new PdfPTable(1);
			table4.setWidthPercentage(100);
			Rectangle rect3 = new Rectangle(270, 700);
			table4.setWidthPercentage(new float[] { 270 }, rect3);

			PdfPCell cell571 = new PdfPCell(new Paragraph("", mainContent));
			cell571.setBorderWidth(0.01f);
			cell571.setPaddingBottom(2);
			cell571.setPaddingTop(2);
			cell571.setBorderColor(BaseColor.WHITE);

			/*
			 * For Payment Type
			 */
			PdfPCell cell57 = new PdfPCell(new Paragraph("Received Cash / Cheque: " + paymentType, mainContent));
			cell57.setBorderWidth(0.01f);
			cell57.setPaddingBottom(2);
			cell57.setPaddingTop(2);
			cell57.setBorderColor(BaseColor.WHITE);

			PdfPCell cell61 = new PdfPCell(new Paragraph("Name: " + patientName, mainContent));
			cell61.setBorderWidth(0.01f);
			cell61.setBorderWidthBottom(0.5f);
			cell61.setPaddingTop(5);
			// cell61.setBorderColorBottom(BaseColor.GRAY);
			cell61.setBorderColor(BaseColor.WHITE);

			PdfPCell cell62 = new PdfPCell(new Paragraph("Diagnosis: " + diagnosis, mainContent));
			cell62.setBorderWidth(0.01f);
			cell62.setBorderWidthBottom(0.5f);
			cell62.setPaddingTop(5);
			// cell61.setBorderColorBottom(BaseColor.GRAY);
			cell62.setBorderColor(BaseColor.WHITE);

			table4.addCell(cell571);
			table4.addCell(cell57);
			table4.addCell(cell61);
			table4.addCell(cell62);

			document.add(table4);

			/*
			 * For signature in footer
			 */
			PdfPTable footer_table = new PdfPTable(1);
			footer_table.setTotalWidth(350);

			PdfPCell sign_cell = new PdfPCell(new Paragraph("" + docName, Font4));
			// cell1111.setBackgroundColor(BaseColor.BLACK);
			sign_cell.setHorizontalAlignment(Element.ALIGN_CENTER);
			sign_cell.setPaddingTop(20);
			sign_cell.setBorderColor(BaseColor.WHITE);

			footer_table.addCell(sign_cell);

			FooterTable1 event = new FooterTable1(footer_table);
			writer.setPageEvent(event);

			document.close();

			System.out.println("Successfully written and generated Ortho Billing PDF Report");

			status = "success";

			resultSet2.close();
			preparedStatement.close();
			preparedStatement2.close();

			resultSet1.close();
			preparedStatement1.close();

			resultSet3.close();
			preparedStatement3.close();

			resultSet4.close();
			preparedStatement4.close();

			connection.close();

		} catch (Exception exception) {
			exception.printStackTrace();
			status = "error";
		}

		return status;

	}

	/**
	 * 
	 * @param visitID
	 * @param patientID
	 * @param clinicID
	 * @param realPath
	 * @param pdfFIleName
	 * @param visitType
	 * @param s3
	 * @param s3reportFilePath
	 * @param bucketName
	 * @param practiceID
	 * @param username
	 * @return
	 */
	public String convertOphthalmOPDPDF(int visitID, int patientID, int clinicID, String realPath, String pdfFIleName,
			String visitType, AmazonS3 s3, String s3reportFilePath, String bucketName, int practiceID,
			String username) {

		String visitDate = null;
		String diagnosis = null;
		String comment = null;

		String systemHistory = "";
		String occularHistory = "";
		String personalHistory = "";

		String complainingOf = "";

		String status = null;

		String nextDayVisitText = "ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚ÂµÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¸ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¨ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚ÂªÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¹ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¸ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â®ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¸ ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¹ÃƒÆ’Ã¢â‚¬Â¦ÃƒÂ¢Ã¢â€šÂ¬Ã…â€œÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¨ ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â­ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¸ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â£ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡";
		String nextDayVisit = null;

		String regNo = "";
		String nextVisitDate = "";
		int nextVisitDays = 0;
		String investigation = "";
		String advice = "";
		String docName = null;
		String signature = null;
		Image signImg = null;

		/*
		 * Declaring variable which stores the location for FreeSans.ttf file to print
		 * marathi text on pdf
		 */
		String marathiFontDir = realPath + "fonts/FreeSans.ttf";

		ConfigurationUtil configXMLUtil = new ConfigurationUtil();

		try {
			connection = getConnection();

			/*
			 * Generate the queries to fetch details
			 */
			String fetchDetailQuery1 = QueryMaker.OPD_PDF_RETRIEVE_PATIENT;

			preparedStatement1 = connection.prepareStatement(fetchDetailQuery1);
			preparedStatement1.setInt(1, patientID);
			resultSet1 = preparedStatement1.executeQuery();

			/*
			 * Generating query 2
			 */
			String fetchDetailQuery2 = QueryMaker.OPD_PDF_RETRIEVE_VISIT;

			preparedStatement2 = connection.prepareStatement(fetchDetailQuery2);
			preparedStatement2.setInt(1, visitID);
			resultSet2 = preparedStatement2.executeQuery();

			// To fetch visit details from Visit Table
			while (resultSet2.next()) {

				SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");

				SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");

				if (resultSet2.getString("visitDate") == null || resultSet2.getString("visitDate") == ""
						|| resultSet2.getString("visitDate").isEmpty()) {
					visitDate = "";
				} else {
					visitDate = dateFormat.format(resultSet2.getDate("visitDate"));
				}

				diagnosis = resultSet2.getString("diagnosis");
				comment = resultSet2.getString("visitNote");
				systemHistory = resultSet2.getString("systemicHistory");
				complainingOf = resultSet2.getString("complainingOf");
				occularHistory = resultSet2.getString("occularHistory");
				personalHistory = resultSet2.getString("personalHistory");
				nextDayVisit = resultSet2.getInt("nextVisitDays") + " " + nextDayVisitText;

				nextVisitDate = resultSet2.getString("nextVisitDate");
				nextVisitDays = resultSet2.getInt("nextVisitDays");
				advice = resultSet2.getString("advice") == null ? "" : resultSet2.getString("advice");

				System.out.println("Marathi text ::: " + nextDayVisit);
			}

			/*
			 * Generating query 3
			 */
			String fetchDetailQuery3 = QueryMaker.OPD_PDF_RETRIEVE_OPD_VISIT;

			preparedStatement3 = connection.prepareStatement(fetchDetailQuery3);
			preparedStatement3.setInt(1, visitID);
			resultSet3 = preparedStatement3.executeQuery();

			/*
			 * Generate the queries to fetch details
			 */
			String fetchInvestigationDetailQuery = QueryMaker.RETREIVE_Investigations_Comma_SEPARATED_Test_LIST;

			preparedStatement4 = connection.prepareStatement(fetchInvestigationDetailQuery);

			preparedStatement4.setString(1, ActivityStatus.ACTIVE);
			preparedStatement4.setInt(2, visitID);

			resultSet4 = preparedStatement4.executeQuery();

			/*
			 * Generate the queries to fetch details
			 */
			String fetchDetailQuery4 = QueryMaker.OPD_PDF_RETRIEVE_PRESCRIPTIONPDF;

			preparedStatement5 = connection.prepareStatement(fetchDetailQuery4);

			preparedStatement5.setInt(1, visitID);
			preparedStatement5.setString(2, ActivityStatus.ACTIVE);

			resultSet5 = preparedStatement5.executeQuery();

			RegistrationDAOinf registrationDAOinf = new RegistrationDAOImpl();

			// Retrieving USER Details by PracticeID
			HashMap<String, String> MDMap = registrationDAOinf.retrieveUserDetails(practiceID, username);

			// File SignatureFile = new File(logoFilePath + File.separator +
			// MDMap.get("Signature"));
			signature = MDMap.get("Signature");
			docName = MDMap.get("FirstName") + " " + MDMap.get("LastName");

			// System.out.println("doc name ::" + docName);

			if (signature == "" || signature == null) {
				signImg = null;
			} else if (signature.isEmpty()) {
				signImg = null;
			} else {

				S3ObjectInputStream s3ObjectInputStream = s3
						.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, signature))
						.getObjectContent();

				IOUtils.copy(s3ObjectInputStream, new FileOutputStream(new File(realPath + "images/" + signature)));

				signImg = Image.getInstance(realPath + "images/" + signature);
			}

			/*
			 * Image path for posterior segment images
			 */
			String posteriorODImage = realPath + File.separator + "images" + File.separator + "posterio_segment.png";

			String posteriorOSImage = realPath + File.separator + "images" + File.separator + "posterio_segment_1.png";

			/*
			 * Getting image path from XML
			 */
			String A5ImagePath = configXMLUtil.getLetterHeadImage();

			/*
			 * Getting page size from XMl
			 */
			// String pageSize = configXMLUtil.getPageSize();
			String pageSize = configXMLUtil.getPageSize();

			System.out.println("pageSize In visit:: :" + pageSize);

			/*
			 * Setting path to store PDF file
			 */
			File file = new File(realPath + "/" + pdfFIleName);
			/*
			 * Creating Document for PDF
			 */
			Document document = null;

			/*
			 * Checking whether pageSize tag in XMl contains A5 or A4, according to that
			 * setting PDF page size
			 */
			if (pageSize.equals("A5")) {
				document = new Document(PageSize.A5);
			} else if (pageSize.equals("A4")) {
				document = new Document(PageSize.A4);
			}

			PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(file));

			Font Font1 = new Font(Font.FontFamily.TIMES_ROMAN, 10, Font.NORMAL);
			Font Font3 = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.NORMAL);
			Font Font2 = new Font(Font.FontFamily.TIMES_ROMAN, 8, Font.NORMAL);
			Font Font4 = new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.BOLD);
			Font Font5 = new Font(Font.FontFamily.TIMES_ROMAN, 10, Font.BOLD);
			Font mainContent = new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.NORMAL);
			Font mainContent1 = new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.NORMAL);
			mainContent1.setColor(BaseColor.GRAY);

			Chunk bullet = new Chunk("\u2022", Font4);

			/*
			 * Defining marathi font
			 */
			Font marathiFont = FontFactory.getFont(marathiFontDir, BaseFont.IDENTITY_H, BaseFont.EMBEDDED);
			marathiFont.setSize(9);

			document.open();

			document.setMargins(45, 45, 55, 100);

			/*
			 * Adding image
			 */
			PdfContentByte canvas = writer.getDirectContentUnder();

			Image image;

			if (pageSize.equals("A5")) {
				if (A5ImagePath == null || A5ImagePath == "") {

					image = null;

				} else {

					if (A5ImagePath.isEmpty()) {
						image = null;
					} else {

						S3ObjectInputStream s3ObjectInputStream = s3
								.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, A5ImagePath))
								.getObjectContent();

						IOUtils.copy(s3ObjectInputStream,
								new FileOutputStream(new File(realPath + "images/" + A5ImagePath)));

						image = Image.getInstance(realPath + "images/" + A5ImagePath);

						image.scaleToFit(PageSize.A5.getWidth(), PageSize.A5.getHeight());

						image.setAbsolutePosition(0, 0);

						canvas.saveState();
						PdfGState state = new PdfGState();
						canvas.setGState(state);
						canvas.addImage(image);
						canvas.restoreState();
					}

				}
			} else if (pageSize.equals("A4")) {
				if (A5ImagePath == null || A5ImagePath == "") {

					image = null;

				} else {

					if (A5ImagePath.isEmpty()) {
						image = null;
					} else {

						S3ObjectInputStream s3ObjectInputStream = s3
								.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, A5ImagePath))
								.getObjectContent();

						IOUtils.copy(s3ObjectInputStream,
								new FileOutputStream(new File(realPath + "images/" + A5ImagePath)));

						image = Image.getInstance(realPath + "images/" + A5ImagePath);

						image.scaleToFit(PageSize.A4.getWidth(), PageSize.A4.getHeight());

						image.setAbsolutePosition(0, 0);

						canvas.saveState();
						PdfGState state = new PdfGState();
						canvas.setGState(state);
						canvas.addImage(image);
						canvas.restoreState();
					}

				}
			}

			Image prescrImg = Image.getInstance(realPath + "/images/Rx_icon.png");
			// System.out.println("presc rx img is::" + prescrImg);

			Image image1 = Image.getInstance(posteriorODImage);

			Image image2 = Image.getInstance(posteriorOSImage);

			/*
			 * Setting header
			 */
			document.addCreator("eDhanvantari");
			document.addTitle("OPD Visit");

			/*
			 * For displaying patient personal details
			 */
			while (resultSet1.next()) {
				PdfPTable table = new PdfPTable(4);

				table.setFooterRows(1);
				table.setWidthPercentage(100);
				Rectangle rect = new Rectangle(270, 700);
				table.setWidthPercentage(new float[] { 75, 75, 75, 75 }, rect);

				PdfPCell cell = new PdfPCell(new Paragraph("Patient Details", Font5));
				cell.setPaddingTop(100);
				cell.setPaddingBottom(5);
				cell.setHorizontalAlignment(Element.ALIGN_CENTER);
				cell.setUseBorderPadding(true);
				cell.setColspan(4);
				cell.setBorderWidthBottom(1f);
				// cell.setBorderColorBottom(BaseColor.DARK_GRAY);
				cell.setBorderColor(BaseColor.WHITE);

				/*
				 * For Patient Name
				 */
				PdfPCell cell2 = new PdfPCell(new Paragraph("Patient Name", mainContent));
				cell2.setBorderWidth(0.01f);
				cell2.setPaddingBottom(5);
				cell2.setBorderWidthLeft(0.2f);
				cell2.setBorderColor(BaseColor.LIGHT_GRAY);

				String fullName = resultSet1.getString("firstName") + " " + resultSet1.getString("middleName") + " "
						+ resultSet1.getString("lastName") + " (" + resultSet1.getInt("id") + ")";

				PdfPCell cell3 = new PdfPCell(new Paragraph(fullName, mainContent));
				cell3.setBorderWidth(0.2f);
				cell3.setPaddingBottom(5);
				cell3.setBorderColor(BaseColor.LIGHT_GRAY);

				/*
				 * For Date
				 */

				PdfPCell cell4 = new PdfPCell(new Paragraph("Date", mainContent));
				cell4.setBorderWidth(0.01f);
				cell4.setPaddingBottom(5);
				cell4.setBorderWidthLeft(0.2f);
				cell4.setBorderColor(BaseColor.LIGHT_GRAY);

				PdfPCell cell5 = new PdfPCell(new Paragraph(visitDate, mainContent));
				cell5.setBorderWidth(0.2f);
				cell5.setPaddingBottom(5);
				cell5.setBorderColor(BaseColor.LIGHT_GRAY);

				/*
				 * For Age
				 */
				PdfPCell cell6 = new PdfPCell(new Paragraph("Age", mainContent));
				cell6.setBorderWidth(0.01f);
				cell6.setPaddingBottom(5);
				cell6.setBorderWidthLeft(0.2f);
				cell6.setBorderColor(BaseColor.LIGHT_GRAY);

				PdfPCell cell7 = new PdfPCell(new Paragraph(resultSet1.getString("age"), mainContent));
				cell7.setBorderWidth(0.2f);
				cell7.setPaddingBottom(5);
				cell7.setBorderColor(BaseColor.LIGHT_GRAY);

				/*
				 * For Diagnosis
				 */
				PdfPCell cell8 = new PdfPCell(new Paragraph("Gender", mainContent));
				cell8.setBorderWidth(0.01f);
				cell8.setPaddingBottom(5);
				cell8.setBorderWidthLeft(0.2f);
				cell8.setBorderColor(BaseColor.LIGHT_GRAY);

				PdfPCell cell9 = new PdfPCell(new Paragraph(resultSet1.getString("gender"), mainContent));
				cell9.setBorderWidth(0.2f);
				cell9.setPaddingBottom(2);
				cell9.setBorderColor(BaseColor.LIGHT_GRAY);

				/*
				 * For Diagnosis
				 */
				/*
				 * PdfPCell cell10 = new PdfPCell(new Paragraph("Diagnosis", mainContent));
				 * cell10.setBorderWidth(0.01f); cell10.setPaddingBottom(5);
				 * cell10.setBorderWidthLeft(0.2f); cell10.setBorderColor(BaseColor.LIGHT_GRAY);
				 * 
				 * PdfPCell cell11 = new PdfPCell(new Paragraph(diagnosis, mainContent));
				 * cell11.setBorderWidth(0.2f); cell11.setPaddingBottom(2);
				 * cell11.setBorderColor(BaseColor.LIGHT_GRAY);
				 */

				/*
				 * For Visit Type
				 */
				PdfPCell cell12 = new PdfPCell(new Paragraph("Visit Type", mainContent));
				cell12.setBorderWidth(0.01f);
				cell12.setPaddingBottom(5);
				cell12.setBorderWidthLeft(0.2f);
				cell12.setBorderColor(BaseColor.LIGHT_GRAY);

				PdfPCell cell13 = new PdfPCell(new Paragraph(visitType, mainContent));
				cell13.setBorderWidth(0.2f);
				cell13.setPaddingBottom(2);
				cell13.setColspan(3);
				cell13.setBorderColor(BaseColor.LIGHT_GRAY);
				cell13.setBorderWidthLeft(0.0f);
				cell13.setBorderWidthTop(0.0f);
				cell13.setBorderColorBottom(BaseColor.LIGHT_GRAY);

				/*
				 * For Complaining Of
				 */
				PdfPCell cellCof = new PdfPCell(new Paragraph("Complaining Of", mainContent));
				cellCof.setBorderWidth(0.01f);
				cellCof.setPaddingBottom(5);
				cellCof.setBorderWidthLeft(0.2f);
				cellCof.setBorderColor(BaseColor.LIGHT_GRAY);
				cellCof.setBorderWidthLeft(0.2f);
				cellCof.setBorderWidthTop(0.0f);
				cellCof.setBorderColorBottom(BaseColor.LIGHT_GRAY);

				PdfPCell cellCofVal = new PdfPCell(new Paragraph(StringUtils.capitalize(complainingOf), mainContent));
				cellCofVal.setBorderWidth(0.5f);
				cellCofVal.setColspan(3);
				cellCofVal.setPaddingBottom(2);
				cellCofVal.setBorderColor(BaseColor.LIGHT_GRAY);
				cellCofVal.setBorderWidthLeft(0.0f);
				cellCofVal.setBorderWidthTop(0.0f);
				cellCofVal.setBorderWidthBottom(0.1f);

				/*
				 * For Medical Notes
				 */
				PdfPCell cell14 = new PdfPCell(new Paragraph("Medical Notes", Font4));
				cell14.setBorderWidth(0.01f);
				cell14.setPaddingBottom(5);
				cell14.setColspan(4);
				cell14.setBorderWidthLeft(0.2f);
				cell14.setBorderColor(BaseColor.LIGHT_GRAY);
				cell14.setBorderWidthLeft(0.2f);
				cell14.setBorderWidthTop(0.0f);
				cell14.setBorderColorBottom(BaseColor.LIGHT_GRAY);

				/*
				 * For Systemic History
				 */
				PdfPCell cellSH = new PdfPCell(new Paragraph("1. Systemic History", mainContent));
				cellSH.setBorderWidth(0.01f);
				cellSH.setPaddingBottom(5);
				cellSH.setPaddingLeft(5);
				cellSH.setBorderWidthLeft(0.2f);
				cellSH.setBorderColor(BaseColor.LIGHT_GRAY);
				cellSH.setBorderWidthLeft(0.2f);
				cellSH.setBorderWidthTop(0.0f);
				cellSH.setBorderColorBottom(BaseColor.LIGHT_GRAY);

				PdfPCell cell15 = new PdfPCell(new Paragraph(StringUtils.capitalize(systemHistory), mainContent));
				cell15.setBorderWidth(0.5f);
				cell15.setColspan(3);
				cell15.setPaddingBottom(2);
				cell15.setBorderColor(BaseColor.LIGHT_GRAY);
				cell15.setBorderWidthLeft(0.0f);
				cell15.setBorderWidthTop(0.0f);
				cell15.setBorderWidthBottom(0.1f);
				// cell15.setBorderColorBottom(BaseColor.LIGHT_GRAY);

				/*
				 * For Occular History
				 */
				PdfPCell cellOH = new PdfPCell(new Paragraph("2. Ocular History", mainContent));
				cellOH.setBorderWidth(0.01f);
				cellOH.setPaddingBottom(5);
				cellOH.setPaddingLeft(5);
				cellOH.setBorderWidthLeft(0.2f);
				cellOH.setBorderColor(BaseColor.LIGHT_GRAY);
				cellOH.setBorderWidthLeft(0.2f);
				cellOH.setBorderWidthTop(0.0f);
				cellOH.setBorderColorBottom(BaseColor.LIGHT_GRAY);

				PdfPCell cellOHVal = new PdfPCell(new Paragraph(StringUtils.capitalize(occularHistory), mainContent));
				cellOHVal.setBorderWidth(0.5f);
				cellOHVal.setColspan(3);
				cellOHVal.setPaddingBottom(2);
				cellOHVal.setBorderColor(BaseColor.LIGHT_GRAY);
				cellOHVal.setBorderWidthLeft(0.0f);
				cellOHVal.setBorderWidthTop(0.0f);
				cellOHVal.setBorderWidthBottom(0.1f);

				/*
				 * For Personal History
				 */
				PdfPCell cellPH = new PdfPCell(new Paragraph("3. Personal History", mainContent));
				cellPH.setBorderWidth(0.01f);
				cellPH.setPaddingBottom(5);
				cellPH.setPaddingLeft(5);
				cellPH.setBorderWidthLeft(0.2f);
				cellPH.setBorderColor(BaseColor.LIGHT_GRAY);
				cellPH.setBorderWidthLeft(0.2f);
				cellPH.setBorderWidthTop(0.0f);
				cellPH.setBorderColorBottom(BaseColor.LIGHT_GRAY);

				PdfPCell cellPHVal = new PdfPCell(new Paragraph(StringUtils.capitalize(personalHistory), mainContent));
				cellPHVal.setBorderWidth(0.5f);
				cellPHVal.setColspan(3);
				cellPHVal.setPaddingBottom(2);
				cellPHVal.setBorderColor(BaseColor.LIGHT_GRAY);
				cellPHVal.setBorderWidthLeft(0.0f);
				cellPHVal.setBorderWidthTop(0.0f);
				cellPHVal.setBorderWidthBottom(0.1f);

				/*
				 * adding all cell to the table to create tabular structure
				 */

				table.addCell(cell);
				// table.addCell(cell1);
				table.addCell(cell2);
				table.addCell(cell3);
				table.addCell(cell4);
				table.addCell(cell5);
				table.addCell(cell6);
				table.addCell(cell7);
				table.addCell(cell8);
				table.addCell(cell9);
				/*
				 * table.addCell(cell10); table.addCell(cell11);
				 */
				table.addCell(cell12);
				table.addCell(cell13);
				table.addCell(cellCof);
				table.addCell(cellCofVal);
				table.addCell(cell14);
				table.addCell(cellSH);
				table.addCell(cell15);
				table.addCell(cellOH);
				table.addCell(cellOHVal);
				table.addCell(cellPH);
				table.addCell(cellPHVal);

				document.add(table);
			}
			/*
			 * for OPD Opthalmology Form
			 */
			PdfPTable table2 = new PdfPTable(3);
			table2.setWidthPercentage(100);
			Rectangle rect = new Rectangle(270, 700);
			table2.setWidthPercentage(new float[] { 100, 100, 100 }, rect);

			/*
			 * Creating Table header
			 */
			// For blank space
			PdfPCell cell = new PdfPCell(new Paragraph(" ", Font2));
			cell.setColspan(3);
			cell.setBorderWidthRight(0f);
			cell.setBorderWidthLeft(0f);
			cell.setBorderWidthTop(0f);
			cell.setBorderWidthBottom(0f);
			cell.setBorderColorTop(BaseColor.LIGHT_GRAY);

			// for Title
			PdfPCell cell0 = new PdfPCell(new Paragraph("OPD Opthalmology Form", Font5));
			cell0.setPaddingTop(10);
			cell0.setPaddingBottom(10);
			cell0.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell0.setUseBorderPadding(true);
			cell0.setColspan(3);
			cell0.setBorderWidthRight(0.1f);
			cell0.setBorderWidthLeft(0.1f);
			cell0.setBorderWidthTop(0.1f);
			cell0.setBorderWidthBottom(1f);
			// cell0.setBorderColorBottom(BaseColor.DARK_GRAY);
			cell0.setBorderColor(BaseColor.WHITE);

			// Gene
			PdfPCell cell1 = new PdfPCell(new Paragraph("On Examination", Font4));

			cell1.setBorderWidth(0.01f);
			cell1.setPaddingBottom(5);
			cell1.setPaddingTop(5);
			cell1.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell1.setBorderColor(BaseColor.BLACK);
			cell1.setBorderColorBottom(BaseColor.BLACK);
			cell1.setBorderWidthBottom(1f);

			// OD RE
			PdfPCell cell2 = new PdfPCell(new Paragraph("OD (RE)", Font4));

			cell2.setBorderWidth(0.01f);
			cell2.setPaddingBottom(5);
			cell2.setPaddingTop(5);
			cell2.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell2.setBorderWidthLeft(0.0f);
			cell2.setBorderColorBottom(BaseColor.BLACK);
			cell2.setBorderWidthBottom(0.5f);
			cell2.setBorderColor(BaseColor.BLACK);
			cell2.setBorderColorBottom(BaseColor.BLACK);
			cell2.setBorderWidthBottom(1f);

			// Os LE
			PdfPCell cell3 = new PdfPCell(new Paragraph("OS (LE)", Font4));

			cell3.setBorderWidth(0.01f);
			cell3.setPaddingBottom(5);
			cell3.setPaddingTop(5);
			cell3.setHorizontalAlignment(Element.ALIGN_CENTER);
			// cell3.setBorderColorBottom(BaseColor.WHITE);
			cell3.setBorderWidthLeft(0.0f);
			cell3.setBorderColorBottom(BaseColor.BLACK);
			cell3.setBorderWidthBottom(0.5f);
			cell3.setBorderColor(BaseColor.BLACK);
			cell3.setBorderColorBottom(BaseColor.BLACK);
			cell3.setBorderWidthBottom(1f);

			table2.addCell(cell);
			table2.addCell(cell0);
			table2.addCell(cell1);
			table2.addCell(cell2);
			table2.addCell(cell3);

			document.add(table2);

			while (resultSet3.next()) {
				PdfPTable table1 = new PdfPTable(3);
				table1.setWidthPercentage(100);
				Rectangle rect1 = new Rectangle(270, 700);
				table1.setWidthPercentage(new float[] { 100, 100, 100 }, rect1);

				if (!(resultSet3.getString("eyelidUpperOD").isEmpty())
						|| !(resultSet3.getString("eyelidUpperOS").isEmpty()
								|| !(resultSet3.getString("eyelidLowerOD").isEmpty()
										|| !(resultSet3.getString("eyelidLowerOS").isEmpty())))) {

					PdfPTable tableON = new PdfPTable(2);
					tableON.setWidthPercentage(100);
					tableON.setWidths(new int[] { 1, 2 });
					/*
					 * for Gene
					 */
					PdfPCell cell20 = new PdfPCell(new Paragraph("Eye Lid", Font4));
					cell20.setBorderWidth(0.01f);
					cell20.setPaddingBottom(5);
					cell20.setPaddingTop(5);
					cell20.setRowspan(2);
					cell20.setBorderWidthBottom(0.0f);
					cell20.setBorderWidthRight(0.0f);
					cell20.setBorderWidthLeft(0.0f);
					cell20.setBorderWidthTop(0.0f);
					cell20.setBorderColor(BaseColor.BLACK);
					cell20.setBorderColorTop(BaseColor.BLACK);
					cell20.setBorderColorBottom(BaseColor.BLACK);
					cell20.setBorderWidthBottom(1f);

					PdfPCell cell23 = new PdfPCell(new Paragraph("Upper", mainContent));
					cell23.setBorderWidth(0.01f);
					cell23.setPaddingBottom(2);
					cell23.setBorderWidthTop(0.0f);
					cell23.setBorderWidthBottom(0.0f);
					cell23.setBorderWidthRight(0.0f);
					cell23.setBorderColorRight(BaseColor.WHITE);
					cell23.setHorizontalAlignment(Element.ALIGN_RIGHT);
					cell23.setBorderColor(BaseColor.BLACK);
					cell23.setBorderColorBottom(BaseColor.BLACK);

					PdfPCell cell26 = new PdfPCell(new Paragraph("Lower", mainContent));
					cell26.setBorderWidth(0.01f);
					cell26.setPaddingBottom(2);
					cell26.setBorderWidthBottom(0.0f);
					cell26.setBorderWidthRight(0.0f);
					cell26.setBorderColorRight(BaseColor.WHITE);
					cell26.setHorizontalAlignment(Element.ALIGN_RIGHT);
					cell26.setBorderColor(BaseColor.BLACK);
					cell26.setBorderColorBottom(BaseColor.BLACK);
					cell26.setBorderWidthBottom(1f);

					tableON.addCell(cell20);
					tableON.addCell(cell23);
					tableON.addCell(cell26);

					PdfPCell cell60 = new PdfPCell(tableON);
					cell60.setBorderWidth(0.01f);
					cell60.setBorderColor(BaseColor.BLACK);

					table1.addCell(cell60);
				}

				PdfPTable tableOD1 = new PdfPTable(1);
				tableOD1.setWidthPercentage(100);
				tableOD1.setWidths(new int[] { 1 });

				if (!(resultSet3.getString("eyelidUpperOD").isEmpty())
						|| !(resultSet3.getString("eyelidLowerOD").isEmpty())
						|| !(resultSet3.getString("eyelidUpperOS").isEmpty())
						|| !(resultSet3.getString("eyelidLowerOS").isEmpty())) {
					/* for Variant Impact */

					if (!(resultSet3.getString("eyelidUpperOD").isEmpty())) {
						PdfPCell cell24 = new PdfPCell(
								new Paragraph(resultSet3.getString("eyelidUpperOD"), mainContent));
						cell24.setBorderWidth(0.01f);
						cell24.setPaddingBottom(2);
						cell24.setBorderWidthLeft(0.0f);
						cell24.setBorderWidthTop(0.0f);
						cell24.setBorderWidthRight(0.0f);
						cell24.setBorderColorLeft(BaseColor.WHITE);
						cell24.setBorderColorRight(BaseColor.WHITE);
						cell24.setHorizontalAlignment(Element.ALIGN_CENTER);
						cell24.setBorderColor(BaseColor.BLACK);

						tableOD1.addCell(cell24);
					} else {

						PdfPCell cell24 = new PdfPCell(new Paragraph("WNL", mainContent));
						cell24.setBorderWidth(0.01f);
						cell24.setPaddingBottom(2);
						cell24.setBorderWidthLeft(0.0f);
						cell24.setBorderWidthTop(0.0f);
						cell24.setBorderWidthRight(0.0f);
						cell24.setBorderColorLeft(BaseColor.WHITE);
						cell24.setBorderColorRight(BaseColor.WHITE);
						cell24.setHorizontalAlignment(Element.ALIGN_CENTER);
						cell24.setBorderColor(BaseColor.BLACK);

						tableOD1.addCell(cell24);
					}

					if (!(resultSet3.getString("eyelidLowerOD").isEmpty())) {
						/*
						 * for ClinVar URL
						 *//*
							 * for ClinVar URL
							 */
						PdfPCell cell27 = new PdfPCell(
								new Paragraph(resultSet3.getString("eyelidLowerOD"), mainContent));
						cell27.setBorderWidth(0.01f);
						cell27.setPaddingBottom(2);
						cell27.setBorderWidthBottom(0.0f);
						cell27.setBorderWidthLeft(0.0f);
						cell27.setBorderWidthTop(0.0f);
						cell27.setBorderWidthRight(0.0f);
						cell27.setBorderColorLeft(BaseColor.WHITE);
						cell27.setBorderColorBottom(BaseColor.WHITE);
						cell27.setBorderColorRight(BaseColor.WHITE);
						cell27.setHorizontalAlignment(Element.ALIGN_CENTER);
						cell27.setBorderColor(BaseColor.BLACK);
						cell27.setBorderColorBottom(BaseColor.BLACK);
						cell27.setBorderWidthBottom(1f);

						tableOD1.addCell(cell27);
					} else {
						PdfPCell cell27 = new PdfPCell(new Paragraph("WNL", mainContent));
						cell27.setBorderWidth(0.01f);
						cell27.setPaddingBottom(2);
						cell27.setBorderWidthBottom(0.0f);
						cell27.setBorderWidthLeft(0.0f);
						cell27.setBorderWidthTop(0.0f);
						cell27.setBorderWidthRight(0.0f);
						cell27.setBorderColorLeft(BaseColor.WHITE);
						cell27.setBorderColorBottom(BaseColor.WHITE);
						cell27.setBorderColorRight(BaseColor.WHITE);
						cell27.setHorizontalAlignment(Element.ALIGN_CENTER);
						cell27.setBorderColor(BaseColor.BLACK);
						cell27.setBorderColorBottom(BaseColor.BLACK);
						cell27.setBorderWidthBottom(1f);

						tableOD1.addCell(cell27);
					}

					PdfPCell cell61 = new PdfPCell(tableOD1);
					cell61.setBorderWidth(0.01f);
					table1.addCell(cell61);
				}

				PdfPTable tableOS1 = new PdfPTable(1);
				tableOS1.setWidthPercentage(100);
				tableOS1.setWidths(new int[] { 1 });

				if (!(resultSet3.getString("eyelidUpperOS").isEmpty())
						|| !(resultSet3.getString("eyelidLowerOS").isEmpty())
						|| !(resultSet3.getString("eyelidUpperOD").isEmpty())
						|| !(resultSet3.getString("eyelidLowerOD").isEmpty())) {
					/* for Clinical Significance */

					if (!(resultSet3.getString("eyelidUpperOS").isEmpty())) {
						PdfPCell cell25 = new PdfPCell(
								new Paragraph(resultSet3.getString("eyelidUpperOS"), mainContent));
						cell25.setBorderWidth(0.01f);
						cell25.setPaddingBottom(2);
						cell25.setBorderWidthLeft(0.0f);
						cell25.setBorderWidthRight(0.0f);
						cell25.setBorderWidthBottom(0.0f);
						cell25.setBorderWidthTop(0.0f);
						cell25.setHorizontalAlignment(Element.ALIGN_CENTER);
						cell25.setBorderColor(BaseColor.BLACK);

						tableOS1.addCell(cell25);
					} else {

						PdfPCell cell25 = new PdfPCell(new Paragraph("WNL", mainContent));
						cell25.setBorderWidth(0.01f);
						cell25.setPaddingBottom(2);
						cell25.setBorderWidthLeft(0.0f);
						cell25.setBorderWidthRight(0.0f);
						cell25.setBorderWidthBottom(0.0f);
						cell25.setBorderWidthTop(0.0f);
						cell25.setHorizontalAlignment(Element.ALIGN_CENTER);
						cell25.setBorderColor(BaseColor.BLACK);

						tableOS1.addCell(cell25);
					}

					if (!(resultSet3.getString("eyelidLowerOS").isEmpty())) {
						PdfPCell cell28 = new PdfPCell(
								new Paragraph(resultSet3.getString("eyelidLowerOS"), mainContent));
						cell28.setBorderWidth(0.01f);
						cell28.setPaddingBottom(2);
						cell28.setHorizontalAlignment(Element.ALIGN_CENTER);
						cell28.setBorderWidthBottom(0.0f);
						cell28.setBorderWidthLeft(0.0f);
						cell28.setBorderWidthRight(0.0f);
						cell28.setBorderColorBottom(BaseColor.WHITE);
						cell28.setBorderColor(BaseColor.BLACK);
						cell28.setBorderColorBottom(BaseColor.BLACK);
						cell28.setBorderWidthBottom(1f);

						tableOS1.addCell(cell28);
					} else {
						/*
						 * for RSIDs
						 */
						PdfPCell cell28 = new PdfPCell(new Paragraph("WNL", mainContent));
						cell28.setBorderWidth(0.01f);
						cell28.setPaddingBottom(2);
						cell28.setHorizontalAlignment(Element.ALIGN_CENTER);
						cell28.setBorderWidthBottom(0.0f);
						cell28.setBorderWidthLeft(0.0f);
						cell28.setBorderWidthRight(0.0f);
						cell28.setBorderColorBottom(BaseColor.WHITE);
						cell28.setBorderColor(BaseColor.BLACK);
						cell28.setBorderColorBottom(BaseColor.BLACK);
						cell28.setBorderWidthBottom(1f);

						tableOS1.addCell(cell28);
					}

					PdfPCell cell62 = new PdfPCell(tableOS1);
					cell62.setBorderWidth(0.01f);
					table1.addCell(cell62);

				}

				if ((!resultSet3.getString("visualAcuityDistOD").isEmpty())
						|| (!resultSet3.getString("visualAcuityDistOS").isEmpty())
						|| (!resultSet3.getString("visualAcuityNearOD").isEmpty())
						|| (!resultSet3.getString("visualAcuityNearOS").isEmpty())
						|| (!resultSet3.getString("pinholeVisionDistOD").isEmpty())
						|| (!resultSet3.getString("pinholeVisionDistOS").isEmpty())
						|| (!resultSet3.getString("pinholeVisionNearOD").isEmpty())
						|| (!resultSet3.getString("pinholeVisionNearOS").isEmpty())
						|| (!resultSet3.getString("bcvaDistOD").isEmpty())
						|| (!resultSet3.getString("bcvaDistOS").isEmpty())
						|| (!resultSet3.getString("bcvaNearOD").isEmpty())
						|| (!resultSet3.getString("bcvaNearOS").isEmpty())) {

					PdfPTable tableON = new PdfPTable(2);
					tableON.setWidthPercentage(100);
					tableON.setWidths(new int[] { 1, 2 });
					/*
					 * for Gene
					 */
					PdfPCell cell29 = new PdfPCell(new Paragraph("Vision", Font4));
					cell29.setBorderWidth(0.01f);
					cell29.setPaddingBottom(3);
					cell29.setPaddingTop(20);
					cell29.setBorderWidthTop(0.0f);
					cell29.setBorderWidthRight(0.0f);
					cell29.setRowspan(4);
					cell29.setHorizontalAlignment(Element.ALIGN_LEFT);
					cell29.setBorderColor(BaseColor.BLACK);
					cell29.setBorderColorTop(BaseColor.BLACK);
					cell29.setBorderColorBottom(BaseColor.BLACK);
					cell29.setBorderWidthBottom(1f);

					tableON.addCell(cell29);

					PdfPCell cell32 = new PdfPCell(new Paragraph(" ", mainContent));
					cell32.setBorderWidth(0.01f);
					cell32.setPaddingBottom(2);
					cell32.setHorizontalAlignment(Element.ALIGN_RIGHT);
					cell32.setBorderColor(BaseColor.BLACK);

					tableON.addCell(cell32);

					PdfPCell cell33 = new PdfPCell(new Paragraph("Visual Acuity", mainContent));
					cell33.setBorderWidth(0.01f);
					cell33.setPaddingBottom(2);
					cell33.setHorizontalAlignment(Element.ALIGN_RIGHT);
					cell33.setBorderColor(BaseColor.BLACK);

					tableON.addCell(cell33);

					/*
					 * for Associated Disease
					 */
					PdfPCell cell35 = new PdfPCell(new Paragraph("Pinhole Vision", mainContent));
					cell35.setBorderWidth(0.01f);
					cell35.setPaddingBottom(2);
					cell35.setHorizontalAlignment(Element.ALIGN_RIGHT);
					cell35.setBorderColor(BaseColor.BLACK);

					tableON.addCell(cell35);

					/* for Associated Disease */
					PdfPCell cell38 = new PdfPCell(new Paragraph("BCVA", mainContent));
					// cell38.setBorderWidth(0.01f); cell38.setPaddingBottom(2);
					cell38.setHorizontalAlignment(Element.ALIGN_RIGHT);
					cell38.setBorderColor(BaseColor.BLACK);
					cell38.setBorderColorBottom(BaseColor.BLACK);
					cell38.setBorderWidthBottom(1f);

					tableON.addCell(cell38);

					PdfPCell cell60 = new PdfPCell(tableON);
					cell60.setBorderWidth(0.01f);
					cell60.setBorderColor(BaseColor.BLACK);

					table1.addCell(cell60);
				}

				if ((!resultSet3.getString("visualAcuityDistOD").isEmpty())
						|| (!resultSet3.getString("visualAcuityDistOS").isEmpty())
						|| (!resultSet3.getString("visualAcuityNearOD").isEmpty())
						|| (!resultSet3.getString("visualAcuityNearOS").isEmpty())
						|| (!resultSet3.getString("pinholeVisionDistOD").isEmpty())
						|| (!resultSet3.getString("pinholeVisionDistOS").isEmpty())
						|| (!resultSet3.getString("pinholeVisionNearOD").isEmpty())
						|| (!resultSet3.getString("pinholeVisionNearOS").isEmpty())
						|| (!resultSet3.getString("bcvaDistOD").isEmpty())
						|| (!resultSet3.getString("bcvaDistOS").isEmpty())
						|| (!resultSet3.getString("bcvaNearOD").isEmpty())
						|| (!resultSet3.getString("bcvaNearOS").isEmpty())) {

					PdfPTable tableOD = new PdfPTable(2);
					tableOD.setWidthPercentage(100);
					tableOD.setWidths(new int[] { 2, 2 });

					PdfPCell distCellText = new PdfPCell(new Paragraph("Dist", Font4));
					distCellText.setBorderWidthBottom(0.1f);
					distCellText.setBorderWidthTop(0.0f);
					distCellText.setBorderWidthLeft(0.0f);
					distCellText.setBorderColorTop(BaseColor.WHITE);
					distCellText.setHorizontalAlignment(Element.ALIGN_CENTER);
					distCellText.setBorderColor(BaseColor.BLACK);
					distCellText.setBorderColorBottom(BaseColor.BLACK);
					distCellText.setBorderWidthBottom(1f);

					tableOD.addCell(distCellText);

					PdfPCell nearCelltext = new PdfPCell(new Paragraph("Near", Font4));
					nearCelltext.setBorderWidthBottom(0.1f);
					nearCelltext.setBorderWidthTop(0.0f);
					nearCelltext.setBorderWidthLeft(0.0f);
					nearCelltext.setBorderWidthRight(0.0f);
					nearCelltext.setHorizontalAlignment(Element.ALIGN_CENTER);
					nearCelltext.setBorderColor(BaseColor.BLACK);
					nearCelltext.setBorderColorBottom(BaseColor.BLACK);
					nearCelltext.setBorderWidthBottom(1f);

					tableOD.addCell(nearCelltext);

					PdfPCell distCellText1 = new PdfPCell(
							new Paragraph(resultSet3.getString("visualAcuityDistOD"), mainContent));
					distCellText1.setHorizontalAlignment(Element.ALIGN_CENTER);
					distCellText1.setPaddingBottom(2);
					distCellText1.setBorderColor(BaseColor.BLACK);

					tableOD.addCell(distCellText1);

					PdfPCell nearCelltext1 = new PdfPCell(
							new Paragraph(resultSet3.getString("visualAcuityNearOD"), mainContent));
					nearCelltext1.setHorizontalAlignment(Element.ALIGN_CENTER);
					nearCelltext1.setPaddingBottom(2);
					nearCelltext1.setBorderColor(BaseColor.BLACK);

					tableOD.addCell(nearCelltext1);

					PdfPCell distCellText2 = new PdfPCell(
							new Paragraph(resultSet3.getString("pinholeVisionDistOD"), mainContent));
					distCellText2.setHorizontalAlignment(Element.ALIGN_CENTER);
					distCellText2.setPaddingBottom(2);
					distCellText2.setBorderColor(BaseColor.BLACK);

					tableOD.addCell(distCellText2);

					PdfPCell nearCelltext2 = new PdfPCell(
							new Paragraph(resultSet3.getString("pinholeVisionNearOD"), mainContent));
					nearCelltext2.setHorizontalAlignment(Element.ALIGN_CENTER);
					nearCelltext2.setPaddingBottom(2);
					nearCelltext2.setBorderColor(BaseColor.BLACK);

					tableOD.addCell(nearCelltext2);

					PdfPCell distCellText3 = new PdfPCell(
							new Paragraph(resultSet3.getString("bcvaDistOD"), mainContent));
					distCellText3.setHorizontalAlignment(Element.ALIGN_CENTER);
					distCellText3.setPaddingBottom(2);
					distCellText3.setBorderColor(BaseColor.BLACK);
					distCellText3.setBorderColorBottom(BaseColor.BLACK);
					distCellText3.setBorderWidthBottom(1f);

					tableOD.addCell(distCellText3);

					PdfPCell nearCelltext3 = new PdfPCell(
							new Paragraph(resultSet3.getString("bcvaNearOD"), mainContent));
					nearCelltext3.setHorizontalAlignment(Element.ALIGN_CENTER);
					nearCelltext3.setPaddingBottom(2);
					nearCelltext3.setBorderColor(BaseColor.BLACK);
					nearCelltext3.setBorderColorBottom(BaseColor.BLACK);
					nearCelltext3.setBorderWidthBottom(1f);

					tableOD.addCell(nearCelltext3);

					PdfPCell cell60 = new PdfPCell(tableOD);
					cell60.setBorderWidth(0.01f);
					cell60.setBorderColor(BaseColor.BLACK);

					table1.addCell(cell60);
				}

				if ((!resultSet3.getString("visualAcuityDistOD").isEmpty())
						|| (!resultSet3.getString("visualAcuityDistOS").isEmpty())
						|| (!resultSet3.getString("visualAcuityNearOD").isEmpty())
						|| (!resultSet3.getString("visualAcuityNearOS").isEmpty())
						|| (!resultSet3.getString("pinholeVisionDistOD").isEmpty())
						|| (!resultSet3.getString("pinholeVisionDistOS").isEmpty())
						|| (!resultSet3.getString("pinholeVisionNearOD").isEmpty())
						|| (!resultSet3.getString("pinholeVisionNearOS").isEmpty())
						|| (!resultSet3.getString("bcvaDistOD").isEmpty())
						|| (!resultSet3.getString("bcvaDistOS").isEmpty())
						|| (!resultSet3.getString("bcvaNearOD").isEmpty())
						|| (!resultSet3.getString("bcvaNearOS").isEmpty())) {

					PdfPTable tableOS = new PdfPTable(2);
					tableOS.setWidthPercentage(100);
					tableOS.setWidths(new int[] { 2, 2 });

					PdfPCell distCellTextOS = new PdfPCell(new Paragraph("Dist", Font4));
					distCellTextOS.setHorizontalAlignment(Element.ALIGN_CENTER);
					distCellTextOS.setBorderWidthTop(0.0f);
					distCellTextOS.setBorderWidthRight(0.0f);
					distCellTextOS.setBorderWidthLeft(0.0f);
					distCellTextOS.setBorderColor(BaseColor.BLACK);
					distCellTextOS.setBorderColorBottom(BaseColor.BLACK);
					distCellTextOS.setBorderWidthBottom(1f);

					tableOS.addCell(distCellTextOS);

					PdfPCell nearCelltextOS = new PdfPCell(new Paragraph("Near", Font4));
					nearCelltextOS.setHorizontalAlignment(Element.ALIGN_CENTER);
					nearCelltextOS.setBorderWidthTop(0.0f);
					nearCelltextOS.setBorderWidthRight(0.0f);
					nearCelltextOS.setBorderColor(BaseColor.BLACK);
					nearCelltextOS.setBorderColorBottom(BaseColor.BLACK);
					nearCelltextOS.setBorderWidthBottom(1f);

					tableOS.addCell(nearCelltextOS);

					PdfPCell distCellTextOS1 = new PdfPCell(
							new Paragraph(resultSet3.getString("visualAcuityDistOS"), mainContent));
					distCellTextOS1.setHorizontalAlignment(Element.ALIGN_CENTER);
					distCellTextOS1.setBorderColor(BaseColor.BLACK);

					tableOS.addCell(distCellTextOS1);

					PdfPCell nearCelltextOS1 = new PdfPCell(
							new Paragraph(resultSet3.getString("visualAcuityNearOS"), mainContent));
					nearCelltextOS1.setHorizontalAlignment(Element.ALIGN_CENTER);
					nearCelltextOS1.setBorderColor(BaseColor.BLACK);

					tableOS.addCell(nearCelltextOS1);

					PdfPCell distCellTextOS2 = new PdfPCell(
							new Paragraph(resultSet3.getString("pinholeVisionDistOS"), mainContent));
					distCellTextOS2.setHorizontalAlignment(Element.ALIGN_CENTER);
					distCellTextOS2.setBorderColor(BaseColor.BLACK);

					tableOS.addCell(distCellTextOS2);

					PdfPCell nearCelltextOS2 = new PdfPCell(
							new Paragraph(resultSet3.getString("pinholeVisionNearOS"), mainContent));
					nearCelltextOS2.setHorizontalAlignment(Element.ALIGN_CENTER);
					nearCelltextOS2.setBorderColor(BaseColor.BLACK);

					tableOS.addCell(nearCelltextOS2);

					PdfPCell distCellTextOS3 = new PdfPCell(
							new Paragraph(resultSet3.getString("bcvaDistOS"), mainContent));
					distCellTextOS3.setHorizontalAlignment(Element.ALIGN_CENTER);
					distCellTextOS3.setBorderColor(BaseColor.BLACK);
					distCellTextOS3.setBorderColorBottom(BaseColor.BLACK);
					distCellTextOS3.setBorderWidthBottom(1f);

					tableOS.addCell(distCellTextOS3);

					PdfPCell nearCelltextOS3 = new PdfPCell(
							new Paragraph(resultSet3.getString("bcvaNearOS"), mainContent));
					nearCelltextOS3.setHorizontalAlignment(Element.ALIGN_CENTER);
					nearCelltextOS3.setBorderColor(BaseColor.BLACK);
					nearCelltextOS3.setBorderColorBottom(BaseColor.BLACK);
					nearCelltextOS3.setBorderWidthBottom(1f);

					tableOS.addCell(nearCelltextOS3);

					PdfPCell cell60 = new PdfPCell(tableOS);
					cell60.setBorderWidth(0.01f);
					cell60.setBorderColor(BaseColor.BLACK);

					table1.addCell(cell60);
				}

				if ((!resultSet3.getString("conjunctivaOD").isEmpty())
						|| (!resultSet3.getString("conjunctivaOS").isEmpty())
						|| (!resultSet3.getString("scleraOD").isEmpty())
						|| (!resultSet3.getString("corneaOD").isEmpty())
						|| (!resultSet3.getString("corneaOS").isEmpty()) || (!resultSet3.getString("pupilOD").isEmpty())
						|| (!resultSet3.getString("pupilOS").isEmpty())
						|| (!resultSet3.getString("anteriorChamberOD").isEmpty())
						|| (!resultSet3.getString("anteriorChamberOS").isEmpty())
						|| (!resultSet3.getString("irisOD").isEmpty()) || (!resultSet3.getString("irisOS").isEmpty())
						|| (!resultSet3.getString("lensOD").isEmpty()) || (!resultSet3.getString("lensOS").isEmpty())) {

					PdfPTable tableON = new PdfPTable(2);
					tableON.setWidthPercentage(100);
					tableON.setWidths(new int[] { 1, 2 });
					/*
					 * for Gene
					 */
					PdfPCell cell20 = new PdfPCell(new Paragraph("Anterior Segment", Font4));
					cell20.setBorderWidth(0.01f);
					cell20.setPaddingBottom(2);
					cell20.setPaddingTop(20);
					cell20.setRowspan(6);
					// cell20.setBorderWidthBottom(0.0f);
					cell20.setBorderColor(BaseColor.BLACK);
					cell20.setBorderColorBottom(BaseColor.BLACK);
					cell20.setBorderWidthBottom(1f);

					PdfPCell cell44 = new PdfPCell(new Paragraph("Conjuctiva", mainContent));
					cell44.setBorderWidth(0.01f);
					cell44.setPaddingBottom(2);
					cell44.setHorizontalAlignment(Element.ALIGN_RIGHT);
					cell44.setBorderColor(BaseColor.BLACK);

					PdfPCell cell45 = new PdfPCell(new Paragraph("Sclera", mainContent));
					cell45.setBorderWidth(0.01f);
					cell45.setPaddingBottom(2);
					cell45.setHorizontalAlignment(Element.ALIGN_RIGHT);
					cell45.setBorderColor(BaseColor.BLACK);

					PdfPCell cell47 = new PdfPCell(new Paragraph("Cornea", mainContent));
					cell47.setBorderWidth(0.01f);
					cell47.setPaddingBottom(2);
					cell47.setHorizontalAlignment(Element.ALIGN_RIGHT);
					cell47.setBorderColor(BaseColor.BLACK);

					PdfPCell cellPupil14 = new PdfPCell(new Paragraph("Pupil", mainContent));
					cellPupil14.setBorderWidth(0.01f);
					cellPupil14.setPaddingBottom(2);
					cellPupil14.setHorizontalAlignment(Element.ALIGN_RIGHT);
					cellPupil14.setBorderColor(BaseColor.BLACK);

					PdfPCell cell50 = new PdfPCell(new Paragraph("AC", mainContent));
					cell50.setBorderWidth(0.01f);
					cell50.setPaddingBottom(2);
					cell50.setHorizontalAlignment(Element.ALIGN_RIGHT);
					cell50.setBorderColor(BaseColor.BLACK);

					PdfPCell cell53 = new PdfPCell(new Paragraph("Iris", mainContent));
					cell53.setBorderWidth(0.01f);
					cell53.setPaddingBottom(2);
					cell53.setHorizontalAlignment(Element.ALIGN_RIGHT);
					cell53.setBorderColor(BaseColor.BLACK);

					PdfPCell cell56 = new PdfPCell(new Paragraph("Lens", mainContent));
					cell56.setBorderWidth(0.01f);
					cell56.setPaddingBottom(2);
					cell56.setHorizontalAlignment(Element.ALIGN_RIGHT);
					cell56.setBorderColor(BaseColor.BLACK);
					cell56.setBorderColorBottom(BaseColor.BLACK);
					cell56.setBorderWidthBottom(1f);

					tableON.addCell(cell20);
					tableON.addCell(cell44);
					tableON.addCell(cell45);
					tableON.addCell(cell47);
					tableON.addCell(cellPupil14);
					tableON.addCell(cell50);
					tableON.addCell(cell53);
					tableON.addCell(cell56);

					PdfPCell cell60 = new PdfPCell(tableON);
					// cell60.setBorderWidth(0.01f);
					cell60.setBorderColor(BaseColor.BLACK);

					table1.addCell(cell60);

				}

				PdfPTable tableOD2 = new PdfPTable(1);
				tableOD2.setWidthPercentage(100);
				tableOD2.setWidths(new int[] { 1 });

				if (!(resultSet3.getString("conjunctivaOD").isEmpty()) || !(resultSet3.getString("scleraOD").isEmpty())
						|| !(resultSet3.getString("corneaOD").isEmpty()) || !(resultSet3.getString("pupilOD").isEmpty())
						|| !(resultSet3.getString("anteriorChamberOD").isEmpty())
						|| !(resultSet3.getString("irisOD").isEmpty()) || !(resultSet3.getString("lensOD").isEmpty())
						|| !(resultSet3.getString("conjunctivaOS").isEmpty())
						|| !(resultSet3.getString("corneaOS").isEmpty()) || !(resultSet3.getString("pupilOS").isEmpty())
						|| !(resultSet3.getString("scleraOS").isEmpty())
						|| !(resultSet3.getString("anteriorChamberOS").isEmpty())
						|| !(resultSet3.getString("irisOS").isEmpty()) || !(resultSet3.getString("lensOS").isEmpty())) {

					if (!(resultSet3.getString("conjunctivaOD").isEmpty())) {
						/*
						 * for ClinVar URL
						 */
						PdfPCell cell45 = new PdfPCell(
								new Paragraph(resultSet3.getString("conjunctivaOD"), mainContent));
						cell45.setBorderWidth(0.01f);
						cell45.setPaddingBottom(2);
						cell45.setBorderColor(BaseColor.BLACK);

						tableOD2.addCell(cell45);
					} else {
						PdfPCell cell45 = new PdfPCell(new Paragraph("WNL", mainContent));
						cell45.setBorderWidth(0.01f);
						cell45.setPaddingBottom(2);
						cell45.setBorderColor(BaseColor.BLACK);

						tableOD2.addCell(cell45);
					}

					if (!(resultSet3.getString("scleraOD").isEmpty())) {
						PdfPCell cell46 = new PdfPCell(new Paragraph(resultSet3.getString("scleraOD"), mainContent));
						cell46.setBorderWidth(0.01f);
						cell46.setPaddingBottom(2);
						cell46.setBorderColor(BaseColor.BLACK);

						tableOD2.addCell(cell46);
					} else {
						PdfPCell cell46 = new PdfPCell(new Paragraph("WNL", mainContent));
						cell46.setBorderWidth(0.01f);
						cell46.setPaddingBottom(2);
						cell46.setBorderColor(BaseColor.BLACK);

						tableOD2.addCell(cell46);
					}

					if (!(resultSet3.getString("corneaOD").isEmpty())) {
						/*
						 * for ClinVar URL
						 */
						PdfPCell cell48 = new PdfPCell(new Paragraph(resultSet3.getString("corneaOD"), mainContent));
						cell48.setBorderWidth(0.01f);
						cell48.setPaddingBottom(2);
						cell48.setBorderColor(BaseColor.BLACK);

						tableOD2.addCell(cell48);
					} else {
						/*
						 * for ClinVar URL
						 */
						PdfPCell cell48 = new PdfPCell(new Paragraph("WNL", mainContent));
						cell48.setBorderWidth(0.01f);
						cell48.setPaddingBottom(2);
						cell48.setBorderColor(BaseColor.BLACK);

						tableOD2.addCell(cell48);
					}

					if (!(resultSet3.getString("pupilOD").isEmpty())) {
						/*
						 * for ClinVar URL
						 */
						PdfPCell cellPupil7 = new PdfPCell(new Paragraph(resultSet3.getString("pupilOD"), mainContent));
						cellPupil7.setBorderWidth(0.01f);
						cellPupil7.setPaddingBottom(2);
						cellPupil7.setBorderColor(BaseColor.BLACK);

						tableOD2.addCell(cellPupil7);
					} else {
						/*
						 * for ClinVar URL
						 */
						PdfPCell cellPupil7 = new PdfPCell(new Paragraph("WNL", mainContent));
						cellPupil7.setBorderWidth(0.01f);
						cellPupil7.setPaddingBottom(2);
						cellPupil7.setBorderColor(BaseColor.BLACK);

						tableOD2.addCell(cellPupil7);
					}

					if (!(resultSet3.getString("anteriorChamberOD").isEmpty())) {
						/*
						 * for ClinVar URL
						 */
						PdfPCell cell51 = new PdfPCell(
								new Paragraph(resultSet3.getString("anteriorChamberOD"), mainContent));
						cell51.setBorderWidth(0.01f);
						cell51.setPaddingBottom(2);
						cell51.setBorderColor(BaseColor.BLACK);

						tableOD2.addCell(cell51);
					} else {
						/*
						 * for ClinVar URL
						 */
						PdfPCell cell51 = new PdfPCell(new Paragraph("WNL", mainContent));
						cell51.setBorderWidth(0.01f);
						cell51.setPaddingBottom(2);
						cell51.setBorderColor(BaseColor.BLACK);

						tableOD2.addCell(cell51);
					}

					if (!(resultSet3.getString("irisOD").isEmpty())) {
						/*
						 * for ClinVar URL
						 */
						PdfPCell cell54 = new PdfPCell(new Paragraph(resultSet3.getString("irisOD"), mainContent));
						cell54.setBorderWidth(0.01f);
						cell54.setPaddingBottom(2);
						cell54.setBorderColor(BaseColor.BLACK);

						tableOD2.addCell(cell54);
					} else {

						/*
						 * for ClinVar URL
						 */
						PdfPCell cell54 = new PdfPCell(new Paragraph("WNL", mainContent));
						cell54.setBorderWidth(0.01f);
						cell54.setPaddingBottom(2);
						cell54.setBorderColor(BaseColor.BLACK);

						tableOD2.addCell(cell54);
					}

					if (!(resultSet3.getString("lensOD").isEmpty())) {
						/*
						 * for ClinVar URL
						 */
						PdfPCell cell57 = new PdfPCell(new Paragraph(resultSet3.getString("lensOD"), mainContent));
						cell57.setBorderWidth(0.01f);
						cell57.setPaddingBottom(2);
						cell57.setBorderWidthBottom(0.0f);
						cell57.setBorderColor(BaseColor.BLACK);
						cell57.setBorderColorBottom(BaseColor.BLACK);
						cell57.setBorderWidthBottom(1f);

						tableOD2.addCell(cell57);
					} else {
						/*
						 * for ClinVar URL
						 */
						PdfPCell cell57 = new PdfPCell(new Paragraph("WNL", mainContent));
						cell57.setBorderWidth(0.01f);
						cell57.setPaddingBottom(2);
						cell57.setBorderWidthBottom(0.0f);
						cell57.setBorderColor(BaseColor.BLACK);
						cell57.setBorderColorBottom(BaseColor.BLACK);
						cell57.setBorderWidthBottom(1f);

						tableOD2.addCell(cell57);
					}

					PdfPCell cell61 = new PdfPCell(tableOD2);
					cell61.setBorderWidth(0.01f);
					table1.addCell(cell61);
				}

				PdfPTable tableOS2 = new PdfPTable(1);
				tableOS2.setWidthPercentage(100);
				tableOS2.setWidths(new int[] { 1 });

				if (!(resultSet3.getString("conjunctivaOS").isEmpty()) || !(resultSet3.getString("corneaOS").isEmpty())
						|| !(resultSet3.getString("pupilOS").isEmpty()) || !(resultSet3.getString("scleraOS").isEmpty())
						|| !(resultSet3.getString("anteriorChamberOS").isEmpty())
						|| !(resultSet3.getString("irisOS").isEmpty()) || !(resultSet3.getString("lensOS").isEmpty())
						|| !(resultSet3.getString("conjunctivaOD").isEmpty())
						|| !(resultSet3.getString("scleraOD").isEmpty())
						|| !(resultSet3.getString("corneaOD").isEmpty()) || !(resultSet3.getString("pupilOD").isEmpty())
						|| !(resultSet3.getString("anteriorChamberOD").isEmpty())
						|| !(resultSet3.getString("irisOD").isEmpty()) || !(resultSet3.getString("lensOD").isEmpty())) {

					if (!(resultSet3.getString("conjunctivaOS").isEmpty())) {
						/*
						 * for RSIDs
						 */
						PdfPCell cell46 = new PdfPCell(
								new Paragraph(resultSet3.getString("conjunctivaOS"), mainContent));
						cell46.setBorderWidth(0.01f);
						cell46.setPaddingBottom(2);
						cell46.setBorderColor(BaseColor.BLACK);

						tableOS2.addCell(cell46);
					} else {
						/*
						 * for RSIDs
						 */
						PdfPCell cell46 = new PdfPCell(new Paragraph("WNL", mainContent));
						cell46.setBorderWidth(0.01f);
						cell46.setPaddingBottom(2);
						cell46.setBorderColor(BaseColor.BLACK);

						tableOS2.addCell(cell46);
					}

					if (!(resultSet3.getString("scleraOS").isEmpty())) {
						PdfPCell cell47 = new PdfPCell(new Paragraph(resultSet3.getString("scleraOS"), mainContent));
						cell47.setBorderWidth(0.01f);
						cell47.setPaddingBottom(2);
						cell47.setBorderColor(BaseColor.BLACK);

						tableOS2.addCell(cell47);
					} else {

						PdfPCell cell47 = new PdfPCell(new Paragraph("WNL", mainContent));
						cell47.setBorderWidth(0.01f);
						cell47.setPaddingBottom(2);
						cell47.setBorderColor(BaseColor.BLACK);

						tableOS2.addCell(cell47);
					}

					if (!(resultSet3.getString("corneaOS").isEmpty())) {
						/*
						 * for RSIDs
						 */
						PdfPCell cell49 = new PdfPCell(new Paragraph(resultSet3.getString("corneaOS"), mainContent));
						cell49.setBorderWidth(0.01f);
						cell49.setPaddingBottom(2);
						cell49.setBorderColor(BaseColor.BLACK);

						tableOS2.addCell(cell49);
					} else {
						/*
						 * for RSIDs
						 */
						PdfPCell cell49 = new PdfPCell(new Paragraph("WNL", mainContent));
						cell49.setBorderWidth(0.01f);
						cell49.setPaddingBottom(2);
						cell49.setBorderColor(BaseColor.BLACK);

						tableOS2.addCell(cell49);
					}

					if (!(resultSet3.getString("PupilOS").isEmpty())) {
						/*
						 * for RSIDs
						 */
						PdfPCell cellPupil2 = new PdfPCell(new Paragraph(resultSet3.getString("pupilOS"), mainContent));
						cellPupil2.setBorderWidth(0.01f);
						cellPupil2.setPaddingBottom(2);
						cellPupil2.setBorderColor(BaseColor.BLACK);

						tableOS2.addCell(cellPupil2);
					} else {
						/*
						 * for RSIDs
						 */
						PdfPCell cellPupil2 = new PdfPCell(new Paragraph("WNL", mainContent));
						cellPupil2.setBorderWidth(0.01f);
						cellPupil2.setPaddingBottom(2);
						cellPupil2.setBorderColor(BaseColor.BLACK);

						tableOS2.addCell(cellPupil2);
					}

					if (!(resultSet3.getString("anteriorChamberOS").isEmpty())) {
						/*
						 * for RSIDs
						 */
						PdfPCell cell52 = new PdfPCell(
								new Paragraph(resultSet3.getString("anteriorChamberOS"), mainContent));
						cell52.setBorderWidth(0.01f);
						cell52.setPaddingBottom(2);
						cell52.setBorderColor(BaseColor.BLACK);

						tableOS2.addCell(cell52);
					} else {
						/*
						 * for RSIDs
						 */
						PdfPCell cell52 = new PdfPCell(new Paragraph("WNL", mainContent));
						cell52.setBorderWidth(0.01f);
						cell52.setPaddingBottom(2);
						cell52.setBorderColor(BaseColor.BLACK);

						tableOS2.addCell(cell52);
					}

					if (!(resultSet3.getString("irisOS").isEmpty())) {
						/*
						 * for RSIDs
						 */
						PdfPCell cell55 = new PdfPCell(new Paragraph(resultSet3.getString("irisOS"), mainContent));
						cell55.setBorderWidth(0.01f);
						cell55.setPaddingBottom(2);
						cell55.setBorderColor(BaseColor.BLACK);

						tableOS2.addCell(cell55);
					} else {
						/*
						 * for RSIDs
						 */
						PdfPCell cell55 = new PdfPCell(new Paragraph("WNL", mainContent));
						cell55.setBorderWidth(0.01f);
						cell55.setPaddingBottom(2);
						cell55.setBorderColor(BaseColor.BLACK);

						tableOS2.addCell(cell55);
					}

					if (!(resultSet3.getString("lensOS").isEmpty())) {
						/*
						 * for RSIDs
						 */
						PdfPCell cell58 = new PdfPCell(new Paragraph(resultSet3.getString("lensOS"), mainContent));
						cell58.setBorderWidth(0.01f);
						cell58.setPaddingBottom(2);
						cell58.setBorderWidthBottom(0.0f);
						cell58.setBorderColor(BaseColor.BLACK);
						cell58.setBorderColorBottom(BaseColor.BLACK);
						cell58.setBorderWidthBottom(1f);

						tableOS2.addCell(cell58);
					} else {
						/*
						 * for RSIDs
						 */
						PdfPCell cell58 = new PdfPCell(new Paragraph("WNL", mainContent));
						cell58.setBorderWidth(0.01f);
						cell58.setPaddingBottom(2);
						cell58.setBorderWidthBottom(0.0f);
						cell58.setBorderColor(BaseColor.BLACK);
						cell58.setBorderColorBottom(BaseColor.BLACK);
						cell58.setBorderWidthBottom(1f);

						tableOS2.addCell(cell58);
					}

					PdfPCell cell62 = new PdfPCell(tableOS2);
					cell62.setBorderWidth(0.01f);
					table1.addCell(cell62);

				}

				if (!(resultSet3.getString("discOD").isEmpty()) || (!(resultSet3.getString("vesselOD").isEmpty())
						|| (!(resultSet3.getString("maculaOD").isEmpty())
								|| (!(resultSet3.getString("discOS").isEmpty())
										|| (!(resultSet3.getString("vesselOS").isEmpty())
												|| (!(resultSet3.getString("maculaOS").isEmpty()))))))) {

					PdfPTable tableON3 = new PdfPTable(2);
					tableON3.setWidthPercentage(100);
					tableON3.setWidths(new int[] { 1, 2 });

					/*
					 * for Associated Disease
					 */
					PdfPCell cell59 = new PdfPCell(new Paragraph("Posterior Segment", Font4));
					cell59.setBorderWidth(0.01f);
					cell59.setPaddingBottom(5);
					cell59.setPaddingTop(20);
					cell59.setRowspan(3);
					cell59.setBorderWidthTop(0.0f);
					cell59.setBorderColorTop(BaseColor.BLACK);
					cell59.setBorderWidthBottom(0.0f);
					// cell59.setBorderColorBottom(BaseColor.BLACK);
					// cell59.setBorderWidthBottom(1f);

					PdfPCell cell23 = new PdfPCell(new Paragraph("Disc", mainContent));
					cell23.setBorderWidth(0.01f);
					cell23.setPaddingBottom(2);
					cell23.setBorderWidthTop(0.0f);
					cell23.setHorizontalAlignment(Element.ALIGN_RIGHT);
					cell23.setBorderColorTop(BaseColor.BLACK);
					cell23.setBorderColor(BaseColor.BLACK);

					PdfPCell cell26 = new PdfPCell(new Paragraph("Vessel", mainContent));
					cell26.setBorderWidth(0.01f);
					cell26.setPaddingBottom(2);
					cell26.setHorizontalAlignment(Element.ALIGN_RIGHT);
					cell26.setBorderColor(BaseColor.BLACK);

					PdfPCell cell27 = new PdfPCell(new Paragraph("Macula", mainContent));
					cell27.setBorderWidth(0.01f);
					cell27.setPaddingBottom(2);
					cell27.setHorizontalAlignment(Element.ALIGN_RIGHT);
					cell27.setBorderColor(BaseColor.BLACK);

					tableON3.addCell(cell59);
					tableON3.addCell(cell23);
					tableON3.addCell(cell26);
					tableON3.addCell(cell27);

					PdfPCell cell60 = new PdfPCell(tableON3);
					cell60.setBorderWidth(0.01f);
					cell60.setBorderWidthBottom(0.0f);
					cell60.setBorderColorBottom(BaseColor.WHITE);
					// cell60.setBorderColorTop(BaseColor.BLACK);
//					/cell60.setBorderColor(BaseColor.WHITE);

					table1.addCell(cell60);
				}

				if (!(resultSet3.getString("discOD").isEmpty()) || !(resultSet3.getString("vesselOD").isEmpty())
						|| !(resultSet3.getString("maculaOD").isEmpty()) || !(resultSet3.getString("discOS").isEmpty())
						|| !(resultSet3.getString("vesselOS").isEmpty())
						|| !(resultSet3.getString("maculaOS").isEmpty())) {

					/* To add image with text next to it, we need to use PdfPTable */

					PdfPTable tableOD4 = new PdfPTable(2);
					tableOD4.setWidthPercentage(100);
					tableOD4.setWidths(new int[] { 1, 2 });

					/*
					 * Adding image and text in new table and then adding that table into Posterior
					 * Segment cell in order to get both image and text for OD
					 */

					PdfPCell imageCellOD = new PdfPCell(image1, true);
					imageCellOD.setRowspan(3);
					imageCellOD.setBorderColor(BaseColor.BLACK);

					tableOD4.addCell(imageCellOD);

					if (!(resultSet3.getString("discOD").isEmpty())) {
						PdfPCell cell46 = new PdfPCell(new Paragraph(resultSet3.getString("discOD"), mainContent));
						cell46.setBorderWidth(0.01f);
						cell46.setPaddingBottom(2);
						cell46.setBorderWidthTop(0.0f);
						cell46.setBorderColorTop(BaseColor.WHITE);
						cell46.setBorderColor(BaseColor.BLACK);

						tableOD4.addCell(cell46);
					} else {
						PdfPCell cell46 = new PdfPCell(new Paragraph("WNL", mainContent));
						cell46.setBorderWidth(0.01f);
						cell46.setPaddingBottom(2);
						cell46.setBorderWidthTop(0.0f);
						cell46.setBorderColorTop(BaseColor.WHITE);
						cell46.setBorderColor(BaseColor.BLACK);

						tableOD4.addCell(cell46);
					}

					if (!(resultSet3.getString("vesselOD").isEmpty())) {
						PdfPCell cell47 = new PdfPCell(new Paragraph(resultSet3.getString("vesselOD"), mainContent));
						cell47.setBorderWidth(0.01f);
						cell47.setPaddingBottom(2);
						cell47.setBorderColor(BaseColor.BLACK);

						tableOD4.addCell(cell47);
					} else {
						PdfPCell cell47 = new PdfPCell(new Paragraph("WNL", mainContent));
						cell47.setBorderWidth(0.01f);
						cell47.setPaddingBottom(2);
						cell47.setBorderColor(BaseColor.BLACK);

						tableOD4.addCell(cell47);
					}

					if (!(resultSet3.getString("maculaOD").isEmpty())) {
						PdfPCell cell48 = new PdfPCell(new Paragraph(resultSet3.getString("maculaOD"), mainContent));
						cell48.setBorderWidth(0.01f);
						cell48.setPaddingBottom(2);
						cell48.setBorderColor(BaseColor.BLACK);

						tableOD4.addCell(cell48);
					} else {
						PdfPCell cell48 = new PdfPCell(new Paragraph("WNL", mainContent));
						cell48.setBorderWidth(0.01f);
						cell48.setPaddingBottom(2);
						cell48.setBorderColor(BaseColor.BLACK);

						tableOD4.addCell(cell48);
					}

					PdfPCell cell60 = new PdfPCell(tableOD4);
					cell60.setBorderWidth(0.01f);

					table1.addCell(cell60);
				}

				if (!(resultSet3.getString("discOS").isEmpty()) || !(resultSet3.getString("vesselOS").isEmpty())
						|| !(resultSet3.getString("maculaOS").isEmpty()) || !(resultSet3.getString("discOD").isEmpty())
						|| !(resultSet3.getString("vesselOD").isEmpty())
						|| !(resultSet3.getString("maculaOD").isEmpty())) {

					/* To add image with text next to it, we need to use PdfPTable */

					PdfPTable tableOS5 = new PdfPTable(2);
					tableOS5.setWidthPercentage(100);
					tableOS5.setWidths(new int[] { 1, 2 });

					/*
					 * Adding image and text in new table and then adding that table into Posterior
					 * Segment cell in order to get both image and text for OD
					 */

					PdfPCell imageCellOS = new PdfPCell(image2, true);
					imageCellOS.setRowspan(3);
					imageCellOS.setBorderColor(BaseColor.BLACK);

					tableOS5.addCell(imageCellOS);

					if (!(resultSet3.getString("discOS").isEmpty())) {
						PdfPCell cell46 = new PdfPCell(new Paragraph(resultSet3.getString("discOS"), mainContent));
						cell46.setBorderWidth(0.01f);
						cell46.setPaddingBottom(2);
						cell46.setBorderWidthTop(0.0f);
						cell46.setBorderColor(BaseColor.BLACK);

						tableOS5.addCell(cell46);
					} else {
						PdfPCell cell46 = new PdfPCell(new Paragraph("WNL", mainContent));
						cell46.setBorderWidth(0.01f);
						cell46.setPaddingBottom(2);
						cell46.setBorderWidthTop(0.0f);
						cell46.setBorderColor(BaseColor.BLACK);

						tableOS5.addCell(cell46);
					}

					if (!(resultSet3.getString("vesselOS").isEmpty())) {
						PdfPCell cell47 = new PdfPCell(new Paragraph(resultSet3.getString("vesselOS"), mainContent));
						cell47.setBorderWidth(0.01f);
						cell47.setPaddingBottom(2);
						cell47.setBorderColor(BaseColor.BLACK);

						tableOS5.addCell(cell47);
					} else {

						PdfPCell cell47 = new PdfPCell(new Paragraph("WNL", mainContent));
						cell47.setBorderWidth(0.01f);
						cell47.setPaddingBottom(2);
						cell47.setBorderColor(BaseColor.BLACK);

						tableOS5.addCell(cell47);
					}

					if (!(resultSet3.getString("maculaOS").isEmpty())) {
						PdfPCell cell48 = new PdfPCell(new Paragraph(resultSet3.getString("maculaOS"), mainContent));
						cell48.setBorderWidth(0.01f);
						cell48.setPaddingBottom(2);
						cell48.setBorderColor(BaseColor.BLACK);

						tableOS5.addCell(cell48);
					} else {
						PdfPCell cell48 = new PdfPCell(new Paragraph("WNL", mainContent));
						cell48.setBorderWidth(0.01f);
						cell48.setPaddingBottom(2);
						cell48.setBorderColor(BaseColor.BLACK);

						tableOS5.addCell(cell48);
					}

					PdfPCell cell60 = new PdfPCell(tableOS5);
					cell60.setBorderWidth(0.01f);

					table1.addCell(cell60);
				}

				if (!resultSet3.getString("posteriorComment").isEmpty()) {
					PdfPTable tableON4 = new PdfPTable(2);
					tableON4.setWidthPercentage(100);
					tableON4.setWidths(new int[] { 1, 2 });

					PdfPCell cell59 = new PdfPCell(new Paragraph(" ", Font4));
					cell59.setBorderWidth(0.01f);
					cell59.setPaddingBottom(2);
					cell59.setBorderColor(BaseColor.BLACK);
					cell59.setBorderWidthTop(0.0f);
					cell59.setBorderColorTop(BaseColor.WHITE);
					cell59.setBorderColorBottom(BaseColor.BLACK);
					cell59.setBorderWidthBottom(1f);

					PdfPCell cell28 = new PdfPCell(new Paragraph("Posterior Comment", mainContent));
					cell28.setBorderWidth(0.01f);
					cell28.setPaddingBottom(2);
					cell28.setHorizontalAlignment(Element.ALIGN_RIGHT);
					cell28.setBorderColor(BaseColor.BLACK);
					cell28.setBorderColorBottom(BaseColor.BLACK);
					cell28.setBorderWidthBottom(1f);

					tableON4.addCell(cell59);
					tableON4.addCell(cell28);

					PdfPCell cell60 = new PdfPCell(tableON4);
					cell60.setBorderWidth(0.01f);
					cell60.setRowspan(1);
					cell60.setBorderColor(BaseColor.WHITE);

					table1.addCell(cell60);
				}

				if (!(resultSet3.getString("posteriorComment").isEmpty())) {
					PdfPTable tableOD5 = new PdfPTable(1);
					tableOD5.setWidthPercentage(100);
					tableOD5.setWidths(new int[] { 1 });

					if (!(resultSet3.getString("posteriorComment").isEmpty())) {
						PdfPCell cell17 = new PdfPCell(
								new Paragraph(resultSet3.getString("posteriorComment"), mainContent));
						cell17.setBorderWidth(0.01f);
						cell17.setColspan(2);
						cell17.setPaddingBottom(2);
						cell17.setBorderColor(BaseColor.BLACK);
						cell17.setBorderWidthLeft(0.0f);
						cell17.setBorderWidthTop(0.0f);
						cell17.setBorderColorBottom(BaseColor.BLACK);
						cell17.setBorderWidthBottom(1f);

						tableOD5.addCell(cell17);
					} else {
						PdfPCell cell17 = new PdfPCell(new Paragraph("WNL", mainContent));
						cell17.setBorderWidth(0.01f);
						cell17.setColspan(2);
						cell17.setPaddingBottom(2);
						cell17.setBorderColor(BaseColor.BLACK);
						cell17.setBorderWidthLeft(0.0f);
						cell17.setBorderWidthTop(0.0f);
						cell17.setBorderColorBottom(BaseColor.BLACK);
						cell17.setBorderWidthBottom(1f);

						tableOD5.addCell(cell17);
					}

					PdfPCell cell60 = new PdfPCell(tableOD5);
					cell60.setBorderWidth(0.01f);
					cell60.setColspan(2);

					table1.addCell(cell60);
				}

				if (!(resultSet3.getString("iopOD").isEmpty()) || (!(resultSet3.getString("iopOS").isEmpty()))) {
					/*
					 * for Associated Disease
					 */
					PdfPCell cell62 = new PdfPCell(new Paragraph("I.O.P", Font4));
					cell62.setBorderWidth(0.01f);
					cell62.setPaddingBottom(2);
					cell62.setPaddingTop(5);
					cell62.setHorizontalAlignment(Element.ALIGN_RIGHT);
					cell62.setBorderColor(BaseColor.BLACK);

					table1.addCell(cell62);

					if (!(resultSet3.getString("iopOD").isEmpty())) {
						/*
						 * for ClinVar URL
						 */
						PdfPCell cell63 = new PdfPCell(new Paragraph(resultSet3.getString("iopOD"), mainContent));
						cell63.setBorderWidth(0.01f);
						cell63.setPaddingBottom(2);
						cell63.setPaddingTop(5);
						cell63.setBorderColor(BaseColor.BLACK);

						table1.addCell(cell63);
					} else {
						/*
						 * for ClinVar URL
						 */
						PdfPCell cell63 = new PdfPCell(new Paragraph("WNL", mainContent));
						cell63.setBorderWidth(0.01f);
						cell63.setPaddingBottom(2);
						cell63.setPaddingTop(5);
						cell63.setBorderColor(BaseColor.BLACK);

						table1.addCell(cell63);
					}

					if (!(resultSet3.getString("iopOS").isEmpty())) {
						/*
						 * for RSIDs
						 */
						PdfPCell cell64 = new PdfPCell(new Paragraph(resultSet3.getString("iopOS"), mainContent));
						cell64.setBorderWidth(0.01f);
						cell64.setPaddingBottom(2);
						cell64.setPaddingTop(5);
						cell64.setBorderColor(BaseColor.BLACK);

						table1.addCell(cell64);
					} else {
						/*
						 * for RSIDs
						 */
						PdfPCell cell64 = new PdfPCell(new Paragraph("WNL", mainContent));
						cell64.setBorderWidth(0.01f);
						cell64.setPaddingBottom(2);
						cell64.setPaddingTop(5);
						cell64.setBorderColor(BaseColor.BLACK);

						table1.addCell(cell64);
					}

					PdfPCell cell22 = new PdfPCell(new Paragraph("", mainContent));
					cell22.setBorderWidth(0.01f);
					cell22.setPaddingBottom(2);
					cell22.setBorderColor(BaseColor.BLACK);

				}

				if (!(resultSet3.getString("sacOD").isEmpty()) || (!(resultSet3.getString("sacOS").isEmpty()))) {
					/*
					 * for Associated Disease
					 */
					PdfPCell cell65 = new PdfPCell(new Paragraph("Sac", Font4));
					cell65.setBorderWidth(0.01f);
					cell65.setPaddingBottom(2);
					cell65.setPaddingTop(5);
					// cell65.setBorderWidthBottom(0.0f);
					cell65.setHorizontalAlignment(Element.ALIGN_RIGHT);
					cell65.setBorderColor(BaseColor.BLACK);
					cell65.setBorderColorBottom(BaseColor.LIGHT_GRAY);
					cell65.setBorderColorBottom(BaseColor.BLACK);
					cell65.setBorderWidthBottom(1f);

					table1.addCell(cell65);

					if (!(resultSet3.getString("sacOD").isEmpty())) {
						/*
						 * for ClinVar URL
						 */
						PdfPCell cell66 = new PdfPCell(new Paragraph(resultSet3.getString("sacOD"), mainContent));
						cell66.setBorderWidth(0.01f);
						cell66.setPaddingBottom(2);
						cell66.setPaddingTop(5);
						// cell66.setBorderWidthBottom(0.0f);
						cell66.setBorderColor(BaseColor.BLACK);
						// cell66.setBorderColorBottom(BaseColor.WHITE);
						cell66.setBorderColorBottom(BaseColor.BLACK);
						cell66.setBorderWidthBottom(1f);

						table1.addCell(cell66);
					} else {
						/*
						 * for ClinVar URL
						 */
						PdfPCell cell66 = new PdfPCell(new Paragraph("WNL", mainContent));
						cell66.setBorderWidth(0.01f);
						cell66.setPaddingBottom(2);
						cell66.setPaddingTop(5);
						// cell66.setBorderWidthBottom(0.0f);
						cell66.setBorderColor(BaseColor.BLACK);
						// cell66.setBorderColorBottom(BaseColor.WHITE);
						cell66.setBorderColorBottom(BaseColor.BLACK);
						cell66.setBorderWidthBottom(1f);

						table1.addCell(cell66);
					}

					if (!(resultSet3.getString("sacOS").isEmpty())) {
						/*
						 * for RSIDs
						 */
						PdfPCell cell67 = new PdfPCell(new Paragraph(resultSet3.getString("sacOS"), mainContent));
						cell67.setBorderWidth(0.01f);
						cell67.setPaddingBottom(2);
						cell67.setPaddingTop(5);
						// cell67.setBorderWidthBottom(0.0f);
						cell67.setBorderColor(BaseColor.BLACK);
						// cell67.setBorderColorBottom(BaseColor.WHITE);
						cell67.setBorderColorBottom(BaseColor.BLACK);
						cell67.setBorderWidthBottom(1f);

						table1.addCell(cell67);
					} else {
						/*
						 * for RSIDs
						 */
						PdfPCell cell67 = new PdfPCell(new Paragraph("WNL", mainContent));
						cell67.setBorderWidth(0.01f);
						cell67.setPaddingBottom(2);
						cell67.setPaddingTop(5);
						// cell67.setBorderWidthBottom(0.0f);
						cell67.setBorderColor(BaseColor.BLACK);
						// cell67.setBorderColorBottom(BaseColor.WHITE);
						cell67.setBorderColorBottom(BaseColor.BLACK);
						cell67.setBorderWidthBottom(1f);

						table1.addCell(cell67);
					}

				}

				if (!(resultSet3.getString("biometryK1OD").isEmpty())
						|| (!(resultSet3.getString("biometryK1OS").isEmpty())
								|| (!(resultSet3.getString("biometryK2OD").isEmpty())
										|| (!(resultSet3.getString("biometryK2OS").isEmpty()))))) {

					PdfPTable tableON4 = new PdfPTable(2);
					tableON4.setWidthPercentage(100);
					tableON4.setWidths(new int[] { 1, 2 });

					/*
					 * for Associated Disease
					 */
					PdfPCell cell68 = new PdfPCell(new Paragraph("Biometry", Font4));
					cell68.setBorderWidth(0.01f);
					cell68.setPaddingBottom(2);
					cell68.setPaddingTop(5);
					cell68.setRowspan(3);
					cell68.setBorderWidthTop(0f);
					cell68.setBorderWidthBottom(0f);
					cell68.setBorderColor(BaseColor.BLACK);
					cell68.setBorderColorBottom(BaseColor.BLACK);
					cell68.setBorderWidthBottom(1f);

					/*
					 * for ClinVar URL
					 */
					PdfPCell cell69 = new PdfPCell(new Paragraph("K1", mainContent));
					cell69.setBorderWidth(0.01f);
					cell69.setPaddingBottom(2);
					cell69.setBorderWidthTop(0.0f);
					cell69.setHorizontalAlignment(Element.ALIGN_RIGHT);
					cell69.setBorderColor(BaseColor.BLACK);

					/*
					 * for RSIDs
					 */
					PdfPCell cell70 = new PdfPCell(new Paragraph("K2", mainContent));
					cell70.setBorderWidth(0.01f);
					cell70.setPaddingBottom(2);
					cell70.setBorderWidthBottom(0.0f);
					cell70.setHorizontalAlignment(Element.ALIGN_RIGHT);
					cell70.setBorderColor(BaseColor.BLACK);
					cell70.setBorderColorBottom(BaseColor.BLACK);
					cell70.setBorderWidthBottom(1f);

					tableON4.addCell(cell68);
					tableON4.addCell(cell69);
					tableON4.addCell(cell70);

					PdfPCell cell60 = new PdfPCell(tableON4);
					cell60.setBorderWidth(0.01f);
					table1.addCell(cell60);
				}

				if (!(resultSet3.getString("biometryK1OD").isEmpty())
						|| !(resultSet3.getString("biometryK2OD").isEmpty())
						|| !(resultSet3.getString("biometryK1OS").isEmpty())
						|| !(resultSet3.getString("biometryK2OS").isEmpty())) {

					PdfPTable tableOD6 = new PdfPTable(1);
					tableOD6.setWidthPercentage(100);
					tableOD6.setWidths(new int[] { 1 });

					if (!(resultSet3.getString("biometryK1OD").isEmpty())) {
						/*
						 * for ClinVar URL
						 */
						PdfPCell cell72 = new PdfPCell(
								new Paragraph(resultSet3.getString("biometryK1OD"), mainContent));
						cell72.setBorderWidth(0.01f);
						cell72.setPaddingBottom(2);
						cell72.setBorderWidthTop(0.0f);
						cell72.setBorderColor(BaseColor.BLACK);

						tableOD6.addCell(cell72);
					} else {
						/*
						 * for ClinVar URL
						 */
						PdfPCell cell72 = new PdfPCell(new Paragraph("WNL", mainContent));
						cell72.setBorderWidth(0.01f);
						cell72.setPaddingBottom(2);
						cell72.setBorderWidthTop(0.0f);
						cell72.setBorderColor(BaseColor.BLACK);

						tableOD6.addCell(cell72);
					}

					if (!(resultSet3.getString("biometryK2OD").isEmpty())) {
						PdfPCell cell74 = new PdfPCell(
								new Paragraph(resultSet3.getString("biometryK2OD"), mainContent));
						cell74.setBorderWidth(0.01f);
						cell74.setPaddingBottom(2);
						cell74.setBorderWidthBottom(0.0f);
						cell74.setBorderColor(BaseColor.BLACK);
						cell74.setBorderColorBottom(BaseColor.BLACK);
						cell74.setBorderWidthBottom(1f);

						tableOD6.addCell(cell74);
					} else {
						PdfPCell cell74 = new PdfPCell(new Paragraph("WNL", mainContent));
						cell74.setBorderWidth(0.01f);
						cell74.setPaddingBottom(2);
						cell74.setBorderWidthBottom(0.0f);
						cell74.setBorderColor(BaseColor.BLACK);
						cell74.setBorderColorBottom(BaseColor.BLACK);
						cell74.setBorderWidthBottom(1f);

						tableOD6.addCell(cell74);
					}

					PdfPCell cell60 = new PdfPCell(tableOD6);
					cell60.setBorderWidth(0.01f);
					table1.addCell(cell60);
				}

				if (!(resultSet3.getString("biometryK1OS").isEmpty())
						|| !(resultSet3.getString("biometryK2OS").isEmpty())
						|| !(resultSet3.getString("biometryK1OD").isEmpty())
						|| !(resultSet3.getString("biometryK2OD").isEmpty())) {

					PdfPTable tableOS6 = new PdfPTable(1);
					tableOS6.setWidthPercentage(100);
					tableOS6.setWidths(new int[] { 1 });

					if (!(resultSet3.getString("biometryK1OS").isEmpty())) {
						/*
						 * for RSIDs
						 */
						PdfPCell cell73 = new PdfPCell(
								new Paragraph(resultSet3.getString("biometryK1OS"), mainContent));
						cell73.setBorderWidth(0.01f);
						cell73.setPaddingBottom(2);
						cell73.setBorderWidthTop(0.0f);
						cell73.setBorderColor(BaseColor.BLACK);

						tableOS6.addCell(cell73);
					} else {
						/*
						 * for RSIDs
						 */
						PdfPCell cell73 = new PdfPCell(new Paragraph("WNL", mainContent));
						cell73.setBorderWidth(0.01f);
						cell73.setPaddingBottom(2);
						cell73.setBorderWidthTop(0.0f);
						cell73.setBorderColor(BaseColor.BLACK);

						tableOS6.addCell(cell73);
					}

					if (!(resultSet3.getString("biometryK2OS").isEmpty())) {
						/*
						 * for RSIDs
						 */
						PdfPCell cell76 = new PdfPCell(
								new Paragraph(resultSet3.getString("biometryK2OS"), mainContent));
						cell76.setBorderWidth(0.01f);
						cell76.setPaddingBottom(2);
						cell76.setBorderWidthBottom(0.0f);
						cell76.setBorderColor(BaseColor.BLACK);
						cell76.setBorderColorBottom(BaseColor.BLACK);
						cell76.setBorderWidthBottom(1f);

						tableOS6.addCell(cell76);
					} else {
						/*
						 * for RSIDs
						 */
						PdfPCell cell76 = new PdfPCell(new Paragraph("WNL", mainContent));
						cell76.setBorderWidth(0.01f);
						cell76.setPaddingBottom(2);
						cell76.setBorderWidthBottom(0.0f);
						cell76.setBorderColor(BaseColor.BLACK);
						cell76.setBorderColorBottom(BaseColor.BLACK);
						cell76.setBorderWidthBottom(1f);

						tableOS6.addCell(cell76);
					}

					PdfPCell cell60 = new PdfPCell(tableOS6);
					cell60.setBorderWidth(0.01f);
					table1.addCell(cell60);
				}

				if (!(resultSet3.getString("biometryAxialLengthOD").isEmpty())
						|| (!(resultSet3.getString("biometryAxialLengthOS").isEmpty()))) {
					/*
					 * for Associated Disease
					 */
					PdfPCell cell77 = new PdfPCell(new Paragraph("Axial Length", Font4));
					cell77.setBorderWidth(0.01f);
					cell77.setPaddingBottom(2);
					cell77.setBorderWidthBottom(0.01f);
					cell77.setHorizontalAlignment(Element.ALIGN_RIGHT);
					cell77.setBorderColor(BaseColor.BLACK);

					table1.addCell(cell77);

					if (!(resultSet3.getString("biometryAxialLengthOD").isEmpty())) {
						/*
						 * for ClinVar URL
						 */
						PdfPCell cell78 = new PdfPCell(
								new Paragraph(resultSet3.getString("biometryAxialLengthOD"), mainContent));
						cell78.setBorderWidth(0.01f);
						cell78.setPaddingBottom(2);
						cell78.setBorderWidthBottom(0.01f);
						cell78.setBorderColor(BaseColor.BLACK);

						table1.addCell(cell78);
					} else {
						/*
						 * for ClinVar URL
						 */
						PdfPCell cell78 = new PdfPCell(new Paragraph("WNL", mainContent));
						cell78.setBorderWidth(0.01f);
						cell78.setPaddingBottom(2);
						cell78.setBorderWidthBottom(0.01f);
						cell78.setBorderColor(BaseColor.BLACK);

						table1.addCell(cell78);
					}

					if (!(resultSet3.getString("biometryAxialLengthOS").isEmpty())) {
						/*
						 * for RSIDs
						 */
						PdfPCell cell79 = new PdfPCell(
								new Paragraph(resultSet3.getString("biometryAxialLengthOS"), mainContent));
						cell79.setBorderWidth(0.01f);
						cell79.setPaddingBottom(2);
						cell79.setBorderWidthBottom(0.01f);
						cell79.setBorderColor(BaseColor.BLACK);

						table1.addCell(cell79);
					} else {
						/*
						 * for RSIDs
						 */
						PdfPCell cell79 = new PdfPCell(new Paragraph("WNL", mainContent));
						cell79.setBorderWidth(0.01f);
						cell79.setPaddingBottom(2);
						cell79.setBorderWidthBottom(0.01f);
						cell79.setBorderColor(BaseColor.BLACK);

						table1.addCell(cell79);
					}

				}

				if (!(resultSet3.getString("biometryIOLOD").isEmpty())
						|| !(resultSet3.getString("biometryIOLOS").isEmpty())) {
					/*
					 * for Associated Disease
					 */
					PdfPCell cell80 = new PdfPCell(new Paragraph("IOL", Font4));
					cell80.setBorderWidth(0.01f);
					cell80.setPaddingBottom(2);
					cell80.setBorderWidthTop(0.0f);
					cell80.setHorizontalAlignment(Element.ALIGN_RIGHT);
					cell80.setBorderColor(BaseColor.BLACK);
					cell80.setBorderColorBottom(BaseColor.BLACK);
					cell80.setBorderWidthBottom(1f);

					table1.addCell(cell80);

					if (!(resultSet3.getString("biometryIOLOD").isEmpty())) {
						/*
						 * for ClinVar URL
						 */
						PdfPCell cell81 = new PdfPCell(
								new Paragraph(resultSet3.getString("biometryIOLOD"), mainContent));
						cell81.setBorderWidth(0.01f);
						cell81.setPaddingBottom(2);
						cell81.setBorderWidthTop(0.0f);
						cell81.setBorderColor(BaseColor.BLACK);
						cell81.setBorderColorBottom(BaseColor.BLACK);
						cell81.setBorderWidthBottom(1f);

						table1.addCell(cell81);
					} else {
						/*
						 * for ClinVar URL
						 */
						PdfPCell cell81 = new PdfPCell(new Paragraph("WNL", mainContent));
						cell81.setBorderWidth(0.01f);
						cell81.setPaddingBottom(2);
						cell81.setBorderWidthTop(0.0f);
						cell81.setBorderColor(BaseColor.BLACK);
						cell81.setBorderColorBottom(BaseColor.BLACK);
						cell81.setBorderWidthBottom(1f);

						table1.addCell(cell81);
					}

					if (!(resultSet3.getString("biometryIOLOS").isEmpty())) {
						/*
						 * for RSID
						 */
						PdfPCell cell82 = new PdfPCell(
								new Paragraph(resultSet3.getString("biometryIOLOS"), mainContent));
						cell82.setBorderWidth(0.01f);
						cell82.setPaddingBottom(2);
						cell82.setBorderWidthTop(0.0f);
						cell82.setBorderColor(BaseColor.BLACK);
						cell82.setBorderColorBottom(BaseColor.BLACK);
						cell82.setBorderWidthBottom(1f);

						table1.addCell(cell82);
					} else {
						/*
						 * for RSID
						 */
						PdfPCell cell82 = new PdfPCell(new Paragraph("WNL", mainContent));
						cell82.setBorderWidth(0.01f);
						cell82.setPaddingBottom(2);
						cell82.setBorderWidthTop(0.0f);
						cell82.setBorderColor(BaseColor.BLACK);
						cell82.setBorderColorBottom(BaseColor.BLACK);
						cell82.setBorderWidthBottom(1f);

						table1.addCell(cell82);
					}
				}

				// if (!(resultSet3.getString("biometryComment")).isEmpty()) {

				PdfPCell cell16 = new PdfPCell(new Paragraph("Additional Comments", Font4));
				cell16.setBorderWidth(0.01f);
				cell16.setPaddingBottom(5);
				cell16.setBorderWidthLeft(0.2f);
				cell16.setBorderColor(BaseColor.BLACK);
				cell16.setHorizontalAlignment(Element.ALIGN_RIGHT);
				cell16.setBorderColorBottom(BaseColor.BLACK);

				table1.addCell(cell16);

				PdfPCell cell17 = new PdfPCell(new Paragraph(resultSet3.getString("biometryComment"), mainContent));
				cell17.setBorderWidth(0.01f);
				cell17.setColspan(2);
				cell17.setPaddingBottom(2);
				cell17.setBorderColor(BaseColor.BLACK);
				cell17.setBorderWidthLeft(0.0f);
				cell16.setBorderColorTop(BaseColor.BLACK);
				cell16.setBorderWidthTop(1f);

				table1.addCell(cell17);
				// }

				document.add(table1);
			}

			PdfPTable lastTable = new PdfPTable(4);

			lastTable.setFooterRows(1);
			lastTable.setWidthPercentage(100);
			Rectangle lastRect = new Rectangle(270, 700);
			lastTable.setWidthPercentage(new float[] { 75, 75, 75, 75 }, lastRect);

			PdfPCell cellBlnk = new PdfPCell(new Paragraph("", Font5));
			cellBlnk.setPaddingTop(10);
			cellBlnk.setPaddingBottom(5);
			cellBlnk.setHorizontalAlignment(Element.ALIGN_CENTER);
			cellBlnk.setUseBorderPadding(true);
			cellBlnk.setColspan(4);
			cellBlnk.setBorderWidthBottom(1f);
			// cell.setBorderColorBottom(BaseColor.DARK_GRAY);
			cellBlnk.setBorderColor(BaseColor.WHITE);

			/*
			 * For Diagnosis
			 */
			PdfPCell cellDiagnosis = new PdfPCell(new Paragraph("Diagnosis", mainContent));
			cellDiagnosis.setBorderWidth(0.01f);
			cellDiagnosis.setPaddingBottom(5);
			cellDiagnosis.setBorderColor(BaseColor.WHITE);

			PdfPCell cellDiagnosisValue = new PdfPCell(new Paragraph(diagnosis, mainContent));
			cellDiagnosisValue.setBorderWidth(0.2f);
			cellDiagnosisValue.setPaddingBottom(5);
			cellDiagnosisValue.setColspan(3);
			cellDiagnosisValue.setBorderColor(BaseColor.WHITE);

			/*
			 * For Advice
			 */
			PdfPCell cellAdvice = new PdfPCell(new Paragraph("Advice", mainContent));
			cellAdvice.setBorderWidth(0.01f);
			cellAdvice.setPaddingBottom(5);
			cellAdvice.setBorderColor(BaseColor.WHITE);

			PdfPCell cellAdviceValue = new PdfPCell(new Paragraph(advice, mainContent));
			cellAdviceValue.setBorderWidth(0.2f);
			cellAdviceValue.setPaddingBottom(5);
			cellAdviceValue.setColspan(3);
			cellAdviceValue.setBorderColor(BaseColor.WHITE);

			lastTable.addCell(cellBlnk);
			lastTable.addCell(cellDiagnosis);
			lastTable.addCell(cellDiagnosisValue);
			lastTable.addCell(cellAdvice);
			lastTable.addCell(cellAdviceValue);

			document.add(lastTable);

			// document.newPage();

			/*
			 * Prescription title table
			 */
			PdfPTable prescTable = new PdfPTable(4);

			// prescTable.setFooterRows(1);
			prescTable.setWidthPercentage(100);
			Rectangle prescRect = new Rectangle(270, 700);
			prescTable.setWidthPercentage(new float[] { 75, 75, 75, 75 }, prescRect);

			PdfPCell cellPresc = new PdfPCell(new Paragraph("Prescription", Font5));
			cellPresc.setPaddingTop(20);
			cellPresc.setPaddingBottom(10);
			cellPresc.setHorizontalAlignment(Element.ALIGN_CENTER);
			cellPresc.setUseBorderPadding(true);
			cellPresc.setColspan(4);
			cellPresc.setBorderWidthBottom(1f);
			// cell.setBorderColorBottom(BaseColor.DARK_GRAY);
			cellPresc.setBorderColor(BaseColor.WHITE);

			prescTable.addCell(cellPresc);

			document.add(prescTable);

			/*
			 * For Investigations
			 */
			while (resultSet4.next()) {

				investigation = resultSet4.getString("investigation");

				if (investigation == "" || investigation == null) {
					continue;
				} else if (investigation.isEmpty()) {
					continue;
				} else {

					PdfPTable tableInvest = new PdfPTable(2);

					tableInvest.setWidthPercentage(100);
					Rectangle rect5 = new Rectangle(270, 700);
					tableInvest.setWidthPercentage(new float[] { 105, 165 }, rect5);

					PdfPCell cell002 = new PdfPCell(new Paragraph("Investigation/Procedure: ", mainContent));
					cell002.setBorderWidth(0.01f);
					cell002.setPaddingBottom(5);
					cell002.setBorderWidthLeft(0.2f);
					cell002.setBorderColor(BaseColor.WHITE);

					/*
					 * for investigation details
					 */
					PdfPCell cell2001 = new PdfPCell(new Paragraph(investigation, mainContent));
					cell2001.setBorderWidth(0.2f);
					cell2001.setPaddingBottom(1);
					cell2001.setHorizontalAlignment(Element.ALIGN_LEFT);
					cell2001.setBorderColor(BaseColor.WHITE);

					tableInvest.addCell(cell002);
					tableInvest.addCell(cell2001);

					document.add(tableInvest);

				}

			}

			/*
			 * For prescription Data
			 */
			PdfPTable table3 = new PdfPTable(3);
			table3.setWidthPercentage(100);
			Rectangle rect2 = new Rectangle(270, 700);
			table3.setWidthPercentage(new float[] { 30, 180, 60 }, rect2);

			// For blank space
			PdfPCell cell30 = new PdfPCell(new Paragraph(
					"                                                                                               "
							+ "                                                                                                                            "
							+ "                                                                                                                              ",
					Font2));
			cell30.setColspan(3);
			cell30.setBorderWidthRight(0f);
			cell30.setBorderWidthLeft(0f);
			cell30.setBorderWidthTop(0f);
			cell30.setBorderWidthBottom(0f);
			cell30.setBorderColorTop(BaseColor.WHITE);

			/*
			 * PdfPCell cell3011 = new PdfPCell(new Paragraph(
			 * "                                                                                               "
			 * +
			 * "                                                                                                                            "
			 * +
			 * "                                                                                                                              "
			 * , Font2)); cell3011.setColspan(3); cell3011.setBorderWidthRight(0f);
			 * cell3011.setBorderWidthLeft(0f); cell3011.setBorderWidthTop(0f);
			 * cell3011.setBorderWidthBottom(0f);
			 * cell3011.setBorderColorTop(BaseColor.WHITE);
			 */

			/*
			 * Table for Prescription image
			 */
			PdfPTable imageTable = new PdfPTable(2);
			imageTable.setWidthPercentage(80);
			imageTable.setWidths(new int[] { 1, 2 });

			PdfPCell imageCell1 = new PdfPCell(prescrImg, true);
			imageCell1.setBorderColor(BaseColor.WHITE);

			PdfPCell imageCell2 = new PdfPCell(new Paragraph("", mainContent));
			imageCell2.setBorderColor(BaseColor.WHITE);

			imageTable.addCell(imageCell1);
			imageTable.addCell(imageCell2);

			// Gene
			PdfPCell cell3002 = new PdfPCell(imageTable);
			cell3002.setBorderWidth(0.0f);
			cell3002.setPaddingBottom(10);
			cell3002.setBorderColor(BaseColor.WHITE);

			PdfPCell cell320 = new PdfPCell(new Paragraph("", mainContent));
			cell320.setBorderWidth(0.01f);
			cell320.setPaddingBottom(5);
			cell320.setBorderColor(BaseColor.WHITE);

			// Amino Acid Change
			PdfPCell cell34 = new PdfPCell(new Paragraph("Qty", Font5));
			cell34.setBorderWidth(0.01f);
			cell34.setPaddingBottom(5);
			cell34.setHorizontalAlignment(Element.ALIGN_RIGHT);
			cell34.setBorderColor(BaseColor.WHITE);

			table3.addCell(cell30);
			// table3.addCell(cell3011);
			table3.addCell(cell3002);
			table3.addCell(cell320);
			table3.addCell(cell34);

			document.add(table3);

			while (resultSet5.next()) {

				PdfPTable table1 = new PdfPTable(3);

				table1.setWidthPercentage(100);
				Rectangle rect1 = new Rectangle(270, 700);
				table1.setWidthPercentage(new float[] { 110, 40, 120 }, rect1);

				String finalTradeName = resultSet5.getString("tradeName").toUpperCase();

				System.out.println("TRADENAME:: " + finalTradeName);
				if (resultSet5.getString("category") == null || resultSet5.getString("category") == "") {
					finalTradeName = finalTradeName;
				} else if (resultSet5.getString("category").isEmpty()) {
					finalTradeName = finalTradeName;
				} else {
					finalTradeName = finalTradeName + "\t\t\t\t\t" + resultSet5.getString("category");
				}

				if (resultSet5.getString("drugName") == null || resultSet5.getString("drugName") == "") {
					finalTradeName = finalTradeName;
				} else if (resultSet5.getString("drugName").isEmpty()) {
					finalTradeName = finalTradeName;
				} else {
					finalTradeName += "\n(" + resultSet5.getString("drugName") + ")";
				}

				/*
				 * for Nucleotide Change
				 */

				PdfPCell cell21 = new PdfPCell(new Paragraph(finalTradeName, marathiFont));
				cell21.setBorderWidth(0.2f);
				cell21.setPaddingBottom(1);
				cell21.setPaddingTop(3);
				cell21.setColspan(2);
				cell21.setBorderColor(BaseColor.WHITE);

				System.out.println("QUANTIRTY:: " + resultSet5.getDouble("quantity"));
				/*
				 * for Amino Acid Change
				 */
				PdfPCell cell22 = new PdfPCell(new Paragraph("" + resultSet5.getDouble("quantity"), mainContent));
				cell22.setBorderWidth(0.2f);
				cell22.setPaddingBottom(1);
				cell22.setPaddingTop(3);
				cell22.setHorizontalAlignment(Element.ALIGN_RIGHT);
				cell22.setBorderColor(BaseColor.WHITE);

				table1.addCell(cell21);
				table1.addCell(cell22);

				String frequency = resultSet5.getString("frequency");
				String freq = frequency.replace(',', '\n');

				String noOfDays = resultSet5.getString("numberOfDays");
				String noOfDays1 = noOfDays.replace(",", " days\n");

				PdfPTable table21 = new PdfPTable(3);

				table21.setWidthPercentage(100);
				Rectangle rect3 = new Rectangle(270, 700);
				table21.setWidthPercentage(new float[] { 90, 40, 140 }, rect1);

				PdfPCell cell24 = new PdfPCell(new Paragraph(freq, marathiFont));
				cell24.setBorderWidth(0.2f);
				cell24.setPaddingBottom(10);
				cell24.setBorderColor(BaseColor.WHITE);

				PdfPCell cell241 = new PdfPCell(new Paragraph(noOfDays1 + " days", mainContent));
				cell241.setBorderWidth(0.2f);
				cell241.setPaddingBottom(10);
				cell241.setBorderColor(BaseColor.WHITE);

				PdfPCell cell25 = new PdfPCell(
						new Paragraph(StringUtils.capitalize(resultSet5.getString("comment").trim()), marathiFont));
				cell25.setBorderWidth(0.2f);
				cell25.setPaddingBottom(9);
				cell25.setBorderColor(BaseColor.WHITE);

				table21.addCell(cell24);
				table21.addCell(cell241);
				table21.addCell(cell25);

				document.add(table1);
				document.add(table21);
			}

			/*
			 * For signature in footer
			 */
			PdfPTable tableNew = new PdfPTable(1);

			tableNew.setWidthPercentage(100);
			Rectangle rect6 = new Rectangle(270, 700);
			tableNew.setWidthPercentage(new float[] { 270 }, rect6);

			PdfPCell cell1112 = new PdfPCell(
					new Paragraph("Follow-up after  " + nextVisitDays + "  days.", marathiFont));
			cell1112.setBackgroundColor(BaseColor.WHITE);
			cell1112.setPaddingTop(30);
			cell1112.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell1112.setBorderColor(BaseColor.WHITE);

			tableNew.addCell(cell1112);

			document.add(tableNew);

			/*
			 * For signature in footer
			 */

			PdfPTable table = new PdfPTable(1);
			table.setTotalWidth(350);

			PdfPCell cell1111 = new PdfPCell(new Paragraph("Signature", mainContent1));
			// cell1111.setBackgroundColor(BaseColor.BLACK);
			cell1111.setHorizontalAlignment(Element.ALIGN_RIGHT);
			cell1111.setPaddingTop(20);
			cell1111.setBorderColor(BaseColor.WHITE);
			table.addCell(cell1111);

			FooterTable event = new FooterTable(table);
			writer.setPageEvent(event);

			/*
			 * For signature in footer
			 */

			/*
			 * PdfPTable tableFooter = new PdfPTable(1); tableFooter.setTotalWidth(350);
			 * 
			 * // Table for Prescription image
			 * 
			 * PdfPTable imageTable1 = new PdfPTable(2); imageTable1.setWidthPercentage(80);
			 * imageTable1.setWidths(new int[] { 1, 2 });
			 * 
			 * PdfPCell imageCell11 = new PdfPCell(signImg, true);
			 * imageCell11.setBorderColor(BaseColor.WHITE);
			 * 
			 * PdfPCell imageCell21 = new PdfPCell(new Paragraph("", mainContent));
			 * imageCell21.setBorderColor(BaseColor.WHITE);
			 * 
			 * imageTable1.addCell(imageCell11); imageTable1.addCell(imageCell21);
			 * 
			 * PdfPCell cellFooter = new PdfPCell(imageTable1);
			 * cellFooter.setBorderWidth(0.01f); cellFooter.setPaddingBottom(15);
			 * cellFooter.setPaddingLeft(100); cellFooter.setBorderColor(BaseColor.WHITE);
			 * 
			 * tableFooter.addCell(cellFooter);
			 * 
			 * FooterTable event = new FooterTable(tableFooter); writer.setPageEvent(event);
			 */

			document.close();

			System.out.println("Successfully written and generated OPD PDF Report");

			status = "success";

			/*
			 * Closing resultSet, preparedStatement, connection objects
			 */
			resultSet5.close();
			preparedStatement5.close();

			resultSet4.close();
			preparedStatement4.close();

			resultSet3.close();
			preparedStatement3.close();

			resultSet2.close();
			preparedStatement2.close();

			resultSet1.close();
			preparedStatement1.close();

			connection.close();

		} catch (

		Exception exception) {
			exception.printStackTrace();
			status = "error";
		}
		return status;
	}

	/**
	 * 
	 * @param patientID
	 * @param visitID
	 * @param realPath
	 * @param pdfFileName
	 * @param clinicID
	 * @param practiceID
	 * @param username
	 * @param s3
	 * @param s3reportFilePath
	 * @param bucketName
	 * @return
	 */
	public String convertIPDBillingPDF(int patientID, int visitID, String realPath, String pdfFileName, int clinicID,
			int practiceID, String username, AmazonS3 s3, String s3reportFilePath, String bucketName) {

		int count = 1;

		String status = null;

		String billDate = null;

		double totalBill = 0D;
		String diagnosis = null;
		String docName = null;

		/*
		 * To covert date from database into DD-MM-YYYY
		 */
		SimpleDateFormat databaseDate = new SimpleDateFormat("yyyy-MM-dd");

		SimpleDateFormat dateToBeDisplayed = new SimpleDateFormat("dd-MM-yyyy HH:mm");

		Date date = new Date();

		String receiptNo = "";
		String receiptDate = "";
		String billingType = "";
		double amount = 0D;
		int visitTypeID = 0;
		String visitTypeName = "";
		String signature = null;
		Image signImg = null;
		String regNo = "";
		double consultationCharges = 0D;
		double totalAmt = 0D;
		double tax = 0D;
		double netAmt = 0D;
		double advAmt = 0D;
		double balanceAmt = 0D;
		String paymentType = "";
		String refReceiptNo = "";
		String ClinicianName = "";
		double totalDiscount = 0D;
		String patientName = "";
		double iolProductRate = 0D;
		String iolProductName = "";

		int receiptID = 0;
		/*
		 * Declaring variable which stores the location for FreeSans.ttf file to print
		 * marathi text on pdf
		 */
		String marathiFontDir = realPath + "fonts/FreeSans.ttf";

		ConfigurationUtil configXMLUtil = new ConfigurationUtil();

		try {
			connection = getConnection();

			/*
			 * Generate the queries to fetch details
			 */
			String fetchDetailQuery1 = QueryMaker.OPD_PDF_RETRIEVE_PATIENT;

			preparedStatement1 = connection.prepareStatement(fetchDetailQuery1);
			preparedStatement1.setInt(1, patientID);
			resultSet1 = preparedStatement1.executeQuery();

			String fetchDetailQuery2 = QueryMaker.OPD_PDF_RETRIEVE_VISIT;

			preparedStatement3 = connection.prepareStatement(fetchDetailQuery2);
			preparedStatement3.setInt(1, visitID);
			resultSet3 = preparedStatement3.executeQuery();

			// To fetch visit details from Visit Table
			while (resultSet3.next()) {
				diagnosis = resultSet3.getString("diagnosis");
				visitTypeID = resultSet3.getInt("visitTypeID");
			}

			String fetchDetailQuery3 = QueryMaker.OPD_PDF_RETRIEVE_VISIT_TYPE_NAME;
			preparedStatement4 = connection.prepareStatement(fetchDetailQuery3);
			preparedStatement4.setInt(1, visitTypeID);
			resultSet4 = preparedStatement4.executeQuery();
			while (resultSet4.next()) {
				visitTypeName = resultSet4.getString("name");
			}

			/*
			 * Generate the queries to fetch details
			 */
			String fetchDetailQuery4 = QueryMaker.RETREIVE_BILL_LIST;

			preparedStatement2 = connection.prepareStatement(fetchDetailQuery4);
			preparedStatement2.setInt(1, visitID);
			// preparedStatement2.setString(1, ActivityStatus.ACTIVE);
			resultSet2 = preparedStatement2.executeQuery();

			while (resultSet2.next()) {

				receiptNo = resultSet2.getString("receiptNo");
				receiptDate = dateToBeDisplayed.format(resultSet2.getTimestamp("receiptDate"));
				billingType = resultSet2.getString("billingType");
				amount = resultSet2.getDouble("netAmount");
				totalBill = resultSet2.getDouble("totalAmount");
				consultationCharges = resultSet2.getDouble("consultationCharges");
				tax = resultSet2.getDouble("totalDiscount");
				advAmt = resultSet2.getDouble("advPayment");
				balanceAmt = resultSet2.getDouble("balPayment");
				totalDiscount = resultSet2.getDouble("totalDiscount");
				paymentType = resultSet2.getString("paymentType");
				refReceiptNo = resultSet2.getString("referenceReceiptNo");
				ClinicianName = resultSet2.getString("clinicianName");
				receiptID = resultSet2.getInt("id");
				iolProductName = resultSet2.getString("productName");
				iolProductRate = resultSet2.getDouble("productRate");

			}

			/*
			 * Retrieve patient registration no based on patientID and clinicID from
			 * ClinicRegistration table
			 */
			String fetchClinicRegNoQuery = QueryMaker.RETRIEVE_CLINIC_REG_NO_BY_CLINIC_ID;

			preparedStatement = connection.prepareStatement(fetchClinicRegNoQuery);

			preparedStatement.setInt(1, clinicID);
			preparedStatement.setInt(2, patientID);

			resultSet2 = preparedStatement.executeQuery();

			while (resultSet2.next()) {
				regNo = resultSet2.getString("regNumber");
			}

			resultSet2.close();
			preparedStatement.close();

			String fetchBillItemDetailsQuery = QueryMaker.RETRIEVE_RECEIPT_ITEM_DETAILS_BY_RECEIPT_ID;

			preparedStatement = connection.prepareStatement(fetchBillItemDetailsQuery);

			preparedStatement.setInt(1, receiptID);

			resultSet2 = preparedStatement.executeQuery();

			RegistrationDAOinf registrationDAOinf = new RegistrationDAOImpl();

			// Retrieving USER Details by PracticeID
			HashMap<String, String> MDMap = registrationDAOinf.retrieveUserDetails(practiceID, username);

			// File SignatureFile = new File(logoFilePath + File.separator +
			// MDMap.get("Signature"));
			signature = MDMap.get("Signature");
			docName = MDMap.get("FirstName") + " " + MDMap.get("LastName");

			System.out.println("doc name ::" + docName);

			if (signature == "" || signature == null) {
				signImg = null;
			} else if (signature.isEmpty()) {
				signImg = null;
			} else {

				S3ObjectInputStream s3ObjectInputStream = s3
						.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, signature))
						.getObjectContent();

				IOUtils.copy(s3ObjectInputStream, new FileOutputStream(new File(realPath + "images/" + signature)));

				signImg = Image.getInstance(realPath + "images/" + signature);
			}

			/*
			 * Getting image path from XML
			 */
			String A5ImagePath = configXMLUtil.getLetterHeadImage();

			/*
			 * Getting page size from XMl
			 */
			String pageSize = configXMLUtil.getPageSize();

			/*
			 * Setting path to store PDF file
			 */
			File file = new File(realPath + "/" + pdfFileName);
			/*
			 * Creating Document for PDF
			 */
			Document document = null;

			/*
			 * Checking whether pageSize tag in XMl contains A5 or A4, according to that
			 * setting PDF page size
			 */
			if (pageSize.equals("A5")) {
				document = new Document(PageSize.A5);
			} else if (pageSize.equals("A4")) {
				document = new Document(PageSize.A4);
			}

			PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(file));

			Font Font1 = new Font(Font.FontFamily.TIMES_ROMAN, 10, Font.NORMAL);
			Font Font3 = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.NORMAL);
			Font Font2 = new Font(Font.FontFamily.TIMES_ROMAN, 8, Font.NORMAL);
			Font Font4 = new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.BOLD);
			Font Font5 = new Font(Font.FontFamily.TIMES_ROMAN, 10, Font.BOLD);
			Font Font7 = new Font(Font.FontFamily.TIMES_ROMAN, 14, Font.BOLD);
			Font mainContent = new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.NORMAL);
			Font mainContent1 = new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.NORMAL);
			mainContent1.setColor(BaseColor.GRAY);
			/*
			 * Defining marathi font
			 */
			Font marathiFont = FontFactory.getFont(marathiFontDir, BaseFont.IDENTITY_H, BaseFont.EMBEDDED);

			document.open();

			/*
			 * Adding image
			 */
			PdfContentByte canvas = writer.getDirectContentUnder();

			/*
			 * Checking whether pageSize is A4 or A5, according to that background image is
			 * being set
			 */

			Image image;

			if (pageSize.equals("A5")) {
				if (A5ImagePath == null || A5ImagePath == "") {
					image = null;

				} else {

					if (A5ImagePath.isEmpty()) {
						image = null;
					} else {
						System.out.println("A5img--::" + A5ImagePath);

						S3ObjectInputStream s3ObjectInputStream = s3
								.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, A5ImagePath))
								.getObjectContent();

						IOUtils.copy(s3ObjectInputStream,
								new FileOutputStream(new File(realPath + "images/" + A5ImagePath)));

						image = Image.getInstance(realPath + "images/" + A5ImagePath);

						image.scaleToFit(PageSize.A5.getWidth(), PageSize.A5.getHeight());
						image.setAbsolutePosition(0, 0);

						canvas.saveState();
						PdfGState state = new PdfGState();
						canvas.setGState(state);
						canvas.addImage(image);
						canvas.restoreState();
					}

				}
			} else if (pageSize.equals("A4")) {
				System.out.println("A4img::" + A5ImagePath);
				if (A5ImagePath == null || A5ImagePath == "") {

					image = null;

				} else {

					if (A5ImagePath.isEmpty()) {

						image = null;
					} else {

						S3ObjectInputStream s3ObjectInputStream = s3
								.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, A5ImagePath))
								.getObjectContent();

						IOUtils.copy(s3ObjectInputStream,
								new FileOutputStream(new File(realPath + "images/" + A5ImagePath)));

						image = Image.getInstance(realPath + "images/" + A5ImagePath);

						image.scaleToFit(PageSize.A4.getWidth(), PageSize.A4.getHeight());
						image.setAbsolutePosition(0, 0);

						canvas.saveState();
						PdfGState state = new PdfGState();
						canvas.setGState(state);
						canvas.addImage(image);
						canvas.restoreState();
					}

				}
			}

			/*
			 * Setting header
			 */
			document.addCreator("eDhanvantari");
			document.addTitle("Consultation Billing");

			/*
			 * For displaying patient personal details
			 */
			while (resultSet1.next()) {

				if (resultSet1.getString("middleName") == null || resultSet1.getString("middleName") == ""
						|| resultSet1.getString("middleName").isEmpty()) {
					patientName = resultSet1.getString("firstName") + " " + resultSet1.getString("lastName");
				} else {
					patientName = resultSet1.getString("firstName") + " " + resultSet1.getString("middleName") + " "
							+ resultSet1.getString("lastName");
				}
			}

			/*
			 * document.addCreator("eDhanvantariLab"); document.addTitle("Lab Test Bill");
			 */

			PdfPTable table = new PdfPTable(2);

			table.setFooterRows(1);
			table.setWidthPercentage(100);
			Rectangle rect = new Rectangle(270, 700);
			table.setWidthPercentage(new float[] { 70, 200 }, rect);

			PdfPCell cell = new PdfPCell(new Paragraph("Bill Receipt", Font5));
			cell.setPaddingTop(70);
			cell.setPaddingBottom(5);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell.setUseBorderPadding(true);
			cell.setColspan(2);
			cell.setBorder(Rectangle.NO_BORDER);
			cell.setBorderWidthBottom(1f);
			cell.setBorderColorBottom(BaseColor.DARK_GRAY);
			cell.setBorderColor(BaseColor.WHITE);

			/*
			 * For Patient Name
			 */
			PdfPCell cell2 = new PdfPCell(new Paragraph("Patient Name", mainContent));
			cell2.setBorderWidth(0.01f);
			cell2.setPaddingBottom(5);
			cell2.setBorderWidthLeft(0.2f);
			cell2.setBorderColor(BaseColor.WHITE);

			PdfPCell cell3 = new PdfPCell(new Paragraph(patientName + "(" + regNo + ")", mainContent));
			cell3.setBorderWidth(0.2f);
			cell3.setPaddingBottom(5);
			cell3.setBorderColor(BaseColor.WHITE);

			/*
			 * adding all cell to the table to create tabular structure
			 */

			table.addCell(cell);
			// table.addCell(cell1);
			table.addCell(cell2);
			table.addCell(cell3);

			document.add(table);

			/*
			 * For Billing header
			 */
			PdfPTable table0 = new PdfPTable(3);
			table0.setWidthPercentage(100);
			Rectangle rect0 = new Rectangle(270, 700);
			table0.setWidthPercentage(new float[] { 100, 50, 120 }, rect0);

			// For blank space
			PdfPCell cell10 = new PdfPCell(new Paragraph("", Font2));
			cell10.setColspan(3);
			cell10.setPadding(0);
			cell10.setPaddingBottom(2);
			cell10.setBorderColor(BaseColor.WHITE);

			// For Receipt Date and time
			PdfPCell cell4 = new PdfPCell(new Paragraph("Receipt Date and Time: " + receiptDate, mainContent));
			cell4.setPaddingBottom(2);
			cell4.setColspan(2);
			cell4.setBorderWidthRight(0f);
			cell4.setBorderWidthLeft(0f);
			cell4.setBorderWidthTop(0f);
			cell4.setBorderWidthBottom(0f);
			cell4.setBorderColor(BaseColor.WHITE);

			// For receipt no.
			PdfPCell cell5 = new PdfPCell(new Paragraph("Receipt No.: " + receiptNo, mainContent));
			cell5.setBorderWidth(0.01f);
			cell5.setPaddingBottom(2);
			cell5.setHorizontalAlignment(Element.ALIGN_RIGHT);
			cell5.setBorderColor(BaseColor.WHITE);

			table0.addCell(cell10);
			table0.addCell(cell4);
			table0.addCell(cell5);
			// table0.addCell(cell6);

			document.add(table0);

			/*
			 * For prescription
			 */
			PdfPTable table3 = new PdfPTable(3);
			table3.setWidthPercentage(100);
			Rectangle rect2 = new Rectangle(270, 700);
			table3.setWidthPercentage(new float[] { 40, 120, 100 }, rect2);

			/*
			 * Creating Table header
			 */

			// For blank space
			PdfPCell cell30 = new PdfPCell(new Paragraph(
					"                                                                                               "
							+ "                                                                                                                            "
							+ "                                                                                                                              ",
					Font2));
			cell30.setColspan(3);
			cell30.setBorderWidthRight(0f);
			cell30.setBorderWidthLeft(0f);
			cell30.setBorderWidthTop(0f);
			cell30.setBorderWidthBottom(0f);
			cell30.setBorderColorTop(BaseColor.WHITE);

			// for Title
			PdfPCell cell31 = new PdfPCell(new Paragraph("Billing Details", Font5));
			cell31.setPaddingTop(20);
			cell31.setPaddingBottom(10);
			cell31.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell31.setUseBorderPadding(true);
			cell31.setColspan(3);
			cell31.setBorderWidthRight(0.1f);
			cell31.setBorderWidthLeft(0.1f);
			cell31.setBorderWidthTop(0.1f);
			cell31.setBorderWidthBottom(1f);
			cell31.setBorderColorBottom(BaseColor.DARK_GRAY);
			cell31.setBorderColor(BaseColor.WHITE);

			// for Title
			/*
			 * PdfPCell cell311 = new PdfPCell(new Paragraph("Billing Date:\t" +
			 * receiptDate, Font5)); cell311.setPaddingTop(5); cell311.setPaddingBottom(10);
			 * cell311.setHorizontalAlignment(Element.ALIGN_CENTER);
			 * cell311.setUseBorderPadding(true); cell311.setColspan(5);
			 * cell311.setBorderWidthRight(0.1f); cell311.setBorderWidthLeft(0.1f);
			 * cell311.setBorderWidthTop(0.1f); cell311.setBorderWidthBottom(1f);
			 * cell311.setBorderColorBottom(BaseColor.DARK_GRAY);
			 * cell311.setBorderColor(BaseColor.WHITE);
			 */
			// Gene
			PdfPCell cell32 = new PdfPCell(new Paragraph("Sr.No.", Font4));
			cell32.setBorderWidth(0.01f);
			cell32.setPaddingBottom(5);
			cell32.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell32.setBorderColor(BaseColor.BLACK);

			// Nucleotide Change
			PdfPCell cell33 = new PdfPCell(new Paragraph("Description", Font4));
			cell33.setBorderWidth(0.01f);
			cell33.setPaddingBottom(5);
			cell33.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell33.setBorderColor(BaseColor.BLACK);

			// Amino Acid Change
			/*
			 * PdfPCell cell34 = new PdfPCell(new Paragraph("Rate", mainContent));
			 * 
			 * cell34.setBorderWidth(0.01f); cell34.setPaddingBottom(5);
			 * cell34.setBorderColor(BaseColor.WHITE);
			 * 
			 * // Variant Type PdfPCell cell35 = new PdfPCell(new Paragraph("Charge",
			 * mainContent));
			 * 
			 * cell35.setBorderWidth(0.01f); cell35.setPaddingBottom(5);
			 * cell35.setBorderColor(BaseColor.WHITE);
			 */

			// Variant Impact
			PdfPCell cell36 = new PdfPCell(new Paragraph("Amount", Font4));
			cell36.setBorderWidth(0.01f);
			cell36.setPaddingBottom(5);
			cell36.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell36.setBorderColor(BaseColor.BLACK);

			table3.addCell(cell30);
			// table3.addCell(cell311);
			table3.addCell(cell31);
			table3.addCell(cell32);
			table3.addCell(cell33);
			// table3.addCell(cell34);
			// table3.addCell(cell35);
			table3.addCell(cell36);

			int srNo = 1;

			while (resultSet2.next()) {

				// Sr NO
				PdfPCell cell032 = new PdfPCell(new Paragraph("" + srNo, mainContent));
				cell032.setBorderWidth(0.01f);
				cell032.setPaddingBottom(5);
				cell032.setHorizontalAlignment(Element.ALIGN_CENTER);
				cell032.setBorderColor(BaseColor.BLACK);

				// Charges
				PdfPCell cell033 = new PdfPCell(new Paragraph(resultSet2.getString("item"), mainContent));
				cell033.setBorderWidth(0.01f);
				cell033.setPaddingBottom(5);
				cell033.setHorizontalAlignment(Element.ALIGN_CENTER);
				cell033.setBorderColor(BaseColor.BLACK);

				// Rate
				PdfPCell cell036 = new PdfPCell(new Paragraph("" + resultSet2.getDouble("rate"), mainContent));
				cell036.setBorderWidth(0.01f);
				cell036.setPaddingBottom(5);
				cell036.setHorizontalAlignment(Element.ALIGN_CENTER);
				cell036.setBorderColor(BaseColor.BLACK);

				table3.addCell(cell032);
				table3.addCell(cell033);
				table3.addCell(cell036);

				srNo++;

			}

			if (!(iolProductName == "" || iolProductName == null)) {
				// Sr NO
				PdfPCell cell084 = new PdfPCell(new Paragraph("" + srNo, mainContent));
				cell084.setBorderWidth(0.01f);
				cell084.setPaddingBottom(5);
				cell084.setHorizontalAlignment(Element.ALIGN_CENTER);
				cell084.setBorderColor(BaseColor.BLACK);

				// IOL Charges
				PdfPCell cell085 = new PdfPCell(new Paragraph("" + iolProductName, mainContent));
				cell085.setBorderWidth(0.01f);
				cell085.setPaddingBottom(5);
				cell085.setHorizontalAlignment(Element.ALIGN_CENTER);
				cell085.setBorderColor(BaseColor.BLACK);

				// Rate
				PdfPCell cell086 = new PdfPCell(new Paragraph("" + iolProductRate, mainContent));
				cell086.setBorderWidth(0.01f);
				cell086.setPaddingBottom(5);
				cell086.setHorizontalAlignment(Element.ALIGN_CENTER);
				cell086.setBorderColor(BaseColor.BLACK);

				table3.addCell(cell084);
				table3.addCell(cell085);
				table3.addCell(cell086);

				srNo++;
			}

			// Sr NO
			PdfPCell cell028 = new PdfPCell(new Paragraph("" + srNo, mainContent));
			cell028.setBorderWidth(0.01f);
			cell028.setPaddingBottom(5);
			cell028.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell028.setBorderColor(BaseColor.BLACK);

			// Charges
			PdfPCell cell029 = new PdfPCell(new Paragraph("Consultation Charges", mainContent));
			cell029.setBorderWidth(0.01f);
			cell029.setPaddingBottom(5);
			cell029.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell029.setBorderColor(BaseColor.BLACK);

			// Rate
			PdfPCell cell030 = new PdfPCell(new Paragraph("" + consultationCharges, mainContent));
			cell030.setBorderWidth(0.01f);
			cell030.setPaddingBottom(5);
			cell030.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell030.setBorderColor(BaseColor.BLACK);

			table3.addCell(cell028);
			table3.addCell(cell029);
			table3.addCell(cell030);

			document.add(table3);

			PdfPTable table2 = new PdfPTable(3);
			table2.setWidthPercentage(100);
			Rectangle rect02 = new Rectangle(270, 700);
			table2.setWidthPercentage(new float[] { 40, 120, 100 }, rect02);

			PdfPCell cell25 = new PdfPCell(new Paragraph("Total Amount", Font1));
			cell25.setBorderWidth(0.2f);
			cell25.setPaddingBottom(3);
			cell25.setColspan(2);
			cell25.setHorizontalAlignment(Element.ALIGN_RIGHT);
			cell25.setBorderColor(BaseColor.GRAY);

			// For total amount
			PdfPCell cell26 = new PdfPCell(new Paragraph("" + totalBill, Font1));
			cell26.setBorderWidth(0.2f);
			cell26.setPaddingBottom(3);
			cell26.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell26.setBorderColor(BaseColor.GRAY);

			/*
			 * // For Advance Payment PdfPCell cell29 = new PdfPCell(new
			 * Paragraph("Total Discount", Font1)); cell29.setBorderWidth(0.2f);
			 * cell29.setPaddingBottom(3); cell29.setColspan(2);
			 * cell29.setHorizontalAlignment(Element.ALIGN_RIGHT);
			 * cell29.setBorderColor(BaseColor.GRAY);
			 * 
			 * // For Advance Payment PdfPCell cell34 = new PdfPCell(new Paragraph("" +
			 * totalDiscount, Font1)); cell34.setBorderWidth(0.2f);
			 * cell34.setPaddingBottom(3);
			 * cell34.setHorizontalAlignment(Element.ALIGN_CENTER);
			 * cell34.setBorderColor(BaseColor.GRAY);
			 * 
			 * // For NET Payment PdfPCell cell41 = new PdfPCell(new Paragraph("Net Amount",
			 * Font1)); cell41.setBorderWidth(0.2f); cell41.setPaddingBottom(3);
			 * cell41.setColspan(2); cell41.setHorizontalAlignment(Element.ALIGN_RIGHT);
			 * cell41.setBorderColor(BaseColor.GRAY); cell41.setBorderWidthBottom(1f);
			 * 
			 * // For NET Payment PdfPCell cell42 = new PdfPCell(new Paragraph("" + amount,
			 * Font1)); cell42.setBorderWidth(0.2f); cell42.setPaddingBottom(3);
			 * cell42.setHorizontalAlignment(Element.ALIGN_CENTER);
			 * cell42.setBorderColor(BaseColor.GRAY); cell42.setBorderWidthBottom(1f);
			 */

			table2.addCell(cell25);
			table2.addCell(cell26);
			// table2.addCell(cell251);
			// table2.addCell(cell261);
			// table2.addCell(cell27);
			// table2.addCell(cell28);
//			table2.addCell(cell29);
//			table2.addCell(cell34);
//			table2.addCell(cell41);
//			table2.addCell(cell42);

			if (balanceAmt != netAmt) {
				// For Advance AMT Payment
				PdfPCell cell43 = new PdfPCell(new Paragraph("Advance Payment", Font1));
				cell43.setBorderWidth(0.2f);
				cell43.setPaddingBottom(3);
				cell43.setColspan(2);
				cell43.setHorizontalAlignment(Element.ALIGN_RIGHT);
				cell43.setBorderColor(BaseColor.GRAY);
				cell43.setBorderWidthBottom(1f);

				// For Advance Amt Payment
				PdfPCell cell44 = new PdfPCell(new Paragraph("" + advAmt, Font1));
				cell44.setBorderWidth(0.2f);
				cell44.setPaddingBottom(3);
				cell44.setHorizontalAlignment(Element.ALIGN_CENTER);
				cell44.setBorderColor(BaseColor.GRAY);
				cell44.setBorderWidthBottom(1f);

				// For balance AMT Payment
				PdfPCell cell45 = new PdfPCell(new Paragraph("Balance Payment", Font1));
				cell45.setBorderWidth(0.2f);
				cell45.setPaddingBottom(3);
				cell45.setColspan(2);
				cell45.setHorizontalAlignment(Element.ALIGN_RIGHT);
				cell45.setBorderColor(BaseColor.GRAY);
				cell45.setBorderWidthBottom(1f);

				// For balance Amt Payment
				PdfPCell cell46 = new PdfPCell(new Paragraph("" + balanceAmt, Font1));
				cell46.setBorderWidth(0.2f);
				cell46.setPaddingBottom(3);
				cell46.setHorizontalAlignment(Element.ALIGN_CENTER);
				cell46.setBorderColor(BaseColor.GRAY);
				cell46.setBorderWidthBottom(1f);

				table2.addCell(cell43);
				table2.addCell(cell44);
				table2.addCell(cell45);
				table2.addCell(cell46);

			}

			document.add(table2);
			PdfPTable table4 = new PdfPTable(4);
			table4.setWidthPercentage(100);
			Rectangle rect3 = new Rectangle(270, 700);
			table4.setWidthPercentage(new float[] { 65, 70, 65, 70 }, rect3);

			/*
			 * Checking what the payment type is, printing details
			 */
			if (paymentType.contains("Cash")) {

				PdfPCell cell571 = new PdfPCell(new Paragraph("", mainContent));
				cell571.setBorderWidth(0.01f);
				cell571.setPaddingBottom(2);
				cell571.setPaddingTop(2);
				cell571.setColspan(4);
				cell571.setBorderColor(BaseColor.WHITE);

				/*
				 * For Payment Type
				 */
				PdfPCell cell57 = new PdfPCell(new Paragraph("Payment Type: ", mainContent));
				cell57.setBorderWidth(0.01f);
				cell57.setPaddingBottom(2);
				cell57.setPaddingTop(2);
				cell57.setBorderColor(BaseColor.WHITE);

				PdfPCell cell58 = new PdfPCell(new Paragraph(paymentType, mainContent));
				cell58.setBorderWidth(0.01f);
				cell58.setPaddingBottom(2);
				cell58.setPaddingTop(2);
				cell58.setColspan(3);
				cell58.setBorderColor(BaseColor.WHITE);

				PdfPCell cell61 = new PdfPCell(new Paragraph("", mainContent));
				cell61.setBorderWidth(0.01f);
				cell61.setColspan(4);
				cell61.setBorderWidthBottom(0.5f);
				cell61.setBorderColorBottom(BaseColor.GRAY);
				cell61.setBorderColor(BaseColor.WHITE);

				/*
				 * For Cash details
				 */
				// For cash paid
				/*
				 * PdfPCell cell62 = new PdfPCell(new Paragraph("Cash Paid", mainContent));
				 * cell62.setBorderWidth(0.01f); cell62.setPaddingBottom(2);
				 * cell62.setPaddingTop(2); cell62.setBorderColor(BaseColor.WHITE);
				 * 
				 * PdfPCell cell63 = new PdfPCell(new Paragraph("" + cashPaid, mainContent));
				 * cell63.setBorderWidth(0.01f); cell63.setPaddingBottom(2);
				 * cell63.setPaddingTop(2); cell63.setBorderColor(BaseColor.WHITE);
				 */

				// For Cash to return
				/*
				 * PdfPCell cell64 = new PdfPCell(new Paragraph("Cash To Return", mainContent));
				 * cell64.setBorderWidth(0.01f); cell64.setPaddingBottom(2);
				 * cell64.setPaddingTop(2); cell64.setBorderColor(BaseColor.WHITE);
				 * 
				 * PdfPCell cell65 = new PdfPCell(new Paragraph("" + cashToReturn,
				 * mainContent)); cell65.setBorderWidth(0.01f); cell65.setPaddingBottom(2);
				 * cell65.setPaddingTop(2); cell65.setBorderColor(BaseColor.WHITE);
				 */

				table4.addCell(cell571);
				table4.addCell(cell57);
				table4.addCell(cell58);
				table4.addCell(cell61);
				/*
				 * table4.addCell(cell62); table4.addCell(cell63); table4.addCell(cell64);
				 * table4.addCell(cell65);
				 */

			}
			if (paymentType.contains("Cheque")) {

				PdfPCell cell571 = new PdfPCell(new Paragraph("", mainContent));
				cell571.setBorderWidth(0.01f);
				cell571.setPaddingBottom(2);
				cell571.setPaddingTop(2);
				cell571.setColspan(4);
				cell571.setBorderColor(BaseColor.WHITE);

				/*
				 * For Payment Type
				 */
				PdfPCell cell57 = new PdfPCell(new Paragraph("Payment Type: ", mainContent));
				cell57.setBorderWidth(0.01f);
				cell57.setPaddingBottom(2);
				cell57.setPaddingTop(2);
				cell57.setBorderColor(BaseColor.WHITE);

				PdfPCell cell58 = new PdfPCell(new Paragraph(paymentType, mainContent));
				cell58.setBorderWidth(0.01f);
				cell58.setPaddingBottom(2);
				cell58.setPaddingTop(2);
				cell58.setColspan(3);
				cell58.setBorderColor(BaseColor.WHITE);

				PdfPCell cell61 = new PdfPCell(new Paragraph("", mainContent));
				cell61.setBorderWidth(0.01f);
				cell61.setColspan(4);
				cell61.setBorderWidthBottom(0.5f);
				cell61.setBorderColorBottom(BaseColor.GRAY);
				cell61.setBorderColor(BaseColor.WHITE);

				/*
				 * For cheque details
				 */
				// For cheque Issued By
				/*
				 * PdfPCell cell62 = new PdfPCell(new Paragraph("Cheque Issued By",
				 * mainContent)); cell62.setBorderWidth(0.01f); cell62.setPaddingBottom(2);
				 * cell62.setPaddingTop(2); cell62.setBorderColor(BaseColor.WHITE);
				 * 
				 * PdfPCell cell63 = new PdfPCell(new Paragraph(cheqIssuedBy, mainContent));
				 * cell63.setBorderWidth(0.01f); cell63.setPaddingBottom(2);
				 * cell63.setPaddingTop(2); cell63.setBorderColor(BaseColor.WHITE);
				 */

				// For cheque No
				/*
				 * PdfPCell cell64 = new PdfPCell(new Paragraph("Cheque No.", mainContent));
				 * cell64.setBorderWidth(0.01f); cell64.setPaddingBottom(2);
				 * cell64.setPaddingTop(2); cell64.setBorderColor(BaseColor.WHITE);
				 * 
				 * PdfPCell cell65 = new PdfPCell(new Paragraph(cheqNo, mainContent));
				 * cell65.setBorderWidth(0.01f); cell65.setPaddingBottom(2);
				 * cell65.setPaddingTop(2); cell65.setBorderColor(BaseColor.WHITE);
				 */

				// For cheque Bank Name
				/*
				 * PdfPCell cell66 = new PdfPCell(new Paragraph("Bank Name", mainContent));
				 * cell66.setBorderWidth(0.01f); cell66.setPaddingBottom(2);
				 * cell66.setPaddingTop(2); cell66.setBorderColor(BaseColor.WHITE);
				 * 
				 * PdfPCell cell67 = new PdfPCell(new Paragraph(bankName, mainContent));
				 * cell67.setBorderWidth(0.01f); cell67.setPaddingBottom(2);
				 * cell67.setPaddingTop(2); cell67.setBorderColor(BaseColor.WHITE);
				 */

				// For cheque Bank Branch
				/*
				 * PdfPCell cell68 = new PdfPCell(new Paragraph("Branch", mainContent));
				 * cell68.setBorderWidth(0.01f); cell68.setPaddingBottom(2);
				 * cell68.setPaddingTop(2); cell68.setBorderColor(BaseColor.WHITE);
				 * 
				 * PdfPCell cell69 = new PdfPCell(new Paragraph(bankBranch, mainContent));
				 * cell69.setBorderWidth(0.01f); cell69.setPaddingBottom(2);
				 * cell69.setPaddingTop(2); cell69.setBorderColor(BaseColor.WHITE);
				 */

				// For cheque Date
				/*
				 * PdfPCell cell70 = new PdfPCell(new Paragraph("Date", mainContent));
				 * cell70.setBorderWidth(0.01f); cell70.setPaddingBottom(2);
				 * cell70.setPaddingTop(2); cell70.setBorderColor(BaseColor.WHITE);
				 * 
				 * PdfPCell cell71 = new PdfPCell(new Paragraph(cheqDate, mainContent));
				 * cell71.setBorderWidth(0.01f); cell71.setPaddingBottom(2);
				 * cell71.setPaddingTop(2); cell71.setBorderColor(BaseColor.WHITE);
				 */

				// For cheque amount
				/*
				 * PdfPCell cell72 = new PdfPCell(new Paragraph("Amount", mainContent));
				 * cell72.setBorderWidth(0.01f); cell72.setPaddingBottom(2);
				 * cell72.setPaddingTop(2); cell72.setBorderColor(BaseColor.WHITE);
				 * 
				 * PdfPCell cell73 = new PdfPCell(new Paragraph("" + cheqAmt, mainContent));
				 * cell73.setBorderWidth(0.01f); cell73.setPaddingBottom(2);
				 * cell73.setPaddingTop(2); cell73.setBorderColor(BaseColor.WHITE);
				 * 
				 * PdfPCell cell74 = new PdfPCell(new Paragraph("", mainContent));
				 * cell74.setBorderWidth(0.01f); cell74.setColspan(4);
				 * cell74.setBorderWidthBottom(0.5f);
				 * cell74.setBorderColorBottom(BaseColor.GRAY);
				 * cell74.setBorderColor(BaseColor.WHITE);
				 */

				// For ref receipt No.
				/*
				 * PdfPCell cell75 = new PdfPCell(new Paragraph("Ref. Receipt No.",
				 * mainContent)); cell75.setBorderWidth(0.01f); cell75.setPaddingBottom(2);
				 * cell75.setPaddingTop(2); cell75.setColspan(3);
				 * cell75.setHorizontalAlignment(Element.ALIGN_RIGHT);
				 * cell75.setBorderColor(BaseColor.WHITE);
				 */

				// For ref receipt No.
				/*
				 * PdfPCell cell76 = new PdfPCell(new Paragraph(refReceiptNo, mainContent));
				 * cell76.setBorderWidth(0.01f); cell76.setPaddingBottom(2);
				 * cell76.setPaddingTop(2); cell76.setBorderColor(BaseColor.WHITE);
				 */

				table4.addCell(cell571);
				table4.addCell(cell57);
				table4.addCell(cell58);
				table4.addCell(cell61);
				/*
				 * table4.addCell(cell62); table4.addCell(cell63); table4.addCell(cell64);
				 * table4.addCell(cell65); table4.addCell(cell66); table4.addCell(cell67);
				 * table4.addCell(cell68); table4.addCell(cell69); table4.addCell(cell70);
				 * table4.addCell(cell71); table4.addCell(cell72); table4.addCell(cell73);
				 * table4.addCell(cell74);
				 */
				// table4.addCell(cell75);
				// table4.addCell(cell76);

			}
			if (paymentType.contains("Credit/Debit Card")) {

				PdfPCell cell571 = new PdfPCell(new Paragraph("", mainContent));
				cell571.setBorderWidth(0.01f);
				cell571.setPaddingBottom(2);
				cell571.setPaddingTop(2);
				cell571.setColspan(4);
				cell571.setBorderColor(BaseColor.WHITE);

				/*
				 * For Payment Type
				 */
				PdfPCell cell57 = new PdfPCell(new Paragraph("Payment Type: ", mainContent));
				cell57.setBorderWidth(0.01f);
				cell57.setPaddingBottom(2);
				cell57.setPaddingTop(2);
				cell57.setBorderColor(BaseColor.WHITE);

				PdfPCell cell58 = new PdfPCell(new Paragraph(paymentType, mainContent));
				cell58.setBorderWidth(0.01f);
				cell58.setPaddingBottom(2);
				cell58.setPaddingTop(2);
				cell58.setColspan(3);
				cell58.setBorderColor(BaseColor.WHITE);

				PdfPCell cell61 = new PdfPCell(new Paragraph("", mainContent));
				cell61.setBorderWidth(0.01f);
				cell61.setColspan(4);
				cell61.setBorderWidthBottom(0.5f);
				cell61.setBorderColorBottom(BaseColor.GRAY);
				cell61.setBorderColor(BaseColor.WHITE);

				/*
				 * For Credit/Debit card details
				 */
				// For card no
				/*
				 * PdfPCell cell62 = new PdfPCell(new Paragraph("Card No.", mainContent));
				 * cell62.setBorderWidth(0.01f); cell62.setPaddingBottom(2);
				 * cell62.setPaddingTop(2); cell62.setBorderColor(BaseColor.WHITE);
				 * 
				 * PdfPCell cell63 = new PdfPCell(new Paragraph("" + cardNo, mainContent));
				 * cell63.setBorderWidth(0.01f); cell63.setPaddingBottom(2);
				 * cell63.setPaddingTop(2); cell63.setBorderColor(BaseColor.WHITE);
				 */

				// For mobile no
				/*
				 * PdfPCell cell64 = new PdfPCell(new Paragraph("Mobile No.", mainContent));
				 * cell64.setBorderWidth(0.01f); cell64.setPaddingBottom(2);
				 * cell64.setPaddingTop(2); cell64.setBorderColor(BaseColor.WHITE);
				 * 
				 * PdfPCell cell65 = new PdfPCell(new Paragraph("" + mobileNo, mainContent));
				 * cell65.setBorderWidth(0.01f); cell65.setPaddingBottom(2);
				 * cell65.setPaddingTop(2); cell65.setBorderColor(BaseColor.WHITE);
				 */

				// For ref receipt No.

				/*
				 * PdfPCell cell75 = new PdfPCell(new Paragraph("Card Amount", mainContent));
				 * cell75.setBorderWidth(0.01f); cell75.setPaddingBottom(2);
				 * cell75.setPaddingTop(2); cell75.setBorderColor(BaseColor.WHITE);
				 * 
				 * // For ref receipt No.
				 * 
				 * PdfPCell cell76 = new PdfPCell(new Paragraph("" + cardAmt, mainContent));
				 * cell76.setBorderWidth(0.01f); cell76.setPaddingBottom(2);
				 * cell76.setPaddingTop(2); cell76.setBorderColor(BaseColor.WHITE);
				 */

				table4.addCell(cell571);
				table4.addCell(cell57);
				table4.addCell(cell58);
				table4.addCell(cell61);
				/*
				 * table4.addCell(cell62); table4.addCell(cell63); table4.addCell(cell75);
				 * table4.addCell(cell76); table4.addCell(cell64); table4.addCell(cell65);
				 */

			}

			if (paymentType.contains("Other")) {

				PdfPCell cell571 = new PdfPCell(new Paragraph("", mainContent));
				cell571.setBorderWidth(0.01f);
				cell571.setPaddingBottom(2);
				cell571.setPaddingTop(2);
				cell571.setColspan(4);
				cell571.setBorderColor(BaseColor.WHITE);

				/*
				 * For Payment Type
				 */
				PdfPCell cell57 = new PdfPCell(new Paragraph("Payment Type: ", mainContent));
				cell57.setBorderWidth(0.01f);
				cell57.setPaddingBottom(2);
				cell57.setPaddingTop(2);
				cell57.setBorderColor(BaseColor.WHITE);

				PdfPCell cell58 = new PdfPCell(new Paragraph(paymentType, mainContent));
				cell58.setBorderWidth(0.01f);
				cell58.setPaddingBottom(2);
				cell58.setPaddingTop(2);
				cell58.setColspan(3);
				cell58.setBorderColor(BaseColor.WHITE);

				PdfPCell cell61 = new PdfPCell(new Paragraph("", mainContent));
				cell61.setBorderWidth(0.01f);
				cell61.setColspan(4);
				cell61.setBorderWidthBottom(0.5f);
				cell61.setBorderColorBottom(BaseColor.GRAY);
				cell61.setBorderColor(BaseColor.WHITE);

				/*
				 * For Credit Note details
				 */
				// For credit note balance
				/*
				 * PdfPCell cell62 = new PdfPCell(new Paragraph("Other Type", mainContent));
				 * cell62.setBorderWidth(0.01f); cell62.setPaddingBottom(2);
				 * cell62.setPaddingTop(2); cell62.setBorderColor(BaseColor.WHITE);
				 * 
				 * PdfPCell cell63 = new PdfPCell(new Paragraph("" + otherType, mainContent));
				 * cell63.setBorderWidth(0.01f); cell63.setPaddingBottom(2);
				 * cell63.setPaddingTop(2); //cell63.setColspan(3);
				 * cell63.setBorderColor(BaseColor.WHITE);
				 */

				// For ref receipt No.

				/*
				 * PdfPCell cell75 = new PdfPCell(new Paragraph("Other Amount", mainContent));
				 * cell75.setBorderWidth(0.01f); cell75.setPaddingBottom(2);
				 * cell75.setPaddingTop(2); cell75.setBorderColor(BaseColor.WHITE);
				 * 
				 * // For ref receipt No.
				 * 
				 * PdfPCell cell76 = new PdfPCell(new Paragraph("" + otherAmt, mainContent));
				 * cell76.setBorderWidth(0.01f); cell76.setPaddingBottom(2);
				 * cell76.setPaddingTop(2); cell76.setBorderColor(BaseColor.WHITE);
				 */

				table4.addCell(cell571);
				table4.addCell(cell57);
				table4.addCell(cell58);
				table4.addCell(cell61);
				/*
				 * table4.addCell(cell62); table4.addCell(cell63); table4.addCell(cell75);
				 * table4.addCell(cell76);
				 */

			}
			PdfPCell cell81 = new PdfPCell(new Paragraph("Receipt Given By", mainContent));
			cell81.setBorderWidth(0.01f);
			cell81.setPaddingBottom(2);
			cell81.setPaddingTop(25);
			cell81.setBorderColor(BaseColor.WHITE);

			PdfPCell cell82 = new PdfPCell(new Paragraph(ClinicianName, mainContent));
			cell82.setBorderWidth(0.01f);
			cell82.setPaddingBottom(2);
			cell82.setPaddingTop(25);
			cell82.setBorderColor(BaseColor.WHITE);

			/*
			 * For Receivers Signature
			 */
			PdfPCell cell83 = new PdfPCell(new Paragraph("Receivers Signature", mainContent));
			cell83.setBorderWidth(0.01f);
			cell83.setPaddingBottom(2);
			cell83.setPaddingTop(25);
			cell83.setColspan(2);
			cell83.setPaddingRight(20);
			cell83.setHorizontalAlignment(Element.ALIGN_RIGHT);
			cell83.setBorderColor(BaseColor.WHITE);

			table4.addCell(cell81);
			table4.addCell(cell82);
			table4.addCell(cell83);

			document.add(table4);

			document.close();

			System.out.println("Successfully written and generated General physicial Billing PDF Report");

			status = "success";

			connection.close();

		} catch (Exception exception) {
			exception.printStackTrace();
			status = "error";
		}
		return status;

	}

	/**
	 * 
	 * @param patientID
	 * @param visitID
	 * @param realPath
	 * @param pdfOutFIleName
	 * @param clinicID
	 * @param practiceID
	 * @param username
	 * @param s3
	 * @param s3reportFilePath
	 * @param bucketName
	 * @return
	 */
	public String convertIPDPrescriptionPDF(int patientID, int visitID, String realPath, String pdfOutFIleName,
			int clinicID, int practiceID, String username, AmazonS3 s3, String s3reportFilePath, String bucketName) {

		int i = 1;

		String visitDate = null;
		String status = "error";
		String regNo = "";
		String nextVisitDate = "";
		int nextVisitDays = 0;
		String investigation = "";
		String diagnosis = "";
		String dateOfDischarge = "";
		String procedure = "";
		String admission_time = "";
		String discharge_time = "";
		String advice = "";
		String docName = null;
		String signature = null;
		Image signImg = null;

		/*
		 * Declaring variable which stores the location for FreeSans.ttf file to print
		 * marathi text on pdf
		 */
		String marathiFontDir = realPath + "fonts/FreeSans.ttf";

		ConfigurationUtil configXMLUtil = new ConfigurationUtil();

		try {
			connection = getConnection();

			/*
			 * Generate the queries to fetch details
			 */
			String fetchDetailQuery1 = QueryMaker.OPD_PDF_RETRIEVE_PATIENT;

			preparedStatement1 = connection.prepareStatement(fetchDetailQuery1);
			preparedStatement1.setInt(1, patientID);
			resultSet1 = preparedStatement1.executeQuery();

			/*
			 * Generate the queries to fetch details
			 */
			String fetchInvestigationDetailQuery = QueryMaker.RETREIVE_Investigations_Comma_SEPARATED_Test_LIST;

			preparedStatement3 = connection.prepareStatement(fetchInvestigationDetailQuery);

			preparedStatement3.setString(1, ActivityStatus.ACTIVE);
			preparedStatement3.setInt(2, visitID);

			resultSet3 = preparedStatement3.executeQuery();

			/*
			 * Generate the queries to fetch details
			 */
			String fetchDetailQuery4 = QueryMaker.OPD_PDF_RETRIEVE_PRESCRIPTIONPDF;

			preparedStatement = connection.prepareStatement(fetchDetailQuery4);

			preparedStatement.setInt(1, visitID);
			preparedStatement.setString(2, ActivityStatus.ACTIVE);

			resultSet = preparedStatement.executeQuery();

			/*
			 * Retrieve patient registration no based on patientID and clinicID from
			 * ClinicRegistration table
			 */
			String fetchClinicRegNoQuery = QueryMaker.RETRIEVE_CLINIC_REG_NO_BY_CLINIC_ID;

			preparedStatement2 = connection.prepareStatement(fetchClinicRegNoQuery);

			preparedStatement2.setInt(1, clinicID);
			preparedStatement2.setInt(2, patientID);

			resultSet2 = preparedStatement2.executeQuery();

			while (resultSet2.next()) {
				regNo = resultSet2.getString("regNumber");
			}

			/*
			 * Retrieve NextVisitDate based on visitID from Visit table
			 */
			String fetchNextVisitDateQuery = QueryMaker.OPD_PDF_RETRIEVE_VISIT;

			preparedStatement2 = connection.prepareStatement(fetchNextVisitDateQuery);

			preparedStatement2.setInt(1, visitID);

			resultSet2 = preparedStatement2.executeQuery();

			while (resultSet2.next()) {
				SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");

				SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");

				if (resultSet2.getString("visitDate") == null || resultSet2.getString("visitDate") == ""
						|| resultSet2.getString("visitDate").isEmpty()) {
					visitDate = "";
				} else {
					visitDate = dateFormat.format(resultSet2.getDate("visitDate"));
				}
				nextVisitDate = resultSet2.getString("nextVisitDate");
				nextVisitDays = resultSet2.getInt("nextVisitDays");
				diagnosis = resultSet2.getString("diagnosis");
				dateOfDischarge = resultSet2.getString("dateOfDischarge");
				procedure = resultSet2.getString("procedure");
				admission_time = resultSet2.getString("admission_time");
				discharge_time = resultSet2.getString("discharge_time");
				advice = resultSet2.getString("advice") == null ? "" : resultSet2.getString("advice");
			}

			RegistrationDAOinf registrationDAOinf = new RegistrationDAOImpl();

			// Retrieving USER Details by PracticeID
			HashMap<String, String> MDMap = registrationDAOinf.retrieveUserDetails(practiceID, username);

			// File SignatureFile = new File(logoFilePath + File.separator +
			// MDMap.get("Signature"));
			signature = MDMap.get("Signature");
			docName = MDMap.get("FirstName") + " " + MDMap.get("LastName");

			System.out.println("doc name ::" + docName);

			if (signature == "" || signature == null) {
				signImg = null;
			} else if (signature.isEmpty()) {
				signImg = null;
			} else {

				S3ObjectInputStream s3ObjectInputStream = s3
						.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, signature))
						.getObjectContent();

				IOUtils.copy(s3ObjectInputStream, new FileOutputStream(new File(realPath + "images/" + signature)));

				signImg = Image.getInstance(realPath + "images/" + signature);
			}

			/*
			 * Getting image path from XML
			 */
			String A5ImagePath = configXMLUtil.getLetterHeadImage();

			System.out.println("A5IM.." + A5ImagePath);

			/*
			 * Getting page size from XMl
			 */
			String pageSize = configXMLUtil.getPageSize();
			System.out.println("pageSize is :::: " + pageSize);

			/*
			 * Setting path to store PDF file
			 */
			File file = new File(realPath + "/" + pdfOutFIleName);

			System.out.println("PRESC FILE NAME IN CONVERT::" + file);
			/*
			 * Creating Document for PDF
			 */
			Document document = null;

			/*
			 * Checking whether pageSize tag in XMl contains A5 or A4, according to that
			 * setting PDF page size
			 */
			if (pageSize.equals("A5")) {
				document = new Document(PageSize.A5);
			} else if (pageSize.equals("A4")) {
				document = new Document(PageSize.A4);
			}

			PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(file));

			System.out.println("PRESC WRITER NAME IN CONVERT::" + writer);

			Font Font1 = new Font(Font.FontFamily.TIMES_ROMAN, 10, Font.NORMAL);
			Font Font3 = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.NORMAL);
			Font Font2 = new Font(Font.FontFamily.TIMES_ROMAN, 8, Font.NORMAL);
			Font Font4 = new Font(Font.FontFamily.TIMES_ROMAN, 5, Font.BOLD);
			Font Font5 = new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.BOLD);
			Font Font6 = new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.BOLD);
			Font Font7 = new Font(Font.FontFamily.TIMES_ROMAN, 11, Font.BOLD | Font.UNDERLINE);
			Font mainContent = new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.NORMAL);
			Font mainContent1 = new Font(Font.FontFamily.TIMES_ROMAN, 15, Font.NORMAL);
			mainContent1.setColor(BaseColor.GRAY);

			Chunk bullet = new Chunk("\u2022", Font4);

			/*
			 * Defining marathi font
			 */
			Font marathiFont = FontFactory.getFont(marathiFontDir, BaseFont.IDENTITY_H, BaseFont.EMBEDDED);
			marathiFont.setSize(8);

			document.open();

			document.setMargins(36, 36, 55, 36);

			/*
			 * Adding image
			 */
			PdfContentByte canvas = writer.getDirectContentUnder();

			/*
			 * Checking whether pageSize is A4 or A5, according to that background image is
			 * being set
			 */

			Image image;

			if (pageSize.equals("A5")) {
				if (A5ImagePath == null || A5ImagePath == "") {

					image = null;

				} else {

					if (A5ImagePath.isEmpty()) {
						image = null;
					} else {

						S3ObjectInputStream s3ObjectInputStream = s3
								.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, A5ImagePath))
								.getObjectContent();

						IOUtils.copy(s3ObjectInputStream,
								new FileOutputStream(new File(realPath + "images/" + A5ImagePath)));

						image = Image.getInstance(realPath + "images/" + A5ImagePath);

						image.scaleToFit(PageSize.A5.getWidth(), PageSize.A5.getHeight());
						image.setAbsolutePosition(0, 0);

						canvas.saveState();
						PdfGState state = new PdfGState();
						canvas.setGState(state);
						canvas.addImage(image);
						canvas.restoreState();
					}

				}
			} else if (pageSize.equals("A4")) {
				if (A5ImagePath == null || A5ImagePath == "") {

					image = null;

				} else {

					if (A5ImagePath.isEmpty()) {
						image = null;
					} else {

						S3ObjectInputStream s3ObjectInputStream = s3
								.getObject(new GetObjectRequest(bucketName + "/" + s3reportFilePath, A5ImagePath))
								.getObjectContent();

						IOUtils.copy(s3ObjectInputStream,
								new FileOutputStream(new File(realPath + "images/" + A5ImagePath)));

						image = Image.getInstance(realPath + "images/" + A5ImagePath);

						image.scaleToFit(PageSize.A4.getWidth(), PageSize.A4.getHeight());
						image.setAbsolutePosition(0, 0);

						canvas.saveState();
						PdfGState state = new PdfGState();
						canvas.setGState(state);
						canvas.addImage(image);
						canvas.restoreState();
					}

				}
			}
			Image prescrImg = Image.getInstance(realPath + "/images/Rx_icon.png");
			System.out.println("presc rx img is::" + prescrImg);

			/*
			 * Setting header
			 */
			document.addCreator("eDhanvantari");
			document.addTitle("Prescription | IPD Discharge Card");

			/*
			 * For displaying patient personal details
			 */
			while (resultSet1.next()) {
				PdfPTable table = new PdfPTable(3);

				table.setFooterRows(1);
				table.setWidthPercentage(100);
				Rectangle rect = new Rectangle(270, 700);
				table.setWidthPercentage(new float[] { 100, 70, 100 }, rect);

				PdfPCell cell0 = new PdfPCell(new Paragraph("", Font7));
				cell0.setPaddingTop(90);
				cell0.setPaddingBottom(10);
				cell0.setHorizontalAlignment(Element.ALIGN_CENTER);
				cell0.setUseBorderPadding(true);
				cell0.setColspan(3);
				cell0.setBorderWidthBottom(1f);
				// cell0.setBorderColorBottom(BaseColor.DARK_GRAY);
				cell0.setBorderColor(BaseColor.WHITE);

				PdfPCell cell1 = new PdfPCell(new Paragraph("DISCHARGE CARD: ", Font7));
				cell1.setBorderWidth(0.01f);
				cell1.setPaddingBottom(25);
				cell1.setBorderWidthLeft(0.2f);
				cell1.setBorderColor(BaseColor.WHITE);
				cell1.setHorizontalAlignment(Element.ALIGN_CENTER);
				cell1.setColspan(3);

				/* For Patient Name */
				String fullName = "";

				fullName = StringUtils.capitalize(resultSet1.getString("firstName")) + " "
						+ StringUtils.capitalize(resultSet1.getString("lastName"));

				PdfPCell cell2 = new PdfPCell(new Paragraph("PATIENT NAME: " + fullName, Font5));
				cell2.setBorderWidth(0.01f);
				cell2.setPaddingBottom(5);
				cell2.setBorderWidthLeft(0.2f);
				cell2.setBorderColor(BaseColor.WHITE);
				cell2.setColspan(2);

				PdfPCell cell3 = new PdfPCell(new Paragraph("REG.No.: " + regNo, Font5));
				// cell3.setPaddingTop(100);
				cell3.setBorderWidth(0.2f);
				cell3.setPaddingBottom(5);
				cell3.setBorderColor(BaseColor.WHITE);

				PdfPCell cell2002 = new PdfPCell(new Paragraph("AGE: " + resultSet1.getString("age") + "/"
						+ StringUtils.capitalize(resultSet1.getString("gender")), Font5));
				cell2002.setBorderWidth(0.01f);
				cell2002.setPaddingBottom(5);
				cell2002.setBorderWidthLeft(0.2f);
				cell2002.setBorderColor(BaseColor.WHITE);
				cell2002.setColspan(3);

				PdfPCell cell2003 = new PdfPCell(
						new Paragraph("DIAGNOSIS: " + StringUtils.capitalize(diagnosis), Font5));
				cell2003.setBorderWidth(0.01f);
				cell2003.setPaddingBottom(5);
				cell2003.setBorderWidthLeft(0.2f);
				cell2003.setBorderColor(BaseColor.WHITE);
				cell2003.setColspan(3);

				PdfPCell cell311 = new PdfPCell(new Paragraph("DOA: " + visitDate + " TIME: " + admission_time, Font5));
				// cell311.setPaddingTop(100);
				cell311.setBorderWidth(0.2f);
				cell311.setPaddingBottom(5);
				cell311.setBorderColor(BaseColor.WHITE);
				cell311.setColspan(2);

				PdfPCell cell3111 = new PdfPCell(
						new Paragraph("DOD: " + dateOfDischarge + " TIME: " + discharge_time, Font5));
				// cell311.setPaddingTop(100);
				cell3111.setBorderWidth(0.2f);
				cell3111.setPaddingBottom(5);
				cell3111.setBorderColor(BaseColor.WHITE);

				PdfPCell cell03 = new PdfPCell(new Paragraph("PROCEDURE: " + StringUtils.capitalize(procedure), Font5));
				cell03.setBorderWidth(0.01f);
				cell03.setPaddingBottom(5);
				cell03.setBorderWidthLeft(0.2f);
				cell03.setBorderColor(BaseColor.WHITE);
				cell03.setColspan(3);

				table.addCell(cell0);
				table.addCell(cell1);
				table.addCell(cell2);
				table.addCell(cell3);
				table.addCell(cell2002);
				table.addCell(cell2003);
				table.addCell(cell311);
				table.addCell(cell3111);
				table.addCell(cell03);

				document.add(table);
			}

			PdfPTable table4 = new PdfPTable(4);

			table4.setWidthPercentage(100);
			Rectangle rect7 = new Rectangle(270, 700);
			table4.setWidthPercentage(new float[] { 50, 80, 35, 105 }, rect7);

			if (advice == "" || advice == null) {
				PdfPCell cell2005 = new PdfPCell(new Paragraph(""));
				cell2005.setBorderWidth(0.01f);
				cell2005.setPaddingBottom(5);
				cell2005.setColspan(2);
				cell2005.setBorderWidthLeft(0.2f);
				cell2005.setBorderColor(BaseColor.WHITE);

				table4.addCell(cell2005);
			} else if (advice.isEmpty()) {
				PdfPCell cell2005 = new PdfPCell(new Paragraph(""));
				cell2005.setBorderWidth(0.01f);
				cell2005.setPaddingBottom(5);
				cell2005.setColspan(2);
				cell2005.setBorderWidthLeft(0.2f);
				cell2005.setBorderColor(BaseColor.WHITE);

				table4.addCell(cell2005);
			} else {

				PdfPCell cell2005 = new PdfPCell(new Paragraph("Advice: ", Font5));
				cell2005.setBorderWidth(0.01f);
				cell2005.setPaddingBottom(5);
				cell2005.setBorderWidthLeft(0.2f);
				cell2005.setBorderColor(BaseColor.WHITE);

				PdfPCell cell2006 = new PdfPCell(new Paragraph(StringUtils.capitalize(advice), marathiFont));
				cell2006.setBorderWidth(0.01f);
				cell2006.setPaddingBottom(5);
				cell2006.setHorizontalAlignment(Element.ALIGN_LEFT);
				cell2006.setBorderWidthLeft(0.2f);
				cell2006.setBorderColor(BaseColor.WHITE);

				table4.addCell(cell2005);
				table4.addCell(cell2006);
			}

			document.add(table4);

			while (resultSet3.next()) {

				investigation = resultSet3.getString("investigation");

				if (investigation == "" || investigation == null) {
					continue;
				} else if (investigation.isEmpty()) {
					continue;
				} else {

					PdfPTable table2 = new PdfPTable(2);

					table2.setWidthPercentage(100);
					Rectangle rect5 = new Rectangle(270, 700);
					table2.setWidthPercentage(new float[] { 105, 165 }, rect5);

					PdfPCell cell002 = new PdfPCell(new Paragraph("Investigation/Procedure: ", Font5));
					cell002.setBorderWidth(0.01f);
					cell002.setPaddingBottom(5);
					cell002.setColspan(1);
					cell002.setBorderWidthLeft(0.2f);
					cell002.setBorderColor(BaseColor.WHITE);

					/*
					 * for investigation details
					 */
					PdfPCell cell2001 = new PdfPCell(new Paragraph(investigation, mainContent));
					cell2001.setBorderWidth(0.2f);
					cell2001.setColspan(2);
					cell2001.setPaddingBottom(1);
					cell2001.setHorizontalAlignment(Element.ALIGN_LEFT);
					cell2001.setBorderColor(BaseColor.WHITE);

					table2.addCell(cell002);
					table2.addCell(cell2001);

					document.add(table2);

				}

			}

			int srNo = 1;

			/*
			 * For prescription
			 */
			PdfPTable table3 = new PdfPTable(3);
			table3.setWidthPercentage(100);
			Rectangle rect2 = new Rectangle(270, 700);
			table3.setWidthPercentage(new float[] { 30, 180, 60 }, rect2);

			PdfPCell cell3011 = new PdfPCell(new Paragraph("ON DISCHARGE: ", Font5));
			cell3011.setColspan(3);
			cell3011.setPaddingBottom(5);
			cell3011.setBorderWidthRight(0f);
			cell3011.setBorderWidthLeft(0f);
			cell3011.setBorderWidthTop(0f);
			cell3011.setBorderWidthBottom(0f);
			cell3011.setBorderColorTop(BaseColor.WHITE);

			/*
			 * Table for Prescription image
			 */
			PdfPTable imageTable = new PdfPTable(2);
			imageTable.setWidthPercentage(80);
			imageTable.setWidths(new int[] { 1, 2 });

			PdfPCell imageCell1 = new PdfPCell(prescrImg, true);
			imageCell1.setBorderColor(BaseColor.WHITE);

			PdfPCell imageCell2 = new PdfPCell(new Paragraph("", mainContent));
			imageCell2.setBorderColor(BaseColor.WHITE);

			imageTable.addCell(imageCell1);
			imageTable.addCell(imageCell2);

			// Gene
			PdfPCell cell3002 = new PdfPCell(imageTable);
			cell3002.setBorderWidth(0.0f);
			cell3002.setPaddingBottom(10);
			cell3002.setBorderColor(BaseColor.WHITE);

			PdfPCell cell320 = new PdfPCell(new Paragraph("", mainContent));
			cell320.setBorderWidth(0.01f);
			cell320.setPaddingBottom(5);
			cell320.setBorderColor(BaseColor.WHITE);

			// Amino Acid Change
			PdfPCell cell34 = new PdfPCell(new Paragraph("Qty", Font5));
			cell34.setBorderWidth(0.01f);
			cell34.setPaddingBottom(5);
			cell34.setHorizontalAlignment(Element.ALIGN_RIGHT);
			cell34.setBorderColor(BaseColor.WHITE);

			table3.addCell(cell3011);
			table3.addCell(cell3002);
			table3.addCell(cell320);
			table3.addCell(cell34);

			document.add(table3);

			while (resultSet.next()) {

				PdfPTable table1 = new PdfPTable(3);

				table1.setWidthPercentage(100);
				Rectangle rect1 = new Rectangle(270, 700);
				table1.setWidthPercentage(new float[] { 110, 40, 120 }, rect1);

				String finalTradeName = resultSet.getString("tradeName").toUpperCase();

				System.out.println("TRADENAME:: " + finalTradeName);
				if (resultSet.getString("category") == null || resultSet.getString("category") == "") {
					finalTradeName = finalTradeName;
				} else if (resultSet.getString("category").isEmpty()) {
					finalTradeName = finalTradeName;
				} else {
					finalTradeName = finalTradeName + "\t\t\t\t" + resultSet.getString("category");
				}

				if (resultSet.getString("drugName") == null || resultSet.getString("drugName") == "") {
					finalTradeName = finalTradeName;
				} else if (resultSet.getString("drugName").isEmpty()) {
					finalTradeName = finalTradeName;
				} else {
					finalTradeName += "\n(" + resultSet.getString("drugName") + ")";
				}
				// String category = StringUtils.capitalize(resultSet.getString("category"));
				/*
				 * for Nucleotide Change
				 */

				PdfPCell cell21 = new PdfPCell(new Paragraph(srNo + ". " + finalTradeName, marathiFont));
				cell21.setBorderWidth(0.2f);
				cell21.setPaddingBottom(1);
				cell21.setPaddingTop(3);
				cell21.setColspan(2);
				cell21.setBorderColor(BaseColor.WHITE);

				// System.out.println("QUANTIRTY:: " + resultSet.getDouble("quantity"));
				/*
				 * for Amino Acid Change
				 */
				PdfPCell cell22 = new PdfPCell(new Paragraph("" + resultSet.getDouble("quantity"), mainContent));
				cell22.setBorderWidth(0.2f);
				cell22.setPaddingBottom(1);
				cell22.setPaddingTop(3);
				cell22.setHorizontalAlignment(Element.ALIGN_RIGHT);
				cell22.setBorderColor(BaseColor.WHITE);

				table1.addCell(cell21);
				table1.addCell(cell22);

				String frequency = resultSet.getString("frequency");
				String freq = frequency.replace(',', '\n');
				System.out.println("FREQ:: " + freq);

				String noOfDays = resultSet.getString("numberOfDays");
				String noOfDays1 = noOfDays.replace(",", " days\n");
				System.out.println("NODaDAY:: " + noOfDays);

				// String[] frequency = frequencyDetails.split(",");
				// int countFrequency = 0;

				// for (int j = 0; j < frequency.length; j++) {

				PdfPTable table2 = new PdfPTable(3);

				table2.setWidthPercentage(100);
				Rectangle rect3 = new Rectangle(270, 700);
				table2.setWidthPercentage(new float[] { 90, 40, 140 }, rect1);

				/*
				 * PdfPTable tableNew = new PdfPTable(2);
				 * 
				 * tableNew.setWidthPercentage(100); tableNew.setWidths(new int[] { 100, 50 });
				 */

				// String[] frequencyVal = frequency[j].split("\\$");

				PdfPCell cell24 = new PdfPCell(new Paragraph(freq, marathiFont));
				cell24.setBorderWidth(0.2f);
				cell24.setPaddingBottom(10);
				cell24.setBorderColor(BaseColor.WHITE);

				PdfPCell cell241 = new PdfPCell(new Paragraph(noOfDays1 + " days", mainContent));
				cell241.setBorderWidth(0.2f);
				cell241.setPaddingBottom(10);
				cell241.setBorderColor(BaseColor.WHITE);

				PdfPCell cell25 = new PdfPCell(
						new Paragraph(StringUtils.capitalize(resultSet.getString("comment").trim()), marathiFont));
				cell25.setBorderWidth(0.2f);
				cell25.setPaddingBottom(9);
				cell25.setBorderColor(BaseColor.WHITE);

				/*
				 * PdfPCell cell25 = new PdfPCell(new Paragraph(""));
				 * cell25.setBorderWidth(0.2f); cell25.setPaddingBottom(10);
				 * cell25.setColspan(1); cell25.setHorizontalAlignment(Element.ALIGN_RIGHT);
				 * cell25.setBorderColor(BaseColor.WHITE);
				 */

				table2.addCell(cell24);
				table2.addCell(cell241);
				table2.addCell(cell25);

				/*
				 * PdfPCell cell242 = new PdfPCell(tableNew); cell242.setBorderWidth(0.2f);
				 * cell242.setPaddingBottom(1); cell242.setColspan(2);
				 * cell242.setBorderColor(BaseColor.WHITE);
				 * 
				 * table1.addCell(cell242);
				 */

				/*
				 * for Clinical Significance
				 */
				/*
				 * if (countFrequency == 0) { PdfPCell cell25 = new PdfPCell(new Paragraph(
				 * StringUtils.capitalize(resultSet.getString("comment").trim()), marathiFont));
				 * cell25.setBorderWidth(0.2f); cell25.setPaddingBottom(1);
				 * cell25.setColspan(1); cell25.setHorizontalAlignment(Element.ALIGN_RIGHT);
				 * cell25.setBorderColor(BaseColor.WHITE);
				 * 
				 * table1.addCell(cell25); } else { PdfPCell cell25 = new PdfPCell(new
				 * Paragraph("")); cell25.setBorderWidth(0.2f); cell25.setPaddingBottom(1);
				 * cell25.setColspan(1); cell25.setHorizontalAlignment(Element.ALIGN_RIGHT);
				 * cell25.setBorderColor(BaseColor.WHITE);
				 * 
				 * table1.addCell(cell25); }
				 */

				// countFrequency++;
				// }

				document.add(table1);
				document.add(table2);

				srNo++;
			}

			/*
			 * For signature in footer
			 */
			PdfPTable tableNew = new PdfPTable(1);

			tableNew.setWidthPercentage(100);
			Rectangle rect6 = new Rectangle(270, 700);
			tableNew.setWidthPercentage(new float[] { 270 }, rect6);

			PdfPCell cell1112 = new PdfPCell(
					new Paragraph("Follow-up after  " + nextVisitDays + "  days.", marathiFont));
			cell1112.setBackgroundColor(BaseColor.WHITE);
			cell1112.setPaddingTop(30);
			cell1112.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell1112.setBorderColor(BaseColor.WHITE);

			tableNew.addCell(cell1112);

			document.add(tableNew);

			/*
			 * For signature in footer
			 * 
			 * PdfPTable tableFooter = new PdfPTable(1); tableFooter.setTotalWidth(510);
			 * tableFooter.setWidthPercentage(100);
			 * 
			 * PdfPCell cellFooter = new PdfPCell(new Paragraph(""));
			 * cellFooter.setBackgroundColor(BaseColor.WHITE);
			 * cellFooter.setBorderColor(BaseColor.WHITE); cellFooter.setPaddingBottom(100);
			 * 
			 * tableFooter.addCell(cellFooter);
			 * 
			 * FooterTable1 event = new FooterTable1(tableFooter);
			 * writer.setPageEvent(event);
			 */

			/*
			 * For signature in footer
			 */

			PdfPTable tableFooter = new PdfPTable(1);
			tableFooter.setTotalWidth(510);
			tableFooter.setWidthPercentage(100);

			// Table for Prescription image

			PdfPTable imageTable1 = new PdfPTable(2);
			imageTable1.setWidthPercentage(80);
			imageTable1.setWidths(new int[] { 1, 2 });

			PdfPCell imageCell11 = new PdfPCell(signImg, true);
			imageCell11.setBorderColor(BaseColor.WHITE);

			PdfPCell imageCell21 = new PdfPCell(new Paragraph("", mainContent));
			imageCell21.setBorderColor(BaseColor.WHITE);

			imageTable1.addCell(imageCell11);
			imageTable1.addCell(imageCell21);

			PdfPCell cellFooter = new PdfPCell(imageTable1);
			cellFooter.setBorderWidth(0.01f);
			cellFooter.setPaddingBottom(15);
			cellFooter.setPaddingLeft(100);
			cellFooter.setBorderColor(BaseColor.WHITE);

//			PdfPCell cellFooter1 = new PdfPCell(new Paragraph(docName, Font5));
//			cellFooter1.setBorderWidth(0.01f);
//			cellFooter1.setPaddingBottom(15);
//			cellFooter1.setPaddingLeft(100);
//			cellFooter1.setBorderColor(BaseColor.WHITE);

			tableFooter.addCell(cellFooter);
//			tableFooter.addCell(cellFooter1);

			// document.add(tableFooter);

			FooterTable1 event = new FooterTable1(tableFooter);
			writer.setPageEvent(event);

			document.close();

			System.out.println("Successfully written and generated General physicial Prescription PDF Report");

			status = "success";

			connection.close();

		} catch (Exception exception) {
			exception.printStackTrace();
			status = "error";
		}
		return status;

	}

	public String convertBDPackageReportPDF(int patientID, int visitID, String realPath, String pdfOutFIleName,
			int clinicID, int mdDoctorID, int practiceID, String fullName, AmazonS3 s3, String s3LogoFilePath,
			String bucketName) {

		int count = 1;

		String status = null;

		PatientDAOInf patientDAOInf = new PatientDAOImpl();

		ConfigXMLUtil XMLUtil = new ConfigXMLUtil();

		// String logoPath = XMLUtil.getLogoFilePath();

		RegistrationDAOinf registrationDAOinf = new RegistrationDAOImpl();

		List<PatientForm> patientList = patientDAOInf.retrieveLabPatientDetails(patientID, visitID, clinicID, 0);

		LinkedHashMap<String, String> singleLabTestMap = patientDAOInf.retrieveSingleLabTestListByVisitID(visitID);

		// Retriving group lab test from LabInvestigations tables for the respective
		// visitID
		LinkedHashMap<String, LinkedHashMap<String, String>> groupMap = patientDAOInf
				.retrieveGroupLabTestByVisitID(visitID, practiceID);

		// Retrieving template details from VisitTemplateData table
		List<PatientForm> templateData = patientDAOInf.retrieveVisitTemplateData(visitID);

		System.out.println(templateData);

		ConfigurationUtil configurationUtil = new ConfigurationUtil();

		String patientName = "";
		String age = "";
		String gender = "";
		String emailID = "";
		String mobile = "";
		String collectionDate = "";
		String collectionTime = "";
		String sampleID = "";
		String regNo = "";
		String referredBy = "";
		String comment = "";
		String signature = "";

		try {
			String rangelevelValue = "3#5-50$4#5-426$5#18-7,340$6#1,080-56,500$7-8#7,650-229,000$9-12#25,700-288,000$13-16#13,300-254,000$17-24#4,060-165,400$25-40#3,640-117,000";

			String[] rangelevel = rangelevelValue.split("\\$");
			System.out.println("rangelevel: " + rangelevel.length);

			for (PatientForm form : patientList) {
				patientName = form.getFirstName() + " " + form.getMiddleName() + " " + form.getLastName();
				age = form.getAge();
				gender = form.getGender();
				mobile = form.getMobile();
				emailID = form.getEmailID();
				regNo = form.getRegistrationNo();
				collectionDate = form.getFirstVisitDate();
				collectionTime = form.getVisitFromTime();
				sampleID = form.getSampleID();
				referredBy = form.getReferredBy();
				comment = form.getMedicalNotes();
			}

			// Retrieving MD Details by PracticeID
			HashMap<String, String> MDMap = registrationDAOinf.retrieveMDDetails(mdDoctorID, collectionDate);

			// File SignatureFile = new File(logoPath + File.separator +
			// MDMap.get("MDSignature"));

			signature = MDMap.get("MDSignature");

			Image signatureImg = null;

			if (signature == "" || signature == null) {
				signatureImg = null;
			} else if (signature.isEmpty()) {
				signatureImg = null;
			} else {

				S3ObjectInputStream s3ObjectInputStream = s3
						.getObject(new GetObjectRequest(bucketName + "/" + s3LogoFilePath, signature))
						.getObjectContent();

				IOUtils.copy(s3ObjectInputStream, new FileOutputStream(new File(realPath + "images/" + signature)));

				signatureImg = Image.getInstance(realPath + "images/" + signature);
			}

			/*
			 * Declaring variable which stores the location for FreeSans.ttf file to print
			 * marathi text on pdf
			 */
			String marathiFontDir = realPath + "fonts/FreeSans.ttf";

			ConfigurationUtil configXMLUtil = new ConfigurationUtil();

			/*
			 * Getting image path from XML
			 */
			String A5ImagePath = configXMLUtil.getLetterHeadImage();

			/*
			 * Getting page size from XMl
			 */
			// String pageSize = configXMLUtil.getPageSize();
			String pageSize = "A4";

			/*
			 * Setting path to store PDF file
			 */
			File file = new File(realPath + pdfOutFIleName);
			/*
			 * Creating Document for PDF
			 */
			Document document = null;

			/*
			 * Checking whether pageSize tag in XMl contains A5 or A4, according to that
			 * setting PDF page size
			 */
			if (pageSize.equals("A5")) {
				document = new Document(PageSize.A5);
			} else if (pageSize.equals("A4")) {
				document = new Document(PageSize.A4);
			}

			PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(file));

			Font Font1 = new Font(Font.FontFamily.TIMES_ROMAN, 10, Font.NORMAL);
			Font Font3 = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.BOLD);
			Font Font2 = new Font(Font.FontFamily.TIMES_ROMAN, 11, Font.BOLD | Font.UNDERLINE);
			Font Font4 = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.BOLD);
			Font Font5 = new Font(Font.FontFamily.TIMES_ROMAN, 11, Font.BOLD);
			Font Font6 = new Font(Font.FontFamily.TIMES_ROMAN, 11, Font.BOLDITALIC | Font.UNDERLINE);
			Font mainContent = new Font(Font.FontFamily.TIMES_ROMAN, 11, Font.NORMAL);
			Font mainContent_abnormal = new Font(Font.FontFamily.TIMES_ROMAN, 11, Font.BOLD);
			Font mainContent1 = new Font(Font.FontFamily.TIMES_ROMAN, 10, Font.NORMAL);
			mainContent1.setColor(BaseColor.GRAY);
			/*
			 * Defining marathi font
			 */
			Font marathiFont = FontFactory.getFont(marathiFontDir, BaseFont.IDENTITY_H, BaseFont.EMBEDDED);

			document.open();

			// Image signatureImg = Image.getInstance(SignatureFile.getAbsolutePath());

			/*
			 * Adding image
			 */
			PdfContentByte canvas = writer.getDirectContentUnder();

			/*
			 * Checking whether pageSize is A4 or A5, according to that background image is
			 * being set
			 */
			Image image;

			if (pageSize.equals("A5")) {
				if (A5ImagePath == null || A5ImagePath == "") {

					image = null;

				} else {

					if (A5ImagePath.isEmpty()) {
						image = null;
					} else {

						S3ObjectInputStream s3ObjectInputStream = s3
								.getObject(new GetObjectRequest(bucketName + "/" + s3LogoFilePath, A5ImagePath))
								.getObjectContent();

						IOUtils.copy(s3ObjectInputStream,
								new FileOutputStream(new File(realPath + "images/" + A5ImagePath)));

						image = Image.getInstance(realPath + "images/" + A5ImagePath);

						image.scaleToFit(PageSize.A5.getWidth(), PageSize.A5.getHeight());
						image.setAbsolutePosition(0, 0);

						canvas.saveState();
						PdfGState state = new PdfGState();
						canvas.setGState(state);
						canvas.addImage(image);
						canvas.restoreState();
					}

				}
			} else if (pageSize.equals("A4")) {
				if (A5ImagePath == null || A5ImagePath == "") {

					image = null;

				} else {

					if (A5ImagePath.isEmpty()) {
						image = null;
					} else {

						S3ObjectInputStream s3ObjectInputStream = s3
								.getObject(new GetObjectRequest(bucketName + "/" + s3LogoFilePath, A5ImagePath))
								.getObjectContent();

						IOUtils.copy(s3ObjectInputStream,
								new FileOutputStream(new File(realPath + "images/" + A5ImagePath)));

						image = Image.getInstance(realPath + "images/" + A5ImagePath);

						image.scaleToFit(PageSize.A4.getWidth(), PageSize.A4.getHeight());
						image.setAbsolutePosition(0, 0);

						canvas.saveState();
						PdfGState state = new PdfGState();
						canvas.setGState(state);
						canvas.addImage(image);
						canvas.restoreState();
					}

				}
			}

			/*
			 * Setting header
			 */
			document.addCreator("eDhanvantariLab");
			document.addTitle("Lab Report");

			PdfPTable table = new PdfPTable(4);

			table.setFooterRows(1);
			table.setWidthPercentage(100);
			Rectangle rect = new Rectangle(270, 700);
			table.setWidthPercentage(new float[] { 50, 85, 50, 85 }, rect);

			PdfPCell cell = new PdfPCell(new Paragraph("", Font3));
			cell.setPaddingTop(30);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell.setUseBorderPadding(true);
			cell.setColspan(4);
			cell.setBorder(Rectangle.NO_BORDER);
			cell.setBorderWidthBottom(1f);
			cell.setBorderColorBottom(BaseColor.DARK_GRAY);
			cell.setBorder(Rectangle.NO_BORDER);
			cell.setBorderColor(BaseColor.WHITE);

			/*
			 * For patient name
			 */
			PdfPCell cell6 = new PdfPCell(new Paragraph("Patient Name", Font5));
			cell6.setBorderWidth(0.01f);
			cell6.setPaddingBottom(5);
			cell6.setBorderWidthLeft(0.2f);
			cell6.setBorderColor(BaseColor.WHITE);

			PdfPCell cell7 = new PdfPCell(new Paragraph(patientName, mainContent));
			cell7.setBorderWidth(0.2f);
			cell7.setPaddingBottom(5);
			cell7.setBorderColor(BaseColor.WHITE);

			/*
			 * For Gender
			 */
			PdfPCell cell10 = new PdfPCell(new Paragraph("Medical Reg. No.", Font5));
			cell10.setBorderWidth(0.01f);
			cell10.setPaddingBottom(5);
			cell10.setBorderWidthLeft(0.2f);
			cell10.setBorderColor(BaseColor.WHITE);

			PdfPCell cell11 = new PdfPCell(new Paragraph(regNo, mainContent));
			cell11.setBorderWidth(0.2f);
			cell11.setPaddingBottom(5);
			cell11.setBorderColor(BaseColor.WHITE);

			/*
			 * For age
			 */
			PdfPCell cell12 = new PdfPCell(new Paragraph("Age/Gender", Font5));
			cell12.setBorderWidth(0.01f);
			cell12.setPaddingBottom(5);
			cell12.setBorderWidthLeft(0.2f);
			cell12.setBorderColor(BaseColor.WHITE);

			PdfPCell cell13 = new PdfPCell(new Paragraph(age + "/" + gender, mainContent));
			cell13.setBorderWidth(0.2f);
			cell13.setPaddingBottom(5);
			cell13.setBorderColor(BaseColor.WHITE);

			/*
			 * For Mobile
			 */
			PdfPCell cell14 = new PdfPCell(new Paragraph("Mobile No.", Font5));
			cell14.setBorderWidth(0.01f);
			cell14.setPaddingBottom(5);
			cell14.setBorderWidthLeft(0.2f);
			cell14.setBorderColor(BaseColor.WHITE);

			PdfPCell cell15 = new PdfPCell(new Paragraph(mobile, mainContent));
			cell15.setBorderWidth(0.2f);
			cell15.setPaddingBottom(5);
			cell15.setBorderColor(BaseColor.WHITE);

			/*
			 * For collection date
			 */
			PdfPCell cell18 = new PdfPCell(new Paragraph("Collection Date", Font5));
			cell18.setBorderWidth(0.01f);
			cell18.setPaddingBottom(5);
			cell18.setBorderWidthLeft(0.2f);
			cell18.setBorderColor(BaseColor.WHITE);

			PdfPCell cell19 = new PdfPCell(new Paragraph(collectionDate, mainContent));
			cell19.setBorderWidth(0.2f);
			cell19.setPaddingBottom(5);
			cell19.setBorderColor(BaseColor.WHITE);

			/*
			 * For Collection time
			 */
			PdfPCell cell20 = new PdfPCell(new Paragraph("Collection Time", Font5));
			cell20.setBorderWidth(0.01f);
			cell20.setPaddingBottom(5);
			cell20.setBorderWidthLeft(0.2f);
			cell20.setBorderColor(BaseColor.WHITE);

			PdfPCell cell21 = new PdfPCell(new Paragraph(collectionTime, mainContent));
			cell21.setBorderWidth(0.2f);
			cell21.setPaddingBottom(5);
			cell21.setBorderColor(BaseColor.WHITE);

			/*
			 * For Sample ID
			 */
			PdfPCell cell22 = new PdfPCell(new Paragraph("Sample ID", Font5));
			cell22.setBorderWidth(0.01f);
			cell22.setPaddingBottom(15);
			cell22.setBorderWidthLeft(0.2f);
			cell22.setBorderColor(BaseColor.WHITE);

			PdfPCell cell23 = new PdfPCell(new Paragraph(sampleID, mainContent));
			cell23.setBorderWidth(0.2f);
			cell23.setPaddingBottom(15);
			cell23.setBorderColor(BaseColor.WHITE);

			/*
			 * For Referred by
			 */
			PdfPCell cell221 = new PdfPCell(new Paragraph("Referred By", Font5));
			cell221.setBorderWidth(0.01f);
			cell221.setPaddingBottom(15);
			cell221.setBorderWidthLeft(0.2f);
			cell221.setBorder(Rectangle.NO_BORDER);
			cell221.setBorderColor(BaseColor.WHITE);

			PdfPCell cell231 = new PdfPCell(new Paragraph(referredBy, mainContent));
			cell231.setBorderWidth(0.2f);
			cell231.setPaddingBottom(15);
			cell231.setBorder(Rectangle.NO_BORDER);
			cell231.setBorderColor(BaseColor.WHITE);

			PdfPCell cell232 = new PdfPCell(new Paragraph("", mainContent));
			cell232.setBorderWidth(0.2f);
			cell232.setColspan(4);
			cell232.setBorderColorTop(BaseColor.BLACK);
			cell232.setBorderColorBottom(BaseColor.WHITE);
			cell232.setBorderColorLeft(BaseColor.WHITE);
			cell232.setBorderColorRight(BaseColor.WHITE);
			cell232.setBorderWidthLeft(0);
			cell232.setBorderWidthRight(0);

			/*
			 * adding all cell to the table to create tabular structure
			 */

			table.addCell(cell);
			table.addCell(cell6);
			table.addCell(cell7);
			table.addCell(cell10);
			table.addCell(cell11);
			table.addCell(cell12);
			table.addCell(cell13);
			table.addCell(cell14);
			table.addCell(cell15);
			table.addCell(cell18);
			table.addCell(cell19);
			table.addCell(cell20);
			table.addCell(cell21);
			table.addCell(cell22);
			table.addCell(cell23);
			table.addCell(cell221);
			table.addCell(cell231);
			table.addCell(cell232);

			document.add(table);

			int groupCheck = 0;

			String tests = "HIV,HBSAG,HCV,ENTROCHEK (TYPHOID),LEPTO,VDRL,Blood Group,MP ANTIGEN,PS FOR MP,DENGU";

			/*
			 * Check whether group lab tests are added or not, by checking whether
			 * groupTestMap size is > 0, if so then only print into PDF else do not print
			 * the headers into PDF
			 */
			System.out.println("groupMap" + groupMap.size());
			if (groupMap.size() > 0) {

				Set<String> keySet = groupMap.keySet();

				for (String groupName : keySet) {

					/*
					 * For Receipt details
					 */
					PdfPTable table2 = new PdfPTable(3);
					table2.setWidthPercentage(100);
					Rectangle rect02 = new Rectangle(270, 700);
					table2.setWidthPercentage(new float[] { 120, 75, 75 }, rect02);

					System.out.println("profile test check.." + groupCheck);

					if (groupCheck > 0) {
						document.newPage();

						PdfPTable table3 = new PdfPTable(4);

						table3.setFooterRows(1);
						table3.setWidthPercentage(100);
						Rectangle rect3 = new Rectangle(270, 700);
						table.setWidthPercentage(new float[] { 50, 85, 50, 85 }, rect3);

						PdfPCell cell00 = new PdfPCell(new Paragraph("", Font3));
						cell00.setPaddingTop(30);
						cell00.setHorizontalAlignment(Element.ALIGN_CENTER);
						cell00.setUseBorderPadding(true);
						cell00.setColspan(4);
						cell00.setBorder(Rectangle.NO_BORDER);
						cell00.setBorderWidthBottom(1f);
						cell00.setBorderColorBottom(BaseColor.DARK_GRAY);
						cell00.setBorder(Rectangle.NO_BORDER);
						cell00.setBorderColor(BaseColor.WHITE);

						/*
						 * For patient name
						 */
						PdfPCell cell600 = new PdfPCell(new Paragraph("Patient Name", Font5));
						cell600.setBorderWidth(0.01f);
						cell600.setPaddingBottom(5);
						cell600.setBorderWidthLeft(0.2f);
						cell600.setBorderColor(BaseColor.WHITE);

						PdfPCell cell700 = new PdfPCell(new Paragraph(patientName, mainContent));
						cell700.setBorderWidth(0.2f);
						cell700.setPaddingBottom(5);
						cell700.setBorderColor(BaseColor.WHITE);

						/*
						 * For Gender
						 */
						PdfPCell cell1000 = new PdfPCell(new Paragraph("Medical Reg. No.", Font5));
						cell1000.setBorderWidth(0.01f);
						cell1000.setPaddingBottom(5);
						cell1000.setBorderWidthLeft(0.2f);
						cell1000.setBorderColor(BaseColor.WHITE);

						PdfPCell cell1100 = new PdfPCell(new Paragraph(regNo, mainContent));
						cell1100.setBorderWidth(0.2f);
						cell1100.setPaddingBottom(5);
						cell1100.setBorderColor(BaseColor.WHITE);

						/*
						 * For age
						 */
						PdfPCell cell1200 = new PdfPCell(new Paragraph("Age/Gender", Font5));
						cell1200.setBorderWidth(0.01f);
						cell1200.setPaddingBottom(5);
						cell1200.setBorderWidthLeft(0.2f);
						cell1200.setBorderColor(BaseColor.WHITE);

						PdfPCell cell1300 = new PdfPCell(new Paragraph(age + "/" + gender, mainContent));
						cell1300.setBorderWidth(0.2f);
						cell1300.setPaddingBottom(5);
						cell1300.setBorderColor(BaseColor.WHITE);

						/*
						 * For Mobile
						 */
						PdfPCell cell1400 = new PdfPCell(new Paragraph("Mobile No.", Font5));
						cell1400.setBorderWidth(0.01f);
						cell1400.setPaddingBottom(5);
						cell1400.setBorderWidthLeft(0.2f);
						cell1400.setBorderColor(BaseColor.WHITE);

						PdfPCell cell1500 = new PdfPCell(new Paragraph(mobile, mainContent));
						cell1500.setBorderWidth(0.2f);
						cell1500.setPaddingBottom(5);
						cell1500.setBorderColor(BaseColor.WHITE);

						/*
						 * For collection date
						 */
						PdfPCell cell1800 = new PdfPCell(new Paragraph("Collection Date", Font5));
						cell1800.setBorderWidth(0.01f);
						cell1800.setPaddingBottom(5);
						cell1800.setBorderWidthLeft(0.2f);
						cell1800.setBorderColor(BaseColor.WHITE);

						PdfPCell cell1900 = new PdfPCell(new Paragraph(collectionDate, mainContent));
						cell1900.setBorderWidth(0.2f);
						cell1900.setPaddingBottom(5);
						cell1900.setBorderColor(BaseColor.WHITE);

						/*
						 * For Collection time
						 */
						PdfPCell cell2000 = new PdfPCell(new Paragraph("Collection Time", Font5));
						cell2000.setBorderWidth(0.01f);
						cell2000.setPaddingBottom(5);
						cell2000.setBorderWidthLeft(0.2f);
						cell2000.setBorderColor(BaseColor.WHITE);

						PdfPCell cell2100 = new PdfPCell(new Paragraph(collectionTime, mainContent));
						cell2100.setBorderWidth(0.2f);
						cell2100.setPaddingBottom(5);
						cell2100.setBorderColor(BaseColor.WHITE);

						/*
						 * For Sample ID
						 */
						PdfPCell cell2200 = new PdfPCell(new Paragraph("Sample ID", Font5));
						cell2200.setBorderWidth(0.01f);
						cell2200.setPaddingBottom(15);
						cell2200.setBorderWidthLeft(0.2f);
						cell2200.setBorderColor(BaseColor.WHITE);

						PdfPCell cell2300 = new PdfPCell(new Paragraph(sampleID, mainContent));
						cell2300.setBorderWidth(0.2f);
						cell2300.setPaddingBottom(15);
						cell2300.setBorderColor(BaseColor.WHITE);

						/*
						 * For Referred by
						 */
						PdfPCell cell22100 = new PdfPCell(new Paragraph("Referred By", Font5));
						cell22100.setBorderWidth(0.01f);
						cell22100.setPaddingBottom(15);
						cell22100.setBorderWidthLeft(0.2f);
						cell22100.setBorder(Rectangle.NO_BORDER);
						cell22100.setBorderColor(BaseColor.WHITE);

						PdfPCell cell23100 = new PdfPCell(new Paragraph(referredBy, mainContent));
						cell23100.setBorderWidth(0.2f);
						cell23100.setPaddingBottom(15);
						cell23100.setBorder(Rectangle.NO_BORDER);
						cell23100.setBorderColor(BaseColor.WHITE);

						PdfPCell cell23200 = new PdfPCell(new Paragraph("", mainContent));
						cell23200.setBorderWidth(0.2f);
						cell23200.setColspan(4);
						cell23200.setBorderColorTop(BaseColor.BLACK);
						cell23200.setBorderColorBottom(BaseColor.WHITE);
						cell23200.setBorderColorLeft(BaseColor.WHITE);
						cell23200.setBorderColorRight(BaseColor.WHITE);
						cell23200.setBorderWidthLeft(0);
						cell23200.setBorderWidthRight(0);

						/*
						 * adding all cell to the table to create tabular structure
						 */

						table3.addCell(cell00);
						table3.addCell(cell600);
						table3.addCell(cell700);
						table3.addCell(cell1000);
						table3.addCell(cell1100);
						table3.addCell(cell1200);
						table3.addCell(cell1300);
						table3.addCell(cell1400);
						table3.addCell(cell1500);
						table3.addCell(cell1800);
						table3.addCell(cell1900);
						table3.addCell(cell2000);
						table3.addCell(cell2100);
						table3.addCell(cell2200);
						table3.addCell(cell2300);
						table3.addCell(cell22100);
						table3.addCell(cell23100);
						table3.addCell(cell23200);

						document.add(table3);
					}

					groupCheck++;

					// For test profile name i.e., group name
					PdfPCell cell026 = new PdfPCell(new Paragraph(groupName, Font4));
					cell026.setBorderWidth(0.5f);
					cell026.setPaddingBottom(8);
					cell026.setPaddingTop(15);
					cell026.setColspan(3);
					cell026.setHorizontalAlignment(Element.ALIGN_CENTER);
					cell026.setBorderColor(BaseColor.WHITE);

					// For test
					PdfPCell cell26 = new PdfPCell(new Paragraph("TEST DONE", Font6));
					cell26.setBorderWidth(0.5f);
					cell26.setPaddingBottom(8);
					cell26.setBorderColor(BaseColor.WHITE);

					// For normal range
					PdfPCell cell27 = new PdfPCell(new Paragraph("RESULT", Font6));
					cell27.setBorderWidth(0.5f);
					cell27.setPaddingBottom(8);
					cell27.setBorderColor(BaseColor.WHITE);

					// For observed value
					PdfPCell cell28 = new PdfPCell(new Paragraph("NORMAL RANGE", Font6));
					cell28.setBorderWidth(0.5f);
					cell28.setPaddingBottom(8);
					cell28.setBorderColor(BaseColor.WHITE);

					// table2.addCell(cell25);
					table2.addCell(cell026);
					table2.addCell(cell26);
					table2.addCell(cell27);
					table2.addCell(cell28);

					count = 1;

					LinkedHashMap<String, String> subMap = groupMap.get(groupName);

					// LinkedHashMap<String, String> sortedSubMap =
					// configurationUtil.sortStringHashMap(subMap);

					Set<String> subKeySet = subMap.keySet();

					for (String subGroup : subKeySet) {

						if (subGroup == null) {
							// For test
							PdfPCell cell30111 = new PdfPCell(new Paragraph("", Font2));
							cell30111.setBorderWidth(0.5f);
							cell30111.setPaddingBottom(5);
							cell30111.setColspan(3);
							cell30111.setBorderColor(BaseColor.WHITE);

							table2.addCell(cell30111);
						} else if (subGroup.equals("null")) {
							// For test
							PdfPCell cell30111 = new PdfPCell(new Paragraph("", Font2));
							cell30111.setBorderWidth(0.5f);
							cell30111.setPaddingBottom(5);
							cell30111.setColspan(3);
							cell30111.setBorderColor(BaseColor.WHITE);

							table2.addCell(cell30111);
						} else {
							// For test
							PdfPCell cell30111 = new PdfPCell(new Paragraph(subGroup, Font2));
							cell30111.setBorderWidth(0.5f);
							cell30111.setPaddingBottom(5);
							cell30111.setColspan(3);
							cell30111.setBorderColor(BaseColor.WHITE);

							table2.addCell(cell30111);
						}

						String groupTestsArray[] = subMap.get(subGroup).split("___");

						for (int i = 0; i < groupTestsArray.length; i++) {

							String testArray[] = groupTestsArray[i].split("===");

							String test = testArray[0];

							String normalRange = testArray[3].trim();

							String quantitativeValueStr = testArray[2];

							String qualitativeValueStr = testArray[1];

							String result = "";

							if (qualitativeValueStr == null || qualitativeValueStr == "") {

								result = quantitativeValueStr;

							} else if (qualitativeValueStr.isEmpty()) {

								result = quantitativeValueStr;

							} else {
								result = qualitativeValueStr;
							}

							if (result.equals("NA") || result.equals("0") || result.equals("0.0")) {
								continue;
							} else {

								if (groupName.equals("PTINR") || groupName.equals("Prothrombin Time")) {

									// For test
									PdfPCell cell30 = new PdfPCell(new Paragraph(test, mainContent));
									cell30.setBorderWidth(0.5f);
									cell30.setPaddingBottom(5);
									// cell30.setHorizontalAlignment(Element.ALIGN_CENTER);
									cell30.setBorderColor(BaseColor.WHITE);

									try {

										double resultValue = Double.parseDouble(result);

										if ((resultValue % 1 == 0)) {
											result = "" + (int) resultValue;
										}

									} catch (Exception exception) {
										result = result;
									}

									PdfPCell cell31 = new PdfPCell(new Paragraph("" + result, mainContent));
									cell31.setBorderWidth(0.5f);
									cell31.setPaddingBottom(5);
									// cell31.setHorizontalAlignment(Element.ALIGN_CENTER);
									cell31.setBorderColor(BaseColor.WHITE);

									// For observed value
									PdfPCell cell32 = new PdfPCell(new Paragraph("", mainContent));
									cell32.setBorderWidth(0.5f);
									cell32.setPaddingBottom(5);
									// cell32.setHorizontalAlignment(Element.ALIGN_CENTER);
									cell32.setBorderColor(BaseColor.WHITE);

									count++;

									// table2.addCell(cell29);
									table2.addCell(cell30);
									table2.addCell(cell31);
									table2.addCell(cell32);

								} else {

									// For test
									PdfPCell cell30 = new PdfPCell(new Paragraph(test, mainContent));
									cell30.setBorderWidth(0.5f);
									cell30.setPaddingBottom(5);
									// cell30.setHorizontalAlignment(Element.ALIGN_CENTER);
									cell30.setBorderColor(BaseColor.WHITE);

									// For normal range
									PdfPCell cell31 = null;

									if (normalRange.trim().contains(",")) {

										if (normalRange.contains(result)) {

											cell31 = new PdfPCell(new Paragraph("" + result, mainContent));
											cell31.setBorderWidth(0.5f);
											cell31.setPaddingBottom(5);
											// cell31.setHorizontalAlignment(Element.ALIGN_CENTER);
											cell31.setBorderColor(BaseColor.WHITE);

										} else {

											cell31 = new PdfPCell(new Paragraph("" + result, mainContent_abnormal));
											cell31.setBorderWidth(0.5f);
											cell31.setPaddingBottom(5);
											// cell31.setHorizontalAlignment(Element.ALIGN_CENTER);
											cell31.setBorderColor(BaseColor.WHITE);

										}

									} else if (normalRange.trim().contains(">")) {

										System.out.println("...." + normalRange);

										String normalRangeArr[] = normalRange.trim().substring(1).trim().split(" ");

										double value = Double.parseDouble(normalRangeArr[0].trim());

										try {
											double resultValue = Double.parseDouble(result);

											if ((resultValue % 1 == 0)) {
												result = "" + (int) resultValue;
											}

											if (resultValue > value) {

												cell31 = new PdfPCell(new Paragraph("" + result, mainContent));
												cell31.setBorderWidth(0.5f);
												cell31.setPaddingBottom(5);
												// cell31.setHorizontalAlignment(Element.ALIGN_CENTER);
												cell31.setBorderColor(BaseColor.WHITE);

											} else {

												cell31 = new PdfPCell(new Paragraph("" + result, mainContent_abnormal));
												cell31.setBorderWidth(0.5f);
												cell31.setPaddingBottom(5);
												// cell31.setHorizontalAlignment(Element.ALIGN_CENTER);
												cell31.setBorderColor(BaseColor.WHITE);

											}

										} catch (Exception exception) {

											System.out.println(
													"NumberFormatException occurred due to result value..." + result);

											cell31 = new PdfPCell(new Paragraph("" + result, mainContent_abnormal));
											cell31.setBorderWidth(0.5f);
											cell31.setPaddingBottom(5);
											// cell31.setHorizontalAlignment(Element.ALIGN_CENTER);
											cell31.setBorderColor(BaseColor.WHITE);

										}

									} else if (normalRange.trim().contains("<")) {

										System.out.println("...." + normalRange);

										String normalRangeArr[] = normalRange.trim().substring(1).trim().split(" ");

										double value = Double.parseDouble(normalRangeArr[0].trim());

										try {
											double resultValue = Double.parseDouble(result);

											if ((resultValue % 1 == 0)) {
												result = "" + (int) resultValue;
											}

											if (resultValue < value) {

												cell31 = new PdfPCell(new Paragraph("" + result, mainContent));
												cell31.setBorderWidth(0.5f);
												cell31.setPaddingBottom(5);
												// cell31.setHorizontalAlignment(Element.ALIGN_CENTER);
												cell31.setBorderColor(BaseColor.WHITE);

											} else {

												cell31 = new PdfPCell(new Paragraph("" + result, mainContent_abnormal));
												cell31.setBorderWidth(0.5f);
												cell31.setPaddingBottom(5);
												// cell31.setHorizontalAlignment(Element.ALIGN_CENTER);
												cell31.setBorderColor(BaseColor.WHITE);

											}

										} catch (Exception exception) {

											System.out.println(
													"NumberFormatException occurred due to result value..." + result);

											cell31 = new PdfPCell(new Paragraph("" + result, mainContent_abnormal));
											cell31.setBorderWidth(0.5f);
											cell31.setPaddingBottom(5);
											// cell31.setHorizontalAlignment(Element.ALIGN_CENTER);
											cell31.setBorderColor(BaseColor.WHITE);
										}

									} else if (normalRange.matches(".*\\d.*")) {

										System.out.println("...." + normalRange);

										if (normalRange.contains(" ")) {

											String normalRangeArr[] = normalRange.trim().split(" ");

											if (normalRangeArr[1].trim().equals("-")) {

												// String rangeStrArr[] = normalRangeArr[0].split("-");

												double minVal = Double.parseDouble(normalRangeArr[0].trim());

												double maxVal = Double.parseDouble(normalRangeArr[2].trim());

												Range<Double> range = Range.between(minVal, maxVal);

												if (result.equals("NA")) {
													cell31 = new PdfPCell(new Paragraph("" + result, mainContent));
													cell31.setBorderWidth(0.5f);
													cell31.setPaddingBottom(5);
													// cell31.setHorizontalAlignment(Element.ALIGN_CENTER);
													cell31.setBorderColor(BaseColor.WHITE);
												} else {

													try {

														double resultValue = Double.parseDouble(result);

														if ((resultValue % 1 == 0)) {
															result = "" + (int) resultValue;
														}

														if (range.contains(resultValue)) {

															cell31 = new PdfPCell(
																	new Paragraph("" + result, mainContent));
															cell31.setBorderWidth(0.5f);
															cell31.setPaddingBottom(5);
															// cell31.setHorizontalAlignment(Element.ALIGN_CENTER);
															cell31.setBorderColor(BaseColor.WHITE);

														} else {

															cell31 = new PdfPCell(
																	new Paragraph("" + result, mainContent_abnormal));
															cell31.setBorderWidth(0.5f);
															cell31.setPaddingBottom(5);
															// cell31.setHorizontalAlignment(Element.ALIGN_CENTER);
															cell31.setBorderColor(BaseColor.WHITE);

														}

													} catch (Exception exception) {

														System.out.println(
																"NumberFormatException occurred due to result value..."
																		+ result);

														cell31 = new PdfPCell(
																new Paragraph("" + result, mainContent_abnormal));
														cell31.setBorderWidth(0.5f);
														cell31.setPaddingBottom(5);
														// cell31.setHorizontalAlignment(Element.ALIGN_CENTER);
														cell31.setBorderColor(BaseColor.WHITE);

													}

												}

											} else {

												String rangeStrArr[] = normalRangeArr[0].split("-");

												double minVal = Double.parseDouble(rangeStrArr[0].trim());

												double maxVal = Double.parseDouble(rangeStrArr[1].trim());

												Range<Double> range = Range.between(minVal, maxVal);

												if (result.equals("NA")) {
													cell31 = new PdfPCell(new Paragraph("" + result, mainContent));
													cell31.setBorderWidth(0.5f);
													cell31.setPaddingBottom(5);
													// cell31.setHorizontalAlignment(Element.ALIGN_CENTER);
													cell31.setBorderColor(BaseColor.WHITE);
												} else {

													try {

														double resultValue = Double.parseDouble(result);

														if ((resultValue % 1 == 0)) {
															result = "" + (int) resultValue;
														}

														if (range.contains(resultValue)) {

															cell31 = new PdfPCell(
																	new Paragraph("" + result, mainContent));
															cell31.setBorderWidth(0.5f);
															cell31.setPaddingBottom(5);
															// cell31.setHorizontalAlignment(Element.ALIGN_CENTER);
															cell31.setBorderColor(BaseColor.WHITE);

														} else {

															cell31 = new PdfPCell(
																	new Paragraph("" + result, mainContent_abnormal));
															cell31.setBorderWidth(0.5f);
															cell31.setPaddingBottom(5);
															// cell31.setHorizontalAlignment(Element.ALIGN_CENTER);
															cell31.setBorderColor(BaseColor.WHITE);

														}

													} catch (Exception exception) {

														System.out.println(
																"NumberFormatException occurred due to result value..."
																		+ result);

														cell31 = new PdfPCell(
																new Paragraph("" + result, mainContent_abnormal));
														cell31.setBorderWidth(0.5f);
														cell31.setPaddingBottom(5);
														// cell31.setHorizontalAlignment(Element.ALIGN_CENTER);
														cell31.setBorderColor(BaseColor.WHITE);
													}

												}

											}

										} else {

											if (result.equals(normalRange)) {

												cell31 = new PdfPCell(new Paragraph("" + result, mainContent));
												cell31.setBorderWidth(0.5f);
												cell31.setPaddingBottom(5);
												// cell31.setHorizontalAlignment(Element.ALIGN_CENTER);
												cell31.setBorderColor(BaseColor.WHITE);

											} else {

												cell31 = new PdfPCell(new Paragraph("" + result, mainContent_abnormal));
												cell31.setBorderWidth(0.5f);
												cell31.setPaddingBottom(5);
												// cell31.setHorizontalAlignment(Element.ALIGN_CENTER);
												cell31.setBorderColor(BaseColor.WHITE);

											}

										}

									} else {
										if (normalRange.toLowerCase().trim().equals(result.toLowerCase().trim())) {
											cell31 = new PdfPCell(new Paragraph("" + result, mainContent));
											cell31.setBorderWidth(0.5f);
											cell31.setPaddingBottom(5);
											// cell31.setHorizontalAlignment(Element.ALIGN_CENTER);
											cell31.setBorderColor(BaseColor.WHITE);
										} else if (normalRange.toLowerCase().contains(result.toLowerCase())) {
											cell31 = new PdfPCell(new Paragraph("" + result, mainContent));
											cell31.setBorderWidth(0.5f);
											cell31.setPaddingBottom(5);
											// cell31.setHorizontalAlignment(Element.ALIGN_CENTER);
											cell31.setBorderColor(BaseColor.WHITE);
										} else {
											cell31 = new PdfPCell(new Paragraph("" + result, mainContent_abnormal));
											cell31.setBorderWidth(0.5f);
											cell31.setPaddingBottom(5);
											// cell31.setHorizontalAlignment(Element.ALIGN_CENTER);
											cell31.setBorderColor(BaseColor.WHITE);
										}

									}

									// checking whether to include of exclude the normal values for priting by
									// checking whether the isExcludeFlag is off or on.
									boolean excludeFlag = patientDAOInf.isNormalValueExclude(test, groupName);

									boolean showNormalRange = patientDAOInf.showNormalRange(test, groupName);

									if (excludeFlag) {

										// For observed value
										PdfPCell cell32 = new PdfPCell(new Paragraph("", mainContent));
										cell32.setBorderWidth(0.5f);
										cell32.setPaddingBottom(5);
										// cell32.setHorizontalAlignment(Element.ALIGN_CENTER);
										cell32.setBorderColor(BaseColor.WHITE);

										count++;

										// table2.addCell(cell29);
										table2.addCell(cell30);
										table2.addCell(cell31);
										table2.addCell(cell32);

									} else {

										if (showNormalRange) {

											// retrieving normal range description for the test if any
											String normalRangeDesc = patientDAOInf.retrieveTestNormalRangeDesc(test,
													groupName);

											// For observed value
											PdfPCell cell32 = new PdfPCell(
													new Paragraph("" + normalRangeDesc, mainContent));
											cell32.setBorderWidth(0.5f);
											cell32.setPaddingBottom(5);
											// cell32.setHorizontalAlignment(Element.ALIGN_CENTER);
											cell32.setBorderColor(BaseColor.WHITE);

											count++;

											// table2.addCell(cell29);
											table2.addCell(cell30);
											table2.addCell(cell31);
											table2.addCell(cell32);

										} else {

											// For observed value
											PdfPCell cell32 = new PdfPCell(
													new Paragraph("" + normalRange, mainContent));
											cell32.setBorderWidth(0.5f);
											cell32.setPaddingBottom(5);
											// cell32.setHorizontalAlignment(Element.ALIGN_CENTER);
											cell32.setBorderColor(BaseColor.WHITE);

											count++;

											// table2.addCell(cell29);
											table2.addCell(cell30);
											table2.addCell(cell31);
											table2.addCell(cell32);

										}

									}

								}

								// retrieving remark for the test if any
								String remark = patientDAOInf.retrieveTestRemark(test, groupName);

								if (remark == null || remark == "") {
									continue;
								} else if (remark.isEmpty()) {
									continue;
								} else {

									// For remark
									PdfPCell cell32 = new PdfPCell(new Paragraph("" + remark, mainContent1));
									cell32.setBorderWidth(0.5f);
									cell32.setPaddingTop(-2);
									cell32.setPaddingBottom(5);
									cell32.setColspan(3);
									cell32.setBorderColor(BaseColor.WHITE);

									table2.addCell(cell32);

								}

								boolean showNormalRange = patientDAOInf.showNormalRange(test, groupName);

								if (showNormalRange && test.contains("Beta")) {

									// retrieving normal range description for the test if any
									/*
									 * String normalRangeDesc = patientDAOInf.retrieveTestNormalRangeDesc(test,
									 * groupName);
									 * 
									 * // For remark PdfPCell cell32 = new PdfPCell(new Paragraph("" +
									 * normalRangeDesc, mainContent)); cell32.setBorderWidth(0.5f);
									 * cell32.setPaddingBottom(5); cell32.setBorderColor(BaseColor.BLACK);
									 */

									PdfPCell cell302 = new PdfPCell(new Paragraph("", Font5));
									cell302.setPaddingTop(5);
									cell302.setColspan(3);
									cell302.setBorderColor(BaseColor.WHITE);

									// For remark
									PdfPCell cell32 = new PdfPCell(
											new Paragraph("pregnant woman \n (weeks since LMP*)", Font5));
									cell32.setBorderWidth(0.5f);
									cell32.setPaddingBottom(5);
									cell32.setHorizontalAlignment(Element.ALIGN_CENTER);
									cell32.setBorderColor(BaseColor.BLACK);

									PdfPCell cell33 = new PdfPCell(
											new Paragraph("Total Î²HCG level [mlU/mL] \n range", Font5));
									cell33.setBorderWidth(0.1f);
									cell33.setPaddingBottom(5);
									cell33.setPaddingTop(5);
									cell33.setColspan(2);
									cell33.setHorizontalAlignment(Element.ALIGN_CENTER);
									cell33.setBorderColor(BaseColor.BLACK);

									table2.addCell(cell302);
									table2.addCell(cell32);
									table2.addCell(cell33);

									for (int j = 0; j < rangelevel.length; j++) {

										String[] levelVal = rangelevel[j].split("#");

										PdfPCell cell35 = new PdfPCell(new Paragraph("" + levelVal[0], mainContent));
										cell35.setBorderWidth(0.5f);
										cell35.setPaddingBottom(5);
										cell35.setHorizontalAlignment(Element.ALIGN_CENTER);
										cell35.setBorderColor(BaseColor.BLACK);

										PdfPCell cell36 = new PdfPCell(new Paragraph("" + levelVal[1], mainContent));
										cell36.setBorderWidth(0.1f);
										cell36.setPaddingBottom(5);
										cell36.setHorizontalAlignment(Element.ALIGN_CENTER);
										cell36.setColspan(2);
										cell36.setBorderColor(BaseColor.BLACK);

										table2.addCell(cell35);
										table2.addCell(cell36);
									}

								}

							}

						}

						/*
						 * For remaining details
						 */

						PdfPTable table4 = new PdfPTable(2);
						table4.setWidthPercentage(100);
						table4.setTotalWidth(530);
						Rectangle rect3 = new Rectangle(270, 700);
						table4.setWidthPercentage(new float[] { 170, 100 }, rect3);

						/*
						 * For receipt by
						 */

						PdfPCell cell81 = new PdfPCell(new Paragraph("", Font5));
						cell81.setBorderWidth(0.01f);
						cell81.setPaddingBottom(2);
						cell81.setPaddingTop(10);
						cell81.setBorderColor(BaseColor.WHITE);

						/*
						 * PdfPCell cell82 = new PdfPCell(new Paragraph("", mainContent));
						 * cell82.setBorderWidth(0.01f); cell82.setPaddingBottom(2);
						 * cell82.setPaddingTop(10); cell82.setBorderColor(BaseColor.WHITE);
						 */
						/*
						 * Table for Prescription image
						 */
						PdfPTable imageTable = new PdfPTable(2);
						imageTable.setWidthPercentage(100);
						imageTable.setWidths(new int[] { 2, 2 });

						PdfPCell imageCell1 = new PdfPCell(signatureImg, true);
						imageCell1.setBorderColor(BaseColor.WHITE);
						imageCell1.setHorizontalAlignment(Element.ALIGN_RIGHT);

						PdfPCell imageCell2 = new PdfPCell(new Paragraph("", Font5));
						imageCell2.setBorderColor(BaseColor.WHITE);

						imageTable.addCell(imageCell1);
						imageTable.addCell(imageCell2);

						/*
						 * For Receivers Signature
						 */

						PdfPCell cell83 = new PdfPCell(imageTable);
						cell83.setBorderWidth(0.01f);
						cell83.setPaddingBottom(0);
						cell83.setPaddingTop(2);
						cell83.setPaddingLeft(30);
						cell83.setHorizontalAlignment(Element.ALIGN_RIGHT);
						cell83.setBorderColor(BaseColor.WHITE);

						PdfPCell cell811 = new PdfPCell(new Paragraph(fullName, Font5));
						cell811.setBorderWidth(0.01f);
						cell811.setPaddingBottom(2);
						cell811.setPaddingTop(2);
						cell811.setBorderColor(BaseColor.WHITE);

						PdfPCell cell84 = new PdfPCell(
								new Paragraph(MDMap.get("MDName") + "\n" + MDMap.get("MDQualification") + "", Font5));
						cell84.setBorderWidth(0.01f);
						cell84.setPaddingBottom(2);
						cell84.setPaddingTop(2);
						// cell84.setColspan(2);
						cell84.setPaddingRight(30);
						cell84.setHorizontalAlignment(Element.ALIGN_RIGHT);
						cell84.setBorderColor(BaseColor.WHITE);

						table4.addCell(cell81);
						// table4.addCell(cell82);
						table4.addCell(cell83);
						table4.addCell(cell811);
						table4.addCell(cell84);

						// document.add(table4);

						FooterTable3 event = new FooterTable3(table4);
						writer.setPageEvent(event);

					}

					document.add(table2);

				}

			}

			/*
			 * For Receipt details
			 */
			PdfPTable table2 = new PdfPTable(3);
			table2.setWidthPercentage(100);
			Rectangle rect02 = new Rectangle(270, 700);
			table2.setWidthPercentage(new float[] { 120, 75, 75 }, rect02);

			/*
			 * Check whether single lab tests are added or not, by checking whether
			 * labTestList size is > 0, if so then only print into PDF else do not print the
			 * headers into PDF
			 */
			System.out.println("singleLabTestMap" + singleLabTestMap.size());
			if (singleLabTestMap.size() > 0) {

				int maxRecordCount = 0;

				System.out.println("Single test check.." + groupCheck);

				if (groupCheck > 0) {
					document.newPage();

					PdfPTable table3 = new PdfPTable(4);

					table3.setFooterRows(1);
					table3.setWidthPercentage(100);
					Rectangle rect3 = new Rectangle(270, 700);
					table.setWidthPercentage(new float[] { 50, 85, 50, 85 }, rect3);

					PdfPCell cell00 = new PdfPCell(new Paragraph("", Font3));
					cell00.setPaddingTop(30);
					cell00.setHorizontalAlignment(Element.ALIGN_CENTER);
					cell00.setUseBorderPadding(true);
					cell00.setColspan(4);
					cell00.setBorder(Rectangle.NO_BORDER);
					cell00.setBorderWidthBottom(1f);
					cell00.setBorderColorBottom(BaseColor.DARK_GRAY);
					cell00.setBorder(Rectangle.NO_BORDER);
					cell00.setBorderColor(BaseColor.WHITE);

					/*
					 * For patient name
					 */
					PdfPCell cell600 = new PdfPCell(new Paragraph("Patient Name", Font5));
					cell600.setBorderWidth(0.01f);
					cell600.setPaddingBottom(5);
					cell600.setBorderWidthLeft(0.2f);
					cell600.setBorderColor(BaseColor.WHITE);

					PdfPCell cell700 = new PdfPCell(new Paragraph(patientName, mainContent));
					cell700.setBorderWidth(0.2f);
					cell700.setPaddingBottom(5);
					cell700.setBorderColor(BaseColor.WHITE);

					/*
					 * For Gender
					 */
					PdfPCell cell1000 = new PdfPCell(new Paragraph("Medical Reg. No.", Font5));
					cell1000.setBorderWidth(0.01f);
					cell1000.setPaddingBottom(5);
					cell1000.setBorderWidthLeft(0.2f);
					cell1000.setBorderColor(BaseColor.WHITE);

					PdfPCell cell1100 = new PdfPCell(new Paragraph(regNo, mainContent));
					cell1100.setBorderWidth(0.2f);
					cell1100.setPaddingBottom(5);
					cell1100.setBorderColor(BaseColor.WHITE);

					/*
					 * For age
					 */
					PdfPCell cell1200 = new PdfPCell(new Paragraph("Age/Gender", Font5));
					cell1200.setBorderWidth(0.01f);
					cell1200.setPaddingBottom(5);
					cell1200.setBorderWidthLeft(0.2f);
					cell1200.setBorderColor(BaseColor.WHITE);

					PdfPCell cell1300 = new PdfPCell(new Paragraph(age + "/" + gender, mainContent));
					cell1300.setBorderWidth(0.2f);
					cell1300.setPaddingBottom(5);
					cell1300.setBorderColor(BaseColor.WHITE);

					/*
					 * For Mobile
					 */
					PdfPCell cell1400 = new PdfPCell(new Paragraph("Mobile No.", Font5));
					cell1400.setBorderWidth(0.01f);
					cell1400.setPaddingBottom(5);
					cell1400.setBorderWidthLeft(0.2f);
					cell1400.setBorderColor(BaseColor.WHITE);

					PdfPCell cell1500 = new PdfPCell(new Paragraph(mobile, mainContent));
					cell1500.setBorderWidth(0.2f);
					cell1500.setPaddingBottom(5);
					cell1500.setBorderColor(BaseColor.WHITE);

					/*
					 * For collection date
					 */
					PdfPCell cell1800 = new PdfPCell(new Paragraph("Collection Date", Font5));
					cell1800.setBorderWidth(0.01f);
					cell1800.setPaddingBottom(5);
					cell1800.setBorderWidthLeft(0.2f);
					cell1800.setBorderColor(BaseColor.WHITE);

					PdfPCell cell1900 = new PdfPCell(new Paragraph(collectionDate, mainContent));
					cell1900.setBorderWidth(0.2f);
					cell1900.setPaddingBottom(5);
					cell1900.setBorderColor(BaseColor.WHITE);

					/*
					 * For Collection time
					 */
					PdfPCell cell2000 = new PdfPCell(new Paragraph("Collection Time", Font5));
					cell2000.setBorderWidth(0.01f);
					cell2000.setPaddingBottom(5);
					cell2000.setBorderWidthLeft(0.2f);
					cell2000.setBorderColor(BaseColor.WHITE);

					PdfPCell cell2100 = new PdfPCell(new Paragraph(collectionTime, mainContent));
					cell2100.setBorderWidth(0.2f);
					cell2100.setPaddingBottom(5);
					cell2100.setBorderColor(BaseColor.WHITE);

					/*
					 * For Sample ID
					 */
					PdfPCell cell2200 = new PdfPCell(new Paragraph("Sample ID", Font5));
					cell2200.setBorderWidth(0.01f);
					cell2200.setPaddingBottom(15);
					cell2200.setBorderWidthLeft(0.2f);
					cell2200.setBorderColor(BaseColor.WHITE);

					PdfPCell cell2300 = new PdfPCell(new Paragraph(sampleID, mainContent));
					cell2300.setBorderWidth(0.2f);
					cell2300.setPaddingBottom(15);
					cell2300.setBorderColor(BaseColor.WHITE);

					/*
					 * For Referred by
					 */
					PdfPCell cell22100 = new PdfPCell(new Paragraph("Referred By", Font5));
					cell22100.setBorderWidth(0.01f);
					cell22100.setPaddingBottom(15);
					cell22100.setBorderWidthLeft(0.2f);
					cell22100.setBorder(Rectangle.NO_BORDER);
					cell22100.setBorderColor(BaseColor.WHITE);

					PdfPCell cell23100 = new PdfPCell(new Paragraph(referredBy, mainContent));
					cell23100.setBorderWidth(0.2f);
					cell23100.setPaddingBottom(15);
					cell23100.setBorder(Rectangle.NO_BORDER);
					cell23100.setBorderColor(BaseColor.WHITE);

					PdfPCell cell23200 = new PdfPCell(new Paragraph("", mainContent));
					cell23200.setBorderWidth(0.2f);
					cell23200.setColspan(4);
					cell23200.setBorderColorTop(BaseColor.BLACK);
					cell23200.setBorderColorBottom(BaseColor.WHITE);
					cell23200.setBorderColorLeft(BaseColor.WHITE);
					cell23200.setBorderColorRight(BaseColor.WHITE);
					cell23200.setBorderWidthLeft(0);
					cell23200.setBorderWidthRight(0);

					/*
					 * adding all cell to the table to create tabular structure
					 */

					table3.addCell(cell00);
					table3.addCell(cell600);
					table3.addCell(cell700);
					table3.addCell(cell1000);
					table3.addCell(cell1100);
					table3.addCell(cell1200);
					table3.addCell(cell1300);
					table3.addCell(cell1400);
					table3.addCell(cell1500);
					table3.addCell(cell1800);
					table3.addCell(cell1900);
					table3.addCell(cell2000);
					table3.addCell(cell2100);
					table3.addCell(cell2200);
					table3.addCell(cell2300);
					table3.addCell(cell22100);
					table3.addCell(cell23100);
					table3.addCell(cell23200);

					document.add(table3);

					// For test
					PdfPCell cell26 = new PdfPCell(new Paragraph("TEST DONE", Font6));
					cell26.setBorderWidth(0.5f);
					cell26.setPaddingBottom(8);
					cell26.setPaddingTop(15);
					cell26.setBorderColor(BaseColor.WHITE);

					// For normal range
					PdfPCell cell27 = new PdfPCell(new Paragraph("RESULT", Font6));
					cell27.setBorderWidth(0.5f);
					cell27.setPaddingBottom(8);
					cell27.setPaddingTop(15);
					cell27.setBorderColor(BaseColor.WHITE);

					// For observed value
					PdfPCell cell28 = new PdfPCell(new Paragraph("NORMAL RANGE", Font6));
					cell28.setBorderWidth(0.5f);
					cell28.setPaddingBottom(8);
					cell28.setPaddingTop(15);
					cell28.setBorderColor(BaseColor.WHITE);

					// table2.addCell(cell25);
					table2.addCell(cell26);
					table2.addCell(cell27);
					table2.addCell(cell28);
				} else {
					// For test
					PdfPCell cell26 = new PdfPCell(new Paragraph("TEST DONE", Font6));
					cell26.setBorderWidth(0.5f);
					cell26.setPaddingBottom(8);
					cell26.setPaddingTop(15);
					cell26.setBorderColor(BaseColor.WHITE);

					// For normal range
					PdfPCell cell27 = new PdfPCell(new Paragraph("RESULT", Font6));
					cell27.setBorderWidth(0.5f);
					cell27.setPaddingBottom(8);
					cell27.setPaddingTop(15);
					cell27.setBorderColor(BaseColor.WHITE);

					// For observed value
					PdfPCell cell28 = new PdfPCell(new Paragraph("NORMAL RANGE", Font6));
					cell28.setBorderWidth(0.5f);
					cell28.setPaddingBottom(8);
					cell28.setPaddingTop(15);
					cell28.setBorderColor(BaseColor.WHITE);

					// table2.addCell(cell25);
					table2.addCell(cell26);
					table2.addCell(cell27);
					table2.addCell(cell28);
				}

				count = 1;

				Set<String> keySet = singleLabTestMap.keySet();

				for (String subGroup : keySet) {

					if (subGroup == null) {
						// For test
						PdfPCell cell30111 = new PdfPCell(new Paragraph("", Font2));
						cell30111.setBorderWidth(0.5f);
						cell30111.setPaddingBottom(5);
						cell30111.setColspan(3);
						cell30111.setBorderColor(BaseColor.WHITE);

						table2.addCell(cell30111);
					} else if (subGroup.equals("null")) {
						// For test
						PdfPCell cell30111 = new PdfPCell(new Paragraph("", Font2));
						cell30111.setBorderWidth(0.5f);
						cell30111.setPaddingBottom(5);
						cell30111.setColspan(3);
						cell30111.setBorderColor(BaseColor.WHITE);

						table2.addCell(cell30111);
					} else {
						// For test
						PdfPCell cell30111 = new PdfPCell(new Paragraph(subGroup, Font2));
						cell30111.setBorderWidth(0.5f);
						cell30111.setPaddingBottom(5);
						cell30111.setColspan(3);
						cell30111.setBorderColor(BaseColor.WHITE);

						table2.addCell(cell30111);
					}

					PatientForm form = new PatientForm();

					String testArray[] = singleLabTestMap.get(subGroup).split("___");

					for (int i = 0; i < testArray.length; i++) {

						maxRecordCount++;

						if (maxRecordCount >= 20) {

							PdfPTable table4 = new PdfPTable(2);
							table4.setWidthPercentage(100);
							table4.setTotalWidth(530);
							Rectangle rect4 = new Rectangle(270, 700);
							table4.setWidthPercentage(new float[] { 170, 100 }, rect4);

							/*
							 * For receipt by
							 */

							PdfPCell cell81 = new PdfPCell(new Paragraph("", Font5));
							cell81.setBorderWidth(0.01f);
							cell81.setPaddingBottom(2);
							cell81.setPaddingTop(10);
							cell81.setBorderColor(BaseColor.WHITE);

							/*
							 * PdfPCell cell82 = new PdfPCell(new Paragraph("", mainContent));
							 * cell82.setBorderWidth(0.01f); cell82.setPaddingBottom(2);
							 * cell82.setPaddingTop(10); cell82.setBorderColor(BaseColor.WHITE);
							 */
							/*
							 * Table for Prescription image
							 */
							PdfPTable imageTable = new PdfPTable(2);
							imageTable.setWidthPercentage(100);
							imageTable.setWidths(new int[] { 2, 2 });

							PdfPCell imageCell1 = new PdfPCell(signatureImg, true);
							imageCell1.setBorderColor(BaseColor.WHITE);
							imageCell1.setHorizontalAlignment(Element.ALIGN_RIGHT);

							PdfPCell imageCell2 = new PdfPCell(new Paragraph("", Font5));
							imageCell2.setBorderColor(BaseColor.WHITE);

							imageTable.addCell(imageCell1);
							imageTable.addCell(imageCell2);

							/*
							 * For Receivers Signature
							 */

							PdfPCell cell83 = new PdfPCell(imageTable);
							cell83.setBorderWidth(0.01f);
							cell83.setPaddingBottom(0);
							cell83.setPaddingTop(2);
							cell83.setPaddingLeft(80);
							cell83.setHorizontalAlignment(Element.ALIGN_RIGHT);
							cell83.setBorderColor(BaseColor.WHITE);

							PdfPCell cell811 = new PdfPCell(new Paragraph(fullName, Font5));
							cell811.setBorderWidth(0.01f);
							cell811.setPaddingBottom(2);
							cell811.setPaddingTop(2);
							cell811.setBorderColor(BaseColor.WHITE);

							PdfPCell cell84 = new PdfPCell(new Paragraph(
									MDMap.get("MDName") + "\n" + MDMap.get("MDQualification") + "", Font5));
							cell84.setBorderWidth(0.01f);
							cell84.setPaddingBottom(2);
							cell84.setPaddingTop(2);
							// cell84.setColspan(2);
							cell84.setPaddingRight(50);
							cell84.setHorizontalAlignment(Element.ALIGN_RIGHT);
							cell84.setBorderColor(BaseColor.WHITE);

							table4.addCell(cell81);
							// table4.addCell(cell82);
							table4.addCell(cell83);
							table4.addCell(cell811);
							table4.addCell(cell84);

							// document.add(table4);

							FooterTable3 event = new FooterTable3(table4);
							writer.setPageEvent(event);

							document.add(table2);

							table2 = new PdfPTable(3);

							table2.setWidthPercentage(100);
							rect02 = new Rectangle(270, 700);
							table2.setWidthPercentage(new float[] { 120, 75, 75 }, rect02);

							document.newPage();

							PdfPTable table3 = new PdfPTable(4);

							table3.setFooterRows(1);
							table3.setWidthPercentage(100);
							Rectangle rect3 = new Rectangle(270, 700);
							table.setWidthPercentage(new float[] { 50, 85, 50, 85 }, rect3);

							PdfPCell cell00 = new PdfPCell(new Paragraph("", Font3));
							cell00.setPaddingTop(30);
							cell00.setHorizontalAlignment(Element.ALIGN_CENTER);
							cell00.setUseBorderPadding(true);
							cell00.setColspan(4);
							cell00.setBorder(Rectangle.NO_BORDER);
							cell00.setBorderWidthBottom(1f);
							cell00.setBorderColorBottom(BaseColor.DARK_GRAY);
							cell00.setBorder(Rectangle.NO_BORDER);
							cell00.setBorderColor(BaseColor.WHITE);

							/*
							 * For patient name
							 */
							PdfPCell cell600 = new PdfPCell(new Paragraph("Patient Name", Font5));
							cell600.setBorderWidth(0.01f);
							cell600.setPaddingBottom(5);
							cell600.setBorderWidthLeft(0.2f);
							cell600.setBorderColor(BaseColor.WHITE);

							PdfPCell cell700 = new PdfPCell(new Paragraph(patientName, mainContent));
							cell700.setBorderWidth(0.2f);
							cell700.setPaddingBottom(5);
							cell700.setBorderColor(BaseColor.WHITE);

							/*
							 * For Gender
							 */
							PdfPCell cell1000 = new PdfPCell(new Paragraph("Medical Reg. No.", Font5));
							cell1000.setBorderWidth(0.01f);
							cell1000.setPaddingBottom(5);
							cell1000.setBorderWidthLeft(0.2f);
							cell1000.setBorderColor(BaseColor.WHITE);

							PdfPCell cell1100 = new PdfPCell(new Paragraph(regNo, mainContent));
							cell1100.setBorderWidth(0.2f);
							cell1100.setPaddingBottom(5);
							cell1100.setBorderColor(BaseColor.WHITE);

							/*
							 * For age
							 */
							PdfPCell cell1200 = new PdfPCell(new Paragraph("Age/Gender", Font5));
							cell1200.setBorderWidth(0.01f);
							cell1200.setPaddingBottom(5);
							cell1200.setBorderWidthLeft(0.2f);
							cell1200.setBorderColor(BaseColor.WHITE);

							PdfPCell cell1300 = new PdfPCell(new Paragraph(age + "/" + gender, mainContent));
							cell1300.setBorderWidth(0.2f);
							cell1300.setPaddingBottom(5);
							cell1300.setBorderColor(BaseColor.WHITE);

							/*
							 * For Mobile
							 */
							PdfPCell cell1400 = new PdfPCell(new Paragraph("Mobile No.", Font5));
							cell1400.setBorderWidth(0.01f);
							cell1400.setPaddingBottom(5);
							cell1400.setBorderWidthLeft(0.2f);
							cell1400.setBorderColor(BaseColor.WHITE);

							PdfPCell cell1500 = new PdfPCell(new Paragraph(mobile, mainContent));
							cell1500.setBorderWidth(0.2f);
							cell1500.setPaddingBottom(5);
							cell1500.setBorderColor(BaseColor.WHITE);

							/*
							 * For collection date
							 */
							PdfPCell cell1800 = new PdfPCell(new Paragraph("Collection Date", Font5));
							cell1800.setBorderWidth(0.01f);
							cell1800.setPaddingBottom(5);
							cell1800.setBorderWidthLeft(0.2f);
							cell1800.setBorderColor(BaseColor.WHITE);

							PdfPCell cell1900 = new PdfPCell(new Paragraph(collectionDate, mainContent));
							cell1900.setBorderWidth(0.2f);
							cell1900.setPaddingBottom(5);
							cell1900.setBorderColor(BaseColor.WHITE);

							/*
							 * For Collection time
							 */
							PdfPCell cell2000 = new PdfPCell(new Paragraph("Collection Time", Font5));
							cell2000.setBorderWidth(0.01f);
							cell2000.setPaddingBottom(5);
							cell2000.setBorderWidthLeft(0.2f);
							cell2000.setBorderColor(BaseColor.WHITE);

							PdfPCell cell2100 = new PdfPCell(new Paragraph(collectionTime, mainContent));
							cell2100.setBorderWidth(0.2f);
							cell2100.setPaddingBottom(5);
							cell2100.setBorderColor(BaseColor.WHITE);

							/*
							 * For Sample ID
							 */
							PdfPCell cell2200 = new PdfPCell(new Paragraph("Sample ID", Font5));
							cell2200.setBorderWidth(0.01f);
							cell2200.setPaddingBottom(15);
							cell2200.setBorderWidthLeft(0.2f);
							cell2200.setBorderColor(BaseColor.WHITE);

							PdfPCell cell2300 = new PdfPCell(new Paragraph(sampleID, mainContent));
							cell2300.setBorderWidth(0.2f);
							cell2300.setPaddingBottom(15);
							cell2300.setBorderColor(BaseColor.WHITE);

							/*
							 * For Referred by
							 */
							PdfPCell cell22100 = new PdfPCell(new Paragraph("Referred By", Font5));
							cell22100.setBorderWidth(0.01f);
							cell22100.setPaddingBottom(15);
							cell22100.setBorderWidthLeft(0.2f);
							cell22100.setBorder(Rectangle.NO_BORDER);
							cell22100.setBorderColor(BaseColor.WHITE);

							PdfPCell cell23100 = new PdfPCell(new Paragraph(referredBy, mainContent));
							cell23100.setBorderWidth(0.2f);
							cell23100.setPaddingBottom(15);
							cell23100.setBorder(Rectangle.NO_BORDER);
							cell23100.setBorderColor(BaseColor.WHITE);

							PdfPCell cell23200 = new PdfPCell(new Paragraph("", mainContent));
							cell23200.setBorderWidth(0.2f);
							cell23200.setColspan(4);
							cell23200.setBorderColorTop(BaseColor.BLACK);
							cell23200.setBorderColorBottom(BaseColor.WHITE);
							cell23200.setBorderColorLeft(BaseColor.WHITE);
							cell23200.setBorderColorRight(BaseColor.WHITE);
							cell23200.setBorderWidthLeft(0);
							cell23200.setBorderWidthRight(0);

							/*
							 * adding all cell to the table to create tabular structure
							 */

							table3.addCell(cell00);
							table3.addCell(cell600);
							table3.addCell(cell700);
							table3.addCell(cell1000);
							table3.addCell(cell1100);
							table3.addCell(cell1200);
							table3.addCell(cell1300);
							table3.addCell(cell1400);
							table3.addCell(cell1500);
							table3.addCell(cell1800);
							table3.addCell(cell1900);
							table3.addCell(cell2000);
							table3.addCell(cell2100);
							table3.addCell(cell2200);
							table3.addCell(cell2300);
							table3.addCell(cell22100);
							table3.addCell(cell23100);
							table3.addCell(cell23200);

							document.add(table3);

							// For test
							PdfPCell cell26 = new PdfPCell(new Paragraph("TEST DONE", Font6));
							cell26.setBorderWidth(0.5f);
							cell26.setPaddingBottom(8);
							cell26.setPaddingTop(15);
							cell26.setBorderColor(BaseColor.WHITE);

							// For normal range
							PdfPCell cell27 = new PdfPCell(new Paragraph("RESULT", Font6));
							cell27.setBorderWidth(0.5f);
							cell27.setPaddingBottom(8);
							cell27.setPaddingTop(15);
							cell27.setBorderColor(BaseColor.WHITE);

							// For observed value
							PdfPCell cell28 = new PdfPCell(new Paragraph("NORMAL RANGE", Font6));
							cell28.setBorderWidth(0.5f);
							cell28.setPaddingBottom(8);
							cell28.setPaddingTop(15);
							cell28.setBorderColor(BaseColor.WHITE);

							// table2.addCell(cell25);
							table2.addCell(cell26);
							table2.addCell(cell27);
							table2.addCell(cell28);

							maxRecordCount = 0;
						}

						String array1[] = testArray[i].split("===");

						String test = array1[0];

						String quantitativeValueStr = array1[2];

						String qualitativeValueStr = array1[1];

						String result = "";

						if (qualitativeValueStr == null || qualitativeValueStr == "") {

							result = quantitativeValueStr;

						} else if (qualitativeValueStr.isEmpty()) {

							result = quantitativeValueStr;

						} else {
							result = qualitativeValueStr;
						}

						form.setCBCProfileTest(test);

						form.setCBCProfileValue(result);

						form.setCBCProfileNormalValue(array1[3]);

						if (form.getCBCProfileValue().equals("NA") || result.equals("0") || result.equals("0.0")) {
							continue;
						} else {

							// For test
							PdfPCell cell30 = new PdfPCell(new Paragraph(form.getCBCProfileTest(), mainContent));
							cell30.setBorderWidth(0.5f);
							cell30.setPaddingBottom(5);
							// cell30.setHorizontalAlignment(Element.ALIGN_CENTER);
							cell30.setBorderColor(BaseColor.WHITE);

							// For normal range
							PdfPCell cell31 = null;

							if (form.getCBCProfileNormalValue().trim().contains(",")) {

								if (form.getCBCProfileNormalValue().contains(form.getCBCProfileValue())) {

									cell31 = new PdfPCell(new Paragraph("" + form.getCBCProfileValue(), mainContent));
									cell31.setBorderWidth(0.5f);
									cell31.setPaddingBottom(5);
									// cell31.setHorizontalAlignment(Element.ALIGN_CENTER);
									cell31.setBorderColor(BaseColor.WHITE);

								} else {

									cell31 = new PdfPCell(
											new Paragraph("" + form.getCBCProfileValue(), mainContent_abnormal));
									cell31.setBorderWidth(0.5f);
									cell31.setPaddingBottom(5);
									// cell31.setHorizontalAlignment(Element.ALIGN_CENTER);
									cell31.setBorderColor(BaseColor.WHITE);

								}
							} else if (form.getCBCProfileNormalValue().trim().contains(">")) {

								System.out.println("...." + form.getCBCProfileNormalValue());

								String normalRangeArr[] = form.getCBCProfileNormalValue().trim().substring(1).trim()
										.split(" ");

								double value = Double.parseDouble(normalRangeArr[0].trim());

								try {

									double resulValue = Double.parseDouble(form.getCBCProfileValue());

									if ((resulValue % 1 == 0)) {
										result = "" + (int) resulValue;
									}

									if (resulValue > value) {

										cell31 = new PdfPCell(
												new Paragraph("" + form.getCBCProfileValue(), mainContent));
										cell31.setBorderWidth(0.5f);
										cell31.setPaddingBottom(5);
										// cell31.setHorizontalAlignment(Element.ALIGN_CENTER);
										cell31.setBorderColor(BaseColor.WHITE);

									} else {

										cell31 = new PdfPCell(
												new Paragraph("" + form.getCBCProfileValue(), mainContent_abnormal));
										cell31.setBorderWidth(0.5f);
										cell31.setPaddingBottom(5);
										// cell31.setHorizontalAlignment(Element.ALIGN_CENTER);
										cell31.setBorderColor(BaseColor.WHITE);

									}

								} catch (Exception exception) {

									System.out.println("NumberFormatException occurred due to result value.."
											+ form.getCBCProfileValue());

									cell31 = new PdfPCell(
											new Paragraph("" + form.getCBCProfileValue(), mainContent_abnormal));
									cell31.setBorderWidth(0.5f);
									cell31.setPaddingBottom(5);
									// cell31.setHorizontalAlignment(Element.ALIGN_CENTER);
									cell31.setBorderColor(BaseColor.WHITE);
								}

							} else if (form.getCBCProfileNormalValue().trim().contains("<")) {

								System.out.println("...." + form.getCBCProfileNormalValue());

								String normalRangeArr[] = form.getCBCProfileNormalValue().trim().substring(1).trim()
										.split(" ");

								double value = Double.parseDouble(normalRangeArr[0].trim());

								try {

									double resultValue = Double.parseDouble(form.getCBCProfileValue());

									if ((resultValue % 1 == 0)) {
										form.setCBCProfileValue("" + (int) resultValue);
									}

									if (resultValue < value) {

										cell31 = new PdfPCell(
												new Paragraph("" + form.getCBCProfileValue(), mainContent));
										cell31.setBorderWidth(0.5f);
										cell31.setPaddingBottom(5);
										// cell31.setHorizontalAlignment(Element.ALIGN_CENTER);
										cell31.setBorderColor(BaseColor.WHITE);

									} else {

										cell31 = new PdfPCell(
												new Paragraph("" + form.getCBCProfileValue(), mainContent_abnormal));
										cell31.setBorderWidth(0.5f);
										cell31.setPaddingBottom(5);
										// cell31.setHorizontalAlignment(Element.ALIGN_CENTER);
										cell31.setBorderColor(BaseColor.WHITE);

									}

								} catch (Exception exception) {

									System.out.println("NumberFormatException occurred due to result value..."
											+ form.getCBCProfileValue());

									cell31 = new PdfPCell(
											new Paragraph("" + form.getCBCProfileValue(), mainContent_abnormal));
									cell31.setBorderWidth(0.5f);
									cell31.setPaddingBottom(5);
									// cell31.setHorizontalAlignment(Element.ALIGN_CENTER);
									cell31.setBorderColor(BaseColor.WHITE);
								}

							} else if (form.getCBCProfileNormalValue().matches(".*\\d.*")) {

								System.out.println("...." + form.getCBCProfileNormalValue());

								if (form.getCBCProfileNormalValue().contains(" ")) {

									String normalRangeArr[] = form.getCBCProfileNormalValue().trim().split(" ");

									if (normalRangeArr[1].trim().equals("-")) {

										// String rangeStrArr[] = normalRangeArr[0].split("-");

										double minVal = Double.parseDouble(normalRangeArr[0].trim());

										double maxVal = Double.parseDouble(normalRangeArr[2].trim());

										Range<Double> range = Range.between(minVal, maxVal);

										if (form.getCBCProfileValue().equals("NA")) {

											cell31 = new PdfPCell(
													new Paragraph("" + form.getCBCProfileValue(), mainContent));
											cell31.setBorderWidth(0.5f);
											cell31.setPaddingBottom(5);
											// cell31.setHorizontalAlignment(Element.ALIGN_CENTER);
											cell31.setBorderColor(BaseColor.WHITE);

										} else {

											try {

												double resultValue = Double.parseDouble(form.getCBCProfileValue());

												if ((resultValue % 1 == 0)) {
													form.setCBCProfileValue("" + (int) resultValue);
												}

												if (range.contains(resultValue)) {

													cell31 = new PdfPCell(
															new Paragraph("" + form.getCBCProfileValue(), mainContent));
													cell31.setBorderWidth(0.5f);
													cell31.setPaddingBottom(5);
													// cell31.setHorizontalAlignment(Element.ALIGN_CENTER);
													cell31.setBorderColor(BaseColor.WHITE);

												} else {

													cell31 = new PdfPCell(new Paragraph("" + form.getCBCProfileValue(),
															mainContent_abnormal));
													cell31.setBorderWidth(0.5f);
													cell31.setPaddingBottom(5);
													// cell31.setHorizontalAlignment(Element.ALIGN_CENTER);
													cell31.setBorderColor(BaseColor.WHITE);

												}

											} catch (Exception exception) {

												System.out
														.println("NumberFormatException occurred due to result value..."
																+ form.getCBCProfileValue());

												cell31 = new PdfPCell(new Paragraph("" + form.getCBCProfileValue(),
														mainContent_abnormal));
												cell31.setBorderWidth(0.5f);
												cell31.setPaddingBottom(5);
												// cell31.setHorizontalAlignment(Element.ALIGN_CENTER);
												cell31.setBorderColor(BaseColor.WHITE);
											}

										}

									} else {

										String rangeStrArr[] = normalRangeArr[0].split("-");

										double minVal = Double.parseDouble(rangeStrArr[0].trim());

										double maxVal = Double.parseDouble(rangeStrArr[1].trim());

										Range<Double> range = Range.between(minVal, maxVal);

										if (form.getCBCProfileValue().equals("NA")) {
											cell31 = new PdfPCell(
													new Paragraph("" + form.getCBCProfileValue(), mainContent));
											cell31.setBorderWidth(0.5f);
											cell31.setPaddingBottom(5);
											// cell31.setHorizontalAlignment(Element.ALIGN_CENTER);
											cell31.setBorderColor(BaseColor.WHITE);
										} else {

											try {

												double resultValue = Double.parseDouble(form.getCBCProfileValue());

												if ((resultValue % 1 == 0)) {
													form.setCBCProfileValue("" + (int) resultValue);
												}

												if (range.contains(resultValue)) {

													cell31 = new PdfPCell(
															new Paragraph("" + form.getCBCProfileValue(), mainContent));
													cell31.setBorderWidth(0.5f);
													cell31.setPaddingBottom(5);
													// cell31.setHorizontalAlignment(Element.ALIGN_CENTER);
													cell31.setBorderColor(BaseColor.WHITE);

												} else {

													cell31 = new PdfPCell(new Paragraph("" + form.getCBCProfileValue(),
															mainContent_abnormal));
													cell31.setBorderWidth(0.5f);
													cell31.setPaddingBottom(5);
													// cell31.setHorizontalAlignment(Element.ALIGN_CENTER);
													cell31.setBorderColor(BaseColor.WHITE);

												}

											} catch (Exception exception) {

												System.out
														.println("NumberFormatException occurred due to result value..."
																+ form.getCBCProfileValue());

												cell31 = new PdfPCell(new Paragraph("" + form.getCBCProfileValue(),
														mainContent_abnormal));
												cell31.setBorderWidth(0.5f);
												cell31.setPaddingBottom(5);
												// cell31.setHorizontalAlignment(Element.ALIGN_CENTER);
												cell31.setBorderColor(BaseColor.WHITE);
											}

										}

									}

								} else {

									if (form.getCBCProfileValue().equals(form.getCBCProfileNormalValue())) {

										cell31 = new PdfPCell(
												new Paragraph("" + form.getCBCProfileValue(), mainContent));
										cell31.setBorderWidth(0.5f);
										cell31.setPaddingBottom(5);
										// cell31.setHorizontalAlignment(Element.ALIGN_CENTER);
										cell31.setBorderColor(BaseColor.WHITE);

									} else {

										cell31 = new PdfPCell(
												new Paragraph("" + form.getCBCProfileValue(), mainContent_abnormal));
										cell31.setBorderWidth(0.5f);
										cell31.setPaddingBottom(5);
										// cell31.setHorizontalAlignment(Element.ALIGN_CENTER);
										cell31.setBorderColor(BaseColor.WHITE);

									}

								}

							} else {

								if (form.getCBCProfileNormalValue().toLowerCase().trim()
										.equals(form.getCBCProfileValue().toLowerCase().trim())) {

									cell31 = new PdfPCell(new Paragraph("" + form.getCBCProfileValue(), mainContent));
									cell31.setBorderWidth(0.5f);
									cell31.setPaddingBottom(5);
									// cell31.setHorizontalAlignment(Element.ALIGN_CENTER);
									cell31.setBorderColor(BaseColor.WHITE);

								} else if (form.getCBCProfileNormalValue().toLowerCase()
										.contains(form.getCBCProfileValue().toLowerCase())) {
									cell31 = new PdfPCell(new Paragraph("" + form.getCBCProfileValue(), mainContent));
									cell31.setBorderWidth(0.5f);
									cell31.setPaddingBottom(5);
									// cell31.setHorizontalAlignment(Element.ALIGN_CENTER);
									cell31.setBorderColor(BaseColor.WHITE);
								} else {
									cell31 = new PdfPCell(
											new Paragraph("" + form.getCBCProfileValue(), mainContent_abnormal));
									cell31.setBorderWidth(0.5f);
									cell31.setPaddingBottom(5);
									// cell31.setHorizontalAlignment(Element.ALIGN_CENTER);
									cell31.setBorderColor(BaseColor.WHITE);
								}

							}

							// checking whether to include of exclude the normal values for priting by
							// checking whether the isExcludeFlag is off or on.
							boolean excludeFlag = patientDAOInf.isNormalValueExclude(form.getCBCProfileTest(), "");

							boolean showNormalRange = patientDAOInf.showNormalRange(form.getCBCProfileTest(), "");

							if (excludeFlag) {

								// For observed value
								PdfPCell cell32 = new PdfPCell(new Paragraph("", mainContent));
								cell32.setBorderWidth(0.5f);
								cell32.setPaddingBottom(5);
								// cell32.setHorizontalAlignment(Element.ALIGN_CENTER);
								cell32.setBorderColor(BaseColor.WHITE);

								// table2.addCell(cell29);
								table2.addCell(cell30);
								table2.addCell(cell31);
								table2.addCell(cell32);

							} else {

								if (showNormalRange) {

									// retrieving normal range description for the test if any
									String normalRangeDesc = patientDAOInf
											.retrieveTestNormalRangeDesc(form.getCBCProfileTest(), "");

									// For observed value
									PdfPCell cell32 = new PdfPCell(new Paragraph("" + normalRangeDesc, mainContent));
									cell32.setBorderWidth(0.5f);
									cell32.setPaddingBottom(5);
									// cell32.setHorizontalAlignment(Element.ALIGN_CENTER);
									cell32.setBorderColor(BaseColor.WHITE);

									// table2.addCell(cell29);
									table2.addCell(cell30);
									table2.addCell(cell31);
									table2.addCell(cell32);

								} else {

									// For observed value
									PdfPCell cell32 = new PdfPCell(
											new Paragraph("" + form.getCBCProfileNormalValue(), mainContent));
									cell32.setBorderWidth(0.5f);
									cell32.setPaddingBottom(5);
									// cell32.setHorizontalAlignment(Element.ALIGN_CENTER);
									cell32.setBorderColor(BaseColor.WHITE);

									// table2.addCell(cell29);
									table2.addCell(cell30);
									table2.addCell(cell31);
									table2.addCell(cell32);

								}

							}

							// retrieving remark for the test if any
							String remark = patientDAOInf.retrieveTestRemark(form.getCBCProfileTest(), "");

							if (remark == null || remark == "") {
								continue;
							} else if (remark.isEmpty()) {
								continue;
							} else {

								// For remark
								PdfPCell cell32 = new PdfPCell(new Paragraph("" + remark, mainContent1));
								cell32.setBorderWidth(0.5f);
								cell32.setPaddingTop(-2);
								cell32.setPaddingBottom(5);
								cell32.setColspan(3);
								cell32.setBorderColor(BaseColor.WHITE);

								table2.addCell(cell32);

							}

							if (showNormalRange && form.getCBCProfileTest().contains("Beta")) {

								// retrieving normal range description for the test if any
								/*
								 * String normalRangeDesc =
								 * patientDAOInf.retrieveTestNormalRangeDesc(form.getCBCProfileTest(), "");
								 * 
								 * // For Normal range description PdfPCell cell32 = new PdfPCell(new
								 * Paragraph("" + normalRangeDesc, mainContent)); cell32.setBorderWidth(0.5f);
								 * cell32.setPaddingBottom(5); cell32.setColspan(3);
								 * cell32.setBorderColor(BaseColor.BLACK);
								 */

								PdfPCell cell302 = new PdfPCell(new Paragraph("", Font5));
								cell302.setPaddingTop(5);
								cell302.setColspan(3);
								cell302.setBorderColor(BaseColor.WHITE);

								// For remark
								PdfPCell cell32 = new PdfPCell(
										new Paragraph("pregnant woman \n (weeks since LMP*)", Font5));
								cell32.setBorderWidth(0.5f);
								cell32.setPaddingBottom(5);
								cell32.setHorizontalAlignment(Element.ALIGN_CENTER);
								cell32.setBorderColor(BaseColor.BLACK);

								PdfPCell cell33 = new PdfPCell(
										new Paragraph("Total Î²HCG level [mlU/mL] \n range", Font5));
								cell33.setBorderWidth(0.1f);
								cell33.setPaddingBottom(5);
								cell33.setPaddingTop(5);
								cell33.setColspan(2);
								cell33.setHorizontalAlignment(Element.ALIGN_CENTER);
								cell33.setBorderColor(BaseColor.BLACK);

								table2.addCell(cell302);
								table2.addCell(cell32);
								table2.addCell(cell33);

								for (int j = 0; j < rangelevel.length; j++) {

									String[] levelVal = rangelevel[j].split("#");

									PdfPCell cell35 = new PdfPCell(new Paragraph("" + levelVal[0], mainContent));
									cell35.setBorderWidth(0.5f);
									cell35.setPaddingBottom(5);
									cell35.setHorizontalAlignment(Element.ALIGN_CENTER);
									cell35.setBorderColor(BaseColor.BLACK);

									PdfPCell cell36 = new PdfPCell(new Paragraph("" + levelVal[1], mainContent));
									cell36.setBorderWidth(0.1f);
									cell36.setPaddingBottom(5);
									cell36.setHorizontalAlignment(Element.ALIGN_CENTER);
									cell36.setColspan(2);
									cell36.setBorderColor(BaseColor.BLACK);

									table2.addCell(cell35);
									table2.addCell(cell36);
								}

							}

						}

					}

					count++;

				}

			}

			/*
			 * For conclusion/comment
			 */
			PdfPCell cell29 = new PdfPCell(new Paragraph("Conclusion/comment", Font5));
			cell29.setBorderWidth(0.5f);
			cell29.setBorderColorTop(BaseColor.WHITE);
			cell29.setPaddingTop(10);
			cell29.setColspan(3);
			cell29.setPaddingBottom(5);
			cell29.setBorderWidthLeft(0.2f);
			cell29.setBorderColor(BaseColor.WHITE);

			PdfPCell cell30 = new PdfPCell(new Paragraph(comment, mainContent));
			cell30.setBorderWidth(0.2f);
			cell30.setPaddingBottom(5);
			cell30.setPaddingLeft(10);
			cell30.setColspan(3);
			cell30.setBorderColor(BaseColor.WHITE);

			table2.addCell(cell29);
			table2.addCell(cell30);

			document.add(table2);

			// For templates
			for (PatientForm form : templateData) {
				System.out.println("inside for...");
				document.newPage();

				Table tableN = new Table(1);

				Cell cellN = new Cell();

				/*
				 * For remaining details
				 * 
				 * 
				 * PdfPTable table4 = new PdfPTable(2); table4.setWidthPercentage(100);
				 * table4.setTotalWidth(530); Rectangle rect3 = new Rectangle(270, 700);
				 * table4.setWidthPercentage(new float[] { 170, 100 }, rect3);
				 * 
				 * PdfPCell cell81 = new PdfPCell(new Paragraph("", Font5));
				 * cell81.setBorderWidth(0.01f); cell81.setPaddingBottom(2);
				 * cell81.setPaddingTop(10); cell81.setColspan(2);
				 * cell81.setBorderColor(BaseColor.WHITE);
				 */

				List<IElement> elements = HtmlConverter
						.convertToElements(new ByteArrayInputStream(form.getTemplate().getBytes()));

				/*
				 * for (IElement element : elements) { if (element instanceof Paragraph) {
				 * document.add((Paragraph) element); } }
				 */

				for (IElement element : elements) {
					cellN.add((IBlockElement) element);
				}

				table.addCell(cell);

				// Add the table to the document
				document.add(table);

			}

			/*
			 * For remaining details
			 */

			PdfPTable table4 = new PdfPTable(2);
			table4.setWidthPercentage(100);
			table4.setTotalWidth(530);
			Rectangle rect3 = new Rectangle(270, 700);
			table4.setWidthPercentage(new float[] { 170, 100 }, rect3);

			/*
			 * For receipt by
			 */

			PdfPCell cell81 = new PdfPCell(new Paragraph("", Font5));
			cell81.setBorderWidth(0.01f);
			cell81.setPaddingBottom(2);
			cell81.setPaddingTop(10);
			cell81.setBorderColor(BaseColor.WHITE);

			/*
			 * PdfPCell cell82 = new PdfPCell(new Paragraph("", mainContent));
			 * cell82.setBorderWidth(0.01f); cell82.setPaddingBottom(2);
			 * cell82.setPaddingTop(10); cell82.setBorderColor(BaseColor.WHITE);
			 */
			/*
			 * Table for Prescription image
			 */
			PdfPTable imageTable = new PdfPTable(2);
			imageTable.setWidthPercentage(100);
			imageTable.setWidths(new int[] { 2, 2 });

			PdfPCell imageCell1 = new PdfPCell(signatureImg, true);
			imageCell1.setBorderColor(BaseColor.WHITE);
			imageCell1.setHorizontalAlignment(Element.ALIGN_RIGHT);

			PdfPCell imageCell2 = new PdfPCell(new Paragraph("", Font5));
			imageCell2.setBorderColor(BaseColor.WHITE);

			imageTable.addCell(imageCell1);
			imageTable.addCell(imageCell2);

			/*
			 * For Receivers Signature
			 */

			PdfPCell cell83 = new PdfPCell(imageTable);
			cell83.setBorderWidth(0.01f);
			cell83.setPaddingBottom(0);
			cell83.setPaddingTop(2);
			cell83.setPaddingLeft(80);
			cell83.setHorizontalAlignment(Element.ALIGN_RIGHT);
			cell83.setBorderColor(BaseColor.WHITE);

			PdfPCell cell811 = new PdfPCell(new Paragraph(fullName, Font5));
			cell811.setBorderWidth(0.01f);
			cell811.setPaddingBottom(2);
			cell811.setPaddingTop(2);
			cell811.setBorderColor(BaseColor.WHITE);

			PdfPCell cell84 = new PdfPCell(
					new Paragraph(MDMap.get("MDName") + "\n" + MDMap.get("MDQualification") + "", Font5));
			cell84.setBorderWidth(0.01f);
			cell84.setPaddingBottom(2);
			cell84.setPaddingTop(2);
			// cell84.setColspan(2);
			cell84.setPaddingRight(50);
			cell84.setHorizontalAlignment(Element.ALIGN_RIGHT);
			cell84.setBorderColor(BaseColor.WHITE);

			table4.addCell(cell81);
			// table4.addCell(cell82);
			table4.addCell(cell83);
			table4.addCell(cell811);
			table4.addCell(cell84);

			// document.add(table4);

			FooterTable3 event = new FooterTable3(table4);
			writer.setPageEvent(event);

			document.close();

			System.out.println("Successfully written and generated lab test Report PDF");

			status = "success";

		} catch (Exception exception) {

			exception.printStackTrace();
			status = "error";
		}

		return status;
	}

	public static String formatAges(String ageString) {

		String[] ageEntries = ageString.split("\\|\\|");

		StringBuilder formattedAges = new StringBuilder();

		formattedAges.append(ageEntries.length).append(" Ages: ");

		for (int i = 0; i < ageEntries.length; i++) {
			String[] yearMonth = ageEntries[i].split(",");

			String years = yearMonth.length > 0 ? yearMonth[0] : "0";
			String months = yearMonth.length > 1 ? yearMonth[1] : "0";

			formattedAges.append("[").append(years).append(" Year ").append(months).append(" Month]");

			if (i < ageEntries.length - 1) {
				formattedAges.append(", ");
			}
		}

		return formattedAges.toString();
	}

	String safeGetString(JsonObject jsonObject, String key) {
		JsonElement element = jsonObject.get(key);
		return (element != null && !element.isJsonNull()) ? element.getAsString() : "";
	}

	public String convertUSGReport(String path, int patientID, int visitID, String realPath, String pdfOutFileName) {
		PatientDAOInf patientDAOInf = new PatientDAOImpl();
		String status;
		
        SimpleDateFormat inputFormat = new SimpleDateFormat("yyyy-MM-dd");
        SimpleDateFormat outputFormat = new SimpleDateFormat("dd-MM-yyyy");
		
		JSONObject values = patientDAOInf.retrivePatientDetailsByID(patientID, visitID, "");

		Boolean isNormal = patientDAOInf.retrieveNormalBoolVal(visitID);

		String jsonString = values.toJSONString();

		JsonParser parser = new JsonParser();
		JsonElement rootElement = parser.parse(jsonString);
		JsonObject rootObject = rootElement.getAsJsonObject();
		JsonObject releaseObject = rootObject.getAsJsonArray("Release").get(0).getAsJsonObject();
		JsonObject patientDetailsObject = releaseObject.getAsJsonObject("patientDetails");

		String pFirstName = safeGetString(patientDetailsObject, "pFirstName");
		String pMiddleName = safeGetString(patientDetailsObject, "pMiddleName");
		String pLastName = safeGetString(patientDetailsObject, "pLastName");
		String pAge = safeGetString(patientDetailsObject, "pAge");
		
		String pNameAndAge;
		String pNameOnly;
		if (pMiddleName.isEmpty() || pMiddleName.equals("null")) {
			pNameAndAge = pFirstName + " " + pLastName + " [ " + pAge + " Years" + " ]";
			pNameOnly = pFirstName + " " + pLastName;
		} else {
			pNameAndAge = pFirstName + " " + pMiddleName + " " + pLastName + " [ " + pAge + " Years" + " ]";
			pNameOnly = pFirstName + " " + pMiddleName + " " + pLastName;
		}

		String numberOfSons = safeGetString(patientDetailsObject, "numberOfSons");
		String numberOfDaughters = safeGetString(patientDetailsObject, "numberOfDaughters");

		int totalChildren = 0;
		int numberOfSonsInt = safeParseInt(numberOfSons);
		int numberOfDaughtersInt = safeParseInt(numberOfDaughters);

		totalChildren = numberOfSonsInt + numberOfDaughtersInt;
		String totalChildrenString = Integer.toString(totalChildren);

		String formattedAgeOfSons = formatAges(safeGetString(patientDetailsObject, "ageOfSons"));
		String formattedAgeOfDaughters = formatAges(safeGetString(patientDetailsObject, "ageOfDaughters"));
		String pMobile = safeGetString(patientDetailsObject, "pMobile");
		String pAddress = safeGetString(patientDetailsObject, "pAddress");
		String addressWithContact = pAddress + "\r\n" + "Mob: " + pMobile;

		String pReltv = safeGetString(patientDetailsObject, "pReltv");
		String pDOB = safeGetString(patientDetailsObject, "pDOB");
		String pGender = safeGetString(patientDetailsObject, "pGender");
		String estimatedDueDate = safeGetString(patientDetailsObject, "estimatedDueDate");
		String lastMenstrualPeriod = safeGetString(patientDetailsObject, "lastMenstrualPeriod");
		try {
			Date lmpDate = inputFormat.parse(lastMenstrualPeriod);
			lastMenstrualPeriod = outputFormat.format(lmpDate);
		} catch (ParseException e) {
			e.printStackTrace();
		}
		
		String weekOfPregnancy = safeGetString(patientDetailsObject, "weekOfPregnancy");
		String field8Val = "Date: " + lastMenstrualPeriod + " Weeks: " + weekOfPregnancy;
		
		String visitDate = safeGetString(patientDetailsObject, "visitDate");
		try {
			Date date = inputFormat.parse(visitDate);
			visitDate = outputFormat.format(date);
		} catch (ParseException e) {
			e.printStackTrace();
		}
		String reffClinicAddress = safeGetString(patientDetailsObject, "reffClinicAddress");
		String reffDoctorName = safeGetString(patientDetailsObject, "reffDoctorName");
		String reffClinicName = safeGetString(patientDetailsObject, "reffClinicName");
		String refferedByDetails = reffDoctorName + "\r\n" + reffClinicName + " " + reffClinicAddress;

		String radiologyName = safeGetString(patientDetailsObject, "radiologyName");
		String radiologyRegNo = safeGetString(patientDetailsObject, "radiologyRegNo");
		String doctorDetails = radiologyName + " (" + radiologyRegNo + ") ";
		String radiologyPlace = safeGetString(patientDetailsObject, "radiologyPlace");

		PdfReader reader = null;
		PdfStamper stamper = null;

		try {
			String src = path;
			File file = new File(realPath + pdfOutFileName);

			reader = new PdfReader(src);
			stamper = new PdfStamper(reader, new FileOutputStream(file));
			AcroFields form = stamper.getAcroFields();

			form.setField("patientName", pNameAndAge);
			form.setField("totalChildren", totalChildrenString);
			form.setField("totalSonsWithAges", formattedAgeOfSons);
			form.setField("totalDaughtersWithAges", formattedAgeOfDaughters);
			form.setField("relativeName", pReltv);
			form.setField("patientAddressWithContact", addressWithContact);
			form.setField("referredByDoctorOrCenter", refferedByDetails);
			form.setField("lastMenstrualPeriod", field8Val);
			form.setField("patientNameOnly", pNameOnly);
			form.setField("performingDoctorName", doctorDetails);
			form.setField("doctorSignatureWithRegNo", doctorDetails);
			form.setField("dateDeclarationObtained", visitDate);
			form.setField("dateProcedurePerformed", visitDate);
			form.setField("prenatalDiagnosisResult", pNameOnly + " on " + visitDate);
			form.setField("formGConsentDate", "-- Not Applicable --");
			form.setField("invasiveProcedureComplications", "-- Not Applicable --");
			form.setField("invasiveProcedureCarriedOut", "-- Not Applicable --");
			form.setField("diagnosisProcedureIndication", "-- Not Applicable --");
			form.setField("familyMedicalHistory", "-- Not Applicable --");
			form.setField("invasiveProcedureDoctorName", "-- Not Applicable --");
			form.setField("mtpIndication", "-- Not Applicable --");
			form.setField("visitDate", visitDate);
			form.setField("place", radiologyPlace);

			if (isNormal == null) {
				form.setField("resultNormal", "");
				form.setField("resultAbnormal", "");
			} else if (isNormal) {
				form.setField("resultAbnormal", "------------");
			} else {
				form.setField("resultNormal", "----------");
			}

			stamper.setFormFlattening(true);

			stamper.close();
			reader.close();

			status = "success";
		} catch (Exception e) {
			e.printStackTrace();
			status = "error";
		} finally {
			try {
				if (stamper != null)
					stamper.close();
				if (reader != null)
					reader.close();
			} catch (Exception e) {
				e.printStackTrace();
			}
		}

		return status;
	}

	/**
	 * Safely parses an integer from a string, returning 0 if the conversion fails.
	 */
	private int safeParseInt(String value) {
		try {
			return Integer.parseInt(value);
		} catch (NumberFormatException e) {
			return 0;
		}
	}

}
